{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/img/360-4.png","path":"img/360-4.png","modified":0,"renderable":0},{"_id":"source/img/Falcon-font.png","path":"img/Falcon-font.png","modified":0,"renderable":0},{"_id":"source/img/SQLite___Core_Data.png","path":"img/SQLite___Core_Data.png","modified":0,"renderable":0},{"_id":"source/img/alipay.png","path":"img/alipay.png","modified":0,"renderable":0},{"_id":"source/img/android-scheduler_deep-doze.png","path":"img/android-scheduler_deep-doze.png","modified":0,"renderable":0},{"_id":"source/img/android-scheduler_light-doze.png","path":"img/android-scheduler_light-doze.png","modified":0,"renderable":0},{"_id":"source/img/android-scheduler_syncs-adapter.png","path":"img/android-scheduler_syncs-adapter.png","modified":0,"renderable":0},{"_id":"source/img/android-test_2.png","path":"img/android-test_2.png","modified":0,"renderable":0},{"_id":"source/img/android-test_3.png","path":"img/android-test_3.png","modified":0,"renderable":0},{"_id":"source/img/android-test_4.png","path":"img/android-test_4.png","modified":0,"renderable":0},{"_id":"source/img/android-test_5.png","path":"img/android-test_5.png","modified":0,"renderable":0},{"_id":"source/img/android_dvm_art-1.png","path":"img/android_dvm_art-1.png","modified":0,"renderable":0},{"_id":"source/img/android_dynamic_dex.png","path":"img/android_dynamic_dex.png","modified":0,"renderable":0},{"_id":"source/img/android_handler_looper-1.png","path":"img/android_handler_looper-1.png","modified":0,"renderable":0},{"_id":"source/img/android_view-1.png","path":"img/android_view-1.png","modified":0,"renderable":0},{"_id":"source/img/android_view-2.png","path":"img/android_view-2.png","modified":0,"renderable":0},{"_id":"source/img/architecture-builder-method.png","path":"img/architecture-builder-method.png","modified":0,"renderable":0},{"_id":"source/img/architecture-bridge-method.png","path":"img/architecture-bridge-method.png","modified":0,"renderable":0},{"_id":"source/img/architecture-class-relate.png","path":"img/architecture-class-relate.png","modified":0,"renderable":0},{"_id":"source/img/architecture-composite-method.png","path":"img/architecture-composite-method.png","modified":0,"renderable":0},{"_id":"source/img/architecture-decorator-method.png","path":"img/architecture-decorator-method.png","modified":0,"renderable":0},{"_id":"source/img/architecture-facade-method.png","path":"img/architecture-facade-method.png","modified":0,"renderable":0},{"_id":"source/img/architecture-factor-method.png","path":"img/architecture-factor-method.png","modified":0,"renderable":0},{"_id":"source/img/architecture-flyweight-method.png","path":"img/architecture-flyweight-method.png","modified":0,"renderable":0},{"_id":"source/img/architecture-mvvm-c.png","path":"img/architecture-mvvm-c.png","modified":0,"renderable":0},{"_id":"source/img/architecture-mvvm.png","path":"img/architecture-mvvm.png","modified":0,"renderable":0},{"_id":"source/img/architecture-proxy-method.png","path":"img/architecture-proxy-method.png","modified":0,"renderable":0},{"_id":"source/img/architecture-observer-method.png","path":"img/architecture-observer-method.png","modified":0,"renderable":0},{"_id":"source/img/architecture-template-method.png","path":"img/architecture-template-method.png","modified":0,"renderable":0},{"_id":"source/img/architecture-strategy-method.png","path":"img/architecture-strategy-method.png","modified":0,"renderable":0},{"_id":"source/img/async-1.png","path":"img/async-1.png","modified":0,"renderable":0},{"_id":"source/img/constraint-layout_anchorConnection.png","path":"img/constraint-layout_anchorConnection.png","modified":0,"renderable":0},{"_id":"source/img/architecutre-mvp-mvc.gif","path":"img/architecutre-mvp-mvc.gif","modified":0,"renderable":0},{"_id":"source/img/cocos2d-1.png","path":"img/cocos2d-1.png","modified":0,"renderable":0},{"_id":"source/img/constraint-layout_classHierarchy.png","path":"img/constraint-layout_classHierarchy.png","modified":0,"renderable":0},{"_id":"source/img/constraint-layout_constraintWidget.png","path":"img/constraint-layout_constraintWidget.png","modified":0,"renderable":0},{"_id":"source/img/density_dpi-2.png","path":"img/density_dpi-2.png","modified":0,"renderable":0},{"_id":"source/img/density_dpi-1.png","path":"img/density_dpi-1.png","modified":0,"renderable":0},{"_id":"source/img/density_dpi-4.png","path":"img/density_dpi-4.png","modified":0,"renderable":0},{"_id":"source/img/constraint-layout_measureFlow.png","path":"img/constraint-layout_measureFlow.png","modified":0,"renderable":0},{"_id":"source/img/density_dpi-3.png","path":"img/density_dpi-3.png","modified":0,"renderable":0},{"_id":"source/img/hybrid-2.png","path":"img/hybrid-2.png","modified":0,"renderable":0},{"_id":"source/img/hybrid-1.png","path":"img/hybrid-1.png","modified":0,"renderable":0},{"_id":"source/img/javathread-1.png","path":"img/javathread-1.png","modified":0,"renderable":0},{"_id":"source/img/leakcanary-2.png","path":"img/leakcanary-2.png","modified":0,"renderable":0},{"_id":"source/img/leakcanary-4.png","path":"img/leakcanary-4.png","modified":0,"renderable":0},{"_id":"source/img/lls_architecture_10.png","path":"img/lls_architecture_10.png","modified":0,"renderable":0},{"_id":"source/img/lls_architecture_1.png","path":"img/lls_architecture_1.png","modified":0,"renderable":0},{"_id":"source/img/lls_architecture_11.png","path":"img/lls_architecture_11.png","modified":0,"renderable":0},{"_id":"source/img/lls_architecture_12.png","path":"img/lls_architecture_12.png","modified":0,"renderable":0},{"_id":"source/img/lls_architecture_3.png","path":"img/lls_architecture_3.png","modified":0,"renderable":0},{"_id":"source/img/lls_architecture_4.png","path":"img/lls_architecture_4.png","modified":0,"renderable":0},{"_id":"source/img/lls_architecture_5.png","path":"img/lls_architecture_5.png","modified":0,"renderable":0},{"_id":"source/img/lls_architecture_6.png","path":"img/lls_architecture_6.png","modified":0,"renderable":0},{"_id":"source/img/lls_architecture_9.png","path":"img/lls_architecture_9.png","modified":0,"renderable":0},{"_id":"source/img/mars-1.png","path":"img/mars-1.png","modified":0,"renderable":0},{"_id":"source/img/mars-11.png","path":"img/mars-11.png","modified":0,"renderable":0},{"_id":"source/img/mars-12.png","path":"img/mars-12.png","modified":0,"renderable":0},{"_id":"source/img/mars-13.png","path":"img/mars-13.png","modified":0,"renderable":0},{"_id":"source/img/mars-3.png","path":"img/mars-3.png","modified":0,"renderable":0},{"_id":"source/img/mars-4.png","path":"img/mars-4.png","modified":0,"renderable":0},{"_id":"source/img/mars-6.png","path":"img/mars-6.png","modified":0,"renderable":0},{"_id":"source/img/mars-5.png","path":"img/mars-5.png","modified":0,"renderable":0},{"_id":"source/img/mars-7.png","path":"img/mars-7.png","modified":0,"renderable":0},{"_id":"source/img/mars-8.png","path":"img/mars-8.png","modified":0,"renderable":0},{"_id":"source/img/ndk-2.png","path":"img/ndk-2.png","modified":0,"renderable":0},{"_id":"source/img/ndk-3.jpeg","path":"img/ndk-3.jpeg","modified":0,"renderable":0},{"_id":"source/img/ndk-1.png","path":"img/ndk-1.png","modified":0,"renderable":0},{"_id":"source/img/network_basic-1.png","path":"img/network_basic-1.png","modified":0,"renderable":0},{"_id":"source/img/network_basic-2.png","path":"img/network_basic-2.png","modified":0,"renderable":0},{"_id":"source/img/network_basic-3.png","path":"img/network_basic-3.png","modified":0,"renderable":0},{"_id":"source/img/network_basic-5.png","path":"img/network_basic-5.png","modified":0,"renderable":0},{"_id":"source/img/network_basic-4.png","path":"img/network_basic-4.png","modified":0,"renderable":0},{"_id":"source/img/network_basic-6.png","path":"img/network_basic-6.png","modified":0,"renderable":0},{"_id":"source/img/newifi-1.png","path":"img/newifi-1.png","modified":0,"renderable":0},{"_id":"source/img/newifi-2.png","path":"img/newifi-2.png","modified":0,"renderable":0},{"_id":"source/img/newifi-3.png","path":"img/newifi-3.png","modified":0,"renderable":0},{"_id":"source/img/notification_best_practise-1.png","path":"img/notification_best_practise-1.png","modified":0,"renderable":0},{"_id":"source/img/notification_best_practise-message-style.png","path":"img/notification_best_practise-message-style.png","modified":0,"renderable":0},{"_id":"source/img/notification_best_practise-direct-reply.png","path":"img/notification_best_practise-direct-reply.png","modified":0,"renderable":0},{"_id":"source/img/notification_best_practise-bundled.png","path":"img/notification_best_practise-bundled.png","modified":0,"renderable":0},{"_id":"source/img/openwrt_xunlei-fastdick-3.png","path":"img/openwrt_xunlei-fastdick-3.png","modified":0,"renderable":0},{"_id":"source/img/openwrt_xunlei-fastdick-2.png","path":"img/openwrt_xunlei-fastdick-2.png","modified":0,"renderable":0},{"_id":"source/img/php-mysql-2.jpg","path":"img/php-mysql-2.jpg","modified":0,"renderable":0},{"_id":"source/img/remote-app-2.png","path":"img/remote-app-2.png","modified":0,"renderable":0},{"_id":"source/img/php-mysql-1.jpg","path":"img/php-mysql-1.jpg","modified":0,"renderable":0},{"_id":"source/img/remote-app-1.png","path":"img/remote-app-1.png","modified":0,"renderable":0},{"_id":"source/img/remote-app-5.png","path":"img/remote-app-5.png","modified":0,"renderable":0},{"_id":"source/img/remote-app-3.png","path":"img/remote-app-3.png","modified":0,"renderable":0},{"_id":"source/img/remote-app-6.png","path":"img/remote-app-6.png","modified":0,"renderable":0},{"_id":"source/img/remote-app-7.png","path":"img/remote-app-7.png","modified":0,"renderable":0},{"_id":"source/img/remote-app-4.png","path":"img/remote-app-4.png","modified":0,"renderable":0},{"_id":"source/img/remote-app-8.jpg","path":"img/remote-app-8.jpg","modified":0,"renderable":0},{"_id":"source/img/ruby_guide_2.png","path":"img/ruby_guide_2.png","modified":0,"renderable":0},{"_id":"source/img/rxjava-filter.png","path":"img/rxjava-filter.png","modified":0,"renderable":0},{"_id":"source/img/rxjava-flatmap.png","path":"img/rxjava-flatmap.png","modified":0,"renderable":0},{"_id":"source/img/rxjava-map.png","path":"img/rxjava-map.png","modified":0,"renderable":0},{"_id":"source/img/rxjava-from.png","path":"img/rxjava-from.png","modified":0,"renderable":0},{"_id":"source/img/shanxi-1.png","path":"img/shanxi-1.png","modified":0,"renderable":0},{"_id":"source/img/rxjava-take.png","path":"img/rxjava-take.png","modified":0,"renderable":0},{"_id":"source/img/shadows_everywhere-1.png","path":"img/shadows_everywhere-1.png","modified":0,"renderable":0},{"_id":"source/img/svg-k-1.png","path":"img/svg-k-1.png","modified":0,"renderable":0},{"_id":"source/img/svg-parse-1.jpg","path":"img/svg-parse-1.jpg","modified":0,"renderable":0},{"_id":"source/img/svg-parse-3.jpg","path":"img/svg-parse-3.jpg","modified":0,"renderable":0},{"_id":"source/img/svg-parse-4.jpg","path":"img/svg-parse-4.jpg","modified":0,"renderable":0},{"_id":"source/img/svg-k-2.png","path":"img/svg-k-2.png","modified":0,"renderable":0},{"_id":"source/img/svg-parse-5.jpg","path":"img/svg-parse-5.jpg","modified":0,"renderable":0},{"_id":"source/img/svg-s-call.png","path":"img/svg-s-call.png","modified":0,"renderable":0},{"_id":"source/img/svg-s-2.png","path":"img/svg-s-2.png","modified":0,"renderable":0},{"_id":"source/img/svg-s-1.png","path":"img/svg-s-1.png","modified":0,"renderable":0},{"_id":"source/img/svg-s-line-2.png","path":"img/svg-s-line-2.png","modified":0,"renderable":0},{"_id":"source/img/svg-s-line-1.png","path":"img/svg-s-line-1.png","modified":0,"renderable":0},{"_id":"source/img/svg-s-phone.png","path":"img/svg-s-phone.png","modified":0,"renderable":0},{"_id":"source/img/svg-s-line-3.png","path":"img/svg-s-line-3.png","modified":0,"renderable":0},{"_id":"source/img/svg-s-nearby.png","path":"img/svg-s-nearby.png","modified":0,"renderable":0},{"_id":"source/img/svg-s-qq.png","path":"img/svg-s-qq.png","modified":0,"renderable":0},{"_id":"source/img/svg-s-scan.png","path":"img/svg-s-scan.png","modified":0,"renderable":0},{"_id":"source/img/svg-s-sns.png","path":"img/svg-s-sns.png","modified":0,"renderable":0},{"_id":"source/img/svg-s-shake.png","path":"img/svg-s-shake.png","modified":0,"renderable":0},{"_id":"source/img/touch_event-down-not-cliable.png","path":"img/touch_event-down-not-cliable.png","modified":0,"renderable":0},{"_id":"source/img/touch_event-move-not-cliable.png","path":"img/touch_event-move-not-cliable.png","modified":0,"renderable":0},{"_id":"source/img/touch_event-move-cliable.png","path":"img/touch_event-move-cliable.png","modified":0,"renderable":0},{"_id":"source/img/touch_event-move-child-cliable.png","path":"img/touch_event-move-child-cliable.png","modified":0,"renderable":0},{"_id":"source/img/touch_event-up-cliable.png","path":"img/touch_event-up-cliable.png","modified":0,"renderable":0},{"_id":"source/img/touch_event-up-not-cliable.png","path":"img/touch_event-up-not-cliable.png","modified":0,"renderable":0},{"_id":"source/img/touch_event-up-child-cliable.png","path":"img/touch_event-up-child-cliable.png","modified":0,"renderable":0},{"_id":"source/img/w-csip-1.png","path":"img/w-csip-1.png","modified":0,"renderable":0},{"_id":"source/img/w-csip-2.png","path":"img/w-csip-2.png","modified":0,"renderable":0},{"_id":"source/img/w-csip-3.png","path":"img/w-csip-3.png","modified":0,"renderable":0},{"_id":"source/img/w-csip-4.png","path":"img/w-csip-4.png","modified":0,"renderable":0},{"_id":"source/img/wechat-qrcode.jpg","path":"img/wechat-qrcode.jpg","modified":0,"renderable":0},{"_id":"source/img/wechatpay-backup.png","path":"img/wechatpay-backup.png","modified":0,"renderable":0},{"_id":"source/img/wechatpay.png","path":"img/wechatpay.png","modified":0,"renderable":0},{"_id":"source/img/wr720n-1.png","path":"img/wr720n-1.png","modified":0,"renderable":0},{"_id":"source/img/wr720n-2.png","path":"img/wr720n-2.png","modified":0,"renderable":0},{"_id":"source/img/wr720n-6.png","path":"img/wr720n-6.png","modified":0,"renderable":0},{"_id":"source/img/wr720n-5.png","path":"img/wr720n-5.png","modified":0,"renderable":0},{"_id":"source/img/360-1.png","path":"img/360-1.png","modified":0,"renderable":0},{"_id":"source/img/360-2.png","path":"img/360-2.png","modified":0,"renderable":0},{"_id":"source/img/WeChat_1435588322.png","path":"img/WeChat_1435588322.png","modified":0,"renderable":0},{"_id":"source/img/Screenshot_6_2_15__3_18_PM.png","path":"img/Screenshot_6_2_15__3_18_PM.png","modified":0,"renderable":0},{"_id":"source/img/android_dvm_art-2.png","path":"img/android_dvm_art-2.png","modified":0,"renderable":0},{"_id":"source/img/android_handler_looper-2.png","path":"img/android_handler_looper-2.png","modified":0,"renderable":0},{"_id":"source/img/android_handler_looper-3.png","path":"img/android_handler_looper-3.png","modified":0,"renderable":0},{"_id":"source/img/android_handler_looper-4.png","path":"img/android_handler_looper-4.png","modified":0,"renderable":0},{"_id":"source/img/architecture-adapter-method.png","path":"img/architecture-adapter-method.png","modified":0,"renderable":0},{"_id":"source/img/keyboard_pannel_switch-demo_snapshot.jpg","path":"img/keyboard_pannel_switch-demo_snapshot.jpg","modified":0,"renderable":0},{"_id":"source/img/kotlin-1.png","path":"img/kotlin-1.png","modified":0,"renderable":0},{"_id":"source/img/leakcanary-1.png","path":"img/leakcanary-1.png","modified":0,"renderable":0},{"_id":"source/img/leakcanary-3.png","path":"img/leakcanary-3.png","modified":0,"renderable":0},{"_id":"source/img/lls_architecture_8.png","path":"img/lls_architecture_8.png","modified":0,"renderable":0},{"_id":"source/img/lls_architecture_7.png","path":"img/lls_architecture_7.png","modified":0,"renderable":0},{"_id":"source/img/mars-10.png","path":"img/mars-10.png","modified":0,"renderable":0},{"_id":"source/img/mars-9.png","path":"img/mars-9.png","modified":0,"renderable":0},{"_id":"source/img/network_basic-7.png","path":"img/network_basic-7.png","modified":0,"renderable":0},{"_id":"source/img/remote-app-8.jpeg","path":"img/remote-app-8.jpeg","modified":0,"renderable":0},{"_id":"source/img/remote-app-9.jpeg","path":"img/remote-app-9.jpeg","modified":0,"renderable":0},{"_id":"source/img/ruby_guide_1.png","path":"img/ruby_guide_1.png","modified":0,"renderable":0},{"_id":"source/img/svg-parse-2.jpg","path":"img/svg-parse-2.jpg","modified":0,"renderable":0},{"_id":"source/img/svg-s-file-3.png","path":"img/svg-s-file-3.png","modified":0,"renderable":0},{"_id":"source/img/wechat-keybord-panel.jpg","path":"img/wechat-keybord-panel.jpg","modified":0,"renderable":0},{"_id":"source/img/wr720n-3.png","path":"img/wr720n-3.png","modified":0,"renderable":0},{"_id":"source/img/wr720n-4.png","path":"img/wr720n-4.png","modified":0,"renderable":0},{"_id":"source/img/360-3.png","path":"img/360-3.png","modified":0,"renderable":0},{"_id":"source/img/ActivityManagerService.png","path":"img/ActivityManagerService.png","modified":0,"renderable":0},{"_id":"source/img/alipay-architecture-thought.png","path":"img/alipay-architecture-thought.png","modified":0,"renderable":0},{"_id":"source/img/android-weak-network-1.png","path":"img/android-weak-network-1.png","modified":0,"renderable":0},{"_id":"source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":0},{"_id":"source/img/notification_best_practise-2.png","path":"img/notification_best_practise-2.png","modified":0,"renderable":0},{"_id":"source/img/openwrt_xunlei-fastdick-1.png","path":"img/openwrt_xunlei-fastdick-1.png","modified":0,"renderable":0},{"_id":"source/img/thread_debugger_and_thread_pool.png","path":"img/thread_debugger_and_thread_pool.png","modified":0,"renderable":0},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"source/img/android-test_1.png","path":"img/android-test_1.png","modified":0,"renderable":0},{"_id":"source/img/java_synchronized.png","path":"img/java_synchronized.png","modified":0,"renderable":0},{"_id":"source/img/lls_architecture_2.png","path":"img/lls_architecture_2.png","modified":0,"renderable":0},{"_id":"source/img/mars-2.png","path":"img/mars-2.png","modified":0,"renderable":0},{"_id":"source/img/svg-s-file-1.png","path":"img/svg-s-file-1.png","modified":0,"renderable":0},{"_id":"source/img/svg-s-file-2.png","path":"img/svg-s-file-2.png","modified":0,"renderable":0},{"_id":"source/img/resolve_mv.gif","path":"img/resolve_mv.gif","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"source/img/magic_progress.gif","path":"img/magic_progress.gif","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/https-duoshuo.js","path":"js/src/https-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"source/img/filedownloader-avoid_drop_frames1.gif","path":"img/filedownloader-avoid_drop_frames1.gif","modified":0,"renderable":0},{"_id":"source/img/filedownloader-avoid_drop_frames2.gif","path":"img/filedownloader-avoid_drop_frames2.gif","modified":0,"renderable":0},{"_id":"source/img/keyboard_pannel_switch-fullscreen_resolved.gif","path":"img/keyboard_pannel_switch-fullscreen_resolved.gif","modified":0,"renderable":0},{"_id":"source/img/keyboard_pannel_switch-non-fullscreen_resolved.gif","path":"img/keyboard_pannel_switch-non-fullscreen_resolved.gif","modified":0,"renderable":0},{"_id":"source/img/percent_smooth.gif","path":"img/percent_smooth.gif","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"source/img/keyboard_pannel_switch-adjust_unresolved.gif","path":"img/keyboard_pannel_switch-adjust_unresolved.gif","modified":0,"renderable":0},{"_id":"source/img/keyboard_pannel_switch-adjust_resolved.gif","path":"img/keyboard_pannel_switch-adjust_resolved.gif","modified":0,"renderable":0},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"source/img/unresolve_mv.gif","path":"img/unresolve_mv.gif","modified":0,"renderable":0},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/img/filedownloader-serial_tasks_demo.gif","path":"img/filedownloader-serial_tasks_demo.gif","modified":0,"renderable":0},{"_id":"source/img/filedownloader-parallel_tasks_demo.gif","path":"img/filedownloader-parallel_tasks_demo.gif","modified":0,"renderable":0},{"_id":"source/img/filedownloader-tasks_manager_demo.gif","path":"img/filedownloader-tasks_manager_demo.gif","modified":0,"renderable":0},{"_id":"source/img/filedownloader-mix_tasks_demo.gif","path":"img/filedownloader-mix_tasks_demo.gif","modified":0,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"e6994036cfbcd81c8c34d5476667455bb23c52ce","modified":1487176681000},{"_id":"source/favicon.ico","hash":"84b4f797680038846ed021ccc56ca02e7de94cd4","modified":1452339952000},{"_id":"themes/next/.git","hash":"042ff34da0707513a5681580b37513c890c671ef","modified":1480862391000},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1480862391000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1480862391000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1480862391000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1480862391000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1480862391000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1480862391000},{"_id":"themes/next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1486658818000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1480862391000},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1480862391000},{"_id":"themes/next/_config.yml","hash":"ba5c85693ab5580ed0d7032a1b57dc49ad76923a","modified":1488181161000},{"_id":"themes/next/gulpfile.coffee","hash":"61ef0606a8134894d7ac796bc8d0fa4ba6a94483","modified":1480862391000},{"_id":"themes/next/package.json","hash":"877cb98025e59015532c4c9a04a33e2af4ad56f9","modified":1480862391000},{"_id":"source/_posts/2014-期待已久.md","hash":"50bbeaa5c66968e1e147683417301e389347c57f","modified":1486658811000},{"_id":"source/_posts/.DS_Store","hash":"4bee09bb894f623c903ac45d0ad612a2edb239dd","modified":1485442368000},{"_id":"source/_posts/Android-2d-Drawing.md","hash":"559d4df6819fcd4fae5816d0eb12c1b4e71435dc","modified":1486658811000},{"_id":"source/_posts/360手机卫士-Android开发-InfoQ视频-总结.md","hash":"cd55f08e84c17db664ec1bc4f4271249a74762c3","modified":1486658811000},{"_id":"source/_posts/Android-Messenger-进程通信.md","hash":"499146dbc169ee151e072dc03048c51afd29990a","modified":1486658811000},{"_id":"source/_posts/Android-AIDL-通信与回调.md","hash":"ad750ad81ebe5ec36a995a6cdc4991e9dabbe88e","modified":1486658811000},{"_id":"source/_posts/Android-Touch-Gallery.md","hash":"971b834eaa8b654a51aae53f2b4971ed8b082dc5","modified":1486658811000},{"_id":"source/_posts/Android-数据库架构-—-JLibrary.md","hash":"c193fed9a577b6a965e376747569b702bb489151","modified":1486658811000},{"_id":"source/_posts/Android推送探究.md","hash":"bc4c2bf658ff9b53c270d191e2ba41a99837b3f4","modified":1486658811000},{"_id":"source/_posts/Android网络学习笔记整理.md","hash":"fdb53755cdcd3ad177449cf282806b006d4fc9f7","modified":1486658811000},{"_id":"source/_posts/Android文件、缓存管理.md","hash":"0da29d939f04d569b989dbce8b1bf3e9f46d3b7b","modified":1486658811000},{"_id":"source/_posts/Falcon-Pro-3-如何完成独立开发演讲分析.md","hash":"9834ae71fd7611412b48a57e501a353513e8336b","modified":1486658811000},{"_id":"source/_posts/Flatbuffer-Use-Optimize.md","hash":"6c0e7dce160455ae293c667872117881e58a4cb2","modified":1486658811000},{"_id":"source/_posts/Google-2015-Material-Design-Summit.md","hash":"e95fdd25215ce283502d8a5d0cf8fa9bb58ac799","modified":1486658811000},{"_id":"source/_posts/Git学习整理.md","hash":"f5f337594be71875d6586c87dfd5e9c4103c1c71","modified":1486658811000},{"_id":"source/_posts/Java-8-Lambda.md","hash":"65373cd3a6288272891fbee4768ae3a1bd8eeffb","modified":1486658811000},{"_id":"source/_posts/LeakCanary使用总结.md","hash":"6919b77b6d25dea6ccc5436d68ff1a44923903be","modified":1486658811000},{"_id":"source/_posts/Java多线程抢占.md","hash":"d681cc9407d422301d75321bee1dd2b469946eeb","modified":1486658811000},{"_id":"source/_posts/Leakcanary-Square的一款Android:Java内存泄漏检测工具.md","hash":"1c96c0c819e1745ba5062d5357160ad5b85fe907","modified":1485442368000},{"_id":"source/_posts/PhotoGallery、Volley、Picasso-比较.md","hash":"4c4942b7b09f62bcdf445e3f4f2be49a92ab8522","modified":1486658811000},{"_id":"source/_posts/Repair-broken-image-url-in-wordpress-posts.md","hash":"0cab6eb7a92b711ad245a9525e60fab69fd73d80","modified":1486658811000},{"_id":"source/_posts/RxAndroid(RxJava)-与-AsyncTask.md","hash":"28c14f3a6458b502d1c82d87ea39140ecf15f1dc","modified":1486658811000},{"_id":"source/_posts/RxJava学习整理.md","hash":"a018fb8207ff658a105b1df6b9dfac399d28961b","modified":1486658811000},{"_id":"source/_posts/SVG-Android库-深入浅出-解析篇.md","hash":"b0cd3ec60ff1775b31a09b927325bd3932f86fcc","modified":1486658811000},{"_id":"source/_posts/SVG-Android应用探究之路.md","hash":"668acc7ae93447bc80d1cc09a94138b6f59cc59e","modified":1487177463000},{"_id":"source/_posts/SVG矢量预研期总结.md","hash":"2e96cf4bf3a9fe12353340c5dfa8a68f7b6e37ec","modified":1486658811000},{"_id":"source/_posts/Switching-between-the-panel-and-the-keyboard.md","hash":"23445bd4bd111b9fd976a082c20a1fd7997e0376","modified":1486658811000},{"_id":"source/_posts/TP-Link-WR841N-V7-OpenWrt-ShadowSocks.md","hash":"37c98ae353aab66b47043672fc31e219bc7adebc","modified":1486658811000},{"_id":"source/_posts/Workflows-Proxy.md","hash":"1518acd64d38cb70e090ed591a28f18fff294665","modified":1485442368000},{"_id":"source/_posts/[笔记]谷歌是如何做代码审查的.md","hash":"7a27b6a0fe7d82d91405baf4cb9891ff797dc136","modified":1486658811000},{"_id":"source/_posts/alipay_architecture_thought.md","hash":"bf848c613a21dabf60fed214430d04eb41657bbb","modified":1485442482000},{"_id":"source/_posts/activitymanagerservice.md","hash":"78ee24d927805ccd4436579e3ceeab814c897e9e","modified":1486658811000},{"_id":"source/_posts/android-view.md","hash":"058697e119579cc5a9781319bca103de91b6d2cf","modified":1486658811000},{"_id":"source/_posts/android_animation.md","hash":"55d5dd4a8ccfd36fff335524f25c90e6a88fb6e8","modified":1486658811000},{"_id":"source/_posts/android_art_dalvik.md","hash":"eb6cbe5e4dcf46be7950501ed040c39a0ffd9b71","modified":1486658811000},{"_id":"source/_posts/android_dynamic_dex.md","hash":"1a7a8120c218a6d4d03ee522c25641e7127082f1","modified":1486658811000},{"_id":"source/_posts/android_http.md","hash":"2ec420ff784e43970565634d30ce997d13067695","modified":1486658811000},{"_id":"source/_posts/android_handler_looper.md","hash":"8d99b41f4290e07edad58731da094da45d79fcf7","modified":1486658811000},{"_id":"source/_posts/android_multiply_process.md","hash":"2d618f9b977a6dc5cca1cfee2fe5355916208cbd","modified":1486658811000},{"_id":"source/_posts/android_optimize.md","hash":"f847ce518a49ffd4a361a0af561b4649ca94c1ee","modified":1486658811000},{"_id":"source/_posts/android_record.md","hash":"053ec2981f680156f5cff4fcf1d064073fc29d71","modified":1486658811000},{"_id":"source/_posts/android_scheduler_and_battery.md","hash":"a4af508d9c2feac3a46591452e3c5eac1aaf8316","modified":1486658811000},{"_id":"source/_posts/android_storage_permission.md","hash":"d6733fbec94edd822c961c3fcef0b5e1c7ac7b08","modified":1486658811000},{"_id":"source/_posts/android_test.md","hash":"a6227bdcc4ccb0c37ef35cfe2399b93844511f49","modified":1486658811000},{"_id":"source/_posts/android_thread_process_components.md","hash":"de6eded827d5564fe688f8e0266c5ffb93961e47","modified":1486658811000},{"_id":"source/_posts/cock_wire_psychology.md","hash":"538930e1299375d24805f74640e4c63c20376c04","modified":1486658811000},{"_id":"source/_posts/dalvik.md","hash":"8790fdac7f081b6e856b0720178907ee449df935","modified":1486658811000},{"_id":"source/_posts/constraint-layout.md","hash":"c3191b48f0210d9560e3b0dda0a3de11b1bcb43a","modified":1486658811000},{"_id":"source/_posts/android_weak_network.md","hash":"d7c4134a0c12c0829435ac9fe1a243b911e30c00","modified":1486799130000},{"_id":"source/_posts/density_dpi.md","hash":"684cf76219739bba62d388615e7c0da0758087d5","modified":1486658811000},{"_id":"source/_posts/file_downloader.md","hash":"7585043a0f974dec3e9c570e358bda9adc0ed51d","modified":1485442368000},{"_id":"source/_posts/gc.md","hash":"9c0371cf83cf1806e107abcc312518fb9131e15a","modified":1486658811000},{"_id":"source/_posts/google_io_2016.md","hash":"f399b91b13a411b8cc56f872938b02fbc39c6c5f","modified":1485442368000},{"_id":"source/_posts/guard_multi_dex.md","hash":"a4090871c7c32bdb515fbcc2e8b5df1f2a88fc33","modified":1486658811000},{"_id":"source/_posts/grpc.md","hash":"d5eb21c843f6ed79ab1d5d25f0fef3a44283de8f","modified":1488164033000},{"_id":"source/_posts/hybrid.md","hash":"bab53cc0029f32c9f2a3020ef989a41ad00239d1","modified":1485442368000},{"_id":"source/_posts/intellij_readme.md","hash":"b351a9cfde7c812e63a6c0436770e79979b088c0","modified":1486658811000},{"_id":"source/_posts/java_synchronized.md","hash":"38e25e0e0cde9a78cec8b8203859e24a16a09cc5","modified":1486658811000},{"_id":"source/_posts/keyboard-panel-switch.md","hash":"e1ee28ff54f6d40696641ad1cf80df13ce3ead45","modified":1485442368000},{"_id":"source/_posts/license.md","hash":"ab87ec6ebb20a47055e74336b0da40e2c92653c5","modified":1486658811000},{"_id":"source/_posts/lls_architecture.md","hash":"b3dadff1c9ae9a8c041d928e8a26ee43ac43e9ae","modified":1485442368000},{"_id":"source/_posts/kotlin.md","hash":"b7138a537287f980ad8a0f341803df454894d9f0","modified":1486799130000},{"_id":"source/_posts/magic_progress_widget.md","hash":"653106f415d9191098846d6afa5582a08e2e27bb","modified":1485442368000},{"_id":"source/_posts/message_handler.md","hash":"550839b9d8ed8b2570f6c8b2e8d36786802fb2e3","modified":1485442368000},{"_id":"source/_posts/ndk.md","hash":"45149e43df3d7c1c3940ba06f59f599ad271c410","modified":1486658811000},{"_id":"source/_posts/newifi_openwrt.md","hash":"c299072a3d5e91a5236b2b3ee3d98af6544f6ae8","modified":1486658811000},{"_id":"source/_posts/mars.md","hash":"642f4ebe48196983ceffac17b927613087b3e572","modified":1486658811000},{"_id":"source/_posts/notification_best_practise.md","hash":"bca70cd86006cc7dbf52700d5ccd3e7a50e7bef0","modified":1486658811000},{"_id":"source/_posts/network_basic.md","hash":"4aea66cc64ed4c77884b31dfc22972db88402aa0","modified":1487256031000},{"_id":"source/_posts/oo_architecture.md","hash":"a9fd1f8b4eb342e20e24c53124d1b7eafcf905ad","modified":1486658811000},{"_id":"source/_posts/openwrt_xunlei_fastdick.md","hash":"b3ffc99c063cfafac869c0b3da128ba5630a798d","modified":1486658811000},{"_id":"source/_posts/percent_smooth_handler.md","hash":"eda203a59a4287716cb6ecaf6d2a98fb04572b44","modified":1485442368000},{"_id":"source/_posts/php-mysql学习之简单留言板.md","hash":"e4085a842bebb09f59c669684d08cbcfc0323a60","modified":1486658811000},{"_id":"source/_posts/qiniu_imageloader.md","hash":"4c8697de51192ce821b38fbcb5d6570260b468fa","modified":1485442368000},{"_id":"source/_posts/shadows_everywhere.md","hash":"9174aff682c03ee522b62b63916dd603f63f4c51","modified":1486658811000},{"_id":"source/_posts/ruby_guide.md","hash":"7394efa96bc4f2667e926b6e01f0396232d84372","modified":1486658811000},{"_id":"source/_posts/span_ellipsize_end.md","hash":"14ad81c5dcbcb1db912ecb7e0b8761531838fb42","modified":1485442368000},{"_id":"source/_posts/thread_debugger_and_thread_pool.md","hash":"b9ff2532de86431486a032c623003b3b131d0a5e","modified":1485442368000},{"_id":"source/_posts/touch_event.md","hash":"dc3fe5c71d464b6169be4d3fa3f9e2dba3c02e51","modified":1486658811000},{"_id":"source/_posts/wh_android_tk.md","hash":"a94bf82c46c6f8473ba552e8c27f7e8145e501dc","modified":1486658811000},{"_id":"source/_posts/wh_3g_4g_usim.md","hash":"5d83d256cea98b324ae7cc7f2476aff21aa66d78","modified":1486658811000},{"_id":"source/_posts/wh_emergency.md","hash":"234453705e2ba6a035c7a6a6deea95aeedac8653","modified":1486658811000},{"_id":"source/_posts/wh_invade.md","hash":"ae6094d89842866f1e45fdc489f1601267c3568d","modified":1486658811000},{"_id":"source/_posts/wh_qunaer0_1.md","hash":"4a7b121114dd369290284203db8b9493c71e2c0d","modified":1486658811000},{"_id":"source/_posts/wh_tencent_web.md","hash":"86bb51e23b4ee5b76b569a888818277400ed12b6","modified":1486658811000},{"_id":"source/_posts/wh_waf.md","hash":"e54969047106f25178f00bcffee3e077db5b21f2","modified":1486658811000},{"_id":"source/_posts/wh_wangjin_ddos.md","hash":"8f5cb4376e8c68f20a28aedcf97fa377126908ab","modified":1486658811000},{"_id":"source/_posts/windows-csipsimple.md","hash":"ef2d4b7f106cd410fea3e72f88e34372d1fa24ba","modified":1486658811000},{"_id":"source/_posts/wr720n-v3-openwrt-shadowsocks.md","hash":"70841e9c9856decf2677f647e1b02662b67efff8","modified":1486658811000},{"_id":"source/_posts/zsh[oh-my-zsh]学习整理.md","hash":"ceb26afa2af1e622c03b70790521e19ffd736169","modified":1486658811000},{"_id":"source/_posts/《海上钢琴师》经典台词选集.md","hash":"45bec6d4eb3cda7d6d4f8b998ee0e4df9a808855","modified":1486658811000},{"_id":"source/_posts/互联网进化论“物联网”时代的崛起.md","hash":"b671b2b4111e8de21019e110675ee6dbf7819af6","modified":1486658811000},{"_id":"source/_posts/原创-最新beta2.3-《鳝溪菜单》更新专题.md","hash":"334f51eaa65420f06388643740ce581ec5747b16","modified":1486658811000},{"_id":"source/_posts/基于Cocos2d-连连看.md","hash":"193dfd42fdc0e6d49806bd79c1732fb33ec0f1b8","modified":1486658811000},{"_id":"source/_posts/大二暑期-win8体验录制.md","hash":"5c62cabab085604b7bebcab8f2d00ea6dcd023d4","modified":1486658811000},{"_id":"source/_posts/异步加载专题-原创分析-中级篇本地缓存、ListView滑动停止加载、利用sync.md","hash":"b73389bc98042bd7de8f12fd420ad549fc3c12dd","modified":1486658811000},{"_id":"source/_posts/异步加载专题-原创分析-简单篇通过xml获取地址、本地文件缓存、异步加载.md","hash":"daf4e90f33c22db78c6f773da5fefb850f131cc8","modified":1486658811000},{"_id":"source/_posts/悟空-勿懂.md","hash":"fb8db75af19d6edb78ab42618f62ccaf626decd0","modified":1486658811000},{"_id":"source/_posts/岁月.md","hash":"59e32772e2cac881eab1c643552bb3db0a75c3b2","modified":1486658811000},{"_id":"source/_posts/扯.md","hash":"4de976bf048ee16e8b1dca09e75231d77b3b8b25","modified":1486658811000},{"_id":"source/_posts/整理自14年-毕业生标兵准备的演讲稿.md","hash":"c8767f525908fba8c278f68cce8b0911888578e4","modified":1486658811000},{"_id":"source/_posts/无比的力量.md","hash":"4fa62beabce8834541a060c692d67d71dd4b494d","modified":1486658811000},{"_id":"source/_posts/早前笔记本加装触摸屏测试.md","hash":"2193de590633e7552f4f1e422dfaed0c5fcd344b","modified":1486658811000},{"_id":"source/_posts/爸爸，妈妈，老师.md","hash":"174fcedaafc9e6dd69371d0c9868bf8337c49490","modified":1486658811000},{"_id":"source/_posts/生活.md","hash":"7f65b6663eb3ea44ed90cddc80205ad887402691","modified":1486658811000},{"_id":"source/_posts/移动终端远程控制计算机.md","hash":"ca9241e59a9ed1802bc20116b8326e1127bd93a2","modified":1486658811000},{"_id":"source/_posts/翻唱《童话》.md","hash":"1f3d583f69cd0d74d45e9cf92850ce2806fadf09","modified":1486658811000},{"_id":"source/_posts/走在路上.md","hash":"78e5d545935d89e9c36faecaa8dcebea915a274a","modified":1486658811000},{"_id":"source/_posts/高三文骚无韵-我要托起明天的太阳.md","hash":"8037014e06a6e57cf27634fcd7bf7199a9ea686b","modified":1486658811000},{"_id":"source/_posts/黑色友谊.md","hash":"5167677f7054fb9b7822eebd707acd0dcf6103e5","modified":1486658811000},{"_id":"source/tags/index.md","hash":"c19ac0e5ded3d351193e4953ee3fae3f363077e7","modified":1452339952000},{"_id":"source/img/.DS_Store","hash":"39492fb4edf9929654b4e4dfa4158448b6e3ecb8","modified":1487178112000},{"_id":"source/img/360-4.png","hash":"a1106a89ca5466e9be1318b211815a1bf30a9eaa","modified":1452339952000},{"_id":"source/img/Falcon-font.png","hash":"5882ce422644df5d9ddf3fb069343c8c5aea14ca","modified":1452339952000},{"_id":"source/img/SQLite___Core_Data.png","hash":"7fedb981a985556657429a5c1a977d302ac17ebc","modified":1452339952000},{"_id":"source/img/alipay.png","hash":"a2579e423201f4799591069c0ab626642281c115","modified":1483123689000},{"_id":"source/img/android-scheduler_deep-doze.png","hash":"7683e7b4cb994bf37b6bfbb5c1e05a92ae729187","modified":1471223411000},{"_id":"source/img/android-scheduler_light-doze.png","hash":"329a39517d1e4e3ea9fa31792c6ee39190943a98","modified":1471223411000},{"_id":"source/img/android-scheduler_syncs-adapter.png","hash":"053048f2d8a9da11bb645152dd9bcafacd150032","modified":1471223411000},{"_id":"source/img/android-test_2.png","hash":"b3e97a69ba69e9705bb78b6263cd9875a9d77563","modified":1470728976000},{"_id":"source/img/android-test_3.png","hash":"07b15226cc8b5e691252a2a4a98e6c346b10fafa","modified":1470728977000},{"_id":"source/img/android-test_4.png","hash":"0f02636d88069e88881c8bc2a01b35c7e4db3ba5","modified":1470728977000},{"_id":"source/img/android-test_5.png","hash":"e9db3fc8a3f0758011a3ea6ae11064525da169d5","modified":1470728977000},{"_id":"source/img/android_dvm_art-1.png","hash":"846a2a4ab7217b7bb7890bdb8ab5e75f750187b8","modified":1452339952000},{"_id":"source/img/android_dynamic_dex.png","hash":"f80f1f504d88aef4c4e478cb6ad60f97715cd0be","modified":1452339952000},{"_id":"source/img/android_handler_looper-1.png","hash":"6acc7118b328b8dcdce8c19f88d561c8ae5a045b","modified":1452962650000},{"_id":"source/img/android_view-1.png","hash":"0e9de630e0c739503ee182d9c765407353280be8","modified":1452339952000},{"_id":"source/img/android_view-2.png","hash":"12bab7e84949a4e6926ce088d127e74a4b5947d0","modified":1452339952000},{"_id":"source/img/architecture-builder-method.png","hash":"33a7311d61ba59009e5f495321263926ba2852e9","modified":1466047525000},{"_id":"source/img/architecture-bridge-method.png","hash":"d1dfe4907dc1722a917dd3f9f80ba4c8b896d95b","modified":1466048817000},{"_id":"source/img/architecture-class-relate.png","hash":"340cd29634039ef8f394949b54465dc5cac76f0e","modified":1457538314000},{"_id":"source/img/architecture-composite-method.png","hash":"0ce3d7c17d43f05b891514c4220201dc5589839e","modified":1466131464000},{"_id":"source/img/architecture-decorator-method.png","hash":"a9cd80b56df683c3c81c22a0bf8881a475bd83b5","modified":1466047525000},{"_id":"source/img/architecture-facade-method.png","hash":"a6a6e968a3fd875c6be47d152526713f14ae4bfb","modified":1466047526000},{"_id":"source/img/architecture-factor-method.png","hash":"0c8ad55a36df56c009e5fd7d5c75c3c1f175bbee","modified":1466047527000},{"_id":"source/img/architecture-flyweight-method.png","hash":"a13b49a1b9b6883cdaa14c97226fdaa1738e7eb0","modified":1466574474000},{"_id":"source/img/architecture-mvvm-c.png","hash":"043561d5c9d0a77244c20d8586a10177a8dac463","modified":1477406364000},{"_id":"source/img/architecture-mvvm.png","hash":"aac851a70bac4971b07b28f847a36cc4efff5dfe","modified":1477406364000},{"_id":"source/img/architecture-proxy-method.png","hash":"07a091bfabfa2aca7b89bc294634bc1bdc6e61fa","modified":1466047527000},{"_id":"source/img/architecture-observer-method.png","hash":"ece3d5f77de376e904d6149f732b61bd3174e2f8","modified":1468424278000},{"_id":"source/img/architecture-template-method.png","hash":"d5a09fb05256a826643444a9ced6a40781949850","modified":1468422300000},{"_id":"source/img/architecture-strategy-method.png","hash":"55fe38f6776c4e038a9b1cbc2b9697d9b1e8d9fc","modified":1468419977000},{"_id":"source/img/async-1.png","hash":"7b82c44ebe2a79463c1df4e611a603bd725fa922","modified":1452339952000},{"_id":"source/img/constraint-layout_anchorConnection.png","hash":"d3b4396104db1a05fe04943c2507aed3099ccad2","modified":1470184649000},{"_id":"source/img/architecutre-mvp-mvc.gif","hash":"52f84a71e010074b060ef23b7ca3f71a3b95d821","modified":1472911676000},{"_id":"source/img/cocos2d-1.png","hash":"52a90d0bcbfa420e233a668553524fcd13e05a75","modified":1452339952000},{"_id":"source/img/constraint-layout_classHierarchy.png","hash":"642d2d672e09567caab1d5fcaff0ac627ce51a41","modified":1470184649000},{"_id":"source/img/constraint-layout_constraintWidget.png","hash":"fa5bfde07b36b8971b67a2934d7af4d914a1e027","modified":1470184649000},{"_id":"source/img/density_dpi-2.png","hash":"c2525ad16dd0215cc5b278e5d79aabb4ca3a96fe","modified":1452339952000},{"_id":"source/img/density_dpi-1.png","hash":"67ecae82c823f59e10aad77bd3f2f5c26ac5e6e8","modified":1452339952000},{"_id":"source/img/density_dpi-4.png","hash":"152aa6793d7807ab32f99a23debf8c39feba5d6b","modified":1452339952000},{"_id":"source/img/constraint-layout_measureFlow.png","hash":"b31c1c5a9978bcf1cdd69788f86d8f56512c2131","modified":1470184649000},{"_id":"source/img/density_dpi-3.png","hash":"0a73910f7fcb38ef9f6b65516cec18d289dad9c8","modified":1452339952000},{"_id":"source/img/hybrid-2.png","hash":"64cc02e2030dc009252b3464b1dc7e3b1de4497a","modified":1455972591000},{"_id":"source/img/hybrid-1.png","hash":"be3ec6c3731304280f314287a96f1d1ca0708c4a","modified":1455972591000},{"_id":"source/img/javathread-1.png","hash":"37350ff1d953a9fa58cf4d7041af04be39b5c242","modified":1452339952000},{"_id":"source/img/leakcanary-2.png","hash":"a49a8a8f4c95e3606d752535530de2bee831ce5d","modified":1452339952000},{"_id":"source/img/leakcanary-4.png","hash":"c2f8e64296ce8c8ef134fe806fdd09a37ffbb1ab","modified":1452339952000},{"_id":"source/img/lls_architecture_10.png","hash":"448d2b62bde612c74d085ac8b5fd2a1fca72dd42","modified":1464457377000},{"_id":"source/img/lls_architecture_1.png","hash":"8c1db1232531ae795b7f8d82c62c4efe553534e4","modified":1464457370000},{"_id":"source/img/lls_architecture_11.png","hash":"10b8c5882629f54fa0a500349218984a26353c53","modified":1464457377000},{"_id":"source/img/lls_architecture_12.png","hash":"8bfd80d872c0a3870b1b29cae623ec9615bbd92c","modified":1464457378000},{"_id":"source/img/lls_architecture_3.png","hash":"c1c74c30587bbae9f794f9fea65421351fdff7fb","modified":1464457374000},{"_id":"source/img/lls_architecture_4.png","hash":"254044dc068f7dc79fb022487a327d868ea0414c","modified":1464457374000},{"_id":"source/img/lls_architecture_5.png","hash":"011208eb4f9dce3e88f69cdbecde33ba6a274002","modified":1464457374000},{"_id":"source/img/lls_architecture_6.png","hash":"bb510771d69773124a7405c744d364c784d7ebe5","modified":1464457375000},{"_id":"source/img/lls_architecture_9.png","hash":"3de2c8798cc53a79af01a862e70ce7b93b3f63fd","modified":1464457377000},{"_id":"source/img/mars-1.png","hash":"045d4537ab70fcba10855fcc7a800c07419013bf","modified":1486658811000},{"_id":"source/img/mars-11.png","hash":"600b542530c9e06b797225ffcdb5225f907aac80","modified":1486658811000},{"_id":"source/img/mars-12.png","hash":"e2ac15107cf10331f24623f3ffa4319c65d70c2c","modified":1486658811000},{"_id":"source/img/mars-13.png","hash":"99cd15005092ce14b76fba80b8478a806060dc96","modified":1486658811000},{"_id":"source/img/mars-3.png","hash":"470974f0f296d4a1615f978de975483564215362","modified":1486658811000},{"_id":"source/img/mars-4.png","hash":"01c42930f5cab5bc66f36b1000fa8242cc097ff5","modified":1486658811000},{"_id":"source/img/mars-6.png","hash":"e9b58735ff19315ed16fa7229101c3ae77ce8bfe","modified":1486658811000},{"_id":"source/img/mars-5.png","hash":"72445dd575db118fc6b8790e42a29c100631c81a","modified":1486658811000},{"_id":"source/img/mars-7.png","hash":"0c7d245f95413c7477975e4163f9620690f4efa7","modified":1486658811000},{"_id":"source/img/mars-8.png","hash":"80f9dcc768dc397731a6d7650f10c7c52ab6b134","modified":1486658811000},{"_id":"source/img/ndk-2.png","hash":"96d1d1cd94b28ba3bb0d172488bedee4a0071103","modified":1452339952000},{"_id":"source/img/ndk-3.jpeg","hash":"56c570623d4e2624530ca54428e01c004b64a0f7","modified":1452339952000},{"_id":"source/img/ndk-1.png","hash":"4cc434c5ef65e4bed1aa2cba7781143692902899","modified":1452339952000},{"_id":"source/img/network_basic-1.png","hash":"6de69e05729918210bd45db0d8d1a94b6da9347b","modified":1486896409000},{"_id":"source/img/network_basic-2.png","hash":"02a3eef794890805365fdb025d5230e9677c2658","modified":1487256031000},{"_id":"source/img/network_basic-3.png","hash":"6336d72972c43d43741efd56f8ce6f6e273bf1f1","modified":1487256031000},{"_id":"source/img/network_basic-5.png","hash":"93d00b55b897d030f70b81e416fb01349342fdda","modified":1486896409000},{"_id":"source/img/network_basic-4.png","hash":"9c03e4f6fc2e70f2545e173a2bd72e769d3b6a7e","modified":1487256031000},{"_id":"source/img/network_basic-6.png","hash":"557790a63e77a779c8e4d60723582168160c4b82","modified":1487256031000},{"_id":"source/img/newifi-1.png","hash":"af92db6794e8a854c82af411e5bfd4844849ddaf","modified":1461428636000},{"_id":"source/img/newifi-2.png","hash":"a119441ed8f1a3954055b1671120c82056ea5e38","modified":1461428636000},{"_id":"source/img/newifi-3.png","hash":"abee73992f88e1a22b537cad1674513d27475cd7","modified":1461428636000},{"_id":"source/img/notification_best_practise-1.png","hash":"abbb1c233ce6f97f292b830883826c5436a62cb2","modified":1452339952000},{"_id":"source/img/notification_best_practise-message-style.png","hash":"ef3cd430ce1b18a3c9097355b137a3a864e99f84","modified":1477376858000},{"_id":"source/img/notification_best_practise-direct-reply.png","hash":"aeb05e43145f9ac4fce1e8fcb3f7cf346e044dff","modified":1477375914000},{"_id":"source/img/notification_best_practise-bundled.png","hash":"8586b5dd3553c15f6d2af1585b63445564b7d98a","modified":1477378378000},{"_id":"source/img/openwrt_xunlei-fastdick-3.png","hash":"7ca8e2d2a3f8f1b7bb11f521a78985930869e5cc","modified":1464620994000},{"_id":"source/img/openwrt_xunlei-fastdick-2.png","hash":"e0492516693e3177d3e5b125ae5f17d5a219a924","modified":1464620994000},{"_id":"source/img/php-mysql-2.jpg","hash":"4b9e5713f5e40dc6500ce29b35422be5785dfbe3","modified":1452339952000},{"_id":"source/img/remote-app-2.png","hash":"b7b0d64a876a2e85ebf9c8b1732eac0e741eb39b","modified":1452339952000},{"_id":"source/img/php-mysql-1.jpg","hash":"583c8dcb3a7962e1c1dab97297a674c39a84b29e","modified":1452339952000},{"_id":"source/img/remote-app-1.png","hash":"c1673659b90cf05abfea66ccfb071c31b4d4c72c","modified":1452339952000},{"_id":"source/img/remote-app-5.png","hash":"4d7d571e193f4bc1be9ccb2e336dc0fb13dac954","modified":1452339952000},{"_id":"source/img/remote-app-3.png","hash":"8d6a3f102a69760db002dc04e3b890f9629bcc4a","modified":1452339952000},{"_id":"source/img/remote-app-6.png","hash":"4fe929505bf6b60c31ef76197d4d8f6561720ead","modified":1452339952000},{"_id":"source/img/remote-app-7.png","hash":"b1e5f617cd84a7384322d85e55daf0c24c27f0ee","modified":1452339952000},{"_id":"source/img/remote-app-4.png","hash":"0ab860820ffdd1c734a4feda3ba3b0aef439c13a","modified":1452339952000},{"_id":"source/img/remote-app-8.jpg","hash":"1e1ed611298971015b11b6957b2a8490af08fc66","modified":1452339952000},{"_id":"source/img/ruby_guide_2.png","hash":"69ac455780d9a88cabcea1d255292df5afe05b52","modified":1452339952000},{"_id":"source/img/rxjava-filter.png","hash":"ecb6f7bc4b2e06bb92b954849e42c4ec1fb993d2","modified":1452339952000},{"_id":"source/img/rxjava-flatmap.png","hash":"a0f6af9611ee557fa4db33dde23664fa2d4baed2","modified":1452339952000},{"_id":"source/img/rxjava-map.png","hash":"7db4e5a9346c9ac8ef1c69e5e3f1b8c851c530c0","modified":1452339952000},{"_id":"source/img/rxjava-from.png","hash":"68c0e465d8e35b9cea2c76fed29c156b7511d4ef","modified":1452339952000},{"_id":"source/img/shanxi-1.png","hash":"0658ec8eef0dd53ed7a6b2712a9614e158ae193a","modified":1452339952000},{"_id":"source/img/rxjava-take.png","hash":"217176a56e23dea83c6aa59f5b7e393b28db7838","modified":1452339952000},{"_id":"source/img/shadows_everywhere-1.png","hash":"6d8dee38967e94be8ab99176811fa83f916b4330","modified":1452339952000},{"_id":"source/img/svg-k-1.png","hash":"3fb1fc5d342138bf30528b6834a45bffef2dd05b","modified":1452339952000},{"_id":"source/img/svg-parse-1.jpg","hash":"0dd1abe99f60f03d6a4e2a9d89cb751ad457c4e3","modified":1452339952000},{"_id":"source/img/svg-parse-3.jpg","hash":"eb854801abef3da392106a4cb403a938c1a70680","modified":1452339952000},{"_id":"source/img/svg-parse-4.jpg","hash":"50b8e46d612b467f9423d7f18d0b0d79fefed003","modified":1452339952000},{"_id":"source/img/svg-k-2.png","hash":"34c8ef7712b5aea31a7dbbf5e3331a100332dd43","modified":1452339952000},{"_id":"source/img/svg-parse-5.jpg","hash":"89eb0aec225565558502409b7e435119b829b458","modified":1452339952000},{"_id":"source/img/svg-s-call.png","hash":"80a278725fb84ca71d444a45fa40beb127a9da6b","modified":1452339952000},{"_id":"source/img/svg-s-2.png","hash":"a10b6cc474ae57e434c45473cd85aa3c40467967","modified":1452339952000},{"_id":"source/img/svg-s-1.png","hash":"822ff00f107d3c67608e187ef6398a313b29fb6e","modified":1452339952000},{"_id":"source/img/svg-s-line-2.png","hash":"58ea25914292ddd8dea831ae2fa2f7bea9723fe4","modified":1452339952000},{"_id":"source/img/svg-s-line-1.png","hash":"181069e696a0bd0c7de4fbb5aea24d682ba5ab6e","modified":1452339952000},{"_id":"source/img/svg-s-phone.png","hash":"9eae6c2451b04b32544e500e95868572cd4504cf","modified":1452339952000},{"_id":"source/img/svg-s-line-3.png","hash":"02afee77ea19d2c64687f247ea9a4e004d43960c","modified":1452339952000},{"_id":"source/img/svg-s-nearby.png","hash":"fa14aa2d5bf03dfa4eda798ea94d4e5c22a85c16","modified":1452339952000},{"_id":"source/img/svg-s-qq.png","hash":"ef979ec5597a08b18a251ce5e3b9c47ea2cc7562","modified":1452339952000},{"_id":"source/img/svg-s-scan.png","hash":"8891f00a9785d6a19379ee6cd2ec3a3c81ce504f","modified":1452339952000},{"_id":"source/img/svg-s-sns.png","hash":"8a7f0772ca6e98479a8ff58525175461690d386d","modified":1452339952000},{"_id":"source/img/svg-s-shake.png","hash":"6ded79ebf170dbfb5641b851ab03617a6634a89f","modified":1452339952000},{"_id":"source/img/touch_event-down-not-cliable.png","hash":"19df7ace3fc78e525fcc40a1104c85f15b88ae51","modified":1457580753000},{"_id":"source/img/touch_event-move-not-cliable.png","hash":"950f4bc162f9fa327d8bc443b7334b704634db11","modified":1457580788000},{"_id":"source/img/touch_event-move-cliable.png","hash":"43a172c59839d552305e3f5f337bf544fc570f73","modified":1457580788000},{"_id":"source/img/touch_event-move-child-cliable.png","hash":"b26ba51a684e97ba773ce858e967872ae4acd3d8","modified":1457580788000},{"_id":"source/img/touch_event-up-cliable.png","hash":"4be18f25f43203181418d7e9761e2c053f389419","modified":1457580788000},{"_id":"source/img/touch_event-up-not-cliable.png","hash":"1b588b6785cf2fd0b24ba3846c8b641366fa011b","modified":1457580788000},{"_id":"source/img/touch_event-up-child-cliable.png","hash":"c4f59efbe8593a88b80c933b053f50fc460d322f","modified":1457580788000},{"_id":"source/img/w-csip-1.png","hash":"4a50f14e6f550d23db4baf9137a56d17b8884ea8","modified":1452339952000},{"_id":"source/img/w-csip-2.png","hash":"ccdcd2e7a6633ac1d6c46bde9df46887dcf9e819","modified":1452339952000},{"_id":"source/img/w-csip-3.png","hash":"101ab44aa34ba7ba899d13259afa46b98beb7dc2","modified":1452339952000},{"_id":"source/img/w-csip-4.png","hash":"6028a1849889ee20e4f55c36b2f86ea965599fed","modified":1452339952000},{"_id":"source/img/wechat-qrcode.jpg","hash":"12ba05e43e7d9c2e5b27b3bffe1634e0aff03974","modified":1464540865000},{"_id":"source/img/wechatpay-backup.png","hash":"3145ae5d2411ab2510d450b70921aaf77c00bef4","modified":1483123689000},{"_id":"source/img/wechatpay.png","hash":"31134e6e939e6cf2bf818b553ced6290839fb7d6","modified":1483123689000},{"_id":"source/img/wr720n-1.png","hash":"dbd99b0b9c76acfccd1d3c29d9f6aa916e59f890","modified":1452339952000},{"_id":"source/img/wr720n-2.png","hash":"ac6e2a21cd4737c63bba8ed1377168eb1a951421","modified":1452339952000},{"_id":"source/img/wr720n-6.png","hash":"5f361219fcfa6b4766e55c213575c05119d3d5cd","modified":1452339952000},{"_id":"source/img/wr720n-5.png","hash":"9a526ac0edcbde905713e86855f9f088c65170e7","modified":1452339952000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1480862391000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1480862391000},{"_id":"themes/next/layout/_layout.swig","hash":"2fa3c74066843a859fac77803324a1de51044da9","modified":1486658818000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1480862391000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1480862391000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1480862391000},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1480862391000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1480862391000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1480862391000},{"_id":"themes/next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1480862391000},{"_id":"themes/next/languages/en.yml","hash":"07a559df8f0d413cceb145a9bb8d6bbf72d93bcf","modified":1486658818000},{"_id":"themes/next/languages/default.yml","hash":"07a559df8f0d413cceb145a9bb8d6bbf72d93bcf","modified":1486658818000},{"_id":"themes/next/languages/fr-FR.yml","hash":"9fca01ef917d33ae2ae6bc04561ec6799dff5351","modified":1480862391000},{"_id":"themes/next/languages/de.yml","hash":"1fdea1f84b7f691f5b4dd4d2b43eeb27b10fa0c8","modified":1480862391000},{"_id":"themes/next/languages/ko.yml","hash":"b6bc5d6b0c000deb44099b42d3aebb8c49dbfca9","modified":1480862391000},{"_id":"themes/next/languages/ja.yml","hash":"49f12149edcc1892b26a6207328cda64da20116d","modified":1480862391000},{"_id":"themes/next/languages/pt-BR.yml","hash":"7742ba4c0d682cbe1d38305332ebc928abd754b5","modified":1480862391000},{"_id":"themes/next/languages/id.yml","hash":"34396bef27c4ab9e9a3c5d3e3aa94b0e3b3a7b0d","modified":1480862391000},{"_id":"themes/next/languages/pt.yml","hash":"6b660b117314cad93f08757601df3adb04c68beb","modified":1480862391000},{"_id":"themes/next/languages/zh-hk.yml","hash":"34c84c6d04447a25bd5eac576922a13947c000e2","modified":1480862391000},{"_id":"themes/next/languages/ru.yml","hash":"55a75ca62a4fd55af288523f5f65148441b493ab","modified":1486658818000},{"_id":"themes/next/languages/zh-tw.yml","hash":"c97a5c41149de9b17f33439b0ecf0eff6fdae50e","modified":1480862391000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"f6c9fafa0f5f0050cd07ca2cf5e38fbae3e28145","modified":1480862391000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1480862391000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1480862391000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1480862391000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1480862391000},{"_id":"source/img/360-1.png","hash":"b4f99ea1997e45e63f80c5dae62202d2fcadaf77","modified":1452339952000},{"_id":"source/img/360-2.png","hash":"04474d8e782650de04fe380eb5e27bb892a418cb","modified":1452339952000},{"_id":"source/img/WeChat_1435588322.png","hash":"70675b3c3ba7d1d150d79fe34da8e43fb31fb851","modified":1452339952000},{"_id":"source/img/Screenshot_6_2_15__3_18_PM.png","hash":"43cb7a83b7fbc17de511f36fff1bd6062f3448e2","modified":1452339952000},{"_id":"source/img/android_dvm_art-2.png","hash":"d52aa6cc687c584bf0d04ca4f9e1887c301d85a9","modified":1452339952000},{"_id":"source/img/android_handler_looper-2.png","hash":"c090353b41c81d02f97ede5a4e580cc5ef678fc4","modified":1452339952000},{"_id":"source/img/android_handler_looper-3.png","hash":"49676c0b7a85d0d03101bd591d364f09f8d30404","modified":1452960219000},{"_id":"source/img/android_handler_looper-4.png","hash":"94902e29a2937069fb3e78b870895e080dfd086b","modified":1457679035000},{"_id":"source/img/architecture-adapter-method.png","hash":"8e27c70b072e52d6250649cd79846b2e9c2e58dd","modified":1466047524000},{"_id":"source/img/keyboard_pannel_switch-demo_snapshot.jpg","hash":"3b45dbdb2d9640d5f2d8090cf242f37ef3d60822","modified":1463310093000},{"_id":"source/img/kotlin-1.png","hash":"cf15fdc4d503a60a3be71ba5e4442f017cfb13c0","modified":1483123689000},{"_id":"source/img/leakcanary-1.png","hash":"2176953f71a17b89ee9c6ed0fe999623a356d596","modified":1452339952000},{"_id":"source/img/leakcanary-3.png","hash":"b6d3916f70fd8410a38feb8347dc1c59a8e3d7e3","modified":1452339952000},{"_id":"source/img/lls_architecture_8.png","hash":"533958c7d84cc8ee56542e679376735187110f6a","modified":1464457376000},{"_id":"source/img/lls_architecture_7.png","hash":"36d909c3b587dbc50d3ce60a096db0255c3a7333","modified":1464457376000},{"_id":"source/img/mars-10.png","hash":"3714ed4a49cea371c13b94858070bffa958f22cf","modified":1486658811000},{"_id":"source/img/mars-9.png","hash":"9579e1066790730200f5a8fcce8f5d2f42eb44e1","modified":1486658811000},{"_id":"source/img/network_basic-7.png","hash":"3e8229662b72fe3876d111c8d0f8ba0cf7bc9eea","modified":1487256031000},{"_id":"source/img/remote-app-8.jpeg","hash":"b5ebec5a40138b9207c54c092a8c626b3bc30e74","modified":1465379897000},{"_id":"source/img/remote-app-9.jpeg","hash":"d0804599c4e9b0969b644b194c336f45125cba53","modified":1465379802000},{"_id":"source/img/ruby_guide_1.png","hash":"e1719f610a47ff6f5f38f75ad59d7d3908d1a4b3","modified":1452339952000},{"_id":"source/img/svg-parse-2.jpg","hash":"f41ab45f0a08c4bb852874c977951fccc3a6eed8","modified":1452339952000},{"_id":"source/img/svg-s-file-3.png","hash":"c4564a12e5f3613f06c8aeb537f3aab2e032f95f","modified":1452339952000},{"_id":"source/img/wechat-keybord-panel.jpg","hash":"149a100decf26b166fc123d480182d7f75a7afb8","modified":1452339952000},{"_id":"source/img/wr720n-3.png","hash":"c0b0678d6544c4647d515b9035e9ce350c90b842","modified":1452339952000},{"_id":"source/img/wr720n-4.png","hash":"8895a27192a84410ea95852556739fa207056756","modified":1452339952000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1480862391000},{"_id":"source/img/360-3.png","hash":"efa4cba3f1c4eb7e86cadcc3559d2d9b07a61679","modified":1452339952000},{"_id":"source/img/ActivityManagerService.png","hash":"7e25985d7d530ade94dfbeeb96bb1fedf52c99a0","modified":1452339952000},{"_id":"source/img/alipay-architecture-thought.png","hash":"6f00251283aad49af372e75e4d7b21ebf1114055","modified":1485409946000},{"_id":"source/img/android-weak-network-1.png","hash":"afbe5dee1b039819212d49de33b4a2ffa2c53ef3","modified":1471310211000},{"_id":"source/img/avatar.jpg","hash":"08b52147f7ada1f9ae8df7841cd1b8412d6d2984","modified":1474387607000},{"_id":"source/img/notification_best_practise-2.png","hash":"cea54ebcb2db7f8d5b003aef4e4699bf8435303b","modified":1452339952000},{"_id":"source/img/openwrt_xunlei-fastdick-1.png","hash":"1804de7b9a5ec616dc759a4feafe82e30f08fb4e","modified":1464620994000},{"_id":"source/img/thread_debugger_and_thread_pool.png","hash":"86c9cfc5c286f5f7bdebcec0f8cd5b3fc835e703","modified":1472648967000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1480862391000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1480862391000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1486658818000},{"_id":"themes/next/layout/_macro/post.swig","hash":"0f67383a3501aa5151d18012cce8a3cab1fc3134","modified":1486658818000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1480862391000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"43d8830bb19da4fc7a5773866be19fa066b62645","modified":1486658818000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1480862391000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"970aa668680896262b1056bb5787fc9ec8754495","modified":1486658818000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"2771a088008b589c2512aa81e8591ef31da63b6a","modified":1480862391000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"80f814ebb211c2bf9dbb736fe1e2452a68cab990","modified":1486658818000},{"_id":"themes/next/layout/_partials/head.swig","hash":"a0eafe24d1dae30c790ae35612154b3ffbbd5cce","modified":1486658818000},{"_id":"themes/next/layout/_partials/header.swig","hash":"adab5c3f7b173f1b45454787f39dde07aea03483","modified":1486658818000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"39d613e5a9f8389d4ea52d6082502af8e833b9f2","modified":1480862391000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1480862391000},{"_id":"themes/next/layout/_partials/search.swig","hash":"1431719d1dbba3f5ee385eebc46376d1a960b2d5","modified":1480862391000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1480862391000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1480862391000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1480862391000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"4512867d80d9eddfc3a0f5fea3c456f33aa9d522","modified":1486658818000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1480862391000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1480862391000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1480862391000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1480862391000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1480862391000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1480862391000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1480862391000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1480862391000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1480862391000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1480862391000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1480862391000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1480862391000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1480862391000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1480862391000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1480862391000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1486658818000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1480862391000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1480862391000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1480862391000},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1480862391000},{"_id":"source/img/android-test_1.png","hash":"f10ba269374f06b31a9196a1d4fe588fe3b552e4","modified":1470728976000},{"_id":"source/img/java_synchronized.png","hash":"3cf9731cc03b6798c27614168942d633cdbb0496","modified":1465065460000},{"_id":"source/img/lls_architecture_2.png","hash":"cf8c66df3bbd90fbe7011877bf1055dae5b7227b","modified":1464457373000},{"_id":"source/img/mars-2.png","hash":"6d238d9c1e49dcde0a681ef41f4bcf1968014097","modified":1486658811000},{"_id":"source/img/svg-s-file-1.png","hash":"5c22e2b97497f30e919bcde15238cdf0ff4ddaef","modified":1452339952000},{"_id":"source/img/svg-s-file-2.png","hash":"61cdcfd734233d9f932b3b42a3505c10c4cf8f86","modified":1452339952000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1480862391000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1480862391000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1480862391000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1480862391000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1480862391000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1480862391000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1480862391000},{"_id":"source/img/resolve_mv.gif","hash":"a99aa35f4200cf972ee13d561e6805af6c48e88b","modified":1452339952000},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1480862391000},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"636f1181dd5887a70b4a08ca8f655d4e46635792","modified":1480862391000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1480862391000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1480862391000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1480862391000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1480862391000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1480862391000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1480862391000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1480862391000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1480862391000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1480862391000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1480862391000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1480862391000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"e46900412e28f529c26e25e6bada342006435a32","modified":1486658818000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"a279e1881208aff2f669fe235e9661ab825bc540","modified":1486658818000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1480862391000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"b460e27db3dcd4ab40b17d8926a5c4e624f293a9","modified":1480862391000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1480862391000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1480862391000},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1480862391000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1480862391000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1480862391000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1480862391000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1480862391000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c459aa6d607d8bcb747544e74f6ad0b8374aa3b1","modified":1486658818000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"fc185c6cec79593775d1c2440dbe2a71cfbe2e99","modified":1486658818000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1480862391000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1480862391000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1480862391000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1480862391000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1480862391000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1480862391000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1480862391000},{"_id":"themes/next/source/js/src/utils.js","hash":"384e17ff857f073060f5bf8c6e4f4b7353236331","modified":1480862391000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1480862391000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1480862391000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1486658818000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1480862391000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1480862391000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1480862391000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1480862391000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1480862391000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"c1072942459fa0880e8a33a1bd929176b62b4171","modified":1480862391000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1480862391000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1480862391000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1480862391000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1480862391000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1480862391000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1480862391000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1480862391000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1480862391000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1480862391000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1480862391000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1480862391000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1480862391000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1480862391000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1480862391000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1480862391000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1480862391000},{"_id":"source/img/magic_progress.gif","hash":"2fc88e6f772876c387296d5839060d50c4b2aa27","modified":1463309798000},{"_id":"themes/next/source/js/src/https-duoshuo.js","hash":"635aac10cea02c8d89c6248366603094964d6f08","modified":1480862391000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1480862391000},{"_id":"source/img/filedownloader-avoid_drop_frames1.gif","hash":"f234db45bddcef4675532de309c4b82802f82954","modified":1463310260000},{"_id":"source/img/filedownloader-avoid_drop_frames2.gif","hash":"ad0143f58c12d2f4b4b630f7463558d79558ce2b","modified":1463310278000},{"_id":"source/img/keyboard_pannel_switch-fullscreen_resolved.gif","hash":"a168dd61b0cfed5d367653a500ef62ef3952d544","modified":1463309920000},{"_id":"source/img/keyboard_pannel_switch-non-fullscreen_resolved.gif","hash":"3b98cdb85cad81e00610dd300a745a290e681522","modified":1463310030000},{"_id":"source/img/percent_smooth.gif","hash":"27f74897d07ac2bd774d26e9b3a45a7ee8a70377","modified":1463309678000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1486658818000},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1480862391000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1480862391000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1480862391000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1480862391000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1480862391000},{"_id":"themes/next/layout/_scripts/third-party/analytics/vkontakte-api.swig","hash":"9fbffcdfd9b2fa9ae0e813ef01f02dea8d78271c","modified":1486658818000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1480862391000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-mta.swig","hash":"a652f202bd5b30c648c228ab8f0e997eb4928e44","modified":1486658818000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1480862391000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"477dc469a694d71a9d19df0c912eed0d182e95ef","modified":1480862391000},{"_id":"themes/next/layout/_scripts/third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1486658818000},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1480862391000},{"_id":"themes/next/layout/_scripts/third-party/comments/livere.swig","hash":"7240f2e5ec7115f8abbbc4c9ef73d4bed180fdc7","modified":1486658818000},{"_id":"themes/next/layout/_scripts/third-party/comments/youyan.swig","hash":"af9dd8a4aed7d06cf47b363eebff48850888566c","modified":1486658818000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1480862391000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1480862391000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1480862391000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1480862391000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1480862391000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1480862391000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1480862391000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1480862391000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1480862391000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1480862391000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1480862391000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1480862391000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1480862391000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1480862391000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1480862391000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1486658818000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1480862391000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1480862391000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1480862391000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"dcf9fe43b2ef78b923118ba39efedb38760e76b1","modified":1486658818000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1480862391000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"ff9f163bb05c0709577040a875924d36c9ab99d6","modified":1486658818000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"1408209dfb9a22a0982a30bdbd14842c2b53f264","modified":1486658818000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9b63bd8effc7cf4b96acdea4d73add7df934a222","modified":1486658818000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1486658818000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1480862391000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1480862391000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1486658818000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1480862391000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1480862391000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"9ccee9189c910b8a264802d7b2ec305d12dedcd0","modified":1486658818000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1480862391000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1480862391000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1480862391000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1480862391000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1480862391000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1480862391000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1480862391000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1480862391000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1480862391000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1480862391000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1480862391000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1480862391000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1480862391000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1480862391000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1480862391000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1480862391000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1480862391000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1480862391000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1480862391000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1480862391000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1480862391000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1480862391000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1480862391000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1480862391000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1480862391000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1480862391000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1480862391000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4b7f81e1006e7acee3d1c840ccba155239f830cc","modified":1480862391000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1480862391000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1480862391000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1480862391000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1480862391000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1480862391000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1480862391000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1480862391000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1480862391000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1486658818000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1480862391000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1480862391000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1480862391000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1486658818000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"b9a2e76f019a5941191f1263b54aef7b69c48789","modified":1486658818000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1480862391000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1480862391000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1480862391000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1480862391000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"bfd806d0a9f21446a22df82ac02e37d0075cc3b5","modified":1486658818000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1480862391000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1480862391000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1480862391000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1480862391000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1480862391000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1480862391000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1480862391000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1480862391000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1480862391000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1486658818000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1480862391000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1480862391000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"3eb73cee103b810fa56901577ecb9c9bb1793cff","modified":1480862391000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"eba491ae624b4c843c8be4c94a044085dad4ba0f","modified":1480862391000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1480862391000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1480862391000},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1486658818000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1480862391000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1480862391000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1480862391000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"637c6b32c58ecf40041be6e911471cd82671919b","modified":1480862391000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1486658818000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1480862391000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1480862391000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1480862391000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1480862391000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1480862391000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1480862391000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1480862391000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1480862391000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1480862391000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1480862391000},{"_id":"source/img/keyboard_pannel_switch-adjust_unresolved.gif","hash":"32231128bcacd028567cc3cd92b4f327b33a9245","modified":1463310070000},{"_id":"source/img/keyboard_pannel_switch-adjust_resolved.gif","hash":"b1dba9160bc8aec42ea0942d8e15cc40a3e64c3a","modified":1463310052000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1480862391000},{"_id":"source/img/unresolve_mv.gif","hash":"c1189f6dc2915b3a3696e8d7427a49eabfcd289c","modified":1452339952000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1480862391000},{"_id":"source/img/filedownloader-serial_tasks_demo.gif","hash":"c9af73e8f424190b78bdd8178ca1c057f3cfa62f","modified":1463310228000},{"_id":"source/img/filedownloader-parallel_tasks_demo.gif","hash":"2a81dd2c025bd825095a337be6d9af212b6925ba","modified":1463310209000},{"_id":"source/img/filedownloader-tasks_manager_demo.gif","hash":"8b03d7480bd36d7475025ee72390363fd1c6f25b","modified":1463310243000},{"_id":"source/img/filedownloader-mix_tasks_demo.gif","hash":"901327e8518c92119b9158f64072ca50cf89336b","modified":1463310185000},{"_id":"public/atom.xml","hash":"b0fbcbd0d7d1e3203b0f7baaf0567b6a689b878b","modified":1488178716630},{"_id":"public/archives/page/14/index.html","hash":"2552740054a6cfccdc9a0251ec9eaf8821bb93d6","modified":1488181181548},{"_id":"public/archives/2008/index.html","hash":"d4b0f33b5a03613fff2485f07ff2e84d8c50c5fa","modified":1488181181527},{"_id":"public/archives/2008/01/index.html","hash":"6b96d1bb1d2f1f786bf3ed77d9e379bc0b409203","modified":1488181181527},{"_id":"public/archives/2008/11/index.html","hash":"db9ac950466798469a0559acda3fd9fd7afb8671","modified":1488181181528},{"_id":"public/archives/2009/index.html","hash":"2df1108ab65481f024403577ea524fd6b2344206","modified":1488181181528},{"_id":"public/archives/2009/04/index.html","hash":"4ad847863895624701526affb4fd020a3357a425","modified":1488181181528},{"_id":"public/archives/2009/08/index.html","hash":"cf2921d9bf20ed48fe59dd1505fe4ee43b845182","modified":1488181181528},{"_id":"public/archives/2010/index.html","hash":"9912be20c0d1f17935dba87a2e0e1d4f196405db","modified":1488181181528},{"_id":"public/archives/2010/12/index.html","hash":"fd04163a019f789ea4e4cac1c9db5ac308255b79","modified":1488181181528},{"_id":"public/archives/2011/index.html","hash":"2dbb7c4315aef0741a0c9b53468569a22d05ee24","modified":1488181181528},{"_id":"public/archives/2011/10/index.html","hash":"bc861ce542ec8509168f48b69270962b7787fd4b","modified":1488181181528},{"_id":"public/archives/2012/11/index.html","hash":"8ab3e9cb4911e43625ba478eeb8fc2b75aaf4b59","modified":1488181181528},{"_id":"public/archives/2012/12/index.html","hash":"322e42ea3a537b3aae6c2524508ec84206f78a84","modified":1488181181528},{"_id":"public/archives/2013/page/2/index.html","hash":"2443620cfa040013f993af6237a03571d755ffc0","modified":1488181181528},{"_id":"public/archives/2013/01/index.html","hash":"d914c76d10e58ee64032d96bcd295761054651d7","modified":1488181181528},{"_id":"public/archives/2013/03/index.html","hash":"5d19229c43114719aa2e5b0cc28aa6b49e13a383","modified":1488181181528},{"_id":"public/archives/2013/04/index.html","hash":"d25349d9eef016c8d184e92a430f61a6aedec204","modified":1488181181528},{"_id":"public/archives/2013/06/index.html","hash":"23e9b28faed1107a3602b56776713cff6db1359e","modified":1488181181528},{"_id":"public/archives/2013/07/index.html","hash":"aa714ecfed57c0b04d0ab5de6e77132ab86220f8","modified":1488181181528},{"_id":"public/archives/2013/11/index.html","hash":"e9192c67c51fc1f378c75d86d89e1b5055c74e89","modified":1488181181528},{"_id":"public/archives/2013/12/index.html","hash":"80f6153eb02c5d48bf1a8013a764e6370b1a7491","modified":1488181181528},{"_id":"public/archives/2014/page/2/index.html","hash":"07898d37235e3e0ec5748057fb8556dd3b887da5","modified":1488181181528},{"_id":"public/archives/2014/01/index.html","hash":"ab6c9c4c7d77334e4455602581bd33ddd9eece11","modified":1488181181528},{"_id":"public/archives/2014/06/index.html","hash":"af4f254f2c5086c4395dd7851f0b62769cf72c14","modified":1488181181528},{"_id":"public/archives/2014/08/index.html","hash":"e81572a925400eecd128baedf236d4edb9336e7f","modified":1488181181528},{"_id":"public/archives/2014/09/index.html","hash":"7a4a24402a149d7938159b389e1eaec9c46065b3","modified":1488181181528},{"_id":"public/archives/2014/12/index.html","hash":"3be78c9aee9dac1d25da9cc0232cd472e254cccc","modified":1488181181529},{"_id":"public/archives/2015/page/7/index.html","hash":"47d6c556c54b7d3016f7ba2cb3654440ae1397e3","modified":1488181181529},{"_id":"public/archives/2015/01/index.html","hash":"974137d18fa5cc8bd3f2db8cf37d4380c929a1fe","modified":1488181181529},{"_id":"public/archives/2015/02/index.html","hash":"4f69d14cc59eaad60e9b697b87ced848d0cf4ec5","modified":1488181181529},{"_id":"public/archives/2015/04/index.html","hash":"aee2f4b73e19c51fef37ad3c35a63abaa54b779c","modified":1488181181548},{"_id":"public/archives/2015/05/index.html","hash":"d402a13ca370408708eaea042a63589e989e2ad4","modified":1488181181529},{"_id":"public/archives/2015/06/index.html","hash":"1ef1b8ca3be3e1e3798df64815e43295f6f3d576","modified":1488181181529},{"_id":"public/archives/2015/07/page/2/index.html","hash":"b131ae5f4b514ad0ede67114daf3dab80f1c3bdc","modified":1488181181529},{"_id":"public/archives/2015/09/index.html","hash":"ab23cd6822ca11cd41b81f00cc87587f4bea25ab","modified":1488181181529},{"_id":"public/archives/2015/10/index.html","hash":"4d751299f8b2af8400c2d98a35a49d0d276ee778","modified":1488181181529},{"_id":"public/archives/2015/11/page/2/index.html","hash":"611aff830864b2cb62b1e1ca53a659c98be52b55","modified":1488181181529},{"_id":"public/archives/2015/12/index.html","hash":"b0ceac770758ea6b83f4697a3dde389cfc397c9a","modified":1488181181529},{"_id":"public/archives/2016/page/3/index.html","hash":"6a986bdc90522bc8597a7930db40f3c3f1e022db","modified":1488181181529},{"_id":"public/archives/2016/01/index.html","hash":"2bf588d7eb8586ffd91d71540714a4cf2322b6a4","modified":1488181181529},{"_id":"public/archives/2016/03/index.html","hash":"320a4d303aa53c883f10f13131ad5b38cce18634","modified":1488181181529},{"_id":"public/archives/2016/04/index.html","hash":"798b1bec784ae9db03f2225e32a0b514727c65a2","modified":1488181181529},{"_id":"public/archives/2016/05/index.html","hash":"6f3380935cbd4c7fccd99cef987cefe369f71dad","modified":1488181181529},{"_id":"public/archives/2016/08/index.html","hash":"1d7bac33f65ba3d0fbded386a703b1be70ec47bf","modified":1488181181529},{"_id":"public/archives/2016/09/index.html","hash":"06af76b311753748c3268ecc5875af6dc89046e9","modified":1488181181529},{"_id":"public/archives/2016/10/index.html","hash":"5ac7401ed250143717fa200224e9bc15e410e1b8","modified":1488181181529},{"_id":"public/archives/2016/11/index.html","hash":"f51088ea207766f5a5f0dfe0d8d33c8744b8fcb4","modified":1488181181529},{"_id":"public/archives/2016/12/index.html","hash":"b77fc1a6e38ffd7fa606888ba341635c68565723","modified":1488181181529},{"_id":"public/archives/2017/01/index.html","hash":"4d3f96e0cf409cf906ca7827832924ef504c4f0b","modified":1488181181529},{"_id":"public/archives/2017/02/index.html","hash":"dec1d2b867f32ac31f11607ce349d72d01fe61c1","modified":1488181181529},{"_id":"public/tags/文笔/page/2/index.html","hash":"103c029ea0ea590e3f59c678604b9d11d5728c06","modified":1488181181529},{"_id":"public/tags/生活感悟/index.html","hash":"a9d3abed99b921fb7dcb943b2742112f2d83b3f2","modified":1488181181529},{"_id":"public/tags/Android/page/7/index.html","hash":"bbb83a0465a97eee02ab6367e8901d9513512113","modified":1488181181529},{"_id":"public/tags/2d/index.html","hash":"04ed207371e7e11bde395a4693802e39385578f6","modified":1488181181530},{"_id":"public/tags/drawing/index.html","hash":"c3da027fd7c2c792b39a3d2de3899b431c894e39","modified":1488181181530},{"_id":"public/tags/canvas/index.html","hash":"7b67bd0a2fd5a58c8581165a868928204b438d09","modified":1488181181530},{"_id":"public/tags/360手机卫士/index.html","hash":"23c0e2ee0cf4c8b7e8fef5bbca8641bb851aabe8","modified":1488181181530},{"_id":"public/tags/InfoQ/index.html","hash":"073657379a3849e64880478995ce3d0a4b5a3679","modified":1488181181530},{"_id":"public/tags/优化/page/2/index.html","hash":"4febc82c443959d8ae008bc69ab71d0ab7f6f88e","modified":1488181181530},{"_id":"public/tags/总结/index.html","hash":"b4ea2d6260f213808b7ffadcffbb24c4d776b7fd","modified":1488181181530},{"_id":"public/tags/AIDL/index.html","hash":"1b037f8cf0af03450a9fff0ae7bf1af14de2a51d","modified":1488181181530},{"_id":"public/tags/通信/index.html","hash":"0c8f3c8ff4474c81fcbcaaa0df84d6666f6e1386","modified":1488181181530},{"_id":"public/tags/imageview/index.html","hash":"37dcb5cb860f324059dddcd98a40e552ef3ccf57","modified":1488181181530},{"_id":"public/tags/viewpager/index.html","hash":"73112c00fcacac21101ce5ce762cae8a7549cc24","modified":1488181181530},{"_id":"public/tags/缩放/index.html","hash":"8827f148374ce85b10edb718bc3ed9b7e9c68624","modified":1488181181530},{"_id":"public/tags/数据库/index.html","hash":"52570d7f2b0c047bd8ac35bedeba8e1a1e723e64","modified":1488181181530},{"_id":"public/tags/架构/index.html","hash":"bef6e539d454e10a71543528577bd157150466dc","modified":1488181181530},{"_id":"public/tags/JLibrary/index.html","hash":"e1bef0671925c8831bd172523767d722e4ed359f","modified":1488181181530},{"_id":"public/tags/项目/page/2/index.html","hash":"54d3c3abee81e70739ce535b51a12cdc12e33ed3","modified":1488181181530},{"_id":"public/tags/分析/index.html","hash":"9bed074b5f2f6dd2b0941db0b093584da96890d7","modified":1488181181530},{"_id":"public/tags/进程通信/index.html","hash":"c2fb1b5652f35bb996a735798e73b1b17c35f709","modified":1488181181530},{"_id":"public/tags/推送/index.html","hash":"58662935fe15dd6936790b0941097895b9149660","modified":1488181181530},{"_id":"public/tags/探究/index.html","hash":"278dcdaa8456eaaae99e50db085dbe98febdf7fb","modified":1488181181530},{"_id":"public/tags/socket/index.html","hash":"b9294f02f3d13626895bb1ff2e84c5309071e535","modified":1488181181530},{"_id":"public/tags/TCP/index.html","hash":"997c79f7a35ea6c4451ba79bc8fb57e758daa781","modified":1488181181530},{"_id":"public/tags/微信/index.html","hash":"88c14ff4e002e050f242c9ae8d8fab2815cca6dc","modified":1488181181530},{"_id":"public/tags/网络/index.html","hash":"a4f9f57666995ec5a67c6109d24e3ec3c7fafa91","modified":1488181181530},{"_id":"public/tags/Falcon/index.html","hash":"3d6cf88b1f0175b1ad208d9a150e6e879dd5a3c7","modified":1488181181530},{"_id":"public/tags/Joaquim/index.html","hash":"cb628f335a11d00a82ffbc4e65d471f9c9656ee5","modified":1488181181530},{"_id":"public/tags/flatbuffer/index.html","hash":"53db844a17b619f527a6e9d6f9c17d0727e1ce75","modified":1488181181530},{"_id":"public/tags/optimize/index.html","hash":"793915b5e447b0e2b5ef819d2e79696fdd459b41","modified":1488181181530},{"_id":"public/tags/python/index.html","hash":"1e7bb23cf171d96ddb2fd4a9feb310b5189019e5","modified":1488181181530},{"_id":"public/tags/文件管理/index.html","hash":"63cef53ca57f8a810246a133f08944d011b12d20","modified":1488181181531},{"_id":"public/tags/缓存管理/index.html","hash":"2fb3c4686702ca9124cd423562b7360ff787d6a2","modified":1488181181531},{"_id":"public/tags/git/index.html","hash":"a8abb52bda0a88eb9396962ee9f3f68b832d0525","modified":1488181181531},{"_id":"public/tags/管理/index.html","hash":"33fe0292f42bb8c5b7ba41fc1edf5c6379c58bf2","modified":1488181181531},{"_id":"public/tags/Codelab/index.html","hash":"eafb2a11041350a7ed89aa99f084ec9a85eba995","modified":1488181181531},{"_id":"public/tags/google/index.html","hash":"91ec15ca0b51a5be0732ceb5f3484628a4bb9eba","modified":1488181181531},{"_id":"public/tags/Material-Design/index.html","hash":"3b8edc54a2de5767d7e4a712963fda469feb9344","modified":1488181181531},{"_id":"public/tags/java/index.html","hash":"4dad0bf8ee648102277da0f1e7d89e4a4cd5e108","modified":1488181181531},{"_id":"public/tags/Lambda/index.html","hash":"fc51750088bcb646cb03694ead8ed5af0d48d649","modified":1488181181531},{"_id":"public/tags/LeakCanary/index.html","hash":"8b7b7ffc3b685560126df422c12ebba36a64d193","modified":1488181181531},{"_id":"public/tags/内存泄漏/index.html","hash":"16853ecb6a0bb0963e3c5fb1a0ab95200813b863","modified":1488181181531},{"_id":"public/tags/使用/index.html","hash":"f3ed74fea8a5eb024f59fb9d85d6a44765e2665d","modified":1488181181531},{"_id":"public/tags/Square/index.html","hash":"c88d86c7f8eed442b9c0fcc41ec742c302af2e40","modified":1488181181531},{"_id":"public/tags/PhotoGallery/index.html","hash":"dff2f60c2fdc2368d73389fb3de57cb5272ae31d","modified":1488181181531},{"_id":"public/tags/Vollery/index.html","hash":"4d67314a97c3011f9d267d6a74970b04d33229cb","modified":1488181181531},{"_id":"public/tags/Picasso/index.html","hash":"a43491016f4f6f19f097828a412bce6a5e2745b5","modified":1488181181531},{"_id":"public/tags/wordpress/index.html","hash":"08a666e59c09c8d6ee5d7a0693221096be20276e","modified":1488181181531},{"_id":"public/tags/多线程/index.html","hash":"16ccbeba414bf6372c4009a6289f5f1c6976e87a","modified":1488181181531},{"_id":"public/tags/AsyncTask/index.html","hash":"b33c697c01bf441e6692a4f4a9e89f1d9f2f099e","modified":1488181181531},{"_id":"public/tags/RxJava/index.html","hash":"98a0d7127cb837062d4025d8157ee8eaf1afd6a6","modified":1488181181531},{"_id":"public/tags/异步/index.html","hash":"e4e54855180e006a26ad04b5a2490529f58be985","modified":1488181181531},{"_id":"public/tags/Java/index.html","hash":"a44c9234085b46ea00dcc6a316352f0d01195dc8","modified":1488181181531},{"_id":"public/tags/框架/index.html","hash":"cdbc2fcebe55b1567a8290150ed8fa56af60bf80","modified":1488181181531},{"_id":"public/tags/RxAndroid/index.html","hash":"8d70849856cd4d93404daa2ec2dfbc9f0f78ce2c","modified":1488181181531},{"_id":"public/tags/响应式编程/index.html","hash":"e609ab5a7e3289beaa13183426c7772c19f2497c","modified":1488181181531},{"_id":"public/tags/模式/index.html","hash":"2ae64c8bdfc208a32aad95d61a726b95ffd70c33","modified":1488181181531},{"_id":"public/tags/观察者模式/index.html","hash":"07e03b3613c6cf1b0f39e258f160f7ee07cfd33c","modified":1488181181531},{"_id":"public/tags/parse/index.html","hash":"28c44c988a2eb0bb020c6e64cfbd35c947e47544","modified":1488181181532},{"_id":"public/tags/svg/index.html","hash":"f8ffd4fe716b088071a434ef30526912e7f924b9","modified":1488181181532},{"_id":"public/tags/解析/index.html","hash":"efb8d90209d5a56c8bb0377b8bc7fd2a98c0c957","modified":1488181181532},{"_id":"public/tags/keybord/index.html","hash":"48d0d9404f4e62ab616e0f58622d35fad6054d97","modified":1488181181532},{"_id":"public/tags/Panel/index.html","hash":"55f8ea7c45db606b491530913269ecaf6ea29dad","modified":1488181181532},{"_id":"public/tags/Wechat/index.html","hash":"c0638095326da0393ab9e16913fc18bb99f3748f","modified":1488181181532},{"_id":"public/tags/硬件/index.html","hash":"2ed16c8bbbf580e473f03b5effbba1b380125bb3","modified":1488181181532},{"_id":"public/tags/路由器/index.html","hash":"b11ec22e3b354e729b53c3f2a2c922a2e1894fc6","modified":1488181181532},{"_id":"public/tags/翻墙/index.html","hash":"7f8bc7f024f818a98b06d997bfd4540783d77279","modified":1488181181532},{"_id":"public/tags/shadowsocks/index.html","hash":"bbcaab7b8e2c4b826f5c3134935982991c4c5501","modified":1488181181532},{"_id":"public/tags/OpenWrt/index.html","hash":"98ef465706d9538b954a60759b951a2443be0ce9","modified":1488181181532},{"_id":"public/tags/mac/index.html","hash":"01800a229936da9797fa0a67753a152c077088ca","modified":1488181181532},{"_id":"public/tags/proxy/index.html","hash":"2ecb235835ffc7714bf603ab0e601c6c53b227c7","modified":1488181181532},{"_id":"public/tags/代理/index.html","hash":"63102266093bd8bf3a5342bfaea5e92627e53ce5","modified":1488181181532},{"_id":"public/tags/代码审查/index.html","hash":"60df32cb361c09687d4efb9dff535620c9697f53","modified":1488181181532},{"_id":"public/tags/Google/index.html","hash":"511ecbe8b969cbc662fb3707765f67a8d4f3d646","modified":1488181181532},{"_id":"public/tags/Alipay/index.html","hash":"15b63c6dbf78ed92245d02f68d1042b718e0ef29","modified":1488181181532},{"_id":"public/tags/Architecture/index.html","hash":"92bb6e84ba6fef0d3868fa4a24349327e0120705","modified":1488181181532},{"_id":"public/tags/Decoupling/index.html","hash":"edf91db7b91dec6bc48912067aeee4398823ec76","modified":1488181181532},{"_id":"public/tags/ActivityManagerService/index.html","hash":"fb04494564248c96990584a1a7b164f8a1618876","modified":1488181181532},{"_id":"public/tags/ActivityThread/index.html","hash":"67b50fabe470990bfb21bf559be1269a2b7e7560","modified":1488181181532},{"_id":"public/tags/Zygote/index.html","hash":"2ead8b52accac5aac453bcc96f4c5c9bf57f7286","modified":1488181181532},{"_id":"public/tags/视图/index.html","hash":"c44c7556ad21ac5f972eb6695c4564a30fd6898c","modified":1488181181532},{"_id":"public/tags/View/index.html","hash":"8e2ac2995ce84692681fa4053a9c0d5ade5a50b3","modified":1488181181532},{"_id":"public/tags/重绘/index.html","hash":"1d3ef111d9e807e9117cde6d0f0d9f106c82a44c","modified":1488181181532},{"_id":"public/tags/动画/index.html","hash":"8696daf266053102a8a421d79b103d814164148c","modified":1488181181532},{"_id":"public/tags/animation/index.html","hash":"12697c423c97fe08343187ee3bf1cfc1b37a9d1b","modified":1488181181533},{"_id":"public/tags/TimeInterpolator/index.html","hash":"3a35bd216093c6d559a3ff3fec32cf2091db4baa","modified":1488181181533},{"_id":"public/tags/TypeEvaluator/index.html","hash":"0d8eba4d9f948e622f5d622be486ea8673148871","modified":1488181181533},{"_id":"public/tags/ObjectAnimator/index.html","hash":"378c17e1beb6470872bc0932ed387f391306a730","modified":1488181181533},{"_id":"public/tags/ValueAnimator/index.html","hash":"eeabcd0ae53baa6ad769cad9a1d0473f2e70cfd6","modified":1488181181533},{"_id":"public/tags/AnimatorSet/index.html","hash":"8d1773b89d2ef62b2baa4b9bccab260fdb220c76","modified":1488181181533},{"_id":"public/tags/ART/index.html","hash":"696b9d2899c3eeed86b3285cf86d931cee955822","modified":1488181181533},{"_id":"public/tags/Dalvik/index.html","hash":"806d615e0df672cf57e9366e393e7565ad95478a","modified":1488181181534},{"_id":"public/tags/安装/index.html","hash":"aa0eaf758b90e5184124e7f24f9062ac9db00514","modified":1488181181534},{"_id":"public/tags/运行/index.html","hash":"789b10a862fc68f6369bbd70c9b424728d7360b8","modified":1488181181534},{"_id":"public/tags/dex/index.html","hash":"0b23060fb46bfa55f9386bec0fd41ab70b177698","modified":1488181181534},{"_id":"public/tags/gradle/index.html","hash":"60813d46b63d9266a43aef7b5c7ec845fa0ac67c","modified":1488181181534},{"_id":"public/tags/ant/index.html","hash":"b975e91920d237df3516a3648579b5ba1ce0c478","modified":1488181181534},{"_id":"public/tags/ClassLoader/index.html","hash":"96cc3f85348ac17648d357fc9cc3659e8b9cd57d","modified":1488181181534},{"_id":"public/tags/安全/page/2/index.html","hash":"8c676123d44444e9253f271e47fb4a64f1d2ebca","modified":1488181181534},{"_id":"public/tags/HttpURLConnection/index.html","hash":"eb1d0cb04d95e36546efac9a211ebe41df236d42","modified":1488181181534},{"_id":"public/tags/HttpClient/index.html","hash":"2a7ee31a9295cd059faf57b9889204220dfb0db5","modified":1488181181534},{"_id":"public/tags/Handler/index.html","hash":"89c9713633a0e6fc171981961ebc1c9c0e76e7c8","modified":1488181181534},{"_id":"public/tags/Looper/index.html","hash":"37e0f9a49e073e71336986dd50118629da17e210","modified":1488181181534},{"_id":"public/tags/消息机制/index.html","hash":"6b4dff74ecf913fffa695eac5d6f953bb154e83d","modified":1488181181534},{"_id":"public/tags/MessageQueue/index.html","hash":"20cd250cdded0063f16799c638e68d87f81d2292","modified":1488181181534},{"_id":"public/tags/Barrier/index.html","hash":"e0d46e7f3fd48795f0119030cb521191eef594ea","modified":1488181181534},{"_id":"public/tags/多进程/index.html","hash":"a1b579678dd38f01718e3b1d69a2cd6702dacbe6","modified":1488181181534},{"_id":"public/tags/Binder/index.html","hash":"e361318543e152f54392b0fa28eaad1b0098f90e","modified":1488181181534},{"_id":"public/tags/ServiceManager/index.html","hash":"f65662b373a1edd0f3e5350287f0a57aaad33342","modified":1488181181534},{"_id":"public/tags/Record/index.html","hash":"3c3847e968fdf136951572f813246cae2420f5db","modified":1488181181534},{"_id":"public/tags/MediaRecorder/index.html","hash":"55ed1ace2ba83d3b9b4a0de0c46d36a0c75b3d83","modified":1488181181534},{"_id":"public/tags/JVM/index.html","hash":"6602b79083589d002415bb288c9b4f13aaf84d9f","modified":1488181181534},{"_id":"public/tags/典范/index.html","hash":"d42af771c3346d7e34e4a47c556d2baa752b75b6","modified":1488181181534},{"_id":"public/tags/Scheduler/index.html","hash":"b8bda19b1b5325926dcc1c493db9c28d19ca33e2","modified":1488181181534},{"_id":"public/tags/Job-Scheduler/index.html","hash":"2b6c2aae1df3936d0a2ccf691bdac04be9f280c0","modified":1488181181534},{"_id":"public/tags/Syncs-Adapter/index.html","hash":"f65bafbaf9d6280708454bbb6e4b63682eea2751","modified":1488181181534},{"_id":"public/tags/AlarmManager/index.html","hash":"a7920a33700ee8612eb2fe4efab33fe70290232c","modified":1488181181534},{"_id":"public/tags/Doze-Mode/index.html","hash":"7e7b0c5de6b277d2423a2d93f19ae58de6d6c747","modified":1488181181534},{"_id":"public/tags/FileProvider/index.html","hash":"d25b835419e94f837917e95004ae262208b04560","modified":1488181181534},{"_id":"public/tags/URI/index.html","hash":"61230c84e48a1cc79a699d3cf3eef90f71be9c8e","modified":1488181181535},{"_id":"public/tags/演讲/index.html","hash":"eb08d9cf6987c74976f850955d52488e6ff83e39","modified":1488181181535},{"_id":"public/tags/单元测试/index.html","hash":"123d76b776ee07a44a9e20dcf506dffa36d1980b","modified":1488181181535},{"_id":"public/tags/模拟测试/index.html","hash":"7d44caaf0f9e9349804227c243ed3222ed5d5a29","modified":1488181181535},{"_id":"public/tags/UI测试/index.html","hash":"90e08aeb396e89cd97d5bc2b838ef0b289883296","modified":1488181181535},{"_id":"public/tags/稳定性/index.html","hash":"56f699ec093b0224851380ba862a7398dc457950","modified":1488181181535},{"_id":"public/tags/进程/index.html","hash":"31b868cea583e6e751042f92872af83157a3703c","modified":1488181181535},{"_id":"public/tags/线程/index.html","hash":"359f2877f85bfb7c10486eebaa6f745cea256668","modified":1488181181535},{"_id":"public/tags/组件/index.html","hash":"153f6e04f0944a2921196accc4784d85d1f8627c","modified":1488181181535},{"_id":"public/tags/调度/index.html","hash":"186a7b4ef8770f4afe935c6d56aa43d26ddad95c","modified":1488181181535},{"_id":"public/tags/心理学/index.html","hash":"741a9a8d9f1b175d1d0dcbc4a6cc60372c4c822c","modified":1488181181535},{"_id":"public/tags/屌丝/index.html","hash":"c09f83b3fe9806527f5df1ddb00440ea6128c988","modified":1488181181535},{"_id":"public/tags/理论/index.html","hash":"d66d1f30a8bfd8c4dd3221965767d18c905ece80","modified":1488181181535},{"_id":"public/tags/笔记/index.html","hash":"c2f93412051520b0272a4cbf97fc3cae33cf3bcf","modified":1488181181535},{"_id":"public/tags/虚拟机/index.html","hash":"857fb5e159e0ccf49b2885d3a8a63e3ff0e5fc01","modified":1488181181535},{"_id":"public/tags/Layout/index.html","hash":"000b0ab47f34f7e7acca90f01e5d92fba3f754ce","modified":1488181181535},{"_id":"public/tags/UI/index.html","hash":"b35969db297a2e2675d362e9ca853c61708d5713","modified":1488181181535},{"_id":"public/tags/心跳/index.html","hash":"6cbe5d6eb672e6132889727bd981154a94b39fda","modified":1488181181535},{"_id":"public/tags/弱网长连接/index.html","hash":"85c51c0bace6edd1716f1e794235e45d61ad8937","modified":1488181181535},{"_id":"public/tags/9patch/index.html","hash":"854f0c948938d265bbef5ecb74b472f4b5c85b39","modified":1488181181535},{"_id":"public/tags/density/index.html","hash":"4c6a4036d6bd1acef8877e0af303ecfca9ae2047","modified":1488181181535},{"_id":"public/tags/densityDPI/index.html","hash":"75b059264fdc7f981917178c21e65ff12a0c2b29","modified":1488181181535},{"_id":"public/tags/dp/index.html","hash":"88310f9a01a08b7e30180ae15905864498f3628a","modified":1488181181535},{"_id":"public/tags/dpi/index.html","hash":"3e597b3aabbebfe19590b43ffecbf9e0c87ef9b4","modified":1488181181535},{"_id":"public/tags/ppi/index.html","hash":"5cf9e72c3ed1c0393c5d245296757e7bae3d0f7d","modified":1488181181535},{"_id":"public/tags/Download/index.html","hash":"7d147183ce482ce42918eb4ef532be5b8995d368","modified":1488181181535},{"_id":"public/tags/Parallel/index.html","hash":"bd6f5083862c505088d572eb8ccac8387be63a32","modified":1488181181536},{"_id":"public/tags/Serial/index.html","hash":"38053aa23f60e07ddfee7878053058b7fb72821f","modified":1488181181536},{"_id":"public/tags/Project/index.html","hash":"2af071dbc16d120d95f37ed916acf74821cc2f3c","modified":1488181181536},{"_id":"public/tags/GC/index.html","hash":"09dcfb3b5b77d3c4d104660cbf39ea7cb641ed09","modified":1488181181536},{"_id":"public/tags/Concurrent-GC/index.html","hash":"cd5c4cd6d25d45b44bc8d9750bbe4bb5ea68b896","modified":1488181181536},{"_id":"public/tags/Activity-Heap/index.html","hash":"6d687ad2a7bc878bc74ef24382b1a215d60f63aa","modified":1488181181536},{"_id":"public/tags/Zygote-Heap/index.html","hash":"f2226f7535465f0e2e9ab14dc653f96d36244854","modified":1488181181536},{"_id":"public/tags/Mark-Sweep/index.html","hash":"8cfa3eb6a7022c7cd2d4ca2aee97e34dc641d68d","modified":1488181181536},{"_id":"public/tags/Google-IO/index.html","hash":"2d0891022b62b701334d80618e4fa0beb4d2453f","modified":1488181181536},{"_id":"public/tags/Firebase/index.html","hash":"93001561f4051290be815871f146390d4d9c339a","modified":1488181181536},{"_id":"public/tags/Allo/index.html","hash":"be683ff27571ee32d8ee6519f5420bdf0e1ea3c5","modified":1488181181536},{"_id":"public/tags/VR-Mode/index.html","hash":"5480b20635770ecd645de291295ce685e7c543c7","modified":1488181181536},{"_id":"public/tags/Android-N/index.html","hash":"6dea1d8fd36ab7778d9e7409149b7554b2dac9b4","modified":1488181181536},{"_id":"public/tags/Instant-App/index.html","hash":"bbd009aaa3b83e81cdc67289e5b113adbbb925c1","modified":1488181181536},{"_id":"public/tags/Build/index.html","hash":"0fb986f3ce084f065a10d6ba573bbcf73c1bb93a","modified":1488181181536},{"_id":"public/tags/Proguard/index.html","hash":"b7feb5cf01765442a862bfef3b2d4c1662b0aaad","modified":1488181181536},{"_id":"public/tags/Gradle/index.html","hash":"c43c108fae36782129e2619acfb090404ca8a0c3","modified":1488181181536},{"_id":"public/tags/DexGuard/index.html","hash":"70c7f4746ad95ab066de97b75d9041b9b32ef6fb","modified":1488181181536},{"_id":"public/tags/Multi-Dex/index.html","hash":"eabff7bbcc7fd4881d6bd3da65559d12a8acae36","modified":1488181181536},{"_id":"public/tags/gRPC/index.html","hash":"cda55769e9564a85c5413fda7f463fb8e8faabf6","modified":1488181181536},{"_id":"public/tags/Thrift/index.html","hash":"12a80606d8db1eb631ecc67f04954b0da408e279","modified":1488181181536},{"_id":"public/tags/HTTP-2/index.html","hash":"fb9b4552db61ae29f6ff7b0caa475dc2fc03381e","modified":1488181181536},{"_id":"public/tags/Proto3/index.html","hash":"1e3338d548144bf217ec6059a40478cbb0bc7098","modified":1488181181536},{"_id":"public/tags/platform/index.html","hash":"11279c18b155933f789d5dabda931b5de6abca05","modified":1488181181536},{"_id":"public/tags/hybrid/index.html","hash":"876e905427a12f15454cd97f2066e25cd6c43eac","modified":1488181181536},{"_id":"public/tags/phoneGap/index.html","hash":"3ddb7b0166e904f902980e9e31bdc17500dbb22e","modified":1488181181537},{"_id":"public/tags/Intellij/index.html","hash":"21cef3eeb9e42cfc4e1ab9d125a0d1adeb54eeaf","modified":1488181181537},{"_id":"public/tags/使用说明/index.html","hash":"5bfd246515b09ba37c460effb5d4a83ded069e3b","modified":1488181181537},{"_id":"public/tags/JDK/index.html","hash":"a892b723ff34797746cb89a06e0488ba9ad6c760","modified":1488181181537},{"_id":"public/tags/Synchronized/index.html","hash":"71b9914a0dd948f1cc73c4760dd139e55b52092c","modified":1488181181537},{"_id":"public/tags/同步/index.html","hash":"b4536ef221e563324231afc13862801d61b56133","modified":1488181181537},{"_id":"public/tags/偏向锁/index.html","hash":"50f4cd8258a34d056c36fb8f4fa461c52b17eea3","modified":1488181181537},{"_id":"public/tags/轻量级锁/index.html","hash":"d46911483deb88bbc095cb020a680a641ad0cce9","modified":1488181181537},{"_id":"public/tags/重量级锁/index.html","hash":"baba0652d4079ee522ac66ede3b01caa478f33d5","modified":1488181181537},{"_id":"public/tags/自旋/index.html","hash":"a8ae4ae3401c33673d7542a1d46855ae72b804cb","modified":1488181181537},{"_id":"public/tags/键盘/index.html","hash":"b45ebcd252f6d56296bf516e91d51d9ec7bd4151","modified":1488181181537},{"_id":"public/tags/面板/index.html","hash":"97363bbb113ccfeb1845423fb92825f44d847b09","modified":1488181181537},{"_id":"public/tags/闪动/index.html","hash":"18eef5a28c43eb577f05c23d29c06c490060b0f6","modified":1488181181537},{"_id":"public/tags/布局/index.html","hash":"e73236417900a8c3d867564e695a6b04612e3483","modified":1488181181537},{"_id":"public/tags/MIT/index.html","hash":"9db3c88e09aaf2b5ad0dca2820cbe5448a10c6a1","modified":1488181181537},{"_id":"public/tags/BSD/index.html","hash":"6b0429e7ffaf57692375e7d0d3f3c88c743ecb14","modified":1488181181537},{"_id":"public/tags/Apache-License/index.html","hash":"c2eac54d9dac9e781d6faabf55a0fffb6758cb40","modified":1488181181537},{"_id":"public/tags/GPL/index.html","hash":"7fc0b2f9b1a985b85f753972b24c5c53a726c60b","modified":1488181181537},{"_id":"public/tags/LGPL/index.html","hash":"538ddaaa59040bc8eeb0adec3b72ae670551b49d","modified":1488181181537},{"_id":"public/tags/英语流利说/index.html","hash":"1391bfdd08f958f8fe71ccceffaf2140c78d69a3","modified":1488181181537},{"_id":"public/tags/Kotlin/index.html","hash":"0f720f46cb742bf8f1df2b879e3a1346add1246e","modified":1488181181537},{"_id":"public/tags/Programing/index.html","hash":"61f58239547cee7916a8cfb7918383a56f4b1547","modified":1488181181537},{"_id":"public/tags/Effective-Java/index.html","hash":"c4f75c1ca0b81abe72131b4e6fe5d8b497d40eb9","modified":1488181181537},{"_id":"public/tags/draw/index.html","hash":"acfd0a92a84d9d1884e98058c1eabfb9f3cb6fa7","modified":1488181181537},{"_id":"public/tags/sweep/index.html","hash":"12d9e6a09c0bcdae58c47d8df5f55b8b49602e26","modified":1488181181537},{"_id":"public/tags/gradient/index.html","hash":"c8ae0637127fca9da71e60d6293dff86b8c08d8a","modified":1488181181537},{"_id":"public/tags/open-source/index.html","hash":"a11bcdb01e804ebdfb1e38b3a0121d714b729215","modified":1488181181538},{"_id":"public/tags/Message/index.html","hash":"3f7d7ceeec23040fa32afe9ab8b296404f6d69be","modified":1488181181538},{"_id":"public/tags/Thread-safe/index.html","hash":"7c57af4d7dec00c75c06111bbd5b919ab806ce94","modified":1488181181538},{"_id":"public/tags/recycle/index.html","hash":"b5f19794ec6189b1a9c2e29ceaedc7e2af6701ed","modified":1488181181538},{"_id":"public/tags/project/index.html","hash":"52253e9161616431d6edbe4624afa89f412244f1","modified":1488181181538},{"_id":"public/tags/ndk/index.html","hash":"d065e5f85068500d9c162eee42a209773cee0734","modified":1488181181538},{"_id":"public/tags/jni/index.html","hash":"ad8b21aec77980ac4bc8d9cf8be74832ab7e53c7","modified":1488181181538},{"_id":"public/tags/C/index.html","hash":"1adc669d8a45d0aae58926e197cb969641e5a980","modified":1488181181538},{"_id":"public/tags/ShadowSocks/index.html","hash":"60bada06e69960c7a94a346e6b738e45c3f7efef","modified":1488181181538},{"_id":"public/tags/Newifi/index.html","hash":"439315fee8cf64d50ffc3a4207d957704dcb7607","modified":1488181181538},{"_id":"public/tags/STN/index.html","hash":"e1bfb261e022e23d1f3449fa9a9dd347b002f028","modified":1488181181538},{"_id":"public/tags/Mars/index.html","hash":"ba68ab0ed3c92b66896869e49bda623eb31c5b36","modified":1488181181538},{"_id":"public/tags/XLog/index.html","hash":"f1db407b30a926e92808f8873e80e0fa9bd9f6a3","modified":1488181181538},{"_id":"public/tags/RTT/index.html","hash":"6a4fe112c9a38128e3ed848d2d8c556408346974","modified":1488181181538},{"_id":"public/tags/Notification/index.html","hash":"cd2549e9d24eff33a79f250701dd8688aee3ece3","modified":1488181181538},{"_id":"public/tags/最佳实践/index.html","hash":"21e73064acd03d5043bfe63b248a625d729cfb07","modified":1488181181538},{"_id":"public/tags/MessagingStyle/index.html","hash":"36f8e18bb652af0c4e5a6a49789c6ac8f08ccc0c","modified":1488181181538},{"_id":"public/tags/Bundled-Notification/index.html","hash":"2b346bcb9f959fb4cf88d6101ad7f381b79020ff","modified":1488181181538},{"_id":"public/tags/Direct-Reply/index.html","hash":"4d6a35af27bc5783ddaa39e9bb9f6d8ca06fad42","modified":1488181181538},{"_id":"public/tags/Socket/index.html","hash":"2925ca0076746bb447687f16e7fb46ea87a158fb","modified":1488181181538},{"_id":"public/tags/HTTP/index.html","hash":"4b4b745a18938e2388fa7c3c8e4c4baaf90c65d9","modified":1488181181538},{"_id":"public/tags/HTTPS/index.html","hash":"556f2fbe4a31884b46ebb2beafaf39fc9d254b8c","modified":1488181181538},{"_id":"public/tags/SPDY/index.html","hash":"1055d12edaa560afb62fb5410572c6aee859c626","modified":1488181181539},{"_id":"public/tags/QUIC/index.html","hash":"82f68ff9ebcc754a0e324a1388db3fab905d67c4","modified":1488181181539},{"_id":"public/tags/BBR/index.html","hash":"3381b1f378f940834df3ccd957363afe5775e47f","modified":1488181181539},{"_id":"public/tags/MVC/index.html","hash":"0775bbf4ce9179e0f7fd42d8560a6d0e933aeb66","modified":1488181181539},{"_id":"public/tags/MVP/index.html","hash":"5c058a56f31807a825c150b533f644f2074a81ca","modified":1488181181539},{"_id":"public/tags/MVVM/index.html","hash":"a175810d41945737365d5cce863de4b6a1d20ed3","modified":1488181181539},{"_id":"public/tags/迅雷快鸟/index.html","hash":"3139097d691b2086d485bf8417c2f1c00e1cb24f","modified":1488181181539},{"_id":"public/tags/Fastdick/index.html","hash":"f94ea13438a41a42468d4a4778bced6aa405ee37","modified":1488181181539},{"_id":"public/tags/宽带提速/index.html","hash":"c34ddaec80abec1e2ece5e18489339b7095e964e","modified":1488181181539},{"_id":"public/tags/android/index.html","hash":"166ca597fb580f1e292dade419c6cdb52636c958","modified":1488181181539},{"_id":"public/tags/Percent/index.html","hash":"6116dcd8ae54d46e89b723bcbe26c37970f26414","modified":1488181181539},{"_id":"public/tags/Progress/index.html","hash":"0aacfdbd92c09d3a3450fd7c0e1f07adc70e6ae3","modified":1488181181539},{"_id":"public/tags/github/index.html","hash":"099c617d3a2a1b2aa661b98b28b385846f118cc7","modified":1488181181539},{"_id":"public/tags/mysql/index.html","hash":"f75ffc1fb5a0d60bbfc149bc83331d2f2b5ea92a","modified":1488181181539},{"_id":"public/tags/php/index.html","hash":"72860c7e7d3b223c3adae419fdf3915c36b27365","modified":1488181181539},{"_id":"public/tags/sql/index.html","hash":"ab2e4228d5750238909ec26a16bfb6fa6e5b4406","modified":1488181181539},{"_id":"public/tags/留言板/index.html","hash":"0593228a10166e8d9b1fe1e5c081071396b26d25","modified":1488181181539},{"_id":"public/tags/Qiniu/index.html","hash":"179d8cccecb59847e6ddd964f5b869ffb5961039","modified":1488181181539},{"_id":"public/tags/ImageLoader/index.html","hash":"0cb45f51b6e2580c67b0383ab9c356828e48aed3","modified":1488181181539},{"_id":"public/tags/META-INFO/index.html","hash":"6015a95c8e05086edbaea86ea60c3d2406a8b778","modified":1488181181539},{"_id":"public/tags/证书/index.html","hash":"ddadf7ef988327abb62941a5d18baca403046104","modified":1488181181539},{"_id":"public/tags/签名/index.html","hash":"c84b06cf8edfa10c69b21aa17185c6241a21074e","modified":1488181181539},{"_id":"public/tags/攻击/index.html","hash":"5566ada86742e0fb3a7fc100c1c5d5414eb4b969","modified":1488181181539},{"_id":"public/tags/后端/index.html","hash":"080aac0081778cd75aabd98ca5f8e9d1598b082d","modified":1488181181539},{"_id":"public/tags/rails/index.html","hash":"b032c812dafebc51551aa798cf166d2698ecd126","modified":1488181181539},{"_id":"public/tags/ruby/index.html","hash":"b2cb07934073ab4b53091485686b31e6350d5a21","modified":1488181181539},{"_id":"public/tags/语言/index.html","hash":"75e4d5f786c021e90cf67b6e8463e0943451bed0","modified":1488181181540},{"_id":"public/tags/SpannableString/index.html","hash":"3b6a1b9cf927961bbb7573075b050ade8cc156a3","modified":1488181181540},{"_id":"public/tags/Span/index.html","hash":"947911cef936c4d687a57c8d147d4f4dc7386bbc","modified":1488181181540},{"_id":"public/tags/Ellipsize/index.html","hash":"44749ccf6d4b6be1bf8d7f871c776de64d9fc135","modified":1488181181540},{"_id":"public/tags/MaxWidth/index.html","hash":"4b8fc334a59e370bde97d28e7f93e10483b9099e","modified":1488181181540},{"_id":"public/tags/ThreadDebugger/index.html","hash":"768b89f5659a5ec67be599ba37164a4f44c77edb","modified":1488181181540},{"_id":"public/tags/ThreadPool/index.html","hash":"f1aa64709acc264cc41f9063d01f9023507b679a","modified":1488181181540},{"_id":"public/tags/Debugger/index.html","hash":"4b721f27d003bff5cdf3c75ec19f128d9df6a63f","modified":1488181181540},{"_id":"public/tags/Thread/index.html","hash":"4f46404d01429804de3f3948ef58dd6336bff08c","modified":1488181181540},{"_id":"public/tags/Touch/index.html","hash":"f25395ecbc67c7bf7b51e36ae83f5638bb8f8c0d","modified":1488181181540},{"_id":"public/tags/csipsimple/index.html","hash":"e88ed9d0703a3e9100258c5d7a250d098cbfafae","modified":1488181181540},{"_id":"public/tags/voip/index.html","hash":"f8f694bace0d61edec663c18fe4046c5fe702837","modified":1488181181540},{"_id":"public/tags/WR720N/index.html","hash":"b2c2b4fc4539683d0ead2a5d6e3cc2fa1630a3c3","modified":1488181181540},{"_id":"public/tags/zsh/index.html","hash":"53abc83d7b87f041f98d78997d9031b6a4a1dec2","modified":1488181181540},{"_id":"public/tags/Linux/index.html","hash":"b3c617b2fc468dbff058d56e480d45ddef2d6735","modified":1488181181540},{"_id":"public/tags/shell/index.html","hash":"7e51380592172d27f653a7535ce34df0b3ed6b1f","modified":1488181181540},{"_id":"public/tags/抄录/index.html","hash":"2d0d2d18c5db1a7083bed492673280da30a23bf2","modified":1488181181540},{"_id":"public/tags/物联网/index.html","hash":"afd0552f575b2ba3ad9ef492e4ed5146fdf1f798","modified":1488181181540},{"_id":"public/tags/议论/index.html","hash":"62c299fdc04ffdb18d05a3f1606a192f4070901a","modified":1488181181540},{"_id":"public/tags/app/index.html","hash":"aff43838842e00293c5ecec64eaf1aa59ca25c8d","modified":1488181181540},{"_id":"public/tags/Cocos2d-x/index.html","hash":"f7d6e19503a5e382908eaf5c31fccd0328cda4c8","modified":1488181181540},{"_id":"public/tags/游戏/index.html","hash":"576cd2e2d8de17cb3502b69bfabf6064e782bd4b","modified":1488181181540},{"_id":"public/tags/娱乐/index.html","hash":"f3daf5e43bc3067fa6e1aaed2e6f19abf52c7fef","modified":1488181181540},{"_id":"public/tags/视频/index.html","hash":"e88ab98de525d6433c5dbc47bb2a569edab35cf9","modified":1488181181540},{"_id":"public/tags/ListView/index.html","hash":"9468b8eb5d80fc811b6af7362501dd48f569b4f7","modified":1488181181540},{"_id":"public/tags/synchronized/index.html","hash":"1c65931b54b6ad51ad0be973f9289a2746486dee","modified":1488181181541},{"_id":"public/tags/异步加载/index.html","hash":"48bcb5be6c0cff5ca38be80246dd1b9f94a5af27","modified":1488181181541},{"_id":"public/tags/文件结构/index.html","hash":"1001fcc6e8ab22fc4a0b2e6ffcf98ae276bb978f","modified":1488181181541},{"_id":"public/tags/本地缓存/index.html","hash":"34bdd9e61d93905f52397c840730c1f067118989","modified":1488181181541},{"_id":"public/tags/xml/index.html","hash":"a6914b821aec7733e50e00044001e6eefd4d95cf","modified":1488181181541},{"_id":"public/tags/随笔/index.html","hash":"854f5d0733dcda6c9ea7a7740770412d9f7bd5bd","modified":1488181181541},{"_id":"public/tags/日记/index.html","hash":"78e011ec75edae41a3c06e2907fd6f274abe692c","modified":1488181181541},{"_id":"public/tags/感悟/index.html","hash":"9c95d43ea064172cf2ca3e0eb24138f315ad5ad8","modified":1488181181541},{"_id":"public/tags/远程控制/index.html","hash":"b37cb21eac2ef08a03ef095d3f57810b9107eb97","modified":1488181181541},{"_id":"public/tags/大学生挑战杯/index.html","hash":"f588e67de50ade9678fd5eb7a4ff3adbb32c66d6","modified":1488181181541},{"_id":"public/tags/唱歌/index.html","hash":"1bedec0f774e1de0310eec5efec84a12f7ed485a","modified":1488181181541},{"_id":"public/tags/奋斗/index.html","hash":"e6c408823bef2dc1d50850cb1ede7893cf578c3e","modified":1488181181541},{"_id":"public/tags/index.html","hash":"2e2a0b25cda6ce2ad8945e473abdb240f1b714ed","modified":1488181181541},{"_id":"public/grpc/index.html","hash":"ab10d80540e282e16d9f81027317cc346ed272d5","modified":1488181181541},{"_id":"public/network_basic/index.html","hash":"03ce23a286701bb4e2687b4da585d78f374d1745","modified":1488181181541},{"_id":"public/2016/08/16/android_weak_network/index.html","hash":"6d52fdb729b20027eba69c519c1cf86048af7ed6","modified":1488181181541},{"_id":"public/2016/11/30/kotlin/index.html","hash":"e9a61d18932cd53b50ea0ff3744982d01b70ffec","modified":1488181181541},{"_id":"public/mars/index.html","hash":"c059896a3394da8a4f8b0bee81b347e6f2861e8c","modified":1488181181541},{"_id":"public/2014/11/08/SVG-Android应用探究之路/index.html","hash":"2777a4557fab84e2f7549688a61c4a61adcb88e9","modified":1488181181541},{"_id":"public/alipay_architecture_thought/index.html","hash":"523f90ff9ac201e6b86a482352eb7231596caed6","modified":1488181181541},{"_id":"public/2016/11/08/ndk/index.html","hash":"b3acef4d2e1e4a49bab7d817c6c6136920a97b29","modified":1488181181541},{"_id":"public/2016/05/15/android_test/index.html","hash":"59b671ceb53f5654fb7e9f3f9d21e9aa378e146e","modified":1488181181541},{"_id":"public/2016/03/09/oo_architecture/index.html","hash":"28ee3713324a20a5c6200341c9df1cb7f4bcd940","modified":1488181181541},{"_id":"public/2016/01/09/notification_best_practise/index.html","hash":"0dff621c6c96ade1b7373714ed8061603a489b1f","modified":1488181181542},{"_id":"public/2016/08/15/android_scheduler_and_battery/index.html","hash":"b06853a80dd1e550706ed0fd7bfce0c2ecd7c76a","modified":1488181181542},{"_id":"public/2016/09/01/thread_debugger_and_thread_pool/index.html","hash":"b6b0fca0b239fda09ee8829e3a0b06ab6239b555","modified":1488181181542},{"_id":"public/2016/08/03/constraint-layout/index.html","hash":"9ef94de24820747f06e52d896fb63419b8933cb4","modified":1488181181542},{"_id":"public/2016/05/29/openwrt_xunlei_fastdick/index.html","hash":"554b7b7b858637e0518dc0046eb0b6074c299504","modified":1488181181542},{"_id":"public/2016/05/29/lls_architecture/index.html","hash":"83cf5f6c6e26bee6b1b8a454c9bf100dfe9c5542","modified":1488181181542},{"_id":"public/2016/05/19/google_io_2016/index.html","hash":"eea5605cf3be8ddf539192f7929da534eaaea51b","modified":1488181181542},{"_id":"public/2016/05/15/percent_smooth_handler/index.html","hash":"11cd14d178f706041e541f91f894d75a682767ef","modified":1488181181542},{"_id":"public/2016/04/24/newifi_openwrt/index.html","hash":"c919cdce37c30df90ce337a5fcd4707adfdfa0a7","modified":1488181181542},{"_id":"public/2016/03/11/android_handler_looper/index.html","hash":"60888f85fa756a064b225ae09fd3c77087a7df51","modified":1488181181542},{"_id":"public/2016/03/10/touch_event/index.html","hash":"6c990b66d9bb6cfb1d36d5e7080939b9ca62b96e","modified":1488181181542},{"_id":"public/2016/01/20/hybrid/index.html","hash":"2f2ef820e354dc67dc6c09d55172c6b52e296b9d","modified":1488181181542},{"_id":"public/2016/01/16/message_handler/index.html","hash":"e399bf786f03b443e0348e0959cbe0d5404b2b7c","modified":1488181181542},{"_id":"public/2016/1/3/license/index.html","hash":"d00c309ec41789a42e480722a7963c68538e0a42","modified":1488181181542},{"_id":"public/2015/12/23/file_downloader/index.html","hash":"51b6133df237398a09d047c3424309d1b34efc8c","modified":1488181181542},{"_id":"public/2015/12/16/qiniu_imageloader/index.html","hash":"61decbc4f8d7cd53210794b3d2e367446b254e05","modified":1488181181542},{"_id":"public/2015/12/13/magic_progress_widget/index.html","hash":"61461490126df27a668a12e6fe583fe58dfee841","modified":1488181181542},{"_id":"public/2015/12/07/android_dynamic_dex/index.html","hash":"badcb3c033b72f8c7d2f35870610d20d7645aac3","modified":1488181181542},{"_id":"public/2015/12/06/shadows_everywhere/index.html","hash":"64237165b784352a3758c57de66b064e4bfed333","modified":1488181181542},{"_id":"public/2015/11/30/android_storage_permission/index.html","hash":"d083fdff5262f6e391705683d50cb2434faed045","modified":1488181181543},{"_id":"public/2015/11/30/gc/index.html","hash":"1430df41b8e05969fb83cd7c52d0b6061cbd1e6b","modified":1488181181543},{"_id":"public/2015/11/26/activitymanagerservice/index.html","hash":"f30a3b45cf33614beb7bea937b62111f180af395","modified":1488181181543},{"_id":"public/2015/11/25/android_multiply_process/index.html","hash":"1c63b25798edf5e4fd1a0dba65c40a8a7259fe41","modified":1488181181543},{"_id":"public/2015/11/13/java_synchronized/index.html","hash":"b2230e641314faff1709113d506acf58afef7bd4","modified":1488181181543},{"_id":"public/2015/11/08/density_dpi/index.html","hash":"90bbe6b611a3dc5d9d7c2b02495f712c49d89476","modified":1488181181543},{"_id":"public/2015/11/04/guard_multi_dex/index.html","hash":"5a21529474a4c129aa47c95230f4daaf22d22382","modified":1488181181543},{"_id":"public/2015/11/02/android_animation/index.html","hash":"b67afb08ad837013a68ebb355945ae5158679fca","modified":1488181181543},{"_id":"public/2015/11/01/android_art_dalvik/index.html","hash":"74acc18061571403e2c48407fe060752df4fc95a","modified":1488181181543},{"_id":"public/2015/10/31/android_http/index.html","hash":"20bf541ff340411b5366896b1c5d270df7c411a7","modified":1488181181543},{"_id":"public/2015/10/26/android_optimize/index.html","hash":"1cc744f220e4c08513c5901f78e68d82642eb50d","modified":1488181181543},{"_id":"public/2015/10/23/android_record/index.html","hash":"d314440a8e885ca657411216d56768ed69ea5068","modified":1488181181543},{"_id":"public/2015/10/20/android-view/index.html","hash":"6c8ded545b2244f4003ada03a8d64883c4df89b4","modified":1488181181543},{"_id":"public/2015/09/17/span_ellipsize_end/index.html","hash":"48b5227cc61c753f416b1799b3862a739e53b9fd","modified":1488181181543},{"_id":"public/2015/09/06/wr720n-v3-openwrt-shadowsocks/index.html","hash":"2eaa3401a40c62371c84e11b1223ea8058710db8","modified":1488181181543},{"_id":"public/2015/09/05/TP-Link-WR841N-V7-OpenWrt-ShadowSocks/index.html","hash":"1c45c98ed49d8e7d88de20325ba089297cecb536","modified":1488181181543},{"_id":"public/2015/09/01/keyboard-panel-switch/index.html","hash":"aa4867937a9fbae0a74370ee242736dc1ae29d61","modified":1488181181543},{"_id":"public/2015/07/26/ruby_guide/index.html","hash":"a1e62168bea02c4aaf5b266e029f6b1d35eed2f0","modified":1488181181543},{"_id":"public/2015/07/18/wh_3g_4g_usim/index.html","hash":"bee5febbbb981f454de1a6e82d8104b320b36109","modified":1488181181543},{"_id":"public/2015/07/17/wh_emergency/index.html","hash":"ce9788e7d427a991b6aee2f253bca7f582d6fff0","modified":1488181181543},{"_id":"public/2015/07/17/wh_wangjin_ddos/index.html","hash":"07266f926ce204b0d2ba33ef686ea1cb9e6308b0","modified":1488181181543},{"_id":"public/2015/07/17/wh_android_tk/index.html","hash":"772b5c368f64d5f8d2224fb19efd90254eceba1d","modified":1488181181544},{"_id":"public/2015/07/17/wh_waf/index.html","hash":"50a6c8af36aaeaafebfe0e89f6a766c9a1162785","modified":1488181181544},{"_id":"public/2015/07/17/wh_tencent_web/index.html","hash":"2a9cdcbd434e8636450cd9113ef45ee1f9877408","modified":1488181181544},{"_id":"public/2015/07/17/wh_qunaer0_1/index.html","hash":"711c8a9c239fd5aa1d0c63cd5c4c2b2bcd18eac4","modified":1488181181544},{"_id":"public/2015/07/17/wh_invade/index.html","hash":"ab6b40c0d71122a1ac7d6157191821f9e4ef0311","modified":1488181181544},{"_id":"public/2015/06/14/Falcon-Pro-3-如何完成独立开发演讲分析/index.html","hash":"51e931501d20f39dffaa767c1359b8fe88eccff9","modified":1488181181544},{"_id":"public/2015/05/18/LeakCanary使用总结/index.html","hash":"917ecb47341bc434d7f869b107ba1561658e1277","modified":1488181181544},{"_id":"public/2015/05/12/Leakcanary-Square的一款Android:Java内存泄漏检测工具/index.html","hash":"0f900f78be733aa64ca846294b4744220aa2c82c","modified":1488181181544},{"_id":"public/2015/05/9/RxAndroid(RxJava)-与-AsyncTask/index.html","hash":"60b99b999074801a16ca4d69f113b8e82ac7b474","modified":1488181181544},{"_id":"public/2015/04/29/RxJava学习整理/index.html","hash":"8bd157df71b1f182c126aec701d12a7cab087c8d","modified":1488181181545},{"_id":"public/2015/04/28/Java-8-Lambda/index.html","hash":"7bfe5904f7b4c36436860a1e42415a781401f097","modified":1488181181545},{"_id":"public/2015/04/28/PhotoGallery、Volley、Picasso-比较/index.html","hash":"5004dc8b47cc6e4f56795eafaffc224cc5714e6b","modified":1488181181545},{"_id":"public/2015/04/21/Google-2015-Material-Design-Summit/index.html","hash":"d9f7ee64f8d93b4ade515f3beed5312fd9f715ed","modified":1488181181545},{"_id":"public/2015/04/18/Android-2d-Drawing/index.html","hash":"fadb2f6d2d19d4b53f9b8e5ae4337dcd63c250f4","modified":1488181181545},{"_id":"public/2015/04/08/android_thread_process_components/index.html","hash":"8dee2d46596e4fd2724ec7a7d6f4bccbb1f10b06","modified":1488181181545},{"_id":"public/2015/03/29/zsh[oh-my-zsh]学习整理/index.html","hash":"c942def67c025a63f1eece24a485811b93210802","modified":1488181181545},{"_id":"public/2015/03/28/Android网络学习笔记整理/index.html","hash":"9e5f3297f67c280995d92fe1c90c487a8082d8b9","modified":1488181181545},{"_id":"public/2015/03/27/cock_wire_psychology/index.html","hash":"8d071ce4f4ca254022ac609058e40686f520d1af","modified":1488181181545},{"_id":"public/2015/03/25/Java多线程抢占/index.html","hash":"a01155982a198b0ced310fdb167e7ca1faf09cc1","modified":1488181181545},{"_id":"public/2015/03/23/[笔记]谷歌是如何做代码审查的/index.html","hash":"b9ecdf1073240e59618bd501a238d9388261f0ce","modified":1488181181545},{"_id":"public/2015/03/17/360手机卫士-Android开发-InfoQ视频-总结/index.html","hash":"e9f94a4ce62860bba0000d89454a25e87595e6e9","modified":1488181181545},{"_id":"public/2015/03/16/Git学习整理/index.html","hash":"daeb1dc1fef14fc313e65665d9484fcd416b30be","modified":1488181181545},{"_id":"public/2015/02/25/intellij_readme/index.html","hash":"29e8a501eb9241e34669864336b4f70f5a4e18a9","modified":1488181181545},{"_id":"public/2015/02/07/Switching-between-the-panel-and-the-keyboard/index.html","hash":"5eda8ef77c9fd8354632742d8fc125ebd1e7dfb8","modified":1488181181545},{"_id":"public/2015/02/04/SVG矢量预研期总结/index.html","hash":"be7e3f1727fa3b4f8c7bb7b5f3d89bdc6df68506","modified":1488181181545},{"_id":"public/2015/01/22/Repair-broken-image-url-in-wordpress-posts/index.html","hash":"6a850653a9216438ef14b119a5d6016605d755b4","modified":1488181181545},{"_id":"public/2015/01/05/Flatbuffer-Use-Optimize/index.html","hash":"eac15f176284596e185b6afd63b48f22e0daa572","modified":1488181181546},{"_id":"public/2014/12/25/dalvik/index.html","hash":"88a92cda4e905d85c41a2aeb0d4276634f8951e4","modified":1488181181546},{"_id":"public/2014/12/14/Android-Touch-Gallery/index.html","hash":"d636386aefdb6cd9b3bc755d704b6c75289e5839","modified":1488181181546},{"_id":"public/2014/12/10/SVG-Android库-深入浅出-解析篇/index.html","hash":"8cb4137fb40a539c1feec2cd03de0bccce258009","modified":1488181181546},{"_id":"public/2014/12/08/Workflows-Proxy/index.html","hash":"5f9e1d5652db2c28aa48cb862a562da514a7017b","modified":1488181181546},{"_id":"public/2014/09/06/Android-数据库架构-—-JLibrary/index.html","hash":"7dd788fe294359088fac5810db16d992ba94907a","modified":1488181181546},{"_id":"public/2014/08/29/岁月/index.html","hash":"0579473b9bf3d3b8bb10df428c2b9199508a8673","modified":1488181181546},{"_id":"public/2014/06/01/整理自14年-毕业生标兵准备的演讲稿/index.html","hash":"89f2b831eabcd417bd265ad8380f62ef4d9f1da4","modified":1488181181546},{"_id":"public/2014/01/01/扯/index.html","hash":"507174598087562ea4a30cdaf41b0153e9dd2d44","modified":1488181181546},{"_id":"public/2014/01/01/2014-期待已久/index.html","hash":"6fb0f9ccff36931d51f68379d5fda6837ae63f8d","modified":1488181181546},{"_id":"public/2013/12/17/Android文件、缓存管理/index.html","hash":"cdcb03a08572a4382b065a5a9d835d315959fdf5","modified":1488181181546},{"_id":"public/2013/12/14/Android-AIDL-通信与回调/index.html","hash":"dcc80f51ec4eaa18f0fda1646220689c1a9ee85d","modified":1488181181546},{"_id":"public/2013/12/14/Android-Messenger-进程通信/index.html","hash":"e53aac8032dfead523864a0549d410cc14b9b4d1","modified":1488181181546},{"_id":"public/2013/11/08/悟空-勿懂/index.html","hash":"823d1bba2eea8f1a48b8de97d954f36d236024dd","modified":1488181181546},{"_id":"public/2013/07/12/Android推送探究/index.html","hash":"252c71ba318affbb67f76d56ea80e62e0c6e961a","modified":1488181181546},{"_id":"public/2013/06/12/互联网进化论“物联网”时代的崛起/index.html","hash":"e3023640c294d7dfa07fa92e241d3001d323aeb5","modified":1488181181546},{"_id":"public/2013/04/18/移动终端远程控制计算机/index.html","hash":"df2443247bf153fa038e2194514018005617c181","modified":1488181181546},{"_id":"public/2013/03/29/windows-csipsimple/index.html","hash":"c3fe750a24862fc0bb0cacdcea0bebfa9d1821e7","modified":1488181181546},{"_id":"public/2013/01/08/php-mysql学习之简单留言板/index.html","hash":"74846ad46b2816cf81ba6c0f4430f085646a2f61","modified":1488181181546},{"_id":"public/2012/12/31/异步加载专题-原创分析-中级篇本地缓存、ListView滑动停止加载、利用sync/index.html","hash":"cdc5a3ba1fd7f1910d106224b373ccf42ad607b4","modified":1488181181547},{"_id":"public/2012/12/31/异步加载专题-原创分析-简单篇通过xml获取地址、本地文件缓存、异步加载/index.html","hash":"0c4732771c761b7db44f01a0c327eef74292116d","modified":1488181181547},{"_id":"public/2012/12/11/原创-最新beta2/index.html","hash":"b3d87619ddb9871cd6317ecd982c50b7eb774420","modified":1488181181547},{"_id":"public/2012/11/17/大二暑期-win8体验录制/index.html","hash":"75d3f90931439955ce2b41d908e7c34629360d8e","modified":1488181181547},{"_id":"public/2012/11/17/早前笔记本加装触摸屏测试/index.html","hash":"b6b3f85ee888848bd2b219e6639122f82dfecae2","modified":1488181181547},{"_id":"public/2012/11/02/基于Cocos2d-连连看/index.html","hash":"fe86943621feb593d9c204b65042fffa86cd4eb7","modified":1488181181547},{"_id":"public/2011/10/18/走在路上/index.html","hash":"262cf5561265c24815f2a737cdd0e942676b3a5d","modified":1488181181547},{"_id":"public/2010/12/24/无比的力量/index.html","hash":"a16b34cac20456548bd792ef1cd5c69caf029ac6","modified":1488181181547},{"_id":"public/2010/12/14/黑色友谊/index.html","hash":"26b94fa486b288a066b53d9c1cbc90fc3b79d7fe","modified":1488181181547},{"_id":"public/2010/12/05/生活/index.html","hash":"975cdae2ec651c74034a566890097db4f475e50d","modified":1488181181547},{"_id":"public/2009/08/21/高三文骚无韵-我要托起明天的太阳/index.html","hash":"f19756889ab3551e6799d91d2dea4096ce99bfdf","modified":1488181181547},{"_id":"public/2009/04/27/爸爸，妈妈，老师/index.html","hash":"7d82ce66293779c9fe0033b9214db9d42d192627","modified":1488181181547},{"_id":"public/2008/11/17/翻唱《童话》/index.html","hash":"64c86bed2de692caa3aeea543dbc36c68b035860","modified":1488181181547},{"_id":"public/2008/01/04/《海上钢琴师》经典台词选集/index.html","hash":"f87e40d4ffdf6c7532adb5be720ddf2acec9a7e0","modified":1488181181547},{"_id":"public/archives/index.html","hash":"14f83c76d19d83ea7750a18d294a6830db0dca45","modified":1488181181547},{"_id":"public/archives/page/2/index.html","hash":"d8f01e133bc77277a01c59a6fdd2b1b2feab1b79","modified":1488181181547},{"_id":"public/archives/page/3/index.html","hash":"643062fca1f14bae853016a2396c9c67c1698595","modified":1488181181547},{"_id":"public/archives/page/4/index.html","hash":"4bd0214360abc854499215332aa19368b5817fd4","modified":1488181181547},{"_id":"public/archives/page/5/index.html","hash":"183e750ad63be46c5da4809c6907bc7e84a09cb3","modified":1488181181547},{"_id":"public/archives/page/6/index.html","hash":"bb16125e0ca1503e74ca03482310b0f21773562f","modified":1488181181547},{"_id":"public/archives/page/7/index.html","hash":"6086153ac613a17581d5c6d7658aa2f174809dbb","modified":1488181181547},{"_id":"public/archives/page/8/index.html","hash":"aba34844d4c3926d984e98702b7e55968b3100ba","modified":1488181181548},{"_id":"public/archives/page/9/index.html","hash":"b985b5d52c7a4ab3ca2e3fc37cf7edc31d5e9f8b","modified":1488181181548},{"_id":"public/archives/page/10/index.html","hash":"ff9f52498fa0542171cbd661f95bacde63507595","modified":1488181181548},{"_id":"public/archives/page/11/index.html","hash":"7bebf00677edfee645c9d855334fbaeabaaed87f","modified":1488181181548},{"_id":"public/archives/page/12/index.html","hash":"b5339a0de984b065e34782b3c8e529e2567efb5a","modified":1488181181548},{"_id":"public/archives/page/13/index.html","hash":"c0f64f6d43c59eed1bb1a6dcb98e934f5c34d9af","modified":1488181181548},{"_id":"public/archives/2012/index.html","hash":"71ced68ab43a57ccfc5625585f602e7013718e0c","modified":1488181181548},{"_id":"public/archives/2013/index.html","hash":"bee64858524b9652c173dff5cf6b724d25e9a802","modified":1488181181548},{"_id":"public/archives/2014/index.html","hash":"b171812bb838d722bc246424f23580ed8af30a4a","modified":1488181181548},{"_id":"public/archives/2015/index.html","hash":"e327cec6a38b7b4bc5a8ce1de9a7bd1e33d6027e","modified":1488181181548},{"_id":"public/archives/2015/page/2/index.html","hash":"5820724fc1badaf123ba2aec27eb653605ccce96","modified":1488181181548},{"_id":"public/archives/2015/page/3/index.html","hash":"9a0f91ced10009d8dcc53e430905aae7fc302632","modified":1488181181548},{"_id":"public/archives/2015/page/4/index.html","hash":"2649dc753e23dd9496ccf526e9d47e1688fe28cd","modified":1488181181548},{"_id":"public/archives/2015/page/5/index.html","hash":"735e2739be60afcc32162f41c0ce23a0a3d930e8","modified":1488181181548},{"_id":"public/archives/2015/page/6/index.html","hash":"8388769e49d74760aec08eb8f970551522974f89","modified":1488181181548},{"_id":"public/archives/2015/03/index.html","hash":"0badff820681c9239ad8e7079d894275ddc599f7","modified":1488181181548},{"_id":"public/archives/2015/07/index.html","hash":"f1b92cf334f8c8a93f93ede897267e992e1ad464","modified":1488181181548},{"_id":"public/archives/2015/11/index.html","hash":"5aeeeda19008ea5cd16bd749fabbdf1114f29580","modified":1488181181548},{"_id":"public/archives/2016/index.html","hash":"eddc38bd35bb728922d874f61dc299d4f4f0ef55","modified":1488181181548},{"_id":"public/archives/2016/page/2/index.html","hash":"1032b392ac16cca7ed645f276cfe9ff5f28674cd","modified":1488181181548},{"_id":"public/archives/2017/index.html","hash":"96ad0e1ee4f25b4ec3bb3c47873ba822a3bd2a84","modified":1488181181549},{"_id":"public/index.html","hash":"fac6ff25aa5a9a4547e4ac33ac92e0ad66edc67b","modified":1488181181549},{"_id":"public/page/2/index.html","hash":"abe07e4294de92e5ea3ffa71be50b43d3a3c211e","modified":1488181181549},{"_id":"public/page/3/index.html","hash":"ecc640c3b4da06824c0e2bf88d0894d00bad226a","modified":1488181181549},{"_id":"public/page/4/index.html","hash":"5f5e606c39911f005bafed64e4d74866cf73aee6","modified":1488181181549},{"_id":"public/page/5/index.html","hash":"689731b4dd4d4f10f3f62e4b60855947afe5955c","modified":1488181181549},{"_id":"public/page/6/index.html","hash":"c659f77e5b080fa641fc25c7e3cce3d256f37ed2","modified":1488181181549},{"_id":"public/page/7/index.html","hash":"e374693c2a3f237f0bfe2d8bd67bba33cfc0b15b","modified":1488181181549},{"_id":"public/page/8/index.html","hash":"97874068b5fa3583f8c83e6dc5860fe7549349a8","modified":1488181181549},{"_id":"public/page/9/index.html","hash":"a104e47b9c41032d1862ddd61f9b3c5cbb1b24c9","modified":1488181181549},{"_id":"public/page/10/index.html","hash":"9078b092c7a36ba33e0daf075319712381dcdd32","modified":1488181181549},{"_id":"public/page/11/index.html","hash":"5e9a4a3dacc003200f44f46abf1ad830efe05294","modified":1488181181549},{"_id":"public/page/12/index.html","hash":"c528da61f7fde715f317b3f5ec86489c9c74322a","modified":1488181181549},{"_id":"public/page/13/index.html","hash":"d64b3f13f92547ab0686938e6f0f0fdf57a4a1c6","modified":1488181181549},{"_id":"public/page/14/index.html","hash":"6eb3c52ad3ce40e60612945cd6237dc67d33a807","modified":1488181181549},{"_id":"public/tags/文笔/index.html","hash":"78c06b27ad65153f383c5406a0a2c1384c773fa1","modified":1488181181549},{"_id":"public/tags/Android/index.html","hash":"0c4d32f8160f8d522f21bc1a45100c03f0b50842","modified":1488181181549},{"_id":"public/tags/Android/page/2/index.html","hash":"ebac0365744d83969b3f45ace372679ef6500c35","modified":1488181181549},{"_id":"public/tags/Android/page/3/index.html","hash":"6117fc387c4e5b1663fd79a3065c7b29a13d2062","modified":1488181181549},{"_id":"public/tags/Android/page/4/index.html","hash":"87ded11fdbb14d79c32558ef49b0f4ad005a2c02","modified":1488181181549},{"_id":"public/tags/Android/page/5/index.html","hash":"f591cd6a4c272a6063adef39f6422ce529435292","modified":1488181181549},{"_id":"public/tags/Android/page/6/index.html","hash":"37b3acff05d40f669d8e24566d746a4d08e4b15c","modified":1488181181549},{"_id":"public/tags/优化/index.html","hash":"c8630c644a445660ee0c8c2d9260f18223b5b893","modified":1488181181549},{"_id":"public/tags/项目/index.html","hash":"fcf515f1215b9729d5fec49ea560aaecef38b12f","modified":1488181181549},{"_id":"public/tags/安全/index.html","hash":"50eeb2dc23cb9a05670ce9cbd77c0f7046f82013","modified":1488181181549},{"_id":"public/tags/2015乌云白帽大会/index.html","hash":"2c2b3f9be6d21ce9d4b87cc800ea1664f51859d3","modified":1488181181549},{"_id":"public/tags/白帽/index.html","hash":"5f2136ce7ca3aaf43ce810e311fab30ad127870d","modified":1488181181549},{"_id":"public/tags/会议笔记/index.html","hash":"bf9f6bb6a03ae3de180893580670197864700652","modified":1488181181550},{"_id":"public/favicon.ico","hash":"84b4f797680038846ed021ccc56ca02e7de94cd4","modified":1488178716972},{"_id":"public/img/360-4.png","hash":"a1106a89ca5466e9be1318b211815a1bf30a9eaa","modified":1488178716972},{"_id":"public/img/Falcon-font.png","hash":"5882ce422644df5d9ddf3fb069343c8c5aea14ca","modified":1488178716972},{"_id":"public/img/SQLite___Core_Data.png","hash":"7fedb981a985556657429a5c1a977d302ac17ebc","modified":1488178716972},{"_id":"public/img/alipay.png","hash":"a2579e423201f4799591069c0ab626642281c115","modified":1488178716972},{"_id":"public/img/android-scheduler_syncs-adapter.png","hash":"053048f2d8a9da11bb645152dd9bcafacd150032","modified":1488178716972},{"_id":"public/img/android-scheduler_deep-doze.png","hash":"7683e7b4cb994bf37b6bfbb5c1e05a92ae729187","modified":1488178716972},{"_id":"public/img/android-scheduler_light-doze.png","hash":"329a39517d1e4e3ea9fa31792c6ee39190943a98","modified":1488178716972},{"_id":"public/img/android-test_2.png","hash":"b3e97a69ba69e9705bb78b6263cd9875a9d77563","modified":1488178716972},{"_id":"public/img/android-test_5.png","hash":"e9db3fc8a3f0758011a3ea6ae11064525da169d5","modified":1488178716972},{"_id":"public/img/android-test_4.png","hash":"0f02636d88069e88881c8bc2a01b35c7e4db3ba5","modified":1488178716972},{"_id":"public/img/android-test_3.png","hash":"07b15226cc8b5e691252a2a4a98e6c346b10fafa","modified":1488178716972},{"_id":"public/img/android_dvm_art-1.png","hash":"846a2a4ab7217b7bb7890bdb8ab5e75f750187b8","modified":1488178716972},{"_id":"public/img/android_dynamic_dex.png","hash":"f80f1f504d88aef4c4e478cb6ad60f97715cd0be","modified":1488178716973},{"_id":"public/img/android_handler_looper-1.png","hash":"6acc7118b328b8dcdce8c19f88d561c8ae5a045b","modified":1488178716973},{"_id":"public/img/android_view-1.png","hash":"0e9de630e0c739503ee182d9c765407353280be8","modified":1488178716973},{"_id":"public/img/android_view-2.png","hash":"12bab7e84949a4e6926ce088d127e74a4b5947d0","modified":1488178716973},{"_id":"public/img/architecture-builder-method.png","hash":"33a7311d61ba59009e5f495321263926ba2852e9","modified":1488178716973},{"_id":"public/img/architecture-bridge-method.png","hash":"d1dfe4907dc1722a917dd3f9f80ba4c8b896d95b","modified":1488178716973},{"_id":"public/img/architecture-class-relate.png","hash":"340cd29634039ef8f394949b54465dc5cac76f0e","modified":1488178716973},{"_id":"public/img/architecture-composite-method.png","hash":"0ce3d7c17d43f05b891514c4220201dc5589839e","modified":1488178716973},{"_id":"public/img/architecture-decorator-method.png","hash":"a9cd80b56df683c3c81c22a0bf8881a475bd83b5","modified":1488178716973},{"_id":"public/img/architecture-facade-method.png","hash":"a6a6e968a3fd875c6be47d152526713f14ae4bfb","modified":1488178716973},{"_id":"public/img/architecture-mvvm-c.png","hash":"043561d5c9d0a77244c20d8586a10177a8dac463","modified":1488178716973},{"_id":"public/img/architecture-flyweight-method.png","hash":"a13b49a1b9b6883cdaa14c97226fdaa1738e7eb0","modified":1488178716973},{"_id":"public/img/architecture-mvvm.png","hash":"aac851a70bac4971b07b28f847a36cc4efff5dfe","modified":1488178716973},{"_id":"public/img/architecture-factor-method.png","hash":"0c8ad55a36df56c009e5fd7d5c75c3c1f175bbee","modified":1488178716973},{"_id":"public/img/architecture-proxy-method.png","hash":"07a091bfabfa2aca7b89bc294634bc1bdc6e61fa","modified":1488178716973},{"_id":"public/img/architecture-template-method.png","hash":"d5a09fb05256a826643444a9ced6a40781949850","modified":1488178716973},{"_id":"public/img/async-1.png","hash":"7b82c44ebe2a79463c1df4e611a603bd725fa922","modified":1488178716973},{"_id":"public/img/architecture-observer-method.png","hash":"ece3d5f77de376e904d6149f732b61bd3174e2f8","modified":1488178716973},{"_id":"public/img/architecture-strategy-method.png","hash":"55fe38f6776c4e038a9b1cbc2b9697d9b1e8d9fc","modified":1488178716973},{"_id":"public/img/constraint-layout_anchorConnection.png","hash":"d3b4396104db1a05fe04943c2507aed3099ccad2","modified":1488178716973},{"_id":"public/img/constraint-layout_classHierarchy.png","hash":"642d2d672e09567caab1d5fcaff0ac627ce51a41","modified":1488178716973},{"_id":"public/img/constraint-layout_constraintWidget.png","hash":"fa5bfde07b36b8971b67a2934d7af4d914a1e027","modified":1488178716973},{"_id":"public/img/architecutre-mvp-mvc.gif","hash":"52f84a71e010074b060ef23b7ca3f71a3b95d821","modified":1488178716974},{"_id":"public/img/cocos2d-1.png","hash":"52a90d0bcbfa420e233a668553524fcd13e05a75","modified":1488178716974},{"_id":"public/img/density_dpi-2.png","hash":"c2525ad16dd0215cc5b278e5d79aabb4ca3a96fe","modified":1488178716974},{"_id":"public/img/density_dpi-4.png","hash":"152aa6793d7807ab32f99a23debf8c39feba5d6b","modified":1488178716974},{"_id":"public/img/density_dpi-1.png","hash":"67ecae82c823f59e10aad77bd3f2f5c26ac5e6e8","modified":1488178716974},{"_id":"public/img/constraint-layout_measureFlow.png","hash":"b31c1c5a9978bcf1cdd69788f86d8f56512c2131","modified":1488178716974},{"_id":"public/img/density_dpi-3.png","hash":"0a73910f7fcb38ef9f6b65516cec18d289dad9c8","modified":1488178716974},{"_id":"public/img/hybrid-2.png","hash":"64cc02e2030dc009252b3464b1dc7e3b1de4497a","modified":1488178716974},{"_id":"public/img/javathread-1.png","hash":"37350ff1d953a9fa58cf4d7041af04be39b5c242","modified":1488178716974},{"_id":"public/img/hybrid-1.png","hash":"be3ec6c3731304280f314287a96f1d1ca0708c4a","modified":1488178716974},{"_id":"public/img/leakcanary-2.png","hash":"a49a8a8f4c95e3606d752535530de2bee831ce5d","modified":1488178716974},{"_id":"public/img/leakcanary-4.png","hash":"c2f8e64296ce8c8ef134fe806fdd09a37ffbb1ab","modified":1488178716974},{"_id":"public/img/lls_architecture_10.png","hash":"448d2b62bde612c74d085ac8b5fd2a1fca72dd42","modified":1488178716974},{"_id":"public/img/lls_architecture_1.png","hash":"8c1db1232531ae795b7f8d82c62c4efe553534e4","modified":1488178716974},{"_id":"public/img/lls_architecture_11.png","hash":"10b8c5882629f54fa0a500349218984a26353c53","modified":1488178716974},{"_id":"public/img/lls_architecture_12.png","hash":"8bfd80d872c0a3870b1b29cae623ec9615bbd92c","modified":1488178716974},{"_id":"public/img/lls_architecture_3.png","hash":"c1c74c30587bbae9f794f9fea65421351fdff7fb","modified":1488178716974},{"_id":"public/img/lls_architecture_4.png","hash":"254044dc068f7dc79fb022487a327d868ea0414c","modified":1488178716974},{"_id":"public/img/lls_architecture_5.png","hash":"011208eb4f9dce3e88f69cdbecde33ba6a274002","modified":1488178716974},{"_id":"public/img/lls_architecture_6.png","hash":"bb510771d69773124a7405c744d364c784d7ebe5","modified":1488178716974},{"_id":"public/img/lls_architecture_9.png","hash":"3de2c8798cc53a79af01a862e70ce7b93b3f63fd","modified":1488178716974},{"_id":"public/img/mars-1.png","hash":"045d4537ab70fcba10855fcc7a800c07419013bf","modified":1488178716975},{"_id":"public/img/mars-11.png","hash":"600b542530c9e06b797225ffcdb5225f907aac80","modified":1488178716975},{"_id":"public/img/mars-12.png","hash":"e2ac15107cf10331f24623f3ffa4319c65d70c2c","modified":1488178716975},{"_id":"public/img/mars-13.png","hash":"99cd15005092ce14b76fba80b8478a806060dc96","modified":1488178716975},{"_id":"public/img/mars-3.png","hash":"470974f0f296d4a1615f978de975483564215362","modified":1488178716975},{"_id":"public/img/mars-4.png","hash":"01c42930f5cab5bc66f36b1000fa8242cc097ff5","modified":1488178716975},{"_id":"public/img/mars-6.png","hash":"e9b58735ff19315ed16fa7229101c3ae77ce8bfe","modified":1488178716975},{"_id":"public/img/mars-5.png","hash":"72445dd575db118fc6b8790e42a29c100631c81a","modified":1488178716975},{"_id":"public/img/mars-7.png","hash":"0c7d245f95413c7477975e4163f9620690f4efa7","modified":1488178716975},{"_id":"public/img/mars-8.png","hash":"80f9dcc768dc397731a6d7650f10c7c52ab6b134","modified":1488178716975},{"_id":"public/img/ndk-2.png","hash":"96d1d1cd94b28ba3bb0d172488bedee4a0071103","modified":1488178716975},{"_id":"public/img/ndk-3.jpeg","hash":"56c570623d4e2624530ca54428e01c004b64a0f7","modified":1488178716975},{"_id":"public/img/ndk-1.png","hash":"4cc434c5ef65e4bed1aa2cba7781143692902899","modified":1488178716975},{"_id":"public/img/network_basic-1.png","hash":"6de69e05729918210bd45db0d8d1a94b6da9347b","modified":1488178716975},{"_id":"public/img/network_basic-3.png","hash":"6336d72972c43d43741efd56f8ce6f6e273bf1f1","modified":1488178716975},{"_id":"public/img/network_basic-2.png","hash":"02a3eef794890805365fdb025d5230e9677c2658","modified":1488178716975},{"_id":"public/img/network_basic-5.png","hash":"93d00b55b897d030f70b81e416fb01349342fdda","modified":1488178716975},{"_id":"public/img/network_basic-6.png","hash":"557790a63e77a779c8e4d60723582168160c4b82","modified":1488178716975},{"_id":"public/img/network_basic-4.png","hash":"9c03e4f6fc2e70f2545e173a2bd72e769d3b6a7e","modified":1488178716975},{"_id":"public/img/newifi-1.png","hash":"af92db6794e8a854c82af411e5bfd4844849ddaf","modified":1488178716975},{"_id":"public/img/newifi-2.png","hash":"a119441ed8f1a3954055b1671120c82056ea5e38","modified":1488178716975},{"_id":"public/img/newifi-3.png","hash":"abee73992f88e1a22b537cad1674513d27475cd7","modified":1488178716975},{"_id":"public/img/notification_best_practise-1.png","hash":"abbb1c233ce6f97f292b830883826c5436a62cb2","modified":1488178716976},{"_id":"public/img/notification_best_practise-message-style.png","hash":"ef3cd430ce1b18a3c9097355b137a3a864e99f84","modified":1488178716976},{"_id":"public/img/notification_best_practise-direct-reply.png","hash":"aeb05e43145f9ac4fce1e8fcb3f7cf346e044dff","modified":1488178716976},{"_id":"public/img/notification_best_practise-bundled.png","hash":"8586b5dd3553c15f6d2af1585b63445564b7d98a","modified":1488178716976},{"_id":"public/img/openwrt_xunlei-fastdick-3.png","hash":"7ca8e2d2a3f8f1b7bb11f521a78985930869e5cc","modified":1488178716976},{"_id":"public/img/openwrt_xunlei-fastdick-2.png","hash":"e0492516693e3177d3e5b125ae5f17d5a219a924","modified":1488178716976},{"_id":"public/img/php-mysql-2.jpg","hash":"4b9e5713f5e40dc6500ce29b35422be5785dfbe3","modified":1488178716976},{"_id":"public/img/remote-app-2.png","hash":"b7b0d64a876a2e85ebf9c8b1732eac0e741eb39b","modified":1488178716976},{"_id":"public/img/remote-app-1.png","hash":"c1673659b90cf05abfea66ccfb071c31b4d4c72c","modified":1488178716976},{"_id":"public/img/php-mysql-1.jpg","hash":"583c8dcb3a7962e1c1dab97297a674c39a84b29e","modified":1488178716976},{"_id":"public/img/remote-app-5.png","hash":"4d7d571e193f4bc1be9ccb2e336dc0fb13dac954","modified":1488178716976},{"_id":"public/img/remote-app-3.png","hash":"8d6a3f102a69760db002dc04e3b890f9629bcc4a","modified":1488178716976},{"_id":"public/img/remote-app-6.png","hash":"4fe929505bf6b60c31ef76197d4d8f6561720ead","modified":1488178716976},{"_id":"public/img/remote-app-7.png","hash":"b1e5f617cd84a7384322d85e55daf0c24c27f0ee","modified":1488178716976},{"_id":"public/img/remote-app-4.png","hash":"0ab860820ffdd1c734a4feda3ba3b0aef439c13a","modified":1488178716976},{"_id":"public/img/remote-app-8.jpg","hash":"1e1ed611298971015b11b6957b2a8490af08fc66","modified":1488178716976},{"_id":"public/img/ruby_guide_2.png","hash":"69ac455780d9a88cabcea1d255292df5afe05b52","modified":1488178716976},{"_id":"public/img/rxjava-filter.png","hash":"ecb6f7bc4b2e06bb92b954849e42c4ec1fb993d2","modified":1488178716976},{"_id":"public/img/rxjava-flatmap.png","hash":"a0f6af9611ee557fa4db33dde23664fa2d4baed2","modified":1488178716976},{"_id":"public/img/rxjava-from.png","hash":"68c0e465d8e35b9cea2c76fed29c156b7511d4ef","modified":1488178716976},{"_id":"public/img/shanxi-1.png","hash":"0658ec8eef0dd53ed7a6b2712a9614e158ae193a","modified":1488178716976},{"_id":"public/img/rxjava-take.png","hash":"217176a56e23dea83c6aa59f5b7e393b28db7838","modified":1488178716976},{"_id":"public/img/rxjava-map.png","hash":"7db4e5a9346c9ac8ef1c69e5e3f1b8c851c530c0","modified":1488178716976},{"_id":"public/img/shadows_everywhere-1.png","hash":"6d8dee38967e94be8ab99176811fa83f916b4330","modified":1488178716976},{"_id":"public/img/svg-k-1.png","hash":"3fb1fc5d342138bf30528b6834a45bffef2dd05b","modified":1488178716977},{"_id":"public/img/svg-parse-1.jpg","hash":"0dd1abe99f60f03d6a4e2a9d89cb751ad457c4e3","modified":1488178716977},{"_id":"public/img/svg-parse-3.jpg","hash":"eb854801abef3da392106a4cb403a938c1a70680","modified":1488178716977},{"_id":"public/img/svg-k-2.png","hash":"34c8ef7712b5aea31a7dbbf5e3331a100332dd43","modified":1488178716977},{"_id":"public/img/svg-parse-4.jpg","hash":"50b8e46d612b467f9423d7f18d0b0d79fefed003","modified":1488178716977},{"_id":"public/img/svg-parse-5.jpg","hash":"89eb0aec225565558502409b7e435119b829b458","modified":1488178716977},{"_id":"public/img/svg-s-call.png","hash":"80a278725fb84ca71d444a45fa40beb127a9da6b","modified":1488178716977},{"_id":"public/img/svg-s-2.png","hash":"a10b6cc474ae57e434c45473cd85aa3c40467967","modified":1488178716977},{"_id":"public/img/svg-s-1.png","hash":"822ff00f107d3c67608e187ef6398a313b29fb6e","modified":1488178716977},{"_id":"public/img/svg-s-line-2.png","hash":"58ea25914292ddd8dea831ae2fa2f7bea9723fe4","modified":1488178716977},{"_id":"public/img/svg-s-line-1.png","hash":"181069e696a0bd0c7de4fbb5aea24d682ba5ab6e","modified":1488178716977},{"_id":"public/img/svg-s-phone.png","hash":"9eae6c2451b04b32544e500e95868572cd4504cf","modified":1488178716977},{"_id":"public/img/svg-s-qq.png","hash":"ef979ec5597a08b18a251ce5e3b9c47ea2cc7562","modified":1488178716977},{"_id":"public/img/svg-s-nearby.png","hash":"fa14aa2d5bf03dfa4eda798ea94d4e5c22a85c16","modified":1488178716977},{"_id":"public/img/svg-s-line-3.png","hash":"02afee77ea19d2c64687f247ea9a4e004d43960c","modified":1488178716977},{"_id":"public/img/svg-s-scan.png","hash":"8891f00a9785d6a19379ee6cd2ec3a3c81ce504f","modified":1488178716977},{"_id":"public/img/svg-s-sns.png","hash":"8a7f0772ca6e98479a8ff58525175461690d386d","modified":1488178716978},{"_id":"public/img/svg-s-shake.png","hash":"6ded79ebf170dbfb5641b851ab03617a6634a89f","modified":1488178716978},{"_id":"public/img/touch_event-down-not-cliable.png","hash":"19df7ace3fc78e525fcc40a1104c85f15b88ae51","modified":1488178716978},{"_id":"public/img/touch_event-move-not-cliable.png","hash":"950f4bc162f9fa327d8bc443b7334b704634db11","modified":1488178716978},{"_id":"public/img/touch_event-move-cliable.png","hash":"43a172c59839d552305e3f5f337bf544fc570f73","modified":1488178716978},{"_id":"public/img/touch_event-move-child-cliable.png","hash":"b26ba51a684e97ba773ce858e967872ae4acd3d8","modified":1488178716978},{"_id":"public/img/touch_event-up-cliable.png","hash":"4be18f25f43203181418d7e9761e2c053f389419","modified":1488178716978},{"_id":"public/img/touch_event-up-child-cliable.png","hash":"c4f59efbe8593a88b80c933b053f50fc460d322f","modified":1488178716979},{"_id":"public/img/touch_event-up-not-cliable.png","hash":"1b588b6785cf2fd0b24ba3846c8b641366fa011b","modified":1488178716979},{"_id":"public/img/w-csip-1.png","hash":"4a50f14e6f550d23db4baf9137a56d17b8884ea8","modified":1488178716979},{"_id":"public/img/w-csip-2.png","hash":"ccdcd2e7a6633ac1d6c46bde9df46887dcf9e819","modified":1488178716979},{"_id":"public/img/w-csip-3.png","hash":"101ab44aa34ba7ba899d13259afa46b98beb7dc2","modified":1488178716979},{"_id":"public/img/w-csip-4.png","hash":"6028a1849889ee20e4f55c36b2f86ea965599fed","modified":1488178716979},{"_id":"public/img/wechat-qrcode.jpg","hash":"12ba05e43e7d9c2e5b27b3bffe1634e0aff03974","modified":1488178716979},{"_id":"public/img/wechatpay-backup.png","hash":"3145ae5d2411ab2510d450b70921aaf77c00bef4","modified":1488178716979},{"_id":"public/img/wechatpay.png","hash":"31134e6e939e6cf2bf818b553ced6290839fb7d6","modified":1488178716979},{"_id":"public/img/wr720n-2.png","hash":"ac6e2a21cd4737c63bba8ed1377168eb1a951421","modified":1488178716979},{"_id":"public/img/wr720n-1.png","hash":"dbd99b0b9c76acfccd1d3c29d9f6aa916e59f890","modified":1488178716979},{"_id":"public/img/wr720n-5.png","hash":"9a526ac0edcbde905713e86855f9f088c65170e7","modified":1488178716979},{"_id":"public/img/wr720n-6.png","hash":"5f361219fcfa6b4766e55c213575c05119d3d5cd","modified":1488178716979},{"_id":"public/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1488178716979},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1488178716979},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1488178716979},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1488178716979},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1488178716979},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1488178716979},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1488178716979},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1488178716979},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1488178716979},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1488178716979},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1488178716979},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1488178716979},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1488178716979},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1488178716979},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1488178716980},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1488178716980},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1488178716980},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1488178716980},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1488178716980},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1488178716980},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1488178716980},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1488178716980},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1488178716980},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1488178716980},{"_id":"public/img/WeChat_1435588322.png","hash":"70675b3c3ba7d1d150d79fe34da8e43fb31fb851","modified":1488178717644},{"_id":"public/img/360-1.png","hash":"b4f99ea1997e45e63f80c5dae62202d2fcadaf77","modified":1488178717645},{"_id":"public/img/360-2.png","hash":"04474d8e782650de04fe380eb5e27bb892a418cb","modified":1488178717651},{"_id":"public/img/Screenshot_6_2_15__3_18_PM.png","hash":"43cb7a83b7fbc17de511f36fff1bd6062f3448e2","modified":1488178717651},{"_id":"public/img/android_dvm_art-2.png","hash":"d52aa6cc687c584bf0d04ca4f9e1887c301d85a9","modified":1488178717651},{"_id":"public/img/android_handler_looper-2.png","hash":"c090353b41c81d02f97ede5a4e580cc5ef678fc4","modified":1488178717651},{"_id":"public/img/android_handler_looper-3.png","hash":"49676c0b7a85d0d03101bd591d364f09f8d30404","modified":1488178717652},{"_id":"public/img/android_handler_looper-4.png","hash":"94902e29a2937069fb3e78b870895e080dfd086b","modified":1488178717652},{"_id":"public/img/architecture-adapter-method.png","hash":"8e27c70b072e52d6250649cd79846b2e9c2e58dd","modified":1488178717652},{"_id":"public/img/kotlin-1.png","hash":"cf15fdc4d503a60a3be71ba5e4442f017cfb13c0","modified":1488178717652},{"_id":"public/img/keyboard_pannel_switch-demo_snapshot.jpg","hash":"3b45dbdb2d9640d5f2d8090cf242f37ef3d60822","modified":1488178717652},{"_id":"public/img/leakcanary-1.png","hash":"2176953f71a17b89ee9c6ed0fe999623a356d596","modified":1488178717652},{"_id":"public/img/leakcanary-3.png","hash":"b6d3916f70fd8410a38feb8347dc1c59a8e3d7e3","modified":1488178717652},{"_id":"public/img/lls_architecture_8.png","hash":"533958c7d84cc8ee56542e679376735187110f6a","modified":1488178717652},{"_id":"public/img/mars-10.png","hash":"3714ed4a49cea371c13b94858070bffa958f22cf","modified":1488178717652},{"_id":"public/img/lls_architecture_7.png","hash":"36d909c3b587dbc50d3ce60a096db0255c3a7333","modified":1488178717652},{"_id":"public/img/mars-9.png","hash":"9579e1066790730200f5a8fcce8f5d2f42eb44e1","modified":1488178717652},{"_id":"public/img/network_basic-7.png","hash":"3e8229662b72fe3876d111c8d0f8ba0cf7bc9eea","modified":1488178717652},{"_id":"public/img/remote-app-8.jpeg","hash":"b5ebec5a40138b9207c54c092a8c626b3bc30e74","modified":1488178717652},{"_id":"public/img/remote-app-9.jpeg","hash":"d0804599c4e9b0969b644b194c336f45125cba53","modified":1488178717653},{"_id":"public/img/ruby_guide_1.png","hash":"e1719f610a47ff6f5f38f75ad59d7d3908d1a4b3","modified":1488178717653},{"_id":"public/img/svg-parse-2.jpg","hash":"f41ab45f0a08c4bb852874c977951fccc3a6eed8","modified":1488178717653},{"_id":"public/img/svg-s-file-3.png","hash":"c4564a12e5f3613f06c8aeb537f3aab2e032f95f","modified":1488178717653},{"_id":"public/img/wechat-keybord-panel.jpg","hash":"149a100decf26b166fc123d480182d7f75a7afb8","modified":1488178717653},{"_id":"public/img/wr720n-3.png","hash":"c0b0678d6544c4647d515b9035e9ce350c90b842","modified":1488178717653},{"_id":"public/img/wr720n-4.png","hash":"8895a27192a84410ea95852556739fa207056756","modified":1488178717653},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1488178717653},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1488178717653},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1488178717653},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1488178717653},{"_id":"public/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1488178717667},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1488178717667},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1488178717667},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1488178717667},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1488178717667},{"_id":"public/js/src/utils.js","hash":"384e17ff857f073060f5bf8c6e4f4b7353236331","modified":1488178717667},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1488178717667},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1488178717667},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1488178717667},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1488178717667},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1488178717667},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1488178717667},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1488178717667},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1488178717667},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1488178717667},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1488178717667},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1488178717668},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1488178717668},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1488178717668},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1488178717668},{"_id":"public/js/src/schemes/pisces.js","hash":"9ccee9189c910b8a264802d7b2ec305d12dedcd0","modified":1488178717668},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1488178717668},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1488178717668},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1488178717668},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1488178717668},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1488178717668},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1488178717668},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1488178717668},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1488178717668},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1488178717668},{"_id":"public/css/main.css","hash":"bf2bd897b030189056ae2747acf2a243b50e7029","modified":1488178717668},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1488178717668},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1488178717668},{"_id":"public/js/src/https-duoshuo.js","hash":"635aac10cea02c8d89c6248366603094964d6f08","modified":1488178717668},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1488178717668},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1488178717668},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1488178717668},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1488178717668},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1488178717668},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1488178717668},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1488178717668},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1488178717668},{"_id":"public/img/360-3.png","hash":"efa4cba3f1c4eb7e86cadcc3559d2d9b07a61679","modified":1488178717668},{"_id":"public/img/alipay-architecture-thought.png","hash":"6f00251283aad49af372e75e4d7b21ebf1114055","modified":1488178717668},{"_id":"public/img/ActivityManagerService.png","hash":"7e25985d7d530ade94dfbeeb96bb1fedf52c99a0","modified":1488178717668},{"_id":"public/img/android-weak-network-1.png","hash":"afbe5dee1b039819212d49de33b4a2ffa2c53ef3","modified":1488178717668},{"_id":"public/img/avatar.jpg","hash":"08b52147f7ada1f9ae8df7841cd1b8412d6d2984","modified":1488178717668},{"_id":"public/img/notification_best_practise-2.png","hash":"cea54ebcb2db7f8d5b003aef4e4699bf8435303b","modified":1488178717669},{"_id":"public/img/openwrt_xunlei-fastdick-1.png","hash":"1804de7b9a5ec616dc759a4feafe82e30f08fb4e","modified":1488178717669},{"_id":"public/img/thread_debugger_and_thread_pool.png","hash":"86c9cfc5c286f5f7bdebcec0f8cd5b3fc835e703","modified":1488178717669},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1488178717669},{"_id":"public/img/android-test_1.png","hash":"f10ba269374f06b31a9196a1d4fe588fe3b552e4","modified":1488178717688},{"_id":"public/img/java_synchronized.png","hash":"3cf9731cc03b6798c27614168942d633cdbb0496","modified":1488178717688},{"_id":"public/img/lls_architecture_2.png","hash":"cf8c66df3bbd90fbe7011877bf1055dae5b7227b","modified":1488178717688},{"_id":"public/img/mars-2.png","hash":"6d238d9c1e49dcde0a681ef41f4bcf1968014097","modified":1488178717688},{"_id":"public/img/svg-s-file-1.png","hash":"5c22e2b97497f30e919bcde15238cdf0ff4ddaef","modified":1488178717688},{"_id":"public/img/svg-s-file-2.png","hash":"61cdcfd734233d9f932b3b42a3505c10c4cf8f86","modified":1488178717689},{"_id":"public/img/resolve_mv.gif","hash":"a99aa35f4200cf972ee13d561e6805af6c48e88b","modified":1488178717696},{"_id":"public/img/magic_progress.gif","hash":"2fc88e6f772876c387296d5839060d50c4b2aa27","modified":1488178717705},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1488178717705},{"_id":"public/img/filedownloader-avoid_drop_frames2.gif","hash":"ad0143f58c12d2f4b4b630f7463558d79558ce2b","modified":1488178717726},{"_id":"public/img/keyboard_pannel_switch-fullscreen_resolved.gif","hash":"a168dd61b0cfed5d367653a500ef62ef3952d544","modified":1488178717726},{"_id":"public/img/keyboard_pannel_switch-non-fullscreen_resolved.gif","hash":"3b98cdb85cad81e00610dd300a745a290e681522","modified":1488178717726},{"_id":"public/img/filedownloader-avoid_drop_frames1.gif","hash":"f234db45bddcef4675532de309c4b82802f82954","modified":1488178717727},{"_id":"public/img/percent_smooth.gif","hash":"27f74897d07ac2bd774d26e9b3a45a7ee8a70377","modified":1488178717727},{"_id":"public/img/keyboard_pannel_switch-adjust_unresolved.gif","hash":"32231128bcacd028567cc3cd92b4f327b33a9245","modified":1488178717799},{"_id":"public/img/keyboard_pannel_switch-adjust_resolved.gif","hash":"b1dba9160bc8aec42ea0942d8e15cc40a3e64c3a","modified":1488178717804},{"_id":"public/img/unresolve_mv.gif","hash":"c1189f6dc2915b3a3696e8d7427a49eabfcd289c","modified":1488178717806},{"_id":"public/img/filedownloader-serial_tasks_demo.gif","hash":"c9af73e8f424190b78bdd8178ca1c057f3cfa62f","modified":1488178717814},{"_id":"public/img/filedownloader-parallel_tasks_demo.gif","hash":"2a81dd2c025bd825095a337be6d9af212b6925ba","modified":1488178717826},{"_id":"public/img/filedownloader-tasks_manager_demo.gif","hash":"8b03d7480bd36d7475025ee72390363fd1c6f25b","modified":1488178717831},{"_id":"public/img/filedownloader-mix_tasks_demo.gif","hash":"901327e8518c92119b9158f64072ca50cf89336b","modified":1488178717836}],"Category":[],"Data":[],"Page":[{"title":"Tagclound","date":"2015-08-30T02:40:41.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"title: Tagclound\ndate: 2015-08-30 10:40:41\ntype: \"tags\"\ncomments: false\n---\n","updated":"2016-01-09T11:45:52.000Z","path":"tags/index.html","layout":"page","_id":"ciznr66sg00pi95buqez4rrxg","content":"","excerpt":"","more":""}],"Post":[{"title":"2014 期待已久.","date":"2014-01-01T00:35:03.000Z","_content":"\n呵，又是一年。\n\n<!--more-->\n\n2014年是幸运年，开年就是高强度锻炼，完成两个项目以后，基本到2月初，紧接着4月初前需要完成毕业设计。这还是比较适合我的。不知什么时候开始。我渐渐爱上了高强度的生活中的略微的空闲，这时候哪怕是眺望雾霾缭绕的天空，也会令人感觉心情舒畅，哪怕是听着听了千遍，已熟透，烂透不知其味的音乐，也可以起身跳出自己的style。\n\n来广州这段时间，需要感谢陈导与黄院长的信任，虽然我知道我以前在校，并没有认真的听过几堂课，但是我确实经常连睡觉都是在想着软件开发的事情，我希望自己能够走的更快点。无论是通过学习，还是通过模仿。还是不断的实践。\n\n能够来广州也要感谢酷狗音乐的谢总。是您给我这个机会，您是我目前为止，最为敬佩的人，虽然酷狗音乐现在还没有上市，但是我看到了光明的未来。无论如何，您对待您眼中的人才的态度，令人肃然起敬。虽然我有我的人生的规划，我需要一块更大的版图。但是未来还能有用武之地，定当全力以赴！\n\n能够进入微信，多谢顶峰兄一直以来的鼓励。你是个好强的人。我知道你也一直有需要我们一起完成的东西。但是，我现在还有很多事情没有处理，未来还很远，前面还有很长的路等着我们，空闲下来以后，我会迫不及待的加入进来，不用担心。\n\n目前，我很满意我现在的生活力度。我没有先天优势，后天我必然会用尽全力，认真面对每一件事情，我还有我阶段性的目标要完成，人生在世，旅途中，也许需要跋山涉水，也许山路崎岖，但是山下的城市，本来就灯红酒绿，哪个美景不是充斥喧嚣、浮躁，如果你真心想要得到你想要的，你需要付出的又何止是成吨汗水。哪个人心中没有一两个宏伟的目标，但是，走的太快容易扯着蛋，至少还需要经历几年，目前距离转折点近了，不过还有一段路程。\n\n其实我也学习过木桶原理，我并不是不清楚，我目前距离下一段路程最大的短板，因此在新的一年将此作为主要着力点，计划性的实施，每天不需要太多时间，重在坚持。\n\n其实有一件事，当下我觉得比较烦恼，不过也却是个不争的事实，在一些大公司里，实习生没有任何实质的名分，各方面都会比临时工略低一等。不过多亏过几个月就不再是实习生了。虽然大一暑假起我就几乎游荡在各个公司做开发，虽然以前也做过研究生的毕业设计的外包，虽然相比没来实习的，过几个月应该和正式员工没有什么差别。但这就是制度吧。虽然我也经常思考是否和大伙一样在年后回学校，毕业以后再过来。但是万事有得有失，我觉得，目前多历练，并不是什么坏事，如果现在问我，就现状，有什么能够加快我下个阶段的步伐，那就是留在这里，更加努力。\n\n新的一年，虽然我从来不信什么分界线，但是我希望自己能够多做一些总结，多做一点思考，多一点努力，道路漫长，与其与自己述说，不如录入成文。\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/2014-期待已久.md","raw":"title: 2014 期待已久.\ndate: 2014-01-01 08:35:03\npermalink: 2014/01/01/2014-期待已久\ntags:\n- 文笔\n- 生活感悟\n\n---\n\n呵，又是一年。\n\n<!--more-->\n\n2014年是幸运年，开年就是高强度锻炼，完成两个项目以后，基本到2月初，紧接着4月初前需要完成毕业设计。这还是比较适合我的。不知什么时候开始。我渐渐爱上了高强度的生活中的略微的空闲，这时候哪怕是眺望雾霾缭绕的天空，也会令人感觉心情舒畅，哪怕是听着听了千遍，已熟透，烂透不知其味的音乐，也可以起身跳出自己的style。\n\n来广州这段时间，需要感谢陈导与黄院长的信任，虽然我知道我以前在校，并没有认真的听过几堂课，但是我确实经常连睡觉都是在想着软件开发的事情，我希望自己能够走的更快点。无论是通过学习，还是通过模仿。还是不断的实践。\n\n能够来广州也要感谢酷狗音乐的谢总。是您给我这个机会，您是我目前为止，最为敬佩的人，虽然酷狗音乐现在还没有上市，但是我看到了光明的未来。无论如何，您对待您眼中的人才的态度，令人肃然起敬。虽然我有我的人生的规划，我需要一块更大的版图。但是未来还能有用武之地，定当全力以赴！\n\n能够进入微信，多谢顶峰兄一直以来的鼓励。你是个好强的人。我知道你也一直有需要我们一起完成的东西。但是，我现在还有很多事情没有处理，未来还很远，前面还有很长的路等着我们，空闲下来以后，我会迫不及待的加入进来，不用担心。\n\n目前，我很满意我现在的生活力度。我没有先天优势，后天我必然会用尽全力，认真面对每一件事情，我还有我阶段性的目标要完成，人生在世，旅途中，也许需要跋山涉水，也许山路崎岖，但是山下的城市，本来就灯红酒绿，哪个美景不是充斥喧嚣、浮躁，如果你真心想要得到你想要的，你需要付出的又何止是成吨汗水。哪个人心中没有一两个宏伟的目标，但是，走的太快容易扯着蛋，至少还需要经历几年，目前距离转折点近了，不过还有一段路程。\n\n其实我也学习过木桶原理，我并不是不清楚，我目前距离下一段路程最大的短板，因此在新的一年将此作为主要着力点，计划性的实施，每天不需要太多时间，重在坚持。\n\n其实有一件事，当下我觉得比较烦恼，不过也却是个不争的事实，在一些大公司里，实习生没有任何实质的名分，各方面都会比临时工略低一等。不过多亏过几个月就不再是实习生了。虽然大一暑假起我就几乎游荡在各个公司做开发，虽然以前也做过研究生的毕业设计的外包，虽然相比没来实习的，过几个月应该和正式员工没有什么差别。但这就是制度吧。虽然我也经常思考是否和大伙一样在年后回学校，毕业以后再过来。但是万事有得有失，我觉得，目前多历练，并不是什么坏事，如果现在问我，就现状，有什么能够加快我下个阶段的步伐，那就是留在这里，更加努力。\n\n新的一年，虽然我从来不信什么分界线，但是我希望自己能够多做一些总结，多做一点思考，多一点努力，道路漫长，与其与自己述说，不如录入成文。\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2014/01/01/2014-期待已久","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66h4000095buzmo2kda6","content":"<p>呵，又是一年。</p>\n<a id=\"more\"></a>\n<p>2014年是幸运年，开年就是高强度锻炼，完成两个项目以后，基本到2月初，紧接着4月初前需要完成毕业设计。这还是比较适合我的。不知什么时候开始。我渐渐爱上了高强度的生活中的略微的空闲，这时候哪怕是眺望雾霾缭绕的天空，也会令人感觉心情舒畅，哪怕是听着听了千遍，已熟透，烂透不知其味的音乐，也可以起身跳出自己的style。</p>\n<p>来广州这段时间，需要感谢陈导与黄院长的信任，虽然我知道我以前在校，并没有认真的听过几堂课，但是我确实经常连睡觉都是在想着软件开发的事情，我希望自己能够走的更快点。无论是通过学习，还是通过模仿。还是不断的实践。</p>\n<p>能够来广州也要感谢酷狗音乐的谢总。是您给我这个机会，您是我目前为止，最为敬佩的人，虽然酷狗音乐现在还没有上市，但是我看到了光明的未来。无论如何，您对待您眼中的人才的态度，令人肃然起敬。虽然我有我的人生的规划，我需要一块更大的版图。但是未来还能有用武之地，定当全力以赴！</p>\n<p>能够进入微信，多谢顶峰兄一直以来的鼓励。你是个好强的人。我知道你也一直有需要我们一起完成的东西。但是，我现在还有很多事情没有处理，未来还很远，前面还有很长的路等着我们，空闲下来以后，我会迫不及待的加入进来，不用担心。</p>\n<p>目前，我很满意我现在的生活力度。我没有先天优势，后天我必然会用尽全力，认真面对每一件事情，我还有我阶段性的目标要完成，人生在世，旅途中，也许需要跋山涉水，也许山路崎岖，但是山下的城市，本来就灯红酒绿，哪个美景不是充斥喧嚣、浮躁，如果你真心想要得到你想要的，你需要付出的又何止是成吨汗水。哪个人心中没有一两个宏伟的目标，但是，走的太快容易扯着蛋，至少还需要经历几年，目前距离转折点近了，不过还有一段路程。</p>\n<p>其实我也学习过木桶原理，我并不是不清楚，我目前距离下一段路程最大的短板，因此在新的一年将此作为主要着力点，计划性的实施，每天不需要太多时间，重在坚持。</p>\n<p>其实有一件事，当下我觉得比较烦恼，不过也却是个不争的事实，在一些大公司里，实习生没有任何实质的名分，各方面都会比临时工略低一等。不过多亏过几个月就不再是实习生了。虽然大一暑假起我就几乎游荡在各个公司做开发，虽然以前也做过研究生的毕业设计的外包，虽然相比没来实习的，过几个月应该和正式员工没有什么差别。但这就是制度吧。虽然我也经常思考是否和大伙一样在年后回学校，毕业以后再过来。但是万事有得有失，我觉得，目前多历练，并不是什么坏事，如果现在问我，就现状，有什么能够加快我下个阶段的步伐，那就是留在这里，更加努力。</p>\n<p>新的一年，虽然我从来不信什么分界线，但是我希望自己能够多做一些总结，多做一点思考，多一点努力，道路漫长，与其与自己述说，不如录入成文。</p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<p>呵，又是一年。</p>","more":"<p>2014年是幸运年，开年就是高强度锻炼，完成两个项目以后，基本到2月初，紧接着4月初前需要完成毕业设计。这还是比较适合我的。不知什么时候开始。我渐渐爱上了高强度的生活中的略微的空闲，这时候哪怕是眺望雾霾缭绕的天空，也会令人感觉心情舒畅，哪怕是听着听了千遍，已熟透，烂透不知其味的音乐，也可以起身跳出自己的style。</p>\n<p>来广州这段时间，需要感谢陈导与黄院长的信任，虽然我知道我以前在校，并没有认真的听过几堂课，但是我确实经常连睡觉都是在想着软件开发的事情，我希望自己能够走的更快点。无论是通过学习，还是通过模仿。还是不断的实践。</p>\n<p>能够来广州也要感谢酷狗音乐的谢总。是您给我这个机会，您是我目前为止，最为敬佩的人，虽然酷狗音乐现在还没有上市，但是我看到了光明的未来。无论如何，您对待您眼中的人才的态度，令人肃然起敬。虽然我有我的人生的规划，我需要一块更大的版图。但是未来还能有用武之地，定当全力以赴！</p>\n<p>能够进入微信，多谢顶峰兄一直以来的鼓励。你是个好强的人。我知道你也一直有需要我们一起完成的东西。但是，我现在还有很多事情没有处理，未来还很远，前面还有很长的路等着我们，空闲下来以后，我会迫不及待的加入进来，不用担心。</p>\n<p>目前，我很满意我现在的生活力度。我没有先天优势，后天我必然会用尽全力，认真面对每一件事情，我还有我阶段性的目标要完成，人生在世，旅途中，也许需要跋山涉水，也许山路崎岖，但是山下的城市，本来就灯红酒绿，哪个美景不是充斥喧嚣、浮躁，如果你真心想要得到你想要的，你需要付出的又何止是成吨汗水。哪个人心中没有一两个宏伟的目标，但是，走的太快容易扯着蛋，至少还需要经历几年，目前距离转折点近了，不过还有一段路程。</p>\n<p>其实我也学习过木桶原理，我并不是不清楚，我目前距离下一段路程最大的短板，因此在新的一年将此作为主要着力点，计划性的实施，每天不需要太多时间，重在坚持。</p>\n<p>其实有一件事，当下我觉得比较烦恼，不过也却是个不争的事实，在一些大公司里，实习生没有任何实质的名分，各方面都会比临时工略低一等。不过多亏过几个月就不再是实习生了。虽然大一暑假起我就几乎游荡在各个公司做开发，虽然以前也做过研究生的毕业设计的外包，虽然相比没来实习的，过几个月应该和正式员工没有什么差别。但这就是制度吧。虽然我也经常思考是否和大伙一样在年后回学校，毕业以后再过来。但是万事有得有失，我觉得，目前多历练，并不是什么坏事，如果现在问我，就现状，有什么能够加快我下个阶段的步伐，那就是留在这里，更加努力。</p>\n<p>新的一年，虽然我从来不信什么分界线，但是我希望自己能够多做一些总结，多做一点思考，多一点努力，道路漫长，与其与自己述说，不如录入成文。</p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"Android 2d-Drawing","date":"2015-04-18T00:35:03.000Z","_content":"\n## Android触发2d绘制的一般方式\n\n### I. 由系统触发的一般View层级绘制\n\n#### 哪些场景?\n\n1. 静态的图形\n2. 预定义的动画\n\n### II. 由Canvas的调用触发\n\n#### 哪些场景?\n\n1. 一般的重绘或者一般的动态动画(如:视频、游戏)\n\n<!--more-->\n\n#### 哪些方式?\n\n1. 一般UI线程中调用( `View.onDraw()` )\n2. 非UI线程中调用( SurfaceView suport )\n\n## Canvs\n\n> 可控制的画布，所有的Canvas绘制调用会保存在画布上\n\n### 需要注意的\n\n- Android 中所有的View视图，其实最终都是在Canvas这个画板上画出来的\n- View在绘制时，父组件调用dispatchDraw(Canvas)分发给各个子组件\n- `canvas.translate(int, int)` 当前原点位置\n- `canvas.clipRect(int, int, int, int)` 可见范围\n- Android.animation 实际上 改变canvas的matrix以及通过clipRect改变可见范围，大小与布局并没有实质改变\n- matrix矩阵的作用：对每个坐标点(x, y)转换为另外(x', y')\n- Canvas.translate(int, int) 效果相同 matrix.postTranslate(int, int)\n\n## 硬件加速原则\n\n> 能使用GPU来加速2D图像的渲染速度\n\n### 需要注意\n\n> 针对自定义的View，硬件加速可能导致渲染错误，所以自定义View测试后不支持就需要在自定义View上关闭硬件加速\n\n#### 会导致以下已知问题:\n\n1. MenuDrawer和WebView结合使用时，发现当关闭MenuDrawer菜单没有选择任何项时，在webview中显示的内容会出现View错位(打开菜单时没有显示的区域还是没有显示)。\n2. 在某些Andorid 4.0上，在View刷新时会出现花屏或者部分View错位，错误日志: `OpenGLRenderer: 0x501`\n\n### 关闭硬件加速:\n\n#### 1. 在Application中控制全局\n\n```\n<application android:hardwareAccelerated=\"false\" ...>\n```\n\n#### 2. 在Activity中控制\n\n```\n<activity android:hardwareAccelerated=\"false\" />\n```\n\n#### 3. Window级别控制\n\n```\ngetWindow().setFlags(\n    WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED,\n    WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);\n```\n\n#### 4. View级别控制\n\n```\nmyView.setLayerType(View.LAYER_TYPE_SOFTWARE, null);\n```\n或\n```\n<View xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"fill_parent\"\n    android:layout_height=\"fill_parent\"\n    android:orientation=\"vertical\"\n    android:paddingLeft=\"2dp\"\n    android:layerType=\"software\"\n    android:paddingRight=\"2dp\" >\n```\n\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/Android-2d-Drawing.md","raw":"title: Android 2d-Drawing\ndate: 2015-04-18 08:35:03\npermalink: 2015/04/18/Android-2d-Drawing\ntags:\n- Android\n- 2d\n- drawing\n- canvas\n\n---\n\n## Android触发2d绘制的一般方式\n\n### I. 由系统触发的一般View层级绘制\n\n#### 哪些场景?\n\n1. 静态的图形\n2. 预定义的动画\n\n### II. 由Canvas的调用触发\n\n#### 哪些场景?\n\n1. 一般的重绘或者一般的动态动画(如:视频、游戏)\n\n<!--more-->\n\n#### 哪些方式?\n\n1. 一般UI线程中调用( `View.onDraw()` )\n2. 非UI线程中调用( SurfaceView suport )\n\n## Canvs\n\n> 可控制的画布，所有的Canvas绘制调用会保存在画布上\n\n### 需要注意的\n\n- Android 中所有的View视图，其实最终都是在Canvas这个画板上画出来的\n- View在绘制时，父组件调用dispatchDraw(Canvas)分发给各个子组件\n- `canvas.translate(int, int)` 当前原点位置\n- `canvas.clipRect(int, int, int, int)` 可见范围\n- Android.animation 实际上 改变canvas的matrix以及通过clipRect改变可见范围，大小与布局并没有实质改变\n- matrix矩阵的作用：对每个坐标点(x, y)转换为另外(x', y')\n- Canvas.translate(int, int) 效果相同 matrix.postTranslate(int, int)\n\n## 硬件加速原则\n\n> 能使用GPU来加速2D图像的渲染速度\n\n### 需要注意\n\n> 针对自定义的View，硬件加速可能导致渲染错误，所以自定义View测试后不支持就需要在自定义View上关闭硬件加速\n\n#### 会导致以下已知问题:\n\n1. MenuDrawer和WebView结合使用时，发现当关闭MenuDrawer菜单没有选择任何项时，在webview中显示的内容会出现View错位(打开菜单时没有显示的区域还是没有显示)。\n2. 在某些Andorid 4.0上，在View刷新时会出现花屏或者部分View错位，错误日志: `OpenGLRenderer: 0x501`\n\n### 关闭硬件加速:\n\n#### 1. 在Application中控制全局\n\n```\n<application android:hardwareAccelerated=\"false\" ...>\n```\n\n#### 2. 在Activity中控制\n\n```\n<activity android:hardwareAccelerated=\"false\" />\n```\n\n#### 3. Window级别控制\n\n```\ngetWindow().setFlags(\n    WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED,\n    WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);\n```\n\n#### 4. View级别控制\n\n```\nmyView.setLayerType(View.LAYER_TYPE_SOFTWARE, null);\n```\n或\n```\n<View xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"fill_parent\"\n    android:layout_height=\"fill_parent\"\n    android:orientation=\"vertical\"\n    android:paddingLeft=\"2dp\"\n    android:layerType=\"software\"\n    android:paddingRight=\"2dp\" >\n```\n\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2015/04/18/Android-2d-Drawing","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66h8000195bu8kxjk9wt","content":"<h2 id=\"Android触发2d绘制的一般方式\"><a href=\"#Android触发2d绘制的一般方式\" class=\"headerlink\" title=\"Android触发2d绘制的一般方式\"></a>Android触发2d绘制的一般方式</h2><h3 id=\"I-由系统触发的一般View层级绘制\"><a href=\"#I-由系统触发的一般View层级绘制\" class=\"headerlink\" title=\"I. 由系统触发的一般View层级绘制\"></a>I. 由系统触发的一般View层级绘制</h3><h4 id=\"哪些场景\"><a href=\"#哪些场景\" class=\"headerlink\" title=\"哪些场景?\"></a>哪些场景?</h4><ol>\n<li>静态的图形</li>\n<li>预定义的动画</li>\n</ol>\n<h3 id=\"II-由Canvas的调用触发\"><a href=\"#II-由Canvas的调用触发\" class=\"headerlink\" title=\"II. 由Canvas的调用触发\"></a>II. 由Canvas的调用触发</h3><h4 id=\"哪些场景-1\"><a href=\"#哪些场景-1\" class=\"headerlink\" title=\"哪些场景?\"></a>哪些场景?</h4><ol>\n<li>一般的重绘或者一般的动态动画(如:视频、游戏)</li>\n</ol>\n<a id=\"more\"></a>\n<h4 id=\"哪些方式\"><a href=\"#哪些方式\" class=\"headerlink\" title=\"哪些方式?\"></a>哪些方式?</h4><ol>\n<li>一般UI线程中调用( <code>View.onDraw()</code> )</li>\n<li>非UI线程中调用( SurfaceView suport )</li>\n</ol>\n<h2 id=\"Canvs\"><a href=\"#Canvs\" class=\"headerlink\" title=\"Canvs\"></a>Canvs</h2><blockquote>\n<p>可控制的画布，所有的Canvas绘制调用会保存在画布上</p>\n</blockquote>\n<h3 id=\"需要注意的\"><a href=\"#需要注意的\" class=\"headerlink\" title=\"需要注意的\"></a>需要注意的</h3><ul>\n<li>Android 中所有的View视图，其实最终都是在Canvas这个画板上画出来的</li>\n<li>View在绘制时，父组件调用dispatchDraw(Canvas)分发给各个子组件</li>\n<li><code>canvas.translate(int, int)</code> 当前原点位置</li>\n<li><code>canvas.clipRect(int, int, int, int)</code> 可见范围</li>\n<li>Android.animation 实际上 改变canvas的matrix以及通过clipRect改变可见范围，大小与布局并没有实质改变</li>\n<li>matrix矩阵的作用：对每个坐标点(x, y)转换为另外(x’, y’)</li>\n<li>Canvas.translate(int, int) 效果相同 matrix.postTranslate(int, int)</li>\n</ul>\n<h2 id=\"硬件加速原则\"><a href=\"#硬件加速原则\" class=\"headerlink\" title=\"硬件加速原则\"></a>硬件加速原则</h2><blockquote>\n<p>能使用GPU来加速2D图像的渲染速度</p>\n</blockquote>\n<h3 id=\"需要注意\"><a href=\"#需要注意\" class=\"headerlink\" title=\"需要注意\"></a>需要注意</h3><blockquote>\n<p>针对自定义的View，硬件加速可能导致渲染错误，所以自定义View测试后不支持就需要在自定义View上关闭硬件加速</p>\n</blockquote>\n<h4 id=\"会导致以下已知问题\"><a href=\"#会导致以下已知问题\" class=\"headerlink\" title=\"会导致以下已知问题:\"></a>会导致以下已知问题:</h4><ol>\n<li>MenuDrawer和WebView结合使用时，发现当关闭MenuDrawer菜单没有选择任何项时，在webview中显示的内容会出现View错位(打开菜单时没有显示的区域还是没有显示)。</li>\n<li>在某些Andorid 4.0上，在View刷新时会出现花屏或者部分View错位，错误日志: <code>OpenGLRenderer: 0x501</code></li>\n</ol>\n<h3 id=\"关闭硬件加速\"><a href=\"#关闭硬件加速\" class=\"headerlink\" title=\"关闭硬件加速:\"></a>关闭硬件加速:</h3><h4 id=\"1-在Application中控制全局\"><a href=\"#1-在Application中控制全局\" class=\"headerlink\" title=\"1. 在Application中控制全局\"></a>1. 在Application中控制全局</h4><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"built_in\">application</span> android:hardwareAccelerated=<span class=\"string\">\"false\"</span> ...&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"2-在Activity中控制\"><a href=\"#2-在Activity中控制\" class=\"headerlink\" title=\"2. 在Activity中控制\"></a>2. 在Activity中控制</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">android:hardwareAccelerated</span>=<span class=\"string\">\"false\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"3-Window级别控制\"><a href=\"#3-Window级别控制\" class=\"headerlink\" title=\"3. Window级别控制\"></a>3. Window级别控制</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">getWindow</span>()<span class=\"selector-class\">.setFlags</span>(</div><div class=\"line\">    <span class=\"selector-tag\">WindowManager</span><span class=\"selector-class\">.LayoutParams</span><span class=\"selector-class\">.FLAG_HARDWARE_ACCELERATED</span>,</div><div class=\"line\">    <span class=\"selector-tag\">WindowManager</span><span class=\"selector-class\">.LayoutParams</span><span class=\"selector-class\">.FLAG_HARDWARE_ACCELERATED</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"4-View级别控制\"><a href=\"#4-View级别控制\" class=\"headerlink\" title=\"4. View级别控制\"></a>4. View级别控制</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">myView</span><span class=\"selector-class\">.setLayerType</span>(<span class=\"selector-tag\">View</span><span class=\"selector-class\">.LAYER_TYPE_SOFTWARE</span>, <span class=\"selector-tag\">null</span>);</div></pre></td></tr></table></figure>\n<p>或<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">View</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\">    <span class=\"attr\">android:paddingLeft</span>=<span class=\"string\">\"2dp\"</span></div><div class=\"line\">    <span class=\"attr\">android:layerType</span>=<span class=\"string\">\"software\"</span></div><div class=\"line\">    <span class=\"attr\">android:paddingRight</span>=<span class=\"string\">\"2dp\"</span> &gt;</div></pre></td></tr></table></figure></p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<h2 id=\"Android触发2d绘制的一般方式\"><a href=\"#Android触发2d绘制的一般方式\" class=\"headerlink\" title=\"Android触发2d绘制的一般方式\"></a>Android触发2d绘制的一般方式</h2><h3 id=\"I-由系统触发的一般View层级绘制\"><a href=\"#I-由系统触发的一般View层级绘制\" class=\"headerlink\" title=\"I. 由系统触发的一般View层级绘制\"></a>I. 由系统触发的一般View层级绘制</h3><h4 id=\"哪些场景\"><a href=\"#哪些场景\" class=\"headerlink\" title=\"哪些场景?\"></a>哪些场景?</h4><ol>\n<li>静态的图形</li>\n<li>预定义的动画</li>\n</ol>\n<h3 id=\"II-由Canvas的调用触发\"><a href=\"#II-由Canvas的调用触发\" class=\"headerlink\" title=\"II. 由Canvas的调用触发\"></a>II. 由Canvas的调用触发</h3><h4 id=\"哪些场景-1\"><a href=\"#哪些场景-1\" class=\"headerlink\" title=\"哪些场景?\"></a>哪些场景?</h4><ol>\n<li>一般的重绘或者一般的动态动画(如:视频、游戏)</li>\n</ol>","more":"<h4 id=\"哪些方式\"><a href=\"#哪些方式\" class=\"headerlink\" title=\"哪些方式?\"></a>哪些方式?</h4><ol>\n<li>一般UI线程中调用( <code>View.onDraw()</code> )</li>\n<li>非UI线程中调用( SurfaceView suport )</li>\n</ol>\n<h2 id=\"Canvs\"><a href=\"#Canvs\" class=\"headerlink\" title=\"Canvs\"></a>Canvs</h2><blockquote>\n<p>可控制的画布，所有的Canvas绘制调用会保存在画布上</p>\n</blockquote>\n<h3 id=\"需要注意的\"><a href=\"#需要注意的\" class=\"headerlink\" title=\"需要注意的\"></a>需要注意的</h3><ul>\n<li>Android 中所有的View视图，其实最终都是在Canvas这个画板上画出来的</li>\n<li>View在绘制时，父组件调用dispatchDraw(Canvas)分发给各个子组件</li>\n<li><code>canvas.translate(int, int)</code> 当前原点位置</li>\n<li><code>canvas.clipRect(int, int, int, int)</code> 可见范围</li>\n<li>Android.animation 实际上 改变canvas的matrix以及通过clipRect改变可见范围，大小与布局并没有实质改变</li>\n<li>matrix矩阵的作用：对每个坐标点(x, y)转换为另外(x’, y’)</li>\n<li>Canvas.translate(int, int) 效果相同 matrix.postTranslate(int, int)</li>\n</ul>\n<h2 id=\"硬件加速原则\"><a href=\"#硬件加速原则\" class=\"headerlink\" title=\"硬件加速原则\"></a>硬件加速原则</h2><blockquote>\n<p>能使用GPU来加速2D图像的渲染速度</p>\n</blockquote>\n<h3 id=\"需要注意\"><a href=\"#需要注意\" class=\"headerlink\" title=\"需要注意\"></a>需要注意</h3><blockquote>\n<p>针对自定义的View，硬件加速可能导致渲染错误，所以自定义View测试后不支持就需要在自定义View上关闭硬件加速</p>\n</blockquote>\n<h4 id=\"会导致以下已知问题\"><a href=\"#会导致以下已知问题\" class=\"headerlink\" title=\"会导致以下已知问题:\"></a>会导致以下已知问题:</h4><ol>\n<li>MenuDrawer和WebView结合使用时，发现当关闭MenuDrawer菜单没有选择任何项时，在webview中显示的内容会出现View错位(打开菜单时没有显示的区域还是没有显示)。</li>\n<li>在某些Andorid 4.0上，在View刷新时会出现花屏或者部分View错位，错误日志: <code>OpenGLRenderer: 0x501</code></li>\n</ol>\n<h3 id=\"关闭硬件加速\"><a href=\"#关闭硬件加速\" class=\"headerlink\" title=\"关闭硬件加速:\"></a>关闭硬件加速:</h3><h4 id=\"1-在Application中控制全局\"><a href=\"#1-在Application中控制全局\" class=\"headerlink\" title=\"1. 在Application中控制全局\"></a>1. 在Application中控制全局</h4><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"built_in\">application</span> android:hardwareAccelerated=<span class=\"string\">\"false\"</span> ...&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"2-在Activity中控制\"><a href=\"#2-在Activity中控制\" class=\"headerlink\" title=\"2. 在Activity中控制\"></a>2. 在Activity中控制</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">android:hardwareAccelerated</span>=<span class=\"string\">\"false\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"3-Window级别控制\"><a href=\"#3-Window级别控制\" class=\"headerlink\" title=\"3. Window级别控制\"></a>3. Window级别控制</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">getWindow</span>()<span class=\"selector-class\">.setFlags</span>(</div><div class=\"line\">    <span class=\"selector-tag\">WindowManager</span><span class=\"selector-class\">.LayoutParams</span><span class=\"selector-class\">.FLAG_HARDWARE_ACCELERATED</span>,</div><div class=\"line\">    <span class=\"selector-tag\">WindowManager</span><span class=\"selector-class\">.LayoutParams</span><span class=\"selector-class\">.FLAG_HARDWARE_ACCELERATED</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"4-View级别控制\"><a href=\"#4-View级别控制\" class=\"headerlink\" title=\"4. View级别控制\"></a>4. View级别控制</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">myView</span><span class=\"selector-class\">.setLayerType</span>(<span class=\"selector-tag\">View</span><span class=\"selector-class\">.LAYER_TYPE_SOFTWARE</span>, <span class=\"selector-tag\">null</span>);</div></pre></td></tr></table></figure>\n<p>或<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">View</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\">    <span class=\"attr\">android:paddingLeft</span>=<span class=\"string\">\"2dp\"</span></div><div class=\"line\">    <span class=\"attr\">android:layerType</span>=<span class=\"string\">\"software\"</span></div><div class=\"line\">    <span class=\"attr\">android:paddingRight</span>=<span class=\"string\">\"2dp\"</span> &gt;</span></div></pre></td></tr></table></figure></p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"360手机卫士 Android开发 InfoQ视频 总结","date":"2015-03-17T06:09:03.000Z","_content":"\n## 前言\n演讲人: 姚彤,奇虎360公司技术委员会委员/手机核心安全事业部总经理\n\n视频标题: 从360手机卫士的开发历程看如何实施大型移动应用开发\n\n视频地址: http://www.infoq.com/cn/presentations/from-360-development-see-big-mobile-application-development\n\n\n## 宗旨:\n\n一个应用可以没用，但不要添乱\n\n<!--more-->\n\n## I. 大应用通病\n1. 程序规模越来越大\n2. 内存占用高，卡，慢\n3. 崩溃\n4. 耦合\n5. 适配问题\n6. 发布版本疲于奔命\n7. 疑难问题定位\n\n## II. 指标定位技巧\n\n直接定位`AndroidManifest.xml` 大小变化即可，Android四大组件都是需要在里面定义的。\n\n## III. 应用优劣定位\n1. 安装包体积（用户会觉得包越小越不卡，虽然实际并非如此）\n2. 内存暂用\n3. 耗电情况\n4. CPU\n5. 兼容\n6. 流量\n7. 升级新版本（基本上以月为单位完成洗量）（升级所用的描述需要考究）（升级的时间点需要考究）\n8. 应用自带主要需求的特殊问题\n\n## IV. 应用优化方面\n##### 1) 内存方面:\n内存过多: 多进程化（按需创建）: 剥离需要常驻与不需要常驻的操作到不同的进程。这样也可以提高稳定性（主要的进程不会受影响）\n\n##### 2) 代码方面:\n- 代码过多: 插件化（插件话独立维护/升级），分模块独立升级、独立维护。\n- 小改动不得不通过升级：云化，多用配置文件（如Lua啊之类的）\n\n##### 3) 升级方面:\n- 一定要稳定。\n- 针对性升级（地域、机型、网络类型、历史版本号）\n- 增量升级\n- 考虑成功率问题，wifi下默认下载再提示用户\n- 运营商cache，导致升级错包： 1. 检测包key, 2. 走自己的代理服务器/https\n\n\n##### 4) 发布方面\n- 渠道首页\n- 内测群\n- 灰度升级\n- 论坛反馈收集（让产品去跟）\n\n\n##### 4) 诊断方面:\n制作诊断插件（插件需要根据目标问题自动选择诊断不同模块），运行以后自动上传日志。\n\n## V. 工具\n##### 1) Build工具:\n1. release版\n2. debug版\n3. 每个包的代码扫描工具\n4. 每个新包较上一个包的比较\n5. 每个发布包检测大小变化原因（apk黑盒比较）\n\n![](/img/360-1.png)\n\n![](/img/360-2.png)\n\n##### 2) 代码扫描\n1. Checkstyle\n2. Lint(error, safe)\n3. 红线扫描(基于PMD)\n\n\n##### 3) 自动化测试\n1. uiautomator\n2. 基于Robotium改造（改造用Lua写测试案例）\n\n![](/img/360-3.png)\n\n![](/img/360-4.png)\n\n#### 4) BVT case check\n- 每个包都可以跑\n- 发布包必须跑\n\n#### 5) 安全审核（发布最后一关（公司/部门），自动化，黑盒）\n- 信息泄露\n- DOS\n\n\n#### 6) TIPS:\n1. 外来代码检测更加严格(可追溯，代码审计，整合测试，黑盒逆向分析)\n\n\n# VI. 安全建议\n1. WebView各类安全问题(Js注入，Javascrip问题等等)\n2. 防恶意二次打包\n3. 明文传递敏感信息(https要用对)\n4. 错误导出组件\n5. 参数校验不严格(Intent不检测(导致DDOS))\n\n# VII. 管理方面\n\n1. 人员方面，现在水涨船高，人员可以多挖掘C++或做pc开发等的开发人员。\n2. 代码方面，通过插件化，整个团队分模块达到解耦，独立维护，加快各模块独立维护速度。\n3. 研发流程: 重视build break问题\n4. 组织架构: 小团队；少开大会；专人维护Build系统；专门的架构组；专门的质量改进组（高手重点）；专门的自动化测试组；每周召开质量会\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/360手机卫士-Android开发-InfoQ视频-总结.md","raw":"title: 360手机卫士 Android开发 InfoQ视频 总结\ndate: 2015-03-17 14:09:03\npermalink: 2015/03/17/360手机卫士-Android开发-InfoQ视频-总结\ntags:\n- 360手机卫士\n- InfoQ\n- Android\n- 优化\n- 总结\n\n---\n\n## 前言\n演讲人: 姚彤,奇虎360公司技术委员会委员/手机核心安全事业部总经理\n\n视频标题: 从360手机卫士的开发历程看如何实施大型移动应用开发\n\n视频地址: http://www.infoq.com/cn/presentations/from-360-development-see-big-mobile-application-development\n\n\n## 宗旨:\n\n一个应用可以没用，但不要添乱\n\n<!--more-->\n\n## I. 大应用通病\n1. 程序规模越来越大\n2. 内存占用高，卡，慢\n3. 崩溃\n4. 耦合\n5. 适配问题\n6. 发布版本疲于奔命\n7. 疑难问题定位\n\n## II. 指标定位技巧\n\n直接定位`AndroidManifest.xml` 大小变化即可，Android四大组件都是需要在里面定义的。\n\n## III. 应用优劣定位\n1. 安装包体积（用户会觉得包越小越不卡，虽然实际并非如此）\n2. 内存暂用\n3. 耗电情况\n4. CPU\n5. 兼容\n6. 流量\n7. 升级新版本（基本上以月为单位完成洗量）（升级所用的描述需要考究）（升级的时间点需要考究）\n8. 应用自带主要需求的特殊问题\n\n## IV. 应用优化方面\n##### 1) 内存方面:\n内存过多: 多进程化（按需创建）: 剥离需要常驻与不需要常驻的操作到不同的进程。这样也可以提高稳定性（主要的进程不会受影响）\n\n##### 2) 代码方面:\n- 代码过多: 插件化（插件话独立维护/升级），分模块独立升级、独立维护。\n- 小改动不得不通过升级：云化，多用配置文件（如Lua啊之类的）\n\n##### 3) 升级方面:\n- 一定要稳定。\n- 针对性升级（地域、机型、网络类型、历史版本号）\n- 增量升级\n- 考虑成功率问题，wifi下默认下载再提示用户\n- 运营商cache，导致升级错包： 1. 检测包key, 2. 走自己的代理服务器/https\n\n\n##### 4) 发布方面\n- 渠道首页\n- 内测群\n- 灰度升级\n- 论坛反馈收集（让产品去跟）\n\n\n##### 4) 诊断方面:\n制作诊断插件（插件需要根据目标问题自动选择诊断不同模块），运行以后自动上传日志。\n\n## V. 工具\n##### 1) Build工具:\n1. release版\n2. debug版\n3. 每个包的代码扫描工具\n4. 每个新包较上一个包的比较\n5. 每个发布包检测大小变化原因（apk黑盒比较）\n\n![](/img/360-1.png)\n\n![](/img/360-2.png)\n\n##### 2) 代码扫描\n1. Checkstyle\n2. Lint(error, safe)\n3. 红线扫描(基于PMD)\n\n\n##### 3) 自动化测试\n1. uiautomator\n2. 基于Robotium改造（改造用Lua写测试案例）\n\n![](/img/360-3.png)\n\n![](/img/360-4.png)\n\n#### 4) BVT case check\n- 每个包都可以跑\n- 发布包必须跑\n\n#### 5) 安全审核（发布最后一关（公司/部门），自动化，黑盒）\n- 信息泄露\n- DOS\n\n\n#### 6) TIPS:\n1. 外来代码检测更加严格(可追溯，代码审计，整合测试，黑盒逆向分析)\n\n\n# VI. 安全建议\n1. WebView各类安全问题(Js注入，Javascrip问题等等)\n2. 防恶意二次打包\n3. 明文传递敏感信息(https要用对)\n4. 错误导出组件\n5. 参数校验不严格(Intent不检测(导致DDOS))\n\n# VII. 管理方面\n\n1. 人员方面，现在水涨船高，人员可以多挖掘C++或做pc开发等的开发人员。\n2. 代码方面，通过插件化，整个团队分模块达到解耦，独立维护，加快各模块独立维护速度。\n3. 研发流程: 重视build break问题\n4. 组织架构: 小团队；少开大会；专人维护Build系统；专门的架构组；专门的质量改进组（高手重点）；专门的自动化测试组；每周召开质量会\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2015/03/17/360手机卫士-Android开发-InfoQ视频-总结","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66hc000395buwkdg19a3","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>演讲人: 姚彤,奇虎360公司技术委员会委员/手机核心安全事业部总经理</p>\n<p>视频标题: 从360手机卫士的开发历程看如何实施大型移动应用开发</p>\n<p>视频地址: <a href=\"http://www.infoq.com/cn/presentations/from-360-development-see-big-mobile-application-development\" target=\"_blank\" rel=\"external\">http://www.infoq.com/cn/presentations/from-360-development-see-big-mobile-application-development</a></p>\n<h2 id=\"宗旨\"><a href=\"#宗旨\" class=\"headerlink\" title=\"宗旨:\"></a>宗旨:</h2><p>一个应用可以没用，但不要添乱</p>\n<a id=\"more\"></a>\n<h2 id=\"I-大应用通病\"><a href=\"#I-大应用通病\" class=\"headerlink\" title=\"I. 大应用通病\"></a>I. 大应用通病</h2><ol>\n<li>程序规模越来越大</li>\n<li>内存占用高，卡，慢</li>\n<li>崩溃</li>\n<li>耦合</li>\n<li>适配问题</li>\n<li>发布版本疲于奔命</li>\n<li>疑难问题定位</li>\n</ol>\n<h2 id=\"II-指标定位技巧\"><a href=\"#II-指标定位技巧\" class=\"headerlink\" title=\"II. 指标定位技巧\"></a>II. 指标定位技巧</h2><p>直接定位<code>AndroidManifest.xml</code> 大小变化即可，Android四大组件都是需要在里面定义的。</p>\n<h2 id=\"III-应用优劣定位\"><a href=\"#III-应用优劣定位\" class=\"headerlink\" title=\"III. 应用优劣定位\"></a>III. 应用优劣定位</h2><ol>\n<li>安装包体积（用户会觉得包越小越不卡，虽然实际并非如此）</li>\n<li>内存暂用</li>\n<li>耗电情况</li>\n<li>CPU</li>\n<li>兼容</li>\n<li>流量</li>\n<li>升级新版本（基本上以月为单位完成洗量）（升级所用的描述需要考究）（升级的时间点需要考究）</li>\n<li>应用自带主要需求的特殊问题</li>\n</ol>\n<h2 id=\"IV-应用优化方面\"><a href=\"#IV-应用优化方面\" class=\"headerlink\" title=\"IV. 应用优化方面\"></a>IV. 应用优化方面</h2><h5 id=\"1-内存方面\"><a href=\"#1-内存方面\" class=\"headerlink\" title=\"1) 内存方面:\"></a>1) 内存方面:</h5><p>内存过多: 多进程化（按需创建）: 剥离需要常驻与不需要常驻的操作到不同的进程。这样也可以提高稳定性（主要的进程不会受影响）</p>\n<h5 id=\"2-代码方面\"><a href=\"#2-代码方面\" class=\"headerlink\" title=\"2) 代码方面:\"></a>2) 代码方面:</h5><ul>\n<li>代码过多: 插件化（插件话独立维护/升级），分模块独立升级、独立维护。</li>\n<li>小改动不得不通过升级：云化，多用配置文件（如Lua啊之类的）</li>\n</ul>\n<h5 id=\"3-升级方面\"><a href=\"#3-升级方面\" class=\"headerlink\" title=\"3) 升级方面:\"></a>3) 升级方面:</h5><ul>\n<li>一定要稳定。</li>\n<li>针对性升级（地域、机型、网络类型、历史版本号）</li>\n<li>增量升级</li>\n<li>考虑成功率问题，wifi下默认下载再提示用户</li>\n<li>运营商cache，导致升级错包： 1. 检测包key, 2. 走自己的代理服务器/https</li>\n</ul>\n<h5 id=\"4-发布方面\"><a href=\"#4-发布方面\" class=\"headerlink\" title=\"4) 发布方面\"></a>4) 发布方面</h5><ul>\n<li>渠道首页</li>\n<li>内测群</li>\n<li>灰度升级</li>\n<li>论坛反馈收集（让产品去跟）</li>\n</ul>\n<h5 id=\"4-诊断方面\"><a href=\"#4-诊断方面\" class=\"headerlink\" title=\"4) 诊断方面:\"></a>4) 诊断方面:</h5><p>制作诊断插件（插件需要根据目标问题自动选择诊断不同模块），运行以后自动上传日志。</p>\n<h2 id=\"V-工具\"><a href=\"#V-工具\" class=\"headerlink\" title=\"V. 工具\"></a>V. 工具</h2><h5 id=\"1-Build工具\"><a href=\"#1-Build工具\" class=\"headerlink\" title=\"1) Build工具:\"></a>1) Build工具:</h5><ol>\n<li>release版</li>\n<li>debug版</li>\n<li>每个包的代码扫描工具</li>\n<li>每个新包较上一个包的比较</li>\n<li>每个发布包检测大小变化原因（apk黑盒比较）</li>\n</ol>\n<p><img src=\"/img/360-1.png\" alt=\"\"></p>\n<p><img src=\"/img/360-2.png\" alt=\"\"></p>\n<h5 id=\"2-代码扫描\"><a href=\"#2-代码扫描\" class=\"headerlink\" title=\"2) 代码扫描\"></a>2) 代码扫描</h5><ol>\n<li>Checkstyle</li>\n<li>Lint(error, safe)</li>\n<li>红线扫描(基于PMD)</li>\n</ol>\n<h5 id=\"3-自动化测试\"><a href=\"#3-自动化测试\" class=\"headerlink\" title=\"3) 自动化测试\"></a>3) 自动化测试</h5><ol>\n<li>uiautomator</li>\n<li>基于Robotium改造（改造用Lua写测试案例）</li>\n</ol>\n<p><img src=\"/img/360-3.png\" alt=\"\"></p>\n<p><img src=\"/img/360-4.png\" alt=\"\"></p>\n<h4 id=\"4-BVT-case-check\"><a href=\"#4-BVT-case-check\" class=\"headerlink\" title=\"4) BVT case check\"></a>4) BVT case check</h4><ul>\n<li>每个包都可以跑</li>\n<li>发布包必须跑</li>\n</ul>\n<h4 id=\"5-安全审核（发布最后一关（公司-部门），自动化，黑盒）\"><a href=\"#5-安全审核（发布最后一关（公司-部门），自动化，黑盒）\" class=\"headerlink\" title=\"5) 安全审核（发布最后一关（公司/部门），自动化，黑盒）\"></a>5) 安全审核（发布最后一关（公司/部门），自动化，黑盒）</h4><ul>\n<li>信息泄露</li>\n<li>DOS</li>\n</ul>\n<h4 id=\"6-TIPS\"><a href=\"#6-TIPS\" class=\"headerlink\" title=\"6) TIPS:\"></a>6) TIPS:</h4><ol>\n<li>外来代码检测更加严格(可追溯，代码审计，整合测试，黑盒逆向分析)</li>\n</ol>\n<h1 id=\"VI-安全建议\"><a href=\"#VI-安全建议\" class=\"headerlink\" title=\"VI. 安全建议\"></a>VI. 安全建议</h1><ol>\n<li>WebView各类安全问题(Js注入，Javascrip问题等等)</li>\n<li>防恶意二次打包</li>\n<li>明文传递敏感信息(https要用对)</li>\n<li>错误导出组件</li>\n<li>参数校验不严格(Intent不检测(导致DDOS))</li>\n</ol>\n<h1 id=\"VII-管理方面\"><a href=\"#VII-管理方面\" class=\"headerlink\" title=\"VII. 管理方面\"></a>VII. 管理方面</h1><ol>\n<li>人员方面，现在水涨船高，人员可以多挖掘C++或做pc开发等的开发人员。</li>\n<li>代码方面，通过插件化，整个团队分模块达到解耦，独立维护，加快各模块独立维护速度。</li>\n<li>研发流程: 重视build break问题</li>\n<li>组织架构: 小团队；少开大会；专人维护Build系统；专门的架构组；专门的质量改进组（高手重点）；专门的自动化测试组；每周召开质量会</li>\n</ol>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>演讲人: 姚彤,奇虎360公司技术委员会委员/手机核心安全事业部总经理</p>\n<p>视频标题: 从360手机卫士的开发历程看如何实施大型移动应用开发</p>\n<p>视频地址: <a href=\"http://www.infoq.com/cn/presentations/from-360-development-see-big-mobile-application-development\">http://www.infoq.com/cn/presentations/from-360-development-see-big-mobile-application-development</a></p>\n<h2 id=\"宗旨\"><a href=\"#宗旨\" class=\"headerlink\" title=\"宗旨:\"></a>宗旨:</h2><p>一个应用可以没用，但不要添乱</p>","more":"<h2 id=\"I-大应用通病\"><a href=\"#I-大应用通病\" class=\"headerlink\" title=\"I. 大应用通病\"></a>I. 大应用通病</h2><ol>\n<li>程序规模越来越大</li>\n<li>内存占用高，卡，慢</li>\n<li>崩溃</li>\n<li>耦合</li>\n<li>适配问题</li>\n<li>发布版本疲于奔命</li>\n<li>疑难问题定位</li>\n</ol>\n<h2 id=\"II-指标定位技巧\"><a href=\"#II-指标定位技巧\" class=\"headerlink\" title=\"II. 指标定位技巧\"></a>II. 指标定位技巧</h2><p>直接定位<code>AndroidManifest.xml</code> 大小变化即可，Android四大组件都是需要在里面定义的。</p>\n<h2 id=\"III-应用优劣定位\"><a href=\"#III-应用优劣定位\" class=\"headerlink\" title=\"III. 应用优劣定位\"></a>III. 应用优劣定位</h2><ol>\n<li>安装包体积（用户会觉得包越小越不卡，虽然实际并非如此）</li>\n<li>内存暂用</li>\n<li>耗电情况</li>\n<li>CPU</li>\n<li>兼容</li>\n<li>流量</li>\n<li>升级新版本（基本上以月为单位完成洗量）（升级所用的描述需要考究）（升级的时间点需要考究）</li>\n<li>应用自带主要需求的特殊问题</li>\n</ol>\n<h2 id=\"IV-应用优化方面\"><a href=\"#IV-应用优化方面\" class=\"headerlink\" title=\"IV. 应用优化方面\"></a>IV. 应用优化方面</h2><h5 id=\"1-内存方面\"><a href=\"#1-内存方面\" class=\"headerlink\" title=\"1) 内存方面:\"></a>1) 内存方面:</h5><p>内存过多: 多进程化（按需创建）: 剥离需要常驻与不需要常驻的操作到不同的进程。这样也可以提高稳定性（主要的进程不会受影响）</p>\n<h5 id=\"2-代码方面\"><a href=\"#2-代码方面\" class=\"headerlink\" title=\"2) 代码方面:\"></a>2) 代码方面:</h5><ul>\n<li>代码过多: 插件化（插件话独立维护/升级），分模块独立升级、独立维护。</li>\n<li>小改动不得不通过升级：云化，多用配置文件（如Lua啊之类的）</li>\n</ul>\n<h5 id=\"3-升级方面\"><a href=\"#3-升级方面\" class=\"headerlink\" title=\"3) 升级方面:\"></a>3) 升级方面:</h5><ul>\n<li>一定要稳定。</li>\n<li>针对性升级（地域、机型、网络类型、历史版本号）</li>\n<li>增量升级</li>\n<li>考虑成功率问题，wifi下默认下载再提示用户</li>\n<li>运营商cache，导致升级错包： 1. 检测包key, 2. 走自己的代理服务器/https</li>\n</ul>\n<h5 id=\"4-发布方面\"><a href=\"#4-发布方面\" class=\"headerlink\" title=\"4) 发布方面\"></a>4) 发布方面</h5><ul>\n<li>渠道首页</li>\n<li>内测群</li>\n<li>灰度升级</li>\n<li>论坛反馈收集（让产品去跟）</li>\n</ul>\n<h5 id=\"4-诊断方面\"><a href=\"#4-诊断方面\" class=\"headerlink\" title=\"4) 诊断方面:\"></a>4) 诊断方面:</h5><p>制作诊断插件（插件需要根据目标问题自动选择诊断不同模块），运行以后自动上传日志。</p>\n<h2 id=\"V-工具\"><a href=\"#V-工具\" class=\"headerlink\" title=\"V. 工具\"></a>V. 工具</h2><h5 id=\"1-Build工具\"><a href=\"#1-Build工具\" class=\"headerlink\" title=\"1) Build工具:\"></a>1) Build工具:</h5><ol>\n<li>release版</li>\n<li>debug版</li>\n<li>每个包的代码扫描工具</li>\n<li>每个新包较上一个包的比较</li>\n<li>每个发布包检测大小变化原因（apk黑盒比较）</li>\n</ol>\n<p><img src=\"/img/360-1.png\" alt=\"\"></p>\n<p><img src=\"/img/360-2.png\" alt=\"\"></p>\n<h5 id=\"2-代码扫描\"><a href=\"#2-代码扫描\" class=\"headerlink\" title=\"2) 代码扫描\"></a>2) 代码扫描</h5><ol>\n<li>Checkstyle</li>\n<li>Lint(error, safe)</li>\n<li>红线扫描(基于PMD)</li>\n</ol>\n<h5 id=\"3-自动化测试\"><a href=\"#3-自动化测试\" class=\"headerlink\" title=\"3) 自动化测试\"></a>3) 自动化测试</h5><ol>\n<li>uiautomator</li>\n<li>基于Robotium改造（改造用Lua写测试案例）</li>\n</ol>\n<p><img src=\"/img/360-3.png\" alt=\"\"></p>\n<p><img src=\"/img/360-4.png\" alt=\"\"></p>\n<h4 id=\"4-BVT-case-check\"><a href=\"#4-BVT-case-check\" class=\"headerlink\" title=\"4) BVT case check\"></a>4) BVT case check</h4><ul>\n<li>每个包都可以跑</li>\n<li>发布包必须跑</li>\n</ul>\n<h4 id=\"5-安全审核（发布最后一关（公司-部门），自动化，黑盒）\"><a href=\"#5-安全审核（发布最后一关（公司-部门），自动化，黑盒）\" class=\"headerlink\" title=\"5) 安全审核（发布最后一关（公司/部门），自动化，黑盒）\"></a>5) 安全审核（发布最后一关（公司/部门），自动化，黑盒）</h4><ul>\n<li>信息泄露</li>\n<li>DOS</li>\n</ul>\n<h4 id=\"6-TIPS\"><a href=\"#6-TIPS\" class=\"headerlink\" title=\"6) TIPS:\"></a>6) TIPS:</h4><ol>\n<li>外来代码检测更加严格(可追溯，代码审计，整合测试，黑盒逆向分析)</li>\n</ol>\n<h1 id=\"VI-安全建议\"><a href=\"#VI-安全建议\" class=\"headerlink\" title=\"VI. 安全建议\"></a>VI. 安全建议</h1><ol>\n<li>WebView各类安全问题(Js注入，Javascrip问题等等)</li>\n<li>防恶意二次打包</li>\n<li>明文传递敏感信息(https要用对)</li>\n<li>错误导出组件</li>\n<li>参数校验不严格(Intent不检测(导致DDOS))</li>\n</ol>\n<h1 id=\"VII-管理方面\"><a href=\"#VII-管理方面\" class=\"headerlink\" title=\"VII. 管理方面\"></a>VII. 管理方面</h1><ol>\n<li>人员方面，现在水涨船高，人员可以多挖掘C++或做pc开发等的开发人员。</li>\n<li>代码方面，通过插件化，整个团队分模块达到解耦，独立维护，加快各模块独立维护速度。</li>\n<li>研发流程: 重视build break问题</li>\n<li>组织架构: 小团队；少开大会；专人维护Build系统；专门的架构组；专门的质量改进组（高手重点）；专门的自动化测试组；每周召开质量会</li>\n</ol>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"Android AIDL 通信与回调","date":"2013-12-14T00:35:03.000Z","_content":"\n> 测试源码已经更新到GitHub: AIDL_COMMUNICATE-CALLBACK 感兴趣的同学的下载看看。\n\n### 本项目主要在于学习Android中通过AIDL完成进程间通信与回调。\n    项目组成：AIDL_SERVICE_LIB[库项目]、AIDL_CLIENT。\n\n<!--more-->\n\n### 那么主要的需要实现的功能通过几个AIDL文件就可以获知:\n\n### IAIDLService.aidl:\n    package cn.dreamtobe.aidl.service;\n    import cn.dreamtobe.aidl.service.Book;\n    import cn.dreamtobe.aidl.service.IServiceCallback;\n    interface IAIDLService{\n    int getCount();\n    Book getBook();\n    boolean startTestTask();\n    void stopTestTask();\n    void registerCallback(IServiceCallback paramIServiceCallback);\n    void unregisterCallback(IServiceCallback paramIServiceCallback);\n    }\n\n### IServiceCallback.aidl:\n    package cn.dreamtobe.aidl.service;\n    import cn.dreamtobe.aidl.service.Book;\n    interface IServiceCallback {\n    void handlerCommEvent(int msgId, int param);\n  \tvoid callbackBookEvent(int cmd, in Book book);\n    }\n\n###     \n 最终目的是需要跨进程，AIDLService通过回调通知AIDLClient处理并传递有关值，并且AIDLClient可以通过AIDLService中定义好的AIDL有关方法，进行通知或取值。\n\n![image](https://github.com/Jacksgong/AIDL_COMMUNICATE-CALLBACK/raw/master/aidl_readme/raw/com_task.png)\n![image](https://github.com/Jacksgong/AIDL_COMMUNICATE-CALLBACK/raw/master/aidl_readme/raw/bind_succeed.png)\n![image](https://github.com/Jacksgong/AIDL_COMMUNICATE-CALLBACK/raw/master/aidl_readme/raw/unbind.png)\n![image](https://github.com/Jacksgong/AIDL_COMMUNICATE-CALLBACK/raw/master/aidl_readme/raw/unbind_request.png)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/Android-AIDL-通信与回调.md","raw":"title: Android AIDL 通信与回调\ndate: 2013-12-14 08:35:03\npermalink: 2013/12/14/Android-AIDL-通信与回调\ntags:\n- AIDL\n- 通信\n- Android\n\n---\n\n> 测试源码已经更新到GitHub: AIDL_COMMUNICATE-CALLBACK 感兴趣的同学的下载看看。\n\n### 本项目主要在于学习Android中通过AIDL完成进程间通信与回调。\n    项目组成：AIDL_SERVICE_LIB[库项目]、AIDL_CLIENT。\n\n<!--more-->\n\n### 那么主要的需要实现的功能通过几个AIDL文件就可以获知:\n\n### IAIDLService.aidl:\n    package cn.dreamtobe.aidl.service;\n    import cn.dreamtobe.aidl.service.Book;\n    import cn.dreamtobe.aidl.service.IServiceCallback;\n    interface IAIDLService{\n    int getCount();\n    Book getBook();\n    boolean startTestTask();\n    void stopTestTask();\n    void registerCallback(IServiceCallback paramIServiceCallback);\n    void unregisterCallback(IServiceCallback paramIServiceCallback);\n    }\n\n### IServiceCallback.aidl:\n    package cn.dreamtobe.aidl.service;\n    import cn.dreamtobe.aidl.service.Book;\n    interface IServiceCallback {\n    void handlerCommEvent(int msgId, int param);\n  \tvoid callbackBookEvent(int cmd, in Book book);\n    }\n\n###     \n 最终目的是需要跨进程，AIDLService通过回调通知AIDLClient处理并传递有关值，并且AIDLClient可以通过AIDLService中定义好的AIDL有关方法，进行通知或取值。\n\n![image](https://github.com/Jacksgong/AIDL_COMMUNICATE-CALLBACK/raw/master/aidl_readme/raw/com_task.png)\n![image](https://github.com/Jacksgong/AIDL_COMMUNICATE-CALLBACK/raw/master/aidl_readme/raw/bind_succeed.png)\n![image](https://github.com/Jacksgong/AIDL_COMMUNICATE-CALLBACK/raw/master/aidl_readme/raw/unbind.png)\n![image](https://github.com/Jacksgong/AIDL_COMMUNICATE-CALLBACK/raw/master/aidl_readme/raw/unbind_request.png)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2013/12/14/Android-AIDL-通信与回调","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66hf000495buob2vnd54","content":"<blockquote>\n<p>测试源码已经更新到GitHub: AIDL_COMMUNICATE-CALLBACK 感兴趣的同学的下载看看。</p>\n</blockquote>\n<h3 id=\"本项目主要在于学习Android中通过AIDL完成进程间通信与回调。\"><a href=\"#本项目主要在于学习Android中通过AIDL完成进程间通信与回调。\" class=\"headerlink\" title=\"本项目主要在于学习Android中通过AIDL完成进程间通信与回调。\"></a>本项目主要在于学习Android中通过AIDL完成进程间通信与回调。</h3><pre><code>项目组成：AIDL_SERVICE_LIB[库项目]、AIDL_CLIENT。\n</code></pre><a id=\"more\"></a>\n<h3 id=\"那么主要的需要实现的功能通过几个AIDL文件就可以获知\"><a href=\"#那么主要的需要实现的功能通过几个AIDL文件就可以获知\" class=\"headerlink\" title=\"那么主要的需要实现的功能通过几个AIDL文件就可以获知:\"></a>那么主要的需要实现的功能通过几个AIDL文件就可以获知:</h3><h3 id=\"IAIDLService-aidl\"><a href=\"#IAIDLService-aidl\" class=\"headerlink\" title=\"IAIDLService.aidl:\"></a>IAIDLService.aidl:</h3><pre><code>package cn.dreamtobe.aidl.service;\nimport cn.dreamtobe.aidl.service.Book;\nimport cn.dreamtobe.aidl.service.IServiceCallback;\ninterface IAIDLService{\nint getCount();\nBook getBook();\nboolean startTestTask();\nvoid stopTestTask();\nvoid registerCallback(IServiceCallback paramIServiceCallback);\nvoid unregisterCallback(IServiceCallback paramIServiceCallback);\n}\n</code></pre><h3 id=\"IServiceCallback-aidl\"><a href=\"#IServiceCallback-aidl\" class=\"headerlink\" title=\"IServiceCallback.aidl:\"></a>IServiceCallback.aidl:</h3><pre><code>package cn.dreamtobe.aidl.service;\nimport cn.dreamtobe.aidl.service.Book;\ninterface IServiceCallback {\nvoid handlerCommEvent(int msgId, int param);\n  void callbackBookEvent(int cmd, in Book book);\n}\n</code></pre><h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\" \"></a> </h3><p> 最终目的是需要跨进程，AIDLService通过回调通知AIDLClient处理并传递有关值，并且AIDLClient可以通过AIDLService中定义好的AIDL有关方法，进行通知或取值。</p>\n<p><img src=\"https://github.com/Jacksgong/AIDL_COMMUNICATE-CALLBACK/raw/master/aidl_readme/raw/com_task.png\" alt=\"image\"><br><img src=\"https://github.com/Jacksgong/AIDL_COMMUNICATE-CALLBACK/raw/master/aidl_readme/raw/bind_succeed.png\" alt=\"image\"><br><img src=\"https://github.com/Jacksgong/AIDL_COMMUNICATE-CALLBACK/raw/master/aidl_readme/raw/unbind.png\" alt=\"image\"><br><img src=\"https://github.com/Jacksgong/AIDL_COMMUNICATE-CALLBACK/raw/master/aidl_readme/raw/unbind_request.png\" alt=\"image\"></p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>测试源码已经更新到GitHub: AIDL_COMMUNICATE-CALLBACK 感兴趣的同学的下载看看。</p>\n</blockquote>\n<h3 id=\"本项目主要在于学习Android中通过AIDL完成进程间通信与回调。\"><a href=\"#本项目主要在于学习Android中通过AIDL完成进程间通信与回调。\" class=\"headerlink\" title=\"本项目主要在于学习Android中通过AIDL完成进程间通信与回调。\"></a>本项目主要在于学习Android中通过AIDL完成进程间通信与回调。</h3><pre><code>项目组成：AIDL_SERVICE_LIB[库项目]、AIDL_CLIENT。\n</code></pre>","more":"<h3 id=\"那么主要的需要实现的功能通过几个AIDL文件就可以获知\"><a href=\"#那么主要的需要实现的功能通过几个AIDL文件就可以获知\" class=\"headerlink\" title=\"那么主要的需要实现的功能通过几个AIDL文件就可以获知:\"></a>那么主要的需要实现的功能通过几个AIDL文件就可以获知:</h3><h3 id=\"IAIDLService-aidl\"><a href=\"#IAIDLService-aidl\" class=\"headerlink\" title=\"IAIDLService.aidl:\"></a>IAIDLService.aidl:</h3><pre><code>package cn.dreamtobe.aidl.service;\nimport cn.dreamtobe.aidl.service.Book;\nimport cn.dreamtobe.aidl.service.IServiceCallback;\ninterface IAIDLService{\nint getCount();\nBook getBook();\nboolean startTestTask();\nvoid stopTestTask();\nvoid registerCallback(IServiceCallback paramIServiceCallback);\nvoid unregisterCallback(IServiceCallback paramIServiceCallback);\n}\n</code></pre><h3 id=\"IServiceCallback-aidl\"><a href=\"#IServiceCallback-aidl\" class=\"headerlink\" title=\"IServiceCallback.aidl:\"></a>IServiceCallback.aidl:</h3><pre><code>package cn.dreamtobe.aidl.service;\nimport cn.dreamtobe.aidl.service.Book;\ninterface IServiceCallback {\nvoid handlerCommEvent(int msgId, int param);\n  void callbackBookEvent(int cmd, in Book book);\n}\n</code></pre><h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\" \"></a> </h3><p> 最终目的是需要跨进程，AIDLService通过回调通知AIDLClient处理并传递有关值，并且AIDLClient可以通过AIDLService中定义好的AIDL有关方法，进行通知或取值。</p>\n<p><img src=\"https://github.com/Jacksgong/AIDL_COMMUNICATE-CALLBACK/raw/master/aidl_readme/raw/com_task.png\" alt=\"image\"><br><img src=\"https://github.com/Jacksgong/AIDL_COMMUNICATE-CALLBACK/raw/master/aidl_readme/raw/bind_succeed.png\" alt=\"image\"><br><img src=\"https://github.com/Jacksgong/AIDL_COMMUNICATE-CALLBACK/raw/master/aidl_readme/raw/unbind.png\" alt=\"image\"><br><img src=\"https://github.com/Jacksgong/AIDL_COMMUNICATE-CALLBACK/raw/master/aidl_readme/raw/unbind_request.png\" alt=\"image\"></p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"Android Touch Gallery","date":"2014-12-14T00:35:03.000Z","_content":"\n`Android touch gallery with net、local file or cache.`\n\n## 1. 申明\n\t本项目library_gallery基于Truba的AndroidTouchGallery，往上封装一层，实现简单快速实现Viewpager上协调图片的缩放以及数据来源的自动选择.\n\n## 2. 拓展部分\n\n实现相关接口，底层即可完成自动选择从网路加载、从本地文件加载或者从Cache加载\n\n<!--more-->\n\n下面是简单的案例：\n\n\tpublic class GalleryPagerAdapter extends BaseGalleryPagerAdapter {\n\n\tpublic GalleryPagerAdapter() {\n\t\tsuper();\n\t}\n\n\tpublic GalleryPagerAdapter(Context context, List<String> resources) {\n\t\tsuper(context, resources);\n\t\tsetLruSoftCache(CacheImage.CACHE_IV);\n\t}\n\n\t@Override\n\tpublic void save(String url, Bitmap bm) {\n\t\tsaveBitmap(url, bm);\n\t}\n\n\t@Override\n\tpublic String getKey(String url) {\n\t\treturn url;\n\t}\n\n\t@Override\n\tpublic String getPath(String url) {\n\t\treturn Path.IV + AppUtil.md5(url);\n\t}\n\t}\n\n\n\tpublic class DemoHorizontalGalleryActivity extends Activity {\n\n\tprivate GalleryViewPager mViewPager;\n\n\tprivate GalleryPagerAdapter mAdapter;\n\n\tfinal List<String> urls = new ArrayList<String>();\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\tsetContentView(R.layout.activity_viewpager_gallery);\n\n\t\tinitDemoData();\n\n\t\tmViewPager = (GalleryViewPager) findViewById(R.id.viewpager);\n\t\tmAdapter = new GalleryPagerAdapter(this, urls);\n\n\t\tmViewPager.setAdapter(mAdapter);\n\t}\n\t}\n\n详情可参看GallerySample\n\n## 3. 运行效果\n![image](https://github.com/Jacksgong/Android-Touch-Gallery/raw/master/readme/demo1.jpg)\n![image](https://github.com/Jacksgong/Android-Touch-Gallery/raw/master/readme/demo2.jpg)\n![image](https://github.com/Jacksgong/Android-Touch-Gallery/raw/master/readme/demo3.jpg)\n![image](https://github.com/Jacksgong/Android-Touch-Gallery/raw/master/readme/demo4.jpg)\n![image](https://github.com/Jacksgong/Android-Touch-Gallery/raw/master/readme/demo5.jpg)\nLicense\n\n## 4. 源码\n\nGITHUB: https://github.com/Jacksgong/Android-Touch-Gallery\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/Android-Touch-Gallery.md","raw":"title: Android Touch Gallery\ndate: 2014-12-14 08:35:03\npermalink: 2014/12/14/Android-Touch-Gallery\ntags:\n- imageview\n- viewpager\n- Android\n- 缩放\n\n---\n\n`Android touch gallery with net、local file or cache.`\n\n## 1. 申明\n\t本项目library_gallery基于Truba的AndroidTouchGallery，往上封装一层，实现简单快速实现Viewpager上协调图片的缩放以及数据来源的自动选择.\n\n## 2. 拓展部分\n\n实现相关接口，底层即可完成自动选择从网路加载、从本地文件加载或者从Cache加载\n\n<!--more-->\n\n下面是简单的案例：\n\n\tpublic class GalleryPagerAdapter extends BaseGalleryPagerAdapter {\n\n\tpublic GalleryPagerAdapter() {\n\t\tsuper();\n\t}\n\n\tpublic GalleryPagerAdapter(Context context, List<String> resources) {\n\t\tsuper(context, resources);\n\t\tsetLruSoftCache(CacheImage.CACHE_IV);\n\t}\n\n\t@Override\n\tpublic void save(String url, Bitmap bm) {\n\t\tsaveBitmap(url, bm);\n\t}\n\n\t@Override\n\tpublic String getKey(String url) {\n\t\treturn url;\n\t}\n\n\t@Override\n\tpublic String getPath(String url) {\n\t\treturn Path.IV + AppUtil.md5(url);\n\t}\n\t}\n\n\n\tpublic class DemoHorizontalGalleryActivity extends Activity {\n\n\tprivate GalleryViewPager mViewPager;\n\n\tprivate GalleryPagerAdapter mAdapter;\n\n\tfinal List<String> urls = new ArrayList<String>();\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\tsetContentView(R.layout.activity_viewpager_gallery);\n\n\t\tinitDemoData();\n\n\t\tmViewPager = (GalleryViewPager) findViewById(R.id.viewpager);\n\t\tmAdapter = new GalleryPagerAdapter(this, urls);\n\n\t\tmViewPager.setAdapter(mAdapter);\n\t}\n\t}\n\n详情可参看GallerySample\n\n## 3. 运行效果\n![image](https://github.com/Jacksgong/Android-Touch-Gallery/raw/master/readme/demo1.jpg)\n![image](https://github.com/Jacksgong/Android-Touch-Gallery/raw/master/readme/demo2.jpg)\n![image](https://github.com/Jacksgong/Android-Touch-Gallery/raw/master/readme/demo3.jpg)\n![image](https://github.com/Jacksgong/Android-Touch-Gallery/raw/master/readme/demo4.jpg)\n![image](https://github.com/Jacksgong/Android-Touch-Gallery/raw/master/readme/demo5.jpg)\nLicense\n\n## 4. 源码\n\nGITHUB: https://github.com/Jacksgong/Android-Touch-Gallery\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2014/12/14/Android-Touch-Gallery","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66hh000595bucqkgkn3g","content":"<p><code>Android touch gallery with net、local file or cache.</code></p>\n<h2 id=\"1-申明\"><a href=\"#1-申明\" class=\"headerlink\" title=\"1. 申明\"></a>1. 申明</h2><pre><code>本项目library_gallery基于Truba的AndroidTouchGallery，往上封装一层，实现简单快速实现Viewpager上协调图片的缩放以及数据来源的自动选择.\n</code></pre><h2 id=\"2-拓展部分\"><a href=\"#2-拓展部分\" class=\"headerlink\" title=\"2. 拓展部分\"></a>2. 拓展部分</h2><p>实现相关接口，底层即可完成自动选择从网路加载、从本地文件加载或者从Cache加载</p>\n<a id=\"more\"></a>\n<p>下面是简单的案例：</p>\n<pre><code>public class GalleryPagerAdapter extends BaseGalleryPagerAdapter {\n\npublic GalleryPagerAdapter() {\n    super();\n}\n\npublic GalleryPagerAdapter(Context context, List&lt;String&gt; resources) {\n    super(context, resources);\n    setLruSoftCache(CacheImage.CACHE_IV);\n}\n\n@Override\npublic void save(String url, Bitmap bm) {\n    saveBitmap(url, bm);\n}\n\n@Override\npublic String getKey(String url) {\n    return url;\n}\n\n@Override\npublic String getPath(String url) {\n    return Path.IV + AppUtil.md5(url);\n}\n}\n\n\npublic class DemoHorizontalGalleryActivity extends Activity {\n\nprivate GalleryViewPager mViewPager;\n\nprivate GalleryPagerAdapter mAdapter;\n\nfinal List&lt;String&gt; urls = new ArrayList&lt;String&gt;();\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_viewpager_gallery);\n\n    initDemoData();\n\n    mViewPager = (GalleryViewPager) findViewById(R.id.viewpager);\n    mAdapter = new GalleryPagerAdapter(this, urls);\n\n    mViewPager.setAdapter(mAdapter);\n}\n}\n</code></pre><p>详情可参看GallerySample</p>\n<h2 id=\"3-运行效果\"><a href=\"#3-运行效果\" class=\"headerlink\" title=\"3. 运行效果\"></a>3. 运行效果</h2><p><img src=\"https://github.com/Jacksgong/Android-Touch-Gallery/raw/master/readme/demo1.jpg\" alt=\"image\"><br><img src=\"https://github.com/Jacksgong/Android-Touch-Gallery/raw/master/readme/demo2.jpg\" alt=\"image\"><br><img src=\"https://github.com/Jacksgong/Android-Touch-Gallery/raw/master/readme/demo3.jpg\" alt=\"image\"><br><img src=\"https://github.com/Jacksgong/Android-Touch-Gallery/raw/master/readme/demo4.jpg\" alt=\"image\"><br><img src=\"https://github.com/Jacksgong/Android-Touch-Gallery/raw/master/readme/demo5.jpg\" alt=\"image\"><br>License</p>\n<h2 id=\"4-源码\"><a href=\"#4-源码\" class=\"headerlink\" title=\"4. 源码\"></a>4. 源码</h2><p>GITHUB: <a href=\"https://github.com/Jacksgong/Android-Touch-Gallery\" target=\"_blank\" rel=\"external\">https://github.com/Jacksgong/Android-Touch-Gallery</a></p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<p><code>Android touch gallery with net、local file or cache.</code></p>\n<h2 id=\"1-申明\"><a href=\"#1-申明\" class=\"headerlink\" title=\"1. 申明\"></a>1. 申明</h2><pre><code>本项目library_gallery基于Truba的AndroidTouchGallery，往上封装一层，实现简单快速实现Viewpager上协调图片的缩放以及数据来源的自动选择.\n</code></pre><h2 id=\"2-拓展部分\"><a href=\"#2-拓展部分\" class=\"headerlink\" title=\"2. 拓展部分\"></a>2. 拓展部分</h2><p>实现相关接口，底层即可完成自动选择从网路加载、从本地文件加载或者从Cache加载</p>","more":"<p>下面是简单的案例：</p>\n<pre><code>public class GalleryPagerAdapter extends BaseGalleryPagerAdapter {\n\npublic GalleryPagerAdapter() {\n    super();\n}\n\npublic GalleryPagerAdapter(Context context, List&lt;String&gt; resources) {\n    super(context, resources);\n    setLruSoftCache(CacheImage.CACHE_IV);\n}\n\n@Override\npublic void save(String url, Bitmap bm) {\n    saveBitmap(url, bm);\n}\n\n@Override\npublic String getKey(String url) {\n    return url;\n}\n\n@Override\npublic String getPath(String url) {\n    return Path.IV + AppUtil.md5(url);\n}\n}\n\n\npublic class DemoHorizontalGalleryActivity extends Activity {\n\nprivate GalleryViewPager mViewPager;\n\nprivate GalleryPagerAdapter mAdapter;\n\nfinal List&lt;String&gt; urls = new ArrayList&lt;String&gt;();\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_viewpager_gallery);\n\n    initDemoData();\n\n    mViewPager = (GalleryViewPager) findViewById(R.id.viewpager);\n    mAdapter = new GalleryPagerAdapter(this, urls);\n\n    mViewPager.setAdapter(mAdapter);\n}\n}\n</code></pre><p>详情可参看GallerySample</p>\n<h2 id=\"3-运行效果\"><a href=\"#3-运行效果\" class=\"headerlink\" title=\"3. 运行效果\"></a>3. 运行效果</h2><p><img src=\"https://github.com/Jacksgong/Android-Touch-Gallery/raw/master/readme/demo1.jpg\" alt=\"image\"><br><img src=\"https://github.com/Jacksgong/Android-Touch-Gallery/raw/master/readme/demo2.jpg\" alt=\"image\"><br><img src=\"https://github.com/Jacksgong/Android-Touch-Gallery/raw/master/readme/demo3.jpg\" alt=\"image\"><br><img src=\"https://github.com/Jacksgong/Android-Touch-Gallery/raw/master/readme/demo4.jpg\" alt=\"image\"><br><img src=\"https://github.com/Jacksgong/Android-Touch-Gallery/raw/master/readme/demo5.jpg\" alt=\"image\"><br>License</p>\n<h2 id=\"4-源码\"><a href=\"#4-源码\" class=\"headerlink\" title=\"4. 源码\"></a>4. 源码</h2><p>GITHUB: <a href=\"https://github.com/Jacksgong/Android-Touch-Gallery\">https://github.com/Jacksgong/Android-Touch-Gallery</a></p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"Android 数据库架构 — JLibrary","date":"2014-09-06T00:35:03.000Z","_content":"\n> 刚开始维护GITHUB多多指教，本项目源码地址：https://github.com/Jacksgong/Android-Database-Construct\n\n始末\n-------\n\n由于做一些小项目的时候，在创建数据库、创建表、执行表操作等数据库相关代码编写的时候进行了优化，统一了架构，因此分享出来。\nps: 目前架构基于ContentProvier\n\n<!--more-->\n架构分布\n-------\n\n 1. BaseContentProvider  负责数据库的规范\n 2. BaseTableFields 规范数据表 字段(默认字段：`_id`, `createAt`, `modifiedAt`)\n 3. BaseTableHelper 负责数据表 规范(表名、主键、默认查询结果排序、表创建、表升级)\n 4. BaseTableOperator 提供常用数据表的操作以及操作规范(某人已带功能：插入、更新、删除、搜索、数量、是否存在）\n 5. CustomTableHelper 常用表规范(默认查询结果排列顺序、默认主键）\n\n通过Sample来介绍使用\n-------\n\n - 首先Sample中我们创建了一个SampleDB，通过集成BaseContentProvider来快速创建。\n - 其次我们创建了UserInfoTable，并且为其提供了基本的数据库操作\n\n\n####**1. 创建SampleDB数据库**(注意在AndroidManifest.xml中申明ContentProvider)\n\n```\npublic class SampleDB extends BaseContentProvider {\n\npublic final static String DATABASE_NAME = \"sample.db\";\n\npublic final static String AUTHORITY = \"sampledb\";\n\npublic final static int DATABASE_VERSION = 1;\n\npublic SampleDB() {\n\tsuper(AUTHORITY);\n}\n\n@Override\nprotected HashMap<String, BaseTableHelper> createAllTableHelper() {\n\tfinal HashMap<String, BaseTableHelper> hashMap = new HashMap<String, BaseTableHelper>();\n\n 需要提供各表的Helper\n\tfinal UserInfoHelper userInfoHelper = UserInfoHelper.getImpl();\n\thashMap.put(userInfoHelper.getTableName(), userInfoHelper);\n\n\treturn hashMap;\n}\n\n@Override\nprotected String getDatabaseName() {\n\treturn DATABASE_NAME;\n}\n\n@Override\nprotected int getDatabaseVersion() {\n\treturn DATABASE_VERSION;\n}\n\n}\n```\n\n####**2. UserInfo表字段**(name, sex, age)\n\n```\npublic class UserInfoFields extends BaseTableFields {\n\n\tpublic final static String NAME = \"name\";\n\tpublic final static String SEX = \"sex\";\n\tpublic final static String AGE = \"age\";\n\n\tpublic UserInfoFields() {\n\n\t}\n\n\tpublic UserInfoFields(final Cursor c) {\n\t\tsuper(c);\n\t}\n\n\tpublic void setName(final String name) {\n\t\tput(NAME, name);\n\t}\n\n\tpublic String getName() {\n\t\treturn (String) get(NAME);\n\t}\n\n\tpublic void setSex(final String sex) {\n\t\tput(SEX, sex);\n\t}\n\n\tpublic String getSex() {\n\t\treturn (String) get(SEX);\n\t}\n\n\tpublic void setAge(final String age) {\n\t\tput(AGE, age);\n\t}\n\n\tpublic String getAge() {\n\t\treturn (String) get(AGE);\n\t}\n\n\t@Override\n\tpublic void put(Cursor c) {\n\t\tif (c == null || c.isClosed() || c.isAfterLast()) {\n\t\t\treturn;\n\t\t}\n\n\t\tset_Id(c.getInt(c.getColumnIndexOrThrow(_ID)));\n\t\tsetName(c.getString(c.getColumnIndexOrThrow(NAME)));\n\t\tsetSex(c.getString(c.getColumnIndexOrThrow(SEX)));\n\t\tsetAge(c.getString(c.getColumnIndexOrThrow(AGE)));\n\t}\n\n}\n```\n\n####**3. UserInfo表规范**\n\n```\npublic class UserInfoHelper extends CustomTableHelper {\n\n\tpublic final static String TABLE_NAME = \"user_info\";\n\n\tprivate final static class ClassHolder {\n\t\tprivate final static UserInfoHelper INSTANCE = new UserInfoHelper();\n\t}\n\n\tpublic static UserInfoHelper getImpl() {\n\t\treturn ClassHolder.INSTANCE;\n\t}\n\n\t@Override\n\tpublic String getTableName() {\n\t\treturn TABLE_NAME;\n\t}\n\n\t@Override\n\tpublic void onDataBaseCreate(SQLiteDatabase db) {\n\t\tfinal String create = getCustomCreatePre() + UserInfoFields.NAME + \" TEXT,\" + UserInfoFields.SEX + \" TEXT,\" + UserInfoFields.AGE + \" TEXT);\";\n\t\tdb.execSQL(create);\n\t}\n\n}\n```\n\n####**4. UserInfo表操作**(实现下面，就已经带有了这些功能：插入、更新、删除、搜索、数量、是否存在)\n\n```\npublic class UserInfoOperator extends BaseTableOperator<UserInfoFields, UserInfoHelper> {\n\n\tprivate final static class ClassHolder {\n\t\tprivate final static UserInfoOperator INSTANCE = new UserInfoOperator(SampleApplication.getContext(), UserInfoHelper.getImpl());\n\t}\n\n\tpublic static UserInfoOperator getImpl() {\n\t\treturn ClassHolder.INSTANCE;\n\t}\n\n\tpublic UserInfoOperator(Context context, UserInfoHelper helper) {\n\t\tsuper(context, helper);\n\t}\n\n\t@Override\n\tpublic Uri getUri() {\n\t\treturn getTableHelper().getContentUri(SampleDB.AUTHORITY);\n\t}\n\n\t@Override\n\tprotected List<UserInfoFields> createColumns(Cursor c) {\n\t\tif (c == null || c.isClosed() || c.isAfterLast()) {\n\t\t\treturn null;\n\t\t}\n\n\t\tList<UserInfoFields> list = new ArrayList<UserInfoFields>();\n\t\tfor (c.moveToFirst(); !c.isAfterLast(); c.moveToNext()) {\n\t\t\tlist.add(new UserInfoFields(c));\n\t\t}\n\n\t\treturn list;\n\t}\n\n}\n```\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/Android-数据库架构-—-JLibrary.md","raw":"title: Android 数据库架构 — JLibrary\ndate: 2014-09-06 08:35:03\npermalink: 2014/09/06/Android-数据库架构-—-JLibrary\ntags:\n- 数据库\n- 架构\n- Android\n- JLibrary\n- 项目\n\n---\n\n> 刚开始维护GITHUB多多指教，本项目源码地址：https://github.com/Jacksgong/Android-Database-Construct\n\n始末\n-------\n\n由于做一些小项目的时候，在创建数据库、创建表、执行表操作等数据库相关代码编写的时候进行了优化，统一了架构，因此分享出来。\nps: 目前架构基于ContentProvier\n\n<!--more-->\n架构分布\n-------\n\n 1. BaseContentProvider  负责数据库的规范\n 2. BaseTableFields 规范数据表 字段(默认字段：`_id`, `createAt`, `modifiedAt`)\n 3. BaseTableHelper 负责数据表 规范(表名、主键、默认查询结果排序、表创建、表升级)\n 4. BaseTableOperator 提供常用数据表的操作以及操作规范(某人已带功能：插入、更新、删除、搜索、数量、是否存在）\n 5. CustomTableHelper 常用表规范(默认查询结果排列顺序、默认主键）\n\n通过Sample来介绍使用\n-------\n\n - 首先Sample中我们创建了一个SampleDB，通过集成BaseContentProvider来快速创建。\n - 其次我们创建了UserInfoTable，并且为其提供了基本的数据库操作\n\n\n####**1. 创建SampleDB数据库**(注意在AndroidManifest.xml中申明ContentProvider)\n\n```\npublic class SampleDB extends BaseContentProvider {\n\npublic final static String DATABASE_NAME = \"sample.db\";\n\npublic final static String AUTHORITY = \"sampledb\";\n\npublic final static int DATABASE_VERSION = 1;\n\npublic SampleDB() {\n\tsuper(AUTHORITY);\n}\n\n@Override\nprotected HashMap<String, BaseTableHelper> createAllTableHelper() {\n\tfinal HashMap<String, BaseTableHelper> hashMap = new HashMap<String, BaseTableHelper>();\n\n 需要提供各表的Helper\n\tfinal UserInfoHelper userInfoHelper = UserInfoHelper.getImpl();\n\thashMap.put(userInfoHelper.getTableName(), userInfoHelper);\n\n\treturn hashMap;\n}\n\n@Override\nprotected String getDatabaseName() {\n\treturn DATABASE_NAME;\n}\n\n@Override\nprotected int getDatabaseVersion() {\n\treturn DATABASE_VERSION;\n}\n\n}\n```\n\n####**2. UserInfo表字段**(name, sex, age)\n\n```\npublic class UserInfoFields extends BaseTableFields {\n\n\tpublic final static String NAME = \"name\";\n\tpublic final static String SEX = \"sex\";\n\tpublic final static String AGE = \"age\";\n\n\tpublic UserInfoFields() {\n\n\t}\n\n\tpublic UserInfoFields(final Cursor c) {\n\t\tsuper(c);\n\t}\n\n\tpublic void setName(final String name) {\n\t\tput(NAME, name);\n\t}\n\n\tpublic String getName() {\n\t\treturn (String) get(NAME);\n\t}\n\n\tpublic void setSex(final String sex) {\n\t\tput(SEX, sex);\n\t}\n\n\tpublic String getSex() {\n\t\treturn (String) get(SEX);\n\t}\n\n\tpublic void setAge(final String age) {\n\t\tput(AGE, age);\n\t}\n\n\tpublic String getAge() {\n\t\treturn (String) get(AGE);\n\t}\n\n\t@Override\n\tpublic void put(Cursor c) {\n\t\tif (c == null || c.isClosed() || c.isAfterLast()) {\n\t\t\treturn;\n\t\t}\n\n\t\tset_Id(c.getInt(c.getColumnIndexOrThrow(_ID)));\n\t\tsetName(c.getString(c.getColumnIndexOrThrow(NAME)));\n\t\tsetSex(c.getString(c.getColumnIndexOrThrow(SEX)));\n\t\tsetAge(c.getString(c.getColumnIndexOrThrow(AGE)));\n\t}\n\n}\n```\n\n####**3. UserInfo表规范**\n\n```\npublic class UserInfoHelper extends CustomTableHelper {\n\n\tpublic final static String TABLE_NAME = \"user_info\";\n\n\tprivate final static class ClassHolder {\n\t\tprivate final static UserInfoHelper INSTANCE = new UserInfoHelper();\n\t}\n\n\tpublic static UserInfoHelper getImpl() {\n\t\treturn ClassHolder.INSTANCE;\n\t}\n\n\t@Override\n\tpublic String getTableName() {\n\t\treturn TABLE_NAME;\n\t}\n\n\t@Override\n\tpublic void onDataBaseCreate(SQLiteDatabase db) {\n\t\tfinal String create = getCustomCreatePre() + UserInfoFields.NAME + \" TEXT,\" + UserInfoFields.SEX + \" TEXT,\" + UserInfoFields.AGE + \" TEXT);\";\n\t\tdb.execSQL(create);\n\t}\n\n}\n```\n\n####**4. UserInfo表操作**(实现下面，就已经带有了这些功能：插入、更新、删除、搜索、数量、是否存在)\n\n```\npublic class UserInfoOperator extends BaseTableOperator<UserInfoFields, UserInfoHelper> {\n\n\tprivate final static class ClassHolder {\n\t\tprivate final static UserInfoOperator INSTANCE = new UserInfoOperator(SampleApplication.getContext(), UserInfoHelper.getImpl());\n\t}\n\n\tpublic static UserInfoOperator getImpl() {\n\t\treturn ClassHolder.INSTANCE;\n\t}\n\n\tpublic UserInfoOperator(Context context, UserInfoHelper helper) {\n\t\tsuper(context, helper);\n\t}\n\n\t@Override\n\tpublic Uri getUri() {\n\t\treturn getTableHelper().getContentUri(SampleDB.AUTHORITY);\n\t}\n\n\t@Override\n\tprotected List<UserInfoFields> createColumns(Cursor c) {\n\t\tif (c == null || c.isClosed() || c.isAfterLast()) {\n\t\t\treturn null;\n\t\t}\n\n\t\tList<UserInfoFields> list = new ArrayList<UserInfoFields>();\n\t\tfor (c.moveToFirst(); !c.isAfterLast(); c.moveToNext()) {\n\t\t\tlist.add(new UserInfoFields(c));\n\t\t}\n\n\t\treturn list;\n\t}\n\n}\n```\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2014/09/06/Android-数据库架构-—-JLibrary","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66hi000795buc8b7fhck","content":"<blockquote>\n<p>刚开始维护GITHUB多多指教，本项目源码地址：<a href=\"https://github.com/Jacksgong/Android-Database-Construct\" target=\"_blank\" rel=\"external\">https://github.com/Jacksgong/Android-Database-Construct</a></p>\n</blockquote>\n<h2 id=\"始末\"><a href=\"#始末\" class=\"headerlink\" title=\"始末\"></a>始末</h2><p>由于做一些小项目的时候，在创建数据库、创建表、执行表操作等数据库相关代码编写的时候进行了优化，统一了架构，因此分享出来。<br>ps: 目前架构基于ContentProvier</p>\n<a id=\"more\"></a>\n<h2 id=\"架构分布\"><a href=\"#架构分布\" class=\"headerlink\" title=\"架构分布\"></a>架构分布</h2><ol>\n<li>BaseContentProvider  负责数据库的规范</li>\n<li>BaseTableFields 规范数据表 字段(默认字段：<code>_id</code>, <code>createAt</code>, <code>modifiedAt</code>)</li>\n<li>BaseTableHelper 负责数据表 规范(表名、主键、默认查询结果排序、表创建、表升级)</li>\n<li>BaseTableOperator 提供常用数据表的操作以及操作规范(某人已带功能：插入、更新、删除、搜索、数量、是否存在）</li>\n<li>CustomTableHelper 常用表规范(默认查询结果排列顺序、默认主键）</li>\n</ol>\n<h2 id=\"通过Sample来介绍使用\"><a href=\"#通过Sample来介绍使用\" class=\"headerlink\" title=\"通过Sample来介绍使用\"></a>通过Sample来介绍使用</h2><ul>\n<li>首先Sample中我们创建了一个SampleDB，通过集成BaseContentProvider来快速创建。</li>\n<li>其次我们创建了UserInfoTable，并且为其提供了基本的数据库操作</li>\n</ul>\n<p>####<strong>1. 创建SampleDB数据库</strong>(注意在AndroidManifest.xml中申明ContentProvider)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SampleDB</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseContentProvider</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String DATABASE_NAME = <span class=\"string\">\"sample.db\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String AUTHORITY = <span class=\"string\">\"sampledb\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> DATABASE_VERSION = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SampleDB</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">super</span>(AUTHORITY);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> HashMap&lt;String, BaseTableHelper&gt; <span class=\"title\">createAllTableHelper</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">final</span> HashMap&lt;String, BaseTableHelper&gt; hashMap = <span class=\"keyword\">new</span> HashMap&lt;String, BaseTableHelper&gt;();</div><div class=\"line\"></div><div class=\"line\"> 需要提供各表的Helper</div><div class=\"line\">\t<span class=\"keyword\">final</span> UserInfoHelper userInfoHelper = UserInfoHelper.getImpl();</div><div class=\"line\">\thashMap.put(userInfoHelper.getTableName(), userInfoHelper);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> hashMap;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">getDatabaseName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> DATABASE_NAME;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">getDatabaseVersion</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> DATABASE_VERSION;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>####<strong>2. UserInfo表字段</strong>(name, sex, age)</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> class UserInfoFields extends BaseTableFields &#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">String</span> NAME = <span class=\"string\">\"name\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">String</span> SEX = <span class=\"string\">\"sex\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">String</span> AGE = <span class=\"string\">\"age\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> UserInfoFields() &#123;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> UserInfoFields(<span class=\"keyword\">final</span> Cursor c) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>(c);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> setName(<span class=\"keyword\">final</span> <span class=\"keyword\">String</span> name) &#123;</div><div class=\"line\">\t\tput(NAME, name);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">String</span> getName() &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> (<span class=\"keyword\">String</span>) <span class=\"built_in\">get</span>(NAME);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> setSex(<span class=\"keyword\">final</span> <span class=\"keyword\">String</span> sex) &#123;</div><div class=\"line\">\t\tput(SEX, sex);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">String</span> getSex() &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> (<span class=\"keyword\">String</span>) <span class=\"built_in\">get</span>(SEX);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> setAge(<span class=\"keyword\">final</span> <span class=\"keyword\">String</span> age) &#123;</div><div class=\"line\">\t\tput(AGE, age);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">String</span> getAge() &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> (<span class=\"keyword\">String</span>) <span class=\"built_in\">get</span>(AGE);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> put(Cursor c) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (c == <span class=\"keyword\">null</span> || c.isClosed() || c.isAfterLast()) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tset_Id(c.getInt(c.getColumnIndexOrThrow(_ID)));</div><div class=\"line\">\t\tsetName(c.getString(c.getColumnIndexOrThrow(NAME)));</div><div class=\"line\">\t\tsetSex(c.getString(c.getColumnIndexOrThrow(SEX)));</div><div class=\"line\">\t\tsetAge(c.getString(c.getColumnIndexOrThrow(AGE)));</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>####<strong>3. UserInfo表规范</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserInfoHelper</span> <span class=\"keyword\">extends</span> <span class=\"title\">CustomTableHelper</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String TABLE_NAME = <span class=\"string\">\"user_info\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassHolder</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> UserInfoHelper INSTANCE = <span class=\"keyword\">new</span> UserInfoHelper();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> UserInfoHelper <span class=\"title\">getImpl</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> ClassHolder.INSTANCE;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getTableName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> TABLE_NAME;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDataBaseCreate</span><span class=\"params\">(SQLiteDatabase db)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">final</span> String create = getCustomCreatePre() + UserInfoFields.NAME + <span class=\"string\">\" TEXT,\"</span> + UserInfoFields.SEX + <span class=\"string\">\" TEXT,\"</span> + UserInfoFields.AGE + <span class=\"string\">\" TEXT);\"</span>;</div><div class=\"line\">\t\tdb.execSQL(create);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>####<strong>4. UserInfo表操作</strong>(实现下面，就已经带有了这些功能：插入、更新、删除、搜索、数量、是否存在)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserInfoOperator</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseTableOperator</span>&lt;<span class=\"title\">UserInfoFields</span>, <span class=\"title\">UserInfoHelper</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassHolder</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> UserInfoOperator INSTANCE = <span class=\"keyword\">new</span> UserInfoOperator(SampleApplication.getContext(), UserInfoHelper.getImpl());</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> UserInfoOperator <span class=\"title\">getImpl</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> ClassHolder.INSTANCE;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserInfoOperator</span><span class=\"params\">(Context context, UserInfoHelper helper)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>(context, helper);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Uri <span class=\"title\">getUri</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> getTableHelper().getContentUri(SampleDB.AUTHORITY);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> List&lt;UserInfoFields&gt; <span class=\"title\">createColumns</span><span class=\"params\">(Cursor c)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (c == <span class=\"keyword\">null</span> || c.isClosed() || c.isAfterLast()) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tList&lt;UserInfoFields&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;UserInfoFields&gt;();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (c.moveToFirst(); !c.isAfterLast(); c.moveToNext()) &#123;</div><div class=\"line\">\t\t\tlist.add(<span class=\"keyword\">new</span> UserInfoFields(c));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> list;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>刚开始维护GITHUB多多指教，本项目源码地址：<a href=\"https://github.com/Jacksgong/Android-Database-Construct\">https://github.com/Jacksgong/Android-Database-Construct</a></p>\n</blockquote>\n<h2 id=\"始末\"><a href=\"#始末\" class=\"headerlink\" title=\"始末\"></a>始末</h2><p>由于做一些小项目的时候，在创建数据库、创建表、执行表操作等数据库相关代码编写的时候进行了优化，统一了架构，因此分享出来。<br>ps: 目前架构基于ContentProvier</p>","more":"<h2 id=\"架构分布\"><a href=\"#架构分布\" class=\"headerlink\" title=\"架构分布\"></a>架构分布</h2><ol>\n<li>BaseContentProvider  负责数据库的规范</li>\n<li>BaseTableFields 规范数据表 字段(默认字段：<code>_id</code>, <code>createAt</code>, <code>modifiedAt</code>)</li>\n<li>BaseTableHelper 负责数据表 规范(表名、主键、默认查询结果排序、表创建、表升级)</li>\n<li>BaseTableOperator 提供常用数据表的操作以及操作规范(某人已带功能：插入、更新、删除、搜索、数量、是否存在）</li>\n<li>CustomTableHelper 常用表规范(默认查询结果排列顺序、默认主键）</li>\n</ol>\n<h2 id=\"通过Sample来介绍使用\"><a href=\"#通过Sample来介绍使用\" class=\"headerlink\" title=\"通过Sample来介绍使用\"></a>通过Sample来介绍使用</h2><ul>\n<li>首先Sample中我们创建了一个SampleDB，通过集成BaseContentProvider来快速创建。</li>\n<li>其次我们创建了UserInfoTable，并且为其提供了基本的数据库操作</li>\n</ul>\n<p>####<strong>1. 创建SampleDB数据库</strong>(注意在AndroidManifest.xml中申明ContentProvider)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SampleDB</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseContentProvider</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String DATABASE_NAME = <span class=\"string\">\"sample.db\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String AUTHORITY = <span class=\"string\">\"sampledb\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> DATABASE_VERSION = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SampleDB</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">super</span>(AUTHORITY);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> HashMap&lt;String, BaseTableHelper&gt; <span class=\"title\">createAllTableHelper</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">final</span> HashMap&lt;String, BaseTableHelper&gt; hashMap = <span class=\"keyword\">new</span> HashMap&lt;String, BaseTableHelper&gt;();</div><div class=\"line\"></div><div class=\"line\"> 需要提供各表的Helper</div><div class=\"line\">\t<span class=\"keyword\">final</span> UserInfoHelper userInfoHelper = UserInfoHelper.getImpl();</div><div class=\"line\">\thashMap.put(userInfoHelper.getTableName(), userInfoHelper);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> hashMap;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">getDatabaseName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> DATABASE_NAME;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">getDatabaseVersion</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> DATABASE_VERSION;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>####<strong>2. UserInfo表字段</strong>(name, sex, age)</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> class UserInfoFields extends BaseTableFields &#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">String</span> NAME = <span class=\"string\">\"name\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">String</span> SEX = <span class=\"string\">\"sex\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">String</span> AGE = <span class=\"string\">\"age\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> UserInfoFields() &#123;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> UserInfoFields(<span class=\"keyword\">final</span> Cursor c) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>(c);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> setName(<span class=\"keyword\">final</span> <span class=\"keyword\">String</span> name) &#123;</div><div class=\"line\">\t\tput(NAME, name);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">String</span> getName() &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> (<span class=\"keyword\">String</span>) <span class=\"built_in\">get</span>(NAME);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> setSex(<span class=\"keyword\">final</span> <span class=\"keyword\">String</span> sex) &#123;</div><div class=\"line\">\t\tput(SEX, sex);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">String</span> getSex() &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> (<span class=\"keyword\">String</span>) <span class=\"built_in\">get</span>(SEX);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> setAge(<span class=\"keyword\">final</span> <span class=\"keyword\">String</span> age) &#123;</div><div class=\"line\">\t\tput(AGE, age);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">String</span> getAge() &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> (<span class=\"keyword\">String</span>) <span class=\"built_in\">get</span>(AGE);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> put(Cursor c) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (c == <span class=\"keyword\">null</span> || c.isClosed() || c.isAfterLast()) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tset_Id(c.getInt(c.getColumnIndexOrThrow(_ID)));</div><div class=\"line\">\t\tsetName(c.getString(c.getColumnIndexOrThrow(NAME)));</div><div class=\"line\">\t\tsetSex(c.getString(c.getColumnIndexOrThrow(SEX)));</div><div class=\"line\">\t\tsetAge(c.getString(c.getColumnIndexOrThrow(AGE)));</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>####<strong>3. UserInfo表规范</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserInfoHelper</span> <span class=\"keyword\">extends</span> <span class=\"title\">CustomTableHelper</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String TABLE_NAME = <span class=\"string\">\"user_info\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassHolder</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> UserInfoHelper INSTANCE = <span class=\"keyword\">new</span> UserInfoHelper();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> UserInfoHelper <span class=\"title\">getImpl</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> ClassHolder.INSTANCE;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getTableName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> TABLE_NAME;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDataBaseCreate</span><span class=\"params\">(SQLiteDatabase db)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">final</span> String create = getCustomCreatePre() + UserInfoFields.NAME + <span class=\"string\">\" TEXT,\"</span> + UserInfoFields.SEX + <span class=\"string\">\" TEXT,\"</span> + UserInfoFields.AGE + <span class=\"string\">\" TEXT);\"</span>;</div><div class=\"line\">\t\tdb.execSQL(create);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>####<strong>4. UserInfo表操作</strong>(实现下面，就已经带有了这些功能：插入、更新、删除、搜索、数量、是否存在)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserInfoOperator</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseTableOperator</span>&lt;<span class=\"title\">UserInfoFields</span>, <span class=\"title\">UserInfoHelper</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassHolder</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> UserInfoOperator INSTANCE = <span class=\"keyword\">new</span> UserInfoOperator(SampleApplication.getContext(), UserInfoHelper.getImpl());</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> UserInfoOperator <span class=\"title\">getImpl</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> ClassHolder.INSTANCE;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserInfoOperator</span><span class=\"params\">(Context context, UserInfoHelper helper)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>(context, helper);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Uri <span class=\"title\">getUri</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> getTableHelper().getContentUri(SampleDB.AUTHORITY);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> List&lt;UserInfoFields&gt; <span class=\"title\">createColumns</span><span class=\"params\">(Cursor c)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (c == <span class=\"keyword\">null</span> || c.isClosed() || c.isAfterLast()) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tList&lt;UserInfoFields&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;UserInfoFields&gt;();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (c.moveToFirst(); !c.isAfterLast(); c.moveToNext()) &#123;</div><div class=\"line\">\t\t\tlist.add(<span class=\"keyword\">new</span> UserInfoFields(c));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> list;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"Android Messenger 进程通信","date":"2013-12-14T00:35:03.000Z","_content":"\n今天通过以前写的简单的代码，分享通过Messenger 完成跨进成通信的使用，大神等请绕行。\n\n> 接的外包越来越复杂，使我不得不急需从以前凌乱的成型的、未成型的项目中整理出一些主要的框架 – 2013. 中旬。\n\n<!--more-->\n也是由于一般来说Messenger相比AIDL是把所有的请求都放到一个请求队列，逐一处理，无法支持同时处理并且Messenger仅仅只是通过传递message进行通讯，所以所有的操作只能在对方的Handle中处理，对于架构来说也不是很好，所以最近再次整理的时候需要将这些替换为AIDL通信，但是Messenger通信比较简单，还是很值得mark的，因此，先上当初写的拙码：\n\n———— 服务端： SocketServer:\n\n```\npackage cn.dreamtobe.service;\nimport android.app.Service;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.os.IBinder;\nimport android.os.Message;\nimport android.os.Messenger;\nimport cn.dreamtobe.net.SocketHandle;\nimport cn.dreamtobe.net.SocketHandle.SocketHandleCallBack;\nimport cn.dreamtobe.order.CmdOrder;\nimport cn.dreamtobe.utils.LogUtils;\nimport cn.dreamtobe.utils.Util;\n/**\n *\n * @author 振杰\n *\n */\npublic class SocketService extends Service implements Runnable {\n private ServiceHandle mHandle = new ServiceHandle();\n private SocketHandle mSocketHandle = null;\n private volatile boolean mbStop = false;\n private final String mHostIp = Util.getSocketHostIP();\n private final int mPort = Util.getSocketPort();\n // 客服端Messenger\n private Messenger mcMessenger = null;\n // 服务端Messenger\n private Messenger msMessenger = new Messenger(mHandle);\n private LogUtils mLogUtils = LogUtils.getInstance();\n private class ServiceHandle extends Handler {\n  @Override\n  public void handleMessage(Message msg) {\n   super.handleMessage(msg);\n   switch (msg.what) {\n   case CmdOrder.CMD_SERVICE_STOP:\n    mbStop = true;\n    stopSelf();\n    break;\n   case CmdOrder.CMD_MESSAGE_SEND:\n    mcMessenger = msg.replyTo;\n    Bundle bundle = msg.getData();\n    String sendMsg = bundle.getString(\"client\");\n    sendString(sendMsg);\n   default:\n    break;\n   }\n  }\n }\n private Message mSendMsg = null;\n // 答复客服端\n private void replyClient(int cmd, String replyMsg) {\n  if (mSendMsg == null) {\n   mSendMsg = new Message();\n  }\n  mSendMsg.what = cmd;\n  Bundle bundle = new Bundle();\n  bundle.putString(\"socketservice\", replyMsg);\n  mSendMsg.setData(bundle);\n  try {\n   mcMessenger.send(mSendMsg);\n  } catch (Exception e) {\n  }\n }\n // 发送String 给服务器\n private void sendString(String sendMsg) {\n  mLogUtils.NetSendLog(\"socket服务请求发送: \" + sendMsg);\n  mSocketHandle.SendString(sendMsg);\n }\n @Override\n public IBinder onBind(Intent intent) {\n  mLogUtils.SysLog(\"Socket Service onBind\");\n  return msMessenger.getBinder();\n }\n @Override\n public void onCreate() {\n  super.onCreate();\n  mSocketHandle = new SocketHandle(mHostIp, mPort, mCallBack);\n  mSocketHandle.start();\n  mLogUtils.SysLog(\"Socket Service onCreate\");\n }\n @Override\n public void onDestroy() {\n  super.onDestroy();\n  mSocketHandle.stop();\n  mLogUtils.SysLog(\"Socket Service onDestroy\");\n }\n @Override\n public void run() {\n  if (!mbStop) {\n  }\n }\n private SocketHandleCallBack mCallBack = new SocketHandleCallBack() {\n  @Override\n  public void SucceedSendString() {\n   // TODO Auto-generated method stub\n  }\n  @Override\n  public void SucceedReconnect() {\n   // TODO Auto-generated method stub\n  }\n  @Override\n  public void ReConnectFailOnSendString() {\n   // TODO Auto-generated method stub\n  }\n  @Override\n  public void FailReconnect() {\n   // TODO Auto-generated method stub\n  }\n  @Override\n  public void ErrorOnSendString() {\n   // TODO Auto-generated method stub\n  }\n  @Override\n  public void BeginReConnect() {\n   // TODO Auto-generated method stub\n  }\n  @Override\n  public void BackMessage(String msg) {\n   if (mcMessenger == null) {\n    return;\n   }\n   replyClient(CmdOrder.CMD_MESSAGE_RECEIVE, msg);\n  }\n };\n}\n```\n\n——————– BaseActivity:\n\n```\npackage cn.dreamtobe.activity;\nimport android.app.Activity;\nimport android.content.ComponentName;\nimport android.content.Intent;\nimport android.content.ServiceConnection;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.os.IBinder;\nimport android.os.Message;\nimport android.os.Messenger;\nimport android.os.RemoteException;\nimport cn.dreamtobe.order.CmdOrder;\nimport cn.dreamtobe.tool.GlobalTool;\nimport cn.dreamtobe.utils.LogUtils;\nimport cn.dreamtobe.utils.VariUtils;\n/**\n *\n * @author 振杰\n *\n */\npublic abstract class BaseActivity extends Activity {\n private static MyHandler mHandler = null;\n private static int mnBaseAct = 0;\n /**\n  * 客户端Messenger\n  */\n protected Messenger mcMessenger = null;\n /**\n  * 服务端Messenger\n  */\n protected Messenger msMessenger = null;\n private static BaseActivity mCurBaseActivity = null;\n private LogUtils mLogUtils = LogUtils.getInstance();\n private boolean mIsBind = false;\n @Override\n public void onCreate(Bundle savedInstanceState) {\n  super.onCreate(savedInstanceState);\n  mnBaseAct++;\n  preConfigure();\n  if (mHandler == null) {\n   mHandler = new MyHandler();\n  }\n  VariUtils.gCurActivity = this;\n  mCurBaseActivity = this;\n  configure();\n  initUtils();\n  initControl();\n  initUI();\n }\n protected void preConfigure() {\n }\n public void BindService() {\n  if (!mIsBind) {\n   mLogUtils\n     .SysLog(this.getClass().toString() + \" Bind SocketService\");\n   mIsBind = bindService(new Intent(VariUtils.SocketServiceAction),\n     mSerConn, BIND_AUTO_CREATE);\n  }\n }\n public void unBindService() {\n  if (mIsBind) {\n   mLogUtils.SysLog(this.getClass().toString()\n     + \" unBind SocketService\");\n   unbindService(mSerConn);\n   mIsBind = false;\n  }\n }\n @Override\n protected void onResume() {\n  super.onResume();\n  VariUtils.gCurActivity = this;\n  mCurBaseActivity = this;\n }\n @Override\n protected void onDestroy() {\n  super.onDestroy();\n  unBindService();\n  if (--mnBaseAct == 0) {\n  }\n }\n protected abstract void configure();\n protected abstract void initUtils();\n protected abstract void initControl();\n protected abstract void initUI();\n public void sendMessage(int flag) {\n  mHandler.sendEmptyMessage(flag);\n }\n public void sendMessageDely(int flag, long delayMillis) {\n  mHandler.sendEmptyMessageDelayed(flag, delayMillis);\n }\n public void sendMessage(Message msg) {\n  mHandler.sendMessage(msg);\n }\n protected void ToastShow(String message) {\n  mHandler.toast_message = message;\n  mHandler.sendEmptyMessage(MyHandler.SHOW_STR_TOAST);\n }\n private static class MyHandler extends Handler {\n  public static final int SHOW_STR_TOAST = 0;\n  private String toast_message = null;\n  @Override\n  public void handleMessage(Message msg) {\n   if (!Thread.currentThread().isInterrupted()) {\n    switch (msg.what) {\n    case SHOW_STR_TOAST:\n     GlobalTool.showCustomToast(mCurBaseActivity, toast_message,\n       1);\n     break;\n    default:\n     mCurBaseActivity.handleOtherMessage(msg);\n     break;\n    }\n   }\n  }\n }\n /**\n  * 处理Handle\n  *\n  * @param msg\n  */\n protected abstract void handleOtherMessage(Message msg);\n private ServiceConnection mSerConn = new ServiceConnection() {\n  @Override\n  public void onServiceDisconnected(ComponentName name) {\n   mLogUtils.SysLog(\"ServiceUnConnected\");\n   // msMessenger = null;\n  }\n  @Override\n  public void onServiceConnected(ComponentName name, IBinder service) {\n   mLogUtils.SysLog(\"ServiceConnected\");\n   msMessenger = new Messenger(service);// get the object of remote\n             // service\n   mcMessenger = new Messenger(mHandler);// initial the object of local\n             // service\n  }\n };\n protected Message mSendMsg = null;\n public void sendSocketServiceMsg(int cmd, String msg) {\n  if (msMessenger == null) {\n   return;\n  }\n  if (mSendMsg == null) {\n   mSendMsg = new Message();\n   mSendMsg.replyTo =  mcMessenger ;\n  }\n  mSendMsg.what = cmd;\n  Bundle mBundle = new Bundle();\n  mBundle.putString(\"client\", msg);\n  mSendMsg.setData(mBundle);\n  try {\n   msMessenger.send(mSendMsg);\n   if (cmd == CmdOrder.CMD_SERVICE_STOP) {\n    msMessenger = null;\n   }\n  } catch (RemoteException e) {\n   mLogUtils\n     .SysLogE(\"error on Send to SocketService: \" + e.toString());\n   e.printStackTrace();\n  }\n }\n}\n```\n\n虽然我也想忽略一切直接分析Messenger，但是，这里还是提下，其中所有Socket有关的机制都封装在SocketHandle当中，其中一些主要的反馈通过接口SocketHandleCallBack在SocketService中实现。\n那么，透过代码，我们可以看到在SocketService与BaseActivity中都有：\n\n```\n/**\n  * 客户端Messenger\n  */\n protected Messenger mcMessenger= null;\n /**\n  * 服务端Messenger\n  */\n protected Messenger msMessenger = null;\n ```\n\n 对于SocketService（下称为Service端）而言mcMessenger来自BaseActivity（下称为Client端）：mcMessenger = msg.replyTo; 而msMessenger 为Service端通过传入对应处理的Handle创建，所有的客服端发过来的有关处理都在这个Handle中处理。\n\n ```\n private class ServiceHandle extends Handler {\n  @Override\n  public void handleMessage(Message msg) {\n   super.handleMessage(msg);\n   switch (msg.what) {\n   case CmdOrder.CMD_SERVICE_STOP:\n    mbStop = true;\n    stopSelf();\n    break;\n   case CmdOrder.CMD_MESSAGE_SEND:\n    mcMessenger = msg.replyTo;\n    Bundle bundle = msg.getData();\n    String sendMsg = bundle.getString(\"client\");\n    sendString(sendMsg);\n   default:\n    break;\n   }\n  }\n }\n ```\n\n 并且在onBind时，返回Service端Messenger的IBinder:\n\n ```\n @Override\n public IBinder onBind(Intent intent) {\n  mLogUtils.SysLog(\"Socket Service onBind\");\n  return msMessenger.getBinder();\n }\n ```\n\n 对于Client端而言，mcMessenger的创建类似与msMessenger ，也是通过传入对应处理的Handle创建，而msMessenger是通过连接成功以后传入参数IBinder进行创建，还有一点值得注意的是，在发送message给Service端时，将message的replyTo赋值为mcMessenger，别忘了我们在Service端时是如何取得Client端的Messenger进行通信的:\n\n ```\n /**\n  * 处理Handle\n  *\n  * @param msg\n  */\n protected abstract void handleOtherMessage(Message msg);\n private ServiceConnection mSerConn = new ServiceConnection() {\n  @Override\n  public void onServiceDisconnected(ComponentName name) {\n   mLogUtils.SysLog(\"ServiceUnConnected\");\n   // msMessenger = null;\n  }\n  @Override\n  public void onServiceConnected(ComponentName name, IBinder service) {\n   mLogUtils.SysLog(\"ServiceConnected\");\n   msMessenger = new Messenger(service);// get the object of remote\n             // service\n   mcMessenger = new Messenger(mHandler);// initial the object of local\n             // service\n  }\n };\n protected Message mSendMsg = null;\n public void sendSocketServiceMsg(int cmd, String msg) {\n  if (msMessenger == null) {\n   return;\n  }\n  if (mSendMsg == null) {\n   mSendMsg = new Message();\n   mSendMsg.replyTo = mcMessenger;\n  }\n  mSendMsg.what = cmd;\n  Bundle mBundle = new Bundle();\n  mBundle.putString(\"client\", msg);\n  mSendMsg.setData(mBundle);\n  try {\n   msMessenger.send(mSendMsg);\n   if (cmd == CmdOrder.CMD_SERVICE_STOP) {\n    msMessenger = null;\n   }\n  } catch (RemoteException e) {\n   mLogUtils\n     .SysLogE(\"error on Send to SocketService: \" + e.toString());\n   e.printStackTrace();\n  }\n }\n ```\n\n 至此，已经简单的通过Messenger完成进程间通信。\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/Android-Messenger-进程通信.md","raw":"title: Android Messenger 进程通信\ndate: 2013-12-14 08:35:03\npermalink: 2013/12/14/Android-Messenger-进程通信\ntags:\n- 分析\n- 进程通信\n- Android\n\n---\n\n今天通过以前写的简单的代码，分享通过Messenger 完成跨进成通信的使用，大神等请绕行。\n\n> 接的外包越来越复杂，使我不得不急需从以前凌乱的成型的、未成型的项目中整理出一些主要的框架 – 2013. 中旬。\n\n<!--more-->\n也是由于一般来说Messenger相比AIDL是把所有的请求都放到一个请求队列，逐一处理，无法支持同时处理并且Messenger仅仅只是通过传递message进行通讯，所以所有的操作只能在对方的Handle中处理，对于架构来说也不是很好，所以最近再次整理的时候需要将这些替换为AIDL通信，但是Messenger通信比较简单，还是很值得mark的，因此，先上当初写的拙码：\n\n———— 服务端： SocketServer:\n\n```\npackage cn.dreamtobe.service;\nimport android.app.Service;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.os.IBinder;\nimport android.os.Message;\nimport android.os.Messenger;\nimport cn.dreamtobe.net.SocketHandle;\nimport cn.dreamtobe.net.SocketHandle.SocketHandleCallBack;\nimport cn.dreamtobe.order.CmdOrder;\nimport cn.dreamtobe.utils.LogUtils;\nimport cn.dreamtobe.utils.Util;\n/**\n *\n * @author 振杰\n *\n */\npublic class SocketService extends Service implements Runnable {\n private ServiceHandle mHandle = new ServiceHandle();\n private SocketHandle mSocketHandle = null;\n private volatile boolean mbStop = false;\n private final String mHostIp = Util.getSocketHostIP();\n private final int mPort = Util.getSocketPort();\n // 客服端Messenger\n private Messenger mcMessenger = null;\n // 服务端Messenger\n private Messenger msMessenger = new Messenger(mHandle);\n private LogUtils mLogUtils = LogUtils.getInstance();\n private class ServiceHandle extends Handler {\n  @Override\n  public void handleMessage(Message msg) {\n   super.handleMessage(msg);\n   switch (msg.what) {\n   case CmdOrder.CMD_SERVICE_STOP:\n    mbStop = true;\n    stopSelf();\n    break;\n   case CmdOrder.CMD_MESSAGE_SEND:\n    mcMessenger = msg.replyTo;\n    Bundle bundle = msg.getData();\n    String sendMsg = bundle.getString(\"client\");\n    sendString(sendMsg);\n   default:\n    break;\n   }\n  }\n }\n private Message mSendMsg = null;\n // 答复客服端\n private void replyClient(int cmd, String replyMsg) {\n  if (mSendMsg == null) {\n   mSendMsg = new Message();\n  }\n  mSendMsg.what = cmd;\n  Bundle bundle = new Bundle();\n  bundle.putString(\"socketservice\", replyMsg);\n  mSendMsg.setData(bundle);\n  try {\n   mcMessenger.send(mSendMsg);\n  } catch (Exception e) {\n  }\n }\n // 发送String 给服务器\n private void sendString(String sendMsg) {\n  mLogUtils.NetSendLog(\"socket服务请求发送: \" + sendMsg);\n  mSocketHandle.SendString(sendMsg);\n }\n @Override\n public IBinder onBind(Intent intent) {\n  mLogUtils.SysLog(\"Socket Service onBind\");\n  return msMessenger.getBinder();\n }\n @Override\n public void onCreate() {\n  super.onCreate();\n  mSocketHandle = new SocketHandle(mHostIp, mPort, mCallBack);\n  mSocketHandle.start();\n  mLogUtils.SysLog(\"Socket Service onCreate\");\n }\n @Override\n public void onDestroy() {\n  super.onDestroy();\n  mSocketHandle.stop();\n  mLogUtils.SysLog(\"Socket Service onDestroy\");\n }\n @Override\n public void run() {\n  if (!mbStop) {\n  }\n }\n private SocketHandleCallBack mCallBack = new SocketHandleCallBack() {\n  @Override\n  public void SucceedSendString() {\n   // TODO Auto-generated method stub\n  }\n  @Override\n  public void SucceedReconnect() {\n   // TODO Auto-generated method stub\n  }\n  @Override\n  public void ReConnectFailOnSendString() {\n   // TODO Auto-generated method stub\n  }\n  @Override\n  public void FailReconnect() {\n   // TODO Auto-generated method stub\n  }\n  @Override\n  public void ErrorOnSendString() {\n   // TODO Auto-generated method stub\n  }\n  @Override\n  public void BeginReConnect() {\n   // TODO Auto-generated method stub\n  }\n  @Override\n  public void BackMessage(String msg) {\n   if (mcMessenger == null) {\n    return;\n   }\n   replyClient(CmdOrder.CMD_MESSAGE_RECEIVE, msg);\n  }\n };\n}\n```\n\n——————– BaseActivity:\n\n```\npackage cn.dreamtobe.activity;\nimport android.app.Activity;\nimport android.content.ComponentName;\nimport android.content.Intent;\nimport android.content.ServiceConnection;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.os.IBinder;\nimport android.os.Message;\nimport android.os.Messenger;\nimport android.os.RemoteException;\nimport cn.dreamtobe.order.CmdOrder;\nimport cn.dreamtobe.tool.GlobalTool;\nimport cn.dreamtobe.utils.LogUtils;\nimport cn.dreamtobe.utils.VariUtils;\n/**\n *\n * @author 振杰\n *\n */\npublic abstract class BaseActivity extends Activity {\n private static MyHandler mHandler = null;\n private static int mnBaseAct = 0;\n /**\n  * 客户端Messenger\n  */\n protected Messenger mcMessenger = null;\n /**\n  * 服务端Messenger\n  */\n protected Messenger msMessenger = null;\n private static BaseActivity mCurBaseActivity = null;\n private LogUtils mLogUtils = LogUtils.getInstance();\n private boolean mIsBind = false;\n @Override\n public void onCreate(Bundle savedInstanceState) {\n  super.onCreate(savedInstanceState);\n  mnBaseAct++;\n  preConfigure();\n  if (mHandler == null) {\n   mHandler = new MyHandler();\n  }\n  VariUtils.gCurActivity = this;\n  mCurBaseActivity = this;\n  configure();\n  initUtils();\n  initControl();\n  initUI();\n }\n protected void preConfigure() {\n }\n public void BindService() {\n  if (!mIsBind) {\n   mLogUtils\n     .SysLog(this.getClass().toString() + \" Bind SocketService\");\n   mIsBind = bindService(new Intent(VariUtils.SocketServiceAction),\n     mSerConn, BIND_AUTO_CREATE);\n  }\n }\n public void unBindService() {\n  if (mIsBind) {\n   mLogUtils.SysLog(this.getClass().toString()\n     + \" unBind SocketService\");\n   unbindService(mSerConn);\n   mIsBind = false;\n  }\n }\n @Override\n protected void onResume() {\n  super.onResume();\n  VariUtils.gCurActivity = this;\n  mCurBaseActivity = this;\n }\n @Override\n protected void onDestroy() {\n  super.onDestroy();\n  unBindService();\n  if (--mnBaseAct == 0) {\n  }\n }\n protected abstract void configure();\n protected abstract void initUtils();\n protected abstract void initControl();\n protected abstract void initUI();\n public void sendMessage(int flag) {\n  mHandler.sendEmptyMessage(flag);\n }\n public void sendMessageDely(int flag, long delayMillis) {\n  mHandler.sendEmptyMessageDelayed(flag, delayMillis);\n }\n public void sendMessage(Message msg) {\n  mHandler.sendMessage(msg);\n }\n protected void ToastShow(String message) {\n  mHandler.toast_message = message;\n  mHandler.sendEmptyMessage(MyHandler.SHOW_STR_TOAST);\n }\n private static class MyHandler extends Handler {\n  public static final int SHOW_STR_TOAST = 0;\n  private String toast_message = null;\n  @Override\n  public void handleMessage(Message msg) {\n   if (!Thread.currentThread().isInterrupted()) {\n    switch (msg.what) {\n    case SHOW_STR_TOAST:\n     GlobalTool.showCustomToast(mCurBaseActivity, toast_message,\n       1);\n     break;\n    default:\n     mCurBaseActivity.handleOtherMessage(msg);\n     break;\n    }\n   }\n  }\n }\n /**\n  * 处理Handle\n  *\n  * @param msg\n  */\n protected abstract void handleOtherMessage(Message msg);\n private ServiceConnection mSerConn = new ServiceConnection() {\n  @Override\n  public void onServiceDisconnected(ComponentName name) {\n   mLogUtils.SysLog(\"ServiceUnConnected\");\n   // msMessenger = null;\n  }\n  @Override\n  public void onServiceConnected(ComponentName name, IBinder service) {\n   mLogUtils.SysLog(\"ServiceConnected\");\n   msMessenger = new Messenger(service);// get the object of remote\n             // service\n   mcMessenger = new Messenger(mHandler);// initial the object of local\n             // service\n  }\n };\n protected Message mSendMsg = null;\n public void sendSocketServiceMsg(int cmd, String msg) {\n  if (msMessenger == null) {\n   return;\n  }\n  if (mSendMsg == null) {\n   mSendMsg = new Message();\n   mSendMsg.replyTo =  mcMessenger ;\n  }\n  mSendMsg.what = cmd;\n  Bundle mBundle = new Bundle();\n  mBundle.putString(\"client\", msg);\n  mSendMsg.setData(mBundle);\n  try {\n   msMessenger.send(mSendMsg);\n   if (cmd == CmdOrder.CMD_SERVICE_STOP) {\n    msMessenger = null;\n   }\n  } catch (RemoteException e) {\n   mLogUtils\n     .SysLogE(\"error on Send to SocketService: \" + e.toString());\n   e.printStackTrace();\n  }\n }\n}\n```\n\n虽然我也想忽略一切直接分析Messenger，但是，这里还是提下，其中所有Socket有关的机制都封装在SocketHandle当中，其中一些主要的反馈通过接口SocketHandleCallBack在SocketService中实现。\n那么，透过代码，我们可以看到在SocketService与BaseActivity中都有：\n\n```\n/**\n  * 客户端Messenger\n  */\n protected Messenger mcMessenger= null;\n /**\n  * 服务端Messenger\n  */\n protected Messenger msMessenger = null;\n ```\n\n 对于SocketService（下称为Service端）而言mcMessenger来自BaseActivity（下称为Client端）：mcMessenger = msg.replyTo; 而msMessenger 为Service端通过传入对应处理的Handle创建，所有的客服端发过来的有关处理都在这个Handle中处理。\n\n ```\n private class ServiceHandle extends Handler {\n  @Override\n  public void handleMessage(Message msg) {\n   super.handleMessage(msg);\n   switch (msg.what) {\n   case CmdOrder.CMD_SERVICE_STOP:\n    mbStop = true;\n    stopSelf();\n    break;\n   case CmdOrder.CMD_MESSAGE_SEND:\n    mcMessenger = msg.replyTo;\n    Bundle bundle = msg.getData();\n    String sendMsg = bundle.getString(\"client\");\n    sendString(sendMsg);\n   default:\n    break;\n   }\n  }\n }\n ```\n\n 并且在onBind时，返回Service端Messenger的IBinder:\n\n ```\n @Override\n public IBinder onBind(Intent intent) {\n  mLogUtils.SysLog(\"Socket Service onBind\");\n  return msMessenger.getBinder();\n }\n ```\n\n 对于Client端而言，mcMessenger的创建类似与msMessenger ，也是通过传入对应处理的Handle创建，而msMessenger是通过连接成功以后传入参数IBinder进行创建，还有一点值得注意的是，在发送message给Service端时，将message的replyTo赋值为mcMessenger，别忘了我们在Service端时是如何取得Client端的Messenger进行通信的:\n\n ```\n /**\n  * 处理Handle\n  *\n  * @param msg\n  */\n protected abstract void handleOtherMessage(Message msg);\n private ServiceConnection mSerConn = new ServiceConnection() {\n  @Override\n  public void onServiceDisconnected(ComponentName name) {\n   mLogUtils.SysLog(\"ServiceUnConnected\");\n   // msMessenger = null;\n  }\n  @Override\n  public void onServiceConnected(ComponentName name, IBinder service) {\n   mLogUtils.SysLog(\"ServiceConnected\");\n   msMessenger = new Messenger(service);// get the object of remote\n             // service\n   mcMessenger = new Messenger(mHandler);// initial the object of local\n             // service\n  }\n };\n protected Message mSendMsg = null;\n public void sendSocketServiceMsg(int cmd, String msg) {\n  if (msMessenger == null) {\n   return;\n  }\n  if (mSendMsg == null) {\n   mSendMsg = new Message();\n   mSendMsg.replyTo = mcMessenger;\n  }\n  mSendMsg.what = cmd;\n  Bundle mBundle = new Bundle();\n  mBundle.putString(\"client\", msg);\n  mSendMsg.setData(mBundle);\n  try {\n   msMessenger.send(mSendMsg);\n   if (cmd == CmdOrder.CMD_SERVICE_STOP) {\n    msMessenger = null;\n   }\n  } catch (RemoteException e) {\n   mLogUtils\n     .SysLogE(\"error on Send to SocketService: \" + e.toString());\n   e.printStackTrace();\n  }\n }\n ```\n\n 至此，已经简单的通过Messenger完成进程间通信。\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2013/12/14/Android-Messenger-进程通信","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66hk000895buqaki0la1","content":"<p>今天通过以前写的简单的代码，分享通过Messenger 完成跨进成通信的使用，大神等请绕行。</p>\n<blockquote>\n<p>接的外包越来越复杂，使我不得不急需从以前凌乱的成型的、未成型的项目中整理出一些主要的框架 – 2013. 中旬。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>也是由于一般来说Messenger相比AIDL是把所有的请求都放到一个请求队列，逐一处理，无法支持同时处理并且Messenger仅仅只是通过传递message进行通讯，所以所有的操作只能在对方的Handle中处理，对于架构来说也不是很好，所以最近再次整理的时候需要将这些替换为AIDL通信，但是Messenger通信比较简单，还是很值得mark的，因此，先上当初写的拙码：</p>\n<p>———— 服务端： SocketServer:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.dreamtobe.service;</div><div class=\"line\"><span class=\"keyword\">import</span> android.app.Service;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Intent;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Handler;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.IBinder;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Message;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Messenger;</div><div class=\"line\"><span class=\"keyword\">import</span> cn.dreamtobe.net.SocketHandle;</div><div class=\"line\"><span class=\"keyword\">import</span> cn.dreamtobe.net.SocketHandle.SocketHandleCallBack;</div><div class=\"line\"><span class=\"keyword\">import</span> cn.dreamtobe.order.CmdOrder;</div><div class=\"line\"><span class=\"keyword\">import</span> cn.dreamtobe.utils.LogUtils;</div><div class=\"line\"><span class=\"keyword\">import</span> cn.dreamtobe.utils.Util;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@author</span> 振杰</div><div class=\"line\"> *</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SocketService</span> <span class=\"keyword\">extends</span> <span class=\"title\">Service</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\"> <span class=\"keyword\">private</span> ServiceHandle mHandle = <span class=\"keyword\">new</span> ServiceHandle();</div><div class=\"line\"> <span class=\"keyword\">private</span> SocketHandle mSocketHandle = <span class=\"keyword\">null</span>;</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">boolean</span> mbStop = <span class=\"keyword\">false</span>;</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String mHostIp = Util.getSocketHostIP();</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> mPort = Util.getSocketPort();</div><div class=\"line\"> <span class=\"comment\">// 客服端Messenger</span></div><div class=\"line\"> <span class=\"keyword\">private</span> Messenger mcMessenger = <span class=\"keyword\">null</span>;</div><div class=\"line\"> <span class=\"comment\">// 服务端Messenger</span></div><div class=\"line\"> <span class=\"keyword\">private</span> Messenger msMessenger = <span class=\"keyword\">new</span> Messenger(mHandle);</div><div class=\"line\"> <span class=\"keyword\">private</span> LogUtils mLogUtils = LogUtils.getInstance();</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServiceHandle</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">super</span>.handleMessage(msg);</div><div class=\"line\">   <span class=\"keyword\">switch</span> (msg.what) &#123;</div><div class=\"line\">   <span class=\"keyword\">case</span> CmdOrder.CMD_SERVICE_STOP:</div><div class=\"line\">    mbStop = <span class=\"keyword\">true</span>;</div><div class=\"line\">    stopSelf();</div><div class=\"line\">    <span class=\"keyword\">break</span>;</div><div class=\"line\">   <span class=\"keyword\">case</span> CmdOrder.CMD_MESSAGE_SEND:</div><div class=\"line\">    mcMessenger = msg.replyTo;</div><div class=\"line\">    Bundle bundle = msg.getData();</div><div class=\"line\">    String sendMsg = bundle.getString(<span class=\"string\">\"client\"</span>);</div><div class=\"line\">    sendString(sendMsg);</div><div class=\"line\">   <span class=\"keyword\">default</span>:</div><div class=\"line\">    <span class=\"keyword\">break</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"keyword\">private</span> Message mSendMsg = <span class=\"keyword\">null</span>;</div><div class=\"line\"> <span class=\"comment\">// 答复客服端</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">replyClient</span><span class=\"params\">(<span class=\"keyword\">int</span> cmd, String replyMsg)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (mSendMsg == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">   mSendMsg = <span class=\"keyword\">new</span> Message();</div><div class=\"line\">  &#125;</div><div class=\"line\">  mSendMsg.what = cmd;</div><div class=\"line\">  Bundle bundle = <span class=\"keyword\">new</span> Bundle();</div><div class=\"line\">  bundle.putString(<span class=\"string\">\"socketservice\"</span>, replyMsg);</div><div class=\"line\">  mSendMsg.setData(bundle);</div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">   mcMessenger.send(mSendMsg);</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">  &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"comment\">// 发送String 给服务器</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sendString</span><span class=\"params\">(String sendMsg)</span> </span>&#123;</div><div class=\"line\">  mLogUtils.NetSendLog(<span class=\"string\">\"socket服务请求发送: \"</span> + sendMsg);</div><div class=\"line\">  mSocketHandle.SendString(sendMsg);</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"meta\">@Override</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> IBinder <span class=\"title\">onBind</span><span class=\"params\">(Intent intent)</span> </span>&#123;</div><div class=\"line\">  mLogUtils.SysLog(<span class=\"string\">\"Socket Service onBind\"</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> msMessenger.getBinder();</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"meta\">@Override</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">super</span>.onCreate();</div><div class=\"line\">  mSocketHandle = <span class=\"keyword\">new</span> SocketHandle(mHostIp, mPort, mCallBack);</div><div class=\"line\">  mSocketHandle.start();</div><div class=\"line\">  mLogUtils.SysLog(<span class=\"string\">\"Socket Service onCreate\"</span>);</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"meta\">@Override</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">  mSocketHandle.stop();</div><div class=\"line\">  mLogUtils.SysLog(<span class=\"string\">\"Socket Service onDestroy\"</span>);</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"meta\">@Override</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (!mbStop) &#123;</div><div class=\"line\">  &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"keyword\">private</span> SocketHandleCallBack mCallBack = <span class=\"keyword\">new</span> SocketHandleCallBack() &#123;</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">SucceedSendString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">   <span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">SucceedReconnect</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">   <span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ReConnectFailOnSendString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">   <span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">FailReconnect</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">   <span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ErrorOnSendString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">   <span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">BeginReConnect</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">   <span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">BackMessage</span><span class=\"params\">(String msg)</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">if</span> (mcMessenger == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\">   replyClient(CmdOrder.CMD_MESSAGE_RECEIVE, msg);</div><div class=\"line\">  &#125;</div><div class=\"line\"> &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>——————– BaseActivity:</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.dreamtobe.activity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.app.Activity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.ComponentName;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Intent;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.ServiceConnection;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Handler;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.IBinder;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Message;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Messenger;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.RemoteException;</div><div class=\"line\"><span class=\"keyword\">import</span> cn.dreamtobe.order.CmdOrder;</div><div class=\"line\"><span class=\"keyword\">import</span> cn.dreamtobe.tool.GlobalTool;</div><div class=\"line\"><span class=\"keyword\">import</span> cn.dreamtobe.utils.LogUtils;</div><div class=\"line\"><span class=\"keyword\">import</span> cn.dreamtobe.utils.VariUtils;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@author</span> 振杰</div><div class=\"line\"> *</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> MyHandler mHandler = <span class=\"keyword\">null</span>;</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> mnBaseAct = <span class=\"number\">0</span>;</div><div class=\"line\"> <span class=\"comment\">/**</span></div><div class=\"line\">  * 客户端Messenger</div><div class=\"line\">  */</div><div class=\"line\"> <span class=\"keyword\">protected</span> Messenger mcMessenger = <span class=\"keyword\">null</span>;</div><div class=\"line\"> <span class=\"comment\">/**</span></div><div class=\"line\">  * 服务端Messenger</div><div class=\"line\">  */</div><div class=\"line\"> <span class=\"keyword\">protected</span> Messenger msMessenger = <span class=\"keyword\">null</span>;</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> BaseActivity mCurBaseActivity = <span class=\"keyword\">null</span>;</div><div class=\"line\"> <span class=\"keyword\">private</span> LogUtils mLogUtils = LogUtils.getInstance();</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> mIsBind = <span class=\"keyword\">false</span>;</div><div class=\"line\"> <span class=\"meta\">@Override</span></div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">  mnBaseAct++;</div><div class=\"line\">  preConfigure();</div><div class=\"line\">  <span class=\"keyword\">if</span> (mHandler == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">   mHandler = <span class=\"keyword\">new</span> MyHandler();</div><div class=\"line\">  &#125;</div><div class=\"line\">  VariUtils.gCurActivity = <span class=\"keyword\">this</span>;</div><div class=\"line\">  mCurBaseActivity = <span class=\"keyword\">this</span>;</div><div class=\"line\">  configure();</div><div class=\"line\">  initUtils();</div><div class=\"line\">  initControl();</div><div class=\"line\">  initUI();</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">preConfigure</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">BindService</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (!mIsBind) &#123;</div><div class=\"line\">   mLogUtils</div><div class=\"line\">     .SysLog(<span class=\"keyword\">this</span>.getClass().toString() + <span class=\"string\">\" Bind SocketService\"</span>);</div><div class=\"line\">   mIsBind = bindService(<span class=\"keyword\">new</span> Intent(VariUtils.SocketServiceAction),</div><div class=\"line\">     mSerConn, BIND_AUTO_CREATE);</div><div class=\"line\">  &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">unBindService</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (mIsBind) &#123;</div><div class=\"line\">   mLogUtils.SysLog(<span class=\"keyword\">this</span>.getClass().toString()</div><div class=\"line\">     + <span class=\"string\">\" unBind SocketService\"</span>);</div><div class=\"line\">   unbindService(mSerConn);</div><div class=\"line\">   mIsBind = <span class=\"keyword\">false</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"meta\">@Override</span></div><div class=\"line\"> <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onResume</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">super</span>.onResume();</div><div class=\"line\">  VariUtils.gCurActivity = <span class=\"keyword\">this</span>;</div><div class=\"line\">  mCurBaseActivity = <span class=\"keyword\">this</span>;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"meta\">@Override</span></div><div class=\"line\"> <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">  unBindService();</div><div class=\"line\">  <span class=\"keyword\">if</span> (--mnBaseAct == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">  &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">()</span></span>;</div><div class=\"line\"> <span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initUtils</span><span class=\"params\">()</span></span>;</div><div class=\"line\"> <span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initControl</span><span class=\"params\">()</span></span>;</div><div class=\"line\"> <span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initUI</span><span class=\"params\">()</span></span>;</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sendMessage</span><span class=\"params\">(<span class=\"keyword\">int</span> flag)</span> </span>&#123;</div><div class=\"line\">  mHandler.sendEmptyMessage(flag);</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sendMessageDely</span><span class=\"params\">(<span class=\"keyword\">int</span> flag, <span class=\"keyword\">long</span> delayMillis)</span> </span>&#123;</div><div class=\"line\">  mHandler.sendEmptyMessageDelayed(flag, delayMillis);</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sendMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">  mHandler.sendMessage(msg);</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ToastShow</span><span class=\"params\">(String message)</span> </span>&#123;</div><div class=\"line\">  mHandler.toast_message = message;</div><div class=\"line\">  mHandler.sendEmptyMessage(MyHandler.SHOW_STR_TOAST);</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> SHOW_STR_TOAST = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> String toast_message = <span class=\"keyword\">null</span>;</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">if</span> (!Thread.currentThread().isInterrupted()) &#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (msg.what) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> SHOW_STR_TOAST:</div><div class=\"line\">     GlobalTool.showCustomToast(mCurBaseActivity, toast_message,</div><div class=\"line\">       1);</div><div class=\"line\">     <span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">default</span>:</div><div class=\"line\">     mCurBaseActivity.handleOtherMessage(msg);</div><div class=\"line\">     <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"comment\">/**</span></div><div class=\"line\">  * 处理Handle</div><div class=\"line\">  *</div><div class=\"line\">  * <span class=\"doctag\">@param</span> msg</div><div class=\"line\">  */</div><div class=\"line\"> <span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">handleOtherMessage</span><span class=\"params\">(Message msg)</span></span>;</div><div class=\"line\"> <span class=\"keyword\">private</span> ServiceConnection mSerConn = <span class=\"keyword\">new</span> ServiceConnection() &#123;</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onServiceDisconnected</span><span class=\"params\">(ComponentName name)</span> </span>&#123;</div><div class=\"line\">   mLogUtils.SysLog(<span class=\"string\">\"ServiceUnConnected\"</span>);</div><div class=\"line\">   <span class=\"comment\">// msMessenger = null;</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onServiceConnected</span><span class=\"params\">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class=\"line\">   mLogUtils.SysLog(<span class=\"string\">\"ServiceConnected\"</span>);</div><div class=\"line\">   msMessenger = <span class=\"keyword\">new</span> Messenger(service);<span class=\"comment\">// get the object of remote</span></div><div class=\"line\">             <span class=\"comment\">// service</span></div><div class=\"line\">   mcMessenger = <span class=\"keyword\">new</span> Messenger(mHandler);<span class=\"comment\">// initial the object of local</span></div><div class=\"line\">             <span class=\"comment\">// service</span></div><div class=\"line\">  &#125;</div><div class=\"line\"> &#125;;</div><div class=\"line\"> <span class=\"keyword\">protected</span> Message mSendMsg = <span class=\"keyword\">null</span>;</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sendSocketServiceMsg</span><span class=\"params\">(<span class=\"keyword\">int</span> cmd, String msg)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (msMessenger == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">   <span class=\"keyword\">return</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span> (mSendMsg == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">   mSendMsg = <span class=\"keyword\">new</span> Message();</div><div class=\"line\">   mSendMsg.replyTo =  mcMessenger ;</div><div class=\"line\">  &#125;</div><div class=\"line\">  mSendMsg.what = cmd;</div><div class=\"line\">  Bundle mBundle = <span class=\"keyword\">new</span> Bundle();</div><div class=\"line\">  mBundle.putString(<span class=\"string\">\"client\"</span>, msg);</div><div class=\"line\">  mSendMsg.setData(mBundle);</div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">   msMessenger.send(mSendMsg);</div><div class=\"line\">   <span class=\"keyword\">if</span> (cmd == CmdOrder.CMD_SERVICE_STOP) &#123;</div><div class=\"line\">    msMessenger = <span class=\"keyword\">null</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">   mLogUtils</div><div class=\"line\">     .SysLogE(<span class=\"string\">\"error on Send to SocketService: \"</span> + e.toString());</div><div class=\"line\">   e.printStackTrace();</div><div class=\"line\">  &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>虽然我也想忽略一切直接分析Messenger，但是，这里还是提下，其中所有Socket有关的机制都封装在SocketHandle当中，其中一些主要的反馈通过接口SocketHandleCallBack在SocketService中实现。<br>那么，透过代码，我们可以看到在SocketService与BaseActivity中都有：</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">  * 客户端Messenger</div><div class=\"line\">  */</div><div class=\"line\"> <span class=\"keyword\">protected</span> Messenger mcMessenger= <span class=\"literal\">null</span>;</div><div class=\"line\"> <span class=\"comment\">/**</span></div><div class=\"line\">  * 服务端Messenger</div><div class=\"line\">  */</div><div class=\"line\"> <span class=\"keyword\">protected</span> Messenger msMessenger = <span class=\"literal\">null</span>;</div></pre></td></tr></table></figure>\n<p> 对于SocketService（下称为Service端）而言mcMessenger来自BaseActivity（下称为Client端）：mcMessenger = msg.replyTo; 而msMessenger 为Service端通过传入对应处理的Handle创建，所有的客服端发过来的有关处理都在这个Handle中处理。</p>\n <figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServiceHandle</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</div><div class=\"line\"> <span class=\"meta\">@Override</span></div><div class=\"line\"> public void handleMessage(<span class=\"type\">Message</span> msg) &#123;</div><div class=\"line\">  <span class=\"keyword\">super</span>.handleMessage(msg);</div><div class=\"line\">  switch (msg.what) &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">CmdOrder</span>.<span class=\"type\">CMD_SERVICE_STOP</span>:</div><div class=\"line\">   mbStop = <span class=\"literal\">true</span>;</div><div class=\"line\">   stopSelf();</div><div class=\"line\">   <span class=\"keyword\">break</span>;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">CmdOrder</span>.<span class=\"type\">CMD_MESSAGE_SEND</span>:</div><div class=\"line\">   mcMessenger = msg.replyTo;</div><div class=\"line\">   <span class=\"type\">Bundle</span> bundle = msg.getData();</div><div class=\"line\">   <span class=\"type\">String</span> sendMsg = bundle.getString(<span class=\"string\">\"client\"</span>);</div><div class=\"line\">   sendString(sendMsg);</div><div class=\"line\">  <span class=\"keyword\">default</span>:</div><div class=\"line\">   <span class=\"keyword\">break</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> 并且在onBind时，返回Service端Messenger的IBinder:</p>\n <figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\">IBinder <span class=\"title\">onBind</span><span class=\"params\">(Intent intent)</span> </span>&#123;</div><div class=\"line\"> mLogUtils.SysLog(<span class=\"string\">\"Socket Service onBind\"</span>);</div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">return</span> msMessenger.<span class=\"title\">getBinder</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> 对于Client端而言，mcMessenger的创建类似与msMessenger ，也是通过传入对应处理的Handle创建，而msMessenger是通过连接成功以后传入参数IBinder进行创建，还有一点值得注意的是，在发送message给Service端时，将message的replyTo赋值为mcMessenger，别忘了我们在Service端时是如何取得Client端的Messenger进行通信的:</p>\n <figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 处理Handle</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> msg</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">handleOtherMessage</span><span class=\"params\">(Message msg)</span></span>;</div><div class=\"line\"><span class=\"keyword\">private</span> ServiceConnection mSerConn = <span class=\"keyword\">new</span> ServiceConnection() &#123;</div><div class=\"line\"> <span class=\"meta\">@Override</span></div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onServiceDisconnected</span><span class=\"params\">(ComponentName name)</span> </span>&#123;</div><div class=\"line\">  mLogUtils.SysLog(<span class=\"string\">\"ServiceUnConnected\"</span>);</div><div class=\"line\">  <span class=\"comment\">// msMessenger = null;</span></div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"meta\">@Override</span></div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onServiceConnected</span><span class=\"params\">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class=\"line\">  mLogUtils.SysLog(<span class=\"string\">\"ServiceConnected\"</span>);</div><div class=\"line\">  msMessenger = <span class=\"keyword\">new</span> Messenger(service);<span class=\"comment\">// get the object of remote</span></div><div class=\"line\">            <span class=\"comment\">// service</span></div><div class=\"line\">  mcMessenger = <span class=\"keyword\">new</span> Messenger(mHandler);<span class=\"comment\">// initial the object of local</span></div><div class=\"line\">            <span class=\"comment\">// service</span></div><div class=\"line\"> &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">protected</span> Message mSendMsg = <span class=\"keyword\">null</span>;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sendSocketServiceMsg</span><span class=\"params\">(<span class=\"keyword\">int</span> cmd, String msg)</span> </span>&#123;</div><div class=\"line\"> <span class=\"keyword\">if</span> (msMessenger == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span>;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"keyword\">if</span> (mSendMsg == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">  mSendMsg = <span class=\"keyword\">new</span> Message();</div><div class=\"line\">  mSendMsg.replyTo = mcMessenger;</div><div class=\"line\"> &#125;</div><div class=\"line\"> mSendMsg.what = cmd;</div><div class=\"line\"> Bundle mBundle = <span class=\"keyword\">new</span> Bundle();</div><div class=\"line\"> mBundle.putString(<span class=\"string\">\"client\"</span>, msg);</div><div class=\"line\"> mSendMsg.setData(mBundle);</div><div class=\"line\"> <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">  msMessenger.send(mSendMsg);</div><div class=\"line\">  <span class=\"keyword\">if</span> (cmd == CmdOrder.CMD_SERVICE_STOP) &#123;</div><div class=\"line\">   msMessenger = <span class=\"keyword\">null</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"> &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">  mLogUtils</div><div class=\"line\">    .SysLogE(<span class=\"string\">\"error on Send to SocketService: \"</span> + e.toString());</div><div class=\"line\">  e.printStackTrace();</div><div class=\"line\"> &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> 至此，已经简单的通过Messenger完成进程间通信。</p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<p>今天通过以前写的简单的代码，分享通过Messenger 完成跨进成通信的使用，大神等请绕行。</p>\n<blockquote>\n<p>接的外包越来越复杂，使我不得不急需从以前凌乱的成型的、未成型的项目中整理出一些主要的框架 – 2013. 中旬。</p>\n</blockquote>","more":"<p>也是由于一般来说Messenger相比AIDL是把所有的请求都放到一个请求队列，逐一处理，无法支持同时处理并且Messenger仅仅只是通过传递message进行通讯，所以所有的操作只能在对方的Handle中处理，对于架构来说也不是很好，所以最近再次整理的时候需要将这些替换为AIDL通信，但是Messenger通信比较简单，还是很值得mark的，因此，先上当初写的拙码：</p>\n<p>———— 服务端： SocketServer:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.dreamtobe.service;</div><div class=\"line\"><span class=\"keyword\">import</span> android.app.Service;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Intent;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Handler;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.IBinder;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Message;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Messenger;</div><div class=\"line\"><span class=\"keyword\">import</span> cn.dreamtobe.net.SocketHandle;</div><div class=\"line\"><span class=\"keyword\">import</span> cn.dreamtobe.net.SocketHandle.SocketHandleCallBack;</div><div class=\"line\"><span class=\"keyword\">import</span> cn.dreamtobe.order.CmdOrder;</div><div class=\"line\"><span class=\"keyword\">import</span> cn.dreamtobe.utils.LogUtils;</div><div class=\"line\"><span class=\"keyword\">import</span> cn.dreamtobe.utils.Util;</div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@author</span> 振杰</div><div class=\"line\"> *</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SocketService</span> <span class=\"keyword\">extends</span> <span class=\"title\">Service</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\"> <span class=\"keyword\">private</span> ServiceHandle mHandle = <span class=\"keyword\">new</span> ServiceHandle();</div><div class=\"line\"> <span class=\"keyword\">private</span> SocketHandle mSocketHandle = <span class=\"keyword\">null</span>;</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">boolean</span> mbStop = <span class=\"keyword\">false</span>;</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String mHostIp = Util.getSocketHostIP();</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> mPort = Util.getSocketPort();</div><div class=\"line\"> <span class=\"comment\">// 客服端Messenger</span></div><div class=\"line\"> <span class=\"keyword\">private</span> Messenger mcMessenger = <span class=\"keyword\">null</span>;</div><div class=\"line\"> <span class=\"comment\">// 服务端Messenger</span></div><div class=\"line\"> <span class=\"keyword\">private</span> Messenger msMessenger = <span class=\"keyword\">new</span> Messenger(mHandle);</div><div class=\"line\"> <span class=\"keyword\">private</span> LogUtils mLogUtils = LogUtils.getInstance();</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServiceHandle</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">super</span>.handleMessage(msg);</div><div class=\"line\">   <span class=\"keyword\">switch</span> (msg.what) &#123;</div><div class=\"line\">   <span class=\"keyword\">case</span> CmdOrder.CMD_SERVICE_STOP:</div><div class=\"line\">    mbStop = <span class=\"keyword\">true</span>;</div><div class=\"line\">    stopSelf();</div><div class=\"line\">    <span class=\"keyword\">break</span>;</div><div class=\"line\">   <span class=\"keyword\">case</span> CmdOrder.CMD_MESSAGE_SEND:</div><div class=\"line\">    mcMessenger = msg.replyTo;</div><div class=\"line\">    Bundle bundle = msg.getData();</div><div class=\"line\">    String sendMsg = bundle.getString(<span class=\"string\">\"client\"</span>);</div><div class=\"line\">    sendString(sendMsg);</div><div class=\"line\">   <span class=\"keyword\">default</span>:</div><div class=\"line\">    <span class=\"keyword\">break</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"keyword\">private</span> Message mSendMsg = <span class=\"keyword\">null</span>;</div><div class=\"line\"> <span class=\"comment\">// 答复客服端</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">replyClient</span><span class=\"params\">(<span class=\"keyword\">int</span> cmd, String replyMsg)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (mSendMsg == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">   mSendMsg = <span class=\"keyword\">new</span> Message();</div><div class=\"line\">  &#125;</div><div class=\"line\">  mSendMsg.what = cmd;</div><div class=\"line\">  Bundle bundle = <span class=\"keyword\">new</span> Bundle();</div><div class=\"line\">  bundle.putString(<span class=\"string\">\"socketservice\"</span>, replyMsg);</div><div class=\"line\">  mSendMsg.setData(bundle);</div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">   mcMessenger.send(mSendMsg);</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">  &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"comment\">// 发送String 给服务器</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sendString</span><span class=\"params\">(String sendMsg)</span> </span>&#123;</div><div class=\"line\">  mLogUtils.NetSendLog(<span class=\"string\">\"socket服务请求发送: \"</span> + sendMsg);</div><div class=\"line\">  mSocketHandle.SendString(sendMsg);</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"meta\">@Override</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> IBinder <span class=\"title\">onBind</span><span class=\"params\">(Intent intent)</span> </span>&#123;</div><div class=\"line\">  mLogUtils.SysLog(<span class=\"string\">\"Socket Service onBind\"</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> msMessenger.getBinder();</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"meta\">@Override</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">super</span>.onCreate();</div><div class=\"line\">  mSocketHandle = <span class=\"keyword\">new</span> SocketHandle(mHostIp, mPort, mCallBack);</div><div class=\"line\">  mSocketHandle.start();</div><div class=\"line\">  mLogUtils.SysLog(<span class=\"string\">\"Socket Service onCreate\"</span>);</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"meta\">@Override</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">  mSocketHandle.stop();</div><div class=\"line\">  mLogUtils.SysLog(<span class=\"string\">\"Socket Service onDestroy\"</span>);</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"meta\">@Override</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (!mbStop) &#123;</div><div class=\"line\">  &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"keyword\">private</span> SocketHandleCallBack mCallBack = <span class=\"keyword\">new</span> SocketHandleCallBack() &#123;</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">SucceedSendString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">   <span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">SucceedReconnect</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">   <span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ReConnectFailOnSendString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">   <span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">FailReconnect</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">   <span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ErrorOnSendString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">   <span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">BeginReConnect</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">   <span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">BackMessage</span><span class=\"params\">(String msg)</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">if</span> (mcMessenger == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\">   replyClient(CmdOrder.CMD_MESSAGE_RECEIVE, msg);</div><div class=\"line\">  &#125;</div><div class=\"line\"> &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>——————– BaseActivity:</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cn.dreamtobe.activity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.app.Activity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.ComponentName;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Intent;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.ServiceConnection;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Handler;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.IBinder;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Message;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Messenger;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.RemoteException;</div><div class=\"line\"><span class=\"keyword\">import</span> cn.dreamtobe.order.CmdOrder;</div><div class=\"line\"><span class=\"keyword\">import</span> cn.dreamtobe.tool.GlobalTool;</div><div class=\"line\"><span class=\"keyword\">import</span> cn.dreamtobe.utils.LogUtils;</div><div class=\"line\"><span class=\"keyword\">import</span> cn.dreamtobe.utils.VariUtils;</div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@author</span> 振杰</div><div class=\"line\"> *</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> MyHandler mHandler = <span class=\"keyword\">null</span>;</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> mnBaseAct = <span class=\"number\">0</span>;</div><div class=\"line\"> <span class=\"comment\">/**</div><div class=\"line\">  * 客户端Messenger</div><div class=\"line\">  */</span></div><div class=\"line\"> <span class=\"keyword\">protected</span> Messenger mcMessenger = <span class=\"keyword\">null</span>;</div><div class=\"line\"> <span class=\"comment\">/**</div><div class=\"line\">  * 服务端Messenger</div><div class=\"line\">  */</span></div><div class=\"line\"> <span class=\"keyword\">protected</span> Messenger msMessenger = <span class=\"keyword\">null</span>;</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> BaseActivity mCurBaseActivity = <span class=\"keyword\">null</span>;</div><div class=\"line\"> <span class=\"keyword\">private</span> LogUtils mLogUtils = LogUtils.getInstance();</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> mIsBind = <span class=\"keyword\">false</span>;</div><div class=\"line\"> <span class=\"meta\">@Override</span></div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">  mnBaseAct++;</div><div class=\"line\">  preConfigure();</div><div class=\"line\">  <span class=\"keyword\">if</span> (mHandler == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">   mHandler = <span class=\"keyword\">new</span> MyHandler();</div><div class=\"line\">  &#125;</div><div class=\"line\">  VariUtils.gCurActivity = <span class=\"keyword\">this</span>;</div><div class=\"line\">  mCurBaseActivity = <span class=\"keyword\">this</span>;</div><div class=\"line\">  configure();</div><div class=\"line\">  initUtils();</div><div class=\"line\">  initControl();</div><div class=\"line\">  initUI();</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">preConfigure</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">BindService</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (!mIsBind) &#123;</div><div class=\"line\">   mLogUtils</div><div class=\"line\">     .SysLog(<span class=\"keyword\">this</span>.getClass().toString() + <span class=\"string\">\" Bind SocketService\"</span>);</div><div class=\"line\">   mIsBind = bindService(<span class=\"keyword\">new</span> Intent(VariUtils.SocketServiceAction),</div><div class=\"line\">     mSerConn, BIND_AUTO_CREATE);</div><div class=\"line\">  &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">unBindService</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (mIsBind) &#123;</div><div class=\"line\">   mLogUtils.SysLog(<span class=\"keyword\">this</span>.getClass().toString()</div><div class=\"line\">     + <span class=\"string\">\" unBind SocketService\"</span>);</div><div class=\"line\">   unbindService(mSerConn);</div><div class=\"line\">   mIsBind = <span class=\"keyword\">false</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"meta\">@Override</span></div><div class=\"line\"> <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onResume</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">super</span>.onResume();</div><div class=\"line\">  VariUtils.gCurActivity = <span class=\"keyword\">this</span>;</div><div class=\"line\">  mCurBaseActivity = <span class=\"keyword\">this</span>;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"meta\">@Override</span></div><div class=\"line\"> <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">  unBindService();</div><div class=\"line\">  <span class=\"keyword\">if</span> (--mnBaseAct == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">  &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">()</span></span>;</div><div class=\"line\"> <span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initUtils</span><span class=\"params\">()</span></span>;</div><div class=\"line\"> <span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initControl</span><span class=\"params\">()</span></span>;</div><div class=\"line\"> <span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initUI</span><span class=\"params\">()</span></span>;</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sendMessage</span><span class=\"params\">(<span class=\"keyword\">int</span> flag)</span> </span>&#123;</div><div class=\"line\">  mHandler.sendEmptyMessage(flag);</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sendMessageDely</span><span class=\"params\">(<span class=\"keyword\">int</span> flag, <span class=\"keyword\">long</span> delayMillis)</span> </span>&#123;</div><div class=\"line\">  mHandler.sendEmptyMessageDelayed(flag, delayMillis);</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sendMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">  mHandler.sendMessage(msg);</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ToastShow</span><span class=\"params\">(String message)</span> </span>&#123;</div><div class=\"line\">  mHandler.toast_message = message;</div><div class=\"line\">  mHandler.sendEmptyMessage(MyHandler.SHOW_STR_TOAST);</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> SHOW_STR_TOAST = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> String toast_message = <span class=\"keyword\">null</span>;</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">if</span> (!Thread.currentThread().isInterrupted()) &#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (msg.what) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> SHOW_STR_TOAST:</div><div class=\"line\">     GlobalTool.showCustomToast(mCurBaseActivity, toast_message,</div><div class=\"line\">       1);</div><div class=\"line\">     <span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">default</span>:</div><div class=\"line\">     mCurBaseActivity.handleOtherMessage(msg);</div><div class=\"line\">     <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"comment\">/**</div><div class=\"line\">  * 处理Handle</div><div class=\"line\">  *</div><div class=\"line\">  * <span class=\"doctag\">@param</span> msg</div><div class=\"line\">  */</span></div><div class=\"line\"> <span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">handleOtherMessage</span><span class=\"params\">(Message msg)</span></span>;</div><div class=\"line\"> <span class=\"keyword\">private</span> ServiceConnection mSerConn = <span class=\"keyword\">new</span> ServiceConnection() &#123;</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onServiceDisconnected</span><span class=\"params\">(ComponentName name)</span> </span>&#123;</div><div class=\"line\">   mLogUtils.SysLog(<span class=\"string\">\"ServiceUnConnected\"</span>);</div><div class=\"line\">   <span class=\"comment\">// msMessenger = null;</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onServiceConnected</span><span class=\"params\">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class=\"line\">   mLogUtils.SysLog(<span class=\"string\">\"ServiceConnected\"</span>);</div><div class=\"line\">   msMessenger = <span class=\"keyword\">new</span> Messenger(service);<span class=\"comment\">// get the object of remote</span></div><div class=\"line\">             <span class=\"comment\">// service</span></div><div class=\"line\">   mcMessenger = <span class=\"keyword\">new</span> Messenger(mHandler);<span class=\"comment\">// initial the object of local</span></div><div class=\"line\">             <span class=\"comment\">// service</span></div><div class=\"line\">  &#125;</div><div class=\"line\"> &#125;;</div><div class=\"line\"> <span class=\"keyword\">protected</span> Message mSendMsg = <span class=\"keyword\">null</span>;</div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sendSocketServiceMsg</span><span class=\"params\">(<span class=\"keyword\">int</span> cmd, String msg)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (msMessenger == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">   <span class=\"keyword\">return</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span> (mSendMsg == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">   mSendMsg = <span class=\"keyword\">new</span> Message();</div><div class=\"line\">   mSendMsg.replyTo =  mcMessenger ;</div><div class=\"line\">  &#125;</div><div class=\"line\">  mSendMsg.what = cmd;</div><div class=\"line\">  Bundle mBundle = <span class=\"keyword\">new</span> Bundle();</div><div class=\"line\">  mBundle.putString(<span class=\"string\">\"client\"</span>, msg);</div><div class=\"line\">  mSendMsg.setData(mBundle);</div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">   msMessenger.send(mSendMsg);</div><div class=\"line\">   <span class=\"keyword\">if</span> (cmd == CmdOrder.CMD_SERVICE_STOP) &#123;</div><div class=\"line\">    msMessenger = <span class=\"keyword\">null</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">   mLogUtils</div><div class=\"line\">     .SysLogE(<span class=\"string\">\"error on Send to SocketService: \"</span> + e.toString());</div><div class=\"line\">   e.printStackTrace();</div><div class=\"line\">  &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>虽然我也想忽略一切直接分析Messenger，但是，这里还是提下，其中所有Socket有关的机制都封装在SocketHandle当中，其中一些主要的反馈通过接口SocketHandleCallBack在SocketService中实现。<br>那么，透过代码，我们可以看到在SocketService与BaseActivity中都有：</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">  * 客户端Messenger</div><div class=\"line\">  */</span></div><div class=\"line\"> <span class=\"keyword\">protected</span> Messenger mcMessenger= <span class=\"literal\">null</span>;</div><div class=\"line\"> <span class=\"comment\">/**</div><div class=\"line\">  * 服务端Messenger</div><div class=\"line\">  */</span></div><div class=\"line\"> <span class=\"keyword\">protected</span> Messenger msMessenger = <span class=\"literal\">null</span>;</div></pre></td></tr></table></figure>\n<p> 对于SocketService（下称为Service端）而言mcMessenger来自BaseActivity（下称为Client端）：mcMessenger = msg.replyTo; 而msMessenger 为Service端通过传入对应处理的Handle创建，所有的客服端发过来的有关处理都在这个Handle中处理。</p>\n <figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServiceHandle</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</div><div class=\"line\"> <span class=\"meta\">@Override</span></div><div class=\"line\"> public void handleMessage(<span class=\"type\">Message</span> msg) &#123;</div><div class=\"line\">  <span class=\"keyword\">super</span>.handleMessage(msg);</div><div class=\"line\">  switch (msg.what) &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">CmdOrder</span>.<span class=\"type\">CMD_SERVICE_STOP</span>:</div><div class=\"line\">   mbStop = <span class=\"literal\">true</span>;</div><div class=\"line\">   stopSelf();</div><div class=\"line\">   <span class=\"keyword\">break</span>;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">CmdOrder</span>.<span class=\"type\">CMD_MESSAGE_SEND</span>:</div><div class=\"line\">   mcMessenger = msg.replyTo;</div><div class=\"line\">   <span class=\"type\">Bundle</span> bundle = msg.getData();</div><div class=\"line\">   <span class=\"type\">String</span> sendMsg = bundle.getString(<span class=\"string\">\"client\"</span>);</div><div class=\"line\">   sendString(sendMsg);</div><div class=\"line\">  <span class=\"keyword\">default</span>:</div><div class=\"line\">   <span class=\"keyword\">break</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> 并且在onBind时，返回Service端Messenger的IBinder:</p>\n <figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\">IBinder <span class=\"title\">onBind</span><span class=\"params\">(Intent intent)</span> </span>&#123;</div><div class=\"line\"> mLogUtils.SysLog(<span class=\"string\">\"Socket Service onBind\"</span>);</div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">return</span> msMessenger.<span class=\"title\">getBinder</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> 对于Client端而言，mcMessenger的创建类似与msMessenger ，也是通过传入对应处理的Handle创建，而msMessenger是通过连接成功以后传入参数IBinder进行创建，还有一点值得注意的是，在发送message给Service端时，将message的replyTo赋值为mcMessenger，别忘了我们在Service端时是如何取得Client端的Messenger进行通信的:</p>\n <figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 处理Handle</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> msg</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">handleOtherMessage</span><span class=\"params\">(Message msg)</span></span>;</div><div class=\"line\"><span class=\"keyword\">private</span> ServiceConnection mSerConn = <span class=\"keyword\">new</span> ServiceConnection() &#123;</div><div class=\"line\"> <span class=\"meta\">@Override</span></div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onServiceDisconnected</span><span class=\"params\">(ComponentName name)</span> </span>&#123;</div><div class=\"line\">  mLogUtils.SysLog(<span class=\"string\">\"ServiceUnConnected\"</span>);</div><div class=\"line\">  <span class=\"comment\">// msMessenger = null;</span></div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"meta\">@Override</span></div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onServiceConnected</span><span class=\"params\">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class=\"line\">  mLogUtils.SysLog(<span class=\"string\">\"ServiceConnected\"</span>);</div><div class=\"line\">  msMessenger = <span class=\"keyword\">new</span> Messenger(service);<span class=\"comment\">// get the object of remote</span></div><div class=\"line\">            <span class=\"comment\">// service</span></div><div class=\"line\">  mcMessenger = <span class=\"keyword\">new</span> Messenger(mHandler);<span class=\"comment\">// initial the object of local</span></div><div class=\"line\">            <span class=\"comment\">// service</span></div><div class=\"line\"> &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">protected</span> Message mSendMsg = <span class=\"keyword\">null</span>;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sendSocketServiceMsg</span><span class=\"params\">(<span class=\"keyword\">int</span> cmd, String msg)</span> </span>&#123;</div><div class=\"line\"> <span class=\"keyword\">if</span> (msMessenger == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span>;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"keyword\">if</span> (mSendMsg == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">  mSendMsg = <span class=\"keyword\">new</span> Message();</div><div class=\"line\">  mSendMsg.replyTo = mcMessenger;</div><div class=\"line\"> &#125;</div><div class=\"line\"> mSendMsg.what = cmd;</div><div class=\"line\"> Bundle mBundle = <span class=\"keyword\">new</span> Bundle();</div><div class=\"line\"> mBundle.putString(<span class=\"string\">\"client\"</span>, msg);</div><div class=\"line\"> mSendMsg.setData(mBundle);</div><div class=\"line\"> <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">  msMessenger.send(mSendMsg);</div><div class=\"line\">  <span class=\"keyword\">if</span> (cmd == CmdOrder.CMD_SERVICE_STOP) &#123;</div><div class=\"line\">   msMessenger = <span class=\"keyword\">null</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"> &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">  mLogUtils</div><div class=\"line\">    .SysLogE(<span class=\"string\">\"error on Send to SocketService: \"</span> + e.toString());</div><div class=\"line\">  e.printStackTrace();</div><div class=\"line\"> &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> 至此，已经简单的通过Messenger完成进程间通信。</p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"Android推送探究","date":"2013-07-12T00:35:03.000Z","_content":"\n> 最近刚好公司需要用到推送，就做了一些分析并且成功的调通了几个通用的项目。\n首先说下Android的推送，不像Ios的已经有了很好的C2DM的机制，虽然谷歌也提供这种机制的推送，不过介于国内…\n\n<!--more-->\n下面对一些主流的几个方案进行分析，这里参考网络上的一些分析:\n\n## 方案1、使用GCM服务（Google Cloud Messaging）\n\n> 简介：Google推出的云消息服务，即第二代的C2DM。\n\n- 优点：Google提供的服务、原生、简单，无需实现和部署服务端。\n- 缺点：Android版本限制（必须大于2.2版本），该服务在国内不够稳定、需要用户绑定Google帐号，受限于Google。\n\n## 方案2、使用XMPP协议（Openfire + Spark + Smack）\n\n> 简介：基于XML协议的通讯协议，前身是Jabber，目前已由IETF国际标准化组织完成了标准化工作。\n\n- 优点：协议成熟、强大、可扩展性强、目前主要应用于许多聊天系统中，且已有开源的Java版的开发实例androidpn。\n- 缺点：协议较复杂、冗余（基于XML）、费流量、费电，部署硬件成本高。\n\n## 方案3、使用MQTT协议（更多信息见：http://mqtt.org/）\n\n> 简介：轻量级的、基于代理的“发布/订阅”模式的消息传输协议。\n\n- 优点：协议简洁、小巧、可扩展性强、省流量、省电，目前已经应用到企业领域（参考：http://mqtt.org/software），且已有C++版的服务端组件rsmb。\n- 缺点：不够成熟、实现较复杂、服务端组件rsmb不开源，部署硬件成本较高。\n\n## 方案4、使用HTTP轮循方式\n\n> 简介：定时向HTTP服务端接口（Web Service API）获取最新消息。\n\n- 优点：实现简单、可控性强，部署硬件成本低。\n- 缺点：实时性差。\n\n---\n\n> 通过网络上的一些评论，与个人的测试，都是主推MQTT，辅推XMPP的。\n\n下面就MQTT的调配做下记录以备以后使用。\n\n### 1. 首先下载需要的文件：\nhttp://pan.baidu.com/share/link?shareid=3690050211&uk=859141184\n\n### 2. 下载以后，可以看到三个文件夹：\n\nAndroidPushNotificationsDemo(Android端)、rsmb(服务端工具)、send_mqtt(服务端)\n\n#### Android端需要注意的是：\n\n1. 导入以后记得勾选有关包\n2.PushService.java中配置MQTT_HOST为可解析的对应的服务端地址（要能ping的通的）（比如我这边用send_mqtt.dreamtobe.cn)\n\n#### 服务端需要注意的是：\n\n1. 修改send_mqtt/etc下的config.php中的MQTT_SERVER_HOST为对应的服务器ip.\n2. 对应自己服务器系统。打开rsmb中的broker(比如centos 32，请运行./linux_ia32/broker即可）\n\n## 我这边已经调配好一个：\n\nhttp://send_mqtt.dreamtobe.cn\n\n大家可以设置这边下载的开源代码，并且设置对应的MQTT_HOST为send_mqtt.dreamtobe.cn进行测试\n如上已经配置好。\n\n> 下面配置一款基于XMPP协议的开源项目AndroidPn（我这边只针对Tomcat）:\n\n### 1. 先下载对应需要准备的文件：\n\nhttp://pan.baidu.com/share/link?shareid=3761244206&uk=859141184\n\n### 2. 下载以后解压，有两个文件夹：\nandroidpn-client(客户端)、Androidpn-tomcat(服务端)\n\n#### 客户端需要注意：\n\n1. 修改raw中androidpn.properties的xmppHost为服务器的ip.\n服务端注意:\n2. 导入myeclipse后，打开resources中的jdbc.properties 设置对应mysql的用户名密码（jdbcUsername、jdbcPassword)。\n3. 设置jdbc.properties中的数据库名(下面test部分)：\njdbc:mysql://127.0.0.1:3306/test?useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull\n4. 创建数据库(假设上面数据库名填写test):\n`create database test;`\n5. 完成配置\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/Android推送探究.md","raw":"title: Android推送探究\ndate: 2013-07-12 08:35:03\npermalink: 2013/07/12/Android推送探究\ntags:\n- 推送\n- Android\n- 探究\n\n\n---\n\n> 最近刚好公司需要用到推送，就做了一些分析并且成功的调通了几个通用的项目。\n首先说下Android的推送，不像Ios的已经有了很好的C2DM的机制，虽然谷歌也提供这种机制的推送，不过介于国内…\n\n<!--more-->\n下面对一些主流的几个方案进行分析，这里参考网络上的一些分析:\n\n## 方案1、使用GCM服务（Google Cloud Messaging）\n\n> 简介：Google推出的云消息服务，即第二代的C2DM。\n\n- 优点：Google提供的服务、原生、简单，无需实现和部署服务端。\n- 缺点：Android版本限制（必须大于2.2版本），该服务在国内不够稳定、需要用户绑定Google帐号，受限于Google。\n\n## 方案2、使用XMPP协议（Openfire + Spark + Smack）\n\n> 简介：基于XML协议的通讯协议，前身是Jabber，目前已由IETF国际标准化组织完成了标准化工作。\n\n- 优点：协议成熟、强大、可扩展性强、目前主要应用于许多聊天系统中，且已有开源的Java版的开发实例androidpn。\n- 缺点：协议较复杂、冗余（基于XML）、费流量、费电，部署硬件成本高。\n\n## 方案3、使用MQTT协议（更多信息见：http://mqtt.org/）\n\n> 简介：轻量级的、基于代理的“发布/订阅”模式的消息传输协议。\n\n- 优点：协议简洁、小巧、可扩展性强、省流量、省电，目前已经应用到企业领域（参考：http://mqtt.org/software），且已有C++版的服务端组件rsmb。\n- 缺点：不够成熟、实现较复杂、服务端组件rsmb不开源，部署硬件成本较高。\n\n## 方案4、使用HTTP轮循方式\n\n> 简介：定时向HTTP服务端接口（Web Service API）获取最新消息。\n\n- 优点：实现简单、可控性强，部署硬件成本低。\n- 缺点：实时性差。\n\n---\n\n> 通过网络上的一些评论，与个人的测试，都是主推MQTT，辅推XMPP的。\n\n下面就MQTT的调配做下记录以备以后使用。\n\n### 1. 首先下载需要的文件：\nhttp://pan.baidu.com/share/link?shareid=3690050211&uk=859141184\n\n### 2. 下载以后，可以看到三个文件夹：\n\nAndroidPushNotificationsDemo(Android端)、rsmb(服务端工具)、send_mqtt(服务端)\n\n#### Android端需要注意的是：\n\n1. 导入以后记得勾选有关包\n2.PushService.java中配置MQTT_HOST为可解析的对应的服务端地址（要能ping的通的）（比如我这边用send_mqtt.dreamtobe.cn)\n\n#### 服务端需要注意的是：\n\n1. 修改send_mqtt/etc下的config.php中的MQTT_SERVER_HOST为对应的服务器ip.\n2. 对应自己服务器系统。打开rsmb中的broker(比如centos 32，请运行./linux_ia32/broker即可）\n\n## 我这边已经调配好一个：\n\nhttp://send_mqtt.dreamtobe.cn\n\n大家可以设置这边下载的开源代码，并且设置对应的MQTT_HOST为send_mqtt.dreamtobe.cn进行测试\n如上已经配置好。\n\n> 下面配置一款基于XMPP协议的开源项目AndroidPn（我这边只针对Tomcat）:\n\n### 1. 先下载对应需要准备的文件：\n\nhttp://pan.baidu.com/share/link?shareid=3761244206&uk=859141184\n\n### 2. 下载以后解压，有两个文件夹：\nandroidpn-client(客户端)、Androidpn-tomcat(服务端)\n\n#### 客户端需要注意：\n\n1. 修改raw中androidpn.properties的xmppHost为服务器的ip.\n服务端注意:\n2. 导入myeclipse后，打开resources中的jdbc.properties 设置对应mysql的用户名密码（jdbcUsername、jdbcPassword)。\n3. 设置jdbc.properties中的数据库名(下面test部分)：\njdbc:mysql://127.0.0.1:3306/test?useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull\n4. 创建数据库(假设上面数据库名填写test):\n`create database test;`\n5. 完成配置\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2013/07/12/Android推送探究","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66hn000a95buivgay2ck","content":"<blockquote>\n<p>最近刚好公司需要用到推送，就做了一些分析并且成功的调通了几个通用的项目。<br>首先说下Android的推送，不像Ios的已经有了很好的C2DM的机制，虽然谷歌也提供这种机制的推送，不过介于国内…</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>下面对一些主流的几个方案进行分析，这里参考网络上的一些分析:</p>\n<h2 id=\"方案1、使用GCM服务（Google-Cloud-Messaging）\"><a href=\"#方案1、使用GCM服务（Google-Cloud-Messaging）\" class=\"headerlink\" title=\"方案1、使用GCM服务（Google Cloud Messaging）\"></a>方案1、使用GCM服务（Google Cloud Messaging）</h2><blockquote>\n<p>简介：Google推出的云消息服务，即第二代的C2DM。</p>\n</blockquote>\n<ul>\n<li>优点：Google提供的服务、原生、简单，无需实现和部署服务端。</li>\n<li>缺点：Android版本限制（必须大于2.2版本），该服务在国内不够稳定、需要用户绑定Google帐号，受限于Google。</li>\n</ul>\n<h2 id=\"方案2、使用XMPP协议（Openfire-Spark-Smack）\"><a href=\"#方案2、使用XMPP协议（Openfire-Spark-Smack）\" class=\"headerlink\" title=\"方案2、使用XMPP协议（Openfire + Spark + Smack）\"></a>方案2、使用XMPP协议（Openfire + Spark + Smack）</h2><blockquote>\n<p>简介：基于XML协议的通讯协议，前身是Jabber，目前已由IETF国际标准化组织完成了标准化工作。</p>\n</blockquote>\n<ul>\n<li>优点：协议成熟、强大、可扩展性强、目前主要应用于许多聊天系统中，且已有开源的Java版的开发实例androidpn。</li>\n<li>缺点：协议较复杂、冗余（基于XML）、费流量、费电，部署硬件成本高。</li>\n</ul>\n<h2 id=\"方案3、使用MQTT协议（更多信息见：http-mqtt-org-）\"><a href=\"#方案3、使用MQTT协议（更多信息见：http-mqtt-org-）\" class=\"headerlink\" title=\"方案3、使用MQTT协议（更多信息见：http://mqtt.org/）\"></a>方案3、使用MQTT协议（更多信息见：<a href=\"http://mqtt.org/）\" target=\"_blank\" rel=\"external\">http://mqtt.org/）</a></h2><blockquote>\n<p>简介：轻量级的、基于代理的“发布/订阅”模式的消息传输协议。</p>\n</blockquote>\n<ul>\n<li>优点：协议简洁、小巧、可扩展性强、省流量、省电，目前已经应用到企业领域（参考：<a href=\"http://mqtt.org/software），且已有C++版的服务端组件rsmb。\" target=\"_blank\" rel=\"external\">http://mqtt.org/software），且已有C++版的服务端组件rsmb。</a></li>\n<li>缺点：不够成熟、实现较复杂、服务端组件rsmb不开源，部署硬件成本较高。</li>\n</ul>\n<h2 id=\"方案4、使用HTTP轮循方式\"><a href=\"#方案4、使用HTTP轮循方式\" class=\"headerlink\" title=\"方案4、使用HTTP轮循方式\"></a>方案4、使用HTTP轮循方式</h2><blockquote>\n<p>简介：定时向HTTP服务端接口（Web Service API）获取最新消息。</p>\n</blockquote>\n<ul>\n<li>优点：实现简单、可控性强，部署硬件成本低。</li>\n<li>缺点：实时性差。</li>\n</ul>\n<hr>\n<blockquote>\n<p>通过网络上的一些评论，与个人的测试，都是主推MQTT，辅推XMPP的。</p>\n</blockquote>\n<p>下面就MQTT的调配做下记录以备以后使用。</p>\n<h3 id=\"1-首先下载需要的文件：\"><a href=\"#1-首先下载需要的文件：\" class=\"headerlink\" title=\"1. 首先下载需要的文件：\"></a>1. 首先下载需要的文件：</h3><p><a href=\"http://pan.baidu.com/share/link?shareid=3690050211&amp;uk=859141184\" target=\"_blank\" rel=\"external\">http://pan.baidu.com/share/link?shareid=3690050211&amp;uk=859141184</a></p>\n<h3 id=\"2-下载以后，可以看到三个文件夹：\"><a href=\"#2-下载以后，可以看到三个文件夹：\" class=\"headerlink\" title=\"2. 下载以后，可以看到三个文件夹：\"></a>2. 下载以后，可以看到三个文件夹：</h3><p>AndroidPushNotificationsDemo(Android端)、rsmb(服务端工具)、send_mqtt(服务端)</p>\n<h4 id=\"Android端需要注意的是：\"><a href=\"#Android端需要注意的是：\" class=\"headerlink\" title=\"Android端需要注意的是：\"></a>Android端需要注意的是：</h4><ol>\n<li>导入以后记得勾选有关包<br>2.PushService.java中配置MQTT_HOST为可解析的对应的服务端地址（要能ping的通的）（比如我这边用send_mqtt.dreamtobe.cn)</li>\n</ol>\n<h4 id=\"服务端需要注意的是：\"><a href=\"#服务端需要注意的是：\" class=\"headerlink\" title=\"服务端需要注意的是：\"></a>服务端需要注意的是：</h4><ol>\n<li>修改send_mqtt/etc下的config.php中的MQTT_SERVER_HOST为对应的服务器ip.</li>\n<li>对应自己服务器系统。打开rsmb中的broker(比如centos 32，请运行./linux_ia32/broker即可）</li>\n</ol>\n<h2 id=\"我这边已经调配好一个：\"><a href=\"#我这边已经调配好一个：\" class=\"headerlink\" title=\"我这边已经调配好一个：\"></a>我这边已经调配好一个：</h2><p><a href=\"http://send_mqtt.dreamtobe.cn\" target=\"_blank\" rel=\"external\">http://send_mqtt.dreamtobe.cn</a></p>\n<p>大家可以设置这边下载的开源代码，并且设置对应的MQTT_HOST为send_mqtt.dreamtobe.cn进行测试<br>如上已经配置好。</p>\n<blockquote>\n<p>下面配置一款基于XMPP协议的开源项目AndroidPn（我这边只针对Tomcat）:</p>\n</blockquote>\n<h3 id=\"1-先下载对应需要准备的文件：\"><a href=\"#1-先下载对应需要准备的文件：\" class=\"headerlink\" title=\"1. 先下载对应需要准备的文件：\"></a>1. 先下载对应需要准备的文件：</h3><p><a href=\"http://pan.baidu.com/share/link?shareid=3761244206&amp;uk=859141184\" target=\"_blank\" rel=\"external\">http://pan.baidu.com/share/link?shareid=3761244206&amp;uk=859141184</a></p>\n<h3 id=\"2-下载以后解压，有两个文件夹：\"><a href=\"#2-下载以后解压，有两个文件夹：\" class=\"headerlink\" title=\"2. 下载以后解压，有两个文件夹：\"></a>2. 下载以后解压，有两个文件夹：</h3><p>androidpn-client(客户端)、Androidpn-tomcat(服务端)</p>\n<h4 id=\"客户端需要注意：\"><a href=\"#客户端需要注意：\" class=\"headerlink\" title=\"客户端需要注意：\"></a>客户端需要注意：</h4><ol>\n<li>修改raw中androidpn.properties的xmppHost为服务器的ip.<br>服务端注意:</li>\n<li>导入myeclipse后，打开resources中的jdbc.properties 设置对应mysql的用户名密码（jdbcUsername、jdbcPassword)。</li>\n<li>设置jdbc.properties中的数据库名(下面test部分)：<br>jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull</li>\n<li>创建数据库(假设上面数据库名填写test):<br><code>create database test;</code></li>\n<li>完成配置</li>\n</ol>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>最近刚好公司需要用到推送，就做了一些分析并且成功的调通了几个通用的项目。<br>首先说下Android的推送，不像Ios的已经有了很好的C2DM的机制，虽然谷歌也提供这种机制的推送，不过介于国内…</p>\n</blockquote>","more":"<p>下面对一些主流的几个方案进行分析，这里参考网络上的一些分析:</p>\n<h2 id=\"方案1、使用GCM服务（Google-Cloud-Messaging）\"><a href=\"#方案1、使用GCM服务（Google-Cloud-Messaging）\" class=\"headerlink\" title=\"方案1、使用GCM服务（Google Cloud Messaging）\"></a>方案1、使用GCM服务（Google Cloud Messaging）</h2><blockquote>\n<p>简介：Google推出的云消息服务，即第二代的C2DM。</p>\n</blockquote>\n<ul>\n<li>优点：Google提供的服务、原生、简单，无需实现和部署服务端。</li>\n<li>缺点：Android版本限制（必须大于2.2版本），该服务在国内不够稳定、需要用户绑定Google帐号，受限于Google。</li>\n</ul>\n<h2 id=\"方案2、使用XMPP协议（Openfire-Spark-Smack）\"><a href=\"#方案2、使用XMPP协议（Openfire-Spark-Smack）\" class=\"headerlink\" title=\"方案2、使用XMPP协议（Openfire + Spark + Smack）\"></a>方案2、使用XMPP协议（Openfire + Spark + Smack）</h2><blockquote>\n<p>简介：基于XML协议的通讯协议，前身是Jabber，目前已由IETF国际标准化组织完成了标准化工作。</p>\n</blockquote>\n<ul>\n<li>优点：协议成熟、强大、可扩展性强、目前主要应用于许多聊天系统中，且已有开源的Java版的开发实例androidpn。</li>\n<li>缺点：协议较复杂、冗余（基于XML）、费流量、费电，部署硬件成本高。</li>\n</ul>\n<h2 id=\"方案3、使用MQTT协议（更多信息见：http-mqtt-org-）\"><a href=\"#方案3、使用MQTT协议（更多信息见：http-mqtt-org-）\" class=\"headerlink\" title=\"方案3、使用MQTT协议（更多信息见：http://mqtt.org/）\"></a>方案3、使用MQTT协议（更多信息见：<a href=\"http://mqtt.org/）\">http://mqtt.org/）</a></h2><blockquote>\n<p>简介：轻量级的、基于代理的“发布/订阅”模式的消息传输协议。</p>\n</blockquote>\n<ul>\n<li>优点：协议简洁、小巧、可扩展性强、省流量、省电，目前已经应用到企业领域（参考：<a href=\"http://mqtt.org/software），且已有C++版的服务端组件rsmb。\">http://mqtt.org/software），且已有C++版的服务端组件rsmb。</a></li>\n<li>缺点：不够成熟、实现较复杂、服务端组件rsmb不开源，部署硬件成本较高。</li>\n</ul>\n<h2 id=\"方案4、使用HTTP轮循方式\"><a href=\"#方案4、使用HTTP轮循方式\" class=\"headerlink\" title=\"方案4、使用HTTP轮循方式\"></a>方案4、使用HTTP轮循方式</h2><blockquote>\n<p>简介：定时向HTTP服务端接口（Web Service API）获取最新消息。</p>\n</blockquote>\n<ul>\n<li>优点：实现简单、可控性强，部署硬件成本低。</li>\n<li>缺点：实时性差。</li>\n</ul>\n<hr>\n<blockquote>\n<p>通过网络上的一些评论，与个人的测试，都是主推MQTT，辅推XMPP的。</p>\n</blockquote>\n<p>下面就MQTT的调配做下记录以备以后使用。</p>\n<h3 id=\"1-首先下载需要的文件：\"><a href=\"#1-首先下载需要的文件：\" class=\"headerlink\" title=\"1. 首先下载需要的文件：\"></a>1. 首先下载需要的文件：</h3><p><a href=\"http://pan.baidu.com/share/link?shareid=3690050211&amp;uk=859141184\">http://pan.baidu.com/share/link?shareid=3690050211&amp;uk=859141184</a></p>\n<h3 id=\"2-下载以后，可以看到三个文件夹：\"><a href=\"#2-下载以后，可以看到三个文件夹：\" class=\"headerlink\" title=\"2. 下载以后，可以看到三个文件夹：\"></a>2. 下载以后，可以看到三个文件夹：</h3><p>AndroidPushNotificationsDemo(Android端)、rsmb(服务端工具)、send_mqtt(服务端)</p>\n<h4 id=\"Android端需要注意的是：\"><a href=\"#Android端需要注意的是：\" class=\"headerlink\" title=\"Android端需要注意的是：\"></a>Android端需要注意的是：</h4><ol>\n<li>导入以后记得勾选有关包<br>2.PushService.java中配置MQTT_HOST为可解析的对应的服务端地址（要能ping的通的）（比如我这边用send_mqtt.dreamtobe.cn)</li>\n</ol>\n<h4 id=\"服务端需要注意的是：\"><a href=\"#服务端需要注意的是：\" class=\"headerlink\" title=\"服务端需要注意的是：\"></a>服务端需要注意的是：</h4><ol>\n<li>修改send_mqtt/etc下的config.php中的MQTT_SERVER_HOST为对应的服务器ip.</li>\n<li>对应自己服务器系统。打开rsmb中的broker(比如centos 32，请运行./linux_ia32/broker即可）</li>\n</ol>\n<h2 id=\"我这边已经调配好一个：\"><a href=\"#我这边已经调配好一个：\" class=\"headerlink\" title=\"我这边已经调配好一个：\"></a>我这边已经调配好一个：</h2><p><a href=\"http://send_mqtt.dreamtobe.cn\">http://send_mqtt.dreamtobe.cn</a></p>\n<p>大家可以设置这边下载的开源代码，并且设置对应的MQTT_HOST为send_mqtt.dreamtobe.cn进行测试<br>如上已经配置好。</p>\n<blockquote>\n<p>下面配置一款基于XMPP协议的开源项目AndroidPn（我这边只针对Tomcat）:</p>\n</blockquote>\n<h3 id=\"1-先下载对应需要准备的文件：\"><a href=\"#1-先下载对应需要准备的文件：\" class=\"headerlink\" title=\"1. 先下载对应需要准备的文件：\"></a>1. 先下载对应需要准备的文件：</h3><p><a href=\"http://pan.baidu.com/share/link?shareid=3761244206&amp;uk=859141184\">http://pan.baidu.com/share/link?shareid=3761244206&amp;uk=859141184</a></p>\n<h3 id=\"2-下载以后解压，有两个文件夹：\"><a href=\"#2-下载以后解压，有两个文件夹：\" class=\"headerlink\" title=\"2. 下载以后解压，有两个文件夹：\"></a>2. 下载以后解压，有两个文件夹：</h3><p>androidpn-client(客户端)、Androidpn-tomcat(服务端)</p>\n<h4 id=\"客户端需要注意：\"><a href=\"#客户端需要注意：\" class=\"headerlink\" title=\"客户端需要注意：\"></a>客户端需要注意：</h4><ol>\n<li>修改raw中androidpn.properties的xmppHost为服务器的ip.<br>服务端注意:</li>\n<li>导入myeclipse后，打开resources中的jdbc.properties 设置对应mysql的用户名密码（jdbcUsername、jdbcPassword)。</li>\n<li>设置jdbc.properties中的数据库名(下面test部分)：<br>jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull</li>\n<li>创建数据库(假设上面数据库名填写test):<br><code>create database test;</code></li>\n<li>完成配置</li>\n</ol>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"Android网络","date":"2015-03-28T00:35:03.000Z","_content":"\n> 文章整理自内部网络模块同事一些课程的分享时所做的一些笔记\n\n## I. 无线网络的影响\n\n##### 1) 无线网络物理影响:\n\n- 丢包多\n- 带宽受限\n\n<!--more-->\n##### 2) 无线网络第三方影响:\n\n- 第三方运营商中间做手脚\n\n## II. 解决不稳定手段--TCP\n\n##### TCP在移动网络中的缺陷\n不是基于移动网络优化的\n\n##### 最优网络的关键点\n\n- 超时\n- 重试\n- 间隔设计\n\n##### TCP自带可靠性保障\n\n- 序号 确认\n\n- 检验和（但不可靠)\n\t可以保证每个包是对的，10G左右的文件就会出现错误（检验和的错误（几种不通过的检验和达到一个对的/第三方运营商做手脚））\n\n- 超时重传(TCP中最重要与复杂的问题)\n\t发送每个报文都有**计时器**保障在计时器的时间里 是否有答复（无答复**重发**） (3s/6s/12s/24s/48s/96s  3*2^n)\n\t重发：**无网络感知**，网络断开会无限重发，所以需要做`超时`处理\n\n\n> ps: 网络有可能出现雪崩（网络资源供不应求（所以TCP是`指数退避`的机制BLG））\n\n\n##### 针对关键点策略\n\n- Connect超时\n\t(ios TCP: 6s前 重试: 每次间隔1s)\n\n- 首包超时\n\t发一个数据出去，服务器的答复时间，来确定是否网络有问题\n\n    > ps: 微信是 (数据长度/估计速度(根据网络类型估算) + 服务器处理时间(Wechat Server(10s))) 相关于 (并行处理的系数(竞争任务数*系数))\n\n- 分包超时\n\t解决网络偶断的问题\n\twechat : GPRS: 10s、 Wifi: 8s\n\n- 读写超时\n\t（微信 64k回包）(2g 10k/s 6s服务器处理时间，要30s)\n\t通过`首包超时`与`分包超时`减少 TCP重试间隔 来加快读写\n\n     > ps: 微信是 首包超时 + 接收数据长度/估算速度\n\n- 重试次数\n\t两次（因为第一次失败可能是偶然，第二次偶然失败概率很低（那就很有可能必然失败））\n\n- 重试间隔\n\t第一次重试快重试（间隔小），第二重试慢重试（间隔大）\n\n- 任务超时\n\t统一的返回时间，无论以上任何因素的表现如何，任务超时时间统一。\n\n## III. 处理带宽受限问题\n\n##### 解决问题关键字\n- 速度(发图)\n- 最低失败成本（断点续传）\n\n##### 两点场景\n\n1. 接收方处理能力不足\n2. 线路内部堵塞\n\n##### TCP自带的解决方案\n- 滑动窗口协议\n\t发送窗口长度 计算： Min[rwnd(接收端窗口)(TCP中的一个字段从服务器带回来), cwnd(拥塞端口（通过探测获得）)]\n\n- 慢开始和拥塞避免\n\t 避免算法\n\n- 快重传\n\n##### 最高速因数\n\n- 减少send调用次数\n\n- 写满TCP发送buffer（填满发送窗口）\n\n- 控制好数据处理线程（提高处理能力来提高速度）（接收方策略）(接收方每次读一次数据，接收窗口就会变大，(Android写磁盘效率低，秒级))\n\n- 单socket vs 多 socket\n\n\n## IV. 长链接需要注意\n\n##### DNS特点:\n\n- 不可靠\n\n\t运营商劫持、运营商控制超时控制（域名解析更新）、可用信息、批量解释的优化。\n\n    > ps: 微信是自建DNS服务器\n\n\n#### 长链接\n\n##### 为什么需要心跳:\n- 保证连接有效（防止中间与微信后台 资源回收）\n\n- TCP在链路层上需要发送数据的时候，才会得到信令\n\n    > ps: 微信心跳时间: 5min\n\n\n##### 信令风暴\n心跳等导致频繁的请求信令。（目前在国内是移动渠道比较多）\n\n#### 资源回收情况:\n- 3/4G网络\n\t国内情况：移动之前是5min，目前10min。\n\t国外情况: google是10min/28min\n\n- 智能心跳\n\t自己探测处理\n\n\t移动在5min、10min、15min。\n\t联通与电信都在: 10min\n\n## V. 应用层协议设计\n\n##### 网络协议:\n1. HTTP、TCP、FTP....\n\n内容组织 => 网络通道 => 服务器 => 回包\n\n##### 网络协议关键字\n\n###### 1. 语法（如何组织表达的内容）\n\n1) 文本:\n\t`diy`、`k-v`、`xml`(编解码慢)、`json`\n\n2) 二进制(需要自描述(类型、长度)):\n\t`TLV`(Tag-Length-Value)、`Protobuf`\n\n\n3) 其他\n\n\n###### 2. 语义（表达内容(格式的设计)）\n\n**需要考虑的**: 可扩展、兼容、并发、高效实时、省流量\n\n协议内容:\n\n1) 业务数据\n\n2) 信令数据:\n\t分包(octet-stuffing、octet-counting、connect-blasting)、并发处理(序列号、命令号)、兼容性&拓展性（版本号，压缩算法、加密算法）、精简(严格按照packed所需大小)\n\n###### 3. 时序（先后顺序）\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/Android网络学习笔记整理.md","raw":"title: Android网络\ndate: 2015-03-28 08:35:03\npermalink: 2015/03/28/Android网络学习笔记整理\ntags:\n- Android\n- socket\n- TCP\n- 微信\n- 网络\n\n---\n\n> 文章整理自内部网络模块同事一些课程的分享时所做的一些笔记\n\n## I. 无线网络的影响\n\n##### 1) 无线网络物理影响:\n\n- 丢包多\n- 带宽受限\n\n<!--more-->\n##### 2) 无线网络第三方影响:\n\n- 第三方运营商中间做手脚\n\n## II. 解决不稳定手段--TCP\n\n##### TCP在移动网络中的缺陷\n不是基于移动网络优化的\n\n##### 最优网络的关键点\n\n- 超时\n- 重试\n- 间隔设计\n\n##### TCP自带可靠性保障\n\n- 序号 确认\n\n- 检验和（但不可靠)\n\t可以保证每个包是对的，10G左右的文件就会出现错误（检验和的错误（几种不通过的检验和达到一个对的/第三方运营商做手脚））\n\n- 超时重传(TCP中最重要与复杂的问题)\n\t发送每个报文都有**计时器**保障在计时器的时间里 是否有答复（无答复**重发**） (3s/6s/12s/24s/48s/96s  3*2^n)\n\t重发：**无网络感知**，网络断开会无限重发，所以需要做`超时`处理\n\n\n> ps: 网络有可能出现雪崩（网络资源供不应求（所以TCP是`指数退避`的机制BLG））\n\n\n##### 针对关键点策略\n\n- Connect超时\n\t(ios TCP: 6s前 重试: 每次间隔1s)\n\n- 首包超时\n\t发一个数据出去，服务器的答复时间，来确定是否网络有问题\n\n    > ps: 微信是 (数据长度/估计速度(根据网络类型估算) + 服务器处理时间(Wechat Server(10s))) 相关于 (并行处理的系数(竞争任务数*系数))\n\n- 分包超时\n\t解决网络偶断的问题\n\twechat : GPRS: 10s、 Wifi: 8s\n\n- 读写超时\n\t（微信 64k回包）(2g 10k/s 6s服务器处理时间，要30s)\n\t通过`首包超时`与`分包超时`减少 TCP重试间隔 来加快读写\n\n     > ps: 微信是 首包超时 + 接收数据长度/估算速度\n\n- 重试次数\n\t两次（因为第一次失败可能是偶然，第二次偶然失败概率很低（那就很有可能必然失败））\n\n- 重试间隔\n\t第一次重试快重试（间隔小），第二重试慢重试（间隔大）\n\n- 任务超时\n\t统一的返回时间，无论以上任何因素的表现如何，任务超时时间统一。\n\n## III. 处理带宽受限问题\n\n##### 解决问题关键字\n- 速度(发图)\n- 最低失败成本（断点续传）\n\n##### 两点场景\n\n1. 接收方处理能力不足\n2. 线路内部堵塞\n\n##### TCP自带的解决方案\n- 滑动窗口协议\n\t发送窗口长度 计算： Min[rwnd(接收端窗口)(TCP中的一个字段从服务器带回来), cwnd(拥塞端口（通过探测获得）)]\n\n- 慢开始和拥塞避免\n\t 避免算法\n\n- 快重传\n\n##### 最高速因数\n\n- 减少send调用次数\n\n- 写满TCP发送buffer（填满发送窗口）\n\n- 控制好数据处理线程（提高处理能力来提高速度）（接收方策略）(接收方每次读一次数据，接收窗口就会变大，(Android写磁盘效率低，秒级))\n\n- 单socket vs 多 socket\n\n\n## IV. 长链接需要注意\n\n##### DNS特点:\n\n- 不可靠\n\n\t运营商劫持、运营商控制超时控制（域名解析更新）、可用信息、批量解释的优化。\n\n    > ps: 微信是自建DNS服务器\n\n\n#### 长链接\n\n##### 为什么需要心跳:\n- 保证连接有效（防止中间与微信后台 资源回收）\n\n- TCP在链路层上需要发送数据的时候，才会得到信令\n\n    > ps: 微信心跳时间: 5min\n\n\n##### 信令风暴\n心跳等导致频繁的请求信令。（目前在国内是移动渠道比较多）\n\n#### 资源回收情况:\n- 3/4G网络\n\t国内情况：移动之前是5min，目前10min。\n\t国外情况: google是10min/28min\n\n- 智能心跳\n\t自己探测处理\n\n\t移动在5min、10min、15min。\n\t联通与电信都在: 10min\n\n## V. 应用层协议设计\n\n##### 网络协议:\n1. HTTP、TCP、FTP....\n\n内容组织 => 网络通道 => 服务器 => 回包\n\n##### 网络协议关键字\n\n###### 1. 语法（如何组织表达的内容）\n\n1) 文本:\n\t`diy`、`k-v`、`xml`(编解码慢)、`json`\n\n2) 二进制(需要自描述(类型、长度)):\n\t`TLV`(Tag-Length-Value)、`Protobuf`\n\n\n3) 其他\n\n\n###### 2. 语义（表达内容(格式的设计)）\n\n**需要考虑的**: 可扩展、兼容、并发、高效实时、省流量\n\n协议内容:\n\n1) 业务数据\n\n2) 信令数据:\n\t分包(octet-stuffing、octet-counting、connect-blasting)、并发处理(序列号、命令号)、兼容性&拓展性（版本号，压缩算法、加密算法）、精简(严格按照packed所需大小)\n\n###### 3. 时序（先后顺序）\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2015/03/28/Android网络学习笔记整理","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66hn000c95bu5f1o20aw","content":"<blockquote>\n<p>文章整理自内部网络模块同事一些课程的分享时所做的一些笔记</p>\n</blockquote>\n<h2 id=\"I-无线网络的影响\"><a href=\"#I-无线网络的影响\" class=\"headerlink\" title=\"I. 无线网络的影响\"></a>I. 无线网络的影响</h2><h5 id=\"1-无线网络物理影响\"><a href=\"#1-无线网络物理影响\" class=\"headerlink\" title=\"1) 无线网络物理影响:\"></a>1) 无线网络物理影响:</h5><ul>\n<li>丢包多</li>\n<li>带宽受限</li>\n</ul>\n<a id=\"more\"></a>\n<h5 id=\"2-无线网络第三方影响\"><a href=\"#2-无线网络第三方影响\" class=\"headerlink\" title=\"2) 无线网络第三方影响:\"></a>2) 无线网络第三方影响:</h5><ul>\n<li>第三方运营商中间做手脚</li>\n</ul>\n<h2 id=\"II-解决不稳定手段–TCP\"><a href=\"#II-解决不稳定手段–TCP\" class=\"headerlink\" title=\"II. 解决不稳定手段–TCP\"></a>II. 解决不稳定手段–TCP</h2><h5 id=\"TCP在移动网络中的缺陷\"><a href=\"#TCP在移动网络中的缺陷\" class=\"headerlink\" title=\"TCP在移动网络中的缺陷\"></a>TCP在移动网络中的缺陷</h5><p>不是基于移动网络优化的</p>\n<h5 id=\"最优网络的关键点\"><a href=\"#最优网络的关键点\" class=\"headerlink\" title=\"最优网络的关键点\"></a>最优网络的关键点</h5><ul>\n<li>超时</li>\n<li>重试</li>\n<li>间隔设计</li>\n</ul>\n<h5 id=\"TCP自带可靠性保障\"><a href=\"#TCP自带可靠性保障\" class=\"headerlink\" title=\"TCP自带可靠性保障\"></a>TCP自带可靠性保障</h5><ul>\n<li><p>序号 确认</p>\n</li>\n<li><p>检验和（但不可靠)<br>  可以保证每个包是对的，10G左右的文件就会出现错误（检验和的错误（几种不通过的检验和达到一个对的/第三方运营商做手脚））</p>\n</li>\n<li><p>超时重传(TCP中最重要与复杂的问题)<br>  发送每个报文都有<strong>计时器</strong>保障在计时器的时间里 是否有答复（无答复<strong>重发</strong>） (3s/6s/12s/24s/48s/96s  3<em>2^n)<br>  重发：<em>*无网络感知</em></em>，网络断开会无限重发，所以需要做<code>超时</code>处理</p>\n</li>\n</ul>\n<blockquote>\n<p>ps: 网络有可能出现雪崩（网络资源供不应求（所以TCP是<code>指数退避</code>的机制BLG））</p>\n</blockquote>\n<h5 id=\"针对关键点策略\"><a href=\"#针对关键点策略\" class=\"headerlink\" title=\"针对关键点策略\"></a>针对关键点策略</h5><ul>\n<li><p>Connect超时<br>  (ios TCP: 6s前 重试: 每次间隔1s)</p>\n</li>\n<li><p>首包超时<br>  发一个数据出去，服务器的答复时间，来确定是否网络有问题</p>\n<blockquote>\n<p>ps: 微信是 (数据长度/估计速度(根据网络类型估算) + 服务器处理时间(Wechat Server(10s))) 相关于 (并行处理的系数(竞争任务数*系数))</p>\n</blockquote>\n</li>\n<li><p>分包超时<br>  解决网络偶断的问题<br>  wechat : GPRS: 10s、 Wifi: 8s</p>\n</li>\n<li><p>读写超时<br>  （微信 64k回包）(2g 10k/s 6s服务器处理时间，要30s)<br>  通过<code>首包超时</code>与<code>分包超时</code>减少 TCP重试间隔 来加快读写</p>\n<blockquote>\n<p>ps: 微信是 首包超时 + 接收数据长度/估算速度</p>\n</blockquote>\n</li>\n<li><p>重试次数<br>  两次（因为第一次失败可能是偶然，第二次偶然失败概率很低（那就很有可能必然失败））</p>\n</li>\n<li><p>重试间隔<br>  第一次重试快重试（间隔小），第二重试慢重试（间隔大）</p>\n</li>\n<li><p>任务超时<br>  统一的返回时间，无论以上任何因素的表现如何，任务超时时间统一。</p>\n</li>\n</ul>\n<h2 id=\"III-处理带宽受限问题\"><a href=\"#III-处理带宽受限问题\" class=\"headerlink\" title=\"III. 处理带宽受限问题\"></a>III. 处理带宽受限问题</h2><h5 id=\"解决问题关键字\"><a href=\"#解决问题关键字\" class=\"headerlink\" title=\"解决问题关键字\"></a>解决问题关键字</h5><ul>\n<li>速度(发图)</li>\n<li>最低失败成本（断点续传）</li>\n</ul>\n<h5 id=\"两点场景\"><a href=\"#两点场景\" class=\"headerlink\" title=\"两点场景\"></a>两点场景</h5><ol>\n<li>接收方处理能力不足</li>\n<li>线路内部堵塞</li>\n</ol>\n<h5 id=\"TCP自带的解决方案\"><a href=\"#TCP自带的解决方案\" class=\"headerlink\" title=\"TCP自带的解决方案\"></a>TCP自带的解决方案</h5><ul>\n<li><p>滑动窗口协议<br>  发送窗口长度 计算： Min[rwnd(接收端窗口)(TCP中的一个字段从服务器带回来), cwnd(拥塞端口（通过探测获得）)]</p>\n</li>\n<li><p>慢开始和拥塞避免<br>   避免算法</p>\n</li>\n<li><p>快重传</p>\n</li>\n</ul>\n<h5 id=\"最高速因数\"><a href=\"#最高速因数\" class=\"headerlink\" title=\"最高速因数\"></a>最高速因数</h5><ul>\n<li><p>减少send调用次数</p>\n</li>\n<li><p>写满TCP发送buffer（填满发送窗口）</p>\n</li>\n<li><p>控制好数据处理线程（提高处理能力来提高速度）（接收方策略）(接收方每次读一次数据，接收窗口就会变大，(Android写磁盘效率低，秒级))</p>\n</li>\n<li><p>单socket vs 多 socket</p>\n</li>\n</ul>\n<h2 id=\"IV-长链接需要注意\"><a href=\"#IV-长链接需要注意\" class=\"headerlink\" title=\"IV. 长链接需要注意\"></a>IV. 长链接需要注意</h2><h5 id=\"DNS特点\"><a href=\"#DNS特点\" class=\"headerlink\" title=\"DNS特点:\"></a>DNS特点:</h5><ul>\n<li><p>不可靠</p>\n<p>  运营商劫持、运营商控制超时控制（域名解析更新）、可用信息、批量解释的优化。</p>\n<blockquote>\n<p>ps: 微信是自建DNS服务器</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"长链接\"><a href=\"#长链接\" class=\"headerlink\" title=\"长链接\"></a>长链接</h4><h5 id=\"为什么需要心跳\"><a href=\"#为什么需要心跳\" class=\"headerlink\" title=\"为什么需要心跳:\"></a>为什么需要心跳:</h5><ul>\n<li><p>保证连接有效（防止中间与微信后台 资源回收）</p>\n</li>\n<li><p>TCP在链路层上需要发送数据的时候，才会得到信令</p>\n<blockquote>\n<p>ps: 微信心跳时间: 5min</p>\n</blockquote>\n</li>\n</ul>\n<h5 id=\"信令风暴\"><a href=\"#信令风暴\" class=\"headerlink\" title=\"信令风暴\"></a>信令风暴</h5><p>心跳等导致频繁的请求信令。（目前在国内是移动渠道比较多）</p>\n<h4 id=\"资源回收情况\"><a href=\"#资源回收情况\" class=\"headerlink\" title=\"资源回收情况:\"></a>资源回收情况:</h4><ul>\n<li><p>3/4G网络<br>  国内情况：移动之前是5min，目前10min。<br>  国外情况: google是10min/28min</p>\n</li>\n<li><p>智能心跳<br>  自己探测处理</p>\n<p>  移动在5min、10min、15min。<br>  联通与电信都在: 10min</p>\n</li>\n</ul>\n<h2 id=\"V-应用层协议设计\"><a href=\"#V-应用层协议设计\" class=\"headerlink\" title=\"V. 应用层协议设计\"></a>V. 应用层协议设计</h2><h5 id=\"网络协议\"><a href=\"#网络协议\" class=\"headerlink\" title=\"网络协议:\"></a>网络协议:</h5><ol>\n<li>HTTP、TCP、FTP….</li>\n</ol>\n<p>内容组织 =&gt; 网络通道 =&gt; 服务器 =&gt; 回包</p>\n<h5 id=\"网络协议关键字\"><a href=\"#网络协议关键字\" class=\"headerlink\" title=\"网络协议关键字\"></a>网络协议关键字</h5><h6 id=\"1-语法（如何组织表达的内容）\"><a href=\"#1-语法（如何组织表达的内容）\" class=\"headerlink\" title=\"1. 语法（如何组织表达的内容）\"></a>1. 语法（如何组织表达的内容）</h6><p>1) 文本:<br>    <code>diy</code>、<code>k-v</code>、<code>xml</code>(编解码慢)、<code>json</code></p>\n<p>2) 二进制(需要自描述(类型、长度)):<br>    <code>TLV</code>(Tag-Length-Value)、<code>Protobuf</code></p>\n<p>3) 其他</p>\n<h6 id=\"2-语义（表达内容-格式的设计-）\"><a href=\"#2-语义（表达内容-格式的设计-）\" class=\"headerlink\" title=\"2. 语义（表达内容(格式的设计)）\"></a>2. 语义（表达内容(格式的设计)）</h6><p><strong>需要考虑的</strong>: 可扩展、兼容、并发、高效实时、省流量</p>\n<p>协议内容:</p>\n<p>1) 业务数据</p>\n<p>2) 信令数据:<br>    分包(octet-stuffing、octet-counting、connect-blasting)、并发处理(序列号、命令号)、兼容性&amp;拓展性（版本号，压缩算法、加密算法）、精简(严格按照packed所需大小)</p>\n<h6 id=\"3-时序（先后顺序）\"><a href=\"#3-时序（先后顺序）\" class=\"headerlink\" title=\"3. 时序（先后顺序）\"></a>3. 时序（先后顺序）</h6><hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>文章整理自内部网络模块同事一些课程的分享时所做的一些笔记</p>\n</blockquote>\n<h2 id=\"I-无线网络的影响\"><a href=\"#I-无线网络的影响\" class=\"headerlink\" title=\"I. 无线网络的影响\"></a>I. 无线网络的影响</h2><h5 id=\"1-无线网络物理影响\"><a href=\"#1-无线网络物理影响\" class=\"headerlink\" title=\"1) 无线网络物理影响:\"></a>1) 无线网络物理影响:</h5><ul>\n<li>丢包多</li>\n<li>带宽受限</li>\n</ul>","more":"<h5 id=\"2-无线网络第三方影响\"><a href=\"#2-无线网络第三方影响\" class=\"headerlink\" title=\"2) 无线网络第三方影响:\"></a>2) 无线网络第三方影响:</h5><ul>\n<li>第三方运营商中间做手脚</li>\n</ul>\n<h2 id=\"II-解决不稳定手段–TCP\"><a href=\"#II-解决不稳定手段–TCP\" class=\"headerlink\" title=\"II. 解决不稳定手段–TCP\"></a>II. 解决不稳定手段–TCP</h2><h5 id=\"TCP在移动网络中的缺陷\"><a href=\"#TCP在移动网络中的缺陷\" class=\"headerlink\" title=\"TCP在移动网络中的缺陷\"></a>TCP在移动网络中的缺陷</h5><p>不是基于移动网络优化的</p>\n<h5 id=\"最优网络的关键点\"><a href=\"#最优网络的关键点\" class=\"headerlink\" title=\"最优网络的关键点\"></a>最优网络的关键点</h5><ul>\n<li>超时</li>\n<li>重试</li>\n<li>间隔设计</li>\n</ul>\n<h5 id=\"TCP自带可靠性保障\"><a href=\"#TCP自带可靠性保障\" class=\"headerlink\" title=\"TCP自带可靠性保障\"></a>TCP自带可靠性保障</h5><ul>\n<li><p>序号 确认</p>\n</li>\n<li><p>检验和（但不可靠)<br>  可以保证每个包是对的，10G左右的文件就会出现错误（检验和的错误（几种不通过的检验和达到一个对的/第三方运营商做手脚））</p>\n</li>\n<li><p>超时重传(TCP中最重要与复杂的问题)<br>  发送每个报文都有<strong>计时器</strong>保障在计时器的时间里 是否有答复（无答复<strong>重发</strong>） (3s/6s/12s/24s/48s/96s  3<em>2^n)<br>  重发：<em>*无网络感知</em></em>，网络断开会无限重发，所以需要做<code>超时</code>处理</p>\n</li>\n</ul>\n<blockquote>\n<p>ps: 网络有可能出现雪崩（网络资源供不应求（所以TCP是<code>指数退避</code>的机制BLG））</p>\n</blockquote>\n<h5 id=\"针对关键点策略\"><a href=\"#针对关键点策略\" class=\"headerlink\" title=\"针对关键点策略\"></a>针对关键点策略</h5><ul>\n<li><p>Connect超时<br>  (ios TCP: 6s前 重试: 每次间隔1s)</p>\n</li>\n<li><p>首包超时<br>  发一个数据出去，服务器的答复时间，来确定是否网络有问题</p>\n<blockquote>\n<p>ps: 微信是 (数据长度/估计速度(根据网络类型估算) + 服务器处理时间(Wechat Server(10s))) 相关于 (并行处理的系数(竞争任务数*系数))</p>\n</blockquote>\n</li>\n<li><p>分包超时<br>  解决网络偶断的问题<br>  wechat : GPRS: 10s、 Wifi: 8s</p>\n</li>\n<li><p>读写超时<br>  （微信 64k回包）(2g 10k/s 6s服务器处理时间，要30s)<br>  通过<code>首包超时</code>与<code>分包超时</code>减少 TCP重试间隔 来加快读写</p>\n<blockquote>\n<p>ps: 微信是 首包超时 + 接收数据长度/估算速度</p>\n</blockquote>\n</li>\n<li><p>重试次数<br>  两次（因为第一次失败可能是偶然，第二次偶然失败概率很低（那就很有可能必然失败））</p>\n</li>\n<li><p>重试间隔<br>  第一次重试快重试（间隔小），第二重试慢重试（间隔大）</p>\n</li>\n<li><p>任务超时<br>  统一的返回时间，无论以上任何因素的表现如何，任务超时时间统一。</p>\n</li>\n</ul>\n<h2 id=\"III-处理带宽受限问题\"><a href=\"#III-处理带宽受限问题\" class=\"headerlink\" title=\"III. 处理带宽受限问题\"></a>III. 处理带宽受限问题</h2><h5 id=\"解决问题关键字\"><a href=\"#解决问题关键字\" class=\"headerlink\" title=\"解决问题关键字\"></a>解决问题关键字</h5><ul>\n<li>速度(发图)</li>\n<li>最低失败成本（断点续传）</li>\n</ul>\n<h5 id=\"两点场景\"><a href=\"#两点场景\" class=\"headerlink\" title=\"两点场景\"></a>两点场景</h5><ol>\n<li>接收方处理能力不足</li>\n<li>线路内部堵塞</li>\n</ol>\n<h5 id=\"TCP自带的解决方案\"><a href=\"#TCP自带的解决方案\" class=\"headerlink\" title=\"TCP自带的解决方案\"></a>TCP自带的解决方案</h5><ul>\n<li><p>滑动窗口协议<br>  发送窗口长度 计算： Min[rwnd(接收端窗口)(TCP中的一个字段从服务器带回来), cwnd(拥塞端口（通过探测获得）)]</p>\n</li>\n<li><p>慢开始和拥塞避免<br>   避免算法</p>\n</li>\n<li><p>快重传</p>\n</li>\n</ul>\n<h5 id=\"最高速因数\"><a href=\"#最高速因数\" class=\"headerlink\" title=\"最高速因数\"></a>最高速因数</h5><ul>\n<li><p>减少send调用次数</p>\n</li>\n<li><p>写满TCP发送buffer（填满发送窗口）</p>\n</li>\n<li><p>控制好数据处理线程（提高处理能力来提高速度）（接收方策略）(接收方每次读一次数据，接收窗口就会变大，(Android写磁盘效率低，秒级))</p>\n</li>\n<li><p>单socket vs 多 socket</p>\n</li>\n</ul>\n<h2 id=\"IV-长链接需要注意\"><a href=\"#IV-长链接需要注意\" class=\"headerlink\" title=\"IV. 长链接需要注意\"></a>IV. 长链接需要注意</h2><h5 id=\"DNS特点\"><a href=\"#DNS特点\" class=\"headerlink\" title=\"DNS特点:\"></a>DNS特点:</h5><ul>\n<li><p>不可靠</p>\n<p>  运营商劫持、运营商控制超时控制（域名解析更新）、可用信息、批量解释的优化。</p>\n<blockquote>\n<p>ps: 微信是自建DNS服务器</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"长链接\"><a href=\"#长链接\" class=\"headerlink\" title=\"长链接\"></a>长链接</h4><h5 id=\"为什么需要心跳\"><a href=\"#为什么需要心跳\" class=\"headerlink\" title=\"为什么需要心跳:\"></a>为什么需要心跳:</h5><ul>\n<li><p>保证连接有效（防止中间与微信后台 资源回收）</p>\n</li>\n<li><p>TCP在链路层上需要发送数据的时候，才会得到信令</p>\n<blockquote>\n<p>ps: 微信心跳时间: 5min</p>\n</blockquote>\n</li>\n</ul>\n<h5 id=\"信令风暴\"><a href=\"#信令风暴\" class=\"headerlink\" title=\"信令风暴\"></a>信令风暴</h5><p>心跳等导致频繁的请求信令。（目前在国内是移动渠道比较多）</p>\n<h4 id=\"资源回收情况\"><a href=\"#资源回收情况\" class=\"headerlink\" title=\"资源回收情况:\"></a>资源回收情况:</h4><ul>\n<li><p>3/4G网络<br>  国内情况：移动之前是5min，目前10min。<br>  国外情况: google是10min/28min</p>\n</li>\n<li><p>智能心跳<br>  自己探测处理</p>\n<p>  移动在5min、10min、15min。<br>  联通与电信都在: 10min</p>\n</li>\n</ul>\n<h2 id=\"V-应用层协议设计\"><a href=\"#V-应用层协议设计\" class=\"headerlink\" title=\"V. 应用层协议设计\"></a>V. 应用层协议设计</h2><h5 id=\"网络协议\"><a href=\"#网络协议\" class=\"headerlink\" title=\"网络协议:\"></a>网络协议:</h5><ol>\n<li>HTTP、TCP、FTP….</li>\n</ol>\n<p>内容组织 =&gt; 网络通道 =&gt; 服务器 =&gt; 回包</p>\n<h5 id=\"网络协议关键字\"><a href=\"#网络协议关键字\" class=\"headerlink\" title=\"网络协议关键字\"></a>网络协议关键字</h5><h6 id=\"1-语法（如何组织表达的内容）\"><a href=\"#1-语法（如何组织表达的内容）\" class=\"headerlink\" title=\"1. 语法（如何组织表达的内容）\"></a>1. 语法（如何组织表达的内容）</h6><p>1) 文本:<br>    <code>diy</code>、<code>k-v</code>、<code>xml</code>(编解码慢)、<code>json</code></p>\n<p>2) 二进制(需要自描述(类型、长度)):<br>    <code>TLV</code>(Tag-Length-Value)、<code>Protobuf</code></p>\n<p>3) 其他</p>\n<h6 id=\"2-语义（表达内容-格式的设计-）\"><a href=\"#2-语义（表达内容-格式的设计-）\" class=\"headerlink\" title=\"2. 语义（表达内容(格式的设计)）\"></a>2. 语义（表达内容(格式的设计)）</h6><p><strong>需要考虑的</strong>: 可扩展、兼容、并发、高效实时、省流量</p>\n<p>协议内容:</p>\n<p>1) 业务数据</p>\n<p>2) 信令数据:<br>    分包(octet-stuffing、octet-counting、connect-blasting)、并发处理(序列号、命令号)、兼容性&amp;拓展性（版本号，压缩算法、加密算法）、精简(严格按照packed所需大小)</p>\n<h6 id=\"3-时序（先后顺序）\"><a href=\"#3-时序（先后顺序）\" class=\"headerlink\" title=\"3. 时序（先后顺序）\"></a>3. 时序（先后顺序）</h6><hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"Falcon Pro 3 如何完成独立开发演讲分析","date":"2015-06-14T00:35:03.000Z","_content":"\n> 演讲者: Joaquim\n> 地址: http://realm.io/news/joaquim-verges-making-falcon-pro-3/\n\n## I. 作者介绍\n\n> 工作: UpThere, Palo Alto\n\n主要是简述了，作者的业余项目: Falcon\n\n<!--more-->\n## II. 所用到的库\n\n### 加入了4个library:\n\n1. Picasso\n2. Retrofit\n3. Otto(Event bus)(可选择)\n4. Butter Knife\n\n\n### 新的页面使用Activity:\n\n> 相对于目前盛行的用Fragment替代Activity来提高效率，Joaquim建议新的页面使用Activity\n\n1. 目前在Lollipop上已经有了新的transition API\n2. 可以事件驱动启动，如notification或者是Intent Filter，而不用写一些跳转的逻辑代码\n3. 很好的恢复场景的机制\n同一个Activity里面，复用Fragment(s)\n\n### 缓存机制 ：\n\n> 一个好的App需要一个非常出色的缓存机制\n\n#### 1. ORMLite\n\n> 基于SQLite、开源、基于Java\n\n```\n//表\n@DatabaseTable(tableName = \"accounts\")\npublic class Account {\n\n    @DatabaseField(id = true)\n    private String name;\n\n    @DatabaseField(canBeNull = false)\n    private String password;\n\n    // getters & setters\n}\n```\n\n```\n// 写入数据库\n\n// if you need to create the 'accounts' table make this call\nTableUtils.createTable(connectionSource, Account.class);\n\n// instantiate the DAO to handle Account with String id\nDao<Account, String> accountDao =\n        databaseHelper.getDao(Account.class);\n\n//create an instance of Account\nString name = \"Jim Smith\";\nAccount account = new Account(name, \"_secret\");\n\n// persist the account object to the database\naccountDao.create(account);\n```\n\n```\n// 搜索，读取数据\nQueryBuilder queryBuilder = databaseHelper\n    .getDao(Account.class).queryBuilder();\n\nWhere where = queryBuilder.where();\nwhere.or(\n    where.and(\n      where.eq(\"name\", \"foo\"),\n      where.eq(\"password\", \"_secret\")),\n    where.and(\n      where.eq(\"name\", \"bar\"),\n      where.eq(\"password\", \"qwerty\")\n    )\n);\nwhere.query();\n```\n\n#### 2. Realm (胜出)\n> 基于TightDB，基于C++闭源内核，开源Java绑定(bindings)\n\n牺牲了灵活性，为了让开发更加简单(继承自`RealmObject`)\n\n更加干净，简洁\n\n\n```\n// 表\n\npublic class Account extends RealmObject {\n\n    private String name;\n    private String password;\n\n    // getters & setters\n}\n```\n\n```\n// 写入数据库\n\n// instantiate\nRealm realm = Realm.getInstance(this);// context\n\n// begin transaction\nrealm.beginTransaction();\n\n// create and fill objects to persist\nAccount account = realm.createObject(Account.class);\naccount.setUsername(\"Jim Smith\");\naccount.setPassword(\"_secret\");\n\n// commit the transaction\nrealm.commitTransaction();\n```\n\n```\n// 搜索，读取数据\n\nRealmQuery query = realm.where(Account.class);\n\nquery.beginGroup()\n        .equalTo(\"name\", \"foo\")\n        .equalTo(\"password\", \"_secret\")\n      .endGroup()\n      .or()\n      .beginGroup()\n        .equalTo(\"name\", \"bar\")\n        .equalTo(\"password\", \"_qwerty\")\n      .endGroup();\n\nquery.findAll();\n```\n\n#### 速度对比\n> 搜索 主线程搜索10000数据\n\nRealm声称快**7倍**对比SQLite。\n\nFalcon所有搜索都在主线程，对于作者而言，这是一种解放也是一种改革。\n\n![](/img/Screenshot_6_2_15__3_18_PM.png)\n\n线程方面：\n[NanoTasks](https://github.com/fabiendevos/nanotasks) 对AsyncTasks封装\n\n```\nTasks.executeInBackground(context, new BackgroundWork<Data>() {\n    @Override\n    public Data doInBackground() throws Exception {\n        return fetchData(); // expensive operation\n    }\n}, new Completion<Data>() {\n    @Override\n    public void onSuccess(Context context, Data result) {\n        display(result);\n    }\n    @Override\n    public void onError(Context context, Exception e) {\n        showError(e);\n    }\n});\n```\n\n\n## III. UI\n\n### 1. 使用RecyclerView 替代ListView\n\n#### 缺点:\nListView: 3,905行代码 + AbsListView中7,314行代码\nRecyclerView: 一个巨大的class，中8,427行\n\n#### 优点:\n1. 提供了插入和删除的附加动画\n2. 更好的处理未知变化\n\n```\nRecyclerView recyclerView = new RecyclerView(getActivity());\nLinearLayoutManager layoutManager = new LinearLayoutManager(getActivity());\nrecyclerView.setLayoutManager(layoutManager);\n\nlayoutManager.scollToPosition(0);\nrecyclerView.scrollToPosition(0);\n```\n\n## IV. 动画\n\n#### Android L:\n1. Activity Transitions\n2. Shared elements\n\n实际应用的时候，需要注意的是，动画应该是在Vieww已经完全加载好了（有可能需要动画的部分数据是需要来自网络）之后开始，可以采用的解决方法:\n1. 延时启动过渡(postpone start transition)\n2. 启动延时过渡(start postpone transition)\n\nps: support包有一个简单的判断是Android L的静态方法:`versionUtils.isAtLeastL`\n\n#### LayoutTransitions ( API 1开始就有):\n\n非常强大，布局变化或者Visible/Gone这类的切换动画。考虑用这个，简单强大。\n\n#### AnimationUtils\n\n一般的动画，可以参考下github上其他人的一些好的封装，做一些简单的fade啊、slide啊、缩放啊非常方便。\n\n\n## V. 帧率控制\n\n> Android 保持在60Hz，16ms 每次draw\n\n### 1) 不要做\n\n#### 1. View层级不要太深\n\n 保持Layout平坦，不要有深层级\n\n#### 2. 谨慎创建对象(避免在View draw流程中（onMearsure、onLayout、onDraw...）创建对象\n\n因为gc会带来很多帧率上的损失\n\n#### 3. 减少重绘\n\n保证尽量少的 不透明背景 相互覆盖，因为GPU 不得不一遍又一遍的画这些图层。\n\n### 2) 可以使用的Android系统的工具\n\n> 这些在 1、2在设置->开发者选项 里面，3、4是Android Studio上的功能\n\n#### 1. GPU 呈现模式分析(GPU Rendering Profiling)\n\n> 可以分析出哪些是在16ms以内，什么时候超过了16ms（60Hz，掉帧哦~...）\n\n**千万避免在View中设置透明度**，特别是在自定义的View上（一般来说ImageView、TextView(ButtonView..)是没有问题的），Falcon作者，在一次检测GPU呈现模式的时候，发现一个设置透明度，导致了Frame的渲染慢了一倍多。\n\n具体原因是由于，一旦设置了Alpha，每次draw 那个View都不得不 清除绘制缓存(Flush Buffer)，然后再绘制到屏幕上，效果如右图(顶部的那几个小点setAlpha(0.5*255))。\n\n![](/img/Falcon-font.png)\n\n#### 2. 调试CPU过渡绘制\n\n检测重绘神器。\n\n#### 3. 内存监控\n\nAndroid Studio上的一个功能。\n\n#### 4. 内存创建跟踪(Allocation tracker)\n\n也是Android Studio上的一个功能。\n\n具体教程可以看这里: [https://developer.android.com/tools/debugging/debugging-studio.html#allocTracker](https://developer.android.com/tools/debugging/debugging-studio.html#allocTracker)\n\n\n## VI. 设计\n\n> Falcon 可是 Joaquim自己设计的!\n\n#### 1. 草图\n可以使用软件sketch\n\n#### 2. 颜色选择方面\n\n可以使用[coolors.co](http://coolors.co/)，可以很快的定位好整个app的颜色。Joaquim大概就用了10分钟\n\n这边我也推荐一个[Paletton.com](http://paletton.com/#uid=72P0+0kllllaFw0g0qFqFg0w0aF),也很不错。\n\n#### 3. Icon\n\n说实话作为开发，确实不愿意花太多时间去设计icon，但是Google对外开放了200多个icon素材。\n\n**更好的方法**: 一款intellij(或者Android Studio（同一平台idea）)的插件: [https://github.com/konifar/android-material-design-icon-generator-plugin](https://github.com/konifar/android-material-design-icon-generator-plugin) 自动生成Material icon确实好屌。\n\n#### 4. 字体方面\n\nJoaquim只用了Android SDK的: `android:font_family`，完全够用：\n\n![](/img/SQLite___Core_Data.png)\n\n#### 5. 视觉宗旨定义\n\nJoaquim定位Falcon是内容至上。\n\n## VII. Crash报告与分析\n\nFalcon使用了: [Crashlytics](https://try.crashlytics.com/)，评价很高，一行代码，搞定90%的需求。\n\n## VIII. 安全\n\n### 1. 混淆\n\n最基本的保障，反编译以后极大减小可读性。\n\n### 2. LVL\n\n> The License verification library from Google\n\n不值得，如果说要保证交易安全，应该在成交之前，在自己的服务器上做更多的验证（EAPs）\n\n## IX. Beta\n\nJoaquim不建议到Google+ communites做测试，没啥用。\n\n## X. 发布\n\n### 1. 视频肯定要的\n\nadb shell screenrecord\n\n### 2. Banner\n\n选取好的截图，附上网址、logo等等。\n\n### 3. 截图\n\nJoaquim不喜欢 赤裸裸的截图，喜欢重构布局、装饰以后的截图。\n\n### 4. Icon\n\n用心设计\n\n## XI. 迭代\n\n> 让用户来驱动，通过不断，快速的对用户的反馈评论做出应答的方式，来升级应用。\n\n1. 通过尽量快的应答用户，让用户感觉他们也是产品项目的一员。\n2. 通过用户反馈，来生成项目接下来要做的清单。\n3. 解决用户的问题，因为他们将会成为你最好的客户。\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/Falcon-Pro-3-如何完成独立开发演讲分析.md","raw":"title: Falcon Pro 3 如何完成独立开发演讲分析\ndate: 2015-06-14 08:35:03\npermalink: 2015/06/14/Falcon-Pro-3-如何完成独立开发演讲分析\ntags:\n- Falcon\n- Joaquim\n- 分析\n- Android\n- 优化\n\n---\n\n> 演讲者: Joaquim\n> 地址: http://realm.io/news/joaquim-verges-making-falcon-pro-3/\n\n## I. 作者介绍\n\n> 工作: UpThere, Palo Alto\n\n主要是简述了，作者的业余项目: Falcon\n\n<!--more-->\n## II. 所用到的库\n\n### 加入了4个library:\n\n1. Picasso\n2. Retrofit\n3. Otto(Event bus)(可选择)\n4. Butter Knife\n\n\n### 新的页面使用Activity:\n\n> 相对于目前盛行的用Fragment替代Activity来提高效率，Joaquim建议新的页面使用Activity\n\n1. 目前在Lollipop上已经有了新的transition API\n2. 可以事件驱动启动，如notification或者是Intent Filter，而不用写一些跳转的逻辑代码\n3. 很好的恢复场景的机制\n同一个Activity里面，复用Fragment(s)\n\n### 缓存机制 ：\n\n> 一个好的App需要一个非常出色的缓存机制\n\n#### 1. ORMLite\n\n> 基于SQLite、开源、基于Java\n\n```\n//表\n@DatabaseTable(tableName = \"accounts\")\npublic class Account {\n\n    @DatabaseField(id = true)\n    private String name;\n\n    @DatabaseField(canBeNull = false)\n    private String password;\n\n    // getters & setters\n}\n```\n\n```\n// 写入数据库\n\n// if you need to create the 'accounts' table make this call\nTableUtils.createTable(connectionSource, Account.class);\n\n// instantiate the DAO to handle Account with String id\nDao<Account, String> accountDao =\n        databaseHelper.getDao(Account.class);\n\n//create an instance of Account\nString name = \"Jim Smith\";\nAccount account = new Account(name, \"_secret\");\n\n// persist the account object to the database\naccountDao.create(account);\n```\n\n```\n// 搜索，读取数据\nQueryBuilder queryBuilder = databaseHelper\n    .getDao(Account.class).queryBuilder();\n\nWhere where = queryBuilder.where();\nwhere.or(\n    where.and(\n      where.eq(\"name\", \"foo\"),\n      where.eq(\"password\", \"_secret\")),\n    where.and(\n      where.eq(\"name\", \"bar\"),\n      where.eq(\"password\", \"qwerty\")\n    )\n);\nwhere.query();\n```\n\n#### 2. Realm (胜出)\n> 基于TightDB，基于C++闭源内核，开源Java绑定(bindings)\n\n牺牲了灵活性，为了让开发更加简单(继承自`RealmObject`)\n\n更加干净，简洁\n\n\n```\n// 表\n\npublic class Account extends RealmObject {\n\n    private String name;\n    private String password;\n\n    // getters & setters\n}\n```\n\n```\n// 写入数据库\n\n// instantiate\nRealm realm = Realm.getInstance(this);// context\n\n// begin transaction\nrealm.beginTransaction();\n\n// create and fill objects to persist\nAccount account = realm.createObject(Account.class);\naccount.setUsername(\"Jim Smith\");\naccount.setPassword(\"_secret\");\n\n// commit the transaction\nrealm.commitTransaction();\n```\n\n```\n// 搜索，读取数据\n\nRealmQuery query = realm.where(Account.class);\n\nquery.beginGroup()\n        .equalTo(\"name\", \"foo\")\n        .equalTo(\"password\", \"_secret\")\n      .endGroup()\n      .or()\n      .beginGroup()\n        .equalTo(\"name\", \"bar\")\n        .equalTo(\"password\", \"_qwerty\")\n      .endGroup();\n\nquery.findAll();\n```\n\n#### 速度对比\n> 搜索 主线程搜索10000数据\n\nRealm声称快**7倍**对比SQLite。\n\nFalcon所有搜索都在主线程，对于作者而言，这是一种解放也是一种改革。\n\n![](/img/Screenshot_6_2_15__3_18_PM.png)\n\n线程方面：\n[NanoTasks](https://github.com/fabiendevos/nanotasks) 对AsyncTasks封装\n\n```\nTasks.executeInBackground(context, new BackgroundWork<Data>() {\n    @Override\n    public Data doInBackground() throws Exception {\n        return fetchData(); // expensive operation\n    }\n}, new Completion<Data>() {\n    @Override\n    public void onSuccess(Context context, Data result) {\n        display(result);\n    }\n    @Override\n    public void onError(Context context, Exception e) {\n        showError(e);\n    }\n});\n```\n\n\n## III. UI\n\n### 1. 使用RecyclerView 替代ListView\n\n#### 缺点:\nListView: 3,905行代码 + AbsListView中7,314行代码\nRecyclerView: 一个巨大的class，中8,427行\n\n#### 优点:\n1. 提供了插入和删除的附加动画\n2. 更好的处理未知变化\n\n```\nRecyclerView recyclerView = new RecyclerView(getActivity());\nLinearLayoutManager layoutManager = new LinearLayoutManager(getActivity());\nrecyclerView.setLayoutManager(layoutManager);\n\nlayoutManager.scollToPosition(0);\nrecyclerView.scrollToPosition(0);\n```\n\n## IV. 动画\n\n#### Android L:\n1. Activity Transitions\n2. Shared elements\n\n实际应用的时候，需要注意的是，动画应该是在Vieww已经完全加载好了（有可能需要动画的部分数据是需要来自网络）之后开始，可以采用的解决方法:\n1. 延时启动过渡(postpone start transition)\n2. 启动延时过渡(start postpone transition)\n\nps: support包有一个简单的判断是Android L的静态方法:`versionUtils.isAtLeastL`\n\n#### LayoutTransitions ( API 1开始就有):\n\n非常强大，布局变化或者Visible/Gone这类的切换动画。考虑用这个，简单强大。\n\n#### AnimationUtils\n\n一般的动画，可以参考下github上其他人的一些好的封装，做一些简单的fade啊、slide啊、缩放啊非常方便。\n\n\n## V. 帧率控制\n\n> Android 保持在60Hz，16ms 每次draw\n\n### 1) 不要做\n\n#### 1. View层级不要太深\n\n 保持Layout平坦，不要有深层级\n\n#### 2. 谨慎创建对象(避免在View draw流程中（onMearsure、onLayout、onDraw...）创建对象\n\n因为gc会带来很多帧率上的损失\n\n#### 3. 减少重绘\n\n保证尽量少的 不透明背景 相互覆盖，因为GPU 不得不一遍又一遍的画这些图层。\n\n### 2) 可以使用的Android系统的工具\n\n> 这些在 1、2在设置->开发者选项 里面，3、4是Android Studio上的功能\n\n#### 1. GPU 呈现模式分析(GPU Rendering Profiling)\n\n> 可以分析出哪些是在16ms以内，什么时候超过了16ms（60Hz，掉帧哦~...）\n\n**千万避免在View中设置透明度**，特别是在自定义的View上（一般来说ImageView、TextView(ButtonView..)是没有问题的），Falcon作者，在一次检测GPU呈现模式的时候，发现一个设置透明度，导致了Frame的渲染慢了一倍多。\n\n具体原因是由于，一旦设置了Alpha，每次draw 那个View都不得不 清除绘制缓存(Flush Buffer)，然后再绘制到屏幕上，效果如右图(顶部的那几个小点setAlpha(0.5*255))。\n\n![](/img/Falcon-font.png)\n\n#### 2. 调试CPU过渡绘制\n\n检测重绘神器。\n\n#### 3. 内存监控\n\nAndroid Studio上的一个功能。\n\n#### 4. 内存创建跟踪(Allocation tracker)\n\n也是Android Studio上的一个功能。\n\n具体教程可以看这里: [https://developer.android.com/tools/debugging/debugging-studio.html#allocTracker](https://developer.android.com/tools/debugging/debugging-studio.html#allocTracker)\n\n\n## VI. 设计\n\n> Falcon 可是 Joaquim自己设计的!\n\n#### 1. 草图\n可以使用软件sketch\n\n#### 2. 颜色选择方面\n\n可以使用[coolors.co](http://coolors.co/)，可以很快的定位好整个app的颜色。Joaquim大概就用了10分钟\n\n这边我也推荐一个[Paletton.com](http://paletton.com/#uid=72P0+0kllllaFw0g0qFqFg0w0aF),也很不错。\n\n#### 3. Icon\n\n说实话作为开发，确实不愿意花太多时间去设计icon，但是Google对外开放了200多个icon素材。\n\n**更好的方法**: 一款intellij(或者Android Studio（同一平台idea）)的插件: [https://github.com/konifar/android-material-design-icon-generator-plugin](https://github.com/konifar/android-material-design-icon-generator-plugin) 自动生成Material icon确实好屌。\n\n#### 4. 字体方面\n\nJoaquim只用了Android SDK的: `android:font_family`，完全够用：\n\n![](/img/SQLite___Core_Data.png)\n\n#### 5. 视觉宗旨定义\n\nJoaquim定位Falcon是内容至上。\n\n## VII. Crash报告与分析\n\nFalcon使用了: [Crashlytics](https://try.crashlytics.com/)，评价很高，一行代码，搞定90%的需求。\n\n## VIII. 安全\n\n### 1. 混淆\n\n最基本的保障，反编译以后极大减小可读性。\n\n### 2. LVL\n\n> The License verification library from Google\n\n不值得，如果说要保证交易安全，应该在成交之前，在自己的服务器上做更多的验证（EAPs）\n\n## IX. Beta\n\nJoaquim不建议到Google+ communites做测试，没啥用。\n\n## X. 发布\n\n### 1. 视频肯定要的\n\nadb shell screenrecord\n\n### 2. Banner\n\n选取好的截图，附上网址、logo等等。\n\n### 3. 截图\n\nJoaquim不喜欢 赤裸裸的截图，喜欢重构布局、装饰以后的截图。\n\n### 4. Icon\n\n用心设计\n\n## XI. 迭代\n\n> 让用户来驱动，通过不断，快速的对用户的反馈评论做出应答的方式，来升级应用。\n\n1. 通过尽量快的应答用户，让用户感觉他们也是产品项目的一员。\n2. 通过用户反馈，来生成项目接下来要做的清单。\n3. 解决用户的问题，因为他们将会成为你最好的客户。\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2015/06/14/Falcon-Pro-3-如何完成独立开发演讲分析","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66ho000f95bu6rzxed7t","content":"<blockquote>\n<p>演讲者: Joaquim<br>地址: <a href=\"http://realm.io/news/joaquim-verges-making-falcon-pro-3/\" target=\"_blank\" rel=\"external\">http://realm.io/news/joaquim-verges-making-falcon-pro-3/</a></p>\n</blockquote>\n<h2 id=\"I-作者介绍\"><a href=\"#I-作者介绍\" class=\"headerlink\" title=\"I. 作者介绍\"></a>I. 作者介绍</h2><blockquote>\n<p>工作: UpThere, Palo Alto</p>\n</blockquote>\n<p>主要是简述了，作者的业余项目: Falcon</p>\n<a id=\"more\"></a>\n<h2 id=\"II-所用到的库\"><a href=\"#II-所用到的库\" class=\"headerlink\" title=\"II. 所用到的库\"></a>II. 所用到的库</h2><h3 id=\"加入了4个library\"><a href=\"#加入了4个library\" class=\"headerlink\" title=\"加入了4个library:\"></a>加入了4个library:</h3><ol>\n<li>Picasso</li>\n<li>Retrofit</li>\n<li>Otto(Event bus)(可选择)</li>\n<li>Butter Knife</li>\n</ol>\n<h3 id=\"新的页面使用Activity\"><a href=\"#新的页面使用Activity\" class=\"headerlink\" title=\"新的页面使用Activity:\"></a>新的页面使用Activity:</h3><blockquote>\n<p>相对于目前盛行的用Fragment替代Activity来提高效率，Joaquim建议新的页面使用Activity</p>\n</blockquote>\n<ol>\n<li>目前在Lollipop上已经有了新的transition API</li>\n<li>可以事件驱动启动，如notification或者是Intent Filter，而不用写一些跳转的逻辑代码</li>\n<li>很好的恢复场景的机制<br>同一个Activity里面，复用Fragment(s)</li>\n</ol>\n<h3 id=\"缓存机制-：\"><a href=\"#缓存机制-：\" class=\"headerlink\" title=\"缓存机制 ：\"></a>缓存机制 ：</h3><blockquote>\n<p>一个好的App需要一个非常出色的缓存机制</p>\n</blockquote>\n<h4 id=\"1-ORMLite\"><a href=\"#1-ORMLite\" class=\"headerlink\" title=\"1. ORMLite\"></a>1. ORMLite</h4><blockquote>\n<p>基于SQLite、开源、基于Java</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//表</span></div><div class=\"line\"><span class=\"meta\">@DatabaseTable(tableName = <span class=\"meta-string\">\"accounts\"</span>)</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Account</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@DatabaseField(id = true)</span></div><div class=\"line\">    <span class=\"keyword\">private</span> String name;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@DatabaseField(canBeNull = false)</span></div><div class=\"line\">    <span class=\"keyword\">private</span> String password;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// getters &amp; setters</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 写入数据库</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// if you need to create the 'accounts' table make this call</span></div><div class=\"line\">TableUtils.createTable(connectionSource, Account.<span class=\"keyword\">class</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// instantiate the DAO to handle Account with String id</span></div><div class=\"line\">Dao&lt;Account, <span class=\"keyword\">String</span>&gt; accountDao =</div><div class=\"line\">        databaseHelper.getDao(Account.<span class=\"keyword\">class</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//create an instance of Account</span></div><div class=\"line\"><span class=\"keyword\">String</span> name = <span class=\"string\">\"Jim Smith\"</span>;</div><div class=\"line\">Account account = <span class=\"keyword\">new</span> Account(name, <span class=\"string\">\"_secret\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// persist the account object to the database</span></div><div class=\"line\">accountDao.create(account);</div></pre></td></tr></table></figure>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 搜索，读取数据</span></div><div class=\"line\">QueryBuilder queryBuilder = databaseHelper</div><div class=\"line\">    .getDao(Account.class).queryBuilder();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">Where</span> <span class=\"keyword\">where</span> = queryBuilder.<span class=\"keyword\">where</span>();</div><div class=\"line\"><span class=\"keyword\">where</span>.<span class=\"literal\">or</span>(</div><div class=\"line\">    <span class=\"keyword\">where</span>.<span class=\"literal\">and</span>(</div><div class=\"line\">      <span class=\"keyword\">where</span>.<span class=\"literal\">eq</span>(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"foo\"</span>),</div><div class=\"line\">      <span class=\"keyword\">where</span>.<span class=\"literal\">eq</span>(<span class=\"string\">\"password\"</span>, <span class=\"string\">\"_secret\"</span>)),</div><div class=\"line\">    <span class=\"keyword\">where</span>.<span class=\"literal\">and</span>(</div><div class=\"line\">      <span class=\"keyword\">where</span>.<span class=\"literal\">eq</span>(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"bar\"</span>),</div><div class=\"line\">      <span class=\"keyword\">where</span>.<span class=\"literal\">eq</span>(<span class=\"string\">\"password\"</span>, <span class=\"string\">\"qwerty\"</span>)</div><div class=\"line\">    )</div><div class=\"line\">);</div><div class=\"line\"><span class=\"keyword\">where</span>.query();</div></pre></td></tr></table></figure>\n<h4 id=\"2-Realm-胜出\"><a href=\"#2-Realm-胜出\" class=\"headerlink\" title=\"2. Realm (胜出)\"></a>2. Realm (胜出)</h4><blockquote>\n<p>基于TightDB，基于C++闭源内核，开源Java绑定(bindings)</p>\n</blockquote>\n<p>牺牲了灵活性，为了让开发更加简单(继承自<code>RealmObject</code>)</p>\n<p>更加干净，简洁</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 表</span></div><div class=\"line\"></div><div class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Account</span> <span class=\"keyword\">extends</span> <span class=\"title\">RealmObject</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">String</span> name;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">String</span> password;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// getters &amp; setters</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 写入数据库</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// instantiate</span></div><div class=\"line\">Realm realm = Realm.getInstance(<span class=\"keyword\">this</span>);<span class=\"comment\">// context</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// begin transaction</span></div><div class=\"line\">realm.beginTransaction();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// create and fill objects to persist</span></div><div class=\"line\">Account account = realm.createObject(Account.<span class=\"keyword\">class</span>);</div><div class=\"line\">account.setUsername(<span class=\"string\">\"Jim Smith\"</span>);</div><div class=\"line\">account.setPassword(<span class=\"string\">\"_secret\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// commit the transaction</span></div><div class=\"line\">realm.commitTransaction();</div></pre></td></tr></table></figure>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 搜索，读取数据</div><div class=\"line\"></div><div class=\"line\">RealmQuery query = realm.where(Account.class)<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">query.beginGroup()</div><div class=\"line\"><span class=\"meta\">        .equalTo</span>(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"foo\"</span>)</div><div class=\"line\"><span class=\"meta\">        .equalTo</span>(<span class=\"string\">\"password\"</span>, <span class=\"string\">\"_secret\"</span>)</div><div class=\"line\"><span class=\"meta\">      .endGroup</span>()</div><div class=\"line\"><span class=\"meta\">      .or</span>()</div><div class=\"line\"><span class=\"meta\">      .beginGroup</span>()</div><div class=\"line\"><span class=\"meta\">        .equalTo</span>(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"bar\"</span>)</div><div class=\"line\"><span class=\"meta\">        .equalTo</span>(<span class=\"string\">\"password\"</span>, <span class=\"string\">\"_qwerty\"</span>)</div><div class=\"line\"><span class=\"meta\">      .endGroup</span>()<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">query.findAll()<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<h4 id=\"速度对比\"><a href=\"#速度对比\" class=\"headerlink\" title=\"速度对比\"></a>速度对比</h4><blockquote>\n<p>搜索 主线程搜索10000数据</p>\n</blockquote>\n<p>Realm声称快<strong>7倍</strong>对比SQLite。</p>\n<p>Falcon所有搜索都在主线程，对于作者而言，这是一种解放也是一种改革。</p>\n<p><img src=\"/img/Screenshot_6_2_15__3_18_PM.png\" alt=\"\"></p>\n<p>线程方面：<br><a href=\"https://github.com/fabiendevos/nanotasks\" target=\"_blank\" rel=\"external\">NanoTasks</a> 对AsyncTasks封装</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">Tasks.executeInBackground(context, <span class=\"keyword\">new</span> BackgroundWork&lt;Data&gt;() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\">Data <span class=\"title\">doInBackground</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">return</span> <span class=\"title\">fetchData</span><span class=\"params\">()</span></span>; <span class=\"comment\">// expensive operation</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;, <span class=\"keyword\">new</span> Completion&lt;Data&gt;() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">(Context context, Data result)</span> </span>&#123;</div><div class=\"line\">        display(result);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Context context, Exception e)</span> </span>&#123;</div><div class=\"line\">        showError(e);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"III-UI\"><a href=\"#III-UI\" class=\"headerlink\" title=\"III. UI\"></a>III. UI</h2><h3 id=\"1-使用RecyclerView-替代ListView\"><a href=\"#1-使用RecyclerView-替代ListView\" class=\"headerlink\" title=\"1. 使用RecyclerView 替代ListView\"></a>1. 使用RecyclerView 替代ListView</h3><h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点:\"></a>缺点:</h4><p>ListView: 3,905行代码 + AbsListView中7,314行代码<br>RecyclerView: 一个巨大的class，中8,427行</p>\n<h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点:\"></a>优点:</h4><ol>\n<li>提供了插入和删除的附加动画</li>\n<li>更好的处理未知变化</li>\n</ol>\n<figure class=\"highlight pony\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"type\">RecyclerView</span> recyclerView = <span class=\"function\"><span class=\"keyword\">new</span> <span class=\"title\">RecyclerView</span>(getActivity());</span></div><div class=\"line\"><span class=\"title\">LinearLayoutManager</span> <span class=\"title\">layoutManager</span> = <span class=\"title\">new</span> <span class=\"title\">LinearLayoutManager</span>(getActivity());</div><div class=\"line\"><span class=\"title\">recyclerView</span>.<span class=\"title\">setLayoutManager</span>(layoutManager);</div><div class=\"line\"></div><div class=\"line\"><span class=\"title\">layoutManager</span>.<span class=\"title\">scollToPosition</span>(<span class=\"number\">0</span>);</div><div class=\"line\"><span class=\"title\">recyclerView</span>.<span class=\"title\">scrollToPosition</span>(<span class=\"number\">0</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"IV-动画\"><a href=\"#IV-动画\" class=\"headerlink\" title=\"IV. 动画\"></a>IV. 动画</h2><h4 id=\"Android-L\"><a href=\"#Android-L\" class=\"headerlink\" title=\"Android L:\"></a>Android L:</h4><ol>\n<li>Activity Transitions</li>\n<li>Shared elements</li>\n</ol>\n<p>实际应用的时候，需要注意的是，动画应该是在Vieww已经完全加载好了（有可能需要动画的部分数据是需要来自网络）之后开始，可以采用的解决方法:</p>\n<ol>\n<li>延时启动过渡(postpone start transition)</li>\n<li>启动延时过渡(start postpone transition)</li>\n</ol>\n<p>ps: support包有一个简单的判断是Android L的静态方法:<code>versionUtils.isAtLeastL</code></p>\n<h4 id=\"LayoutTransitions-API-1开始就有\"><a href=\"#LayoutTransitions-API-1开始就有\" class=\"headerlink\" title=\"LayoutTransitions ( API 1开始就有):\"></a>LayoutTransitions ( API 1开始就有):</h4><p>非常强大，布局变化或者Visible/Gone这类的切换动画。考虑用这个，简单强大。</p>\n<h4 id=\"AnimationUtils\"><a href=\"#AnimationUtils\" class=\"headerlink\" title=\"AnimationUtils\"></a>AnimationUtils</h4><p>一般的动画，可以参考下github上其他人的一些好的封装，做一些简单的fade啊、slide啊、缩放啊非常方便。</p>\n<h2 id=\"V-帧率控制\"><a href=\"#V-帧率控制\" class=\"headerlink\" title=\"V. 帧率控制\"></a>V. 帧率控制</h2><blockquote>\n<p>Android 保持在60Hz，16ms 每次draw</p>\n</blockquote>\n<h3 id=\"1-不要做\"><a href=\"#1-不要做\" class=\"headerlink\" title=\"1) 不要做\"></a>1) 不要做</h3><h4 id=\"1-View层级不要太深\"><a href=\"#1-View层级不要太深\" class=\"headerlink\" title=\"1. View层级不要太深\"></a>1. View层级不要太深</h4><p> 保持Layout平坦，不要有深层级</p>\n<h4 id=\"2-谨慎创建对象-避免在View-draw流程中（onMearsure、onLayout、onDraw…）创建对象\"><a href=\"#2-谨慎创建对象-避免在View-draw流程中（onMearsure、onLayout、onDraw…）创建对象\" class=\"headerlink\" title=\"2. 谨慎创建对象(避免在View draw流程中（onMearsure、onLayout、onDraw…）创建对象\"></a>2. 谨慎创建对象(避免在View draw流程中（onMearsure、onLayout、onDraw…）创建对象</h4><p>因为gc会带来很多帧率上的损失</p>\n<h4 id=\"3-减少重绘\"><a href=\"#3-减少重绘\" class=\"headerlink\" title=\"3. 减少重绘\"></a>3. 减少重绘</h4><p>保证尽量少的 不透明背景 相互覆盖，因为GPU 不得不一遍又一遍的画这些图层。</p>\n<h3 id=\"2-可以使用的Android系统的工具\"><a href=\"#2-可以使用的Android系统的工具\" class=\"headerlink\" title=\"2) 可以使用的Android系统的工具\"></a>2) 可以使用的Android系统的工具</h3><blockquote>\n<p>这些在 1、2在设置-&gt;开发者选项 里面，3、4是Android Studio上的功能</p>\n</blockquote>\n<h4 id=\"1-GPU-呈现模式分析-GPU-Rendering-Profiling\"><a href=\"#1-GPU-呈现模式分析-GPU-Rendering-Profiling\" class=\"headerlink\" title=\"1. GPU 呈现模式分析(GPU Rendering Profiling)\"></a>1. GPU 呈现模式分析(GPU Rendering Profiling)</h4><blockquote>\n<p>可以分析出哪些是在16ms以内，什么时候超过了16ms（60Hz，掉帧哦~…）</p>\n</blockquote>\n<p><strong>千万避免在View中设置透明度</strong>，特别是在自定义的View上（一般来说ImageView、TextView(ButtonView..)是没有问题的），Falcon作者，在一次检测GPU呈现模式的时候，发现一个设置透明度，导致了Frame的渲染慢了一倍多。</p>\n<p>具体原因是由于，一旦设置了Alpha，每次draw 那个View都不得不 清除绘制缓存(Flush Buffer)，然后再绘制到屏幕上，效果如右图(顶部的那几个小点setAlpha(0.5*255))。</p>\n<p><img src=\"/img/Falcon-font.png\" alt=\"\"></p>\n<h4 id=\"2-调试CPU过渡绘制\"><a href=\"#2-调试CPU过渡绘制\" class=\"headerlink\" title=\"2. 调试CPU过渡绘制\"></a>2. 调试CPU过渡绘制</h4><p>检测重绘神器。</p>\n<h4 id=\"3-内存监控\"><a href=\"#3-内存监控\" class=\"headerlink\" title=\"3. 内存监控\"></a>3. 内存监控</h4><p>Android Studio上的一个功能。</p>\n<h4 id=\"4-内存创建跟踪-Allocation-tracker\"><a href=\"#4-内存创建跟踪-Allocation-tracker\" class=\"headerlink\" title=\"4. 内存创建跟踪(Allocation tracker)\"></a>4. 内存创建跟踪(Allocation tracker)</h4><p>也是Android Studio上的一个功能。</p>\n<p>具体教程可以看这里: <a href=\"https://developer.android.com/tools/debugging/debugging-studio.html#allocTracker\" target=\"_blank\" rel=\"external\">https://developer.android.com/tools/debugging/debugging-studio.html#allocTracker</a></p>\n<h2 id=\"VI-设计\"><a href=\"#VI-设计\" class=\"headerlink\" title=\"VI. 设计\"></a>VI. 设计</h2><blockquote>\n<p>Falcon 可是 Joaquim自己设计的!</p>\n</blockquote>\n<h4 id=\"1-草图\"><a href=\"#1-草图\" class=\"headerlink\" title=\"1. 草图\"></a>1. 草图</h4><p>可以使用软件sketch</p>\n<h4 id=\"2-颜色选择方面\"><a href=\"#2-颜色选择方面\" class=\"headerlink\" title=\"2. 颜色选择方面\"></a>2. 颜色选择方面</h4><p>可以使用<a href=\"http://coolors.co/\" target=\"_blank\" rel=\"external\">coolors.co</a>，可以很快的定位好整个app的颜色。Joaquim大概就用了10分钟</p>\n<p>这边我也推荐一个<a href=\"http://paletton.com/#uid=72P0+0kllllaFw0g0qFqFg0w0aF\" target=\"_blank\" rel=\"external\">Paletton.com</a>,也很不错。</p>\n<h4 id=\"3-Icon\"><a href=\"#3-Icon\" class=\"headerlink\" title=\"3. Icon\"></a>3. Icon</h4><p>说实话作为开发，确实不愿意花太多时间去设计icon，但是Google对外开放了200多个icon素材。</p>\n<p><strong>更好的方法</strong>: 一款intellij(或者Android Studio（同一平台idea）)的插件: <a href=\"https://github.com/konifar/android-material-design-icon-generator-plugin\" target=\"_blank\" rel=\"external\">https://github.com/konifar/android-material-design-icon-generator-plugin</a> 自动生成Material icon确实好屌。</p>\n<h4 id=\"4-字体方面\"><a href=\"#4-字体方面\" class=\"headerlink\" title=\"4. 字体方面\"></a>4. 字体方面</h4><p>Joaquim只用了Android SDK的: <code>android:font_family</code>，完全够用：</p>\n<p><img src=\"/img/SQLite___Core_Data.png\" alt=\"\"></p>\n<h4 id=\"5-视觉宗旨定义\"><a href=\"#5-视觉宗旨定义\" class=\"headerlink\" title=\"5. 视觉宗旨定义\"></a>5. 视觉宗旨定义</h4><p>Joaquim定位Falcon是内容至上。</p>\n<h2 id=\"VII-Crash报告与分析\"><a href=\"#VII-Crash报告与分析\" class=\"headerlink\" title=\"VII. Crash报告与分析\"></a>VII. Crash报告与分析</h2><p>Falcon使用了: <a href=\"https://try.crashlytics.com/\" target=\"_blank\" rel=\"external\">Crashlytics</a>，评价很高，一行代码，搞定90%的需求。</p>\n<h2 id=\"VIII-安全\"><a href=\"#VIII-安全\" class=\"headerlink\" title=\"VIII. 安全\"></a>VIII. 安全</h2><h3 id=\"1-混淆\"><a href=\"#1-混淆\" class=\"headerlink\" title=\"1. 混淆\"></a>1. 混淆</h3><p>最基本的保障，反编译以后极大减小可读性。</p>\n<h3 id=\"2-LVL\"><a href=\"#2-LVL\" class=\"headerlink\" title=\"2. LVL\"></a>2. LVL</h3><blockquote>\n<p>The License verification library from Google</p>\n</blockquote>\n<p>不值得，如果说要保证交易安全，应该在成交之前，在自己的服务器上做更多的验证（EAPs）</p>\n<h2 id=\"IX-Beta\"><a href=\"#IX-Beta\" class=\"headerlink\" title=\"IX. Beta\"></a>IX. Beta</h2><p>Joaquim不建议到Google+ communites做测试，没啥用。</p>\n<h2 id=\"X-发布\"><a href=\"#X-发布\" class=\"headerlink\" title=\"X. 发布\"></a>X. 发布</h2><h3 id=\"1-视频肯定要的\"><a href=\"#1-视频肯定要的\" class=\"headerlink\" title=\"1. 视频肯定要的\"></a>1. 视频肯定要的</h3><p>adb shell screenrecord</p>\n<h3 id=\"2-Banner\"><a href=\"#2-Banner\" class=\"headerlink\" title=\"2. Banner\"></a>2. Banner</h3><p>选取好的截图，附上网址、logo等等。</p>\n<h3 id=\"3-截图\"><a href=\"#3-截图\" class=\"headerlink\" title=\"3. 截图\"></a>3. 截图</h3><p>Joaquim不喜欢 赤裸裸的截图，喜欢重构布局、装饰以后的截图。</p>\n<h3 id=\"4-Icon\"><a href=\"#4-Icon\" class=\"headerlink\" title=\"4. Icon\"></a>4. Icon</h3><p>用心设计</p>\n<h2 id=\"XI-迭代\"><a href=\"#XI-迭代\" class=\"headerlink\" title=\"XI. 迭代\"></a>XI. 迭代</h2><blockquote>\n<p>让用户来驱动，通过不断，快速的对用户的反馈评论做出应答的方式，来升级应用。</p>\n</blockquote>\n<ol>\n<li>通过尽量快的应答用户，让用户感觉他们也是产品项目的一员。</li>\n<li>通过用户反馈，来生成项目接下来要做的清单。</li>\n<li>解决用户的问题，因为他们将会成为你最好的客户。</li>\n</ol>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>演讲者: Joaquim<br>地址: <a href=\"http://realm.io/news/joaquim-verges-making-falcon-pro-3/\">http://realm.io/news/joaquim-verges-making-falcon-pro-3/</a></p>\n</blockquote>\n<h2 id=\"I-作者介绍\"><a href=\"#I-作者介绍\" class=\"headerlink\" title=\"I. 作者介绍\"></a>I. 作者介绍</h2><blockquote>\n<p>工作: UpThere, Palo Alto</p>\n</blockquote>\n<p>主要是简述了，作者的业余项目: Falcon</p>","more":"<h2 id=\"II-所用到的库\"><a href=\"#II-所用到的库\" class=\"headerlink\" title=\"II. 所用到的库\"></a>II. 所用到的库</h2><h3 id=\"加入了4个library\"><a href=\"#加入了4个library\" class=\"headerlink\" title=\"加入了4个library:\"></a>加入了4个library:</h3><ol>\n<li>Picasso</li>\n<li>Retrofit</li>\n<li>Otto(Event bus)(可选择)</li>\n<li>Butter Knife</li>\n</ol>\n<h3 id=\"新的页面使用Activity\"><a href=\"#新的页面使用Activity\" class=\"headerlink\" title=\"新的页面使用Activity:\"></a>新的页面使用Activity:</h3><blockquote>\n<p>相对于目前盛行的用Fragment替代Activity来提高效率，Joaquim建议新的页面使用Activity</p>\n</blockquote>\n<ol>\n<li>目前在Lollipop上已经有了新的transition API</li>\n<li>可以事件驱动启动，如notification或者是Intent Filter，而不用写一些跳转的逻辑代码</li>\n<li>很好的恢复场景的机制<br>同一个Activity里面，复用Fragment(s)</li>\n</ol>\n<h3 id=\"缓存机制-：\"><a href=\"#缓存机制-：\" class=\"headerlink\" title=\"缓存机制 ：\"></a>缓存机制 ：</h3><blockquote>\n<p>一个好的App需要一个非常出色的缓存机制</p>\n</blockquote>\n<h4 id=\"1-ORMLite\"><a href=\"#1-ORMLite\" class=\"headerlink\" title=\"1. ORMLite\"></a>1. ORMLite</h4><blockquote>\n<p>基于SQLite、开源、基于Java</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//表</span></div><div class=\"line\"><span class=\"meta\">@DatabaseTable(tableName = <span class=\"meta-string\">\"accounts\"</span>)</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Account</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@DatabaseField(id = true)</span></div><div class=\"line\">    <span class=\"keyword\">private</span> String name;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@DatabaseField(canBeNull = false)</span></div><div class=\"line\">    <span class=\"keyword\">private</span> String password;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// getters &amp; setters</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 写入数据库</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// if you need to create the 'accounts' table make this call</span></div><div class=\"line\">TableUtils.createTable(connectionSource, Account.<span class=\"keyword\">class</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// instantiate the DAO to handle Account with String id</span></div><div class=\"line\">Dao&lt;Account, <span class=\"keyword\">String</span>&gt; accountDao =</div><div class=\"line\">        databaseHelper.getDao(Account.<span class=\"keyword\">class</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//create an instance of Account</span></div><div class=\"line\"><span class=\"keyword\">String</span> name = <span class=\"string\">\"Jim Smith\"</span>;</div><div class=\"line\">Account account = <span class=\"keyword\">new</span> Account(name, <span class=\"string\">\"_secret\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// persist the account object to the database</span></div><div class=\"line\">accountDao.create(account);</div></pre></td></tr></table></figure>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 搜索，读取数据</span></div><div class=\"line\">QueryBuilder queryBuilder = databaseHelper</div><div class=\"line\">    .getDao(Account.class).queryBuilder();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">Where</span> <span class=\"keyword\">where</span> = queryBuilder.<span class=\"keyword\">where</span>();</div><div class=\"line\"><span class=\"keyword\">where</span>.<span class=\"literal\">or</span>(</div><div class=\"line\">    <span class=\"keyword\">where</span>.<span class=\"literal\">and</span>(</div><div class=\"line\">      <span class=\"keyword\">where</span>.<span class=\"literal\">eq</span>(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"foo\"</span>),</div><div class=\"line\">      <span class=\"keyword\">where</span>.<span class=\"literal\">eq</span>(<span class=\"string\">\"password\"</span>, <span class=\"string\">\"_secret\"</span>)),</div><div class=\"line\">    <span class=\"keyword\">where</span>.<span class=\"literal\">and</span>(</div><div class=\"line\">      <span class=\"keyword\">where</span>.<span class=\"literal\">eq</span>(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"bar\"</span>),</div><div class=\"line\">      <span class=\"keyword\">where</span>.<span class=\"literal\">eq</span>(<span class=\"string\">\"password\"</span>, <span class=\"string\">\"qwerty\"</span>)</div><div class=\"line\">    )</div><div class=\"line\">);</div><div class=\"line\"><span class=\"keyword\">where</span>.query();</div></pre></td></tr></table></figure>\n<h4 id=\"2-Realm-胜出\"><a href=\"#2-Realm-胜出\" class=\"headerlink\" title=\"2. Realm (胜出)\"></a>2. Realm (胜出)</h4><blockquote>\n<p>基于TightDB，基于C++闭源内核，开源Java绑定(bindings)</p>\n</blockquote>\n<p>牺牲了灵活性，为了让开发更加简单(继承自<code>RealmObject</code>)</p>\n<p>更加干净，简洁</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 表</span></div><div class=\"line\"></div><div class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Account</span> <span class=\"keyword\">extends</span> <span class=\"title\">RealmObject</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">String</span> name;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">String</span> password;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// getters &amp; setters</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 写入数据库</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// instantiate</span></div><div class=\"line\">Realm realm = Realm.getInstance(<span class=\"keyword\">this</span>);<span class=\"comment\">// context</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// begin transaction</span></div><div class=\"line\">realm.beginTransaction();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// create and fill objects to persist</span></div><div class=\"line\">Account account = realm.createObject(Account.<span class=\"keyword\">class</span>);</div><div class=\"line\">account.setUsername(<span class=\"string\">\"Jim Smith\"</span>);</div><div class=\"line\">account.setPassword(<span class=\"string\">\"_secret\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// commit the transaction</span></div><div class=\"line\">realm.commitTransaction();</div></pre></td></tr></table></figure>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 搜索，读取数据</div><div class=\"line\"></div><div class=\"line\">RealmQuery query = realm.where(Account.class)<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">query.beginGroup()</div><div class=\"line\"><span class=\"meta\">        .equalTo</span>(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"foo\"</span>)</div><div class=\"line\"><span class=\"meta\">        .equalTo</span>(<span class=\"string\">\"password\"</span>, <span class=\"string\">\"_secret\"</span>)</div><div class=\"line\"><span class=\"meta\">      .endGroup</span>()</div><div class=\"line\"><span class=\"meta\">      .or</span>()</div><div class=\"line\"><span class=\"meta\">      .beginGroup</span>()</div><div class=\"line\"><span class=\"meta\">        .equalTo</span>(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"bar\"</span>)</div><div class=\"line\"><span class=\"meta\">        .equalTo</span>(<span class=\"string\">\"password\"</span>, <span class=\"string\">\"_qwerty\"</span>)</div><div class=\"line\"><span class=\"meta\">      .endGroup</span>()<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">query.findAll()<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<h4 id=\"速度对比\"><a href=\"#速度对比\" class=\"headerlink\" title=\"速度对比\"></a>速度对比</h4><blockquote>\n<p>搜索 主线程搜索10000数据</p>\n</blockquote>\n<p>Realm声称快<strong>7倍</strong>对比SQLite。</p>\n<p>Falcon所有搜索都在主线程，对于作者而言，这是一种解放也是一种改革。</p>\n<p><img src=\"/img/Screenshot_6_2_15__3_18_PM.png\" alt=\"\"></p>\n<p>线程方面：<br><a href=\"https://github.com/fabiendevos/nanotasks\">NanoTasks</a> 对AsyncTasks封装</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">Tasks.executeInBackground(context, <span class=\"keyword\">new</span> BackgroundWork&lt;Data&gt;() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\">Data <span class=\"title\">doInBackground</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">return</span> <span class=\"title\">fetchData</span><span class=\"params\">()</span></span>; <span class=\"comment\">// expensive operation</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;, <span class=\"keyword\">new</span> Completion&lt;Data&gt;() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">(Context context, Data result)</span> </span>&#123;</div><div class=\"line\">        display(result);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Context context, Exception e)</span> </span>&#123;</div><div class=\"line\">        showError(e);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"III-UI\"><a href=\"#III-UI\" class=\"headerlink\" title=\"III. UI\"></a>III. UI</h2><h3 id=\"1-使用RecyclerView-替代ListView\"><a href=\"#1-使用RecyclerView-替代ListView\" class=\"headerlink\" title=\"1. 使用RecyclerView 替代ListView\"></a>1. 使用RecyclerView 替代ListView</h3><h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点:\"></a>缺点:</h4><p>ListView: 3,905行代码 + AbsListView中7,314行代码<br>RecyclerView: 一个巨大的class，中8,427行</p>\n<h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点:\"></a>优点:</h4><ol>\n<li>提供了插入和删除的附加动画</li>\n<li>更好的处理未知变化</li>\n</ol>\n<figure class=\"highlight pony\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"type\">RecyclerView</span> recyclerView = <span class=\"function\"><span class=\"keyword\">new</span> <span class=\"title\">RecyclerView</span>(getActivity());</div><div class=\"line\"><span class=\"title\">LinearLayoutManager</span> <span class=\"title\">layoutManager</span> = <span class=\"title\">new</span> <span class=\"title\">LinearLayoutManager</span>(getActivity());</div><div class=\"line\"><span class=\"title\">recyclerView</span>.<span class=\"title\">setLayoutManager</span>(layoutManager);</div><div class=\"line\"></div><div class=\"line\"><span class=\"title\">layoutManager</span>.<span class=\"title\">scollToPosition</span>(<span class=\"number\">0</span>);</div><div class=\"line\"><span class=\"title\">recyclerView</span>.<span class=\"title\">scrollToPosition</span>(<span class=\"number\">0</span>);</span></div></pre></td></tr></table></figure>\n<h2 id=\"IV-动画\"><a href=\"#IV-动画\" class=\"headerlink\" title=\"IV. 动画\"></a>IV. 动画</h2><h4 id=\"Android-L\"><a href=\"#Android-L\" class=\"headerlink\" title=\"Android L:\"></a>Android L:</h4><ol>\n<li>Activity Transitions</li>\n<li>Shared elements</li>\n</ol>\n<p>实际应用的时候，需要注意的是，动画应该是在Vieww已经完全加载好了（有可能需要动画的部分数据是需要来自网络）之后开始，可以采用的解决方法:</p>\n<ol>\n<li>延时启动过渡(postpone start transition)</li>\n<li>启动延时过渡(start postpone transition)</li>\n</ol>\n<p>ps: support包有一个简单的判断是Android L的静态方法:<code>versionUtils.isAtLeastL</code></p>\n<h4 id=\"LayoutTransitions-API-1开始就有\"><a href=\"#LayoutTransitions-API-1开始就有\" class=\"headerlink\" title=\"LayoutTransitions ( API 1开始就有):\"></a>LayoutTransitions ( API 1开始就有):</h4><p>非常强大，布局变化或者Visible/Gone这类的切换动画。考虑用这个，简单强大。</p>\n<h4 id=\"AnimationUtils\"><a href=\"#AnimationUtils\" class=\"headerlink\" title=\"AnimationUtils\"></a>AnimationUtils</h4><p>一般的动画，可以参考下github上其他人的一些好的封装，做一些简单的fade啊、slide啊、缩放啊非常方便。</p>\n<h2 id=\"V-帧率控制\"><a href=\"#V-帧率控制\" class=\"headerlink\" title=\"V. 帧率控制\"></a>V. 帧率控制</h2><blockquote>\n<p>Android 保持在60Hz，16ms 每次draw</p>\n</blockquote>\n<h3 id=\"1-不要做\"><a href=\"#1-不要做\" class=\"headerlink\" title=\"1) 不要做\"></a>1) 不要做</h3><h4 id=\"1-View层级不要太深\"><a href=\"#1-View层级不要太深\" class=\"headerlink\" title=\"1. View层级不要太深\"></a>1. View层级不要太深</h4><p> 保持Layout平坦，不要有深层级</p>\n<h4 id=\"2-谨慎创建对象-避免在View-draw流程中（onMearsure、onLayout、onDraw…）创建对象\"><a href=\"#2-谨慎创建对象-避免在View-draw流程中（onMearsure、onLayout、onDraw…）创建对象\" class=\"headerlink\" title=\"2. 谨慎创建对象(避免在View draw流程中（onMearsure、onLayout、onDraw…）创建对象\"></a>2. 谨慎创建对象(避免在View draw流程中（onMearsure、onLayout、onDraw…）创建对象</h4><p>因为gc会带来很多帧率上的损失</p>\n<h4 id=\"3-减少重绘\"><a href=\"#3-减少重绘\" class=\"headerlink\" title=\"3. 减少重绘\"></a>3. 减少重绘</h4><p>保证尽量少的 不透明背景 相互覆盖，因为GPU 不得不一遍又一遍的画这些图层。</p>\n<h3 id=\"2-可以使用的Android系统的工具\"><a href=\"#2-可以使用的Android系统的工具\" class=\"headerlink\" title=\"2) 可以使用的Android系统的工具\"></a>2) 可以使用的Android系统的工具</h3><blockquote>\n<p>这些在 1、2在设置-&gt;开发者选项 里面，3、4是Android Studio上的功能</p>\n</blockquote>\n<h4 id=\"1-GPU-呈现模式分析-GPU-Rendering-Profiling\"><a href=\"#1-GPU-呈现模式分析-GPU-Rendering-Profiling\" class=\"headerlink\" title=\"1. GPU 呈现模式分析(GPU Rendering Profiling)\"></a>1. GPU 呈现模式分析(GPU Rendering Profiling)</h4><blockquote>\n<p>可以分析出哪些是在16ms以内，什么时候超过了16ms（60Hz，掉帧哦~…）</p>\n</blockquote>\n<p><strong>千万避免在View中设置透明度</strong>，特别是在自定义的View上（一般来说ImageView、TextView(ButtonView..)是没有问题的），Falcon作者，在一次检测GPU呈现模式的时候，发现一个设置透明度，导致了Frame的渲染慢了一倍多。</p>\n<p>具体原因是由于，一旦设置了Alpha，每次draw 那个View都不得不 清除绘制缓存(Flush Buffer)，然后再绘制到屏幕上，效果如右图(顶部的那几个小点setAlpha(0.5*255))。</p>\n<p><img src=\"/img/Falcon-font.png\" alt=\"\"></p>\n<h4 id=\"2-调试CPU过渡绘制\"><a href=\"#2-调试CPU过渡绘制\" class=\"headerlink\" title=\"2. 调试CPU过渡绘制\"></a>2. 调试CPU过渡绘制</h4><p>检测重绘神器。</p>\n<h4 id=\"3-内存监控\"><a href=\"#3-内存监控\" class=\"headerlink\" title=\"3. 内存监控\"></a>3. 内存监控</h4><p>Android Studio上的一个功能。</p>\n<h4 id=\"4-内存创建跟踪-Allocation-tracker\"><a href=\"#4-内存创建跟踪-Allocation-tracker\" class=\"headerlink\" title=\"4. 内存创建跟踪(Allocation tracker)\"></a>4. 内存创建跟踪(Allocation tracker)</h4><p>也是Android Studio上的一个功能。</p>\n<p>具体教程可以看这里: <a href=\"https://developer.android.com/tools/debugging/debugging-studio.html#allocTracker\">https://developer.android.com/tools/debugging/debugging-studio.html#allocTracker</a></p>\n<h2 id=\"VI-设计\"><a href=\"#VI-设计\" class=\"headerlink\" title=\"VI. 设计\"></a>VI. 设计</h2><blockquote>\n<p>Falcon 可是 Joaquim自己设计的!</p>\n</blockquote>\n<h4 id=\"1-草图\"><a href=\"#1-草图\" class=\"headerlink\" title=\"1. 草图\"></a>1. 草图</h4><p>可以使用软件sketch</p>\n<h4 id=\"2-颜色选择方面\"><a href=\"#2-颜色选择方面\" class=\"headerlink\" title=\"2. 颜色选择方面\"></a>2. 颜色选择方面</h4><p>可以使用<a href=\"http://coolors.co/\">coolors.co</a>，可以很快的定位好整个app的颜色。Joaquim大概就用了10分钟</p>\n<p>这边我也推荐一个<a href=\"http://paletton.com/#uid=72P0+0kllllaFw0g0qFqFg0w0aF\">Paletton.com</a>,也很不错。</p>\n<h4 id=\"3-Icon\"><a href=\"#3-Icon\" class=\"headerlink\" title=\"3. Icon\"></a>3. Icon</h4><p>说实话作为开发，确实不愿意花太多时间去设计icon，但是Google对外开放了200多个icon素材。</p>\n<p><strong>更好的方法</strong>: 一款intellij(或者Android Studio（同一平台idea）)的插件: <a href=\"https://github.com/konifar/android-material-design-icon-generator-plugin\">https://github.com/konifar/android-material-design-icon-generator-plugin</a> 自动生成Material icon确实好屌。</p>\n<h4 id=\"4-字体方面\"><a href=\"#4-字体方面\" class=\"headerlink\" title=\"4. 字体方面\"></a>4. 字体方面</h4><p>Joaquim只用了Android SDK的: <code>android:font_family</code>，完全够用：</p>\n<p><img src=\"/img/SQLite___Core_Data.png\" alt=\"\"></p>\n<h4 id=\"5-视觉宗旨定义\"><a href=\"#5-视觉宗旨定义\" class=\"headerlink\" title=\"5. 视觉宗旨定义\"></a>5. 视觉宗旨定义</h4><p>Joaquim定位Falcon是内容至上。</p>\n<h2 id=\"VII-Crash报告与分析\"><a href=\"#VII-Crash报告与分析\" class=\"headerlink\" title=\"VII. Crash报告与分析\"></a>VII. Crash报告与分析</h2><p>Falcon使用了: <a href=\"https://try.crashlytics.com/\">Crashlytics</a>，评价很高，一行代码，搞定90%的需求。</p>\n<h2 id=\"VIII-安全\"><a href=\"#VIII-安全\" class=\"headerlink\" title=\"VIII. 安全\"></a>VIII. 安全</h2><h3 id=\"1-混淆\"><a href=\"#1-混淆\" class=\"headerlink\" title=\"1. 混淆\"></a>1. 混淆</h3><p>最基本的保障，反编译以后极大减小可读性。</p>\n<h3 id=\"2-LVL\"><a href=\"#2-LVL\" class=\"headerlink\" title=\"2. LVL\"></a>2. LVL</h3><blockquote>\n<p>The License verification library from Google</p>\n</blockquote>\n<p>不值得，如果说要保证交易安全，应该在成交之前，在自己的服务器上做更多的验证（EAPs）</p>\n<h2 id=\"IX-Beta\"><a href=\"#IX-Beta\" class=\"headerlink\" title=\"IX. Beta\"></a>IX. Beta</h2><p>Joaquim不建议到Google+ communites做测试，没啥用。</p>\n<h2 id=\"X-发布\"><a href=\"#X-发布\" class=\"headerlink\" title=\"X. 发布\"></a>X. 发布</h2><h3 id=\"1-视频肯定要的\"><a href=\"#1-视频肯定要的\" class=\"headerlink\" title=\"1. 视频肯定要的\"></a>1. 视频肯定要的</h3><p>adb shell screenrecord</p>\n<h3 id=\"2-Banner\"><a href=\"#2-Banner\" class=\"headerlink\" title=\"2. Banner\"></a>2. Banner</h3><p>选取好的截图，附上网址、logo等等。</p>\n<h3 id=\"3-截图\"><a href=\"#3-截图\" class=\"headerlink\" title=\"3. 截图\"></a>3. 截图</h3><p>Joaquim不喜欢 赤裸裸的截图，喜欢重构布局、装饰以后的截图。</p>\n<h3 id=\"4-Icon\"><a href=\"#4-Icon\" class=\"headerlink\" title=\"4. Icon\"></a>4. Icon</h3><p>用心设计</p>\n<h2 id=\"XI-迭代\"><a href=\"#XI-迭代\" class=\"headerlink\" title=\"XI. 迭代\"></a>XI. 迭代</h2><blockquote>\n<p>让用户来驱动，通过不断，快速的对用户的反馈评论做出应答的方式，来升级应用。</p>\n</blockquote>\n<ol>\n<li>通过尽量快的应答用户，让用户感觉他们也是产品项目的一员。</li>\n<li>通过用户反馈，来生成项目接下来要做的清单。</li>\n<li>解决用户的问题，因为他们将会成为你最好的客户。</li>\n</ol>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"Flatbuffer Use Optimize","date":"2015-01-05T00:35:03.000Z","_content":"\n### 一. Tool Launguage\npython.\n\n### 二. Cause\n1. `__offset()` method is not fast enough.\n2. for get a varaible may need to calls `__offset()` method many times.\n\n### 三. Effect\n1. Add has set method for flatbuffer file.\n2. Add member variables cache (include array variables).\n\n<!--more-->\n\n### 四. Exp\n\norigin:\n\n```\npublic int top() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }\n```\n\nconvert to:\n\n```\n  public boolean has_top_cache = false;\n  public int top_cache;\n  public int top() { if ( has_top_cache ) { return top_cache; }  int o = __offset(4); top_cache = o != 0 ? bb.getInt(o + bb_pos) : 0;  has_top_cache= true; return top_cache; }\n  public boolean hasSetValue_top = false;\n  public boolean hasSet_top() { if ( hasSetValue_top ) { return true; }  if ( has_top_cache  ) { return top_cache != 0; } int o = __offset(4); if (o == 0) { has_top_cache = true; top_cache = 0; return false; } else { hasSetValue_top = true; return true; } }\n ```\n\norigin:\n\n```\npublic String fontFamily(int j) { int o = __offset(10); return o != 0 ? __string(__vector(o) + j * 4) : null; }\n```\n\nconvert to:\n\n```\npublic int list_fontFamily_offset = -1;\npublic android.util.SparseArray<String> fontFamily_cache = new android.util.SparseArray<String>();\npublic String fontFamily(int j) { if ( fontFamily_cache.get(j) != null ) { return fontFamily_cache.get(j); }  int o = list_fontFamily_offset != -1? list_fontFamily_offset : __offset(10); String value =  o != 0 ? __string(__vector(o) + j * 4) : null;  list_fontFamily_offset = o; fontFamily_cache.put( j, value); return value; }\npublic boolean hasSet_fontFamily() { if ( list_fontFamily_offset != -1 ) { return list_fontFamily_offset != 0; } list_fontFamily_offset = __offset(10); return list_fontFamily_offset!= 0; }\n```\n\n### 五. Tips\nFlatbuffer is very fast from flatbuffer instream to avaliable object, but `__offset()` is very slow, so very frequently invoked almost not recommended. I tested 100,000 times `__offset()`, consuming greater than 50ms, but Java object directly accesse the same time only need 2~3ms. So such tool is come, but you need to pay attention to the increase of the GC.\n\n\n### 六. Tool Source\nGitHub: [https://github.com/Jacksgong/FlatBuffer-Optimize](https://github.com/Jacksgong/FlatBuffer-Optimize)\n\n```\nimport os\n\n__author__ = 'Jacks gong'\n__date__ = 'Jan 4, 2015'\n\n\ndef has_set(line=''):\n    has_set_method = ''\n    if line.isspace():\n        return ''\n    return has_set_method\n\n\ndef cache_obj(line=''):\n    return ''\n\n\ndef file_list(rootDir):\n    list = []\n    for root, dirs, files in os.walk(rootDir):\n        for filespath in files:\n            list.append(os.path.join(root, filespath))\n    return list\n\n\ndef is_java(path=''):\n    return path.endswith('.java')\n\n\ndef is_valid_deal(line=''):\n    return '__offset(' in line and 'public ' in line\n\n\ndef get_type(line=''):\n    values = line.split(' ')\n\n    type_index = 0\n    for value in values:\n        type_index += 1\n        if value == 'public':\n            break\n\n    if type_index >= len(values):\n        return ''\n\n    return values[type_index]\n\n\ndef get_value_name(line=''):\n    values = line.split(' ')\n\n    for value in values:\n        if not '(' in value:\n            continue\n        return value[:value.find('(')]\n\n    return ''\n\n\ndef is_list(line=''):\n    return 'int j' in line[line.find('('):line.find(')')]\n\n\ndef get_offset(line=''):\n    offset_pre = '__offset('\n    offset_nums = line[line.find(offset_pre) + len(offset_pre):]\n    return offset_nums[:offset_nums.find(')')]\n\n\ndef get_base_type_object(type=''):\n    if not type in base_type:\n        return type\n    return base_type_object[base_type.index(type)]\n\n\nbase_type = ('int', 'float', 'long', 'boolean', 'uint', 'byte', 'ulong')\nbase_type_object = ('Integer', 'Float', 'Long', 'Boolean', 'Integer', 'Byte', 'Long')\n\n\ndef main():\n    flatc_path = raw_input('flatbuffer absolute path: ')\n\n    list = file_list(flatc_path)\n\n    for path in list:\n        if not is_java(path):\n            continue\n        file_read = open(path)\n        lines = file_read.readlines()\n        file_read.close()\n\n        print(path)\n        file_write = open(path, 'w')\n\n        for line in lines:\n            while True:\n                if line.isspace():\n                    break\n\n                if not is_valid_deal(line):\n                    break\n\n                type = get_type(line)\n                value_name = get_value_name(line)\n                if type.isspace() or value_name.isspace():\n                    break;\n\n                offset_nums = get_offset(line)\n\n                cache_name = value_name + '_cache'\n\n                if is_list(line):\n                    list_offset = 'list_' + value_name + '_offset'\n                    has_set_list_def = '  public int ' + list_offset + ' = -1;\\n'\n\n                    type_object = get_base_type_object(type);\n                    cache_def = '  public android.util.SparseArray<' + type_object + '> ' + cache_name + ' = new android.util.SparseArray<' + type_object + '>();\\n'\n\n                    origin_method_pre = line[0:line.index('{') + 1] + \\\n                                        ' if ( ' + cache_name + '.get(j) != null ) { return ' + cache_name + '.get(j); } '\n                    origin_method_mid = line[line.index('{') + 1: line.index('}')]\n                    origin_method_mid = origin_method_mid.replace('__offset', list_offset + ' != -1? ' + list_offset + ' : __offset')\n                    origin_method_mid = origin_method_mid.replace('return', type + ' value = ')\n                    origin_method_end = ' ' + list_offset + ' = o; ' + cache_name + '.put( j, value); return value; }'\n                    origin_method_def = origin_method_pre + origin_method_mid + origin_method_end + '\\n'\n\n                    has_set_method_pre = '  public boolean hasSet_' + value_name + '() { if ( ' + list_offset + ' != -1 ) { return ' + \\\n                                         list_offset + ' != 0; } '\n                    has_set_method_mid = list_offset + ' = __offset(' + offset_nums + '); '\n                    has_set_method_end = 'return ' + list_offset + '!= 0; }'\n\n                    has_set_method_def = has_set_method_pre + has_set_method_mid + has_set_method_end + '\\n'\n\n                    line = has_set_list_def + cache_def + origin_method_def + has_set_method_def;\n                    print(line)\n\n                    break;\n\n                has_set_value_name = 'hasSetValue_' + value_name\n                has_set_value_def = '  public boolean ' + has_set_value_name + ' = false; \\n'\n\n                has_cache = 'has_' + value_name + '_cache'\n                has_cache_def = '  public boolean ' + has_cache + ' = false;\\n'\n\n                cache_def = '  public ' + type + ' ' + cache_name + ';\\n'\n\n                origin_method_pre = line[0:line.index('{') + 1] + \\\n                                    ' if ( ' + has_cache + ' ) { return ' + cache_name + '; } '\n\n                origin_method_mid = line[line.index('{') + 1: line.index('}')]\n\n                origin_method_mid = origin_method_mid.replace('return', cache_name + ' =')\n\n                origin_method_end = ' ' + has_cache + '= true; return ' + cache_name + '; }'\n\n                origin_method_def = origin_method_pre + origin_method_mid + origin_method_end + '\\n'\n\n                has_set_method_pre = '  public boolean hasSet_' + value_name + '() { if ( ' + has_set_value_name + ' ) { return true; } '\n\n                has_set_method_mid = ' if ( ' + has_cache + '  ) { return ' + cache_name\n                if type in base_type:\n                    has_set_method_mid += ' != 0; } int o = __offset(' + offset_nums + '); if (o == 0) { ' + \\\n                                          has_cache + ' = true; ' + cache_name + ' = 0; return false; } '\n                else:\n                    has_set_method_mid += ' != null; } int o = __offset( ' + offset_nums + ' ); if (o == 0) { ' + \\\n                                          has_cache + ' = true; ' + cache_name + ' = null; return false; } '\n\n                has_set_method_end = 'else { ' + has_set_value_name + ' = true; return true; } }';\n\n                has_set_method_def = has_set_method_pre + has_set_method_mid + has_set_method_end + '\\n'\n\n                line = has_cache_def + cache_def + origin_method_def + has_set_value_def + has_set_method_def;\n\n                print(line)\n                break;\n            line += '\\n'\n            file_write.write(line)\n\n        file_write.close()\n\n\nmain()\n```\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/Flatbuffer-Use-Optimize.md","raw":"title: Flatbuffer Use Optimize\ndate: 2015-01-05 08:35:03\npermalink: 2015/01/05/Flatbuffer-Use-Optimize\ntags:\n- flatbuffer\n- optimize\n- python\n- 项目\n\n---\n\n### 一. Tool Launguage\npython.\n\n### 二. Cause\n1. `__offset()` method is not fast enough.\n2. for get a varaible may need to calls `__offset()` method many times.\n\n### 三. Effect\n1. Add has set method for flatbuffer file.\n2. Add member variables cache (include array variables).\n\n<!--more-->\n\n### 四. Exp\n\norigin:\n\n```\npublic int top() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }\n```\n\nconvert to:\n\n```\n  public boolean has_top_cache = false;\n  public int top_cache;\n  public int top() { if ( has_top_cache ) { return top_cache; }  int o = __offset(4); top_cache = o != 0 ? bb.getInt(o + bb_pos) : 0;  has_top_cache= true; return top_cache; }\n  public boolean hasSetValue_top = false;\n  public boolean hasSet_top() { if ( hasSetValue_top ) { return true; }  if ( has_top_cache  ) { return top_cache != 0; } int o = __offset(4); if (o == 0) { has_top_cache = true; top_cache = 0; return false; } else { hasSetValue_top = true; return true; } }\n ```\n\norigin:\n\n```\npublic String fontFamily(int j) { int o = __offset(10); return o != 0 ? __string(__vector(o) + j * 4) : null; }\n```\n\nconvert to:\n\n```\npublic int list_fontFamily_offset = -1;\npublic android.util.SparseArray<String> fontFamily_cache = new android.util.SparseArray<String>();\npublic String fontFamily(int j) { if ( fontFamily_cache.get(j) != null ) { return fontFamily_cache.get(j); }  int o = list_fontFamily_offset != -1? list_fontFamily_offset : __offset(10); String value =  o != 0 ? __string(__vector(o) + j * 4) : null;  list_fontFamily_offset = o; fontFamily_cache.put( j, value); return value; }\npublic boolean hasSet_fontFamily() { if ( list_fontFamily_offset != -1 ) { return list_fontFamily_offset != 0; } list_fontFamily_offset = __offset(10); return list_fontFamily_offset!= 0; }\n```\n\n### 五. Tips\nFlatbuffer is very fast from flatbuffer instream to avaliable object, but `__offset()` is very slow, so very frequently invoked almost not recommended. I tested 100,000 times `__offset()`, consuming greater than 50ms, but Java object directly accesse the same time only need 2~3ms. So such tool is come, but you need to pay attention to the increase of the GC.\n\n\n### 六. Tool Source\nGitHub: [https://github.com/Jacksgong/FlatBuffer-Optimize](https://github.com/Jacksgong/FlatBuffer-Optimize)\n\n```\nimport os\n\n__author__ = 'Jacks gong'\n__date__ = 'Jan 4, 2015'\n\n\ndef has_set(line=''):\n    has_set_method = ''\n    if line.isspace():\n        return ''\n    return has_set_method\n\n\ndef cache_obj(line=''):\n    return ''\n\n\ndef file_list(rootDir):\n    list = []\n    for root, dirs, files in os.walk(rootDir):\n        for filespath in files:\n            list.append(os.path.join(root, filespath))\n    return list\n\n\ndef is_java(path=''):\n    return path.endswith('.java')\n\n\ndef is_valid_deal(line=''):\n    return '__offset(' in line and 'public ' in line\n\n\ndef get_type(line=''):\n    values = line.split(' ')\n\n    type_index = 0\n    for value in values:\n        type_index += 1\n        if value == 'public':\n            break\n\n    if type_index >= len(values):\n        return ''\n\n    return values[type_index]\n\n\ndef get_value_name(line=''):\n    values = line.split(' ')\n\n    for value in values:\n        if not '(' in value:\n            continue\n        return value[:value.find('(')]\n\n    return ''\n\n\ndef is_list(line=''):\n    return 'int j' in line[line.find('('):line.find(')')]\n\n\ndef get_offset(line=''):\n    offset_pre = '__offset('\n    offset_nums = line[line.find(offset_pre) + len(offset_pre):]\n    return offset_nums[:offset_nums.find(')')]\n\n\ndef get_base_type_object(type=''):\n    if not type in base_type:\n        return type\n    return base_type_object[base_type.index(type)]\n\n\nbase_type = ('int', 'float', 'long', 'boolean', 'uint', 'byte', 'ulong')\nbase_type_object = ('Integer', 'Float', 'Long', 'Boolean', 'Integer', 'Byte', 'Long')\n\n\ndef main():\n    flatc_path = raw_input('flatbuffer absolute path: ')\n\n    list = file_list(flatc_path)\n\n    for path in list:\n        if not is_java(path):\n            continue\n        file_read = open(path)\n        lines = file_read.readlines()\n        file_read.close()\n\n        print(path)\n        file_write = open(path, 'w')\n\n        for line in lines:\n            while True:\n                if line.isspace():\n                    break\n\n                if not is_valid_deal(line):\n                    break\n\n                type = get_type(line)\n                value_name = get_value_name(line)\n                if type.isspace() or value_name.isspace():\n                    break;\n\n                offset_nums = get_offset(line)\n\n                cache_name = value_name + '_cache'\n\n                if is_list(line):\n                    list_offset = 'list_' + value_name + '_offset'\n                    has_set_list_def = '  public int ' + list_offset + ' = -1;\\n'\n\n                    type_object = get_base_type_object(type);\n                    cache_def = '  public android.util.SparseArray<' + type_object + '> ' + cache_name + ' = new android.util.SparseArray<' + type_object + '>();\\n'\n\n                    origin_method_pre = line[0:line.index('{') + 1] + \\\n                                        ' if ( ' + cache_name + '.get(j) != null ) { return ' + cache_name + '.get(j); } '\n                    origin_method_mid = line[line.index('{') + 1: line.index('}')]\n                    origin_method_mid = origin_method_mid.replace('__offset', list_offset + ' != -1? ' + list_offset + ' : __offset')\n                    origin_method_mid = origin_method_mid.replace('return', type + ' value = ')\n                    origin_method_end = ' ' + list_offset + ' = o; ' + cache_name + '.put( j, value); return value; }'\n                    origin_method_def = origin_method_pre + origin_method_mid + origin_method_end + '\\n'\n\n                    has_set_method_pre = '  public boolean hasSet_' + value_name + '() { if ( ' + list_offset + ' != -1 ) { return ' + \\\n                                         list_offset + ' != 0; } '\n                    has_set_method_mid = list_offset + ' = __offset(' + offset_nums + '); '\n                    has_set_method_end = 'return ' + list_offset + '!= 0; }'\n\n                    has_set_method_def = has_set_method_pre + has_set_method_mid + has_set_method_end + '\\n'\n\n                    line = has_set_list_def + cache_def + origin_method_def + has_set_method_def;\n                    print(line)\n\n                    break;\n\n                has_set_value_name = 'hasSetValue_' + value_name\n                has_set_value_def = '  public boolean ' + has_set_value_name + ' = false; \\n'\n\n                has_cache = 'has_' + value_name + '_cache'\n                has_cache_def = '  public boolean ' + has_cache + ' = false;\\n'\n\n                cache_def = '  public ' + type + ' ' + cache_name + ';\\n'\n\n                origin_method_pre = line[0:line.index('{') + 1] + \\\n                                    ' if ( ' + has_cache + ' ) { return ' + cache_name + '; } '\n\n                origin_method_mid = line[line.index('{') + 1: line.index('}')]\n\n                origin_method_mid = origin_method_mid.replace('return', cache_name + ' =')\n\n                origin_method_end = ' ' + has_cache + '= true; return ' + cache_name + '; }'\n\n                origin_method_def = origin_method_pre + origin_method_mid + origin_method_end + '\\n'\n\n                has_set_method_pre = '  public boolean hasSet_' + value_name + '() { if ( ' + has_set_value_name + ' ) { return true; } '\n\n                has_set_method_mid = ' if ( ' + has_cache + '  ) { return ' + cache_name\n                if type in base_type:\n                    has_set_method_mid += ' != 0; } int o = __offset(' + offset_nums + '); if (o == 0) { ' + \\\n                                          has_cache + ' = true; ' + cache_name + ' = 0; return false; } '\n                else:\n                    has_set_method_mid += ' != null; } int o = __offset( ' + offset_nums + ' ); if (o == 0) { ' + \\\n                                          has_cache + ' = true; ' + cache_name + ' = null; return false; } '\n\n                has_set_method_end = 'else { ' + has_set_value_name + ' = true; return true; } }';\n\n                has_set_method_def = has_set_method_pre + has_set_method_mid + has_set_method_end + '\\n'\n\n                line = has_cache_def + cache_def + origin_method_def + has_set_value_def + has_set_method_def;\n\n                print(line)\n                break;\n            line += '\\n'\n            file_write.write(line)\n\n        file_write.close()\n\n\nmain()\n```\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2015/01/05/Flatbuffer-Use-Optimize","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66hp000g95bu8mraykk2","content":"<h3 id=\"一-Tool-Launguage\"><a href=\"#一-Tool-Launguage\" class=\"headerlink\" title=\"一. Tool Launguage\"></a>一. Tool Launguage</h3><p>python.</p>\n<h3 id=\"二-Cause\"><a href=\"#二-Cause\" class=\"headerlink\" title=\"二. Cause\"></a>二. Cause</h3><ol>\n<li><code>__offset()</code> method is not fast enough.</li>\n<li>for get a varaible may need to calls <code>__offset()</code> method many times.</li>\n</ol>\n<h3 id=\"三-Effect\"><a href=\"#三-Effect\" class=\"headerlink\" title=\"三. Effect\"></a>三. Effect</h3><ol>\n<li>Add has set method for flatbuffer file.</li>\n<li>Add member variables cache (include array variables).</li>\n</ol>\n<a id=\"more\"></a>\n<h3 id=\"四-Exp\"><a href=\"#四-Exp\" class=\"headerlink\" title=\"四. Exp\"></a>四. Exp</h3><p>origin:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">top</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">int</span> o = __offset(<span class=\"number\">4</span>); <span class=\"keyword\">return</span> o != <span class=\"number\">0</span> ? bb.getInt(o + bb_pos) : <span class=\"number\">0</span>; &#125;</div></pre></td></tr></table></figure>\n<p>convert to:</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> has_top_cache = <span class=\"keyword\">false</span>;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> top_cache;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">top</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">if</span> ( has_top_cache ) &#123; <span class=\"keyword\">return</span> top_cache; &#125;  <span class=\"keyword\">int</span> o = __offset(<span class=\"number\">4</span>); top_cache = o != <span class=\"number\">0</span> ? bb.getInt(o + bb_pos) : 0;  has_top_cache= <span class=\"keyword\">true</span>; <span class=\"keyword\">return</span> top_cache; &#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> hasSetValue_top = <span class=\"keyword\">false</span>;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">hasSet_top</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">if</span> ( hasSetValue_top ) &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>; &#125;  <span class=\"keyword\">if</span> ( has_top_cache  ) &#123; <span class=\"keyword\">return</span> top_cache != <span class=\"number\">0</span>; &#125; <span class=\"keyword\">int</span> o = __offset(<span class=\"number\">4</span>); <span class=\"keyword\">if</span> (o == <span class=\"number\">0</span>) &#123; has_top_cache = <span class=\"keyword\">true</span>; top_cache = <span class=\"number\">0</span>; <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>; &#125; <span class=\"keyword\">else</span> &#123; hasSetValue_top = <span class=\"keyword\">true</span>; <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>; &#125; &#125;</div></pre></td></tr></table></figure>\n<p>origin:</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\">String <span class=\"title\">fontFamily</span><span class=\"params\">(<span class=\"keyword\">int</span> j)</span> </span>&#123; <span class=\"keyword\">int</span> o = __offset(<span class=\"number\">10</span>); <span class=\"keyword\">return</span> o != <span class=\"number\">0</span> ? __string(__vector(o) + j * <span class=\"number\">4</span>) : <span class=\"keyword\">null</span>; &#125;</div></pre></td></tr></table></figure>\n<p>convert to:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> list_fontFamily_offset = <span class=\"number\">-1</span>;</div><div class=\"line\"><span class=\"keyword\">public</span> android.util.SparseArray&lt;String&gt; fontFamily_cache = <span class=\"keyword\">new</span> android.util.SparseArray&lt;String&gt;();</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">fontFamily</span>(<span class=\"params\"><span class=\"keyword\">int</span> j</span>) </span>&#123; <span class=\"keyword\">if</span> ( fontFamily_cache.<span class=\"keyword\">get</span>(j) != <span class=\"literal\">null</span> ) &#123; <span class=\"keyword\">return</span> fontFamily_cache.<span class=\"keyword\">get</span>(j); &#125;  <span class=\"keyword\">int</span> o = list_fontFamily_offset != <span class=\"number\">-1</span>? list_fontFamily_offset : __offset(<span class=\"number\">10</span>); String <span class=\"keyword\">value</span> =  o != <span class=\"number\">0</span> ? __string(__vector(o) + j * <span class=\"number\">4</span>) : <span class=\"literal\">null</span>;  list_fontFamily_offset = o; fontFamily_cache.put( j, <span class=\"keyword\">value</span>); <span class=\"keyword\">return</span> <span class=\"keyword\">value</span>; &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> boolean <span class=\"title\">hasSet_fontFamily</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">if</span> ( list_fontFamily_offset != <span class=\"number\">-1</span> ) &#123; <span class=\"keyword\">return</span> list_fontFamily_offset != <span class=\"number\">0</span>; &#125; list_fontFamily_offset = __offset(<span class=\"number\">10</span>); <span class=\"keyword\">return</span> list_fontFamily_offset!= <span class=\"number\">0</span>; &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"五-Tips\"><a href=\"#五-Tips\" class=\"headerlink\" title=\"五. Tips\"></a>五. Tips</h3><p>Flatbuffer is very fast from flatbuffer instream to avaliable object, but <code>__offset()</code> is very slow, so very frequently invoked almost not recommended. I tested 100,000 times <code>__offset()</code>, consuming greater than 50ms, but Java object directly accesse the same time only need 2~3ms. So such tool is come, but you need to pay attention to the increase of the GC.</p>\n<h3 id=\"六-Tool-Source\"><a href=\"#六-Tool-Source\" class=\"headerlink\" title=\"六. Tool Source\"></a>六. Tool Source</h3><p>GitHub: <a href=\"https://github.com/Jacksgong/FlatBuffer-Optimize\" target=\"_blank\" rel=\"external\">https://github.com/Jacksgong/FlatBuffer-Optimize</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"></div><div class=\"line\">__author__ = <span class=\"string\">'Jacks gong'</span></div><div class=\"line\">__date__ = <span class=\"string\">'Jan 4, 2015'</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">has_set</span><span class=\"params\">(line=<span class=\"string\">''</span>)</span>:</span></div><div class=\"line\">    has_set_method = <span class=\"string\">''</span></div><div class=\"line\">    <span class=\"keyword\">if</span> line.isspace():</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">''</span></div><div class=\"line\">    <span class=\"keyword\">return</span> has_set_method</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cache_obj</span><span class=\"params\">(line=<span class=\"string\">''</span>)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">''</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">file_list</span><span class=\"params\">(rootDir)</span>:</span></div><div class=\"line\">    list = []</div><div class=\"line\">    <span class=\"keyword\">for</span> root, dirs, files <span class=\"keyword\">in</span> os.walk(rootDir):</div><div class=\"line\">        <span class=\"keyword\">for</span> filespath <span class=\"keyword\">in</span> files:</div><div class=\"line\">            list.append(os.path.join(root, filespath))</div><div class=\"line\">    <span class=\"keyword\">return</span> list</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_java</span><span class=\"params\">(path=<span class=\"string\">''</span>)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> path.endswith(<span class=\"string\">'.java'</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_valid_deal</span><span class=\"params\">(line=<span class=\"string\">''</span>)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'__offset('</span> <span class=\"keyword\">in</span> line <span class=\"keyword\">and</span> <span class=\"string\">'public '</span> <span class=\"keyword\">in</span> line</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_type</span><span class=\"params\">(line=<span class=\"string\">''</span>)</span>:</span></div><div class=\"line\">    values = line.split(<span class=\"string\">' '</span>)</div><div class=\"line\"></div><div class=\"line\">    type_index = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">for</span> value <span class=\"keyword\">in</span> values:</div><div class=\"line\">        type_index += <span class=\"number\">1</span></div><div class=\"line\">        <span class=\"keyword\">if</span> value == <span class=\"string\">'public'</span>:</div><div class=\"line\">            <span class=\"keyword\">break</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> type_index &gt;= len(values):</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">''</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> values[type_index]</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_value_name</span><span class=\"params\">(line=<span class=\"string\">''</span>)</span>:</span></div><div class=\"line\">    values = line.split(<span class=\"string\">' '</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> value <span class=\"keyword\">in</span> values:</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"string\">'('</span> <span class=\"keyword\">in</span> value:</div><div class=\"line\">            <span class=\"keyword\">continue</span></div><div class=\"line\">        <span class=\"keyword\">return</span> value[:value.find(<span class=\"string\">'('</span>)]</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">''</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_list</span><span class=\"params\">(line=<span class=\"string\">''</span>)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'int j'</span> <span class=\"keyword\">in</span> line[line.find(<span class=\"string\">'('</span>):line.find(<span class=\"string\">')'</span>)]</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_offset</span><span class=\"params\">(line=<span class=\"string\">''</span>)</span>:</span></div><div class=\"line\">    offset_pre = <span class=\"string\">'__offset('</span></div><div class=\"line\">    offset_nums = line[line.find(offset_pre) + len(offset_pre):]</div><div class=\"line\">    <span class=\"keyword\">return</span> offset_nums[:offset_nums.find(<span class=\"string\">')'</span>)]</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_base_type_object</span><span class=\"params\">(type=<span class=\"string\">''</span>)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> type <span class=\"keyword\">in</span> base_type:</div><div class=\"line\">        <span class=\"keyword\">return</span> type</div><div class=\"line\">    <span class=\"keyword\">return</span> base_type_object[base_type.index(type)]</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">base_type = (<span class=\"string\">'int'</span>, <span class=\"string\">'float'</span>, <span class=\"string\">'long'</span>, <span class=\"string\">'boolean'</span>, <span class=\"string\">'uint'</span>, <span class=\"string\">'byte'</span>, <span class=\"string\">'ulong'</span>)</div><div class=\"line\">base_type_object = (<span class=\"string\">'Integer'</span>, <span class=\"string\">'Float'</span>, <span class=\"string\">'Long'</span>, <span class=\"string\">'Boolean'</span>, <span class=\"string\">'Integer'</span>, <span class=\"string\">'Byte'</span>, <span class=\"string\">'Long'</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    flatc_path = raw_input(<span class=\"string\">'flatbuffer absolute path: '</span>)</div><div class=\"line\"></div><div class=\"line\">    list = file_list(flatc_path)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> path <span class=\"keyword\">in</span> list:</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> is_java(path):</div><div class=\"line\">            <span class=\"keyword\">continue</span></div><div class=\"line\">        file_read = open(path)</div><div class=\"line\">        lines = file_read.readlines()</div><div class=\"line\">        file_read.close()</div><div class=\"line\"></div><div class=\"line\">        print(path)</div><div class=\"line\">        file_write = open(path, <span class=\"string\">'w'</span>)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> lines:</div><div class=\"line\">            <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">                <span class=\"keyword\">if</span> line.isspace():</div><div class=\"line\">                    <span class=\"keyword\">break</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> is_valid_deal(line):</div><div class=\"line\">                    <span class=\"keyword\">break</span></div><div class=\"line\"></div><div class=\"line\">                type = get_type(line)</div><div class=\"line\">                value_name = get_value_name(line)</div><div class=\"line\">                <span class=\"keyword\">if</span> type.isspace() <span class=\"keyword\">or</span> value_name.isspace():</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">                offset_nums = get_offset(line)</div><div class=\"line\"></div><div class=\"line\">                cache_name = value_name + <span class=\"string\">'_cache'</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> is_list(line):</div><div class=\"line\">                    list_offset = <span class=\"string\">'list_'</span> + value_name + <span class=\"string\">'_offset'</span></div><div class=\"line\">                    has_set_list_def = <span class=\"string\">'  public int '</span> + list_offset + <span class=\"string\">' = -1;\\n'</span></div><div class=\"line\"></div><div class=\"line\">                    type_object = get_base_type_object(type);</div><div class=\"line\">                    cache_def = <span class=\"string\">'  public android.util.SparseArray&lt;'</span> + type_object + <span class=\"string\">'&gt; '</span> + cache_name + <span class=\"string\">' = new android.util.SparseArray&lt;'</span> + type_object + <span class=\"string\">'&gt;();\\n'</span></div><div class=\"line\"></div><div class=\"line\">                    origin_method_pre = line[<span class=\"number\">0</span>:line.index(<span class=\"string\">'&#123;'</span>) + <span class=\"number\">1</span>] + \\</div><div class=\"line\">                                        <span class=\"string\">' if ( '</span> + cache_name + <span class=\"string\">'.get(j) != null ) &#123; return '</span> + cache_name + <span class=\"string\">'.get(j); &#125; '</span></div><div class=\"line\">                    origin_method_mid = line[line.index(<span class=\"string\">'&#123;'</span>) + <span class=\"number\">1</span>: line.index(<span class=\"string\">'&#125;'</span>)]</div><div class=\"line\">                    origin_method_mid = origin_method_mid.replace(<span class=\"string\">'__offset'</span>, list_offset + <span class=\"string\">' != -1? '</span> + list_offset + <span class=\"string\">' : __offset'</span>)</div><div class=\"line\">                    origin_method_mid = origin_method_mid.replace(<span class=\"string\">'return'</span>, type + <span class=\"string\">' value = '</span>)</div><div class=\"line\">                    origin_method_end = <span class=\"string\">' '</span> + list_offset + <span class=\"string\">' = o; '</span> + cache_name + <span class=\"string\">'.put( j, value); return value; &#125;'</span></div><div class=\"line\">                    origin_method_def = origin_method_pre + origin_method_mid + origin_method_end + <span class=\"string\">'\\n'</span></div><div class=\"line\"></div><div class=\"line\">                    has_set_method_pre = <span class=\"string\">'  public boolean hasSet_'</span> + value_name + <span class=\"string\">'() &#123; if ( '</span> + list_offset + <span class=\"string\">' != -1 ) &#123; return '</span> + \\</div><div class=\"line\">                                         list_offset + <span class=\"string\">' != 0; &#125; '</span></div><div class=\"line\">                    has_set_method_mid = list_offset + <span class=\"string\">' = __offset('</span> + offset_nums + <span class=\"string\">'); '</span></div><div class=\"line\">                    has_set_method_end = <span class=\"string\">'return '</span> + list_offset + <span class=\"string\">'!= 0; &#125;'</span></div><div class=\"line\"></div><div class=\"line\">                    has_set_method_def = has_set_method_pre + has_set_method_mid + has_set_method_end + <span class=\"string\">'\\n'</span></div><div class=\"line\"></div><div class=\"line\">                    line = has_set_list_def + cache_def + origin_method_def + has_set_method_def;</div><div class=\"line\">                    print(line)</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">                has_set_value_name = <span class=\"string\">'hasSetValue_'</span> + value_name</div><div class=\"line\">                has_set_value_def = <span class=\"string\">'  public boolean '</span> + has_set_value_name + <span class=\"string\">' = false; \\n'</span></div><div class=\"line\"></div><div class=\"line\">                has_cache = <span class=\"string\">'has_'</span> + value_name + <span class=\"string\">'_cache'</span></div><div class=\"line\">                has_cache_def = <span class=\"string\">'  public boolean '</span> + has_cache + <span class=\"string\">' = false;\\n'</span></div><div class=\"line\"></div><div class=\"line\">                cache_def = <span class=\"string\">'  public '</span> + type + <span class=\"string\">' '</span> + cache_name + <span class=\"string\">';\\n'</span></div><div class=\"line\"></div><div class=\"line\">                origin_method_pre = line[<span class=\"number\">0</span>:line.index(<span class=\"string\">'&#123;'</span>) + <span class=\"number\">1</span>] + \\</div><div class=\"line\">                                    <span class=\"string\">' if ( '</span> + has_cache + <span class=\"string\">' ) &#123; return '</span> + cache_name + <span class=\"string\">'; &#125; '</span></div><div class=\"line\"></div><div class=\"line\">                origin_method_mid = line[line.index(<span class=\"string\">'&#123;'</span>) + <span class=\"number\">1</span>: line.index(<span class=\"string\">'&#125;'</span>)]</div><div class=\"line\"></div><div class=\"line\">                origin_method_mid = origin_method_mid.replace(<span class=\"string\">'return'</span>, cache_name + <span class=\"string\">' ='</span>)</div><div class=\"line\"></div><div class=\"line\">                origin_method_end = <span class=\"string\">' '</span> + has_cache + <span class=\"string\">'= true; return '</span> + cache_name + <span class=\"string\">'; &#125;'</span></div><div class=\"line\"></div><div class=\"line\">                origin_method_def = origin_method_pre + origin_method_mid + origin_method_end + <span class=\"string\">'\\n'</span></div><div class=\"line\"></div><div class=\"line\">                has_set_method_pre = <span class=\"string\">'  public boolean hasSet_'</span> + value_name + <span class=\"string\">'() &#123; if ( '</span> + has_set_value_name + <span class=\"string\">' ) &#123; return true; &#125; '</span></div><div class=\"line\"></div><div class=\"line\">                has_set_method_mid = <span class=\"string\">' if ( '</span> + has_cache + <span class=\"string\">'  ) &#123; return '</span> + cache_name</div><div class=\"line\">                <span class=\"keyword\">if</span> type <span class=\"keyword\">in</span> base_type:</div><div class=\"line\">                    has_set_method_mid += <span class=\"string\">' != 0; &#125; int o = __offset('</span> + offset_nums + <span class=\"string\">'); if (o == 0) &#123; '</span> + \\</div><div class=\"line\">                                          has_cache + <span class=\"string\">' = true; '</span> + cache_name + <span class=\"string\">' = 0; return false; &#125; '</span></div><div class=\"line\">                <span class=\"keyword\">else</span>:</div><div class=\"line\">                    has_set_method_mid += <span class=\"string\">' != null; &#125; int o = __offset( '</span> + offset_nums + <span class=\"string\">' ); if (o == 0) &#123; '</span> + \\</div><div class=\"line\">                                          has_cache + <span class=\"string\">' = true; '</span> + cache_name + <span class=\"string\">' = null; return false; &#125; '</span></div><div class=\"line\"></div><div class=\"line\">                has_set_method_end = <span class=\"string\">'else &#123; '</span> + has_set_value_name + <span class=\"string\">' = true; return true; &#125; &#125;'</span>;</div><div class=\"line\"></div><div class=\"line\">                has_set_method_def = has_set_method_pre + has_set_method_mid + has_set_method_end + <span class=\"string\">'\\n'</span></div><div class=\"line\"></div><div class=\"line\">                line = has_cache_def + cache_def + origin_method_def + has_set_value_def + has_set_method_def;</div><div class=\"line\"></div><div class=\"line\">                print(line)</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            line += <span class=\"string\">'\\n'</span></div><div class=\"line\">            file_write.write(line)</div><div class=\"line\"></div><div class=\"line\">        file_write.close()</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">main()</div></pre></td></tr></table></figure>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<h3 id=\"一-Tool-Launguage\"><a href=\"#一-Tool-Launguage\" class=\"headerlink\" title=\"一. Tool Launguage\"></a>一. Tool Launguage</h3><p>python.</p>\n<h3 id=\"二-Cause\"><a href=\"#二-Cause\" class=\"headerlink\" title=\"二. Cause\"></a>二. Cause</h3><ol>\n<li><code>__offset()</code> method is not fast enough.</li>\n<li>for get a varaible may need to calls <code>__offset()</code> method many times.</li>\n</ol>\n<h3 id=\"三-Effect\"><a href=\"#三-Effect\" class=\"headerlink\" title=\"三. Effect\"></a>三. Effect</h3><ol>\n<li>Add has set method for flatbuffer file.</li>\n<li>Add member variables cache (include array variables).</li>\n</ol>","more":"<h3 id=\"四-Exp\"><a href=\"#四-Exp\" class=\"headerlink\" title=\"四. Exp\"></a>四. Exp</h3><p>origin:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">top</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">int</span> o = __offset(<span class=\"number\">4</span>); <span class=\"keyword\">return</span> o != <span class=\"number\">0</span> ? bb.getInt(o + bb_pos) : <span class=\"number\">0</span>; &#125;</div></pre></td></tr></table></figure>\n<p>convert to:</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> has_top_cache = <span class=\"keyword\">false</span>;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> top_cache;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">top</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">if</span> ( has_top_cache ) &#123; <span class=\"keyword\">return</span> top_cache; &#125;  <span class=\"keyword\">int</span> o = __offset(<span class=\"number\">4</span>); top_cache = o != <span class=\"number\">0</span> ? bb.getInt(o + bb_pos) : 0;  has_top_cache= <span class=\"keyword\">true</span>; <span class=\"keyword\">return</span> top_cache; &#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> hasSetValue_top = <span class=\"keyword\">false</span>;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">hasSet_top</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">if</span> ( hasSetValue_top ) &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>; &#125;  <span class=\"keyword\">if</span> ( has_top_cache  ) &#123; <span class=\"keyword\">return</span> top_cache != <span class=\"number\">0</span>; &#125; <span class=\"keyword\">int</span> o = __offset(<span class=\"number\">4</span>); <span class=\"keyword\">if</span> (o == <span class=\"number\">0</span>) &#123; has_top_cache = <span class=\"keyword\">true</span>; top_cache = <span class=\"number\">0</span>; <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>; &#125; <span class=\"keyword\">else</span> &#123; hasSetValue_top = <span class=\"keyword\">true</span>; <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>; &#125; &#125;</div></pre></td></tr></table></figure>\n<p>origin:</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\">String <span class=\"title\">fontFamily</span><span class=\"params\">(<span class=\"keyword\">int</span> j)</span> </span>&#123; <span class=\"keyword\">int</span> o = __offset(<span class=\"number\">10</span>); <span class=\"keyword\">return</span> o != <span class=\"number\">0</span> ? __string(__vector(o) + j * <span class=\"number\">4</span>) : <span class=\"keyword\">null</span>; &#125;</div></pre></td></tr></table></figure>\n<p>convert to:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> list_fontFamily_offset = <span class=\"number\">-1</span>;</div><div class=\"line\"><span class=\"keyword\">public</span> android.util.SparseArray&lt;String&gt; fontFamily_cache = <span class=\"keyword\">new</span> android.util.SparseArray&lt;String&gt;();</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">fontFamily</span>(<span class=\"params\"><span class=\"keyword\">int</span> j</span>) </span>&#123; <span class=\"keyword\">if</span> ( fontFamily_cache.<span class=\"keyword\">get</span>(j) != <span class=\"literal\">null</span> ) &#123; <span class=\"keyword\">return</span> fontFamily_cache.<span class=\"keyword\">get</span>(j); &#125;  <span class=\"keyword\">int</span> o = list_fontFamily_offset != <span class=\"number\">-1</span>? list_fontFamily_offset : __offset(<span class=\"number\">10</span>); String <span class=\"keyword\">value</span> =  o != <span class=\"number\">0</span> ? __string(__vector(o) + j * <span class=\"number\">4</span>) : <span class=\"literal\">null</span>;  list_fontFamily_offset = o; fontFamily_cache.put( j, <span class=\"keyword\">value</span>); <span class=\"keyword\">return</span> <span class=\"keyword\">value</span>; &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> boolean <span class=\"title\">hasSet_fontFamily</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">if</span> ( list_fontFamily_offset != <span class=\"number\">-1</span> ) &#123; <span class=\"keyword\">return</span> list_fontFamily_offset != <span class=\"number\">0</span>; &#125; list_fontFamily_offset = __offset(<span class=\"number\">10</span>); <span class=\"keyword\">return</span> list_fontFamily_offset!= <span class=\"number\">0</span>; &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"五-Tips\"><a href=\"#五-Tips\" class=\"headerlink\" title=\"五. Tips\"></a>五. Tips</h3><p>Flatbuffer is very fast from flatbuffer instream to avaliable object, but <code>__offset()</code> is very slow, so very frequently invoked almost not recommended. I tested 100,000 times <code>__offset()</code>, consuming greater than 50ms, but Java object directly accesse the same time only need 2~3ms. So such tool is come, but you need to pay attention to the increase of the GC.</p>\n<h3 id=\"六-Tool-Source\"><a href=\"#六-Tool-Source\" class=\"headerlink\" title=\"六. Tool Source\"></a>六. Tool Source</h3><p>GitHub: <a href=\"https://github.com/Jacksgong/FlatBuffer-Optimize\">https://github.com/Jacksgong/FlatBuffer-Optimize</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"></div><div class=\"line\">__author__ = <span class=\"string\">'Jacks gong'</span></div><div class=\"line\">__date__ = <span class=\"string\">'Jan 4, 2015'</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">has_set</span><span class=\"params\">(line=<span class=\"string\">''</span>)</span>:</span></div><div class=\"line\">    has_set_method = <span class=\"string\">''</span></div><div class=\"line\">    <span class=\"keyword\">if</span> line.isspace():</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">''</span></div><div class=\"line\">    <span class=\"keyword\">return</span> has_set_method</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cache_obj</span><span class=\"params\">(line=<span class=\"string\">''</span>)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">''</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">file_list</span><span class=\"params\">(rootDir)</span>:</span></div><div class=\"line\">    list = []</div><div class=\"line\">    <span class=\"keyword\">for</span> root, dirs, files <span class=\"keyword\">in</span> os.walk(rootDir):</div><div class=\"line\">        <span class=\"keyword\">for</span> filespath <span class=\"keyword\">in</span> files:</div><div class=\"line\">            list.append(os.path.join(root, filespath))</div><div class=\"line\">    <span class=\"keyword\">return</span> list</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_java</span><span class=\"params\">(path=<span class=\"string\">''</span>)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> path.endswith(<span class=\"string\">'.java'</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_valid_deal</span><span class=\"params\">(line=<span class=\"string\">''</span>)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'__offset('</span> <span class=\"keyword\">in</span> line <span class=\"keyword\">and</span> <span class=\"string\">'public '</span> <span class=\"keyword\">in</span> line</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_type</span><span class=\"params\">(line=<span class=\"string\">''</span>)</span>:</span></div><div class=\"line\">    values = line.split(<span class=\"string\">' '</span>)</div><div class=\"line\"></div><div class=\"line\">    type_index = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">for</span> value <span class=\"keyword\">in</span> values:</div><div class=\"line\">        type_index += <span class=\"number\">1</span></div><div class=\"line\">        <span class=\"keyword\">if</span> value == <span class=\"string\">'public'</span>:</div><div class=\"line\">            <span class=\"keyword\">break</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> type_index &gt;= len(values):</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">''</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> values[type_index]</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_value_name</span><span class=\"params\">(line=<span class=\"string\">''</span>)</span>:</span></div><div class=\"line\">    values = line.split(<span class=\"string\">' '</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> value <span class=\"keyword\">in</span> values:</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"string\">'('</span> <span class=\"keyword\">in</span> value:</div><div class=\"line\">            <span class=\"keyword\">continue</span></div><div class=\"line\">        <span class=\"keyword\">return</span> value[:value.find(<span class=\"string\">'('</span>)]</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">''</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_list</span><span class=\"params\">(line=<span class=\"string\">''</span>)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'int j'</span> <span class=\"keyword\">in</span> line[line.find(<span class=\"string\">'('</span>):line.find(<span class=\"string\">')'</span>)]</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_offset</span><span class=\"params\">(line=<span class=\"string\">''</span>)</span>:</span></div><div class=\"line\">    offset_pre = <span class=\"string\">'__offset('</span></div><div class=\"line\">    offset_nums = line[line.find(offset_pre) + len(offset_pre):]</div><div class=\"line\">    <span class=\"keyword\">return</span> offset_nums[:offset_nums.find(<span class=\"string\">')'</span>)]</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_base_type_object</span><span class=\"params\">(type=<span class=\"string\">''</span>)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> type <span class=\"keyword\">in</span> base_type:</div><div class=\"line\">        <span class=\"keyword\">return</span> type</div><div class=\"line\">    <span class=\"keyword\">return</span> base_type_object[base_type.index(type)]</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">base_type = (<span class=\"string\">'int'</span>, <span class=\"string\">'float'</span>, <span class=\"string\">'long'</span>, <span class=\"string\">'boolean'</span>, <span class=\"string\">'uint'</span>, <span class=\"string\">'byte'</span>, <span class=\"string\">'ulong'</span>)</div><div class=\"line\">base_type_object = (<span class=\"string\">'Integer'</span>, <span class=\"string\">'Float'</span>, <span class=\"string\">'Long'</span>, <span class=\"string\">'Boolean'</span>, <span class=\"string\">'Integer'</span>, <span class=\"string\">'Byte'</span>, <span class=\"string\">'Long'</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    flatc_path = raw_input(<span class=\"string\">'flatbuffer absolute path: '</span>)</div><div class=\"line\"></div><div class=\"line\">    list = file_list(flatc_path)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> path <span class=\"keyword\">in</span> list:</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> is_java(path):</div><div class=\"line\">            <span class=\"keyword\">continue</span></div><div class=\"line\">        file_read = open(path)</div><div class=\"line\">        lines = file_read.readlines()</div><div class=\"line\">        file_read.close()</div><div class=\"line\"></div><div class=\"line\">        print(path)</div><div class=\"line\">        file_write = open(path, <span class=\"string\">'w'</span>)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> lines:</div><div class=\"line\">            <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">                <span class=\"keyword\">if</span> line.isspace():</div><div class=\"line\">                    <span class=\"keyword\">break</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> is_valid_deal(line):</div><div class=\"line\">                    <span class=\"keyword\">break</span></div><div class=\"line\"></div><div class=\"line\">                type = get_type(line)</div><div class=\"line\">                value_name = get_value_name(line)</div><div class=\"line\">                <span class=\"keyword\">if</span> type.isspace() <span class=\"keyword\">or</span> value_name.isspace():</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">                offset_nums = get_offset(line)</div><div class=\"line\"></div><div class=\"line\">                cache_name = value_name + <span class=\"string\">'_cache'</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> is_list(line):</div><div class=\"line\">                    list_offset = <span class=\"string\">'list_'</span> + value_name + <span class=\"string\">'_offset'</span></div><div class=\"line\">                    has_set_list_def = <span class=\"string\">'  public int '</span> + list_offset + <span class=\"string\">' = -1;\\n'</span></div><div class=\"line\"></div><div class=\"line\">                    type_object = get_base_type_object(type);</div><div class=\"line\">                    cache_def = <span class=\"string\">'  public android.util.SparseArray&lt;'</span> + type_object + <span class=\"string\">'&gt; '</span> + cache_name + <span class=\"string\">' = new android.util.SparseArray&lt;'</span> + type_object + <span class=\"string\">'&gt;();\\n'</span></div><div class=\"line\"></div><div class=\"line\">                    origin_method_pre = line[<span class=\"number\">0</span>:line.index(<span class=\"string\">'&#123;'</span>) + <span class=\"number\">1</span>] + \\</div><div class=\"line\">                                        <span class=\"string\">' if ( '</span> + cache_name + <span class=\"string\">'.get(j) != null ) &#123; return '</span> + cache_name + <span class=\"string\">'.get(j); &#125; '</span></div><div class=\"line\">                    origin_method_mid = line[line.index(<span class=\"string\">'&#123;'</span>) + <span class=\"number\">1</span>: line.index(<span class=\"string\">'&#125;'</span>)]</div><div class=\"line\">                    origin_method_mid = origin_method_mid.replace(<span class=\"string\">'__offset'</span>, list_offset + <span class=\"string\">' != -1? '</span> + list_offset + <span class=\"string\">' : __offset'</span>)</div><div class=\"line\">                    origin_method_mid = origin_method_mid.replace(<span class=\"string\">'return'</span>, type + <span class=\"string\">' value = '</span>)</div><div class=\"line\">                    origin_method_end = <span class=\"string\">' '</span> + list_offset + <span class=\"string\">' = o; '</span> + cache_name + <span class=\"string\">'.put( j, value); return value; &#125;'</span></div><div class=\"line\">                    origin_method_def = origin_method_pre + origin_method_mid + origin_method_end + <span class=\"string\">'\\n'</span></div><div class=\"line\"></div><div class=\"line\">                    has_set_method_pre = <span class=\"string\">'  public boolean hasSet_'</span> + value_name + <span class=\"string\">'() &#123; if ( '</span> + list_offset + <span class=\"string\">' != -1 ) &#123; return '</span> + \\</div><div class=\"line\">                                         list_offset + <span class=\"string\">' != 0; &#125; '</span></div><div class=\"line\">                    has_set_method_mid = list_offset + <span class=\"string\">' = __offset('</span> + offset_nums + <span class=\"string\">'); '</span></div><div class=\"line\">                    has_set_method_end = <span class=\"string\">'return '</span> + list_offset + <span class=\"string\">'!= 0; &#125;'</span></div><div class=\"line\"></div><div class=\"line\">                    has_set_method_def = has_set_method_pre + has_set_method_mid + has_set_method_end + <span class=\"string\">'\\n'</span></div><div class=\"line\"></div><div class=\"line\">                    line = has_set_list_def + cache_def + origin_method_def + has_set_method_def;</div><div class=\"line\">                    print(line)</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">                has_set_value_name = <span class=\"string\">'hasSetValue_'</span> + value_name</div><div class=\"line\">                has_set_value_def = <span class=\"string\">'  public boolean '</span> + has_set_value_name + <span class=\"string\">' = false; \\n'</span></div><div class=\"line\"></div><div class=\"line\">                has_cache = <span class=\"string\">'has_'</span> + value_name + <span class=\"string\">'_cache'</span></div><div class=\"line\">                has_cache_def = <span class=\"string\">'  public boolean '</span> + has_cache + <span class=\"string\">' = false;\\n'</span></div><div class=\"line\"></div><div class=\"line\">                cache_def = <span class=\"string\">'  public '</span> + type + <span class=\"string\">' '</span> + cache_name + <span class=\"string\">';\\n'</span></div><div class=\"line\"></div><div class=\"line\">                origin_method_pre = line[<span class=\"number\">0</span>:line.index(<span class=\"string\">'&#123;'</span>) + <span class=\"number\">1</span>] + \\</div><div class=\"line\">                                    <span class=\"string\">' if ( '</span> + has_cache + <span class=\"string\">' ) &#123; return '</span> + cache_name + <span class=\"string\">'; &#125; '</span></div><div class=\"line\"></div><div class=\"line\">                origin_method_mid = line[line.index(<span class=\"string\">'&#123;'</span>) + <span class=\"number\">1</span>: line.index(<span class=\"string\">'&#125;'</span>)]</div><div class=\"line\"></div><div class=\"line\">                origin_method_mid = origin_method_mid.replace(<span class=\"string\">'return'</span>, cache_name + <span class=\"string\">' ='</span>)</div><div class=\"line\"></div><div class=\"line\">                origin_method_end = <span class=\"string\">' '</span> + has_cache + <span class=\"string\">'= true; return '</span> + cache_name + <span class=\"string\">'; &#125;'</span></div><div class=\"line\"></div><div class=\"line\">                origin_method_def = origin_method_pre + origin_method_mid + origin_method_end + <span class=\"string\">'\\n'</span></div><div class=\"line\"></div><div class=\"line\">                has_set_method_pre = <span class=\"string\">'  public boolean hasSet_'</span> + value_name + <span class=\"string\">'() &#123; if ( '</span> + has_set_value_name + <span class=\"string\">' ) &#123; return true; &#125; '</span></div><div class=\"line\"></div><div class=\"line\">                has_set_method_mid = <span class=\"string\">' if ( '</span> + has_cache + <span class=\"string\">'  ) &#123; return '</span> + cache_name</div><div class=\"line\">                <span class=\"keyword\">if</span> type <span class=\"keyword\">in</span> base_type:</div><div class=\"line\">                    has_set_method_mid += <span class=\"string\">' != 0; &#125; int o = __offset('</span> + offset_nums + <span class=\"string\">'); if (o == 0) &#123; '</span> + \\</div><div class=\"line\">                                          has_cache + <span class=\"string\">' = true; '</span> + cache_name + <span class=\"string\">' = 0; return false; &#125; '</span></div><div class=\"line\">                <span class=\"keyword\">else</span>:</div><div class=\"line\">                    has_set_method_mid += <span class=\"string\">' != null; &#125; int o = __offset( '</span> + offset_nums + <span class=\"string\">' ); if (o == 0) &#123; '</span> + \\</div><div class=\"line\">                                          has_cache + <span class=\"string\">' = true; '</span> + cache_name + <span class=\"string\">' = null; return false; &#125; '</span></div><div class=\"line\"></div><div class=\"line\">                has_set_method_end = <span class=\"string\">'else &#123; '</span> + has_set_value_name + <span class=\"string\">' = true; return true; &#125; &#125;'</span>;</div><div class=\"line\"></div><div class=\"line\">                has_set_method_def = has_set_method_pre + has_set_method_mid + has_set_method_end + <span class=\"string\">'\\n'</span></div><div class=\"line\"></div><div class=\"line\">                line = has_cache_def + cache_def + origin_method_def + has_set_value_def + has_set_method_def;</div><div class=\"line\"></div><div class=\"line\">                print(line)</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            line += <span class=\"string\">'\\n'</span></div><div class=\"line\">            file_write.write(line)</div><div class=\"line\"></div><div class=\"line\">        file_write.close()</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">main()</div></pre></td></tr></table></figure>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"Android文件、缓存管理","date":"2013-12-17T00:35:03.000Z","_content":"\n> 刚开始维护GITHUB多多指教，本项目源码地址：https://github.com/Jacksgong/Android_CACHE_MANAGER\n\n### Android文件、缓存管理，这个library很早就想写了。\n\n由于之前考虑到一些非final全局变量泛滥、而为得到有效的管理，而且如进入某个相对稳定的页面，该页面的数据来自网络，考虑到可以先将这部分的缓存存在缓存池中，或者缓存在文件管理器下，下次进入时，先从缓冲取数据，再到服务器上更新，或对比版本号，以此来做到一些有效的优化。那么目前来看这个library主要的工作可以缓存缓存数据（图片缓存、网络数据缓存等）。\n\n<!--more-->\n### 目前缓存仅提供两类缓存池，一个池存储的是强引用缓存，一个池存储的是弱引用缓存。\n其中强引用缓存提供设置最大缓存池大小方法，在每次插入时都会进行大小检查，每次都通过LRU原则，保证缓存池大小小于最大缓存大小。\n\n### 两个缓存池支持并发操作，但这里的支持并发，对于本library而言，外部多线程使用时，注意同步。\n\n这里有几个需要考究的地方，一个就是缓存池类型的选用，主要考究参考如下：\n\n\n    ConcurrentHashMap 允许在不阻塞线程 （block threads）的情况下，几个线程同时修改Map。\n    Collections.synchronizedMap(map) 创建一个阻塞Map (blocking map)， 这会降低map性能。如果需要确保数据的 一致性，使得每个线程都有Map 的即时视图，那么可以使用它\n\n参考网友测试数据：[http://www.java-forums.org/new-java/13840-hashmap-vs-skiplistmap.html](http://www.java-forums.org/new-java/13840-hashmap-vs-skiplistmap.html)\n\n    在4线程1.6万数据的条件下，ConcurrentHashMap 存取速度是ConcurrentSkipListMap 的4倍左右。\n    但ConcurrentSkipListMap有几个ConcurrentHashMap 不能比拟的优点：\n    1、ConcurrentSkipListMap 的key是有序的。\n    2、ConcurrentSkipListMap 支持更高的并发。ConcurrentSkipListMap 的存取时间是log（N），和线程数几乎无关。也就是说在数据量一定的情况下，并发的线程越多，ConcurrentSkipListMap越能体现出他的优势。\n\n    3、的使用Vector或Collections.synchronizedList(List<T>)的方式来解决该问题。但是这并没有效果!虽然在列表上add(),remove()和get()方法现在对线程是安全的，但遍历时仍然会抛出ConcurrentModificationException！在你遍历在列表时，你需要在该列表上使用同步，同时，在使用Quartz修改它时，也需要使用同步机制。\n\n    重点提下，所有的线程安全都是对于内部而言\n\n因此我们两个缓存池如下：\n\n    /**\n    * 小于0抛错\n    */\n    private final int INIT_CAPACITY = 10;\n    private final float LOAD_FACTOR = 0.75f;\n    /**\n    * 对于LinkedHashMap而言，它继承于HashMap、底层使用哈希表与双向链表(重新定义保存元素的Entry实现双向)来保存所有元素\n    * 参数说明\n    * int 初始链表容量\n    * float 负载因子 当前数据容量/总容量 （作用：超过此值自动扩张原容量的一倍）（注意：最大值为0.75，超过此值，底层会修改为此值）\n    * boolean true 从后往前 使用频率逐渐减少(LRU) ; false 存放循环队列按照插入顺序\n    */\n    private Map<String, byte[]> mCache = Collections.synchronizedMap(new LinkedHashMap<String, byte[]>(INIT_CAPACITY, LOAD_FACTOR, true));\n    private Map<String, WeakReference<byte[]>> mWeakCache = new ConcurrentHashMap<String, WeakReference<byte[]>>();\n\n也许你会问为什么做了这些分析，强引用缓存池还使用Collections.synchronizedMap，我想coderanch.com论坛的Steve已经给我做出了答复：\n\n    You will have to come up with the requirements for your storage structure to figure out which one is best. There are two big differences:\n\n    1) The LinkedHashMap is ordered but not thread safe\n\n    2) The ConcurrentHashMap is thread safe but not ordered\n\n    If you need an ordered thread safe map, then maybe ConcurrentSkipListMap might be a better choice (but maybe not...).\n\n    If you wanted the ordering of LinkedHashMap in a thread safe structure, your concerns should be:\n    - How much work would it take to make LinkedHashMap thread safe?\n    - Do you trust yourself to be able to make it thread safe?\n    - Can you make it thread safe and still efficient?\n\n    versus\n    - How much work would it take to make ConcurrentSkipListMap (or ConcurrentHashMap) sort like the LinkedHashMap?At first blush, this might seem easy (CSKLM uses a comparator, so just make a comparator for access time) but it won't be (you would be sorting on something other than the Key (insertion/access order), your structure would have to change with access, not just insertion, iteration would be affected...).\n    - Is the Map you come up with efficient enough to use?\n\n因此目前强引用缓存池，这么做是折中的选择，当然还有很大的优化空间。我承认这里完全可以我们自己写一个线程安全的LinkedHashMap或支持LRU的ConcurrenthashMap，因为我们有他们的源码与详细的分析文稿。暂时如此，以后抽空优化。\n\n当然，虽然测试结果ConcurrentSkipListMap在高并发下有优势，但是就4线程1.6万数据而言ConcurrentHashMap的优势，让我毫不犹豫的使用了ConcurrentHashMap。\n\n### 对于文件缓存而言，我希望这里我们通过代理类一并说。看看代理类吧：\n\n    package cn.dreamtobe.library.cache.proxy;\n\n    import android.graphics.Bitmap;\n    import android.os.Parcel;\n    import android.os.Parcelable;\n    import cn.dreamtobe.library.cache.FileCache;\n    import cn.dreamtobe.library.cache.MemoryCache;\n    import cn.dreamtobe.library.cache.util.TransUtil;\n\n    /**\n     *\n     * @describe Proxy\n     *\n     * @author Jacksgong\n     * @since 2013-12-16 下午8:47:17\n     * @Web http://blog.dreamtobe.cn/1470.html\n     */\n    public class CacheProxy {\n\n\tprivate final static class HoldClass {\n\t\tprivate final static MemoryCache MEMORY_CACHE = MemoryCache.getInstance();\n\t\tprivate final static FileCache FILE_CACHE = FileCache.getInstance();\n\t}\n\n\t// ---------------- get\n\t// *File\n\tpublic byte[] getBtsFromFile(String absolutePath) {\n\t\treturn HoldClass.FILE_CACHE.getFile(absolutePath);\n\t}\n\n\t// *Strong\n\tpublic byte[] getBtsFromMemory(String key) {\n\t\treturn HoldClass.MEMORY_CACHE.getBytes(key);\n\t}\n\n\tpublic Bitmap getBmpFromMemory(String key) {\n\t\treturn TransUtil.bytes2Bimap(getBtsFromMemory(key));\n\t}\n\n\tpublic Parcel getPclFromMemory(String key) {\n\t\treturn TransUtil.bytes2Parcelable(getBtsFromMemory(key));\n\t}\n\n\t// *Weak\n\tpublic byte[] getBtsFromWeakM(String key) {\n\t\treturn HoldClass.MEMORY_CACHE.getWeakBytes(key);\n\t}\n\n\tpublic Bitmap getBmpFromWeakM(String key) {\n\t\treturn TransUtil.bytes2Bimap(getBtsFromWeakM(key));\n\t}\n\n\tpublic Parcel getPclFromWeakM(String key) {\n\t\treturn TransUtil.bytes2Parcelable(getBtsFromWeakM(key));\n\t}\n\n\t// --------------- InCache\n\t// byte[]\n\tpublic String putIntoMemory(String key, byte[] b) {\n\t\treturn HoldClass.MEMORY_CACHE.inCache(key, b);\n\t}\n\n\tpublic String putIntoMemory(byte[] b) {\n\t\treturn putIntoMemory(null, b);\n\t}\n\n\t// Bitmap\n\tpublic String putIntoMemory(String key, Bitmap b) {\n\t\treturn HoldClass.MEMORY_CACHE.inCache(key, TransUtil.bitmap2Bytes(b));\n\t}\n\n\tpublic String putIntoMemory(Bitmap b) {\n\t\treturn putIntoMemory(null, b);\n\t}\n\n\t// Parcelable\n\t/**\n\t *\n\t * @param key\n\t * @param p\n\t *            这里选用Parcelable的原因\n\t *            *1. Object必须为可序列化对象才可存储为byte[]\n\t *            2.在使用内存的时候，Parcelable 类比Serializable性能高，所以推荐使用Parcelable类。\n\t *            3.Serializable在序列化的时候会产生大量的临时变量，从而引起频繁的GC。\n\t *            4.Parcelable不能使用在要将数据存储在磁盘上的情况，因为Parcelable不能很好的保证数据的持续性在外界有变化的情况下。尽管Serializable效率低点， 也不提倡用，但在这种情况下，还是建议你用Serializable 。\n\t * @return\n\t */\n\tpublic String putIntoMemory(String key, Parcelable p) {\n\t\treturn HoldClass.MEMORY_CACHE.inCache(key, TransUtil.parcelable2Bytes(p));\n\t}\n\n\tpublic String putIntoMemory(Parcelable p) {\n\t\treturn putIntoMemory(null, p);\n\t}\n\n\t// *Weak\n\t// bytes\n\tpublic String putIntoWeakM(String key, byte[] b) {\n\t\treturn HoldClass.MEMORY_CACHE.inWeakCache(key, b);\n\t}\n\n\tpublic String putIntoWeakM(byte[] b) {\n\t\treturn putIntoWeakM(null, b);\n\t}\n\n\t// Bitmap\n\tpublic String putIntoWeakM(String key, Bitmap b) {\n\t\treturn HoldClass.MEMORY_CACHE.inWeakCache(key, TransUtil.bitmap2Bytes(b));\n\t}\n\n\tpublic String putIntoWeakM(Bitmap b) {\n\t\treturn putIntoWeakM(null, b);\n\t}\n\n\t// Parcelable\n\tpublic String putIntoWeakM(String key, Parcelable p) {\n\t\treturn HoldClass.MEMORY_CACHE.inWeakCache(key, TransUtil.parcelable2Bytes(p));\n\t}\n\n\tpublic String putIntoWeakM(Parcelable p) {\n\t\treturn putIntoWeakM(null, p);\n\t}\n\n\t// --------- remove\n\tpublic boolean deleteFile(String absolutePath) {\n\t\treturn HoldClass.FILE_CACHE.deleteFile(absolutePath);\n\t}\n\n\tpublic byte[] removeCache(String key) {\n\t\treturn HoldClass.MEMORY_CACHE.removeCache(key);\n\t}\n\n\t// ---------- Memory Tool.\n\tpublic void setMemoryLimit(long limit) {\n\t\tif (limit <= 0) {\n\t\t\t// Warn\n\t\t\treturn;\n\t\t}\n\t\tHoldClass.MEMORY_CACHE.setLimit(limit);\n\t}\n\n\tpublic boolean isMemoryContain(String key) {\n\t\treturn HoldClass.MEMORY_CACHE.containsKey(key);\n\t}\n\n\tpublic void clearMemoryCache() {\n\t\tHoldClass.MEMORY_CACHE.clear();\n\t}\n\n\t// ------------ File Tool.\n\n\tpublic boolean isFileExist(String absolutePath) {\n\t\treturn HoldClass.FILE_CACHE.isFileExist(absolutePath);\n\t}\n\n\tpublic boolean autoDeleteFile(String absolutePath, int KeepNum) {\n\t\treturn HoldClass.FILE_CACHE.autoDeleteCache(absolutePath, KeepNum);\n\t}\n\n\t}\n\n\n对于缓存而言。我们分别为弱引用缓存池与强引用缓存池分别提供了三种类型的输入、输出：\n    byte[]、Bitmap、Parcelable\n\n这里选用这三种类型，做了些考究，byte[]与Bitmap是考虑到使用频率而言，就Parcelable做了以下分析:\n\n    *1. Object必须为可序列化对象才可存储为byte[]\n     2.在使用内存的时候，Parcelable 类比Serializable性能高，所以推荐使用Parcelable类。\n     3.Serializable在序列化的时候会产生大量的临时变量，从而引起频繁的GC。\n     4.Parcelable不能使用在要将数据存储在磁盘上的情况，因为Parcelable不能很好的保证数据的持续性在外界有变化的情况下。尽管Serializable效率低点， 也不提倡用，但在这种情况下，还是建议用Serializable 。\n归根结底是需要存储对象的需求的折中处理。\n\n文件缓存除了一些常用的方法，有一个工具方法是提供按修改日期，保证某目录下需要保留的的文件个数。在文件缓存这块还有很多需要拓展与智能化。抽空进行优化，并希望得到各类建议。\n\n### 最后，作为缓存入口，它的功能绝非止于此。\n抽空我会进行数据分块处理等拓展（对外提供接口），并且优化弱引用池类型与文件缓存处理，并做一些考究。\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/Android文件、缓存管理.md","raw":"title: Android文件、缓存管理\ndate: 2013-12-17 08:35:03\npermalink: 2013/12/17/Android文件、缓存管理\ntags:\n- 文件管理\n- 缓存管理\n- Android\n- 优化\n- 项目\n\n---\n\n> 刚开始维护GITHUB多多指教，本项目源码地址：https://github.com/Jacksgong/Android_CACHE_MANAGER\n\n### Android文件、缓存管理，这个library很早就想写了。\n\n由于之前考虑到一些非final全局变量泛滥、而为得到有效的管理，而且如进入某个相对稳定的页面，该页面的数据来自网络，考虑到可以先将这部分的缓存存在缓存池中，或者缓存在文件管理器下，下次进入时，先从缓冲取数据，再到服务器上更新，或对比版本号，以此来做到一些有效的优化。那么目前来看这个library主要的工作可以缓存缓存数据（图片缓存、网络数据缓存等）。\n\n<!--more-->\n### 目前缓存仅提供两类缓存池，一个池存储的是强引用缓存，一个池存储的是弱引用缓存。\n其中强引用缓存提供设置最大缓存池大小方法，在每次插入时都会进行大小检查，每次都通过LRU原则，保证缓存池大小小于最大缓存大小。\n\n### 两个缓存池支持并发操作，但这里的支持并发，对于本library而言，外部多线程使用时，注意同步。\n\n这里有几个需要考究的地方，一个就是缓存池类型的选用，主要考究参考如下：\n\n\n    ConcurrentHashMap 允许在不阻塞线程 （block threads）的情况下，几个线程同时修改Map。\n    Collections.synchronizedMap(map) 创建一个阻塞Map (blocking map)， 这会降低map性能。如果需要确保数据的 一致性，使得每个线程都有Map 的即时视图，那么可以使用它\n\n参考网友测试数据：[http://www.java-forums.org/new-java/13840-hashmap-vs-skiplistmap.html](http://www.java-forums.org/new-java/13840-hashmap-vs-skiplistmap.html)\n\n    在4线程1.6万数据的条件下，ConcurrentHashMap 存取速度是ConcurrentSkipListMap 的4倍左右。\n    但ConcurrentSkipListMap有几个ConcurrentHashMap 不能比拟的优点：\n    1、ConcurrentSkipListMap 的key是有序的。\n    2、ConcurrentSkipListMap 支持更高的并发。ConcurrentSkipListMap 的存取时间是log（N），和线程数几乎无关。也就是说在数据量一定的情况下，并发的线程越多，ConcurrentSkipListMap越能体现出他的优势。\n\n    3、的使用Vector或Collections.synchronizedList(List<T>)的方式来解决该问题。但是这并没有效果!虽然在列表上add(),remove()和get()方法现在对线程是安全的，但遍历时仍然会抛出ConcurrentModificationException！在你遍历在列表时，你需要在该列表上使用同步，同时，在使用Quartz修改它时，也需要使用同步机制。\n\n    重点提下，所有的线程安全都是对于内部而言\n\n因此我们两个缓存池如下：\n\n    /**\n    * 小于0抛错\n    */\n    private final int INIT_CAPACITY = 10;\n    private final float LOAD_FACTOR = 0.75f;\n    /**\n    * 对于LinkedHashMap而言，它继承于HashMap、底层使用哈希表与双向链表(重新定义保存元素的Entry实现双向)来保存所有元素\n    * 参数说明\n    * int 初始链表容量\n    * float 负载因子 当前数据容量/总容量 （作用：超过此值自动扩张原容量的一倍）（注意：最大值为0.75，超过此值，底层会修改为此值）\n    * boolean true 从后往前 使用频率逐渐减少(LRU) ; false 存放循环队列按照插入顺序\n    */\n    private Map<String, byte[]> mCache = Collections.synchronizedMap(new LinkedHashMap<String, byte[]>(INIT_CAPACITY, LOAD_FACTOR, true));\n    private Map<String, WeakReference<byte[]>> mWeakCache = new ConcurrentHashMap<String, WeakReference<byte[]>>();\n\n也许你会问为什么做了这些分析，强引用缓存池还使用Collections.synchronizedMap，我想coderanch.com论坛的Steve已经给我做出了答复：\n\n    You will have to come up with the requirements for your storage structure to figure out which one is best. There are two big differences:\n\n    1) The LinkedHashMap is ordered but not thread safe\n\n    2) The ConcurrentHashMap is thread safe but not ordered\n\n    If you need an ordered thread safe map, then maybe ConcurrentSkipListMap might be a better choice (but maybe not...).\n\n    If you wanted the ordering of LinkedHashMap in a thread safe structure, your concerns should be:\n    - How much work would it take to make LinkedHashMap thread safe?\n    - Do you trust yourself to be able to make it thread safe?\n    - Can you make it thread safe and still efficient?\n\n    versus\n    - How much work would it take to make ConcurrentSkipListMap (or ConcurrentHashMap) sort like the LinkedHashMap?At first blush, this might seem easy (CSKLM uses a comparator, so just make a comparator for access time) but it won't be (you would be sorting on something other than the Key (insertion/access order), your structure would have to change with access, not just insertion, iteration would be affected...).\n    - Is the Map you come up with efficient enough to use?\n\n因此目前强引用缓存池，这么做是折中的选择，当然还有很大的优化空间。我承认这里完全可以我们自己写一个线程安全的LinkedHashMap或支持LRU的ConcurrenthashMap，因为我们有他们的源码与详细的分析文稿。暂时如此，以后抽空优化。\n\n当然，虽然测试结果ConcurrentSkipListMap在高并发下有优势，但是就4线程1.6万数据而言ConcurrentHashMap的优势，让我毫不犹豫的使用了ConcurrentHashMap。\n\n### 对于文件缓存而言，我希望这里我们通过代理类一并说。看看代理类吧：\n\n    package cn.dreamtobe.library.cache.proxy;\n\n    import android.graphics.Bitmap;\n    import android.os.Parcel;\n    import android.os.Parcelable;\n    import cn.dreamtobe.library.cache.FileCache;\n    import cn.dreamtobe.library.cache.MemoryCache;\n    import cn.dreamtobe.library.cache.util.TransUtil;\n\n    /**\n     *\n     * @describe Proxy\n     *\n     * @author Jacksgong\n     * @since 2013-12-16 下午8:47:17\n     * @Web http://blog.dreamtobe.cn/1470.html\n     */\n    public class CacheProxy {\n\n\tprivate final static class HoldClass {\n\t\tprivate final static MemoryCache MEMORY_CACHE = MemoryCache.getInstance();\n\t\tprivate final static FileCache FILE_CACHE = FileCache.getInstance();\n\t}\n\n\t// ---------------- get\n\t// *File\n\tpublic byte[] getBtsFromFile(String absolutePath) {\n\t\treturn HoldClass.FILE_CACHE.getFile(absolutePath);\n\t}\n\n\t// *Strong\n\tpublic byte[] getBtsFromMemory(String key) {\n\t\treturn HoldClass.MEMORY_CACHE.getBytes(key);\n\t}\n\n\tpublic Bitmap getBmpFromMemory(String key) {\n\t\treturn TransUtil.bytes2Bimap(getBtsFromMemory(key));\n\t}\n\n\tpublic Parcel getPclFromMemory(String key) {\n\t\treturn TransUtil.bytes2Parcelable(getBtsFromMemory(key));\n\t}\n\n\t// *Weak\n\tpublic byte[] getBtsFromWeakM(String key) {\n\t\treturn HoldClass.MEMORY_CACHE.getWeakBytes(key);\n\t}\n\n\tpublic Bitmap getBmpFromWeakM(String key) {\n\t\treturn TransUtil.bytes2Bimap(getBtsFromWeakM(key));\n\t}\n\n\tpublic Parcel getPclFromWeakM(String key) {\n\t\treturn TransUtil.bytes2Parcelable(getBtsFromWeakM(key));\n\t}\n\n\t// --------------- InCache\n\t// byte[]\n\tpublic String putIntoMemory(String key, byte[] b) {\n\t\treturn HoldClass.MEMORY_CACHE.inCache(key, b);\n\t}\n\n\tpublic String putIntoMemory(byte[] b) {\n\t\treturn putIntoMemory(null, b);\n\t}\n\n\t// Bitmap\n\tpublic String putIntoMemory(String key, Bitmap b) {\n\t\treturn HoldClass.MEMORY_CACHE.inCache(key, TransUtil.bitmap2Bytes(b));\n\t}\n\n\tpublic String putIntoMemory(Bitmap b) {\n\t\treturn putIntoMemory(null, b);\n\t}\n\n\t// Parcelable\n\t/**\n\t *\n\t * @param key\n\t * @param p\n\t *            这里选用Parcelable的原因\n\t *            *1. Object必须为可序列化对象才可存储为byte[]\n\t *            2.在使用内存的时候，Parcelable 类比Serializable性能高，所以推荐使用Parcelable类。\n\t *            3.Serializable在序列化的时候会产生大量的临时变量，从而引起频繁的GC。\n\t *            4.Parcelable不能使用在要将数据存储在磁盘上的情况，因为Parcelable不能很好的保证数据的持续性在外界有变化的情况下。尽管Serializable效率低点， 也不提倡用，但在这种情况下，还是建议你用Serializable 。\n\t * @return\n\t */\n\tpublic String putIntoMemory(String key, Parcelable p) {\n\t\treturn HoldClass.MEMORY_CACHE.inCache(key, TransUtil.parcelable2Bytes(p));\n\t}\n\n\tpublic String putIntoMemory(Parcelable p) {\n\t\treturn putIntoMemory(null, p);\n\t}\n\n\t// *Weak\n\t// bytes\n\tpublic String putIntoWeakM(String key, byte[] b) {\n\t\treturn HoldClass.MEMORY_CACHE.inWeakCache(key, b);\n\t}\n\n\tpublic String putIntoWeakM(byte[] b) {\n\t\treturn putIntoWeakM(null, b);\n\t}\n\n\t// Bitmap\n\tpublic String putIntoWeakM(String key, Bitmap b) {\n\t\treturn HoldClass.MEMORY_CACHE.inWeakCache(key, TransUtil.bitmap2Bytes(b));\n\t}\n\n\tpublic String putIntoWeakM(Bitmap b) {\n\t\treturn putIntoWeakM(null, b);\n\t}\n\n\t// Parcelable\n\tpublic String putIntoWeakM(String key, Parcelable p) {\n\t\treturn HoldClass.MEMORY_CACHE.inWeakCache(key, TransUtil.parcelable2Bytes(p));\n\t}\n\n\tpublic String putIntoWeakM(Parcelable p) {\n\t\treturn putIntoWeakM(null, p);\n\t}\n\n\t// --------- remove\n\tpublic boolean deleteFile(String absolutePath) {\n\t\treturn HoldClass.FILE_CACHE.deleteFile(absolutePath);\n\t}\n\n\tpublic byte[] removeCache(String key) {\n\t\treturn HoldClass.MEMORY_CACHE.removeCache(key);\n\t}\n\n\t// ---------- Memory Tool.\n\tpublic void setMemoryLimit(long limit) {\n\t\tif (limit <= 0) {\n\t\t\t// Warn\n\t\t\treturn;\n\t\t}\n\t\tHoldClass.MEMORY_CACHE.setLimit(limit);\n\t}\n\n\tpublic boolean isMemoryContain(String key) {\n\t\treturn HoldClass.MEMORY_CACHE.containsKey(key);\n\t}\n\n\tpublic void clearMemoryCache() {\n\t\tHoldClass.MEMORY_CACHE.clear();\n\t}\n\n\t// ------------ File Tool.\n\n\tpublic boolean isFileExist(String absolutePath) {\n\t\treturn HoldClass.FILE_CACHE.isFileExist(absolutePath);\n\t}\n\n\tpublic boolean autoDeleteFile(String absolutePath, int KeepNum) {\n\t\treturn HoldClass.FILE_CACHE.autoDeleteCache(absolutePath, KeepNum);\n\t}\n\n\t}\n\n\n对于缓存而言。我们分别为弱引用缓存池与强引用缓存池分别提供了三种类型的输入、输出：\n    byte[]、Bitmap、Parcelable\n\n这里选用这三种类型，做了些考究，byte[]与Bitmap是考虑到使用频率而言，就Parcelable做了以下分析:\n\n    *1. Object必须为可序列化对象才可存储为byte[]\n     2.在使用内存的时候，Parcelable 类比Serializable性能高，所以推荐使用Parcelable类。\n     3.Serializable在序列化的时候会产生大量的临时变量，从而引起频繁的GC。\n     4.Parcelable不能使用在要将数据存储在磁盘上的情况，因为Parcelable不能很好的保证数据的持续性在外界有变化的情况下。尽管Serializable效率低点， 也不提倡用，但在这种情况下，还是建议用Serializable 。\n归根结底是需要存储对象的需求的折中处理。\n\n文件缓存除了一些常用的方法，有一个工具方法是提供按修改日期，保证某目录下需要保留的的文件个数。在文件缓存这块还有很多需要拓展与智能化。抽空进行优化，并希望得到各类建议。\n\n### 最后，作为缓存入口，它的功能绝非止于此。\n抽空我会进行数据分块处理等拓展（对外提供接口），并且优化弱引用池类型与文件缓存处理，并做一些考究。\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2013/12/17/Android文件、缓存管理","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66hq000i95bulfndhpby","content":"<blockquote>\n<p>刚开始维护GITHUB多多指教，本项目源码地址：<a href=\"https://github.com/Jacksgong/Android_CACHE_MANAGER\" target=\"_blank\" rel=\"external\">https://github.com/Jacksgong/Android_CACHE_MANAGER</a></p>\n</blockquote>\n<h3 id=\"Android文件、缓存管理，这个library很早就想写了。\"><a href=\"#Android文件、缓存管理，这个library很早就想写了。\" class=\"headerlink\" title=\"Android文件、缓存管理，这个library很早就想写了。\"></a>Android文件、缓存管理，这个library很早就想写了。</h3><p>由于之前考虑到一些非final全局变量泛滥、而为得到有效的管理，而且如进入某个相对稳定的页面，该页面的数据来自网络，考虑到可以先将这部分的缓存存在缓存池中，或者缓存在文件管理器下，下次进入时，先从缓冲取数据，再到服务器上更新，或对比版本号，以此来做到一些有效的优化。那么目前来看这个library主要的工作可以缓存缓存数据（图片缓存、网络数据缓存等）。</p>\n<a id=\"more\"></a>\n<h3 id=\"目前缓存仅提供两类缓存池，一个池存储的是强引用缓存，一个池存储的是弱引用缓存。\"><a href=\"#目前缓存仅提供两类缓存池，一个池存储的是强引用缓存，一个池存储的是弱引用缓存。\" class=\"headerlink\" title=\"目前缓存仅提供两类缓存池，一个池存储的是强引用缓存，一个池存储的是弱引用缓存。\"></a>目前缓存仅提供两类缓存池，一个池存储的是强引用缓存，一个池存储的是弱引用缓存。</h3><p>其中强引用缓存提供设置最大缓存池大小方法，在每次插入时都会进行大小检查，每次都通过LRU原则，保证缓存池大小小于最大缓存大小。</p>\n<h3 id=\"两个缓存池支持并发操作，但这里的支持并发，对于本library而言，外部多线程使用时，注意同步。\"><a href=\"#两个缓存池支持并发操作，但这里的支持并发，对于本library而言，外部多线程使用时，注意同步。\" class=\"headerlink\" title=\"两个缓存池支持并发操作，但这里的支持并发，对于本library而言，外部多线程使用时，注意同步。\"></a>两个缓存池支持并发操作，但这里的支持并发，对于本library而言，外部多线程使用时，注意同步。</h3><p>这里有几个需要考究的地方，一个就是缓存池类型的选用，主要考究参考如下：</p>\n<pre><code>ConcurrentHashMap 允许在不阻塞线程 （block threads）的情况下，几个线程同时修改Map。\nCollections.synchronizedMap(map) 创建一个阻塞Map (blocking map)， 这会降低map性能。如果需要确保数据的 一致性，使得每个线程都有Map 的即时视图，那么可以使用它\n</code></pre><p>参考网友测试数据：<a href=\"http://www.java-forums.org/new-java/13840-hashmap-vs-skiplistmap.html\" target=\"_blank\" rel=\"external\">http://www.java-forums.org/new-java/13840-hashmap-vs-skiplistmap.html</a></p>\n<pre><code>在4线程1.6万数据的条件下，ConcurrentHashMap 存取速度是ConcurrentSkipListMap 的4倍左右。\n但ConcurrentSkipListMap有几个ConcurrentHashMap 不能比拟的优点：\n1、ConcurrentSkipListMap 的key是有序的。\n2、ConcurrentSkipListMap 支持更高的并发。ConcurrentSkipListMap 的存取时间是log（N），和线程数几乎无关。也就是说在数据量一定的情况下，并发的线程越多，ConcurrentSkipListMap越能体现出他的优势。\n\n3、的使用Vector或Collections.synchronizedList(List&lt;T&gt;)的方式来解决该问题。但是这并没有效果!虽然在列表上add(),remove()和get()方法现在对线程是安全的，但遍历时仍然会抛出ConcurrentModificationException！在你遍历在列表时，你需要在该列表上使用同步，同时，在使用Quartz修改它时，也需要使用同步机制。\n\n重点提下，所有的线程安全都是对于内部而言\n</code></pre><p>因此我们两个缓存池如下：</p>\n<pre><code>/**\n* 小于0抛错\n*/\nprivate final int INIT_CAPACITY = 10;\nprivate final float LOAD_FACTOR = 0.75f;\n/**\n* 对于LinkedHashMap而言，它继承于HashMap、底层使用哈希表与双向链表(重新定义保存元素的Entry实现双向)来保存所有元素\n* 参数说明\n* int 初始链表容量\n* float 负载因子 当前数据容量/总容量 （作用：超过此值自动扩张原容量的一倍）（注意：最大值为0.75，超过此值，底层会修改为此值）\n* boolean true 从后往前 使用频率逐渐减少(LRU) ; false 存放循环队列按照插入顺序\n*/\nprivate Map&lt;String, byte[]&gt; mCache = Collections.synchronizedMap(new LinkedHashMap&lt;String, byte[]&gt;(INIT_CAPACITY, LOAD_FACTOR, true));\nprivate Map&lt;String, WeakReference&lt;byte[]&gt;&gt; mWeakCache = new ConcurrentHashMap&lt;String, WeakReference&lt;byte[]&gt;&gt;();\n</code></pre><p>也许你会问为什么做了这些分析，强引用缓存池还使用Collections.synchronizedMap，我想coderanch.com论坛的Steve已经给我做出了答复：</p>\n<pre><code>You will have to come up with the requirements for your storage structure to figure out which one is best. There are two big differences:\n\n1) The LinkedHashMap is ordered but not thread safe\n\n2) The ConcurrentHashMap is thread safe but not ordered\n\nIf you need an ordered thread safe map, then maybe ConcurrentSkipListMap might be a better choice (but maybe not...).\n\nIf you wanted the ordering of LinkedHashMap in a thread safe structure, your concerns should be:\n- How much work would it take to make LinkedHashMap thread safe?\n- Do you trust yourself to be able to make it thread safe?\n- Can you make it thread safe and still efficient?\n\nversus\n- How much work would it take to make ConcurrentSkipListMap (or ConcurrentHashMap) sort like the LinkedHashMap?At first blush, this might seem easy (CSKLM uses a comparator, so just make a comparator for access time) but it won&apos;t be (you would be sorting on something other than the Key (insertion/access order), your structure would have to change with access, not just insertion, iteration would be affected...).\n- Is the Map you come up with efficient enough to use?\n</code></pre><p>因此目前强引用缓存池，这么做是折中的选择，当然还有很大的优化空间。我承认这里完全可以我们自己写一个线程安全的LinkedHashMap或支持LRU的ConcurrenthashMap，因为我们有他们的源码与详细的分析文稿。暂时如此，以后抽空优化。</p>\n<p>当然，虽然测试结果ConcurrentSkipListMap在高并发下有优势，但是就4线程1.6万数据而言ConcurrentHashMap的优势，让我毫不犹豫的使用了ConcurrentHashMap。</p>\n<h3 id=\"对于文件缓存而言，我希望这里我们通过代理类一并说。看看代理类吧：\"><a href=\"#对于文件缓存而言，我希望这里我们通过代理类一并说。看看代理类吧：\" class=\"headerlink\" title=\"对于文件缓存而言，我希望这里我们通过代理类一并说。看看代理类吧：\"></a>对于文件缓存而言，我希望这里我们通过代理类一并说。看看代理类吧：</h3><pre><code>package cn.dreamtobe.library.cache.proxy;\n\nimport android.graphics.Bitmap;\nimport android.os.Parcel;\nimport android.os.Parcelable;\nimport cn.dreamtobe.library.cache.FileCache;\nimport cn.dreamtobe.library.cache.MemoryCache;\nimport cn.dreamtobe.library.cache.util.TransUtil;\n\n/**\n *\n * @describe Proxy\n *\n * @author Jacksgong\n * @since 2013-12-16 下午8:47:17\n * @Web http://blog.dreamtobe.cn/1470.html\n */\npublic class CacheProxy {\n\nprivate final static class HoldClass {\n    private final static MemoryCache MEMORY_CACHE = MemoryCache.getInstance();\n    private final static FileCache FILE_CACHE = FileCache.getInstance();\n}\n\n// ---------------- get\n// *File\npublic byte[] getBtsFromFile(String absolutePath) {\n    return HoldClass.FILE_CACHE.getFile(absolutePath);\n}\n\n// *Strong\npublic byte[] getBtsFromMemory(String key) {\n    return HoldClass.MEMORY_CACHE.getBytes(key);\n}\n\npublic Bitmap getBmpFromMemory(String key) {\n    return TransUtil.bytes2Bimap(getBtsFromMemory(key));\n}\n\npublic Parcel getPclFromMemory(String key) {\n    return TransUtil.bytes2Parcelable(getBtsFromMemory(key));\n}\n\n// *Weak\npublic byte[] getBtsFromWeakM(String key) {\n    return HoldClass.MEMORY_CACHE.getWeakBytes(key);\n}\n\npublic Bitmap getBmpFromWeakM(String key) {\n    return TransUtil.bytes2Bimap(getBtsFromWeakM(key));\n}\n\npublic Parcel getPclFromWeakM(String key) {\n    return TransUtil.bytes2Parcelable(getBtsFromWeakM(key));\n}\n\n// --------------- InCache\n// byte[]\npublic String putIntoMemory(String key, byte[] b) {\n    return HoldClass.MEMORY_CACHE.inCache(key, b);\n}\n\npublic String putIntoMemory(byte[] b) {\n    return putIntoMemory(null, b);\n}\n\n// Bitmap\npublic String putIntoMemory(String key, Bitmap b) {\n    return HoldClass.MEMORY_CACHE.inCache(key, TransUtil.bitmap2Bytes(b));\n}\n\npublic String putIntoMemory(Bitmap b) {\n    return putIntoMemory(null, b);\n}\n\n// Parcelable\n/**\n *\n * @param key\n * @param p\n *            这里选用Parcelable的原因\n *            *1. Object必须为可序列化对象才可存储为byte[]\n *            2.在使用内存的时候，Parcelable 类比Serializable性能高，所以推荐使用Parcelable类。\n *            3.Serializable在序列化的时候会产生大量的临时变量，从而引起频繁的GC。\n *            4.Parcelable不能使用在要将数据存储在磁盘上的情况，因为Parcelable不能很好的保证数据的持续性在外界有变化的情况下。尽管Serializable效率低点， 也不提倡用，但在这种情况下，还是建议你用Serializable 。\n * @return\n */\npublic String putIntoMemory(String key, Parcelable p) {\n    return HoldClass.MEMORY_CACHE.inCache(key, TransUtil.parcelable2Bytes(p));\n}\n\npublic String putIntoMemory(Parcelable p) {\n    return putIntoMemory(null, p);\n}\n\n// *Weak\n// bytes\npublic String putIntoWeakM(String key, byte[] b) {\n    return HoldClass.MEMORY_CACHE.inWeakCache(key, b);\n}\n\npublic String putIntoWeakM(byte[] b) {\n    return putIntoWeakM(null, b);\n}\n\n// Bitmap\npublic String putIntoWeakM(String key, Bitmap b) {\n    return HoldClass.MEMORY_CACHE.inWeakCache(key, TransUtil.bitmap2Bytes(b));\n}\n\npublic String putIntoWeakM(Bitmap b) {\n    return putIntoWeakM(null, b);\n}\n\n// Parcelable\npublic String putIntoWeakM(String key, Parcelable p) {\n    return HoldClass.MEMORY_CACHE.inWeakCache(key, TransUtil.parcelable2Bytes(p));\n}\n\npublic String putIntoWeakM(Parcelable p) {\n    return putIntoWeakM(null, p);\n}\n\n// --------- remove\npublic boolean deleteFile(String absolutePath) {\n    return HoldClass.FILE_CACHE.deleteFile(absolutePath);\n}\n\npublic byte[] removeCache(String key) {\n    return HoldClass.MEMORY_CACHE.removeCache(key);\n}\n\n// ---------- Memory Tool.\npublic void setMemoryLimit(long limit) {\n    if (limit &lt;= 0) {\n        // Warn\n        return;\n    }\n    HoldClass.MEMORY_CACHE.setLimit(limit);\n}\n\npublic boolean isMemoryContain(String key) {\n    return HoldClass.MEMORY_CACHE.containsKey(key);\n}\n\npublic void clearMemoryCache() {\n    HoldClass.MEMORY_CACHE.clear();\n}\n\n// ------------ File Tool.\n\npublic boolean isFileExist(String absolutePath) {\n    return HoldClass.FILE_CACHE.isFileExist(absolutePath);\n}\n\npublic boolean autoDeleteFile(String absolutePath, int KeepNum) {\n    return HoldClass.FILE_CACHE.autoDeleteCache(absolutePath, KeepNum);\n}\n\n}\n</code></pre><p>对于缓存而言。我们分别为弱引用缓存池与强引用缓存池分别提供了三种类型的输入、输出：<br>    byte[]、Bitmap、Parcelable</p>\n<p>这里选用这三种类型，做了些考究，byte[]与Bitmap是考虑到使用频率而言，就Parcelable做了以下分析:</p>\n<pre><code>*1. Object必须为可序列化对象才可存储为byte[]\n 2.在使用内存的时候，Parcelable 类比Serializable性能高，所以推荐使用Parcelable类。\n 3.Serializable在序列化的时候会产生大量的临时变量，从而引起频繁的GC。\n 4.Parcelable不能使用在要将数据存储在磁盘上的情况，因为Parcelable不能很好的保证数据的持续性在外界有变化的情况下。尽管Serializable效率低点， 也不提倡用，但在这种情况下，还是建议用Serializable 。\n</code></pre><p>归根结底是需要存储对象的需求的折中处理。</p>\n<p>文件缓存除了一些常用的方法，有一个工具方法是提供按修改日期，保证某目录下需要保留的的文件个数。在文件缓存这块还有很多需要拓展与智能化。抽空进行优化，并希望得到各类建议。</p>\n<h3 id=\"最后，作为缓存入口，它的功能绝非止于此。\"><a href=\"#最后，作为缓存入口，它的功能绝非止于此。\" class=\"headerlink\" title=\"最后，作为缓存入口，它的功能绝非止于此。\"></a>最后，作为缓存入口，它的功能绝非止于此。</h3><p>抽空我会进行数据分块处理等拓展（对外提供接口），并且优化弱引用池类型与文件缓存处理，并做一些考究。</p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>刚开始维护GITHUB多多指教，本项目源码地址：<a href=\"https://github.com/Jacksgong/Android_CACHE_MANAGER\">https://github.com/Jacksgong/Android_CACHE_MANAGER</a></p>\n</blockquote>\n<h3 id=\"Android文件、缓存管理，这个library很早就想写了。\"><a href=\"#Android文件、缓存管理，这个library很早就想写了。\" class=\"headerlink\" title=\"Android文件、缓存管理，这个library很早就想写了。\"></a>Android文件、缓存管理，这个library很早就想写了。</h3><p>由于之前考虑到一些非final全局变量泛滥、而为得到有效的管理，而且如进入某个相对稳定的页面，该页面的数据来自网络，考虑到可以先将这部分的缓存存在缓存池中，或者缓存在文件管理器下，下次进入时，先从缓冲取数据，再到服务器上更新，或对比版本号，以此来做到一些有效的优化。那么目前来看这个library主要的工作可以缓存缓存数据（图片缓存、网络数据缓存等）。</p>","more":"<h3 id=\"目前缓存仅提供两类缓存池，一个池存储的是强引用缓存，一个池存储的是弱引用缓存。\"><a href=\"#目前缓存仅提供两类缓存池，一个池存储的是强引用缓存，一个池存储的是弱引用缓存。\" class=\"headerlink\" title=\"目前缓存仅提供两类缓存池，一个池存储的是强引用缓存，一个池存储的是弱引用缓存。\"></a>目前缓存仅提供两类缓存池，一个池存储的是强引用缓存，一个池存储的是弱引用缓存。</h3><p>其中强引用缓存提供设置最大缓存池大小方法，在每次插入时都会进行大小检查，每次都通过LRU原则，保证缓存池大小小于最大缓存大小。</p>\n<h3 id=\"两个缓存池支持并发操作，但这里的支持并发，对于本library而言，外部多线程使用时，注意同步。\"><a href=\"#两个缓存池支持并发操作，但这里的支持并发，对于本library而言，外部多线程使用时，注意同步。\" class=\"headerlink\" title=\"两个缓存池支持并发操作，但这里的支持并发，对于本library而言，外部多线程使用时，注意同步。\"></a>两个缓存池支持并发操作，但这里的支持并发，对于本library而言，外部多线程使用时，注意同步。</h3><p>这里有几个需要考究的地方，一个就是缓存池类型的选用，主要考究参考如下：</p>\n<pre><code>ConcurrentHashMap 允许在不阻塞线程 （block threads）的情况下，几个线程同时修改Map。\nCollections.synchronizedMap(map) 创建一个阻塞Map (blocking map)， 这会降低map性能。如果需要确保数据的 一致性，使得每个线程都有Map 的即时视图，那么可以使用它\n</code></pre><p>参考网友测试数据：<a href=\"http://www.java-forums.org/new-java/13840-hashmap-vs-skiplistmap.html\">http://www.java-forums.org/new-java/13840-hashmap-vs-skiplistmap.html</a></p>\n<pre><code>在4线程1.6万数据的条件下，ConcurrentHashMap 存取速度是ConcurrentSkipListMap 的4倍左右。\n但ConcurrentSkipListMap有几个ConcurrentHashMap 不能比拟的优点：\n1、ConcurrentSkipListMap 的key是有序的。\n2、ConcurrentSkipListMap 支持更高的并发。ConcurrentSkipListMap 的存取时间是log（N），和线程数几乎无关。也就是说在数据量一定的情况下，并发的线程越多，ConcurrentSkipListMap越能体现出他的优势。\n\n3、的使用Vector或Collections.synchronizedList(List&lt;T&gt;)的方式来解决该问题。但是这并没有效果!虽然在列表上add(),remove()和get()方法现在对线程是安全的，但遍历时仍然会抛出ConcurrentModificationException！在你遍历在列表时，你需要在该列表上使用同步，同时，在使用Quartz修改它时，也需要使用同步机制。\n\n重点提下，所有的线程安全都是对于内部而言\n</code></pre><p>因此我们两个缓存池如下：</p>\n<pre><code>/**\n* 小于0抛错\n*/\nprivate final int INIT_CAPACITY = 10;\nprivate final float LOAD_FACTOR = 0.75f;\n/**\n* 对于LinkedHashMap而言，它继承于HashMap、底层使用哈希表与双向链表(重新定义保存元素的Entry实现双向)来保存所有元素\n* 参数说明\n* int 初始链表容量\n* float 负载因子 当前数据容量/总容量 （作用：超过此值自动扩张原容量的一倍）（注意：最大值为0.75，超过此值，底层会修改为此值）\n* boolean true 从后往前 使用频率逐渐减少(LRU) ; false 存放循环队列按照插入顺序\n*/\nprivate Map&lt;String, byte[]&gt; mCache = Collections.synchronizedMap(new LinkedHashMap&lt;String, byte[]&gt;(INIT_CAPACITY, LOAD_FACTOR, true));\nprivate Map&lt;String, WeakReference&lt;byte[]&gt;&gt; mWeakCache = new ConcurrentHashMap&lt;String, WeakReference&lt;byte[]&gt;&gt;();\n</code></pre><p>也许你会问为什么做了这些分析，强引用缓存池还使用Collections.synchronizedMap，我想coderanch.com论坛的Steve已经给我做出了答复：</p>\n<pre><code>You will have to come up with the requirements for your storage structure to figure out which one is best. There are two big differences:\n\n1) The LinkedHashMap is ordered but not thread safe\n\n2) The ConcurrentHashMap is thread safe but not ordered\n\nIf you need an ordered thread safe map, then maybe ConcurrentSkipListMap might be a better choice (but maybe not...).\n\nIf you wanted the ordering of LinkedHashMap in a thread safe structure, your concerns should be:\n- How much work would it take to make LinkedHashMap thread safe?\n- Do you trust yourself to be able to make it thread safe?\n- Can you make it thread safe and still efficient?\n\nversus\n- How much work would it take to make ConcurrentSkipListMap (or ConcurrentHashMap) sort like the LinkedHashMap?At first blush, this might seem easy (CSKLM uses a comparator, so just make a comparator for access time) but it won&apos;t be (you would be sorting on something other than the Key (insertion/access order), your structure would have to change with access, not just insertion, iteration would be affected...).\n- Is the Map you come up with efficient enough to use?\n</code></pre><p>因此目前强引用缓存池，这么做是折中的选择，当然还有很大的优化空间。我承认这里完全可以我们自己写一个线程安全的LinkedHashMap或支持LRU的ConcurrenthashMap，因为我们有他们的源码与详细的分析文稿。暂时如此，以后抽空优化。</p>\n<p>当然，虽然测试结果ConcurrentSkipListMap在高并发下有优势，但是就4线程1.6万数据而言ConcurrentHashMap的优势，让我毫不犹豫的使用了ConcurrentHashMap。</p>\n<h3 id=\"对于文件缓存而言，我希望这里我们通过代理类一并说。看看代理类吧：\"><a href=\"#对于文件缓存而言，我希望这里我们通过代理类一并说。看看代理类吧：\" class=\"headerlink\" title=\"对于文件缓存而言，我希望这里我们通过代理类一并说。看看代理类吧：\"></a>对于文件缓存而言，我希望这里我们通过代理类一并说。看看代理类吧：</h3><pre><code>package cn.dreamtobe.library.cache.proxy;\n\nimport android.graphics.Bitmap;\nimport android.os.Parcel;\nimport android.os.Parcelable;\nimport cn.dreamtobe.library.cache.FileCache;\nimport cn.dreamtobe.library.cache.MemoryCache;\nimport cn.dreamtobe.library.cache.util.TransUtil;\n\n/**\n *\n * @describe Proxy\n *\n * @author Jacksgong\n * @since 2013-12-16 下午8:47:17\n * @Web http://blog.dreamtobe.cn/1470.html\n */\npublic class CacheProxy {\n\nprivate final static class HoldClass {\n    private final static MemoryCache MEMORY_CACHE = MemoryCache.getInstance();\n    private final static FileCache FILE_CACHE = FileCache.getInstance();\n}\n\n// ---------------- get\n// *File\npublic byte[] getBtsFromFile(String absolutePath) {\n    return HoldClass.FILE_CACHE.getFile(absolutePath);\n}\n\n// *Strong\npublic byte[] getBtsFromMemory(String key) {\n    return HoldClass.MEMORY_CACHE.getBytes(key);\n}\n\npublic Bitmap getBmpFromMemory(String key) {\n    return TransUtil.bytes2Bimap(getBtsFromMemory(key));\n}\n\npublic Parcel getPclFromMemory(String key) {\n    return TransUtil.bytes2Parcelable(getBtsFromMemory(key));\n}\n\n// *Weak\npublic byte[] getBtsFromWeakM(String key) {\n    return HoldClass.MEMORY_CACHE.getWeakBytes(key);\n}\n\npublic Bitmap getBmpFromWeakM(String key) {\n    return TransUtil.bytes2Bimap(getBtsFromWeakM(key));\n}\n\npublic Parcel getPclFromWeakM(String key) {\n    return TransUtil.bytes2Parcelable(getBtsFromWeakM(key));\n}\n\n// --------------- InCache\n// byte[]\npublic String putIntoMemory(String key, byte[] b) {\n    return HoldClass.MEMORY_CACHE.inCache(key, b);\n}\n\npublic String putIntoMemory(byte[] b) {\n    return putIntoMemory(null, b);\n}\n\n// Bitmap\npublic String putIntoMemory(String key, Bitmap b) {\n    return HoldClass.MEMORY_CACHE.inCache(key, TransUtil.bitmap2Bytes(b));\n}\n\npublic String putIntoMemory(Bitmap b) {\n    return putIntoMemory(null, b);\n}\n\n// Parcelable\n/**\n *\n * @param key\n * @param p\n *            这里选用Parcelable的原因\n *            *1. Object必须为可序列化对象才可存储为byte[]\n *            2.在使用内存的时候，Parcelable 类比Serializable性能高，所以推荐使用Parcelable类。\n *            3.Serializable在序列化的时候会产生大量的临时变量，从而引起频繁的GC。\n *            4.Parcelable不能使用在要将数据存储在磁盘上的情况，因为Parcelable不能很好的保证数据的持续性在外界有变化的情况下。尽管Serializable效率低点， 也不提倡用，但在这种情况下，还是建议你用Serializable 。\n * @return\n */\npublic String putIntoMemory(String key, Parcelable p) {\n    return HoldClass.MEMORY_CACHE.inCache(key, TransUtil.parcelable2Bytes(p));\n}\n\npublic String putIntoMemory(Parcelable p) {\n    return putIntoMemory(null, p);\n}\n\n// *Weak\n// bytes\npublic String putIntoWeakM(String key, byte[] b) {\n    return HoldClass.MEMORY_CACHE.inWeakCache(key, b);\n}\n\npublic String putIntoWeakM(byte[] b) {\n    return putIntoWeakM(null, b);\n}\n\n// Bitmap\npublic String putIntoWeakM(String key, Bitmap b) {\n    return HoldClass.MEMORY_CACHE.inWeakCache(key, TransUtil.bitmap2Bytes(b));\n}\n\npublic String putIntoWeakM(Bitmap b) {\n    return putIntoWeakM(null, b);\n}\n\n// Parcelable\npublic String putIntoWeakM(String key, Parcelable p) {\n    return HoldClass.MEMORY_CACHE.inWeakCache(key, TransUtil.parcelable2Bytes(p));\n}\n\npublic String putIntoWeakM(Parcelable p) {\n    return putIntoWeakM(null, p);\n}\n\n// --------- remove\npublic boolean deleteFile(String absolutePath) {\n    return HoldClass.FILE_CACHE.deleteFile(absolutePath);\n}\n\npublic byte[] removeCache(String key) {\n    return HoldClass.MEMORY_CACHE.removeCache(key);\n}\n\n// ---------- Memory Tool.\npublic void setMemoryLimit(long limit) {\n    if (limit &lt;= 0) {\n        // Warn\n        return;\n    }\n    HoldClass.MEMORY_CACHE.setLimit(limit);\n}\n\npublic boolean isMemoryContain(String key) {\n    return HoldClass.MEMORY_CACHE.containsKey(key);\n}\n\npublic void clearMemoryCache() {\n    HoldClass.MEMORY_CACHE.clear();\n}\n\n// ------------ File Tool.\n\npublic boolean isFileExist(String absolutePath) {\n    return HoldClass.FILE_CACHE.isFileExist(absolutePath);\n}\n\npublic boolean autoDeleteFile(String absolutePath, int KeepNum) {\n    return HoldClass.FILE_CACHE.autoDeleteCache(absolutePath, KeepNum);\n}\n\n}\n</code></pre><p>对于缓存而言。我们分别为弱引用缓存池与强引用缓存池分别提供了三种类型的输入、输出：<br>    byte[]、Bitmap、Parcelable</p>\n<p>这里选用这三种类型，做了些考究，byte[]与Bitmap是考虑到使用频率而言，就Parcelable做了以下分析:</p>\n<pre><code>*1. Object必须为可序列化对象才可存储为byte[]\n 2.在使用内存的时候，Parcelable 类比Serializable性能高，所以推荐使用Parcelable类。\n 3.Serializable在序列化的时候会产生大量的临时变量，从而引起频繁的GC。\n 4.Parcelable不能使用在要将数据存储在磁盘上的情况，因为Parcelable不能很好的保证数据的持续性在外界有变化的情况下。尽管Serializable效率低点， 也不提倡用，但在这种情况下，还是建议用Serializable 。\n</code></pre><p>归根结底是需要存储对象的需求的折中处理。</p>\n<p>文件缓存除了一些常用的方法，有一个工具方法是提供按修改日期，保证某目录下需要保留的的文件个数。在文件缓存这块还有很多需要拓展与智能化。抽空进行优化，并希望得到各类建议。</p>\n<h3 id=\"最后，作为缓存入口，它的功能绝非止于此。\"><a href=\"#最后，作为缓存入口，它的功能绝非止于此。\" class=\"headerlink\" title=\"最后，作为缓存入口，它的功能绝非止于此。\"></a>最后，作为缓存入口，它的功能绝非止于此。</h3><p>抽空我会进行数据分块处理等拓展（对外提供接口），并且优化弱引用池类型与文件缓存处理，并做一些考究。</p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"Git","date":"2015-03-15T23:51:03.000Z","_content":"\n# Git特点:\n1. 在2002由Linus花了两周写的，用在Linux版本维护，后来由Linux社区高手维护\n2. git是维护修改\n3. git是分布式版本控制\n\n\n<!--more-->\n# Git使用\n### I. 创建:\n##### 本地:\n`git init`\n\n- 效果:\n创建版本库(.git)\n\n##### 远程:\n`git remote add [<远程库分支名>] [<远程库地址>]`\n\n- 效果: 关联本地库与远程库\n\n`git clone [<远程库地址>]`\n\n- 效果: 克隆远程库到本地（包括工作区与版本库）（一般而言只checkout了远程origin分支到本地master分支）.\n\n`git clone -b <远程分支名> <远程库地址>`\n\n- 效果: 克隆远程分支到本地（本地分支名和远程分支名相同）.\n\n\n##### 分支:\n\n`git branch [<分支名>]`\n\n- 效果: **1** 创建分支; **2** 若没有提供<分支名>直接`git branch`将列出所有分支，并在当前分支前面显示`*`\n\n`git checkout [-b] [<分支名>]`\n\n- 效果: **1** 切换到<分支>(HEAD指针指向[分支]); **2** 若有`-b`则表示创建并切换到<分支>\n\n`git checkout [-b] [<本地分支名>] [<远程分支名>]/[<本地分支名>]`\n\n- 效果: 创建远程分支到本地分支\n\n\n### II. 提交:\n`git add [file]`\n`git rm [file]`\n\n- 效果: 将修改/删除添加到版本库中的`stage`的暂存区\n\n`git commit -m [<描述>]`\n\n- 效果: 把暂存区的内容提交到当前分支\n\n`git push [<远程库分支名>] [<本地分支名>]`\n\n- 效果: 把分支内容推到远程库相对应的分支上\n\n##### 合并:\n\n> 推荐merge工具: [p4Merge](https://gist.github.com/tony4d/3454372)\n\n`git merge [<目标分支>]`\n\n- 效果: 与目标分支合并(如果默认优先Fast-forward说明是快进模式（很快的合并）(ps: 该模式如果删掉分支，会丢掉分支信息))\n\n`git merge --no-ff -m [<描述>]`\n\n- 效果: 跳过Fast forward模式，保留版本库中分支结构(`git log --graph`)\n\n`git fetch <远程仓库名> <远程分支名>(:本地新分支名)`\n\n- 效果: 从远程的仓库(通常是`origin`)的分支下载最新版本到 本地的新的分支上，如果不提供默认:下载到 本地分支远程仓库/分支名 (例子: `origin/master`) 上。\n\n`git fetch`和`git pull`\n\n- 区别: `git pull` = `git fetch` + `git merge`\n\n```\n// 以下命令等同于 git pull\ngit fetch origin master\ngit merge origin/master\n```\n\n##### 删除:\n`git branch -d [<分支名>]`\n\n- 效果: 删除目标分支（`-D`大写D是强行删除（未进行merge就直接删除时使用））\n\n##### 撤销:\n`git reset [<版本参数>] [<文件名>]`\n\n- 效果: 从暂存区撤销某文件的提交\n\n`git checkout -f`\n\n- 效果: 撤销未提交的文件\n\n### III. 状态:\n`git status`\n\n- 效果: 显示状态\n\n`git log -1`\n\n- 效果: 查看最后一次提交\n\n`git remote`\n\n- 效果: 远程库信息(`-v`查看详情(fetch地址与push地址))\n\n`git stash`\n\n- 效果: 存储当前工作现场（通常用在:用于工作一半，想要切换分支的时候）\n\n##### 存储现场:\n`git stash list`\n\n- 效果: 所有储存的工作现场列表\n\n`git stash apply [<现场id>]`\n\n- 效果: 应用现场id指定的现场\n\n`git stash stop [<现场id>]`\n\n- 效果: 删除现场id指定的现场\n\n`git stash pop`\n\n- 效果: 应用最早的现场，并删除它\n\n### IV. 对比:\n`git diff [<文件名>]`\n\n###### 拓展:\n`git diff HEAD -- [<file>]`\n\n- 效果: 工作区和版本库分支里的最新版本对比\n\n### V. 日志:\n`git log`\n\n- 效果: 查看git日志\n\n`git log -p`\n\n- 效果: 查看git并且显示具体文件修改点\n\n`git commite --amend -m [msg]`\n\n- 效果: 修改上次提交的commit message\n\n###### 查看历史git命令（可以用来找`commit id`）\n`git reflog`\n\n###### 简化:\n`git log --pretty=online`\n\n###### 查看分支合并图:\n`git log --graph`\n\n### VI. 回退代码:\n`git reset --hard [commit id/版本参数]`\n###### 版本参数定义:\n`HEAD`表示当前版本，上一个版本:`HEAD^`,上n个版本就是加n个`^`或者`HEAD~[n]`\n\n###### 拓展:\n`git checkout -- [<文件名>]`\n\n- 效果:\n\n```\n\t如果 暂存区中有该文件:\n\t\t替换为暂存区的.\n\t否则:\n\t\t替换为分支上的.\n\n```\n\n`git reset HEAD [file]`\n\n- 效果:  撤销`stage`暂存区中[file]文件的修改\n\n### VII. 冲突\n修改好冲突文件后，直接重新提交即可.\n\n冲突文件一般的表示：\n\n```\n<<<<<<< HEAD\nHead 的内容\n=======\n分支的内容\n>>>>>>> <分支名>\n```\n\n> 强烈推荐mergetool: [p4merge](https://gist.github.com/tony4d/3454372)\n\n### VIII. 同步远程\n`git pull`\n\n- 效果: 同步远程库（如果提示`no tracking information`，说明本地分支与远程分支的链接关系没有创建，用命令`git branch --set-upstream [<本地分支名>] [<远程分支名>]/[<本地分支名>]`进行创建链接）\n\n### IX. 标签\n\n##### 创建:\n\n`git tag [<标签名>] [<commit id>]`\n\n- 效果: 给对应commit id打上标签，如果不提供comit id，默认给最新一次提交打上标签\n\n`git tag -a [<标签名>] -m [<标签描述>] [<commit id>]`\n\n- 效果: 给对应commit id打上标签，并给标签加上了描述，如果不提供comit id，默认给最新一次提交打上标签\n`git tag -s [<标签名>] -m [<标签描述>] [<commit id>]`\n\n- 效果: 给对应commit id打上标签，并给标签加上了描述，并且加上PGP签名，如果不提供comit id，默认给最新一次提交打上标签\n\n##### 显示:\n\n`git tag`\n\n- 效果: 查看所有标签\n\n`git show [<标签名>]`\n\n- 效果: 显示标签那次提交的信息\n\n##### 删除:\n\n`git tag -d [<标签名>]`\n\n- 效果: 删除标签\n\n##### 远程:\n\n> [Push a tag to a remote repository using Git?](http://stackoverflow.com/questions/5195859/push-a-tag-to-a-remote-repository-using-git)\n\n> [How to: Delete a remote Git tag](https://nathanhoad.net/how-to-delete-a-remote-git-tag)\n\n`git push [<远端仓库名>] [<标签名>]`\n\n- 效果: 将标签推送到远程库分支\n\n`git push [<远程库分支名>] --tags`\n\n- 效果: 将本地所有标签推送到远程库分支\n\n`git push [<远端仓库名>] :refs/tags/[<标签名>]`\n\n- 效果: 将删除的标签同步到远程库分支\n\n## X. 子模块\n\n> [使用Git Submodule管理子模块](https://segmentfault.com/a/1190000003076028)\n\n#### 1. 添加子模块:\n\n```\n// 添加外部项目为当前项目的子模块, 添加完后，会配置到`.gitmodules`内\ngit submodule add [<远程库地址>] [<存储本地路径>]\n// 添加 .gitmodules 与 新拉下来的子模块文件夹 到 stage.\ngit add .gitmodules [<子模块目录>]\n// 提交对子模块文件的添加\ngit commit -m \"[<描述>]\"\n// 完成子模块添加\ngit submodule init\n```\n\n#### 2. 修改子模块\n\n```\ncd [<子模块目录>]/\n// 修改子模块中的文件->提交对子模块中的文件的修改->推到远端\n...\n// 回到父目录\ncd ..\n// 提交子模块中的修改->推到远端\n```\n\n#### 3. 更新子模块\n\n##### 方式一:\n\n在父项目目录下运行: `git submodule foreach git pull`\n\n##### 方式二:\n\n进入对应的子项目目录: `git pull`\n\n#### 4. 拉取存在子模块的项目\n\n##### 方式一:\n\n在父项目目录下运行: `git clone [<远程库地址>] --recursive`\n\n##### 方式二:\n\n```\n// 先clone父项目\ngit clone [<远程库地址>]\ncd [<子模块目录>]\ngit submodule init\n// 拉取子模块 配置文件中的所有子模块文件\ngit submodule update\n```\n\n#### 5. 删除项目中的子模块\n\n```\ngit rm --cached [<子模块目录>]\nrm -rf [<子模块目录]\n// 编辑 .gitmodules 删除其中对于要删除的子模块相关的内容\n// 提交对应的修改即可\n```\n\n## XI. 其他需要注意的\n\n#### 1. 由于Mac下文件名大小不敏感，造成git下如果改了名字，git不识别有变化，因此改名字需要使用下面命令:\n\n`git mv --force myfile MyFile`\n\n#### 2. 如果需要修改提交过的历史用户资料\n\n[Changing author info](https://help.github.com/articles/changing-author-info/)\n\n#### 3. 修改Commit Message\n\n> 当然若修改的那个Commit已经在远端，需要`git push --force`覆盖远端。\n\n- 如果只是修改最后一条Commit Message: `git commit --amend`\n- 如果需要修改更早之前的一些Commit Message: `git rebase -i [<Commit Id>]`\n\n\n# Git 配置\n\n##### 配置文件:\n\n局部: 项目工作区`.git/config`\n\n全局: `~/.gitconfig`\n\n##### 命令配置:\n\n`git config --global color.ui true`\n\n- 效果: Git会适应当地显示不同颜色\n\n##### 忽略特殊文件:\n\n在项目工作区根目录下直接创建`.gitignore`文件然后望里面添加文件名即可\n\n可以参考: [https://github.com/github/gitignore](https://github.com/github/gitignore)\n\n##### 别名配置:\n\n`git config --global alias.[<别名>] [对应命令]`\n\n推荐别名:\n\n```\ngit config --global alias.co checkout\ngit config --global alias.br branch\ngit config --global alias.ci commit\ngit config --global alias.st status\ngit config --global alias.unstage 'reset HEAD'\ngit config --global alias.last 'log -1'\ngit config --global alias.lg \"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit\"\n```\n\n## XII. GitHub\n\n### fork同步问题\n\n> A项目是B项目的fork，如果同步B项目的更新:\n\n#### 1. 先把B clone到本地\n\n```\ngit clone B_REPOSITORY_URL\n```\n\n#### 2. 再cd到本地B的目录，把A作为一个remote加到本地的B中（一般命名为upstream）\n\n```\ngit remote add upstream A_REPOSITORY_URL\n```\n\n#### 3. pull另一个A的remote（upstream）的相应分支（比如master）就可以\n\n```\ngit pull upstream master\n```\n\n#### 4. 最后push回github的B_REPOSITORY\n\n```\ngit push origin master\n```\n\n## XIII. 其他疑难问题\n\n调用`git fetch`的时候，出现:\n\n```\nAuto packing the repository in background for optimum performance.\nSee \"git help gc\" for manual housekeeping.\n```\n\n你执行`git fack`会发现一堆的挂起的`dangling blob xxxxxxxxxxxxxxx`\n\n此时只需要: **gc** 下 `git gc --prune=now`\n\n----\n\n- [Git教程](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\n- [6.6 Git 工具 - 子模块](https://git-scm.com/book/zh/v1/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97)\n- [Git Submodule的坑](http://blog.devtang.com/blog/2013/05/08/git-submodule-issues/)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/Git学习整理.md","raw":"title: Git\ndate: 2015-03-16 07:51:03\npermalink: 2015/03/16/Git学习整理\ntags:\n- git\n- 管理\n\n---\n\n# Git特点:\n1. 在2002由Linus花了两周写的，用在Linux版本维护，后来由Linux社区高手维护\n2. git是维护修改\n3. git是分布式版本控制\n\n\n<!--more-->\n# Git使用\n### I. 创建:\n##### 本地:\n`git init`\n\n- 效果:\n创建版本库(.git)\n\n##### 远程:\n`git remote add [<远程库分支名>] [<远程库地址>]`\n\n- 效果: 关联本地库与远程库\n\n`git clone [<远程库地址>]`\n\n- 效果: 克隆远程库到本地（包括工作区与版本库）（一般而言只checkout了远程origin分支到本地master分支）.\n\n`git clone -b <远程分支名> <远程库地址>`\n\n- 效果: 克隆远程分支到本地（本地分支名和远程分支名相同）.\n\n\n##### 分支:\n\n`git branch [<分支名>]`\n\n- 效果: **1** 创建分支; **2** 若没有提供<分支名>直接`git branch`将列出所有分支，并在当前分支前面显示`*`\n\n`git checkout [-b] [<分支名>]`\n\n- 效果: **1** 切换到<分支>(HEAD指针指向[分支]); **2** 若有`-b`则表示创建并切换到<分支>\n\n`git checkout [-b] [<本地分支名>] [<远程分支名>]/[<本地分支名>]`\n\n- 效果: 创建远程分支到本地分支\n\n\n### II. 提交:\n`git add [file]`\n`git rm [file]`\n\n- 效果: 将修改/删除添加到版本库中的`stage`的暂存区\n\n`git commit -m [<描述>]`\n\n- 效果: 把暂存区的内容提交到当前分支\n\n`git push [<远程库分支名>] [<本地分支名>]`\n\n- 效果: 把分支内容推到远程库相对应的分支上\n\n##### 合并:\n\n> 推荐merge工具: [p4Merge](https://gist.github.com/tony4d/3454372)\n\n`git merge [<目标分支>]`\n\n- 效果: 与目标分支合并(如果默认优先Fast-forward说明是快进模式（很快的合并）(ps: 该模式如果删掉分支，会丢掉分支信息))\n\n`git merge --no-ff -m [<描述>]`\n\n- 效果: 跳过Fast forward模式，保留版本库中分支结构(`git log --graph`)\n\n`git fetch <远程仓库名> <远程分支名>(:本地新分支名)`\n\n- 效果: 从远程的仓库(通常是`origin`)的分支下载最新版本到 本地的新的分支上，如果不提供默认:下载到 本地分支远程仓库/分支名 (例子: `origin/master`) 上。\n\n`git fetch`和`git pull`\n\n- 区别: `git pull` = `git fetch` + `git merge`\n\n```\n// 以下命令等同于 git pull\ngit fetch origin master\ngit merge origin/master\n```\n\n##### 删除:\n`git branch -d [<分支名>]`\n\n- 效果: 删除目标分支（`-D`大写D是强行删除（未进行merge就直接删除时使用））\n\n##### 撤销:\n`git reset [<版本参数>] [<文件名>]`\n\n- 效果: 从暂存区撤销某文件的提交\n\n`git checkout -f`\n\n- 效果: 撤销未提交的文件\n\n### III. 状态:\n`git status`\n\n- 效果: 显示状态\n\n`git log -1`\n\n- 效果: 查看最后一次提交\n\n`git remote`\n\n- 效果: 远程库信息(`-v`查看详情(fetch地址与push地址))\n\n`git stash`\n\n- 效果: 存储当前工作现场（通常用在:用于工作一半，想要切换分支的时候）\n\n##### 存储现场:\n`git stash list`\n\n- 效果: 所有储存的工作现场列表\n\n`git stash apply [<现场id>]`\n\n- 效果: 应用现场id指定的现场\n\n`git stash stop [<现场id>]`\n\n- 效果: 删除现场id指定的现场\n\n`git stash pop`\n\n- 效果: 应用最早的现场，并删除它\n\n### IV. 对比:\n`git diff [<文件名>]`\n\n###### 拓展:\n`git diff HEAD -- [<file>]`\n\n- 效果: 工作区和版本库分支里的最新版本对比\n\n### V. 日志:\n`git log`\n\n- 效果: 查看git日志\n\n`git log -p`\n\n- 效果: 查看git并且显示具体文件修改点\n\n`git commite --amend -m [msg]`\n\n- 效果: 修改上次提交的commit message\n\n###### 查看历史git命令（可以用来找`commit id`）\n`git reflog`\n\n###### 简化:\n`git log --pretty=online`\n\n###### 查看分支合并图:\n`git log --graph`\n\n### VI. 回退代码:\n`git reset --hard [commit id/版本参数]`\n###### 版本参数定义:\n`HEAD`表示当前版本，上一个版本:`HEAD^`,上n个版本就是加n个`^`或者`HEAD~[n]`\n\n###### 拓展:\n`git checkout -- [<文件名>]`\n\n- 效果:\n\n```\n\t如果 暂存区中有该文件:\n\t\t替换为暂存区的.\n\t否则:\n\t\t替换为分支上的.\n\n```\n\n`git reset HEAD [file]`\n\n- 效果:  撤销`stage`暂存区中[file]文件的修改\n\n### VII. 冲突\n修改好冲突文件后，直接重新提交即可.\n\n冲突文件一般的表示：\n\n```\n<<<<<<< HEAD\nHead 的内容\n=======\n分支的内容\n>>>>>>> <分支名>\n```\n\n> 强烈推荐mergetool: [p4merge](https://gist.github.com/tony4d/3454372)\n\n### VIII. 同步远程\n`git pull`\n\n- 效果: 同步远程库（如果提示`no tracking information`，说明本地分支与远程分支的链接关系没有创建，用命令`git branch --set-upstream [<本地分支名>] [<远程分支名>]/[<本地分支名>]`进行创建链接）\n\n### IX. 标签\n\n##### 创建:\n\n`git tag [<标签名>] [<commit id>]`\n\n- 效果: 给对应commit id打上标签，如果不提供comit id，默认给最新一次提交打上标签\n\n`git tag -a [<标签名>] -m [<标签描述>] [<commit id>]`\n\n- 效果: 给对应commit id打上标签，并给标签加上了描述，如果不提供comit id，默认给最新一次提交打上标签\n`git tag -s [<标签名>] -m [<标签描述>] [<commit id>]`\n\n- 效果: 给对应commit id打上标签，并给标签加上了描述，并且加上PGP签名，如果不提供comit id，默认给最新一次提交打上标签\n\n##### 显示:\n\n`git tag`\n\n- 效果: 查看所有标签\n\n`git show [<标签名>]`\n\n- 效果: 显示标签那次提交的信息\n\n##### 删除:\n\n`git tag -d [<标签名>]`\n\n- 效果: 删除标签\n\n##### 远程:\n\n> [Push a tag to a remote repository using Git?](http://stackoverflow.com/questions/5195859/push-a-tag-to-a-remote-repository-using-git)\n\n> [How to: Delete a remote Git tag](https://nathanhoad.net/how-to-delete-a-remote-git-tag)\n\n`git push [<远端仓库名>] [<标签名>]`\n\n- 效果: 将标签推送到远程库分支\n\n`git push [<远程库分支名>] --tags`\n\n- 效果: 将本地所有标签推送到远程库分支\n\n`git push [<远端仓库名>] :refs/tags/[<标签名>]`\n\n- 效果: 将删除的标签同步到远程库分支\n\n## X. 子模块\n\n> [使用Git Submodule管理子模块](https://segmentfault.com/a/1190000003076028)\n\n#### 1. 添加子模块:\n\n```\n// 添加外部项目为当前项目的子模块, 添加完后，会配置到`.gitmodules`内\ngit submodule add [<远程库地址>] [<存储本地路径>]\n// 添加 .gitmodules 与 新拉下来的子模块文件夹 到 stage.\ngit add .gitmodules [<子模块目录>]\n// 提交对子模块文件的添加\ngit commit -m \"[<描述>]\"\n// 完成子模块添加\ngit submodule init\n```\n\n#### 2. 修改子模块\n\n```\ncd [<子模块目录>]/\n// 修改子模块中的文件->提交对子模块中的文件的修改->推到远端\n...\n// 回到父目录\ncd ..\n// 提交子模块中的修改->推到远端\n```\n\n#### 3. 更新子模块\n\n##### 方式一:\n\n在父项目目录下运行: `git submodule foreach git pull`\n\n##### 方式二:\n\n进入对应的子项目目录: `git pull`\n\n#### 4. 拉取存在子模块的项目\n\n##### 方式一:\n\n在父项目目录下运行: `git clone [<远程库地址>] --recursive`\n\n##### 方式二:\n\n```\n// 先clone父项目\ngit clone [<远程库地址>]\ncd [<子模块目录>]\ngit submodule init\n// 拉取子模块 配置文件中的所有子模块文件\ngit submodule update\n```\n\n#### 5. 删除项目中的子模块\n\n```\ngit rm --cached [<子模块目录>]\nrm -rf [<子模块目录]\n// 编辑 .gitmodules 删除其中对于要删除的子模块相关的内容\n// 提交对应的修改即可\n```\n\n## XI. 其他需要注意的\n\n#### 1. 由于Mac下文件名大小不敏感，造成git下如果改了名字，git不识别有变化，因此改名字需要使用下面命令:\n\n`git mv --force myfile MyFile`\n\n#### 2. 如果需要修改提交过的历史用户资料\n\n[Changing author info](https://help.github.com/articles/changing-author-info/)\n\n#### 3. 修改Commit Message\n\n> 当然若修改的那个Commit已经在远端，需要`git push --force`覆盖远端。\n\n- 如果只是修改最后一条Commit Message: `git commit --amend`\n- 如果需要修改更早之前的一些Commit Message: `git rebase -i [<Commit Id>]`\n\n\n# Git 配置\n\n##### 配置文件:\n\n局部: 项目工作区`.git/config`\n\n全局: `~/.gitconfig`\n\n##### 命令配置:\n\n`git config --global color.ui true`\n\n- 效果: Git会适应当地显示不同颜色\n\n##### 忽略特殊文件:\n\n在项目工作区根目录下直接创建`.gitignore`文件然后望里面添加文件名即可\n\n可以参考: [https://github.com/github/gitignore](https://github.com/github/gitignore)\n\n##### 别名配置:\n\n`git config --global alias.[<别名>] [对应命令]`\n\n推荐别名:\n\n```\ngit config --global alias.co checkout\ngit config --global alias.br branch\ngit config --global alias.ci commit\ngit config --global alias.st status\ngit config --global alias.unstage 'reset HEAD'\ngit config --global alias.last 'log -1'\ngit config --global alias.lg \"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit\"\n```\n\n## XII. GitHub\n\n### fork同步问题\n\n> A项目是B项目的fork，如果同步B项目的更新:\n\n#### 1. 先把B clone到本地\n\n```\ngit clone B_REPOSITORY_URL\n```\n\n#### 2. 再cd到本地B的目录，把A作为一个remote加到本地的B中（一般命名为upstream）\n\n```\ngit remote add upstream A_REPOSITORY_URL\n```\n\n#### 3. pull另一个A的remote（upstream）的相应分支（比如master）就可以\n\n```\ngit pull upstream master\n```\n\n#### 4. 最后push回github的B_REPOSITORY\n\n```\ngit push origin master\n```\n\n## XIII. 其他疑难问题\n\n调用`git fetch`的时候，出现:\n\n```\nAuto packing the repository in background for optimum performance.\nSee \"git help gc\" for manual housekeeping.\n```\n\n你执行`git fack`会发现一堆的挂起的`dangling blob xxxxxxxxxxxxxxx`\n\n此时只需要: **gc** 下 `git gc --prune=now`\n\n----\n\n- [Git教程](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\n- [6.6 Git 工具 - 子模块](https://git-scm.com/book/zh/v1/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97)\n- [Git Submodule的坑](http://blog.devtang.com/blog/2013/05/08/git-submodule-issues/)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2015/03/16/Git学习整理","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66hr000j95bukzkufxq2","content":"<h1 id=\"Git特点\"><a href=\"#Git特点\" class=\"headerlink\" title=\"Git特点:\"></a>Git特点:</h1><ol>\n<li>在2002由Linus花了两周写的，用在Linux版本维护，后来由Linux社区高手维护</li>\n<li>git是维护修改</li>\n<li>git是分布式版本控制</li>\n</ol>\n<a id=\"more\"></a>\n<h1 id=\"Git使用\"><a href=\"#Git使用\" class=\"headerlink\" title=\"Git使用\"></a>Git使用</h1><h3 id=\"I-创建\"><a href=\"#I-创建\" class=\"headerlink\" title=\"I. 创建:\"></a>I. 创建:</h3><h5 id=\"本地\"><a href=\"#本地\" class=\"headerlink\" title=\"本地:\"></a>本地:</h5><p><code>git init</code></p>\n<ul>\n<li>效果:<br>创建版本库(.git)</li>\n</ul>\n<h5 id=\"远程\"><a href=\"#远程\" class=\"headerlink\" title=\"远程:\"></a>远程:</h5><p><code>git remote add [&lt;远程库分支名&gt;] [&lt;远程库地址&gt;]</code></p>\n<ul>\n<li>效果: 关联本地库与远程库</li>\n</ul>\n<p><code>git clone [&lt;远程库地址&gt;]</code></p>\n<ul>\n<li>效果: 克隆远程库到本地（包括工作区与版本库）（一般而言只checkout了远程origin分支到本地master分支）.</li>\n</ul>\n<p><code>git clone -b &lt;远程分支名&gt; &lt;远程库地址&gt;</code></p>\n<ul>\n<li>效果: 克隆远程分支到本地（本地分支名和远程分支名相同）.</li>\n</ul>\n<h5 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支:\"></a>分支:</h5><p><code>git branch [&lt;分支名&gt;]</code></p>\n<ul>\n<li>效果: <strong>1</strong> 创建分支; <strong>2</strong> 若没有提供&lt;分支名&gt;直接<code>git branch</code>将列出所有分支，并在当前分支前面显示<code>*</code></li>\n</ul>\n<p><code>git checkout [-b] [&lt;分支名&gt;]</code></p>\n<ul>\n<li>效果: <strong>1</strong> 切换到&lt;分支&gt;(HEAD指针指向[分支]); <strong>2</strong> 若有<code>-b</code>则表示创建并切换到&lt;分支&gt;</li>\n</ul>\n<p><code>git checkout [-b] [&lt;本地分支名&gt;] [&lt;远程分支名&gt;]/[&lt;本地分支名&gt;]</code></p>\n<ul>\n<li>效果: 创建远程分支到本地分支</li>\n</ul>\n<h3 id=\"II-提交\"><a href=\"#II-提交\" class=\"headerlink\" title=\"II. 提交:\"></a>II. 提交:</h3><p><code>git add [file]</code><br><code>git rm [file]</code></p>\n<ul>\n<li>效果: 将修改/删除添加到版本库中的<code>stage</code>的暂存区</li>\n</ul>\n<p><code>git commit -m [&lt;描述&gt;]</code></p>\n<ul>\n<li>效果: 把暂存区的内容提交到当前分支</li>\n</ul>\n<p><code>git push [&lt;远程库分支名&gt;] [&lt;本地分支名&gt;]</code></p>\n<ul>\n<li>效果: 把分支内容推到远程库相对应的分支上</li>\n</ul>\n<h5 id=\"合并\"><a href=\"#合并\" class=\"headerlink\" title=\"合并:\"></a>合并:</h5><blockquote>\n<p>推荐merge工具: <a href=\"https://gist.github.com/tony4d/3454372\" target=\"_blank\" rel=\"external\">p4Merge</a></p>\n</blockquote>\n<p><code>git merge [&lt;目标分支&gt;]</code></p>\n<ul>\n<li>效果: 与目标分支合并(如果默认优先Fast-forward说明是快进模式（很快的合并）(ps: 该模式如果删掉分支，会丢掉分支信息))</li>\n</ul>\n<p><code>git merge --no-ff -m [&lt;描述&gt;]</code></p>\n<ul>\n<li>效果: 跳过Fast forward模式，保留版本库中分支结构(<code>git log --graph</code>)</li>\n</ul>\n<p><code>git fetch &lt;远程仓库名&gt; &lt;远程分支名&gt;(:本地新分支名)</code></p>\n<ul>\n<li>效果: 从远程的仓库(通常是<code>origin</code>)的分支下载最新版本到 本地的新的分支上，如果不提供默认:下载到 本地分支远程仓库/分支名 (例子: <code>origin/master</code>) 上。</li>\n</ul>\n<p><code>git fetch</code>和<code>git pull</code></p>\n<ul>\n<li>区别: <code>git pull</code> = <code>git fetch</code> + <code>git merge</code></li>\n</ul>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 以下命令等同于 git pull</div><div class=\"line\">git fetch origin <span class=\"keyword\">master</span></div><div class=\"line\"><span class=\"title\">git</span> merge origin/<span class=\"literal\">master</span></div></pre></td></tr></table></figure>\n<h5 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除:\"></a>删除:</h5><p><code>git branch -d [&lt;分支名&gt;]</code></p>\n<ul>\n<li>效果: 删除目标分支（<code>-D</code>大写D是强行删除（未进行merge就直接删除时使用））</li>\n</ul>\n<h5 id=\"撤销\"><a href=\"#撤销\" class=\"headerlink\" title=\"撤销:\"></a>撤销:</h5><p><code>git reset [&lt;版本参数&gt;] [&lt;文件名&gt;]</code></p>\n<ul>\n<li>效果: 从暂存区撤销某文件的提交</li>\n</ul>\n<p><code>git checkout -f</code></p>\n<ul>\n<li>效果: 撤销未提交的文件</li>\n</ul>\n<h3 id=\"III-状态\"><a href=\"#III-状态\" class=\"headerlink\" title=\"III. 状态:\"></a>III. 状态:</h3><p><code>git status</code></p>\n<ul>\n<li>效果: 显示状态</li>\n</ul>\n<p><code>git log -1</code></p>\n<ul>\n<li>效果: 查看最后一次提交</li>\n</ul>\n<p><code>git remote</code></p>\n<ul>\n<li>效果: 远程库信息(<code>-v</code>查看详情(fetch地址与push地址))</li>\n</ul>\n<p><code>git stash</code></p>\n<ul>\n<li>效果: 存储当前工作现场（通常用在:用于工作一半，想要切换分支的时候）</li>\n</ul>\n<h5 id=\"存储现场\"><a href=\"#存储现场\" class=\"headerlink\" title=\"存储现场:\"></a>存储现场:</h5><p><code>git stash list</code></p>\n<ul>\n<li>效果: 所有储存的工作现场列表</li>\n</ul>\n<p><code>git stash apply [&lt;现场id&gt;]</code></p>\n<ul>\n<li>效果: 应用现场id指定的现场</li>\n</ul>\n<p><code>git stash stop [&lt;现场id&gt;]</code></p>\n<ul>\n<li>效果: 删除现场id指定的现场</li>\n</ul>\n<p><code>git stash pop</code></p>\n<ul>\n<li>效果: 应用最早的现场，并删除它</li>\n</ul>\n<h3 id=\"IV-对比\"><a href=\"#IV-对比\" class=\"headerlink\" title=\"IV. 对比:\"></a>IV. 对比:</h3><p><code>git diff [&lt;文件名&gt;]</code></p>\n<h6 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展:\"></a>拓展:</h6><p><code>git diff HEAD -- [&lt;file&gt;]</code></p>\n<ul>\n<li>效果: 工作区和版本库分支里的最新版本对比</li>\n</ul>\n<h3 id=\"V-日志\"><a href=\"#V-日志\" class=\"headerlink\" title=\"V. 日志:\"></a>V. 日志:</h3><p><code>git log</code></p>\n<ul>\n<li>效果: 查看git日志</li>\n</ul>\n<p><code>git log -p</code></p>\n<ul>\n<li>效果: 查看git并且显示具体文件修改点</li>\n</ul>\n<p><code>git commite --amend -m [msg]</code></p>\n<ul>\n<li>效果: 修改上次提交的commit message</li>\n</ul>\n<h6 id=\"查看历史git命令（可以用来找commit-id）\"><a href=\"#查看历史git命令（可以用来找commit-id）\" class=\"headerlink\" title=\"查看历史git命令（可以用来找commit id）\"></a>查看历史git命令（可以用来找<code>commit id</code>）</h6><p><code>git reflog</code></p>\n<h6 id=\"简化\"><a href=\"#简化\" class=\"headerlink\" title=\"简化:\"></a>简化:</h6><p><code>git log --pretty=online</code></p>\n<h6 id=\"查看分支合并图\"><a href=\"#查看分支合并图\" class=\"headerlink\" title=\"查看分支合并图:\"></a>查看分支合并图:</h6><p><code>git log --graph</code></p>\n<h3 id=\"VI-回退代码\"><a href=\"#VI-回退代码\" class=\"headerlink\" title=\"VI. 回退代码:\"></a>VI. 回退代码:</h3><p><code>git reset --hard [commit id/版本参数]</code></p>\n<h6 id=\"版本参数定义\"><a href=\"#版本参数定义\" class=\"headerlink\" title=\"版本参数定义:\"></a>版本参数定义:</h6><p><code>HEAD</code>表示当前版本，上一个版本:<code>HEAD^</code>,上n个版本就是加n个<code>^</code>或者<code>HEAD~[n]</code></p>\n<h6 id=\"拓展-1\"><a href=\"#拓展-1\" class=\"headerlink\" title=\"拓展:\"></a>拓展:</h6><p><code>git checkout -- [&lt;文件名&gt;]</code></p>\n<ul>\n<li>效果:</li>\n</ul>\n<figure class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">如果 暂存区中有该文件:</div><div class=\"line\">\t替换为暂存区的.</div><div class=\"line\">否则:</div><div class=\"line\">\t替换为分支上的.</div></pre></td></tr></table></figure>\n<p><code>git reset HEAD [file]</code></p>\n<ul>\n<li>效果:  撤销<code>stage</code>暂存区中[file]文件的修改</li>\n</ul>\n<h3 id=\"VII-冲突\"><a href=\"#VII-冲突\" class=\"headerlink\" title=\"VII. 冲突\"></a>VII. 冲突</h3><p>修改好冲突文件后，直接重新提交即可.</p>\n<p>冲突文件一般的表示：</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</div><div class=\"line\"><span class=\"section\">Head 的内容</span></div><div class=\"line\">=======</div><div class=\"line\">分支的内容</div><div class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;分支名&gt;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>强烈推荐mergetool: <a href=\"https://gist.github.com/tony4d/3454372\" target=\"_blank\" rel=\"external\">p4merge</a></p>\n</blockquote>\n<h3 id=\"VIII-同步远程\"><a href=\"#VIII-同步远程\" class=\"headerlink\" title=\"VIII. 同步远程\"></a>VIII. 同步远程</h3><p><code>git pull</code></p>\n<ul>\n<li>效果: 同步远程库（如果提示<code>no tracking information</code>，说明本地分支与远程分支的链接关系没有创建，用命令<code>git branch --set-upstream [&lt;本地分支名&gt;] [&lt;远程分支名&gt;]/[&lt;本地分支名&gt;]</code>进行创建链接）</li>\n</ul>\n<h3 id=\"IX-标签\"><a href=\"#IX-标签\" class=\"headerlink\" title=\"IX. 标签\"></a>IX. 标签</h3><h5 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建:\"></a>创建:</h5><p><code>git tag [&lt;标签名&gt;] [&lt;commit id&gt;]</code></p>\n<ul>\n<li>效果: 给对应commit id打上标签，如果不提供comit id，默认给最新一次提交打上标签</li>\n</ul>\n<p><code>git tag -a [&lt;标签名&gt;] -m [&lt;标签描述&gt;] [&lt;commit id&gt;]</code></p>\n<ul>\n<li><p>效果: 给对应commit id打上标签，并给标签加上了描述，如果不提供comit id，默认给最新一次提交打上标签<br><code>git tag -s [&lt;标签名&gt;] -m [&lt;标签描述&gt;] [&lt;commit id&gt;]</code></p>\n</li>\n<li><p>效果: 给对应commit id打上标签，并给标签加上了描述，并且加上PGP签名，如果不提供comit id，默认给最新一次提交打上标签</p>\n</li>\n</ul>\n<h5 id=\"显示\"><a href=\"#显示\" class=\"headerlink\" title=\"显示:\"></a>显示:</h5><p><code>git tag</code></p>\n<ul>\n<li>效果: 查看所有标签</li>\n</ul>\n<p><code>git show [&lt;标签名&gt;]</code></p>\n<ul>\n<li>效果: 显示标签那次提交的信息</li>\n</ul>\n<h5 id=\"删除-1\"><a href=\"#删除-1\" class=\"headerlink\" title=\"删除:\"></a>删除:</h5><p><code>git tag -d [&lt;标签名&gt;]</code></p>\n<ul>\n<li>效果: 删除标签</li>\n</ul>\n<h5 id=\"远程-1\"><a href=\"#远程-1\" class=\"headerlink\" title=\"远程:\"></a>远程:</h5><blockquote>\n<p><a href=\"http://stackoverflow.com/questions/5195859/push-a-tag-to-a-remote-repository-using-git\" target=\"_blank\" rel=\"external\">Push a tag to a remote repository using Git?</a></p>\n<p><a href=\"https://nathanhoad.net/how-to-delete-a-remote-git-tag\" target=\"_blank\" rel=\"external\">How to: Delete a remote Git tag</a></p>\n</blockquote>\n<p><code>git push [&lt;远端仓库名&gt;] [&lt;标签名&gt;]</code></p>\n<ul>\n<li>效果: 将标签推送到远程库分支</li>\n</ul>\n<p><code>git push [&lt;远程库分支名&gt;] --tags</code></p>\n<ul>\n<li>效果: 将本地所有标签推送到远程库分支</li>\n</ul>\n<p><code>git push [&lt;远端仓库名&gt;] :refs/tags/[&lt;标签名&gt;]</code></p>\n<ul>\n<li>效果: 将删除的标签同步到远程库分支</li>\n</ul>\n<h2 id=\"X-子模块\"><a href=\"#X-子模块\" class=\"headerlink\" title=\"X. 子模块\"></a>X. 子模块</h2><blockquote>\n<p><a href=\"https://segmentfault.com/a/1190000003076028\" target=\"_blank\" rel=\"external\">使用Git Submodule管理子模块</a></p>\n</blockquote>\n<h4 id=\"1-添加子模块\"><a href=\"#1-添加子模块\" class=\"headerlink\" title=\"1. 添加子模块:\"></a>1. 添加子模块:</h4><figure class=\"highlight fsharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 添加外部项目为当前项目的子模块, 添加完后，会配置到`.gitmodules`内</span></div><div class=\"line\">git submodule add <span class=\"meta\">[&lt;远程库地址&gt;]</span> <span class=\"meta\">[&lt;存储本地路径&gt;]</span></div><div class=\"line\"><span class=\"comment\">// 添加 .gitmodules 与 新拉下来的子模块文件夹 到 stage.</span></div><div class=\"line\">git add .gitmodules <span class=\"meta\">[&lt;子模块目录&gt;]</span></div><div class=\"line\"><span class=\"comment\">// 提交对子模块文件的添加</span></div><div class=\"line\">git commit -m <span class=\"string\">\"[&lt;描述&gt;]\"</span></div><div class=\"line\"><span class=\"comment\">// 完成子模块添加</span></div><div class=\"line\">git submodule init</div></pre></td></tr></table></figure>\n<h4 id=\"2-修改子模块\"><a href=\"#2-修改子模块\" class=\"headerlink\" title=\"2. 修改子模块\"></a>2. 修改子模块</h4><figure class=\"highlight fsharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd <span class=\"meta\">[&lt;子模块目录&gt;]</span>/</div><div class=\"line\"><span class=\"comment\">// 修改子模块中的文件-&gt;提交对子模块中的文件的修改-&gt;推到远端</span></div><div class=\"line\">...</div><div class=\"line\"><span class=\"comment\">// 回到父目录</span></div><div class=\"line\">cd ..</div><div class=\"line\"><span class=\"comment\">// 提交子模块中的修改-&gt;推到远端</span></div></pre></td></tr></table></figure>\n<h4 id=\"3-更新子模块\"><a href=\"#3-更新子模块\" class=\"headerlink\" title=\"3. 更新子模块\"></a>3. 更新子模块</h4><h5 id=\"方式一\"><a href=\"#方式一\" class=\"headerlink\" title=\"方式一:\"></a>方式一:</h5><p>在父项目目录下运行: <code>git submodule foreach git pull</code></p>\n<h5 id=\"方式二\"><a href=\"#方式二\" class=\"headerlink\" title=\"方式二:\"></a>方式二:</h5><p>进入对应的子项目目录: <code>git pull</code></p>\n<h4 id=\"4-拉取存在子模块的项目\"><a href=\"#4-拉取存在子模块的项目\" class=\"headerlink\" title=\"4. 拉取存在子模块的项目\"></a>4. 拉取存在子模块的项目</h4><h5 id=\"方式一-1\"><a href=\"#方式一-1\" class=\"headerlink\" title=\"方式一:\"></a>方式一:</h5><p>在父项目目录下运行: <code>git clone [&lt;远程库地址&gt;] --recursive</code></p>\n<h5 id=\"方式二-1\"><a href=\"#方式二-1\" class=\"headerlink\" title=\"方式二:\"></a>方式二:</h5><figure class=\"highlight fsharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 先clone父项目</span></div><div class=\"line\">git clone <span class=\"meta\">[&lt;远程库地址&gt;]</span></div><div class=\"line\">cd <span class=\"meta\">[&lt;子模块目录&gt;]</span></div><div class=\"line\">git submodule init</div><div class=\"line\"><span class=\"comment\">// 拉取子模块 配置文件中的所有子模块文件</span></div><div class=\"line\">git submodule update</div></pre></td></tr></table></figure>\n<h4 id=\"5-删除项目中的子模块\"><a href=\"#5-删除项目中的子模块\" class=\"headerlink\" title=\"5. 删除项目中的子模块\"></a>5. 删除项目中的子模块</h4><figure class=\"highlight fsharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git rm --cached <span class=\"meta\">[&lt;子模块目录&gt;]</span></div><div class=\"line\">rm -rf <span class=\"meta\">[&lt;子模块目录]</span></div><div class=\"line\">// 编辑 .gitmodules 删除其中对于要删除的子模块相关的内容</div><div class=\"line\">// 提交对应的修改即可</div></pre></td></tr></table></figure>\n<h2 id=\"XI-其他需要注意的\"><a href=\"#XI-其他需要注意的\" class=\"headerlink\" title=\"XI. 其他需要注意的\"></a>XI. 其他需要注意的</h2><h4 id=\"1-由于Mac下文件名大小不敏感，造成git下如果改了名字，git不识别有变化，因此改名字需要使用下面命令\"><a href=\"#1-由于Mac下文件名大小不敏感，造成git下如果改了名字，git不识别有变化，因此改名字需要使用下面命令\" class=\"headerlink\" title=\"1. 由于Mac下文件名大小不敏感，造成git下如果改了名字，git不识别有变化，因此改名字需要使用下面命令:\"></a>1. 由于Mac下文件名大小不敏感，造成git下如果改了名字，git不识别有变化，因此改名字需要使用下面命令:</h4><p><code>git mv --force myfile MyFile</code></p>\n<h4 id=\"2-如果需要修改提交过的历史用户资料\"><a href=\"#2-如果需要修改提交过的历史用户资料\" class=\"headerlink\" title=\"2. 如果需要修改提交过的历史用户资料\"></a>2. 如果需要修改提交过的历史用户资料</h4><p><a href=\"https://help.github.com/articles/changing-author-info/\" target=\"_blank\" rel=\"external\">Changing author info</a></p>\n<h4 id=\"3-修改Commit-Message\"><a href=\"#3-修改Commit-Message\" class=\"headerlink\" title=\"3. 修改Commit Message\"></a>3. 修改Commit Message</h4><blockquote>\n<p>当然若修改的那个Commit已经在远端，需要<code>git push --force</code>覆盖远端。</p>\n</blockquote>\n<ul>\n<li>如果只是修改最后一条Commit Message: <code>git commit --amend</code></li>\n<li>如果需要修改更早之前的一些Commit Message: <code>git rebase -i [&lt;Commit Id&gt;]</code></li>\n</ul>\n<h1 id=\"Git-配置\"><a href=\"#Git-配置\" class=\"headerlink\" title=\"Git 配置\"></a>Git 配置</h1><h5 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件:\"></a>配置文件:</h5><p>局部: 项目工作区<code>.git/config</code></p>\n<p>全局: <code>~/.gitconfig</code></p>\n<h5 id=\"命令配置\"><a href=\"#命令配置\" class=\"headerlink\" title=\"命令配置:\"></a>命令配置:</h5><p><code>git config --global color.ui true</code></p>\n<ul>\n<li>效果: Git会适应当地显示不同颜色</li>\n</ul>\n<h5 id=\"忽略特殊文件\"><a href=\"#忽略特殊文件\" class=\"headerlink\" title=\"忽略特殊文件:\"></a>忽略特殊文件:</h5><p>在项目工作区根目录下直接创建<code>.gitignore</code>文件然后望里面添加文件名即可</p>\n<p>可以参考: <a href=\"https://github.com/github/gitignore\" target=\"_blank\" rel=\"external\">https://github.com/github/gitignore</a></p>\n<h5 id=\"别名配置\"><a href=\"#别名配置\" class=\"headerlink\" title=\"别名配置:\"></a>别名配置:</h5><p><code>git config --global alias.[&lt;别名&gt;] [对应命令]</code></p>\n<p>推荐别名:</p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"keyword\">config</span> --<span class=\"keyword\">global</span> <span class=\"keyword\">alias</span><span class=\"variable\">.co</span> checkout</div><div class=\"line\">git <span class=\"keyword\">config</span> --<span class=\"keyword\">global</span> <span class=\"keyword\">alias</span><span class=\"variable\">.br</span> branch</div><div class=\"line\">git <span class=\"keyword\">config</span> --<span class=\"keyword\">global</span> <span class=\"keyword\">alias</span><span class=\"variable\">.ci</span> commit</div><div class=\"line\">git <span class=\"keyword\">config</span> --<span class=\"keyword\">global</span> <span class=\"keyword\">alias</span><span class=\"variable\">.st</span> status</div><div class=\"line\">git <span class=\"keyword\">config</span> --<span class=\"keyword\">global</span> <span class=\"keyword\">alias</span><span class=\"variable\">.unstage</span> 'reset HEAD'</div><div class=\"line\">git <span class=\"keyword\">config</span> --<span class=\"keyword\">global</span> <span class=\"keyword\">alias</span><span class=\"variable\">.last</span> 'log -<span class=\"number\">1</span>'</div><div class=\"line\">git <span class=\"keyword\">config</span> --<span class=\"keyword\">global</span> <span class=\"keyword\">alias</span><span class=\"variable\">.lg</span> <span class=\"string\">\"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"XII-GitHub\"><a href=\"#XII-GitHub\" class=\"headerlink\" title=\"XII. GitHub\"></a>XII. GitHub</h2><h3 id=\"fork同步问题\"><a href=\"#fork同步问题\" class=\"headerlink\" title=\"fork同步问题\"></a>fork同步问题</h3><blockquote>\n<p>A项目是B项目的fork，如果同步B项目的更新:</p>\n</blockquote>\n<h4 id=\"1-先把B-clone到本地\"><a href=\"#1-先把B-clone到本地\" class=\"headerlink\" title=\"1. 先把B clone到本地\"></a>1. 先把B clone到本地</h4><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"keyword\">clone</span> <span class=\"title\">B_REPOSITORY_URL</span></div></pre></td></tr></table></figure>\n<h4 id=\"2-再cd到本地B的目录，把A作为一个remote加到本地的B中（一般命名为upstream）\"><a href=\"#2-再cd到本地B的目录，把A作为一个remote加到本地的B中（一般命名为upstream）\" class=\"headerlink\" title=\"2. 再cd到本地B的目录，把A作为一个remote加到本地的B中（一般命名为upstream）\"></a>2. 再cd到本地B的目录，把A作为一个remote加到本地的B中（一般命名为upstream）</h4><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote <span class=\"keyword\">add</span><span class=\"bash\"> upstream A_REPOSITORY_URL</span></div></pre></td></tr></table></figure>\n<h4 id=\"3-pull另一个A的remote（upstream）的相应分支（比如master）就可以\"><a href=\"#3-pull另一个A的remote（upstream）的相应分支（比如master）就可以\" class=\"headerlink\" title=\"3. pull另一个A的remote（upstream）的相应分支（比如master）就可以\"></a>3. pull另一个A的remote（upstream）的相应分支（比如master）就可以</h4><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git pull upstream <span class=\"literal\">master</span></div></pre></td></tr></table></figure>\n<h4 id=\"4-最后push回github的B-REPOSITORY\"><a href=\"#4-最后push回github的B-REPOSITORY\" class=\"headerlink\" title=\"4. 最后push回github的B_REPOSITORY\"></a>4. 最后push回github的B_REPOSITORY</h4><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">push</span> <span class=\"built_in\">origin</span> master</div></pre></td></tr></table></figure>\n<h2 id=\"XIII-其他疑难问题\"><a href=\"#XIII-其他疑难问题\" class=\"headerlink\" title=\"XIII. 其他疑难问题\"></a>XIII. 其他疑难问题</h2><p>调用<code>git fetch</code>的时候，出现:</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Auto packing <span class=\"keyword\">the</span> repository <span class=\"keyword\">in</span> background <span class=\"keyword\">for</span> optimum performance.</div><div class=\"line\">See <span class=\"string\">\"git help gc\"</span> <span class=\"keyword\">for</span> manual housekeeping.</div></pre></td></tr></table></figure>\n<p>你执行<code>git fack</code>会发现一堆的挂起的<code>dangling blob xxxxxxxxxxxxxxx</code></p>\n<p>此时只需要: <strong>gc</strong> 下 <code>git gc --prune=now</code></p>\n<hr>\n<ul>\n<li><a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"external\">Git教程</a></li>\n<li><a href=\"https://git-scm.com/book/zh/v1/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97\" target=\"_blank\" rel=\"external\">6.6 Git 工具 - 子模块</a></li>\n<li><a href=\"http://blog.devtang.com/blog/2013/05/08/git-submodule-issues/\" target=\"_blank\" rel=\"external\">Git Submodule的坑</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<h1 id=\"Git特点\"><a href=\"#Git特点\" class=\"headerlink\" title=\"Git特点:\"></a>Git特点:</h1><ol>\n<li>在2002由Linus花了两周写的，用在Linux版本维护，后来由Linux社区高手维护</li>\n<li>git是维护修改</li>\n<li>git是分布式版本控制</li>\n</ol>","more":"<h1 id=\"Git使用\"><a href=\"#Git使用\" class=\"headerlink\" title=\"Git使用\"></a>Git使用</h1><h3 id=\"I-创建\"><a href=\"#I-创建\" class=\"headerlink\" title=\"I. 创建:\"></a>I. 创建:</h3><h5 id=\"本地\"><a href=\"#本地\" class=\"headerlink\" title=\"本地:\"></a>本地:</h5><p><code>git init</code></p>\n<ul>\n<li>效果:<br>创建版本库(.git)</li>\n</ul>\n<h5 id=\"远程\"><a href=\"#远程\" class=\"headerlink\" title=\"远程:\"></a>远程:</h5><p><code>git remote add [&lt;远程库分支名&gt;] [&lt;远程库地址&gt;]</code></p>\n<ul>\n<li>效果: 关联本地库与远程库</li>\n</ul>\n<p><code>git clone [&lt;远程库地址&gt;]</code></p>\n<ul>\n<li>效果: 克隆远程库到本地（包括工作区与版本库）（一般而言只checkout了远程origin分支到本地master分支）.</li>\n</ul>\n<p><code>git clone -b &lt;远程分支名&gt; &lt;远程库地址&gt;</code></p>\n<ul>\n<li>效果: 克隆远程分支到本地（本地分支名和远程分支名相同）.</li>\n</ul>\n<h5 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支:\"></a>分支:</h5><p><code>git branch [&lt;分支名&gt;]</code></p>\n<ul>\n<li>效果: <strong>1</strong> 创建分支; <strong>2</strong> 若没有提供&lt;分支名&gt;直接<code>git branch</code>将列出所有分支，并在当前分支前面显示<code>*</code></li>\n</ul>\n<p><code>git checkout [-b] [&lt;分支名&gt;]</code></p>\n<ul>\n<li>效果: <strong>1</strong> 切换到&lt;分支&gt;(HEAD指针指向[分支]); <strong>2</strong> 若有<code>-b</code>则表示创建并切换到&lt;分支&gt;</li>\n</ul>\n<p><code>git checkout [-b] [&lt;本地分支名&gt;] [&lt;远程分支名&gt;]/[&lt;本地分支名&gt;]</code></p>\n<ul>\n<li>效果: 创建远程分支到本地分支</li>\n</ul>\n<h3 id=\"II-提交\"><a href=\"#II-提交\" class=\"headerlink\" title=\"II. 提交:\"></a>II. 提交:</h3><p><code>git add [file]</code><br><code>git rm [file]</code></p>\n<ul>\n<li>效果: 将修改/删除添加到版本库中的<code>stage</code>的暂存区</li>\n</ul>\n<p><code>git commit -m [&lt;描述&gt;]</code></p>\n<ul>\n<li>效果: 把暂存区的内容提交到当前分支</li>\n</ul>\n<p><code>git push [&lt;远程库分支名&gt;] [&lt;本地分支名&gt;]</code></p>\n<ul>\n<li>效果: 把分支内容推到远程库相对应的分支上</li>\n</ul>\n<h5 id=\"合并\"><a href=\"#合并\" class=\"headerlink\" title=\"合并:\"></a>合并:</h5><blockquote>\n<p>推荐merge工具: <a href=\"https://gist.github.com/tony4d/3454372\">p4Merge</a></p>\n</blockquote>\n<p><code>git merge [&lt;目标分支&gt;]</code></p>\n<ul>\n<li>效果: 与目标分支合并(如果默认优先Fast-forward说明是快进模式（很快的合并）(ps: 该模式如果删掉分支，会丢掉分支信息))</li>\n</ul>\n<p><code>git merge --no-ff -m [&lt;描述&gt;]</code></p>\n<ul>\n<li>效果: 跳过Fast forward模式，保留版本库中分支结构(<code>git log --graph</code>)</li>\n</ul>\n<p><code>git fetch &lt;远程仓库名&gt; &lt;远程分支名&gt;(:本地新分支名)</code></p>\n<ul>\n<li>效果: 从远程的仓库(通常是<code>origin</code>)的分支下载最新版本到 本地的新的分支上，如果不提供默认:下载到 本地分支远程仓库/分支名 (例子: <code>origin/master</code>) 上。</li>\n</ul>\n<p><code>git fetch</code>和<code>git pull</code></p>\n<ul>\n<li>区别: <code>git pull</code> = <code>git fetch</code> + <code>git merge</code></li>\n</ul>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 以下命令等同于 git pull</div><div class=\"line\">git fetch origin <span class=\"keyword\">master</span></div><div class=\"line\"><span class=\"title\">git</span> merge origin/<span class=\"literal\">master</span></div></pre></td></tr></table></figure>\n<h5 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除:\"></a>删除:</h5><p><code>git branch -d [&lt;分支名&gt;]</code></p>\n<ul>\n<li>效果: 删除目标分支（<code>-D</code>大写D是强行删除（未进行merge就直接删除时使用））</li>\n</ul>\n<h5 id=\"撤销\"><a href=\"#撤销\" class=\"headerlink\" title=\"撤销:\"></a>撤销:</h5><p><code>git reset [&lt;版本参数&gt;] [&lt;文件名&gt;]</code></p>\n<ul>\n<li>效果: 从暂存区撤销某文件的提交</li>\n</ul>\n<p><code>git checkout -f</code></p>\n<ul>\n<li>效果: 撤销未提交的文件</li>\n</ul>\n<h3 id=\"III-状态\"><a href=\"#III-状态\" class=\"headerlink\" title=\"III. 状态:\"></a>III. 状态:</h3><p><code>git status</code></p>\n<ul>\n<li>效果: 显示状态</li>\n</ul>\n<p><code>git log -1</code></p>\n<ul>\n<li>效果: 查看最后一次提交</li>\n</ul>\n<p><code>git remote</code></p>\n<ul>\n<li>效果: 远程库信息(<code>-v</code>查看详情(fetch地址与push地址))</li>\n</ul>\n<p><code>git stash</code></p>\n<ul>\n<li>效果: 存储当前工作现场（通常用在:用于工作一半，想要切换分支的时候）</li>\n</ul>\n<h5 id=\"存储现场\"><a href=\"#存储现场\" class=\"headerlink\" title=\"存储现场:\"></a>存储现场:</h5><p><code>git stash list</code></p>\n<ul>\n<li>效果: 所有储存的工作现场列表</li>\n</ul>\n<p><code>git stash apply [&lt;现场id&gt;]</code></p>\n<ul>\n<li>效果: 应用现场id指定的现场</li>\n</ul>\n<p><code>git stash stop [&lt;现场id&gt;]</code></p>\n<ul>\n<li>效果: 删除现场id指定的现场</li>\n</ul>\n<p><code>git stash pop</code></p>\n<ul>\n<li>效果: 应用最早的现场，并删除它</li>\n</ul>\n<h3 id=\"IV-对比\"><a href=\"#IV-对比\" class=\"headerlink\" title=\"IV. 对比:\"></a>IV. 对比:</h3><p><code>git diff [&lt;文件名&gt;]</code></p>\n<h6 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展:\"></a>拓展:</h6><p><code>git diff HEAD -- [&lt;file&gt;]</code></p>\n<ul>\n<li>效果: 工作区和版本库分支里的最新版本对比</li>\n</ul>\n<h3 id=\"V-日志\"><a href=\"#V-日志\" class=\"headerlink\" title=\"V. 日志:\"></a>V. 日志:</h3><p><code>git log</code></p>\n<ul>\n<li>效果: 查看git日志</li>\n</ul>\n<p><code>git log -p</code></p>\n<ul>\n<li>效果: 查看git并且显示具体文件修改点</li>\n</ul>\n<p><code>git commite --amend -m [msg]</code></p>\n<ul>\n<li>效果: 修改上次提交的commit message</li>\n</ul>\n<h6 id=\"查看历史git命令（可以用来找commit-id）\"><a href=\"#查看历史git命令（可以用来找commit-id）\" class=\"headerlink\" title=\"查看历史git命令（可以用来找commit id）\"></a>查看历史git命令（可以用来找<code>commit id</code>）</h6><p><code>git reflog</code></p>\n<h6 id=\"简化\"><a href=\"#简化\" class=\"headerlink\" title=\"简化:\"></a>简化:</h6><p><code>git log --pretty=online</code></p>\n<h6 id=\"查看分支合并图\"><a href=\"#查看分支合并图\" class=\"headerlink\" title=\"查看分支合并图:\"></a>查看分支合并图:</h6><p><code>git log --graph</code></p>\n<h3 id=\"VI-回退代码\"><a href=\"#VI-回退代码\" class=\"headerlink\" title=\"VI. 回退代码:\"></a>VI. 回退代码:</h3><p><code>git reset --hard [commit id/版本参数]</code></p>\n<h6 id=\"版本参数定义\"><a href=\"#版本参数定义\" class=\"headerlink\" title=\"版本参数定义:\"></a>版本参数定义:</h6><p><code>HEAD</code>表示当前版本，上一个版本:<code>HEAD^</code>,上n个版本就是加n个<code>^</code>或者<code>HEAD~[n]</code></p>\n<h6 id=\"拓展-1\"><a href=\"#拓展-1\" class=\"headerlink\" title=\"拓展:\"></a>拓展:</h6><p><code>git checkout -- [&lt;文件名&gt;]</code></p>\n<ul>\n<li>效果:</li>\n</ul>\n<figure class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">如果 暂存区中有该文件:</div><div class=\"line\">\t替换为暂存区的.</div><div class=\"line\">否则:</div><div class=\"line\">\t替换为分支上的.</div></pre></td></tr></table></figure>\n<p><code>git reset HEAD [file]</code></p>\n<ul>\n<li>效果:  撤销<code>stage</code>暂存区中[file]文件的修改</li>\n</ul>\n<h3 id=\"VII-冲突\"><a href=\"#VII-冲突\" class=\"headerlink\" title=\"VII. 冲突\"></a>VII. 冲突</h3><p>修改好冲突文件后，直接重新提交即可.</p>\n<p>冲突文件一般的表示：</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</div><div class=\"line\"><span class=\"section\">Head 的内容</div><div class=\"line\">=======</span></div><div class=\"line\">分支的内容</div><div class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;分支名&gt;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>强烈推荐mergetool: <a href=\"https://gist.github.com/tony4d/3454372\">p4merge</a></p>\n</blockquote>\n<h3 id=\"VIII-同步远程\"><a href=\"#VIII-同步远程\" class=\"headerlink\" title=\"VIII. 同步远程\"></a>VIII. 同步远程</h3><p><code>git pull</code></p>\n<ul>\n<li>效果: 同步远程库（如果提示<code>no tracking information</code>，说明本地分支与远程分支的链接关系没有创建，用命令<code>git branch --set-upstream [&lt;本地分支名&gt;] [&lt;远程分支名&gt;]/[&lt;本地分支名&gt;]</code>进行创建链接）</li>\n</ul>\n<h3 id=\"IX-标签\"><a href=\"#IX-标签\" class=\"headerlink\" title=\"IX. 标签\"></a>IX. 标签</h3><h5 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建:\"></a>创建:</h5><p><code>git tag [&lt;标签名&gt;] [&lt;commit id&gt;]</code></p>\n<ul>\n<li>效果: 给对应commit id打上标签，如果不提供comit id，默认给最新一次提交打上标签</li>\n</ul>\n<p><code>git tag -a [&lt;标签名&gt;] -m [&lt;标签描述&gt;] [&lt;commit id&gt;]</code></p>\n<ul>\n<li><p>效果: 给对应commit id打上标签，并给标签加上了描述，如果不提供comit id，默认给最新一次提交打上标签<br><code>git tag -s [&lt;标签名&gt;] -m [&lt;标签描述&gt;] [&lt;commit id&gt;]</code></p>\n</li>\n<li><p>效果: 给对应commit id打上标签，并给标签加上了描述，并且加上PGP签名，如果不提供comit id，默认给最新一次提交打上标签</p>\n</li>\n</ul>\n<h5 id=\"显示\"><a href=\"#显示\" class=\"headerlink\" title=\"显示:\"></a>显示:</h5><p><code>git tag</code></p>\n<ul>\n<li>效果: 查看所有标签</li>\n</ul>\n<p><code>git show [&lt;标签名&gt;]</code></p>\n<ul>\n<li>效果: 显示标签那次提交的信息</li>\n</ul>\n<h5 id=\"删除-1\"><a href=\"#删除-1\" class=\"headerlink\" title=\"删除:\"></a>删除:</h5><p><code>git tag -d [&lt;标签名&gt;]</code></p>\n<ul>\n<li>效果: 删除标签</li>\n</ul>\n<h5 id=\"远程-1\"><a href=\"#远程-1\" class=\"headerlink\" title=\"远程:\"></a>远程:</h5><blockquote>\n<p><a href=\"http://stackoverflow.com/questions/5195859/push-a-tag-to-a-remote-repository-using-git\">Push a tag to a remote repository using Git?</a></p>\n<p><a href=\"https://nathanhoad.net/how-to-delete-a-remote-git-tag\">How to: Delete a remote Git tag</a></p>\n</blockquote>\n<p><code>git push [&lt;远端仓库名&gt;] [&lt;标签名&gt;]</code></p>\n<ul>\n<li>效果: 将标签推送到远程库分支</li>\n</ul>\n<p><code>git push [&lt;远程库分支名&gt;] --tags</code></p>\n<ul>\n<li>效果: 将本地所有标签推送到远程库分支</li>\n</ul>\n<p><code>git push [&lt;远端仓库名&gt;] :refs/tags/[&lt;标签名&gt;]</code></p>\n<ul>\n<li>效果: 将删除的标签同步到远程库分支</li>\n</ul>\n<h2 id=\"X-子模块\"><a href=\"#X-子模块\" class=\"headerlink\" title=\"X. 子模块\"></a>X. 子模块</h2><blockquote>\n<p><a href=\"https://segmentfault.com/a/1190000003076028\">使用Git Submodule管理子模块</a></p>\n</blockquote>\n<h4 id=\"1-添加子模块\"><a href=\"#1-添加子模块\" class=\"headerlink\" title=\"1. 添加子模块:\"></a>1. 添加子模块:</h4><figure class=\"highlight fsharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 添加外部项目为当前项目的子模块, 添加完后，会配置到`.gitmodules`内</span></div><div class=\"line\">git submodule add <span class=\"meta\">[&lt;远程库地址&gt;]</span> <span class=\"meta\">[&lt;存储本地路径&gt;]</span></div><div class=\"line\"><span class=\"comment\">// 添加 .gitmodules 与 新拉下来的子模块文件夹 到 stage.</span></div><div class=\"line\">git add .gitmodules <span class=\"meta\">[&lt;子模块目录&gt;]</span></div><div class=\"line\"><span class=\"comment\">// 提交对子模块文件的添加</span></div><div class=\"line\">git commit -m <span class=\"string\">\"[&lt;描述&gt;]\"</span></div><div class=\"line\"><span class=\"comment\">// 完成子模块添加</span></div><div class=\"line\">git submodule init</div></pre></td></tr></table></figure>\n<h4 id=\"2-修改子模块\"><a href=\"#2-修改子模块\" class=\"headerlink\" title=\"2. 修改子模块\"></a>2. 修改子模块</h4><figure class=\"highlight fsharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd <span class=\"meta\">[&lt;子模块目录&gt;]</span>/</div><div class=\"line\"><span class=\"comment\">// 修改子模块中的文件-&gt;提交对子模块中的文件的修改-&gt;推到远端</span></div><div class=\"line\">...</div><div class=\"line\"><span class=\"comment\">// 回到父目录</span></div><div class=\"line\">cd ..</div><div class=\"line\"><span class=\"comment\">// 提交子模块中的修改-&gt;推到远端</span></div></pre></td></tr></table></figure>\n<h4 id=\"3-更新子模块\"><a href=\"#3-更新子模块\" class=\"headerlink\" title=\"3. 更新子模块\"></a>3. 更新子模块</h4><h5 id=\"方式一\"><a href=\"#方式一\" class=\"headerlink\" title=\"方式一:\"></a>方式一:</h5><p>在父项目目录下运行: <code>git submodule foreach git pull</code></p>\n<h5 id=\"方式二\"><a href=\"#方式二\" class=\"headerlink\" title=\"方式二:\"></a>方式二:</h5><p>进入对应的子项目目录: <code>git pull</code></p>\n<h4 id=\"4-拉取存在子模块的项目\"><a href=\"#4-拉取存在子模块的项目\" class=\"headerlink\" title=\"4. 拉取存在子模块的项目\"></a>4. 拉取存在子模块的项目</h4><h5 id=\"方式一-1\"><a href=\"#方式一-1\" class=\"headerlink\" title=\"方式一:\"></a>方式一:</h5><p>在父项目目录下运行: <code>git clone [&lt;远程库地址&gt;] --recursive</code></p>\n<h5 id=\"方式二-1\"><a href=\"#方式二-1\" class=\"headerlink\" title=\"方式二:\"></a>方式二:</h5><figure class=\"highlight fsharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 先clone父项目</span></div><div class=\"line\">git clone <span class=\"meta\">[&lt;远程库地址&gt;]</span></div><div class=\"line\">cd <span class=\"meta\">[&lt;子模块目录&gt;]</span></div><div class=\"line\">git submodule init</div><div class=\"line\"><span class=\"comment\">// 拉取子模块 配置文件中的所有子模块文件</span></div><div class=\"line\">git submodule update</div></pre></td></tr></table></figure>\n<h4 id=\"5-删除项目中的子模块\"><a href=\"#5-删除项目中的子模块\" class=\"headerlink\" title=\"5. 删除项目中的子模块\"></a>5. 删除项目中的子模块</h4><figure class=\"highlight fsharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git rm --cached <span class=\"meta\">[&lt;子模块目录&gt;]</span></div><div class=\"line\">rm -rf <span class=\"meta\">[&lt;子模块目录]</div><div class=\"line\">// 编辑 .gitmodules 删除其中对于要删除的子模块相关的内容</div><div class=\"line\">// 提交对应的修改即可</span></div></pre></td></tr></table></figure>\n<h2 id=\"XI-其他需要注意的\"><a href=\"#XI-其他需要注意的\" class=\"headerlink\" title=\"XI. 其他需要注意的\"></a>XI. 其他需要注意的</h2><h4 id=\"1-由于Mac下文件名大小不敏感，造成git下如果改了名字，git不识别有变化，因此改名字需要使用下面命令\"><a href=\"#1-由于Mac下文件名大小不敏感，造成git下如果改了名字，git不识别有变化，因此改名字需要使用下面命令\" class=\"headerlink\" title=\"1. 由于Mac下文件名大小不敏感，造成git下如果改了名字，git不识别有变化，因此改名字需要使用下面命令:\"></a>1. 由于Mac下文件名大小不敏感，造成git下如果改了名字，git不识别有变化，因此改名字需要使用下面命令:</h4><p><code>git mv --force myfile MyFile</code></p>\n<h4 id=\"2-如果需要修改提交过的历史用户资料\"><a href=\"#2-如果需要修改提交过的历史用户资料\" class=\"headerlink\" title=\"2. 如果需要修改提交过的历史用户资料\"></a>2. 如果需要修改提交过的历史用户资料</h4><p><a href=\"https://help.github.com/articles/changing-author-info/\">Changing author info</a></p>\n<h4 id=\"3-修改Commit-Message\"><a href=\"#3-修改Commit-Message\" class=\"headerlink\" title=\"3. 修改Commit Message\"></a>3. 修改Commit Message</h4><blockquote>\n<p>当然若修改的那个Commit已经在远端，需要<code>git push --force</code>覆盖远端。</p>\n</blockquote>\n<ul>\n<li>如果只是修改最后一条Commit Message: <code>git commit --amend</code></li>\n<li>如果需要修改更早之前的一些Commit Message: <code>git rebase -i [&lt;Commit Id&gt;]</code></li>\n</ul>\n<h1 id=\"Git-配置\"><a href=\"#Git-配置\" class=\"headerlink\" title=\"Git 配置\"></a>Git 配置</h1><h5 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件:\"></a>配置文件:</h5><p>局部: 项目工作区<code>.git/config</code></p>\n<p>全局: <code>~/.gitconfig</code></p>\n<h5 id=\"命令配置\"><a href=\"#命令配置\" class=\"headerlink\" title=\"命令配置:\"></a>命令配置:</h5><p><code>git config --global color.ui true</code></p>\n<ul>\n<li>效果: Git会适应当地显示不同颜色</li>\n</ul>\n<h5 id=\"忽略特殊文件\"><a href=\"#忽略特殊文件\" class=\"headerlink\" title=\"忽略特殊文件:\"></a>忽略特殊文件:</h5><p>在项目工作区根目录下直接创建<code>.gitignore</code>文件然后望里面添加文件名即可</p>\n<p>可以参考: <a href=\"https://github.com/github/gitignore\">https://github.com/github/gitignore</a></p>\n<h5 id=\"别名配置\"><a href=\"#别名配置\" class=\"headerlink\" title=\"别名配置:\"></a>别名配置:</h5><p><code>git config --global alias.[&lt;别名&gt;] [对应命令]</code></p>\n<p>推荐别名:</p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"keyword\">config</span> --<span class=\"keyword\">global</span> <span class=\"keyword\">alias</span><span class=\"variable\">.co</span> checkout</div><div class=\"line\">git <span class=\"keyword\">config</span> --<span class=\"keyword\">global</span> <span class=\"keyword\">alias</span><span class=\"variable\">.br</span> branch</div><div class=\"line\">git <span class=\"keyword\">config</span> --<span class=\"keyword\">global</span> <span class=\"keyword\">alias</span><span class=\"variable\">.ci</span> commit</div><div class=\"line\">git <span class=\"keyword\">config</span> --<span class=\"keyword\">global</span> <span class=\"keyword\">alias</span><span class=\"variable\">.st</span> status</div><div class=\"line\">git <span class=\"keyword\">config</span> --<span class=\"keyword\">global</span> <span class=\"keyword\">alias</span><span class=\"variable\">.unstage</span> 'reset HEAD'</div><div class=\"line\">git <span class=\"keyword\">config</span> --<span class=\"keyword\">global</span> <span class=\"keyword\">alias</span><span class=\"variable\">.last</span> 'log -<span class=\"number\">1</span>'</div><div class=\"line\">git <span class=\"keyword\">config</span> --<span class=\"keyword\">global</span> <span class=\"keyword\">alias</span><span class=\"variable\">.lg</span> <span class=\"string\">\"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"XII-GitHub\"><a href=\"#XII-GitHub\" class=\"headerlink\" title=\"XII. GitHub\"></a>XII. GitHub</h2><h3 id=\"fork同步问题\"><a href=\"#fork同步问题\" class=\"headerlink\" title=\"fork同步问题\"></a>fork同步问题</h3><blockquote>\n<p>A项目是B项目的fork，如果同步B项目的更新:</p>\n</blockquote>\n<h4 id=\"1-先把B-clone到本地\"><a href=\"#1-先把B-clone到本地\" class=\"headerlink\" title=\"1. 先把B clone到本地\"></a>1. 先把B clone到本地</h4><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"keyword\">clone</span> <span class=\"title\">B_REPOSITORY_URL</span></div></pre></td></tr></table></figure>\n<h4 id=\"2-再cd到本地B的目录，把A作为一个remote加到本地的B中（一般命名为upstream）\"><a href=\"#2-再cd到本地B的目录，把A作为一个remote加到本地的B中（一般命名为upstream）\" class=\"headerlink\" title=\"2. 再cd到本地B的目录，把A作为一个remote加到本地的B中（一般命名为upstream）\"></a>2. 再cd到本地B的目录，把A作为一个remote加到本地的B中（一般命名为upstream）</h4><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote <span class=\"keyword\">add</span><span class=\"bash\"> upstream A_REPOSITORY_URL</span></div></pre></td></tr></table></figure>\n<h4 id=\"3-pull另一个A的remote（upstream）的相应分支（比如master）就可以\"><a href=\"#3-pull另一个A的remote（upstream）的相应分支（比如master）就可以\" class=\"headerlink\" title=\"3. pull另一个A的remote（upstream）的相应分支（比如master）就可以\"></a>3. pull另一个A的remote（upstream）的相应分支（比如master）就可以</h4><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git pull upstream <span class=\"literal\">master</span></div></pre></td></tr></table></figure>\n<h4 id=\"4-最后push回github的B-REPOSITORY\"><a href=\"#4-最后push回github的B-REPOSITORY\" class=\"headerlink\" title=\"4. 最后push回github的B_REPOSITORY\"></a>4. 最后push回github的B_REPOSITORY</h4><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">push</span> <span class=\"built_in\">origin</span> master</div></pre></td></tr></table></figure>\n<h2 id=\"XIII-其他疑难问题\"><a href=\"#XIII-其他疑难问题\" class=\"headerlink\" title=\"XIII. 其他疑难问题\"></a>XIII. 其他疑难问题</h2><p>调用<code>git fetch</code>的时候，出现:</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Auto packing <span class=\"keyword\">the</span> repository <span class=\"keyword\">in</span> background <span class=\"keyword\">for</span> optimum performance.</div><div class=\"line\">See <span class=\"string\">\"git help gc\"</span> <span class=\"keyword\">for</span> manual housekeeping.</div></pre></td></tr></table></figure>\n<p>你执行<code>git fack</code>会发现一堆的挂起的<code>dangling blob xxxxxxxxxxxxxxx</code></p>\n<p>此时只需要: <strong>gc</strong> 下 <code>git gc --prune=now</code></p>\n<hr>\n<ul>\n<li><a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\">Git教程</a></li>\n<li><a href=\"https://git-scm.com/book/zh/v1/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97\">6.6 Git 工具 - 子模块</a></li>\n<li><a href=\"http://blog.devtang.com/blog/2013/05/08/git-submodule-issues/\">Git Submodule的坑</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"Google 2015 Material Design Summit","date":"2015-04-20T20:05:03.000Z","_content":"\n> 会议主持人: Michael Yeung\n\n## I. 新制度\n#### New Review Process\n1. 发布前先人工审核(加速上架时间)\n2. 新分级制度(IARC)(5月前没做，就会列入未分级，甚至会被下架或找不到)\n    符合不同年龄层的app\n\n    1) 严禁app有root行为; 2) 不能自己升级; 3) 不允许应用内部的应用推荐（必须经过Google Play）\n\n\n<!--more-->\n## II. 应用质量\n\n#### 该做\n- **返回键:**\n    应该回到上个界面 ，上部分返回键(up)可以相同与不同。\n    Webview: back button: 返回上一页; up button(通常会更重一些): 返回上一个Activity\n\n- **正确支持ActionBar**\n    1) 推荐使用Google主题的 2) 推荐widget用 Android 标准的; 3) TabBar推荐放上面 4) 可以考虑不需要返回键(up); 5) 推荐不用右箭头 6) 不推荐使用弃用的一些UI（如：右下角三点推荐不用, 放在ActionBar右上角(overflow)）\n\n- **参考Android语言风格**\n    尽量简短、精简。\n\n- **在Tabs上支持滑动手势**\n    强烈建议\n\n\n#### 不该做的\n\n- 风格上不该模范平台上的用户体验（应该用Android的标准）\n- 不该使用其他平台的图标（应该用: `github`上Google有发布一些通用的图标）\n- 不该两个bar都放在下面，（应该分上bar与下bar）(上bar浏览、nav通常是下)\n- 不该使用 标记back buttons\n- 不应该使用`右箭头`按钮\n- 不应该(不建议)使用一些弃用的按钮(如底部的menu button)(Target SDK尽量高)\n\n\n## III. Android风格演进\n- 2011 年 所有Google的应用体验一致 Android(Holo)\n\n- 2014 年 新的Android设计语言 Android(MATERIAL DESIGN)([google.com/design](google.com/design))\n\n > 获得2014 UX Awards Gold Award Winner\n\n > 宗旨: 界面由电子的纸 z轴叠加而成\n\n```\n会叠加影子(**android.support.v7.cardview**带有md属性)\n高度可能根据交互变化\n用影子的深度来诠释当前内容的重要性(如dialog)）\n顶部黏合\n规范的字体大小、颜色深浅来呈现整体布局\n字体大小规范，google有给出建议\n字体类型也有建议(英文(**ROBOTO**))\n整体排版Android Studio给出排版工具\n颜色重要性(primary、primaryDark、accent)\nGoogle Api，给一张图片，会给出几种颜色\n有意义的动画（考虑动作的连接性）(交互反馈)(可以有一些调皮的动画(取悦用户))\n```\n\n## IV. Links\n\n- [Google Design](http://google.com/design)\n- [Google Developers Share Video](youtube.com/GoogleDevelopers)\n- [Android API](http://developer.android.com)\n- [Google Android Developers Blog](android-developers.blogspot.com)\n- [The Google I/O 2014 Android App](github.com/google/iosched)\n- [Instagram with Material Design concept is getting real - The Summary](http://frogermcs.github.io/Instagram-with-Material-Design-concept-is-getting-real-the-summary/)\n\n## V. Codelab\n\nGithub: [https://github.com/Jacksgong/Sunshine(Material Design 教程)](https://github.com/Jacksgong/Sunshine)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/Google-2015-Material-Design-Summit.md","raw":"title: Google 2015 Material Design Summit\ndate: 2015-04-21 04:05:03\npermalink: 2015/04/21/Google-2015-Material-Design-Summit\ntags:\n- Codelab\n- google\n- Android\n- 优化\n- Material Design\n\n---\n\n> 会议主持人: Michael Yeung\n\n## I. 新制度\n#### New Review Process\n1. 发布前先人工审核(加速上架时间)\n2. 新分级制度(IARC)(5月前没做，就会列入未分级，甚至会被下架或找不到)\n    符合不同年龄层的app\n\n    1) 严禁app有root行为; 2) 不能自己升级; 3) 不允许应用内部的应用推荐（必须经过Google Play）\n\n\n<!--more-->\n## II. 应用质量\n\n#### 该做\n- **返回键:**\n    应该回到上个界面 ，上部分返回键(up)可以相同与不同。\n    Webview: back button: 返回上一页; up button(通常会更重一些): 返回上一个Activity\n\n- **正确支持ActionBar**\n    1) 推荐使用Google主题的 2) 推荐widget用 Android 标准的; 3) TabBar推荐放上面 4) 可以考虑不需要返回键(up); 5) 推荐不用右箭头 6) 不推荐使用弃用的一些UI（如：右下角三点推荐不用, 放在ActionBar右上角(overflow)）\n\n- **参考Android语言风格**\n    尽量简短、精简。\n\n- **在Tabs上支持滑动手势**\n    强烈建议\n\n\n#### 不该做的\n\n- 风格上不该模范平台上的用户体验（应该用Android的标准）\n- 不该使用其他平台的图标（应该用: `github`上Google有发布一些通用的图标）\n- 不该两个bar都放在下面，（应该分上bar与下bar）(上bar浏览、nav通常是下)\n- 不该使用 标记back buttons\n- 不应该使用`右箭头`按钮\n- 不应该(不建议)使用一些弃用的按钮(如底部的menu button)(Target SDK尽量高)\n\n\n## III. Android风格演进\n- 2011 年 所有Google的应用体验一致 Android(Holo)\n\n- 2014 年 新的Android设计语言 Android(MATERIAL DESIGN)([google.com/design](google.com/design))\n\n > 获得2014 UX Awards Gold Award Winner\n\n > 宗旨: 界面由电子的纸 z轴叠加而成\n\n```\n会叠加影子(**android.support.v7.cardview**带有md属性)\n高度可能根据交互变化\n用影子的深度来诠释当前内容的重要性(如dialog)）\n顶部黏合\n规范的字体大小、颜色深浅来呈现整体布局\n字体大小规范，google有给出建议\n字体类型也有建议(英文(**ROBOTO**))\n整体排版Android Studio给出排版工具\n颜色重要性(primary、primaryDark、accent)\nGoogle Api，给一张图片，会给出几种颜色\n有意义的动画（考虑动作的连接性）(交互反馈)(可以有一些调皮的动画(取悦用户))\n```\n\n## IV. Links\n\n- [Google Design](http://google.com/design)\n- [Google Developers Share Video](youtube.com/GoogleDevelopers)\n- [Android API](http://developer.android.com)\n- [Google Android Developers Blog](android-developers.blogspot.com)\n- [The Google I/O 2014 Android App](github.com/google/iosched)\n- [Instagram with Material Design concept is getting real - The Summary](http://frogermcs.github.io/Instagram-with-Material-Design-concept-is-getting-real-the-summary/)\n\n## V. Codelab\n\nGithub: [https://github.com/Jacksgong/Sunshine(Material Design 教程)](https://github.com/Jacksgong/Sunshine)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2015/04/21/Google-2015-Material-Design-Summit","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66hs000k95buzhphtfkz","content":"<blockquote>\n<p>会议主持人: Michael Yeung</p>\n</blockquote>\n<h2 id=\"I-新制度\"><a href=\"#I-新制度\" class=\"headerlink\" title=\"I. 新制度\"></a>I. 新制度</h2><h4 id=\"New-Review-Process\"><a href=\"#New-Review-Process\" class=\"headerlink\" title=\"New Review Process\"></a>New Review Process</h4><ol>\n<li>发布前先人工审核(加速上架时间)</li>\n<li><p>新分级制度(IARC)(5月前没做，就会列入未分级，甚至会被下架或找不到)<br> 符合不同年龄层的app</p>\n<p> 1) 严禁app有root行为; 2) 不能自己升级; 3) 不允许应用内部的应用推荐（必须经过Google Play）</p>\n</li>\n</ol>\n<a id=\"more\"></a>\n<h2 id=\"II-应用质量\"><a href=\"#II-应用质量\" class=\"headerlink\" title=\"II. 应用质量\"></a>II. 应用质量</h2><h4 id=\"该做\"><a href=\"#该做\" class=\"headerlink\" title=\"该做\"></a>该做</h4><ul>\n<li><p><strong>返回键:</strong><br>  应该回到上个界面 ，上部分返回键(up)可以相同与不同。<br>  Webview: back button: 返回上一页; up button(通常会更重一些): 返回上一个Activity</p>\n</li>\n<li><p><strong>正确支持ActionBar</strong><br>  1) 推荐使用Google主题的 2) 推荐widget用 Android 标准的; 3) TabBar推荐放上面 4) 可以考虑不需要返回键(up); 5) 推荐不用右箭头 6) 不推荐使用弃用的一些UI（如：右下角三点推荐不用, 放在ActionBar右上角(overflow)）</p>\n</li>\n<li><p><strong>参考Android语言风格</strong><br>  尽量简短、精简。</p>\n</li>\n<li><p><strong>在Tabs上支持滑动手势</strong><br>  强烈建议</p>\n</li>\n</ul>\n<h4 id=\"不该做的\"><a href=\"#不该做的\" class=\"headerlink\" title=\"不该做的\"></a>不该做的</h4><ul>\n<li>风格上不该模范平台上的用户体验（应该用Android的标准）</li>\n<li>不该使用其他平台的图标（应该用: <code>github</code>上Google有发布一些通用的图标）</li>\n<li>不该两个bar都放在下面，（应该分上bar与下bar）(上bar浏览、nav通常是下)</li>\n<li>不该使用 标记back buttons</li>\n<li>不应该使用<code>右箭头</code>按钮</li>\n<li>不应该(不建议)使用一些弃用的按钮(如底部的menu button)(Target SDK尽量高)</li>\n</ul>\n<h2 id=\"III-Android风格演进\"><a href=\"#III-Android风格演进\" class=\"headerlink\" title=\"III. Android风格演进\"></a>III. Android风格演进</h2><ul>\n<li><p>2011 年 所有Google的应用体验一致 Android(Holo)</p>\n</li>\n<li><p>2014 年 新的Android设计语言 Android(MATERIAL DESIGN)(<a href=\"google.com/design\">google.com/design</a>)</p>\n<blockquote>\n<p>获得2014 UX Awards Gold Award Winner</p>\n<p>宗旨: 界面由电子的纸 z轴叠加而成</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">会叠加影子<span class=\"comment\">(**android.support.v7.cardview**带有md属性)</span></div><div class=\"line\">高度可能根据交互变化</div><div class=\"line\">用影子的深度来诠释当前内容的重要性(如dialog)）</div><div class=\"line\">顶部黏合</div><div class=\"line\">规范的字体大小、颜色深浅来呈现整体布局</div><div class=\"line\">字体大小规范，google有给出建议</div><div class=\"line\">字体类型也有建议(英文(**ROBOTO**))</div><div class=\"line\">整体排版Android Studio给出排版工具</div><div class=\"line\">颜色重要性(primary、primaryDark、accent)</div><div class=\"line\">Google Api，给一张图片，会给出几种颜色</div><div class=\"line\">有意义的动画（考虑动作的连接性）(交互反馈)(可以有一些调皮的动画(取悦用户))</div></pre></td></tr></table></figure>\n<h2 id=\"IV-Links\"><a href=\"#IV-Links\" class=\"headerlink\" title=\"IV. Links\"></a>IV. Links</h2><ul>\n<li><a href=\"http://google.com/design\" target=\"_blank\" rel=\"external\">Google Design</a></li>\n<li><a href=\"youtube.com/GoogleDevelopers\">Google Developers Share Video</a></li>\n<li><a href=\"http://developer.android.com\" target=\"_blank\" rel=\"external\">Android API</a></li>\n<li><a href=\"android-developers.blogspot.com\">Google Android Developers Blog</a></li>\n<li><a href=\"github.com/google/iosched\">The Google I/O 2014 Android App</a></li>\n<li><a href=\"http://frogermcs.github.io/Instagram-with-Material-Design-concept-is-getting-real-the-summary/\" target=\"_blank\" rel=\"external\">Instagram with Material Design concept is getting real - The Summary</a></li>\n</ul>\n<h2 id=\"V-Codelab\"><a href=\"#V-Codelab\" class=\"headerlink\" title=\"V. Codelab\"></a>V. Codelab</h2><p>Github: <a href=\"https://github.com/Jacksgong/Sunshine\" target=\"_blank\" rel=\"external\">https://github.com/Jacksgong/Sunshine(Material Design 教程)</a></p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>会议主持人: Michael Yeung</p>\n</blockquote>\n<h2 id=\"I-新制度\"><a href=\"#I-新制度\" class=\"headerlink\" title=\"I. 新制度\"></a>I. 新制度</h2><h4 id=\"New-Review-Process\"><a href=\"#New-Review-Process\" class=\"headerlink\" title=\"New Review Process\"></a>New Review Process</h4><ol>\n<li>发布前先人工审核(加速上架时间)</li>\n<li><p>新分级制度(IARC)(5月前没做，就会列入未分级，甚至会被下架或找不到)<br> 符合不同年龄层的app</p>\n<p> 1) 严禁app有root行为; 2) 不能自己升级; 3) 不允许应用内部的应用推荐（必须经过Google Play）</p>\n</li>\n</ol>","more":"<h2 id=\"II-应用质量\"><a href=\"#II-应用质量\" class=\"headerlink\" title=\"II. 应用质量\"></a>II. 应用质量</h2><h4 id=\"该做\"><a href=\"#该做\" class=\"headerlink\" title=\"该做\"></a>该做</h4><ul>\n<li><p><strong>返回键:</strong><br>  应该回到上个界面 ，上部分返回键(up)可以相同与不同。<br>  Webview: back button: 返回上一页; up button(通常会更重一些): 返回上一个Activity</p>\n</li>\n<li><p><strong>正确支持ActionBar</strong><br>  1) 推荐使用Google主题的 2) 推荐widget用 Android 标准的; 3) TabBar推荐放上面 4) 可以考虑不需要返回键(up); 5) 推荐不用右箭头 6) 不推荐使用弃用的一些UI（如：右下角三点推荐不用, 放在ActionBar右上角(overflow)）</p>\n</li>\n<li><p><strong>参考Android语言风格</strong><br>  尽量简短、精简。</p>\n</li>\n<li><p><strong>在Tabs上支持滑动手势</strong><br>  强烈建议</p>\n</li>\n</ul>\n<h4 id=\"不该做的\"><a href=\"#不该做的\" class=\"headerlink\" title=\"不该做的\"></a>不该做的</h4><ul>\n<li>风格上不该模范平台上的用户体验（应该用Android的标准）</li>\n<li>不该使用其他平台的图标（应该用: <code>github</code>上Google有发布一些通用的图标）</li>\n<li>不该两个bar都放在下面，（应该分上bar与下bar）(上bar浏览、nav通常是下)</li>\n<li>不该使用 标记back buttons</li>\n<li>不应该使用<code>右箭头</code>按钮</li>\n<li>不应该(不建议)使用一些弃用的按钮(如底部的menu button)(Target SDK尽量高)</li>\n</ul>\n<h2 id=\"III-Android风格演进\"><a href=\"#III-Android风格演进\" class=\"headerlink\" title=\"III. Android风格演进\"></a>III. Android风格演进</h2><ul>\n<li><p>2011 年 所有Google的应用体验一致 Android(Holo)</p>\n</li>\n<li><p>2014 年 新的Android设计语言 Android(MATERIAL DESIGN)(<a href=\"google.com/design\">google.com/design</a>)</p>\n<blockquote>\n<p>获得2014 UX Awards Gold Award Winner</p>\n<p>宗旨: 界面由电子的纸 z轴叠加而成</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">会叠加影子<span class=\"comment\">(**android.support.v7.cardview**带有md属性)</div><div class=\"line\">高度可能根据交互变化</div><div class=\"line\">用影子的深度来诠释当前内容的重要性(如dialog)）</div><div class=\"line\">顶部黏合</div><div class=\"line\">规范的字体大小、颜色深浅来呈现整体布局</div><div class=\"line\">字体大小规范，google有给出建议</div><div class=\"line\">字体类型也有建议(英文(**ROBOTO**)</span>)</div><div class=\"line\">整体排版Android Studio给出排版工具</div><div class=\"line\">颜色重要性(primary、primaryDark、accent)</div><div class=\"line\">Google Api，给一张图片，会给出几种颜色</div><div class=\"line\">有意义的动画（考虑动作的连接性）(交互反馈)(可以有一些调皮的动画(取悦用户))</div></pre></td></tr></table></figure>\n<h2 id=\"IV-Links\"><a href=\"#IV-Links\" class=\"headerlink\" title=\"IV. Links\"></a>IV. Links</h2><ul>\n<li><a href=\"http://google.com/design\">Google Design</a></li>\n<li><a href=\"youtube.com/GoogleDevelopers\">Google Developers Share Video</a></li>\n<li><a href=\"http://developer.android.com\">Android API</a></li>\n<li><a href=\"android-developers.blogspot.com\">Google Android Developers Blog</a></li>\n<li><a href=\"github.com/google/iosched\">The Google I/O 2014 Android App</a></li>\n<li><a href=\"http://frogermcs.github.io/Instagram-with-Material-Design-concept-is-getting-real-the-summary/\">Instagram with Material Design concept is getting real - The Summary</a></li>\n</ul>\n<h2 id=\"V-Codelab\"><a href=\"#V-Codelab\" class=\"headerlink\" title=\"V. Codelab\"></a>V. Codelab</h2><p>Github: <a href=\"https://github.com/Jacksgong/Sunshine\">https://github.com/Jacksgong/Sunshine(Material Design 教程)</a></p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"Java 8 Lambda","date":"2015-04-28T00:35:03.000Z","_content":"\n#### 发布时间\nJava SE 8在2013年6月13的版本中已经完全了全部的功能\n\n## I. Lambda表达式\n> 函数式接口(functional interface): 只包含一个抽象方法的接口(如`Runnable`只有run()这么一个方法)\n\n\n\n<!--more-->\n#### 举例\n`Runnable`:\n\n```\nnew Thread(new Runnable() {\n        public void run() {\n            System.out.println(\"Run!\");\n        }\n    }).start();\n```\n\n```\n//由形式参数和方法体两部分组成，中间通过“->”分隔\nnew Thread(() -> {\n        System.out.println(\"Run!\");\n    }).start();\n```\n\n\n\n使用: `java.util.function.Function`方式:\n\n```\npublic class CollectionUtils {\n    public static  List map(List input, Function processor) {\n        ArrayList result = new ArrayList();\n        for (T obj : input) {\n            result.add(processor.apply(obj));\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List input = Arrays.asList(new String[] {\"apple\", \"orange\", \"pear\"});\n        List lengths = CollectionUtils.map(input, (String v) -> v.length());\n        List uppercases = CollectionUtils.map(input, (String v) -> v.toUpperCase());\n    }\n}\n```\n\n## II. 方法引用\n\n> 可以在不调用某个方法的情况下引用一个方法\n\n#### 举例\n\n```\nList input = Arrays.asList(new String[] {\"apple\", \"orange\", \"pear\"});\n\n//Lambda表达式方式\ninput.forEach((v) -> System.out.println(v));\n\n// 方法引用 方式\ninput.forEach(System.out::println);\n```\n\n## III. 构造方法引用\n\n> 可以在不创建对象的情况下引用一个构造方法\n\n#### 举例\n\n```\nList dateValues = Arrays.asList(new Long[] { 0L, 1000L});\n\nList dates = CollectionUtils.map(dateValues, Date::new);\n```\n\n## IV. 接口默认方法\n\n> 通过新的`default`关键词来修饰，为接口提供默认方法\n\n#### 解决问题\n\n1. **接口演化问题：** 通过新增默认接口方法来搞定新增的功能，而无需新增方法，在所有的实现类中改，当然，默认方法支持复写\n\n2. **实现多继承的行为：** 一个类实现多个接口，就包含了默认方法的方法体\n\n#### 举例\n\n```\n//一个简单的货币转换接口，假设需要调用的是第三方服务\npublic interface CurrencyConverter {\n    BigDecimal convert(Currency from, Currency to, BigDecimal amount);\n}\n```\n\n```\n//当第三方提供了新的批量处理的功能，允许在一次请求中同事转换多个数值\n//这里就可以直接通过 新增一个默认方法来解决\npublic interface CurrencyConverter {\n    BigDecimal convert(Currency from, Currency to, BigDecimal amount);\n\n    default List convert(Currency from, Currency to, List amounts) {\n        List result = new ArrayList();\n            for (BigDecimal amount : amounts) {\n                result.add(convert(from, to, amount));\n            }\n            return result;\n    }\n}\n```\n\n## V. 推荐\n\nAndroid开发中，推荐使用[retrolambda](https://github.com/evant/gradle-retrolambda)这个gradle插件。\n\n----\n> 整理自: [Java SE 8: Lambda表达式](http://www.infoq.com/cn/articles/Java-se-8-lambda)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/Java-8-Lambda.md","raw":"title: Java 8 Lambda\ndate: 2015-04-28 08:35:03\npermalink: 2015/04/28/Java-8-Lambda\ntags:\n- java\n- Lambda\n- Android\n- 优化\n\n---\n\n#### 发布时间\nJava SE 8在2013年6月13的版本中已经完全了全部的功能\n\n## I. Lambda表达式\n> 函数式接口(functional interface): 只包含一个抽象方法的接口(如`Runnable`只有run()这么一个方法)\n\n\n\n<!--more-->\n#### 举例\n`Runnable`:\n\n```\nnew Thread(new Runnable() {\n        public void run() {\n            System.out.println(\"Run!\");\n        }\n    }).start();\n```\n\n```\n//由形式参数和方法体两部分组成，中间通过“->”分隔\nnew Thread(() -> {\n        System.out.println(\"Run!\");\n    }).start();\n```\n\n\n\n使用: `java.util.function.Function`方式:\n\n```\npublic class CollectionUtils {\n    public static  List map(List input, Function processor) {\n        ArrayList result = new ArrayList();\n        for (T obj : input) {\n            result.add(processor.apply(obj));\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List input = Arrays.asList(new String[] {\"apple\", \"orange\", \"pear\"});\n        List lengths = CollectionUtils.map(input, (String v) -> v.length());\n        List uppercases = CollectionUtils.map(input, (String v) -> v.toUpperCase());\n    }\n}\n```\n\n## II. 方法引用\n\n> 可以在不调用某个方法的情况下引用一个方法\n\n#### 举例\n\n```\nList input = Arrays.asList(new String[] {\"apple\", \"orange\", \"pear\"});\n\n//Lambda表达式方式\ninput.forEach((v) -> System.out.println(v));\n\n// 方法引用 方式\ninput.forEach(System.out::println);\n```\n\n## III. 构造方法引用\n\n> 可以在不创建对象的情况下引用一个构造方法\n\n#### 举例\n\n```\nList dateValues = Arrays.asList(new Long[] { 0L, 1000L});\n\nList dates = CollectionUtils.map(dateValues, Date::new);\n```\n\n## IV. 接口默认方法\n\n> 通过新的`default`关键词来修饰，为接口提供默认方法\n\n#### 解决问题\n\n1. **接口演化问题：** 通过新增默认接口方法来搞定新增的功能，而无需新增方法，在所有的实现类中改，当然，默认方法支持复写\n\n2. **实现多继承的行为：** 一个类实现多个接口，就包含了默认方法的方法体\n\n#### 举例\n\n```\n//一个简单的货币转换接口，假设需要调用的是第三方服务\npublic interface CurrencyConverter {\n    BigDecimal convert(Currency from, Currency to, BigDecimal amount);\n}\n```\n\n```\n//当第三方提供了新的批量处理的功能，允许在一次请求中同事转换多个数值\n//这里就可以直接通过 新增一个默认方法来解决\npublic interface CurrencyConverter {\n    BigDecimal convert(Currency from, Currency to, BigDecimal amount);\n\n    default List convert(Currency from, Currency to, List amounts) {\n        List result = new ArrayList();\n            for (BigDecimal amount : amounts) {\n                result.add(convert(from, to, amount));\n            }\n            return result;\n    }\n}\n```\n\n## V. 推荐\n\nAndroid开发中，推荐使用[retrolambda](https://github.com/evant/gradle-retrolambda)这个gradle插件。\n\n----\n> 整理自: [Java SE 8: Lambda表达式](http://www.infoq.com/cn/articles/Java-se-8-lambda)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2015/04/28/Java-8-Lambda","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66ht000m95buiic3n9x9","content":"<h4 id=\"发布时间\"><a href=\"#发布时间\" class=\"headerlink\" title=\"发布时间\"></a>发布时间</h4><p>Java SE 8在2013年6月13的版本中已经完全了全部的功能</p>\n<h2 id=\"I-Lambda表达式\"><a href=\"#I-Lambda表达式\" class=\"headerlink\" title=\"I. Lambda表达式\"></a>I. Lambda表达式</h2><blockquote>\n<p>函数式接口(functional interface): 只包含一个抽象方法的接口(如<code>Runnable</code>只有run()这么一个方法)</p>\n</blockquote>\n<a id=\"more\"></a>\n<h4 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h4><p><code>Runnable</code>:</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"built_in\">run</span>() &#123;</div><div class=\"line\">            System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"Run!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;).start();</div></pre></td></tr></table></figure>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"regexp\">//</span>由形式参数和方法体两部分组成，中间通过“-&gt;”分隔</div><div class=\"line\"><span class=\"keyword\">new</span> Thread(<span class=\"function\"><span class=\"params\">()</span> -&gt;</span> &#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"Run!\"</span>);</div><div class=\"line\">    &#125;).start();</div></pre></td></tr></table></figure>\n<p>使用: <code>java.util.function.Function</code>方式:</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CollectionUtils</span> </span>&#123;</div><div class=\"line\">    public <span class=\"keyword\">static</span>  <span class=\"built_in\">List</span> map(<span class=\"built_in\">List</span> input, <span class=\"built_in\">Function</span> processor) &#123;</div><div class=\"line\">        ArrayList result = <span class=\"keyword\">new</span> ArrayList();</div><div class=\"line\">        <span class=\"keyword\">for</span> (T obj : input) &#123;</div><div class=\"line\">            result.add(processor.apply(obj));</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"built_in\">String</span>[] args) &#123;</div><div class=\"line\">        <span class=\"built_in\">List</span> input = Arrays.asList(<span class=\"keyword\">new</span> <span class=\"built_in\">String</span>[] &#123;<span class=\"string\">\"apple\"</span>, <span class=\"string\">\"orange\"</span>, <span class=\"string\">\"pear\"</span>&#125;);</div><div class=\"line\">        <span class=\"built_in\">List</span> lengths = CollectionUtils.map(input, (<span class=\"built_in\">String</span> v) -&gt; v.length());</div><div class=\"line\">        <span class=\"built_in\">List</span> uppercases = CollectionUtils.map(input, (<span class=\"built_in\">String</span> v) -&gt; v.toUpperCase());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"II-方法引用\"><a href=\"#II-方法引用\" class=\"headerlink\" title=\"II. 方法引用\"></a>II. 方法引用</h2><blockquote>\n<p>可以在不调用某个方法的情况下引用一个方法</p>\n</blockquote>\n<h4 id=\"举例-1\"><a href=\"#举例-1\" class=\"headerlink\" title=\"举例\"></a>举例</h4><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">List</span> <span class=\"keyword\">input</span> = Arrays.asList(new String[] &#123;<span class=\"string\">\"apple\"</span>, <span class=\"string\">\"orange\"</span>, <span class=\"string\">\"pear\"</span>&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Lambda表达式方式</span></div><div class=\"line\"><span class=\"keyword\">input</span>.<span class=\"keyword\">forEach</span>((v) -&gt; System.<span class=\"keyword\">out</span>.println(v));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 方法引用 方式</span></div><div class=\"line\"><span class=\"keyword\">input</span>.<span class=\"keyword\">forEach</span>(System.<span class=\"keyword\">out</span>::println);</div></pre></td></tr></table></figure>\n<h2 id=\"III-构造方法引用\"><a href=\"#III-构造方法引用\" class=\"headerlink\" title=\"III. 构造方法引用\"></a>III. 构造方法引用</h2><blockquote>\n<p>可以在不创建对象的情况下引用一个构造方法</p>\n</blockquote>\n<h4 id=\"举例-2\"><a href=\"#举例-2\" class=\"headerlink\" title=\"举例\"></a>举例</h4><figure class=\"highlight mathematica\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">List</span> dateValues = <span class=\"keyword\">Arrays</span>.asList(new Long[] &#123; 0L, 1000L&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">List</span> dates = CollectionUtils.map(dateValues, <span class=\"keyword\">Date</span>::new);</div></pre></td></tr></table></figure>\n<h2 id=\"IV-接口默认方法\"><a href=\"#IV-接口默认方法\" class=\"headerlink\" title=\"IV. 接口默认方法\"></a>IV. 接口默认方法</h2><blockquote>\n<p>通过新的<code>default</code>关键词来修饰，为接口提供默认方法</p>\n</blockquote>\n<h4 id=\"解决问题\"><a href=\"#解决问题\" class=\"headerlink\" title=\"解决问题\"></a>解决问题</h4><ol>\n<li><p><strong>接口演化问题：</strong> 通过新增默认接口方法来搞定新增的功能，而无需新增方法，在所有的实现类中改，当然，默认方法支持复写</p>\n</li>\n<li><p><strong>实现多继承的行为：</strong> 一个类实现多个接口，就包含了默认方法的方法体</p>\n</li>\n</ol>\n<h4 id=\"举例-3\"><a href=\"#举例-3\" class=\"headerlink\" title=\"举例\"></a>举例</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//一个简单的货币转换接口，假设需要调用的是第三方服务</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">CurrencyConverter</span> &#123;</div><div class=\"line\">    <span class=\"function\">BigDecimal <span class=\"title\">convert</span>(<span class=\"params\">Currency <span class=\"keyword\">from</span>, Currency to, BigDecimal amount</span>)</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//当第三方提供了新的批量处理的功能，允许在一次请求中同事转换多个数值</span></div><div class=\"line\"><span class=\"comment\">//这里就可以直接通过 新增一个默认方法来解决</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">CurrencyConverter</span> &#123;</div><div class=\"line\">    <span class=\"function\">BigDecimal <span class=\"title\">convert</span>(<span class=\"params\">Currency <span class=\"keyword\">from</span>, Currency to, BigDecimal amount</span>)</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">default</span> List <span class=\"title\">convert</span>(<span class=\"params\">Currency <span class=\"keyword\">from</span>, Currency to, List amounts</span>) </span>&#123;</div><div class=\"line\">        List result = <span class=\"keyword\">new</span> ArrayList();</div><div class=\"line\">            <span class=\"keyword\">for</span> (BigDecimal amount : amounts) &#123;</div><div class=\"line\">                result.<span class=\"keyword\">add</span>(convert(<span class=\"keyword\">from</span>, to, amount));</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"V-推荐\"><a href=\"#V-推荐\" class=\"headerlink\" title=\"V. 推荐\"></a>V. 推荐</h2><p>Android开发中，推荐使用<a href=\"https://github.com/evant/gradle-retrolambda\" target=\"_blank\" rel=\"external\">retrolambda</a>这个gradle插件。</p>\n<hr>\n<blockquote>\n<p>整理自: <a href=\"http://www.infoq.com/cn/articles/Java-se-8-lambda\" target=\"_blank\" rel=\"external\">Java SE 8: Lambda表达式</a></p>\n</blockquote>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<h4 id=\"发布时间\"><a href=\"#发布时间\" class=\"headerlink\" title=\"发布时间\"></a>发布时间</h4><p>Java SE 8在2013年6月13的版本中已经完全了全部的功能</p>\n<h2 id=\"I-Lambda表达式\"><a href=\"#I-Lambda表达式\" class=\"headerlink\" title=\"I. Lambda表达式\"></a>I. Lambda表达式</h2><blockquote>\n<p>函数式接口(functional interface): 只包含一个抽象方法的接口(如<code>Runnable</code>只有run()这么一个方法)</p>\n</blockquote>","more":"<h4 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h4><p><code>Runnable</code>:</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"built_in\">run</span>() &#123;</div><div class=\"line\">            System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"Run!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;).start();</div></pre></td></tr></table></figure>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"regexp\">//</span>由形式参数和方法体两部分组成，中间通过“-&gt;”分隔</div><div class=\"line\"><span class=\"keyword\">new</span> Thread(<span class=\"function\"><span class=\"params\">()</span> -&gt;</span> &#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"Run!\"</span>);</div><div class=\"line\">    &#125;).start();</div></pre></td></tr></table></figure>\n<p>使用: <code>java.util.function.Function</code>方式:</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CollectionUtils</span> </span>&#123;</div><div class=\"line\">    public <span class=\"keyword\">static</span>  <span class=\"built_in\">List</span> map(<span class=\"built_in\">List</span> input, <span class=\"built_in\">Function</span> processor) &#123;</div><div class=\"line\">        ArrayList result = <span class=\"keyword\">new</span> ArrayList();</div><div class=\"line\">        <span class=\"keyword\">for</span> (T obj : input) &#123;</div><div class=\"line\">            result.add(processor.apply(obj));</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"built_in\">String</span>[] args) &#123;</div><div class=\"line\">        <span class=\"built_in\">List</span> input = Arrays.asList(<span class=\"keyword\">new</span> <span class=\"built_in\">String</span>[] &#123;<span class=\"string\">\"apple\"</span>, <span class=\"string\">\"orange\"</span>, <span class=\"string\">\"pear\"</span>&#125;);</div><div class=\"line\">        <span class=\"built_in\">List</span> lengths = CollectionUtils.map(input, (<span class=\"built_in\">String</span> v) -&gt; v.length());</div><div class=\"line\">        <span class=\"built_in\">List</span> uppercases = CollectionUtils.map(input, (<span class=\"built_in\">String</span> v) -&gt; v.toUpperCase());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"II-方法引用\"><a href=\"#II-方法引用\" class=\"headerlink\" title=\"II. 方法引用\"></a>II. 方法引用</h2><blockquote>\n<p>可以在不调用某个方法的情况下引用一个方法</p>\n</blockquote>\n<h4 id=\"举例-1\"><a href=\"#举例-1\" class=\"headerlink\" title=\"举例\"></a>举例</h4><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">List</span> <span class=\"keyword\">input</span> = Arrays.asList(new String[] &#123;<span class=\"string\">\"apple\"</span>, <span class=\"string\">\"orange\"</span>, <span class=\"string\">\"pear\"</span>&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Lambda表达式方式</span></div><div class=\"line\"><span class=\"keyword\">input</span>.<span class=\"keyword\">forEach</span>((v) -&gt; System.<span class=\"keyword\">out</span>.println(v));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 方法引用 方式</span></div><div class=\"line\"><span class=\"keyword\">input</span>.<span class=\"keyword\">forEach</span>(System.<span class=\"keyword\">out</span>::println);</div></pre></td></tr></table></figure>\n<h2 id=\"III-构造方法引用\"><a href=\"#III-构造方法引用\" class=\"headerlink\" title=\"III. 构造方法引用\"></a>III. 构造方法引用</h2><blockquote>\n<p>可以在不创建对象的情况下引用一个构造方法</p>\n</blockquote>\n<h4 id=\"举例-2\"><a href=\"#举例-2\" class=\"headerlink\" title=\"举例\"></a>举例</h4><figure class=\"highlight mathematica\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">List</span> dateValues = <span class=\"keyword\">Arrays</span>.asList(new Long[] &#123; 0L, 1000L&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">List</span> dates = CollectionUtils.map(dateValues, <span class=\"keyword\">Date</span>::new);</div></pre></td></tr></table></figure>\n<h2 id=\"IV-接口默认方法\"><a href=\"#IV-接口默认方法\" class=\"headerlink\" title=\"IV. 接口默认方法\"></a>IV. 接口默认方法</h2><blockquote>\n<p>通过新的<code>default</code>关键词来修饰，为接口提供默认方法</p>\n</blockquote>\n<h4 id=\"解决问题\"><a href=\"#解决问题\" class=\"headerlink\" title=\"解决问题\"></a>解决问题</h4><ol>\n<li><p><strong>接口演化问题：</strong> 通过新增默认接口方法来搞定新增的功能，而无需新增方法，在所有的实现类中改，当然，默认方法支持复写</p>\n</li>\n<li><p><strong>实现多继承的行为：</strong> 一个类实现多个接口，就包含了默认方法的方法体</p>\n</li>\n</ol>\n<h4 id=\"举例-3\"><a href=\"#举例-3\" class=\"headerlink\" title=\"举例\"></a>举例</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//一个简单的货币转换接口，假设需要调用的是第三方服务</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">CurrencyConverter</span> &#123;</div><div class=\"line\">    <span class=\"function\">BigDecimal <span class=\"title\">convert</span>(<span class=\"params\">Currency <span class=\"keyword\">from</span>, Currency to, BigDecimal amount</span>)</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//当第三方提供了新的批量处理的功能，允许在一次请求中同事转换多个数值</span></div><div class=\"line\"><span class=\"comment\">//这里就可以直接通过 新增一个默认方法来解决</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">CurrencyConverter</span> &#123;</div><div class=\"line\">    <span class=\"function\">BigDecimal <span class=\"title\">convert</span>(<span class=\"params\">Currency <span class=\"keyword\">from</span>, Currency to, BigDecimal amount</span>)</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">default</span> List <span class=\"title\">convert</span>(<span class=\"params\">Currency <span class=\"keyword\">from</span>, Currency to, List amounts</span>) </span>&#123;</div><div class=\"line\">        List result = <span class=\"keyword\">new</span> ArrayList();</div><div class=\"line\">            <span class=\"keyword\">for</span> (BigDecimal amount : amounts) &#123;</div><div class=\"line\">                result.<span class=\"keyword\">add</span>(convert(<span class=\"keyword\">from</span>, to, amount));</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"V-推荐\"><a href=\"#V-推荐\" class=\"headerlink\" title=\"V. 推荐\"></a>V. 推荐</h2><p>Android开发中，推荐使用<a href=\"https://github.com/evant/gradle-retrolambda\">retrolambda</a>这个gradle插件。</p>\n<hr>\n<blockquote>\n<p>整理自: <a href=\"http://www.infoq.com/cn/articles/Java-se-8-lambda\">Java SE 8: Lambda表达式</a></p>\n</blockquote>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"LeakCanary使用总结","date":"2015-05-18T00:35:03.000Z","_content":"\n## I. 使用\n\n`build.gradle`中配置:\n\n```\ndependencies {\n   debugCompile 'com.squareup.leakcanary:leakcanary-android:1.3'\n   releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3'\n }\n```\n\n`Application` class中配置:\n\n```\npublic class ExampleApplication extends Application {\n\n  @Override public void onCreate() {\n    super.onCreate();\n    LeakCanary.install(this);\n  }\n}\n```\n\n## II. 初始化与原理\n\n### 根据`build.gradle`配置:\n\ndebug包走：`com.squareup.leakcanary:leakcanary-android:1.3`\nrelease包走: `com.squareup.leakcanary:leakcanary-android-no-op:1.3`\n\n### 分别解析\n\n#### release\n\nrelease包，`LeakCanary.install(this)`就是返回了一个`RefWatcher#DISABLED`，而`RefWatcher#DISABLE`中返回的都是空方法。\n\n<!--more-->\n\n#### debug包\n\n```\npublic static RefWatcher install(Application application,\n      Class<? extends AbstractAnalysisResultService> listenerServiceClass) {\n      // listenerServiceClass = DisplayLeakService.class\n    if (isInAnalyzerProcess(application)) {\n      return RefWatcher.DISABLED;\n    }\n    enableDisplayLeakActivity(application);\n    HeapDump.Listener heapDumpListener =\n        new ServiceHeapDumpListener(application, listenerServiceClass);\n    RefWatcher refWatcher = androidWatcher(heapDumpListener);\n    ActivityRefWatcher.installOnIcsPlus(application, refWatcher);\n    return refWatcher;\n  }\n```\n\n1. 如果是`HeapAnalyzerService`的进程（非app主的进程），返回一个DISABLED。否则创建一个Android默认配置的RefWatcher\n2. 创建一个`Application#ActivityLifecycleCallbacks`，并且注册到当前`Application`上（由于该Api是在api 14才有的，因此低版本没有注册），主要是为了，在所有的`Activity#onDestroy`执行的最后通过调用`RefWatcher#watch(Object)`来检测`Activity`是否出现了泄漏。\n\n#### `RefWatcher#watch(Object o)`基本原理\n\n\n1. 先促发一次GC\n2. 如果`o`依然存在，dump heap到本地\n3. dump完成后启动`HeapAnalyzerService`服务(如果不存在)（单独进程）\n4. 在`HeapAnalyzerService`中读取本地dump下来的文件，使用`HAHA`库进行分析。\n5. 如果检测到内存泄漏，将结果返回给`DisplayLeakService`服务，并且显示通知\n\n## III. 定位检测情况\n\n### 推荐log关键字\n\n```\nleak | hprof | analysis\n```\n\n### 下面是几个案例\n\n```\nadb logcat | grep -e \"leak\" -e \"hprof\" -e \"analysis\"\n```\n\n![](/img/leakcanary-1.png)\n\n![](/img/leakcanary-2.png)\n\n![](/img/leakcanary-3.png)\n\n\n## IV. 注意点\n\n1. release千万不要带上(带no-op包)，由于GC耗时，因此会带来：安装包增加、应用onDestory由于gc带来耗时、由于新建的分析进程带来内存开销，由于大量的计算分析，带来的CPU资源的占用。\n2. Android api 14以下的`LeakCanary#install(Application):RefWatcher`是不会自动注册对`Activity`的检测的，需要自己实现`BaseActivity`并且在`Activity#onDestroy`的地方主动调用`RefWatcher#watch(Object)`进行检测\n3. 检测是比较慢的，其中涉及i/o，涉及大量的计算分析，通常在20s~1分钟左右，根当前cpu资源占用情况有关。\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/LeakCanary使用总结.md","raw":"title: LeakCanary使用总结\ndate: 2015-05-18 08:35:03\npermalink: 2015/05/18/LeakCanary使用总结\ntags:\n- LeakCanary\n- 内存泄漏\n- 使用\n- Android\n- 优化\n\n---\n\n## I. 使用\n\n`build.gradle`中配置:\n\n```\ndependencies {\n   debugCompile 'com.squareup.leakcanary:leakcanary-android:1.3'\n   releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3'\n }\n```\n\n`Application` class中配置:\n\n```\npublic class ExampleApplication extends Application {\n\n  @Override public void onCreate() {\n    super.onCreate();\n    LeakCanary.install(this);\n  }\n}\n```\n\n## II. 初始化与原理\n\n### 根据`build.gradle`配置:\n\ndebug包走：`com.squareup.leakcanary:leakcanary-android:1.3`\nrelease包走: `com.squareup.leakcanary:leakcanary-android-no-op:1.3`\n\n### 分别解析\n\n#### release\n\nrelease包，`LeakCanary.install(this)`就是返回了一个`RefWatcher#DISABLED`，而`RefWatcher#DISABLE`中返回的都是空方法。\n\n<!--more-->\n\n#### debug包\n\n```\npublic static RefWatcher install(Application application,\n      Class<? extends AbstractAnalysisResultService> listenerServiceClass) {\n      // listenerServiceClass = DisplayLeakService.class\n    if (isInAnalyzerProcess(application)) {\n      return RefWatcher.DISABLED;\n    }\n    enableDisplayLeakActivity(application);\n    HeapDump.Listener heapDumpListener =\n        new ServiceHeapDumpListener(application, listenerServiceClass);\n    RefWatcher refWatcher = androidWatcher(heapDumpListener);\n    ActivityRefWatcher.installOnIcsPlus(application, refWatcher);\n    return refWatcher;\n  }\n```\n\n1. 如果是`HeapAnalyzerService`的进程（非app主的进程），返回一个DISABLED。否则创建一个Android默认配置的RefWatcher\n2. 创建一个`Application#ActivityLifecycleCallbacks`，并且注册到当前`Application`上（由于该Api是在api 14才有的，因此低版本没有注册），主要是为了，在所有的`Activity#onDestroy`执行的最后通过调用`RefWatcher#watch(Object)`来检测`Activity`是否出现了泄漏。\n\n#### `RefWatcher#watch(Object o)`基本原理\n\n\n1. 先促发一次GC\n2. 如果`o`依然存在，dump heap到本地\n3. dump完成后启动`HeapAnalyzerService`服务(如果不存在)（单独进程）\n4. 在`HeapAnalyzerService`中读取本地dump下来的文件，使用`HAHA`库进行分析。\n5. 如果检测到内存泄漏，将结果返回给`DisplayLeakService`服务，并且显示通知\n\n## III. 定位检测情况\n\n### 推荐log关键字\n\n```\nleak | hprof | analysis\n```\n\n### 下面是几个案例\n\n```\nadb logcat | grep -e \"leak\" -e \"hprof\" -e \"analysis\"\n```\n\n![](/img/leakcanary-1.png)\n\n![](/img/leakcanary-2.png)\n\n![](/img/leakcanary-3.png)\n\n\n## IV. 注意点\n\n1. release千万不要带上(带no-op包)，由于GC耗时，因此会带来：安装包增加、应用onDestory由于gc带来耗时、由于新建的分析进程带来内存开销，由于大量的计算分析，带来的CPU资源的占用。\n2. Android api 14以下的`LeakCanary#install(Application):RefWatcher`是不会自动注册对`Activity`的检测的，需要自己实现`BaseActivity`并且在`Activity#onDestroy`的地方主动调用`RefWatcher#watch(Object)`进行检测\n3. 检测是比较慢的，其中涉及i/o，涉及大量的计算分析，通常在20s~1分钟左右，根当前cpu资源占用情况有关。\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2015/05/18/LeakCanary使用总结","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66hu000n95bulcmw8ne0","content":"<h2 id=\"I-使用\"><a href=\"#I-使用\" class=\"headerlink\" title=\"I. 使用\"></a>I. 使用</h2><p><code>build.gradle</code>中配置:</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">dependencies</span> &#123;</div><div class=\"line\">   <span class=\"attribute\">debugCompile</span> <span class=\"string\">'com.squareup.leakcanary:leakcanary-android:1.3'</span></div><div class=\"line\">   releaseCompile <span class=\"string\">'com.squareup.leakcanary:leakcanary-android-no-op:1.3'</span></div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p><code>Application</code> class中配置:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExampleApplication</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span> public void onCreate() &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate();</div><div class=\"line\">    <span class=\"type\">LeakCanary</span>.install(<span class=\"keyword\">this</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"II-初始化与原理\"><a href=\"#II-初始化与原理\" class=\"headerlink\" title=\"II. 初始化与原理\"></a>II. 初始化与原理</h2><h3 id=\"根据build-gradle配置\"><a href=\"#根据build-gradle配置\" class=\"headerlink\" title=\"根据build.gradle配置:\"></a>根据<code>build.gradle</code>配置:</h3><p>debug包走：<code>com.squareup.leakcanary:leakcanary-android:1.3</code><br>release包走: <code>com.squareup.leakcanary:leakcanary-android-no-op:1.3</code></p>\n<h3 id=\"分别解析\"><a href=\"#分别解析\" class=\"headerlink\" title=\"分别解析\"></a>分别解析</h3><h4 id=\"release\"><a href=\"#release\" class=\"headerlink\" title=\"release\"></a>release</h4><p>release包，<code>LeakCanary.install(this)</code>就是返回了一个<code>RefWatcher#DISABLED</code>，而<code>RefWatcher#DISABLE</code>中返回的都是空方法。</p>\n<a id=\"more\"></a>\n<h4 id=\"debug包\"><a href=\"#debug包\" class=\"headerlink\" title=\"debug包\"></a>debug包</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> RefWatcher install(Application application,</div><div class=\"line\">      <span class=\"class\"><span class=\"keyword\">Class</span>&lt;? <span class=\"keyword\">extends</span> <span class=\"title\">AbstractAnalysisResultService</span>&gt; <span class=\"title\">listenerServiceClass</span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// listenerServiceClass = DisplayLeakService.class</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (isInAnalyzerProcess(application)) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> RefWatcher.DISABLED;</div><div class=\"line\">    &#125;</div><div class=\"line\">    enableDisplayLeakActivity(application);</div><div class=\"line\">    HeapDump.Listener heapDumpListener =</div><div class=\"line\">        <span class=\"keyword\">new</span> ServiceHeapDumpListener(application, listenerServiceClass);</div><div class=\"line\">    RefWatcher refWatcher = androidWatcher(heapDumpListener);</div><div class=\"line\">    ActivityRefWatcher.installOnIcsPlus(application, refWatcher);</div><div class=\"line\">    <span class=\"keyword\">return</span> refWatcher;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>如果是<code>HeapAnalyzerService</code>的进程（非app主的进程），返回一个DISABLED。否则创建一个Android默认配置的RefWatcher</li>\n<li>创建一个<code>Application#ActivityLifecycleCallbacks</code>，并且注册到当前<code>Application</code>上（由于该Api是在api 14才有的，因此低版本没有注册），主要是为了，在所有的<code>Activity#onDestroy</code>执行的最后通过调用<code>RefWatcher#watch(Object)</code>来检测<code>Activity</code>是否出现了泄漏。</li>\n</ol>\n<h4 id=\"RefWatcher-watch-Object-o-基本原理\"><a href=\"#RefWatcher-watch-Object-o-基本原理\" class=\"headerlink\" title=\"RefWatcher#watch(Object o)基本原理\"></a><code>RefWatcher#watch(Object o)</code>基本原理</h4><ol>\n<li>先促发一次GC</li>\n<li>如果<code>o</code>依然存在，dump heap到本地</li>\n<li>dump完成后启动<code>HeapAnalyzerService</code>服务(如果不存在)（单独进程）</li>\n<li>在<code>HeapAnalyzerService</code>中读取本地dump下来的文件，使用<code>HAHA</code>库进行分析。</li>\n<li>如果检测到内存泄漏，将结果返回给<code>DisplayLeakService</code>服务，并且显示通知</li>\n</ol>\n<h2 id=\"III-定位检测情况\"><a href=\"#III-定位检测情况\" class=\"headerlink\" title=\"III. 定位检测情况\"></a>III. 定位检测情况</h2><h3 id=\"推荐log关键字\"><a href=\"#推荐log关键字\" class=\"headerlink\" title=\"推荐log关键字\"></a>推荐log关键字</h3><figure class=\"highlight coq\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">leak | <span class=\"type\">hprof</span> | <span class=\"type\">analysis</span></div></pre></td></tr></table></figure>\n<h3 id=\"下面是几个案例\"><a href=\"#下面是几个案例\" class=\"headerlink\" title=\"下面是几个案例\"></a>下面是几个案例</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb logcat | grep <span class=\"_\">-e</span> <span class=\"string\">\"leak\"</span> <span class=\"_\">-e</span> <span class=\"string\">\"hprof\"</span> <span class=\"_\">-e</span> <span class=\"string\">\"analysis\"</span></div></pre></td></tr></table></figure>\n<p><img src=\"/img/leakcanary-1.png\" alt=\"\"></p>\n<p><img src=\"/img/leakcanary-2.png\" alt=\"\"></p>\n<p><img src=\"/img/leakcanary-3.png\" alt=\"\"></p>\n<h2 id=\"IV-注意点\"><a href=\"#IV-注意点\" class=\"headerlink\" title=\"IV. 注意点\"></a>IV. 注意点</h2><ol>\n<li>release千万不要带上(带no-op包)，由于GC耗时，因此会带来：安装包增加、应用onDestory由于gc带来耗时、由于新建的分析进程带来内存开销，由于大量的计算分析，带来的CPU资源的占用。</li>\n<li>Android api 14以下的<code>LeakCanary#install(Application):RefWatcher</code>是不会自动注册对<code>Activity</code>的检测的，需要自己实现<code>BaseActivity</code>并且在<code>Activity#onDestroy</code>的地方主动调用<code>RefWatcher#watch(Object)</code>进行检测</li>\n<li>检测是比较慢的，其中涉及i/o，涉及大量的计算分析，通常在20s~1分钟左右，根当前cpu资源占用情况有关。</li>\n</ol>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<h2 id=\"I-使用\"><a href=\"#I-使用\" class=\"headerlink\" title=\"I. 使用\"></a>I. 使用</h2><p><code>build.gradle</code>中配置:</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">dependencies</span> &#123;</div><div class=\"line\">   <span class=\"attribute\">debugCompile</span> <span class=\"string\">'com.squareup.leakcanary:leakcanary-android:1.3'</span></div><div class=\"line\">   releaseCompile <span class=\"string\">'com.squareup.leakcanary:leakcanary-android-no-op:1.3'</span></div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p><code>Application</code> class中配置:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExampleApplication</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span> public void onCreate() &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate();</div><div class=\"line\">    <span class=\"type\">LeakCanary</span>.install(<span class=\"keyword\">this</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"II-初始化与原理\"><a href=\"#II-初始化与原理\" class=\"headerlink\" title=\"II. 初始化与原理\"></a>II. 初始化与原理</h2><h3 id=\"根据build-gradle配置\"><a href=\"#根据build-gradle配置\" class=\"headerlink\" title=\"根据build.gradle配置:\"></a>根据<code>build.gradle</code>配置:</h3><p>debug包走：<code>com.squareup.leakcanary:leakcanary-android:1.3</code><br>release包走: <code>com.squareup.leakcanary:leakcanary-android-no-op:1.3</code></p>\n<h3 id=\"分别解析\"><a href=\"#分别解析\" class=\"headerlink\" title=\"分别解析\"></a>分别解析</h3><h4 id=\"release\"><a href=\"#release\" class=\"headerlink\" title=\"release\"></a>release</h4><p>release包，<code>LeakCanary.install(this)</code>就是返回了一个<code>RefWatcher#DISABLED</code>，而<code>RefWatcher#DISABLE</code>中返回的都是空方法。</p>","more":"<h4 id=\"debug包\"><a href=\"#debug包\" class=\"headerlink\" title=\"debug包\"></a>debug包</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> RefWatcher install(Application application,</div><div class=\"line\">      <span class=\"class\"><span class=\"keyword\">Class</span>&lt;? <span class=\"keyword\">extends</span> <span class=\"title\">AbstractAnalysisResultService</span>&gt; <span class=\"title\">listenerServiceClass</span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// listenerServiceClass = DisplayLeakService.class</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (isInAnalyzerProcess(application)) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> RefWatcher.DISABLED;</div><div class=\"line\">    &#125;</div><div class=\"line\">    enableDisplayLeakActivity(application);</div><div class=\"line\">    HeapDump.Listener heapDumpListener =</div><div class=\"line\">        <span class=\"keyword\">new</span> ServiceHeapDumpListener(application, listenerServiceClass);</div><div class=\"line\">    RefWatcher refWatcher = androidWatcher(heapDumpListener);</div><div class=\"line\">    ActivityRefWatcher.installOnIcsPlus(application, refWatcher);</div><div class=\"line\">    <span class=\"keyword\">return</span> refWatcher;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>如果是<code>HeapAnalyzerService</code>的进程（非app主的进程），返回一个DISABLED。否则创建一个Android默认配置的RefWatcher</li>\n<li>创建一个<code>Application#ActivityLifecycleCallbacks</code>，并且注册到当前<code>Application</code>上（由于该Api是在api 14才有的，因此低版本没有注册），主要是为了，在所有的<code>Activity#onDestroy</code>执行的最后通过调用<code>RefWatcher#watch(Object)</code>来检测<code>Activity</code>是否出现了泄漏。</li>\n</ol>\n<h4 id=\"RefWatcher-watch-Object-o-基本原理\"><a href=\"#RefWatcher-watch-Object-o-基本原理\" class=\"headerlink\" title=\"RefWatcher#watch(Object o)基本原理\"></a><code>RefWatcher#watch(Object o)</code>基本原理</h4><ol>\n<li>先促发一次GC</li>\n<li>如果<code>o</code>依然存在，dump heap到本地</li>\n<li>dump完成后启动<code>HeapAnalyzerService</code>服务(如果不存在)（单独进程）</li>\n<li>在<code>HeapAnalyzerService</code>中读取本地dump下来的文件，使用<code>HAHA</code>库进行分析。</li>\n<li>如果检测到内存泄漏，将结果返回给<code>DisplayLeakService</code>服务，并且显示通知</li>\n</ol>\n<h2 id=\"III-定位检测情况\"><a href=\"#III-定位检测情况\" class=\"headerlink\" title=\"III. 定位检测情况\"></a>III. 定位检测情况</h2><h3 id=\"推荐log关键字\"><a href=\"#推荐log关键字\" class=\"headerlink\" title=\"推荐log关键字\"></a>推荐log关键字</h3><figure class=\"highlight coq\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">leak | <span class=\"type\">hprof</span> | <span class=\"type\">analysis</span></div></pre></td></tr></table></figure>\n<h3 id=\"下面是几个案例\"><a href=\"#下面是几个案例\" class=\"headerlink\" title=\"下面是几个案例\"></a>下面是几个案例</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb logcat | grep <span class=\"_\">-e</span> <span class=\"string\">\"leak\"</span> <span class=\"_\">-e</span> <span class=\"string\">\"hprof\"</span> <span class=\"_\">-e</span> <span class=\"string\">\"analysis\"</span></div></pre></td></tr></table></figure>\n<p><img src=\"/img/leakcanary-1.png\" alt=\"\"></p>\n<p><img src=\"/img/leakcanary-2.png\" alt=\"\"></p>\n<p><img src=\"/img/leakcanary-3.png\" alt=\"\"></p>\n<h2 id=\"IV-注意点\"><a href=\"#IV-注意点\" class=\"headerlink\" title=\"IV. 注意点\"></a>IV. 注意点</h2><ol>\n<li>release千万不要带上(带no-op包)，由于GC耗时，因此会带来：安装包增加、应用onDestory由于gc带来耗时、由于新建的分析进程带来内存开销，由于大量的计算分析，带来的CPU资源的占用。</li>\n<li>Android api 14以下的<code>LeakCanary#install(Application):RefWatcher</code>是不会自动注册对<code>Activity</code>的检测的，需要自己实现<code>BaseActivity</code>并且在<code>Activity#onDestroy</code>的地方主动调用<code>RefWatcher#watch(Object)</code>进行检测</li>\n<li>检测是比较慢的，其中涉及i/o，涉及大量的计算分析，通常在20s~1分钟左右，根当前cpu资源占用情况有关。</li>\n</ol>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"Leakcanary Square的一款Android/Java内存泄漏检测工具","date":"2015-05-12T00:35:03.000Z","_content":"\n> git地址: [square/leakcanary](https://github.com/square/leakcanary)\n\n# git readme:\n\n**中文翻译[@Jacksgong](https://github.com/Jacksgong/leakcanary)**\n\n> 一款Android与Java的内存检测库\n\n> \"A small leak will sink a gret ship.\" - Benjamin Franklin\n\n<!--more-->\n\n![](https://raw.githubusercontent.com/Jacksgong/leakcanary/master/assets/screenshot.png)\n\n## I. 开始\n\n`build.gradle` 中的配置:\n\n```\ndependencies {\n   debugCompile 'com.squareup.leakcanary:leakcanary-android:1.3'\n   releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3'\n }\n```\n\n`Application` class 中的配置:\n\n```\npublic class ExampleApplication extends Application {\n\n  @Override public void onCreate() {\n    super.onCreate();\n    LeakCanary.install(this);\n  }\n}\n```\n\n**这样就可以了!** 在debug包中activity内存泄漏将会被监听到，并且将会自动显示一个通知(show a notification)。\n\n\n## II. 为什么要使用LeakCanary?\n\n好问题! 我们已经在 [博客文章](http://squ.re/leakcanary)中回答了这个问题。\n\n## III. 应该怎么使用它呢？\n\n使用`RefWatcher`来监听引用是否已经被GC:\n\n```\nRefWatcher refWatcher = {...};\n\n// We expect schrodingerCat to be gone soon (or not), let's watch it.\n// 我们预测shcrodingerCat很快会销毁(也许不会)，这里监听了它.\nrefWatcher.watch(schrodingerCat);\n```\n`LeakCanary.install()`会返回预设的`RefWatcher`，并且安装了一个`ActivityRefWatcher`来监听activity调用了`Activity.onDestroy()`以后的泄漏。\n\n```\npublic class ExampleApplication extends Application {\n\n  public static RefWatcher getRefWatcher(Context context) {\n    ExampleApplication application = (ExampleApplication) context.getApplicationContext();\n    return application.refWatcher;\n  }\n\n  private RefWatcher refWatcher;\n\n  @Override public void onCreate() {\n    super.onCreate();\n    refWatcher = LeakCanary.install(this);\n  }\n}\n```\n你也可以使用`RefWatcher`来监听fragment的泄漏:\n\n```\npublic abstract class BaseFragment extends Fragment {\n\n  @Override public void onDestroy() {\n    super.onDestroy();\n    RefWatcher refWatcher = ExampleApplication.getRefWatcher(getActivity());\n    refWatcher.watch(this);\n  }\n}\n```\n\n## IV. LeakCanary是如何工作的呢?\n\n1. `RefWatcher.watch()`创建了一个[`KeyedWeakReference`](https://github.com/square/leakcanary/blob/master/library/leakcanary-watcher/src/main/java/com/squareup/leakcanary/KeyedWeakReference.java)到了监控的对象。\n2. 之后，在后台线程，它检查引用是否已经被释放，如果没有它将促发一次GC。\n3. 如果引用依然没有被释放，它会导出heap到存储在app文件系统的`a.hprof`文件。\n4. `HeapAnalyzerService`在单独的一个进程被启动，并且`HeapAnalyzer`使用[`HAHA`](https://github.com/square/haha)来解析heap。\n5. `HeapAnalyzer`由于采用了单独的reference key，在heap dump中找到了`KeyedWeakReference`并且定位到泄漏的引用。\n6. `HeapAnalyzer`通过计算出到GC根部最短路径的强引用来决定是否这里是泄漏了，并且建立导致泄漏的引用关系链。\n7. 结果将传回在app进程的`DisplayLeakService`，并且显示泄漏通知。\n\n## V. 我应该如何拷贝leak trace呢？\n\n可以在Logcat中看到leak trace:\n\n```\nIn com.example.leakcanary:1.0:1 com.example.leakcanary.MainActivity has leaked:\n* GC ROOT thread java.lang.Thread.<Java Local> (named 'AsyncTask #1')\n* references com.example.leakcanary.MainActivity$3.this$0 (anonymous class extends android.os.AsyncTask)\n* leaks com.example.leakcanary.MainActivity instance\n\n* Reference Key: e71f3bf5-d786-4145-8539-584afaecad1d\n* Device: Genymotion generic Google Nexus 6 - 5.1.0 - API 22 - 1440x2560 vbox86p\n* Android Version: 5.1 API: 22\n```\n\n也可以从**action bar menu**分享leak trace与heap dump文件。\n\n## VI. 应该如何解决内存泄漏呢?\n\n一旦拥有了leak trace，就可以分析出哪个路径中的引用不应该存在，然后分析出引用依然存在的原因。通常情况是注册的监听没有反注册，或者是`close()`方法没有调用，或者是一个未知的类((通常也是没有句柄的对象，就纯new出来执行了某方法)hold住了外部类的引用。如果你分析不出你代码中的问题，别放弃，可以在[Stack Overflow question](http://stackoverflow.com/questions/tagged/leakcanary)(使用`leakcanary` 标签)中创建相关问题。\n\n## VII. 我的泄漏是因为执行Android SDK导致的！\n\n随着时间的推移，已经有一些已知的由于Android SDK的执行导致的内存泄漏得到了作为生厂商AOSP的修复。当发生这样的内存泄漏的时候，其实我们作为应用开发者能做的很少。对于这样的问题，LeakCanary已经有内建了一个忽略已知Android SDK泄漏的列表: [`AndroidExcludedRefs.java`](https://github.com/square/leakcanary/blob/master/library/leakcanary-android/src/main/java/com/squareup/leakcanary/AndroidExcludedRefs.java)。如果你发现了新的，请提供leak trace、reference key、设备版本与Android版来[创建问题](https://github.com/square/leakcanary/issues/new)，当然如果能够提供一个heap dump的文件连接更好。\n\n这对于**新发布的Android**来说是特别重要的，你有机会能够帮助尽早发现新的内存泄漏，使整个Android社区受益。\n\n开发版本的快照: [Sonatype's `snapshots` repository](https://oss.sonatype.org/content/repositories/snapshots/)。\n\n## VIII. 超出leak trace范围\n\n通常leak trace是不够的，还需要通过[MAT](http://eclipse.org/mat/)或者[YourKit](https://www.yourkit.com/)来深挖heap dump，下面是你如何通过heap dump来找出泄漏:\n\n1. 找到`com.squareup.leakcanary.KeyedWeakReference`所有的实例。\n2. 对于每个实例，查看它的`key`成员变量。\n3. 找到包含与LeakCanary报出的reference key相同`key`成员变量的`KeyedWeakReference`。\n4. 那么这个`KeyedWeakReference`中的`reference`成员变量，就是你泄漏了的对象。\n5. 到此为止，剩余的工作就是，开始查找到GC Roots最短路径(不包含弱引用)。\n\n## IX. 定制\n\n#### 图标与标注(Icon and Label)\n\n`DisplayLeakActivity`默认是使用默认的图标与标注，当然你可以通过在你的app中提供`R.drawable.__leak_canary_icon`与`R.string.__leak_canary_display_activity_label`来定制这个:\n\n```\nres/\n  drawable-hdpi/\n    __leak_canary_icon.png\n  drawable-mdpi/\n    __leak_canary_icon.png\n  drawable-xhdpi/\n    __leak_canary_icon.png\n  drawable-xxhdpi/\n    __leak_canary_icon.png\n  drawable-xxxhdpi/\n    __leak_canary_icon.png\n```\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n  <string name=\"__leak_canary_display_activity_label\">MyLeaks</string>\n</resources>\n```\n\n#### 存储leak traces\n\n`DisplayLeakActivity`最多在app目录中存储7个heap dumps与leak traces 文件。你可以通过在你的app中提供`R.integer.__leak_canary_max_stored_leaks`来定制这个:\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n  <integer name=\"__leak_canary_max_stored_leaks\">20</integer>\n</resources>\n```\n\n#### 上传到服务器\n\n可以通过修改默认的行为来上传leak trace与heap dump到指定的服务器。\n\n创建一个你自己的`AbstractAnalysisResultService`。最简单的方法是在debug的app中继承`DefaultAnalysisResultService`:\n\n```\npublic class LeakUploadService extends DefaultAnalysisResultService {\n  @Override protected void afterDefaultHandling(HeapDump heapDump, AnalysisResult result, String leakInfo) {\n    if (!result.leakFound || result.excludedLeak) {\n      return;\n    }\n    myServer.uploadLeakBlocking(heapDump.heapDumpFile, leakInfo);\n  }\n}\n```\n\n要确认发布的Application类使用无效的`RefWatcher`:\n\n```\npublic class ExampleApplication extends Application {\n\n  public static RefWatcher getRefWatcher(Context context) {\n    ExampleApplication application = (ExampleApplication) context.getApplicationContext();\n    return application.refWatcher;\n  }\n\n  private RefWatcher refWatcher;\n\n  @Override public void onCreate() {\n    super.onCreate();\n    refWatcher = installLeakCanary();\n  }\n\n  protected RefWatcher installLeakCanary() {\n    return RefWatcher.DISABLED;\n  }\n}\n```\n\n在你debug的Application类中创建一个自定义的`RefWatcher`:\n\n```\npublic class DebugExampleApplication extends ExampleApplication {\n  protected RefWatcher installLeakCanary() {\n    return LeakCanary.install(app, LeakUploadService.class);\n  }\n}\n```\n\n不要忘了在debug的manifest里面注册service:\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    >\n  <application android:name=\"com.example.DebugExampleApplication\">\n    <service android:name=\"com.example.LeakUploadService\" />\n  </application>\n</manifest>\n```\n\n你也可以上传leak traces到Slack或者HipChat，[这里是一个例子](https://gist.github.com/pyricau/06c2c486d24f5f85f7f0)\n\n![](https://raw.githubusercontent.com/Jacksgong/leakcanary/master/assets/icon_512.png)\n\n**LeakCanary** 名称是为了表达[canary in a coal mine](http://en.wiktionary.org/wiki/canary_in_a_coal_mine)，因为LeakCanary是通过提供危险预警，检测风险的哨兵，维护者[@edenman](https://github.com/edenman)提的建议!\n\n## X. License\n\n```\nCopyright 2015 Square, Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n","source":"_posts/Leakcanary-Square的一款Android:Java内存泄漏检测工具.md","raw":"title: Leakcanary Square的一款Android/Java内存泄漏检测工具\ndate: 2015-05-12 08:35:03\npermalink: 2015/05/12/Leakcanary-Square的一款Android:Java内存泄漏检测工具\ntags:\n- Square\n- 内存泄漏\n- Android\n- 优化\n\n---\n\n> git地址: [square/leakcanary](https://github.com/square/leakcanary)\n\n# git readme:\n\n**中文翻译[@Jacksgong](https://github.com/Jacksgong/leakcanary)**\n\n> 一款Android与Java的内存检测库\n\n> \"A small leak will sink a gret ship.\" - Benjamin Franklin\n\n<!--more-->\n\n![](https://raw.githubusercontent.com/Jacksgong/leakcanary/master/assets/screenshot.png)\n\n## I. 开始\n\n`build.gradle` 中的配置:\n\n```\ndependencies {\n   debugCompile 'com.squareup.leakcanary:leakcanary-android:1.3'\n   releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3'\n }\n```\n\n`Application` class 中的配置:\n\n```\npublic class ExampleApplication extends Application {\n\n  @Override public void onCreate() {\n    super.onCreate();\n    LeakCanary.install(this);\n  }\n}\n```\n\n**这样就可以了!** 在debug包中activity内存泄漏将会被监听到，并且将会自动显示一个通知(show a notification)。\n\n\n## II. 为什么要使用LeakCanary?\n\n好问题! 我们已经在 [博客文章](http://squ.re/leakcanary)中回答了这个问题。\n\n## III. 应该怎么使用它呢？\n\n使用`RefWatcher`来监听引用是否已经被GC:\n\n```\nRefWatcher refWatcher = {...};\n\n// We expect schrodingerCat to be gone soon (or not), let's watch it.\n// 我们预测shcrodingerCat很快会销毁(也许不会)，这里监听了它.\nrefWatcher.watch(schrodingerCat);\n```\n`LeakCanary.install()`会返回预设的`RefWatcher`，并且安装了一个`ActivityRefWatcher`来监听activity调用了`Activity.onDestroy()`以后的泄漏。\n\n```\npublic class ExampleApplication extends Application {\n\n  public static RefWatcher getRefWatcher(Context context) {\n    ExampleApplication application = (ExampleApplication) context.getApplicationContext();\n    return application.refWatcher;\n  }\n\n  private RefWatcher refWatcher;\n\n  @Override public void onCreate() {\n    super.onCreate();\n    refWatcher = LeakCanary.install(this);\n  }\n}\n```\n你也可以使用`RefWatcher`来监听fragment的泄漏:\n\n```\npublic abstract class BaseFragment extends Fragment {\n\n  @Override public void onDestroy() {\n    super.onDestroy();\n    RefWatcher refWatcher = ExampleApplication.getRefWatcher(getActivity());\n    refWatcher.watch(this);\n  }\n}\n```\n\n## IV. LeakCanary是如何工作的呢?\n\n1. `RefWatcher.watch()`创建了一个[`KeyedWeakReference`](https://github.com/square/leakcanary/blob/master/library/leakcanary-watcher/src/main/java/com/squareup/leakcanary/KeyedWeakReference.java)到了监控的对象。\n2. 之后，在后台线程，它检查引用是否已经被释放，如果没有它将促发一次GC。\n3. 如果引用依然没有被释放，它会导出heap到存储在app文件系统的`a.hprof`文件。\n4. `HeapAnalyzerService`在单独的一个进程被启动，并且`HeapAnalyzer`使用[`HAHA`](https://github.com/square/haha)来解析heap。\n5. `HeapAnalyzer`由于采用了单独的reference key，在heap dump中找到了`KeyedWeakReference`并且定位到泄漏的引用。\n6. `HeapAnalyzer`通过计算出到GC根部最短路径的强引用来决定是否这里是泄漏了，并且建立导致泄漏的引用关系链。\n7. 结果将传回在app进程的`DisplayLeakService`，并且显示泄漏通知。\n\n## V. 我应该如何拷贝leak trace呢？\n\n可以在Logcat中看到leak trace:\n\n```\nIn com.example.leakcanary:1.0:1 com.example.leakcanary.MainActivity has leaked:\n* GC ROOT thread java.lang.Thread.<Java Local> (named 'AsyncTask #1')\n* references com.example.leakcanary.MainActivity$3.this$0 (anonymous class extends android.os.AsyncTask)\n* leaks com.example.leakcanary.MainActivity instance\n\n* Reference Key: e71f3bf5-d786-4145-8539-584afaecad1d\n* Device: Genymotion generic Google Nexus 6 - 5.1.0 - API 22 - 1440x2560 vbox86p\n* Android Version: 5.1 API: 22\n```\n\n也可以从**action bar menu**分享leak trace与heap dump文件。\n\n## VI. 应该如何解决内存泄漏呢?\n\n一旦拥有了leak trace，就可以分析出哪个路径中的引用不应该存在，然后分析出引用依然存在的原因。通常情况是注册的监听没有反注册，或者是`close()`方法没有调用，或者是一个未知的类((通常也是没有句柄的对象，就纯new出来执行了某方法)hold住了外部类的引用。如果你分析不出你代码中的问题，别放弃，可以在[Stack Overflow question](http://stackoverflow.com/questions/tagged/leakcanary)(使用`leakcanary` 标签)中创建相关问题。\n\n## VII. 我的泄漏是因为执行Android SDK导致的！\n\n随着时间的推移，已经有一些已知的由于Android SDK的执行导致的内存泄漏得到了作为生厂商AOSP的修复。当发生这样的内存泄漏的时候，其实我们作为应用开发者能做的很少。对于这样的问题，LeakCanary已经有内建了一个忽略已知Android SDK泄漏的列表: [`AndroidExcludedRefs.java`](https://github.com/square/leakcanary/blob/master/library/leakcanary-android/src/main/java/com/squareup/leakcanary/AndroidExcludedRefs.java)。如果你发现了新的，请提供leak trace、reference key、设备版本与Android版来[创建问题](https://github.com/square/leakcanary/issues/new)，当然如果能够提供一个heap dump的文件连接更好。\n\n这对于**新发布的Android**来说是特别重要的，你有机会能够帮助尽早发现新的内存泄漏，使整个Android社区受益。\n\n开发版本的快照: [Sonatype's `snapshots` repository](https://oss.sonatype.org/content/repositories/snapshots/)。\n\n## VIII. 超出leak trace范围\n\n通常leak trace是不够的，还需要通过[MAT](http://eclipse.org/mat/)或者[YourKit](https://www.yourkit.com/)来深挖heap dump，下面是你如何通过heap dump来找出泄漏:\n\n1. 找到`com.squareup.leakcanary.KeyedWeakReference`所有的实例。\n2. 对于每个实例，查看它的`key`成员变量。\n3. 找到包含与LeakCanary报出的reference key相同`key`成员变量的`KeyedWeakReference`。\n4. 那么这个`KeyedWeakReference`中的`reference`成员变量，就是你泄漏了的对象。\n5. 到此为止，剩余的工作就是，开始查找到GC Roots最短路径(不包含弱引用)。\n\n## IX. 定制\n\n#### 图标与标注(Icon and Label)\n\n`DisplayLeakActivity`默认是使用默认的图标与标注，当然你可以通过在你的app中提供`R.drawable.__leak_canary_icon`与`R.string.__leak_canary_display_activity_label`来定制这个:\n\n```\nres/\n  drawable-hdpi/\n    __leak_canary_icon.png\n  drawable-mdpi/\n    __leak_canary_icon.png\n  drawable-xhdpi/\n    __leak_canary_icon.png\n  drawable-xxhdpi/\n    __leak_canary_icon.png\n  drawable-xxxhdpi/\n    __leak_canary_icon.png\n```\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n  <string name=\"__leak_canary_display_activity_label\">MyLeaks</string>\n</resources>\n```\n\n#### 存储leak traces\n\n`DisplayLeakActivity`最多在app目录中存储7个heap dumps与leak traces 文件。你可以通过在你的app中提供`R.integer.__leak_canary_max_stored_leaks`来定制这个:\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n  <integer name=\"__leak_canary_max_stored_leaks\">20</integer>\n</resources>\n```\n\n#### 上传到服务器\n\n可以通过修改默认的行为来上传leak trace与heap dump到指定的服务器。\n\n创建一个你自己的`AbstractAnalysisResultService`。最简单的方法是在debug的app中继承`DefaultAnalysisResultService`:\n\n```\npublic class LeakUploadService extends DefaultAnalysisResultService {\n  @Override protected void afterDefaultHandling(HeapDump heapDump, AnalysisResult result, String leakInfo) {\n    if (!result.leakFound || result.excludedLeak) {\n      return;\n    }\n    myServer.uploadLeakBlocking(heapDump.heapDumpFile, leakInfo);\n  }\n}\n```\n\n要确认发布的Application类使用无效的`RefWatcher`:\n\n```\npublic class ExampleApplication extends Application {\n\n  public static RefWatcher getRefWatcher(Context context) {\n    ExampleApplication application = (ExampleApplication) context.getApplicationContext();\n    return application.refWatcher;\n  }\n\n  private RefWatcher refWatcher;\n\n  @Override public void onCreate() {\n    super.onCreate();\n    refWatcher = installLeakCanary();\n  }\n\n  protected RefWatcher installLeakCanary() {\n    return RefWatcher.DISABLED;\n  }\n}\n```\n\n在你debug的Application类中创建一个自定义的`RefWatcher`:\n\n```\npublic class DebugExampleApplication extends ExampleApplication {\n  protected RefWatcher installLeakCanary() {\n    return LeakCanary.install(app, LeakUploadService.class);\n  }\n}\n```\n\n不要忘了在debug的manifest里面注册service:\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    >\n  <application android:name=\"com.example.DebugExampleApplication\">\n    <service android:name=\"com.example.LeakUploadService\" />\n  </application>\n</manifest>\n```\n\n你也可以上传leak traces到Slack或者HipChat，[这里是一个例子](https://gist.github.com/pyricau/06c2c486d24f5f85f7f0)\n\n![](https://raw.githubusercontent.com/Jacksgong/leakcanary/master/assets/icon_512.png)\n\n**LeakCanary** 名称是为了表达[canary in a coal mine](http://en.wiktionary.org/wiki/canary_in_a_coal_mine)，因为LeakCanary是通过提供危险预警，检测风险的哨兵，维护者[@edenman](https://github.com/edenman)提的建议!\n\n## X. License\n\n```\nCopyright 2015 Square, Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n","slug":"2015/05/12/Leakcanary-Square的一款Android:Java内存泄漏检测工具","published":1,"updated":"2017-01-26T14:52:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66hv000p95buvfw85ta1","content":"<blockquote>\n<p>git地址: <a href=\"https://github.com/square/leakcanary\" target=\"_blank\" rel=\"external\">square/leakcanary</a></p>\n</blockquote>\n<h1 id=\"git-readme\"><a href=\"#git-readme\" class=\"headerlink\" title=\"git readme:\"></a>git readme:</h1><p><strong>中文翻译<a href=\"https://github.com/Jacksgong/leakcanary\" target=\"_blank\" rel=\"external\">@Jacksgong</a></strong></p>\n<blockquote>\n<p>一款Android与Java的内存检测库</p>\n<p>“A small leak will sink a gret ship.” - Benjamin Franklin</p>\n</blockquote>\n<a id=\"more\"></a>\n<p><img src=\"https://raw.githubusercontent.com/Jacksgong/leakcanary/master/assets/screenshot.png\" alt=\"\"></p>\n<h2 id=\"I-开始\"><a href=\"#I-开始\" class=\"headerlink\" title=\"I. 开始\"></a>I. 开始</h2><p><code>build.gradle</code> 中的配置:</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">dependencies</span> &#123;</div><div class=\"line\">   <span class=\"attribute\">debugCompile</span> <span class=\"string\">'com.squareup.leakcanary:leakcanary-android:1.3'</span></div><div class=\"line\">   releaseCompile <span class=\"string\">'com.squareup.leakcanary:leakcanary-android-no-op:1.3'</span></div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p><code>Application</code> class 中的配置:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExampleApplication</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span> public void onCreate() &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate();</div><div class=\"line\">    <span class=\"type\">LeakCanary</span>.install(<span class=\"keyword\">this</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>这样就可以了!</strong> 在debug包中activity内存泄漏将会被监听到，并且将会自动显示一个通知(show a notification)。</p>\n<h2 id=\"II-为什么要使用LeakCanary\"><a href=\"#II-为什么要使用LeakCanary\" class=\"headerlink\" title=\"II. 为什么要使用LeakCanary?\"></a>II. 为什么要使用LeakCanary?</h2><p>好问题! 我们已经在 <a href=\"http://squ.re/leakcanary\" target=\"_blank\" rel=\"external\">博客文章</a>中回答了这个问题。</p>\n<h2 id=\"III-应该怎么使用它呢？\"><a href=\"#III-应该怎么使用它呢？\" class=\"headerlink\" title=\"III. 应该怎么使用它呢？\"></a>III. 应该怎么使用它呢？</h2><p>使用<code>RefWatcher</code>来监听引用是否已经被GC:</p>\n<figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"type\">RefWatcher</span> refWatcher = <span class=\"meta\">&#123;...&#125;</span>;</div><div class=\"line\"></div><div class=\"line\">// <span class=\"type\">We</span> expect schrodingerCat to be gone soon (<span class=\"keyword\">or</span> <span class=\"keyword\">not</span>), <span class=\"keyword\">let</span>'s watch it.</div><div class=\"line\">// 我们预测shcrodingerCat很快会销毁(也许不会)，这里监听了它.</div><div class=\"line\">refWatcher.watch(schrodingerCat);</div></pre></td></tr></table></figure>\n<p><code>LeakCanary.install()</code>会返回预设的<code>RefWatcher</code>，并且安装了一个<code>ActivityRefWatcher</code>来监听activity调用了<code>Activity.onDestroy()</code>以后的泄漏。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExampleApplication</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  public static <span class=\"type\">RefWatcher</span> getRefWatcher(<span class=\"type\">Context</span> context) &#123;</div><div class=\"line\">    <span class=\"type\">ExampleApplication</span> application = (<span class=\"type\">ExampleApplication</span>) context.getApplicationContext();</div><div class=\"line\">    <span class=\"keyword\">return</span> application.refWatcher;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">RefWatcher</span> refWatcher;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span> public void onCreate() &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate();</div><div class=\"line\">    refWatcher = <span class=\"type\">LeakCanary</span>.install(<span class=\"keyword\">this</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>你也可以使用<code>RefWatcher</code>来监听fragment的泄漏:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">public <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span> public void onDestroy() &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">    <span class=\"type\">RefWatcher</span> refWatcher = <span class=\"type\">ExampleApplication</span>.getRefWatcher(getActivity());</div><div class=\"line\">    refWatcher.watch(<span class=\"keyword\">this</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"IV-LeakCanary是如何工作的呢\"><a href=\"#IV-LeakCanary是如何工作的呢\" class=\"headerlink\" title=\"IV. LeakCanary是如何工作的呢?\"></a>IV. LeakCanary是如何工作的呢?</h2><ol>\n<li><code>RefWatcher.watch()</code>创建了一个<a href=\"https://github.com/square/leakcanary/blob/master/library/leakcanary-watcher/src/main/java/com/squareup/leakcanary/KeyedWeakReference.java\" target=\"_blank\" rel=\"external\"><code>KeyedWeakReference</code></a>到了监控的对象。</li>\n<li>之后，在后台线程，它检查引用是否已经被释放，如果没有它将促发一次GC。</li>\n<li>如果引用依然没有被释放，它会导出heap到存储在app文件系统的<code>a.hprof</code>文件。</li>\n<li><code>HeapAnalyzerService</code>在单独的一个进程被启动，并且<code>HeapAnalyzer</code>使用<a href=\"https://github.com/square/haha\" target=\"_blank\" rel=\"external\"><code>HAHA</code></a>来解析heap。</li>\n<li><code>HeapAnalyzer</code>由于采用了单独的reference key，在heap dump中找到了<code>KeyedWeakReference</code>并且定位到泄漏的引用。</li>\n<li><code>HeapAnalyzer</code>通过计算出到GC根部最短路径的强引用来决定是否这里是泄漏了，并且建立导致泄漏的引用关系链。</li>\n<li>结果将传回在app进程的<code>DisplayLeakService</code>，并且显示泄漏通知。</li>\n</ol>\n<h2 id=\"V-我应该如何拷贝leak-trace呢？\"><a href=\"#V-我应该如何拷贝leak-trace呢？\" class=\"headerlink\" title=\"V. 我应该如何拷贝leak trace呢？\"></a>V. 我应该如何拷贝leak trace呢？</h2><p>可以在Logcat中看到leak trace:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"type\">In</span> com.example.leakcanary:<span class=\"number\">1.0</span>:<span class=\"number\">1</span> com.example.leakcanary.<span class=\"type\">MainActivity</span> has leaked:</div><div class=\"line\">* <span class=\"type\">GC</span> <span class=\"type\">ROOT</span> thread java.lang.<span class=\"type\">Thread</span>.&lt;<span class=\"type\">Java</span> <span class=\"type\">Local</span>&gt; (named <span class=\"symbol\">'AsyncTask</span> #<span class=\"number\">1</span>')</div><div class=\"line\">* references com.example.leakcanary.<span class=\"type\">MainActivity</span>$<span class=\"number\">3.</span><span class=\"keyword\">this</span>$<span class=\"number\">0</span> (anonymous <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"keyword\">extends</span> <span class=\"title\">android</span>.<span class=\"title\">os</span>.<span class=\"title\">AsyncTask</span>)</span></div><div class=\"line\">* leaks com.example.leakcanary.<span class=\"type\">MainActivity</span> instance</div><div class=\"line\"></div><div class=\"line\">* <span class=\"type\">Reference</span> <span class=\"type\">Key</span>: e71f3bf5-d786<span class=\"number\">-4145</span><span class=\"number\">-8539</span><span class=\"number\">-584</span>afaecad1d</div><div class=\"line\">* <span class=\"type\">Device</span>: <span class=\"type\">Genymotion</span> generic <span class=\"type\">Google</span> <span class=\"type\">Nexus</span> <span class=\"number\">6</span> - <span class=\"number\">5.1</span><span class=\"number\">.0</span> - <span class=\"type\">API</span> <span class=\"number\">22</span> - <span class=\"number\">1440</span>x2560 vbox86p</div><div class=\"line\">* <span class=\"type\">Android</span> <span class=\"type\">Version</span>: <span class=\"number\">5.1</span> <span class=\"type\">API</span>: <span class=\"number\">22</span></div></pre></td></tr></table></figure>\n<p>也可以从<strong>action bar menu</strong>分享leak trace与heap dump文件。</p>\n<h2 id=\"VI-应该如何解决内存泄漏呢\"><a href=\"#VI-应该如何解决内存泄漏呢\" class=\"headerlink\" title=\"VI. 应该如何解决内存泄漏呢?\"></a>VI. 应该如何解决内存泄漏呢?</h2><p>一旦拥有了leak trace，就可以分析出哪个路径中的引用不应该存在，然后分析出引用依然存在的原因。通常情况是注册的监听没有反注册，或者是<code>close()</code>方法没有调用，或者是一个未知的类((通常也是没有句柄的对象，就纯new出来执行了某方法)hold住了外部类的引用。如果你分析不出你代码中的问题，别放弃，可以在<a href=\"http://stackoverflow.com/questions/tagged/leakcanary\" target=\"_blank\" rel=\"external\">Stack Overflow question</a>(使用<code>leakcanary</code> 标签)中创建相关问题。</p>\n<h2 id=\"VII-我的泄漏是因为执行Android-SDK导致的！\"><a href=\"#VII-我的泄漏是因为执行Android-SDK导致的！\" class=\"headerlink\" title=\"VII. 我的泄漏是因为执行Android SDK导致的！\"></a>VII. 我的泄漏是因为执行Android SDK导致的！</h2><p>随着时间的推移，已经有一些已知的由于Android SDK的执行导致的内存泄漏得到了作为生厂商AOSP的修复。当发生这样的内存泄漏的时候，其实我们作为应用开发者能做的很少。对于这样的问题，LeakCanary已经有内建了一个忽略已知Android SDK泄漏的列表: <a href=\"https://github.com/square/leakcanary/blob/master/library/leakcanary-android/src/main/java/com/squareup/leakcanary/AndroidExcludedRefs.java\" target=\"_blank\" rel=\"external\"><code>AndroidExcludedRefs.java</code></a>。如果你发现了新的，请提供leak trace、reference key、设备版本与Android版来<a href=\"https://github.com/square/leakcanary/issues/new\" target=\"_blank\" rel=\"external\">创建问题</a>，当然如果能够提供一个heap dump的文件连接更好。</p>\n<p>这对于<strong>新发布的Android</strong>来说是特别重要的，你有机会能够帮助尽早发现新的内存泄漏，使整个Android社区受益。</p>\n<p>开发版本的快照: <a href=\"https://oss.sonatype.org/content/repositories/snapshots/\" target=\"_blank\" rel=\"external\">Sonatype’s <code>snapshots</code> repository</a>。</p>\n<h2 id=\"VIII-超出leak-trace范围\"><a href=\"#VIII-超出leak-trace范围\" class=\"headerlink\" title=\"VIII. 超出leak trace范围\"></a>VIII. 超出leak trace范围</h2><p>通常leak trace是不够的，还需要通过<a href=\"http://eclipse.org/mat/\" target=\"_blank\" rel=\"external\">MAT</a>或者<a href=\"https://www.yourkit.com/\" target=\"_blank\" rel=\"external\">YourKit</a>来深挖heap dump，下面是你如何通过heap dump来找出泄漏:</p>\n<ol>\n<li>找到<code>com.squareup.leakcanary.KeyedWeakReference</code>所有的实例。</li>\n<li>对于每个实例，查看它的<code>key</code>成员变量。</li>\n<li>找到包含与LeakCanary报出的reference key相同<code>key</code>成员变量的<code>KeyedWeakReference</code>。</li>\n<li>那么这个<code>KeyedWeakReference</code>中的<code>reference</code>成员变量，就是你泄漏了的对象。</li>\n<li>到此为止，剩余的工作就是，开始查找到GC Roots最短路径(不包含弱引用)。</li>\n</ol>\n<h2 id=\"IX-定制\"><a href=\"#IX-定制\" class=\"headerlink\" title=\"IX. 定制\"></a>IX. 定制</h2><h4 id=\"图标与标注-Icon-and-Label\"><a href=\"#图标与标注-Icon-and-Label\" class=\"headerlink\" title=\"图标与标注(Icon and Label)\"></a>图标与标注(Icon and Label)</h4><p><code>DisplayLeakActivity</code>默认是使用默认的图标与标注，当然你可以通过在你的app中提供<code>R.drawable.__leak_canary_icon</code>与<code>R.string.__leak_canary_display_activity_label</code>来定制这个:</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">res/</div><div class=\"line\">  drawable-hdpi/</div><div class=\"line\">    __leak_canary_icon<span class=\"selector-class\">.png</span></div><div class=\"line\">  drawable-mdpi/</div><div class=\"line\">    __leak_canary_icon<span class=\"selector-class\">.png</span></div><div class=\"line\">  drawable-xhdpi/</div><div class=\"line\">    __leak_canary_icon<span class=\"selector-class\">.png</span></div><div class=\"line\">  drawable-xxhdpi/</div><div class=\"line\">    __leak_canary_icon<span class=\"selector-class\">.png</span></div><div class=\"line\">  drawable-xxxhdpi/</div><div class=\"line\">    __leak_canary_icon.png</div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"__leak_canary_display_activity_label\"</span>&gt;</span>MyLeaks<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"存储leak-traces\"><a href=\"#存储leak-traces\" class=\"headerlink\" title=\"存储leak traces\"></a>存储leak traces</h4><p><code>DisplayLeakActivity</code>最多在app目录中存储7个heap dumps与leak traces 文件。你可以通过在你的app中提供<code>R.integer.__leak_canary_max_stored_leaks</code>来定制这个:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">integer</span> <span class=\"attr\">name</span>=<span class=\"string\">\"__leak_canary_max_stored_leaks\"</span>&gt;</span>20<span class=\"tag\">&lt;/<span class=\"name\">integer</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"上传到服务器\"><a href=\"#上传到服务器\" class=\"headerlink\" title=\"上传到服务器\"></a>上传到服务器</h4><p>可以通过修改默认的行为来上传leak trace与heap dump到指定的服务器。</p>\n<p>创建一个你自己的<code>AbstractAnalysisResultService</code>。最简单的方法是在debug的app中继承<code>DefaultAnalysisResultService</code>:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LeakUploadService</span> <span class=\"keyword\">extends</span> <span class=\"title\">DefaultAnalysisResultService</span> </span>&#123;</div><div class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"keyword\">protected</span> void afterDefaultHandling(<span class=\"type\">HeapDump</span> heapDump, <span class=\"type\">AnalysisResult</span> result, <span class=\"type\">String</span> leakInfo) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!result.leakFound || result.excludedLeak) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    myServer.uploadLeakBlocking(heapDump.heapDumpFile, leakInfo);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>要确认发布的Application类使用无效的<code>RefWatcher</code>:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExampleApplication</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  public static <span class=\"type\">RefWatcher</span> getRefWatcher(<span class=\"type\">Context</span> context) &#123;</div><div class=\"line\">    <span class=\"type\">ExampleApplication</span> application = (<span class=\"type\">ExampleApplication</span>) context.getApplicationContext();</div><div class=\"line\">    <span class=\"keyword\">return</span> application.refWatcher;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">RefWatcher</span> refWatcher;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span> public void onCreate() &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate();</div><div class=\"line\">    refWatcher = installLeakCanary();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">protected</span> <span class=\"type\">RefWatcher</span> installLeakCanary() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">RefWatcher</span>.<span class=\"type\">DISABLED</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在你debug的Application类中创建一个自定义的<code>RefWatcher</code>:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DebugExampleApplication</span> <span class=\"keyword\">extends</span> <span class=\"title\">ExampleApplication</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">protected</span> <span class=\"type\">RefWatcher</span> installLeakCanary() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">LeakCanary</span>.install(app, <span class=\"type\">LeakUploadService</span>.<span class=\"keyword\">class</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>不要忘了在debug的manifest里面注册service:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></div><div class=\"line\">    &gt;</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">application</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.example.DebugExampleApplication\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">service</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.example.LeakUploadService\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>你也可以上传leak traces到Slack或者HipChat，<a href=\"https://gist.github.com/pyricau/06c2c486d24f5f85f7f0\" target=\"_blank\" rel=\"external\">这里是一个例子</a></p>\n<p><img src=\"https://raw.githubusercontent.com/Jacksgong/leakcanary/master/assets/icon_512.png\" alt=\"\"></p>\n<p><strong>LeakCanary</strong> 名称是为了表达<a href=\"http://en.wiktionary.org/wiki/canary_in_a_coal_mine\" target=\"_blank\" rel=\"external\">canary in a coal mine</a>，因为LeakCanary是通过提供危险预警，检测风险的哨兵，维护者<a href=\"https://github.com/edenman\" target=\"_blank\" rel=\"external\">@edenman</a>提的建议!</p>\n<h2 id=\"X-License\"><a href=\"#X-License\" class=\"headerlink\" title=\"X. License\"></a>X. License</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Copyright 2015 Square, Inc.</div><div class=\"line\"></div><div class=\"line\">Licensed under the Apache License, Version 2.0 (the \"License\");</div><div class=\"line\">you may not <span class=\"keyword\">use</span> this <span class=\"keyword\">file</span> <span class=\"keyword\">except</span> <span class=\"keyword\">in</span> compliance <span class=\"keyword\">with</span> the License.</div><div class=\"line\">You may obtain a copy <span class=\"keyword\">of</span> the License <span class=\"keyword\">at</span></div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">http</span>://www.apache.org/licenses/LICENSE<span class=\"number\">-2.0</span></div><div class=\"line\"></div><div class=\"line\">Unless <span class=\"keyword\">required</span> <span class=\"keyword\">by</span> applicable law <span class=\"keyword\">or</span> agreed <span class=\"keyword\">to</span> <span class=\"keyword\">in</span> writing, software</div><div class=\"line\"><span class=\"keyword\">distributed</span> <span class=\"keyword\">under</span> the License <span class=\"keyword\">is</span> <span class=\"keyword\">distributed</span> <span class=\"keyword\">on</span> an <span class=\"string\">\"AS IS\"</span> BASIS,</div><div class=\"line\"><span class=\"keyword\">WITHOUT</span> WARRANTIES <span class=\"keyword\">OR</span> CONDITIONS <span class=\"keyword\">OF</span> <span class=\"keyword\">ANY</span> KIND, either express <span class=\"keyword\">or</span> implied.</div><div class=\"line\">See the License <span class=\"keyword\">for</span> the specific <span class=\"keyword\">language</span> governing permissions <span class=\"keyword\">and</span></div><div class=\"line\">limitations <span class=\"keyword\">under</span> the License.</div></pre></td></tr></table></figure>\n","excerpt":"<blockquote>\n<p>git地址: <a href=\"https://github.com/square/leakcanary\">square/leakcanary</a></p>\n</blockquote>\n<h1 id=\"git-readme\"><a href=\"#git-readme\" class=\"headerlink\" title=\"git readme:\"></a>git readme:</h1><p><strong>中文翻译<a href=\"https://github.com/Jacksgong/leakcanary\">@Jacksgong</a></strong></p>\n<blockquote>\n<p>一款Android与Java的内存检测库</p>\n<p>“A small leak will sink a gret ship.” - Benjamin Franklin</p>\n</blockquote>","more":"<p><img src=\"https://raw.githubusercontent.com/Jacksgong/leakcanary/master/assets/screenshot.png\" alt=\"\"></p>\n<h2 id=\"I-开始\"><a href=\"#I-开始\" class=\"headerlink\" title=\"I. 开始\"></a>I. 开始</h2><p><code>build.gradle</code> 中的配置:</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">dependencies</span> &#123;</div><div class=\"line\">   <span class=\"attribute\">debugCompile</span> <span class=\"string\">'com.squareup.leakcanary:leakcanary-android:1.3'</span></div><div class=\"line\">   releaseCompile <span class=\"string\">'com.squareup.leakcanary:leakcanary-android-no-op:1.3'</span></div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p><code>Application</code> class 中的配置:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExampleApplication</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span> public void onCreate() &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate();</div><div class=\"line\">    <span class=\"type\">LeakCanary</span>.install(<span class=\"keyword\">this</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>这样就可以了!</strong> 在debug包中activity内存泄漏将会被监听到，并且将会自动显示一个通知(show a notification)。</p>\n<h2 id=\"II-为什么要使用LeakCanary\"><a href=\"#II-为什么要使用LeakCanary\" class=\"headerlink\" title=\"II. 为什么要使用LeakCanary?\"></a>II. 为什么要使用LeakCanary?</h2><p>好问题! 我们已经在 <a href=\"http://squ.re/leakcanary\">博客文章</a>中回答了这个问题。</p>\n<h2 id=\"III-应该怎么使用它呢？\"><a href=\"#III-应该怎么使用它呢？\" class=\"headerlink\" title=\"III. 应该怎么使用它呢？\"></a>III. 应该怎么使用它呢？</h2><p>使用<code>RefWatcher</code>来监听引用是否已经被GC:</p>\n<figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"type\">RefWatcher</span> refWatcher = <span class=\"meta\">&#123;...&#125;</span>;</div><div class=\"line\"></div><div class=\"line\">// <span class=\"type\">We</span> expect schrodingerCat to be gone soon (<span class=\"keyword\">or</span> <span class=\"keyword\">not</span>), <span class=\"keyword\">let</span>'s watch it.</div><div class=\"line\">// 我们预测shcrodingerCat很快会销毁(也许不会)，这里监听了它.</div><div class=\"line\">refWatcher.watch(schrodingerCat);</div></pre></td></tr></table></figure>\n<p><code>LeakCanary.install()</code>会返回预设的<code>RefWatcher</code>，并且安装了一个<code>ActivityRefWatcher</code>来监听activity调用了<code>Activity.onDestroy()</code>以后的泄漏。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExampleApplication</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  public static <span class=\"type\">RefWatcher</span> getRefWatcher(<span class=\"type\">Context</span> context) &#123;</div><div class=\"line\">    <span class=\"type\">ExampleApplication</span> application = (<span class=\"type\">ExampleApplication</span>) context.getApplicationContext();</div><div class=\"line\">    <span class=\"keyword\">return</span> application.refWatcher;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">RefWatcher</span> refWatcher;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span> public void onCreate() &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate();</div><div class=\"line\">    refWatcher = <span class=\"type\">LeakCanary</span>.install(<span class=\"keyword\">this</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>你也可以使用<code>RefWatcher</code>来监听fragment的泄漏:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">public <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span> public void onDestroy() &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">    <span class=\"type\">RefWatcher</span> refWatcher = <span class=\"type\">ExampleApplication</span>.getRefWatcher(getActivity());</div><div class=\"line\">    refWatcher.watch(<span class=\"keyword\">this</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"IV-LeakCanary是如何工作的呢\"><a href=\"#IV-LeakCanary是如何工作的呢\" class=\"headerlink\" title=\"IV. LeakCanary是如何工作的呢?\"></a>IV. LeakCanary是如何工作的呢?</h2><ol>\n<li><code>RefWatcher.watch()</code>创建了一个<a href=\"https://github.com/square/leakcanary/blob/master/library/leakcanary-watcher/src/main/java/com/squareup/leakcanary/KeyedWeakReference.java\"><code>KeyedWeakReference</code></a>到了监控的对象。</li>\n<li>之后，在后台线程，它检查引用是否已经被释放，如果没有它将促发一次GC。</li>\n<li>如果引用依然没有被释放，它会导出heap到存储在app文件系统的<code>a.hprof</code>文件。</li>\n<li><code>HeapAnalyzerService</code>在单独的一个进程被启动，并且<code>HeapAnalyzer</code>使用<a href=\"https://github.com/square/haha\"><code>HAHA</code></a>来解析heap。</li>\n<li><code>HeapAnalyzer</code>由于采用了单独的reference key，在heap dump中找到了<code>KeyedWeakReference</code>并且定位到泄漏的引用。</li>\n<li><code>HeapAnalyzer</code>通过计算出到GC根部最短路径的强引用来决定是否这里是泄漏了，并且建立导致泄漏的引用关系链。</li>\n<li>结果将传回在app进程的<code>DisplayLeakService</code>，并且显示泄漏通知。</li>\n</ol>\n<h2 id=\"V-我应该如何拷贝leak-trace呢？\"><a href=\"#V-我应该如何拷贝leak-trace呢？\" class=\"headerlink\" title=\"V. 我应该如何拷贝leak trace呢？\"></a>V. 我应该如何拷贝leak trace呢？</h2><p>可以在Logcat中看到leak trace:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"type\">In</span> com.example.leakcanary:<span class=\"number\">1.0</span>:<span class=\"number\">1</span> com.example.leakcanary.<span class=\"type\">MainActivity</span> has leaked:</div><div class=\"line\">* <span class=\"type\">GC</span> <span class=\"type\">ROOT</span> thread java.lang.<span class=\"type\">Thread</span>.&lt;<span class=\"type\">Java</span> <span class=\"type\">Local</span>&gt; (named <span class=\"symbol\">'AsyncTask</span> #<span class=\"number\">1</span>')</div><div class=\"line\">* references com.example.leakcanary.<span class=\"type\">MainActivity</span>$<span class=\"number\">3.</span><span class=\"keyword\">this</span>$<span class=\"number\">0</span> (anonymous <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"keyword\">extends</span> <span class=\"title\">android</span>.<span class=\"title\">os</span>.<span class=\"title\">AsyncTask</span>)</span></div><div class=\"line\">* leaks com.example.leakcanary.<span class=\"type\">MainActivity</span> instance</div><div class=\"line\"></div><div class=\"line\">* <span class=\"type\">Reference</span> <span class=\"type\">Key</span>: e71f3bf5-d786<span class=\"number\">-4145</span><span class=\"number\">-8539</span><span class=\"number\">-584</span>afaecad1d</div><div class=\"line\">* <span class=\"type\">Device</span>: <span class=\"type\">Genymotion</span> generic <span class=\"type\">Google</span> <span class=\"type\">Nexus</span> <span class=\"number\">6</span> - <span class=\"number\">5.1</span><span class=\"number\">.0</span> - <span class=\"type\">API</span> <span class=\"number\">22</span> - <span class=\"number\">1440</span>x2560 vbox86p</div><div class=\"line\">* <span class=\"type\">Android</span> <span class=\"type\">Version</span>: <span class=\"number\">5.1</span> <span class=\"type\">API</span>: <span class=\"number\">22</span></div></pre></td></tr></table></figure>\n<p>也可以从<strong>action bar menu</strong>分享leak trace与heap dump文件。</p>\n<h2 id=\"VI-应该如何解决内存泄漏呢\"><a href=\"#VI-应该如何解决内存泄漏呢\" class=\"headerlink\" title=\"VI. 应该如何解决内存泄漏呢?\"></a>VI. 应该如何解决内存泄漏呢?</h2><p>一旦拥有了leak trace，就可以分析出哪个路径中的引用不应该存在，然后分析出引用依然存在的原因。通常情况是注册的监听没有反注册，或者是<code>close()</code>方法没有调用，或者是一个未知的类((通常也是没有句柄的对象，就纯new出来执行了某方法)hold住了外部类的引用。如果你分析不出你代码中的问题，别放弃，可以在<a href=\"http://stackoverflow.com/questions/tagged/leakcanary\">Stack Overflow question</a>(使用<code>leakcanary</code> 标签)中创建相关问题。</p>\n<h2 id=\"VII-我的泄漏是因为执行Android-SDK导致的！\"><a href=\"#VII-我的泄漏是因为执行Android-SDK导致的！\" class=\"headerlink\" title=\"VII. 我的泄漏是因为执行Android SDK导致的！\"></a>VII. 我的泄漏是因为执行Android SDK导致的！</h2><p>随着时间的推移，已经有一些已知的由于Android SDK的执行导致的内存泄漏得到了作为生厂商AOSP的修复。当发生这样的内存泄漏的时候，其实我们作为应用开发者能做的很少。对于这样的问题，LeakCanary已经有内建了一个忽略已知Android SDK泄漏的列表: <a href=\"https://github.com/square/leakcanary/blob/master/library/leakcanary-android/src/main/java/com/squareup/leakcanary/AndroidExcludedRefs.java\"><code>AndroidExcludedRefs.java</code></a>。如果你发现了新的，请提供leak trace、reference key、设备版本与Android版来<a href=\"https://github.com/square/leakcanary/issues/new\">创建问题</a>，当然如果能够提供一个heap dump的文件连接更好。</p>\n<p>这对于<strong>新发布的Android</strong>来说是特别重要的，你有机会能够帮助尽早发现新的内存泄漏，使整个Android社区受益。</p>\n<p>开发版本的快照: <a href=\"https://oss.sonatype.org/content/repositories/snapshots/\">Sonatype’s <code>snapshots</code> repository</a>。</p>\n<h2 id=\"VIII-超出leak-trace范围\"><a href=\"#VIII-超出leak-trace范围\" class=\"headerlink\" title=\"VIII. 超出leak trace范围\"></a>VIII. 超出leak trace范围</h2><p>通常leak trace是不够的，还需要通过<a href=\"http://eclipse.org/mat/\">MAT</a>或者<a href=\"https://www.yourkit.com/\">YourKit</a>来深挖heap dump，下面是你如何通过heap dump来找出泄漏:</p>\n<ol>\n<li>找到<code>com.squareup.leakcanary.KeyedWeakReference</code>所有的实例。</li>\n<li>对于每个实例，查看它的<code>key</code>成员变量。</li>\n<li>找到包含与LeakCanary报出的reference key相同<code>key</code>成员变量的<code>KeyedWeakReference</code>。</li>\n<li>那么这个<code>KeyedWeakReference</code>中的<code>reference</code>成员变量，就是你泄漏了的对象。</li>\n<li>到此为止，剩余的工作就是，开始查找到GC Roots最短路径(不包含弱引用)。</li>\n</ol>\n<h2 id=\"IX-定制\"><a href=\"#IX-定制\" class=\"headerlink\" title=\"IX. 定制\"></a>IX. 定制</h2><h4 id=\"图标与标注-Icon-and-Label\"><a href=\"#图标与标注-Icon-and-Label\" class=\"headerlink\" title=\"图标与标注(Icon and Label)\"></a>图标与标注(Icon and Label)</h4><p><code>DisplayLeakActivity</code>默认是使用默认的图标与标注，当然你可以通过在你的app中提供<code>R.drawable.__leak_canary_icon</code>与<code>R.string.__leak_canary_display_activity_label</code>来定制这个:</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">res/</div><div class=\"line\">  drawable-hdpi/</div><div class=\"line\">    __leak_canary_icon<span class=\"selector-class\">.png</span></div><div class=\"line\">  drawable-mdpi/</div><div class=\"line\">    __leak_canary_icon<span class=\"selector-class\">.png</span></div><div class=\"line\">  drawable-xhdpi/</div><div class=\"line\">    __leak_canary_icon<span class=\"selector-class\">.png</span></div><div class=\"line\">  drawable-xxhdpi/</div><div class=\"line\">    __leak_canary_icon<span class=\"selector-class\">.png</span></div><div class=\"line\">  drawable-xxxhdpi/</div><div class=\"line\">    __leak_canary_icon.png</div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"__leak_canary_display_activity_label\"</span>&gt;</span>MyLeaks<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"存储leak-traces\"><a href=\"#存储leak-traces\" class=\"headerlink\" title=\"存储leak traces\"></a>存储leak traces</h4><p><code>DisplayLeakActivity</code>最多在app目录中存储7个heap dumps与leak traces 文件。你可以通过在你的app中提供<code>R.integer.__leak_canary_max_stored_leaks</code>来定制这个:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">integer</span> <span class=\"attr\">name</span>=<span class=\"string\">\"__leak_canary_max_stored_leaks\"</span>&gt;</span>20<span class=\"tag\">&lt;/<span class=\"name\">integer</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"上传到服务器\"><a href=\"#上传到服务器\" class=\"headerlink\" title=\"上传到服务器\"></a>上传到服务器</h4><p>可以通过修改默认的行为来上传leak trace与heap dump到指定的服务器。</p>\n<p>创建一个你自己的<code>AbstractAnalysisResultService</code>。最简单的方法是在debug的app中继承<code>DefaultAnalysisResultService</code>:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LeakUploadService</span> <span class=\"keyword\">extends</span> <span class=\"title\">DefaultAnalysisResultService</span> </span>&#123;</div><div class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"keyword\">protected</span> void afterDefaultHandling(<span class=\"type\">HeapDump</span> heapDump, <span class=\"type\">AnalysisResult</span> result, <span class=\"type\">String</span> leakInfo) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!result.leakFound || result.excludedLeak) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    myServer.uploadLeakBlocking(heapDump.heapDumpFile, leakInfo);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>要确认发布的Application类使用无效的<code>RefWatcher</code>:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExampleApplication</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  public static <span class=\"type\">RefWatcher</span> getRefWatcher(<span class=\"type\">Context</span> context) &#123;</div><div class=\"line\">    <span class=\"type\">ExampleApplication</span> application = (<span class=\"type\">ExampleApplication</span>) context.getApplicationContext();</div><div class=\"line\">    <span class=\"keyword\">return</span> application.refWatcher;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">RefWatcher</span> refWatcher;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span> public void onCreate() &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate();</div><div class=\"line\">    refWatcher = installLeakCanary();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">protected</span> <span class=\"type\">RefWatcher</span> installLeakCanary() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">RefWatcher</span>.<span class=\"type\">DISABLED</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在你debug的Application类中创建一个自定义的<code>RefWatcher</code>:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DebugExampleApplication</span> <span class=\"keyword\">extends</span> <span class=\"title\">ExampleApplication</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">protected</span> <span class=\"type\">RefWatcher</span> installLeakCanary() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">LeakCanary</span>.install(app, <span class=\"type\">LeakUploadService</span>.<span class=\"keyword\">class</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>不要忘了在debug的manifest里面注册service:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></div><div class=\"line\">    &gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">application</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.example.DebugExampleApplication\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">service</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.example.LeakUploadService\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>你也可以上传leak traces到Slack或者HipChat，<a href=\"https://gist.github.com/pyricau/06c2c486d24f5f85f7f0\">这里是一个例子</a></p>\n<p><img src=\"https://raw.githubusercontent.com/Jacksgong/leakcanary/master/assets/icon_512.png\" alt=\"\"></p>\n<p><strong>LeakCanary</strong> 名称是为了表达<a href=\"http://en.wiktionary.org/wiki/canary_in_a_coal_mine\">canary in a coal mine</a>，因为LeakCanary是通过提供危险预警，检测风险的哨兵，维护者<a href=\"https://github.com/edenman\">@edenman</a>提的建议!</p>\n<h2 id=\"X-License\"><a href=\"#X-License\" class=\"headerlink\" title=\"X. License\"></a>X. License</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Copyright 2015 Square, Inc.</div><div class=\"line\"></div><div class=\"line\">Licensed under the Apache License, Version 2.0 (the \"License\");</div><div class=\"line\">you may not <span class=\"keyword\">use</span> this <span class=\"keyword\">file</span> <span class=\"keyword\">except</span> <span class=\"keyword\">in</span> compliance <span class=\"keyword\">with</span> the License.</div><div class=\"line\">You may obtain a copy <span class=\"keyword\">of</span> the License <span class=\"keyword\">at</span></div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">http</span>://www.apache.org/licenses/LICENSE<span class=\"number\">-2.0</span></div><div class=\"line\"></div><div class=\"line\">Unless <span class=\"keyword\">required</span> <span class=\"keyword\">by</span> applicable law <span class=\"keyword\">or</span> agreed <span class=\"keyword\">to</span> <span class=\"keyword\">in</span> writing, software</div><div class=\"line\"><span class=\"keyword\">distributed</span> <span class=\"keyword\">under</span> the License <span class=\"keyword\">is</span> <span class=\"keyword\">distributed</span> <span class=\"keyword\">on</span> an <span class=\"string\">\"AS IS\"</span> BASIS,</div><div class=\"line\"><span class=\"keyword\">WITHOUT</span> WARRANTIES <span class=\"keyword\">OR</span> CONDITIONS <span class=\"keyword\">OF</span> <span class=\"keyword\">ANY</span> KIND, either express <span class=\"keyword\">or</span> implied.</div><div class=\"line\">See the License <span class=\"keyword\">for</span> the specific <span class=\"keyword\">language</span> governing permissions <span class=\"keyword\">and</span></div><div class=\"line\">limitations <span class=\"keyword\">under</span> the License.</div></pre></td></tr></table></figure>"},{"title":"PhotoGallery、Volley、Picasso 比较","date":"2015-04-27T23:48:03.000Z","_content":"\n> 整理自: [solving-the-android-image-loading-problem-volley-vs-picasso](https://www.bignerdranch.com/blog/solving-the-android-image-loading-problem-volley-vs-picasso/)\n\n<!--more-->\n## I. PhotoGallery\n\n> 一个很简单的图片加载库\n\n#### 特点:\n- 优点:\n\n`简单`、`小`、`易于理解`\n\n- 缺点\n\n`使用不够简单`（每次初始化不得不按照生命周期调用/需要手动去清除已经不用的请求等）、`改起来相对复杂`\n\n> ps: 图片下载，单线程串行。\n\n\n#### 代码:\n\n- 创建使用\n\n```\n@Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        ...\n\n        mThumbnailThread = new ThumbnailDownloader<ImageView>(new Handler());\n        mThumbnailThread.setListener(new ThumbnailDownloader.Listener<ImageView>() {\n            public void onThumbnailDownloaded(ImageView imageView, Bitmap thumbnail) {\n                if (isVisible()) {\n                    imageView.setImageBitmap(thumbnail);\n                }\n            }\n        });\n        mThumbnailThread.start();\n        mThumbnailThread.getLooper();\n    }\n```\n\n\n- 清理下载队列\n\n```\n@Override\n    public void onDestroyView() {\n        super.onDestroyView();\n        mThumbnailThread.clearQueue();\n    }\n```\n\n- 完全退出\n\n```\n @Override\n    public void onDestroy() {\n        super.onDestroy();\n        mThumbnailThread.quit();\n    }\n```\n\n- 图片加载\n\n```\n private class GalleryItemAdapter extends ArrayAdapter<GalleryItem> {\n\n        ...\n\n        @Override\n        public View getView(int position, View convertView, ViewGroup parent) {\n\n            ...\n\n            GalleryItem item = getItem(position);\n            ImageView imageView = (ImageView)convertView\n                    .findViewById(R.id.gallery_item_imageView);\n            imageView.setImageResource(R.drawable.brian_up_close);\n            mThumbnailThread.queueThumbnail(imageView, item.getUrl());\n\n            return convertView;\n        }\n    }\n```\n\n## II. Picasso\n\n> - 组织: [Square](http://square.github.io)\n> - 地址: [https://github.com/square/picasso](https://github.com/square/picasso)\n> - 官方描述: Picasso通常使用一行代码就能够解决复杂的图片加载问题\n\n#### 代码:\n\n- 使用\n\n```\nprivate class GalleryItemAdapter extends ArrayAdapter<GalleryItem> {\n\n        ...\n\n        @Override\n        public View getView(int position, View convertView, ViewGroup parent) {\n\n            ...\n\n            GalleryItem item = getItem(position);\n            ImageView imageView = (ImageView)convertView\n                    .findViewById(R.id.gallery_item_imageView);\n\n            imageView.setImageResource(R.drawable.brian_up_close);\n            Picasso.with(getActivity())\n                .load(item.getUrl())\n                .placeholder(R.drawable.brian_up_close) // 如果不提供占位，Picasso会复写你的imageview的缩放比例，因此最好是提供一个占位\n                .centerCrop()  \n                .noFade() //取消默认的淡入动画\n                .into(imageView);\n\n            return convertView;\n        }\n    }\n```\n\n#### 特点\n\n- 优点:\n\n1. Picasso 提供了很多图片处理能力（如缩放、裁剪等等）（也支持加入我们个性化的图片处理），并且缓存的是**图片处理以后**的。\n\n2. Picasso 的调用接口十分简单清晰，调用起来很爽。\n\n3. Picasso 提供了一个自己的网络层，但是如果我们的网络层是使用基于`ExecutorService`，那么我们可以通过Picasso提供的接口，让Picasso的网络层也运行在相同的线程池中。\n\n4. Picasso 支持接入我们的**图片加载器**(image loads)，如果我们需要使用一些预加载之类的。\n\n5. Picasso 支持传入自定义的一些目标，而不是Imageview，如果我们需要最终的加载图片结果不是要作用在ImageView上的话。\n\n- 无法做到以下几点:\n\n1. 无法自动创建单独的图片下载器\n\n2. 无法存储 未压缩的图片到内存或者本地\n\n3. 无法 取消请求\n\n4. 无法 一次同时多个下载\n\n> ps: 由于缓存的是缩放以及裁剪过的图片，因此Picasso需要在调用时就获知需要多大的图片\n>     catch了`OutOfMemoryError`的crash\n\n## III. Volley\n\n> - 来自: Android dev team\n> - 官方: [https://android.googlesource.com/platform/frameworks/volley](https://android.googlesource.com/platform/frameworks/volley)\n> - 视频介绍: [https://developers.google.com/events/io/sessions/325304728](https://developers.google.com/events/io/sessions/325304728)\n> - 官方定位: 网络异步框架（一般我们只用到其中的网络与缓存部分）\n\n#### 代码:\n\n- 初始化\n\n```\n @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        ...\n\n        // 在实际的开发过程中，一般是在进入app的时候，初始化这两个共享实例，全局使用。\n        mQueue = Volley.newRequestQueue(getActivity());\n\n        mImageLoader = new ImageLoader(mQueue, new ImageCache() {\n            @Override\n            public void putBitmap(String key, Bitmap value) { }\n\n            @Override\n            public Bitmap getBitmap(String key) {\n                return null;\n            }\n        });\n\n        ...\n    }\n```\n\n- 使用\n\n```\n private class GalleryItemAdapter extends ArrayAdapter<GalleryItem> {\n\n        ...\n\n        @Override\n        public View getView(int position, View convertView, ViewGroup parent) {\n\n            ...\n\n            GalleryItem item = getItem(position);\n\n            // Volley可以用在一个普通的ImageView中，不过为了更简单的使用，Volley提供了一个NetworkImageView。\n            NetworkImageView imageView = (NetworkImageView)convertView\n                    .findViewById(R.id.gallery_item_imageView);\n            imageView.setDefaultImageResId(R.drawable.brian_up_close);\n            imageView.setImageUrl(item.getUrl(), mImageLoader);\n\n            return convertView;\n        }\n    }\n```\n\n\n#### 特点\n\n- 优点:\n\n1. 网络部分，并不是仅仅用于图片，它打算作为前端不可或缺的一部分。对于简单的REST服务的应用，这是一个很大的优势。\n\n2. `NetworkImageview`在清理这块相比Picasso而言，更暴力，并且GC方面更加保守。`NetworkImageView`依赖专门的强引用，并且清除所有的请求数据当ImageView发起了新的请求，或者是ImageView已经被移除了显示范围。\n\n3. 性能方面，本文并没有提及性能，但是在内存使用部分，更加着合理的管理。Volley还通过一系列有效的回调来到主线程来减少上下文的切换\n\n4. 支持`RequestFuture`（同步网络请求）(Volley apparently has futures, too. Check out RequestFuture if you’re interested.)\n\n5. 当需要处理高分辨率的图片压缩，Volley的唯一一个较好的解决方案。(目前Android的`high-res`的处理方法并不是很好，作者表示对报`OutOfMemoryError`这样的处理方法表示不解，但是又觉得这应该是保证可靠的图片处理的唯一方法)（作者在Volley与Picasso上测试了原图(高分辨率)的图片，结果: Picasso与Volley都没有crash，但是由于图片太大了，Picasso无法正常显示，但是Volley所有图片都很稳定的显示了）\n\n- 缺点:\n\n1. 由于Volley更好的处理NetworkImageView这种它提供的自定义View，因此替换起来可能会比较蛋疼。\n\n2. Volley的网络层完全自己实现，不支持如自定义的`ExecutorService`传入这种类似Picasso的机制，因此无法像Picasso一般支持我们自己统一的线程管理。\n\n3. 不像Picasso一样专注图片加载，而是专注与处理一个简单的，独立的网络框架。唯一一个可以diy接入的就是ImageCache这部分。\n\n4. 如果前端有某个请求是多重http请求，那么我们无法如此拓展Volley，只能通过在其之上建立。\n\n> ps: 缓存 Http 返回结果（也就是，每次都需要 解码数据 => 图片, 当需要正常显示的时候）\n\n## IV. Picasso vs Volley\n\n> Picasso 专注图片处理，Volley 解决更通用的问题\n\n\n#### 作者建议：\n- 如果已经有一个稳定的，大型的项目，那么Picasso是更好的选择。\n\n- 另一方面，如果是一个新的app，或者项目很小，可以直接让Volley充当后端网络架构，它可以解决绝大多数HTTP的负担。（这里不是很认同作者，如果是网络框架这边，我个人建议先看看Retrofit，具体可以看看这篇[Retrofit开发指南](https://github.com/bboyfeiyu/android-tech-frontier/tree/master/issue-7/Retrofit开发指南)）\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/PhotoGallery、Volley、Picasso-比较.md","raw":"title: PhotoGallery、Volley、Picasso 比较\ndate: 2015-04-28 07:48:03\npermalink: 2015/04/28/PhotoGallery、Volley、Picasso-比较\ntags:\n- PhotoGallery\n- Vollery\n- Picasso\n- 分析\n- Android\n\n---\n\n> 整理自: [solving-the-android-image-loading-problem-volley-vs-picasso](https://www.bignerdranch.com/blog/solving-the-android-image-loading-problem-volley-vs-picasso/)\n\n<!--more-->\n## I. PhotoGallery\n\n> 一个很简单的图片加载库\n\n#### 特点:\n- 优点:\n\n`简单`、`小`、`易于理解`\n\n- 缺点\n\n`使用不够简单`（每次初始化不得不按照生命周期调用/需要手动去清除已经不用的请求等）、`改起来相对复杂`\n\n> ps: 图片下载，单线程串行。\n\n\n#### 代码:\n\n- 创建使用\n\n```\n@Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        ...\n\n        mThumbnailThread = new ThumbnailDownloader<ImageView>(new Handler());\n        mThumbnailThread.setListener(new ThumbnailDownloader.Listener<ImageView>() {\n            public void onThumbnailDownloaded(ImageView imageView, Bitmap thumbnail) {\n                if (isVisible()) {\n                    imageView.setImageBitmap(thumbnail);\n                }\n            }\n        });\n        mThumbnailThread.start();\n        mThumbnailThread.getLooper();\n    }\n```\n\n\n- 清理下载队列\n\n```\n@Override\n    public void onDestroyView() {\n        super.onDestroyView();\n        mThumbnailThread.clearQueue();\n    }\n```\n\n- 完全退出\n\n```\n @Override\n    public void onDestroy() {\n        super.onDestroy();\n        mThumbnailThread.quit();\n    }\n```\n\n- 图片加载\n\n```\n private class GalleryItemAdapter extends ArrayAdapter<GalleryItem> {\n\n        ...\n\n        @Override\n        public View getView(int position, View convertView, ViewGroup parent) {\n\n            ...\n\n            GalleryItem item = getItem(position);\n            ImageView imageView = (ImageView)convertView\n                    .findViewById(R.id.gallery_item_imageView);\n            imageView.setImageResource(R.drawable.brian_up_close);\n            mThumbnailThread.queueThumbnail(imageView, item.getUrl());\n\n            return convertView;\n        }\n    }\n```\n\n## II. Picasso\n\n> - 组织: [Square](http://square.github.io)\n> - 地址: [https://github.com/square/picasso](https://github.com/square/picasso)\n> - 官方描述: Picasso通常使用一行代码就能够解决复杂的图片加载问题\n\n#### 代码:\n\n- 使用\n\n```\nprivate class GalleryItemAdapter extends ArrayAdapter<GalleryItem> {\n\n        ...\n\n        @Override\n        public View getView(int position, View convertView, ViewGroup parent) {\n\n            ...\n\n            GalleryItem item = getItem(position);\n            ImageView imageView = (ImageView)convertView\n                    .findViewById(R.id.gallery_item_imageView);\n\n            imageView.setImageResource(R.drawable.brian_up_close);\n            Picasso.with(getActivity())\n                .load(item.getUrl())\n                .placeholder(R.drawable.brian_up_close) // 如果不提供占位，Picasso会复写你的imageview的缩放比例，因此最好是提供一个占位\n                .centerCrop()  \n                .noFade() //取消默认的淡入动画\n                .into(imageView);\n\n            return convertView;\n        }\n    }\n```\n\n#### 特点\n\n- 优点:\n\n1. Picasso 提供了很多图片处理能力（如缩放、裁剪等等）（也支持加入我们个性化的图片处理），并且缓存的是**图片处理以后**的。\n\n2. Picasso 的调用接口十分简单清晰，调用起来很爽。\n\n3. Picasso 提供了一个自己的网络层，但是如果我们的网络层是使用基于`ExecutorService`，那么我们可以通过Picasso提供的接口，让Picasso的网络层也运行在相同的线程池中。\n\n4. Picasso 支持接入我们的**图片加载器**(image loads)，如果我们需要使用一些预加载之类的。\n\n5. Picasso 支持传入自定义的一些目标，而不是Imageview，如果我们需要最终的加载图片结果不是要作用在ImageView上的话。\n\n- 无法做到以下几点:\n\n1. 无法自动创建单独的图片下载器\n\n2. 无法存储 未压缩的图片到内存或者本地\n\n3. 无法 取消请求\n\n4. 无法 一次同时多个下载\n\n> ps: 由于缓存的是缩放以及裁剪过的图片，因此Picasso需要在调用时就获知需要多大的图片\n>     catch了`OutOfMemoryError`的crash\n\n## III. Volley\n\n> - 来自: Android dev team\n> - 官方: [https://android.googlesource.com/platform/frameworks/volley](https://android.googlesource.com/platform/frameworks/volley)\n> - 视频介绍: [https://developers.google.com/events/io/sessions/325304728](https://developers.google.com/events/io/sessions/325304728)\n> - 官方定位: 网络异步框架（一般我们只用到其中的网络与缓存部分）\n\n#### 代码:\n\n- 初始化\n\n```\n @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        ...\n\n        // 在实际的开发过程中，一般是在进入app的时候，初始化这两个共享实例，全局使用。\n        mQueue = Volley.newRequestQueue(getActivity());\n\n        mImageLoader = new ImageLoader(mQueue, new ImageCache() {\n            @Override\n            public void putBitmap(String key, Bitmap value) { }\n\n            @Override\n            public Bitmap getBitmap(String key) {\n                return null;\n            }\n        });\n\n        ...\n    }\n```\n\n- 使用\n\n```\n private class GalleryItemAdapter extends ArrayAdapter<GalleryItem> {\n\n        ...\n\n        @Override\n        public View getView(int position, View convertView, ViewGroup parent) {\n\n            ...\n\n            GalleryItem item = getItem(position);\n\n            // Volley可以用在一个普通的ImageView中，不过为了更简单的使用，Volley提供了一个NetworkImageView。\n            NetworkImageView imageView = (NetworkImageView)convertView\n                    .findViewById(R.id.gallery_item_imageView);\n            imageView.setDefaultImageResId(R.drawable.brian_up_close);\n            imageView.setImageUrl(item.getUrl(), mImageLoader);\n\n            return convertView;\n        }\n    }\n```\n\n\n#### 特点\n\n- 优点:\n\n1. 网络部分，并不是仅仅用于图片，它打算作为前端不可或缺的一部分。对于简单的REST服务的应用，这是一个很大的优势。\n\n2. `NetworkImageview`在清理这块相比Picasso而言，更暴力，并且GC方面更加保守。`NetworkImageView`依赖专门的强引用，并且清除所有的请求数据当ImageView发起了新的请求，或者是ImageView已经被移除了显示范围。\n\n3. 性能方面，本文并没有提及性能，但是在内存使用部分，更加着合理的管理。Volley还通过一系列有效的回调来到主线程来减少上下文的切换\n\n4. 支持`RequestFuture`（同步网络请求）(Volley apparently has futures, too. Check out RequestFuture if you’re interested.)\n\n5. 当需要处理高分辨率的图片压缩，Volley的唯一一个较好的解决方案。(目前Android的`high-res`的处理方法并不是很好，作者表示对报`OutOfMemoryError`这样的处理方法表示不解，但是又觉得这应该是保证可靠的图片处理的唯一方法)（作者在Volley与Picasso上测试了原图(高分辨率)的图片，结果: Picasso与Volley都没有crash，但是由于图片太大了，Picasso无法正常显示，但是Volley所有图片都很稳定的显示了）\n\n- 缺点:\n\n1. 由于Volley更好的处理NetworkImageView这种它提供的自定义View，因此替换起来可能会比较蛋疼。\n\n2. Volley的网络层完全自己实现，不支持如自定义的`ExecutorService`传入这种类似Picasso的机制，因此无法像Picasso一般支持我们自己统一的线程管理。\n\n3. 不像Picasso一样专注图片加载，而是专注与处理一个简单的，独立的网络框架。唯一一个可以diy接入的就是ImageCache这部分。\n\n4. 如果前端有某个请求是多重http请求，那么我们无法如此拓展Volley，只能通过在其之上建立。\n\n> ps: 缓存 Http 返回结果（也就是，每次都需要 解码数据 => 图片, 当需要正常显示的时候）\n\n## IV. Picasso vs Volley\n\n> Picasso 专注图片处理，Volley 解决更通用的问题\n\n\n#### 作者建议：\n- 如果已经有一个稳定的，大型的项目，那么Picasso是更好的选择。\n\n- 另一方面，如果是一个新的app，或者项目很小，可以直接让Volley充当后端网络架构，它可以解决绝大多数HTTP的负担。（这里不是很认同作者，如果是网络框架这边，我个人建议先看看Retrofit，具体可以看看这篇[Retrofit开发指南](https://github.com/bboyfeiyu/android-tech-frontier/tree/master/issue-7/Retrofit开发指南)）\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2015/04/28/PhotoGallery、Volley、Picasso-比较","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66hw000r95buthleclnn","content":"<blockquote>\n<p>整理自: <a href=\"https://www.bignerdranch.com/blog/solving-the-android-image-loading-problem-volley-vs-picasso/\" target=\"_blank\" rel=\"external\">solving-the-android-image-loading-problem-volley-vs-picasso</a></p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"I-PhotoGallery\"><a href=\"#I-PhotoGallery\" class=\"headerlink\" title=\"I. PhotoGallery\"></a>I. PhotoGallery</h2><blockquote>\n<p>一个很简单的图片加载库</p>\n</blockquote>\n<h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点:\"></a>特点:</h4><ul>\n<li>优点:</li>\n</ul>\n<p><code>简单</code>、<code>小</code>、<code>易于理解</code></p>\n<ul>\n<li>缺点</li>\n</ul>\n<p><code>使用不够简单</code>（每次初始化不得不按照生命周期调用/需要手动去清除已经不用的请求等）、<code>改起来相对复杂</code></p>\n<blockquote>\n<p>ps: 图片下载，单线程串行。</p>\n</blockquote>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码:\"></a>代码:</h4><ul>\n<li>创建使用</li>\n</ul>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\"></div><div class=\"line\">        ...</div><div class=\"line\"></div><div class=\"line\">        mThumbnailThread = <span class=\"keyword\">new</span> ThumbnailDownloader&lt;ImageView&gt;(<span class=\"keyword\">new</span> Handler());</div><div class=\"line\">        mThumbnailThread.setListener(<span class=\"keyword\">new</span> ThumbnailDownloader.Listener&lt;ImageView&gt;() &#123;</div><div class=\"line\">            <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onThumbnailDownloaded</span><span class=\"params\">(ImageView imageView, Bitmap thumbnail)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (isVisible()) &#123;</div><div class=\"line\">                    imageView.setImageBitmap(thumbnail);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        mThumbnailThread.start();</div><div class=\"line\">        mThumbnailThread.getLooper();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>清理下载队列</li>\n</ul>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onDestroyView</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDestroyView();</div><div class=\"line\">        mThumbnailThread.clearQueue();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>完全退出</li>\n</ul>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">       mThumbnailThread.quit();</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>图片加载</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GalleryItemAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">ArrayAdapter&lt;GalleryItem&gt;</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">       ...</div><div class=\"line\"></div><div class=\"line\">       <span class=\"meta\">@Override</span></div><div class=\"line\">       public <span class=\"type\">View</span> getView(int position, <span class=\"type\">View</span> convertView, <span class=\"type\">ViewGroup</span> parent) &#123;</div><div class=\"line\"></div><div class=\"line\">           ...</div><div class=\"line\"></div><div class=\"line\">           <span class=\"type\">GalleryItem</span> item = getItem(position);</div><div class=\"line\">           <span class=\"type\">ImageView</span> imageView = (<span class=\"type\">ImageView</span>)convertView</div><div class=\"line\">                   .findViewById(<span class=\"type\">R</span>.id.gallery_item_imageView);</div><div class=\"line\">           imageView.setImageResource(<span class=\"type\">R</span>.drawable.brian_up_close);</div><div class=\"line\">           mThumbnailThread.queueThumbnail(imageView, item.getUrl());</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">return</span> convertView;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"II-Picasso\"><a href=\"#II-Picasso\" class=\"headerlink\" title=\"II. Picasso\"></a>II. Picasso</h2><blockquote>\n<ul>\n<li>组织: <a href=\"http://square.github.io\" target=\"_blank\" rel=\"external\">Square</a></li>\n<li>地址: <a href=\"https://github.com/square/picasso\" target=\"_blank\" rel=\"external\">https://github.com/square/picasso</a></li>\n<li>官方描述: Picasso通常使用一行代码就能够解决复杂的图片加载问题</li>\n</ul>\n</blockquote>\n<h4 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码:\"></a>代码:</h4><ul>\n<li>使用</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GalleryItemAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">ArrayAdapter&lt;GalleryItem&gt;</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        ...</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        public <span class=\"type\">View</span> getView(int position, <span class=\"type\">View</span> convertView, <span class=\"type\">ViewGroup</span> parent) &#123;</div><div class=\"line\"></div><div class=\"line\">            ...</div><div class=\"line\"></div><div class=\"line\">            <span class=\"type\">GalleryItem</span> item = getItem(position);</div><div class=\"line\">            <span class=\"type\">ImageView</span> imageView = (<span class=\"type\">ImageView</span>)convertView</div><div class=\"line\">                    .findViewById(<span class=\"type\">R</span>.id.gallery_item_imageView);</div><div class=\"line\"></div><div class=\"line\">            imageView.setImageResource(<span class=\"type\">R</span>.drawable.brian_up_close);</div><div class=\"line\">            <span class=\"type\">Picasso</span>.<span class=\"keyword\">with</span>(getActivity())</div><div class=\"line\">                .load(item.getUrl())</div><div class=\"line\">                .placeholder(<span class=\"type\">R</span>.drawable.brian_up_close) <span class=\"comment\">// 如果不提供占位，Picasso会复写你的imageview的缩放比例，因此最好是提供一个占位</span></div><div class=\"line\">                .centerCrop()  </div><div class=\"line\">                .noFade() <span class=\"comment\">//取消默认的淡入动画</span></div><div class=\"line\">                .into(imageView);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">return</span> convertView;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"特点-1\"><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>优点:</li>\n</ul>\n<ol>\n<li><p>Picasso 提供了很多图片处理能力（如缩放、裁剪等等）（也支持加入我们个性化的图片处理），并且缓存的是<strong>图片处理以后</strong>的。</p>\n</li>\n<li><p>Picasso 的调用接口十分简单清晰，调用起来很爽。</p>\n</li>\n<li><p>Picasso 提供了一个自己的网络层，但是如果我们的网络层是使用基于<code>ExecutorService</code>，那么我们可以通过Picasso提供的接口，让Picasso的网络层也运行在相同的线程池中。</p>\n</li>\n<li><p>Picasso 支持接入我们的<strong>图片加载器</strong>(image loads)，如果我们需要使用一些预加载之类的。</p>\n</li>\n<li><p>Picasso 支持传入自定义的一些目标，而不是Imageview，如果我们需要最终的加载图片结果不是要作用在ImageView上的话。</p>\n</li>\n</ol>\n<ul>\n<li>无法做到以下几点:</li>\n</ul>\n<ol>\n<li><p>无法自动创建单独的图片下载器</p>\n</li>\n<li><p>无法存储 未压缩的图片到内存或者本地</p>\n</li>\n<li><p>无法 取消请求</p>\n</li>\n<li><p>无法 一次同时多个下载</p>\n</li>\n</ol>\n<blockquote>\n<p>ps: 由于缓存的是缩放以及裁剪过的图片，因此Picasso需要在调用时就获知需要多大的图片<br>    catch了<code>OutOfMemoryError</code>的crash</p>\n</blockquote>\n<h2 id=\"III-Volley\"><a href=\"#III-Volley\" class=\"headerlink\" title=\"III. Volley\"></a>III. Volley</h2><blockquote>\n<ul>\n<li>来自: Android dev team</li>\n<li>官方: <a href=\"https://android.googlesource.com/platform/frameworks/volley\" target=\"_blank\" rel=\"external\">https://android.googlesource.com/platform/frameworks/volley</a></li>\n<li>视频介绍: <a href=\"https://developers.google.com/events/io/sessions/325304728\" target=\"_blank\" rel=\"external\">https://developers.google.com/events/io/sessions/325304728</a></li>\n<li>官方定位: 网络异步框架（一般我们只用到其中的网络与缓存部分）</li>\n</ul>\n</blockquote>\n<h4 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码:\"></a>代码:</h4><ul>\n<li>初始化</li>\n</ul>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\"></div><div class=\"line\">       ...</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">// 在实际的开发过程中，一般是在进入app的时候，初始化这两个共享实例，全局使用。</span></div><div class=\"line\">       mQueue = Volley.newRequestQueue(getActivity());</div><div class=\"line\"></div><div class=\"line\">       mImageLoader = <span class=\"keyword\">new</span> ImageLoader(mQueue, <span class=\"keyword\">new</span> ImageCache() &#123;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">putBitmap</span><span class=\"params\">(String key, Bitmap value)</span> </span>&#123; &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"keyword\">public</span> <span class=\"function\">Bitmap <span class=\"title\">getBitmap</span><span class=\"params\">(String key)</span> </span>&#123;</div><div class=\"line\">               <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;);</div><div class=\"line\"></div><div class=\"line\">       ...</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>使用</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GalleryItemAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">ArrayAdapter&lt;GalleryItem&gt;</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">       ...</div><div class=\"line\"></div><div class=\"line\">       <span class=\"meta\">@Override</span></div><div class=\"line\">       public <span class=\"type\">View</span> getView(int position, <span class=\"type\">View</span> convertView, <span class=\"type\">ViewGroup</span> parent) &#123;</div><div class=\"line\"></div><div class=\"line\">           ...</div><div class=\"line\"></div><div class=\"line\">           <span class=\"type\">GalleryItem</span> item = getItem(position);</div><div class=\"line\"></div><div class=\"line\">           <span class=\"comment\">// Volley可以用在一个普通的ImageView中，不过为了更简单的使用，Volley提供了一个NetworkImageView。</span></div><div class=\"line\">           <span class=\"type\">NetworkImageView</span> imageView = (<span class=\"type\">NetworkImageView</span>)convertView</div><div class=\"line\">                   .findViewById(<span class=\"type\">R</span>.id.gallery_item_imageView);</div><div class=\"line\">           imageView.setDefaultImageResId(<span class=\"type\">R</span>.drawable.brian_up_close);</div><div class=\"line\">           imageView.setImageUrl(item.getUrl(), mImageLoader);</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">return</span> convertView;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"特点-2\"><a href=\"#特点-2\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>优点:</li>\n</ul>\n<ol>\n<li><p>网络部分，并不是仅仅用于图片，它打算作为前端不可或缺的一部分。对于简单的REST服务的应用，这是一个很大的优势。</p>\n</li>\n<li><p><code>NetworkImageview</code>在清理这块相比Picasso而言，更暴力，并且GC方面更加保守。<code>NetworkImageView</code>依赖专门的强引用，并且清除所有的请求数据当ImageView发起了新的请求，或者是ImageView已经被移除了显示范围。</p>\n</li>\n<li><p>性能方面，本文并没有提及性能，但是在内存使用部分，更加着合理的管理。Volley还通过一系列有效的回调来到主线程来减少上下文的切换</p>\n</li>\n<li><p>支持<code>RequestFuture</code>（同步网络请求）(Volley apparently has futures, too. Check out RequestFuture if you’re interested.)</p>\n</li>\n<li><p>当需要处理高分辨率的图片压缩，Volley的唯一一个较好的解决方案。(目前Android的<code>high-res</code>的处理方法并不是很好，作者表示对报<code>OutOfMemoryError</code>这样的处理方法表示不解，但是又觉得这应该是保证可靠的图片处理的唯一方法)（作者在Volley与Picasso上测试了原图(高分辨率)的图片，结果: Picasso与Volley都没有crash，但是由于图片太大了，Picasso无法正常显示，但是Volley所有图片都很稳定的显示了）</p>\n</li>\n</ol>\n<ul>\n<li>缺点:</li>\n</ul>\n<ol>\n<li><p>由于Volley更好的处理NetworkImageView这种它提供的自定义View，因此替换起来可能会比较蛋疼。</p>\n</li>\n<li><p>Volley的网络层完全自己实现，不支持如自定义的<code>ExecutorService</code>传入这种类似Picasso的机制，因此无法像Picasso一般支持我们自己统一的线程管理。</p>\n</li>\n<li><p>不像Picasso一样专注图片加载，而是专注与处理一个简单的，独立的网络框架。唯一一个可以diy接入的就是ImageCache这部分。</p>\n</li>\n<li><p>如果前端有某个请求是多重http请求，那么我们无法如此拓展Volley，只能通过在其之上建立。</p>\n</li>\n</ol>\n<blockquote>\n<p>ps: 缓存 Http 返回结果（也就是，每次都需要 解码数据 =&gt; 图片, 当需要正常显示的时候）</p>\n</blockquote>\n<h2 id=\"IV-Picasso-vs-Volley\"><a href=\"#IV-Picasso-vs-Volley\" class=\"headerlink\" title=\"IV. Picasso vs Volley\"></a>IV. Picasso vs Volley</h2><blockquote>\n<p>Picasso 专注图片处理，Volley 解决更通用的问题</p>\n</blockquote>\n<h4 id=\"作者建议：\"><a href=\"#作者建议：\" class=\"headerlink\" title=\"作者建议：\"></a>作者建议：</h4><ul>\n<li><p>如果已经有一个稳定的，大型的项目，那么Picasso是更好的选择。</p>\n</li>\n<li><p>另一方面，如果是一个新的app，或者项目很小，可以直接让Volley充当后端网络架构，它可以解决绝大多数HTTP的负担。（这里不是很认同作者，如果是网络框架这边，我个人建议先看看Retrofit，具体可以看看这篇<a href=\"https://github.com/bboyfeiyu/android-tech-frontier/tree/master/issue-7/Retrofit开发指南\" target=\"_blank\" rel=\"external\">Retrofit开发指南</a>）</p>\n</li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>整理自: <a href=\"https://www.bignerdranch.com/blog/solving-the-android-image-loading-problem-volley-vs-picasso/\">solving-the-android-image-loading-problem-volley-vs-picasso</a></p>\n</blockquote>","more":"<h2 id=\"I-PhotoGallery\"><a href=\"#I-PhotoGallery\" class=\"headerlink\" title=\"I. PhotoGallery\"></a>I. PhotoGallery</h2><blockquote>\n<p>一个很简单的图片加载库</p>\n</blockquote>\n<h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点:\"></a>特点:</h4><ul>\n<li>优点:</li>\n</ul>\n<p><code>简单</code>、<code>小</code>、<code>易于理解</code></p>\n<ul>\n<li>缺点</li>\n</ul>\n<p><code>使用不够简单</code>（每次初始化不得不按照生命周期调用/需要手动去清除已经不用的请求等）、<code>改起来相对复杂</code></p>\n<blockquote>\n<p>ps: 图片下载，单线程串行。</p>\n</blockquote>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码:\"></a>代码:</h4><ul>\n<li>创建使用</li>\n</ul>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\"></div><div class=\"line\">        ...</div><div class=\"line\"></div><div class=\"line\">        mThumbnailThread = <span class=\"keyword\">new</span> ThumbnailDownloader&lt;ImageView&gt;(<span class=\"keyword\">new</span> Handler());</div><div class=\"line\">        mThumbnailThread.setListener(<span class=\"keyword\">new</span> ThumbnailDownloader.Listener&lt;ImageView&gt;() &#123;</div><div class=\"line\">            <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onThumbnailDownloaded</span><span class=\"params\">(ImageView imageView, Bitmap thumbnail)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (isVisible()) &#123;</div><div class=\"line\">                    imageView.setImageBitmap(thumbnail);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        mThumbnailThread.start();</div><div class=\"line\">        mThumbnailThread.getLooper();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>清理下载队列</li>\n</ul>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onDestroyView</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDestroyView();</div><div class=\"line\">        mThumbnailThread.clearQueue();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>完全退出</li>\n</ul>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">       mThumbnailThread.quit();</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>图片加载</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GalleryItemAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">ArrayAdapter&lt;GalleryItem&gt;</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">       ...</div><div class=\"line\"></div><div class=\"line\">       <span class=\"meta\">@Override</span></div><div class=\"line\">       public <span class=\"type\">View</span> getView(int position, <span class=\"type\">View</span> convertView, <span class=\"type\">ViewGroup</span> parent) &#123;</div><div class=\"line\"></div><div class=\"line\">           ...</div><div class=\"line\"></div><div class=\"line\">           <span class=\"type\">GalleryItem</span> item = getItem(position);</div><div class=\"line\">           <span class=\"type\">ImageView</span> imageView = (<span class=\"type\">ImageView</span>)convertView</div><div class=\"line\">                   .findViewById(<span class=\"type\">R</span>.id.gallery_item_imageView);</div><div class=\"line\">           imageView.setImageResource(<span class=\"type\">R</span>.drawable.brian_up_close);</div><div class=\"line\">           mThumbnailThread.queueThumbnail(imageView, item.getUrl());</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">return</span> convertView;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"II-Picasso\"><a href=\"#II-Picasso\" class=\"headerlink\" title=\"II. Picasso\"></a>II. Picasso</h2><blockquote>\n<ul>\n<li>组织: <a href=\"http://square.github.io\">Square</a></li>\n<li>地址: <a href=\"https://github.com/square/picasso\">https://github.com/square/picasso</a></li>\n<li>官方描述: Picasso通常使用一行代码就能够解决复杂的图片加载问题</li>\n</ul>\n</blockquote>\n<h4 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码:\"></a>代码:</h4><ul>\n<li>使用</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GalleryItemAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">ArrayAdapter&lt;GalleryItem&gt;</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        ...</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        public <span class=\"type\">View</span> getView(int position, <span class=\"type\">View</span> convertView, <span class=\"type\">ViewGroup</span> parent) &#123;</div><div class=\"line\"></div><div class=\"line\">            ...</div><div class=\"line\"></div><div class=\"line\">            <span class=\"type\">GalleryItem</span> item = getItem(position);</div><div class=\"line\">            <span class=\"type\">ImageView</span> imageView = (<span class=\"type\">ImageView</span>)convertView</div><div class=\"line\">                    .findViewById(<span class=\"type\">R</span>.id.gallery_item_imageView);</div><div class=\"line\"></div><div class=\"line\">            imageView.setImageResource(<span class=\"type\">R</span>.drawable.brian_up_close);</div><div class=\"line\">            <span class=\"type\">Picasso</span>.<span class=\"keyword\">with</span>(getActivity())</div><div class=\"line\">                .load(item.getUrl())</div><div class=\"line\">                .placeholder(<span class=\"type\">R</span>.drawable.brian_up_close) <span class=\"comment\">// 如果不提供占位，Picasso会复写你的imageview的缩放比例，因此最好是提供一个占位</span></div><div class=\"line\">                .centerCrop()  </div><div class=\"line\">                .noFade() <span class=\"comment\">//取消默认的淡入动画</span></div><div class=\"line\">                .into(imageView);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">return</span> convertView;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"特点-1\"><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>优点:</li>\n</ul>\n<ol>\n<li><p>Picasso 提供了很多图片处理能力（如缩放、裁剪等等）（也支持加入我们个性化的图片处理），并且缓存的是<strong>图片处理以后</strong>的。</p>\n</li>\n<li><p>Picasso 的调用接口十分简单清晰，调用起来很爽。</p>\n</li>\n<li><p>Picasso 提供了一个自己的网络层，但是如果我们的网络层是使用基于<code>ExecutorService</code>，那么我们可以通过Picasso提供的接口，让Picasso的网络层也运行在相同的线程池中。</p>\n</li>\n<li><p>Picasso 支持接入我们的<strong>图片加载器</strong>(image loads)，如果我们需要使用一些预加载之类的。</p>\n</li>\n<li><p>Picasso 支持传入自定义的一些目标，而不是Imageview，如果我们需要最终的加载图片结果不是要作用在ImageView上的话。</p>\n</li>\n</ol>\n<ul>\n<li>无法做到以下几点:</li>\n</ul>\n<ol>\n<li><p>无法自动创建单独的图片下载器</p>\n</li>\n<li><p>无法存储 未压缩的图片到内存或者本地</p>\n</li>\n<li><p>无法 取消请求</p>\n</li>\n<li><p>无法 一次同时多个下载</p>\n</li>\n</ol>\n<blockquote>\n<p>ps: 由于缓存的是缩放以及裁剪过的图片，因此Picasso需要在调用时就获知需要多大的图片<br>    catch了<code>OutOfMemoryError</code>的crash</p>\n</blockquote>\n<h2 id=\"III-Volley\"><a href=\"#III-Volley\" class=\"headerlink\" title=\"III. Volley\"></a>III. Volley</h2><blockquote>\n<ul>\n<li>来自: Android dev team</li>\n<li>官方: <a href=\"https://android.googlesource.com/platform/frameworks/volley\">https://android.googlesource.com/platform/frameworks/volley</a></li>\n<li>视频介绍: <a href=\"https://developers.google.com/events/io/sessions/325304728\">https://developers.google.com/events/io/sessions/325304728</a></li>\n<li>官方定位: 网络异步框架（一般我们只用到其中的网络与缓存部分）</li>\n</ul>\n</blockquote>\n<h4 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码:\"></a>代码:</h4><ul>\n<li>初始化</li>\n</ul>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\"></div><div class=\"line\">       ...</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">// 在实际的开发过程中，一般是在进入app的时候，初始化这两个共享实例，全局使用。</span></div><div class=\"line\">       mQueue = Volley.newRequestQueue(getActivity());</div><div class=\"line\"></div><div class=\"line\">       mImageLoader = <span class=\"keyword\">new</span> ImageLoader(mQueue, <span class=\"keyword\">new</span> ImageCache() &#123;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">putBitmap</span><span class=\"params\">(String key, Bitmap value)</span> </span>&#123; &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"keyword\">public</span> <span class=\"function\">Bitmap <span class=\"title\">getBitmap</span><span class=\"params\">(String key)</span> </span>&#123;</div><div class=\"line\">               <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;);</div><div class=\"line\"></div><div class=\"line\">       ...</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>使用</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GalleryItemAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">ArrayAdapter&lt;GalleryItem&gt;</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">       ...</div><div class=\"line\"></div><div class=\"line\">       <span class=\"meta\">@Override</span></div><div class=\"line\">       public <span class=\"type\">View</span> getView(int position, <span class=\"type\">View</span> convertView, <span class=\"type\">ViewGroup</span> parent) &#123;</div><div class=\"line\"></div><div class=\"line\">           ...</div><div class=\"line\"></div><div class=\"line\">           <span class=\"type\">GalleryItem</span> item = getItem(position);</div><div class=\"line\"></div><div class=\"line\">           <span class=\"comment\">// Volley可以用在一个普通的ImageView中，不过为了更简单的使用，Volley提供了一个NetworkImageView。</span></div><div class=\"line\">           <span class=\"type\">NetworkImageView</span> imageView = (<span class=\"type\">NetworkImageView</span>)convertView</div><div class=\"line\">                   .findViewById(<span class=\"type\">R</span>.id.gallery_item_imageView);</div><div class=\"line\">           imageView.setDefaultImageResId(<span class=\"type\">R</span>.drawable.brian_up_close);</div><div class=\"line\">           imageView.setImageUrl(item.getUrl(), mImageLoader);</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">return</span> convertView;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"特点-2\"><a href=\"#特点-2\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>优点:</li>\n</ul>\n<ol>\n<li><p>网络部分，并不是仅仅用于图片，它打算作为前端不可或缺的一部分。对于简单的REST服务的应用，这是一个很大的优势。</p>\n</li>\n<li><p><code>NetworkImageview</code>在清理这块相比Picasso而言，更暴力，并且GC方面更加保守。<code>NetworkImageView</code>依赖专门的强引用，并且清除所有的请求数据当ImageView发起了新的请求，或者是ImageView已经被移除了显示范围。</p>\n</li>\n<li><p>性能方面，本文并没有提及性能，但是在内存使用部分，更加着合理的管理。Volley还通过一系列有效的回调来到主线程来减少上下文的切换</p>\n</li>\n<li><p>支持<code>RequestFuture</code>（同步网络请求）(Volley apparently has futures, too. Check out RequestFuture if you’re interested.)</p>\n</li>\n<li><p>当需要处理高分辨率的图片压缩，Volley的唯一一个较好的解决方案。(目前Android的<code>high-res</code>的处理方法并不是很好，作者表示对报<code>OutOfMemoryError</code>这样的处理方法表示不解，但是又觉得这应该是保证可靠的图片处理的唯一方法)（作者在Volley与Picasso上测试了原图(高分辨率)的图片，结果: Picasso与Volley都没有crash，但是由于图片太大了，Picasso无法正常显示，但是Volley所有图片都很稳定的显示了）</p>\n</li>\n</ol>\n<ul>\n<li>缺点:</li>\n</ul>\n<ol>\n<li><p>由于Volley更好的处理NetworkImageView这种它提供的自定义View，因此替换起来可能会比较蛋疼。</p>\n</li>\n<li><p>Volley的网络层完全自己实现，不支持如自定义的<code>ExecutorService</code>传入这种类似Picasso的机制，因此无法像Picasso一般支持我们自己统一的线程管理。</p>\n</li>\n<li><p>不像Picasso一样专注图片加载，而是专注与处理一个简单的，独立的网络框架。唯一一个可以diy接入的就是ImageCache这部分。</p>\n</li>\n<li><p>如果前端有某个请求是多重http请求，那么我们无法如此拓展Volley，只能通过在其之上建立。</p>\n</li>\n</ol>\n<blockquote>\n<p>ps: 缓存 Http 返回结果（也就是，每次都需要 解码数据 =&gt; 图片, 当需要正常显示的时候）</p>\n</blockquote>\n<h2 id=\"IV-Picasso-vs-Volley\"><a href=\"#IV-Picasso-vs-Volley\" class=\"headerlink\" title=\"IV. Picasso vs Volley\"></a>IV. Picasso vs Volley</h2><blockquote>\n<p>Picasso 专注图片处理，Volley 解决更通用的问题</p>\n</blockquote>\n<h4 id=\"作者建议：\"><a href=\"#作者建议：\" class=\"headerlink\" title=\"作者建议：\"></a>作者建议：</h4><ul>\n<li><p>如果已经有一个稳定的，大型的项目，那么Picasso是更好的选择。</p>\n</li>\n<li><p>另一方面，如果是一个新的app，或者项目很小，可以直接让Volley充当后端网络架构，它可以解决绝大多数HTTP的负担。（这里不是很认同作者，如果是网络框架这边，我个人建议先看看Retrofit，具体可以看看这篇<a href=\"https://github.com/bboyfeiyu/android-tech-frontier/tree/master/issue-7/Retrofit开发指南\">Retrofit开发指南</a>）</p>\n</li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"Repair broken image url in wordpress posts","date":"2015-01-22T06:13:03.000Z","_content":"\n>I changed my vps server recently, and I had to migrating my wordpress blog too. I found there are several trouble when I completed migrating, and the most serious trouble is some image in some posts was broken. so here come.\n\n<!--more-->\n\n---\n### How to use\n####一、 Just run python:\n\n```\npython wordpress_fix_img.py\n```\n####二、 Input data:\n\n```\nwordpress path(example: /var/www/blog.dreamtobe.cn/html/): [your wordpress absolute path]\ndomain(example: http://blog.dreamtobe.cn): [your wordpress blog domain]\nmysql user name: [your wordpress blog mysql user name]\nmysql password: [your wordpress blog mysql password]\nmysql blog database: [your wordpress blog mysql database name]\n```\n####三、Auto find broken image\n\nIn this phase, will auto find break image by python and print all image url in posts. Just like:\n\n```\n2092Android UI设计 layout布局 屏幕底部的菜单栏 动画切换Activity\n---------------------\n\nhttp://blog.dreamtobe.cn/wp-content/uploads/2012/12/13064789290.png\n/var/www/blog.dreamtobe.cn/html//wp-content/uploads/2012/12/13064789290.png\n\n2093判断字符串string是数字、json结构、xml结构\n---------------------\n\n2094Android 搜索关键字飞入飞出效果\n---------------------\n\n2095android ViewFlipper 左右滑动效果\n---------------------\n\nhttp://blog.dreamtobe.cn/wp-content/uploads/2012/12/6597299564586277972.jpg\n/var/www/blog.dreamtobe.cn/html//wp-content/uploads/2012/12/6597299564586277972.jpg\n\nhttp://blog.dreamtobe.cn/wp-content/uploads/2012/12/97108866982854788.jpg\n/var/www/blog.dreamtobe.cn/html//wp-content/uploads/2012/12/97108866982854788.jpg\n\nhttp://blog.dreamtobe.cn/wp-content/uploads/2012/12/2493868293673906770.jpg\n/var/www/blog.dreamtobe.cn/html//wp-content/uploads/2012/12/2493868293673906770.jpg\n\n2096在activity中实例化 layout（利用xml创建layout)\n---------------------\n```\n####四、Provide right image name\nIn 3 phase, you need provide right image file name when find break image, such as:\n\n```\nhttp://blog.dreamtobe.cn/wp-content/uploads/2014/12/endDocument1.jpg\n/var/www/blog.dreamtobe.cn/html//wp-content/uploads/2014/12/endDocument1.jpg\n\nfile not exist, new image file name: [enter right image file name](e.g endDocument.jpg)\n```\nPress enter, and python will autocompleted image right url, and output:\n\n```\nnew image url:http://blog.dreamtobe.cn/wp-content/uploads/2014/12/endDocument.jpg\n```\nAnd after the completion of the full content of the post scan output:\n\n```\nupdate done. ID =2160L\n```\n#### 五、Repeate 3~4 & end\nAs end will output:\n\n```\nComplete scan, replace 25 image url from 21 posts\n```\n\n\n### Github URL & Download\n\n[https://github.com/Jacksgong/wordpress-image-rescue](https://github.com/Jacksgong/wordpress-image-rescue)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/Repair-broken-image-url-in-wordpress-posts.md","raw":"title: Repair broken image url in wordpress posts\ndate: 2015-01-22 14:13:03\npermalink: 2015/01/22/Repair-broken-image-url-in-wordpress-posts\ntags:\n- 项目\n- python\n- wordpress\n\n---\n\n>I changed my vps server recently, and I had to migrating my wordpress blog too. I found there are several trouble when I completed migrating, and the most serious trouble is some image in some posts was broken. so here come.\n\n<!--more-->\n\n---\n### How to use\n####一、 Just run python:\n\n```\npython wordpress_fix_img.py\n```\n####二、 Input data:\n\n```\nwordpress path(example: /var/www/blog.dreamtobe.cn/html/): [your wordpress absolute path]\ndomain(example: http://blog.dreamtobe.cn): [your wordpress blog domain]\nmysql user name: [your wordpress blog mysql user name]\nmysql password: [your wordpress blog mysql password]\nmysql blog database: [your wordpress blog mysql database name]\n```\n####三、Auto find broken image\n\nIn this phase, will auto find break image by python and print all image url in posts. Just like:\n\n```\n2092Android UI设计 layout布局 屏幕底部的菜单栏 动画切换Activity\n---------------------\n\nhttp://blog.dreamtobe.cn/wp-content/uploads/2012/12/13064789290.png\n/var/www/blog.dreamtobe.cn/html//wp-content/uploads/2012/12/13064789290.png\n\n2093判断字符串string是数字、json结构、xml结构\n---------------------\n\n2094Android 搜索关键字飞入飞出效果\n---------------------\n\n2095android ViewFlipper 左右滑动效果\n---------------------\n\nhttp://blog.dreamtobe.cn/wp-content/uploads/2012/12/6597299564586277972.jpg\n/var/www/blog.dreamtobe.cn/html//wp-content/uploads/2012/12/6597299564586277972.jpg\n\nhttp://blog.dreamtobe.cn/wp-content/uploads/2012/12/97108866982854788.jpg\n/var/www/blog.dreamtobe.cn/html//wp-content/uploads/2012/12/97108866982854788.jpg\n\nhttp://blog.dreamtobe.cn/wp-content/uploads/2012/12/2493868293673906770.jpg\n/var/www/blog.dreamtobe.cn/html//wp-content/uploads/2012/12/2493868293673906770.jpg\n\n2096在activity中实例化 layout（利用xml创建layout)\n---------------------\n```\n####四、Provide right image name\nIn 3 phase, you need provide right image file name when find break image, such as:\n\n```\nhttp://blog.dreamtobe.cn/wp-content/uploads/2014/12/endDocument1.jpg\n/var/www/blog.dreamtobe.cn/html//wp-content/uploads/2014/12/endDocument1.jpg\n\nfile not exist, new image file name: [enter right image file name](e.g endDocument.jpg)\n```\nPress enter, and python will autocompleted image right url, and output:\n\n```\nnew image url:http://blog.dreamtobe.cn/wp-content/uploads/2014/12/endDocument.jpg\n```\nAnd after the completion of the full content of the post scan output:\n\n```\nupdate done. ID =2160L\n```\n#### 五、Repeate 3~4 & end\nAs end will output:\n\n```\nComplete scan, replace 25 image url from 21 posts\n```\n\n\n### Github URL & Download\n\n[https://github.com/Jacksgong/wordpress-image-rescue](https://github.com/Jacksgong/wordpress-image-rescue)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2015/01/22/Repair-broken-image-url-in-wordpress-posts","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66hw000u95buy1lcmv7f","content":"<blockquote>\n<p>I changed my vps server recently, and I had to migrating my wordpress blog too. I found there are several trouble when I completed migrating, and the most serious trouble is some image in some posts was broken. so here come.</p>\n</blockquote>\n<a id=\"more\"></a>\n<hr>\n<h3 id=\"How-to-use\"><a href=\"#How-to-use\" class=\"headerlink\" title=\"How to use\"></a>How to use</h3><p>####一、 Just run python:</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">python</span> wordpress_fix_img.<span class=\"keyword\">py</span></div></pre></td></tr></table></figure>\n<p>####二、 Input data:</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">wordpress path(<span class=\"string\">example:</span> <span class=\"regexp\">/var/</span>www<span class=\"regexp\">/blog.dreamtobe.cn/</span>html/): [your wordpress absolute path]</div><div class=\"line\">domain(<span class=\"string\">example:</span> <span class=\"string\">http:</span><span class=\"comment\">//blog.dreamtobe.cn): [your wordpress blog domain]</span></div><div class=\"line\">mysql user <span class=\"string\">name:</span> [your wordpress blog mysql user name]</div><div class=\"line\">mysql <span class=\"string\">password:</span> [your wordpress blog mysql password]</div><div class=\"line\">mysql blog <span class=\"string\">database:</span> [your wordpress blog mysql database name]</div></pre></td></tr></table></figure>\n<p>####三、Auto find broken image</p>\n<p>In this phase, will auto find break image by python and print all image url in posts. Just like:</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">2092Android UI设计 layout布局 屏幕底部的菜单栏 动画切换Activity</span></div><div class=\"line\">---------------------</div><div class=\"line\"></div><div class=\"line\">http://blog.dreamtobe.cn/wp-content/uploads/2012/12/13064789290.png</div><div class=\"line\">/var/www/blog.dreamtobe.cn/html//wp-content/uploads/2012/12/13064789290.png</div><div class=\"line\"></div><div class=\"line\"><span class=\"section\">2093判断字符串string是数字、json结构、xml结构</span></div><div class=\"line\">---------------------</div><div class=\"line\"></div><div class=\"line\"><span class=\"section\">2094Android 搜索关键字飞入飞出效果</span></div><div class=\"line\">---------------------</div><div class=\"line\"></div><div class=\"line\"><span class=\"section\">2095android ViewFlipper 左右滑动效果</span></div><div class=\"line\">---------------------</div><div class=\"line\"></div><div class=\"line\">http://blog.dreamtobe.cn/wp-content/uploads/2012/12/6597299564586277972.jpg</div><div class=\"line\">/var/www/blog.dreamtobe.cn/html//wp-content/uploads/2012/12/6597299564586277972.jpg</div><div class=\"line\"></div><div class=\"line\">http://blog.dreamtobe.cn/wp-content/uploads/2012/12/97108866982854788.jpg</div><div class=\"line\">/var/www/blog.dreamtobe.cn/html//wp-content/uploads/2012/12/97108866982854788.jpg</div><div class=\"line\"></div><div class=\"line\">http://blog.dreamtobe.cn/wp-content/uploads/2012/12/2493868293673906770.jpg</div><div class=\"line\">/var/www/blog.dreamtobe.cn/html//wp-content/uploads/2012/12/2493868293673906770.jpg</div><div class=\"line\"></div><div class=\"line\"><span class=\"section\">2096在activity中实例化 layout（利用xml创建layout)</span></div><div class=\"line\">---------------------</div></pre></td></tr></table></figure>\n<p>####四、Provide right image name<br>In 3 phase, you need provide right image file name when find break image, such as:</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://blog.dreamtobe.cn/wp-content/uploads/2014/12/endDocument1.jpg</div><div class=\"line\">/var/www/blog.dreamtobe.cn/html//wp-content/uploads/2014/12/endDocument1.jpg</div><div class=\"line\"></div><div class=\"line\">file not exist, new image file name: [<span class=\"string\">enter right image file name</span>](<span class=\"link\">e.g endDocument.jpg</span>)</div></pre></td></tr></table></figure>\n<p>Press enter, and python will autocompleted image right url, and output:</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> image <span class=\"string\">url:</span><span class=\"string\">http:</span><span class=\"comment\">//blog.dreamtobe.cn/wp-content/uploads/2014/12/endDocument.jpg</span></div></pre></td></tr></table></figure>\n<p>And after the completion of the full content of the post scan output:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">update</span> done. <span class=\"keyword\">ID</span> =<span class=\"number\">2160</span>L</div></pre></td></tr></table></figure>\n<h4 id=\"五、Repeate-3-4-amp-end\"><a href=\"#五、Repeate-3-4-amp-end\" class=\"headerlink\" title=\"五、Repeate 3~4 &amp; end\"></a>五、Repeate 3~4 &amp; end</h4><p>As end will output:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Complete scan, <span class=\"keyword\">replace</span> <span class=\"number\">25</span> image <span class=\"keyword\">url</span> <span class=\"keyword\">from</span> <span class=\"number\">21</span> posts</div></pre></td></tr></table></figure>\n<h3 id=\"Github-URL-amp-Download\"><a href=\"#Github-URL-amp-Download\" class=\"headerlink\" title=\"Github URL &amp; Download\"></a>Github URL &amp; Download</h3><p><a href=\"https://github.com/Jacksgong/wordpress-image-rescue\" target=\"_blank\" rel=\"external\">https://github.com/Jacksgong/wordpress-image-rescue</a></p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>I changed my vps server recently, and I had to migrating my wordpress blog too. I found there are several trouble when I completed migrating, and the most serious trouble is some image in some posts was broken. so here come.</p>\n</blockquote>","more":"<hr>\n<h3 id=\"How-to-use\"><a href=\"#How-to-use\" class=\"headerlink\" title=\"How to use\"></a>How to use</h3><p>####一、 Just run python:</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">python</span> wordpress_fix_img.<span class=\"keyword\">py</span></div></pre></td></tr></table></figure>\n<p>####二、 Input data:</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">wordpress path(<span class=\"string\">example:</span> <span class=\"regexp\">/var/</span>www<span class=\"regexp\">/blog.dreamtobe.cn/</span>html/): [your wordpress absolute path]</div><div class=\"line\">domain(<span class=\"string\">example:</span> <span class=\"string\">http:</span><span class=\"comment\">//blog.dreamtobe.cn): [your wordpress blog domain]</span></div><div class=\"line\">mysql user <span class=\"string\">name:</span> [your wordpress blog mysql user name]</div><div class=\"line\">mysql <span class=\"string\">password:</span> [your wordpress blog mysql password]</div><div class=\"line\">mysql blog <span class=\"string\">database:</span> [your wordpress blog mysql database name]</div></pre></td></tr></table></figure>\n<p>####三、Auto find broken image</p>\n<p>In this phase, will auto find break image by python and print all image url in posts. Just like:</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">2092Android UI设计 layout布局 屏幕底部的菜单栏 动画切换Activity</div><div class=\"line\">---------------------</span></div><div class=\"line\"></div><div class=\"line\">http://blog.dreamtobe.cn/wp-content/uploads/2012/12/13064789290.png</div><div class=\"line\">/var/www/blog.dreamtobe.cn/html//wp-content/uploads/2012/12/13064789290.png</div><div class=\"line\"></div><div class=\"line\"><span class=\"section\">2093判断字符串string是数字、json结构、xml结构</div><div class=\"line\">---------------------</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"section\">2094Android 搜索关键字飞入飞出效果</div><div class=\"line\">---------------------</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"section\">2095android ViewFlipper 左右滑动效果</div><div class=\"line\">---------------------</span></div><div class=\"line\"></div><div class=\"line\">http://blog.dreamtobe.cn/wp-content/uploads/2012/12/6597299564586277972.jpg</div><div class=\"line\">/var/www/blog.dreamtobe.cn/html//wp-content/uploads/2012/12/6597299564586277972.jpg</div><div class=\"line\"></div><div class=\"line\">http://blog.dreamtobe.cn/wp-content/uploads/2012/12/97108866982854788.jpg</div><div class=\"line\">/var/www/blog.dreamtobe.cn/html//wp-content/uploads/2012/12/97108866982854788.jpg</div><div class=\"line\"></div><div class=\"line\">http://blog.dreamtobe.cn/wp-content/uploads/2012/12/2493868293673906770.jpg</div><div class=\"line\">/var/www/blog.dreamtobe.cn/html//wp-content/uploads/2012/12/2493868293673906770.jpg</div><div class=\"line\"></div><div class=\"line\"><span class=\"section\">2096在activity中实例化 layout（利用xml创建layout)</div><div class=\"line\">---------------------</span></div></pre></td></tr></table></figure>\n<p>####四、Provide right image name<br>In 3 phase, you need provide right image file name when find break image, such as:</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://blog.dreamtobe.cn/wp-content/uploads/2014/12/endDocument1.jpg</div><div class=\"line\">/var/www/blog.dreamtobe.cn/html//wp-content/uploads/2014/12/endDocument1.jpg</div><div class=\"line\"></div><div class=\"line\">file not exist, new image file name: [<span class=\"string\">enter right image file name</span>](<span class=\"link\">e.g endDocument.jpg</span>)</div></pre></td></tr></table></figure>\n<p>Press enter, and python will autocompleted image right url, and output:</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> image <span class=\"string\">url:</span><span class=\"string\">http:</span><span class=\"comment\">//blog.dreamtobe.cn/wp-content/uploads/2014/12/endDocument.jpg</span></div></pre></td></tr></table></figure>\n<p>And after the completion of the full content of the post scan output:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">update</span> done. <span class=\"keyword\">ID</span> =<span class=\"number\">2160</span>L</div></pre></td></tr></table></figure>\n<h4 id=\"五、Repeate-3-4-amp-end\"><a href=\"#五、Repeate-3-4-amp-end\" class=\"headerlink\" title=\"五、Repeate 3~4 &amp; end\"></a>五、Repeate 3~4 &amp; end</h4><p>As end will output:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Complete scan, <span class=\"keyword\">replace</span> <span class=\"number\">25</span> image <span class=\"keyword\">url</span> <span class=\"keyword\">from</span> <span class=\"number\">21</span> posts</div></pre></td></tr></table></figure>\n<h3 id=\"Github-URL-amp-Download\"><a href=\"#Github-URL-amp-Download\" class=\"headerlink\" title=\"Github URL &amp; Download\"></a>Github URL &amp; Download</h3><p><a href=\"https://github.com/Jacksgong/wordpress-image-rescue\">https://github.com/Jacksgong/wordpress-image-rescue</a></p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"Java多线程抢占","date":"2015-03-25T00:35:03.000Z","_content":"\n## 前言 机制种类\n\n- 抢占机制\n\n\t对于CPU而言多个线程处于就绪线程队列，但是只有一个线程在运行状态。\n\n\t为Java多线程机制。\n\n- 分时机制\n\n\t顾名思义。\n\n<!--more-->\n\n> 多线程抢占中很多机制是与`synchronized`机制息息相关的。关于Java Synchronised机制可以参看这篇文章: http://blog.dreamtobe.cn/2015/11/13/java_synchronized/\n\n## I. `interrupt`\n\n- **方法来源**: `Thread`\n- **作用范围**: `wait`/`sleep`/`join`\n- **作用效果**: 立即抛出`InterruptedException`\n\n## II. `wait`\n\n> 基本原理是: 通过调整`Mark Word`中的标志位来释放对象的所有权，休眠当前线程并且进入等待池来实现。\n\n- **方法来源**: `Object`\n- **使用前提**: 由于其实现原理，因此必须在`synchronized`块下调用。\n- **作用效果**: 释放锁（暂时将锁借给别的线程用），并进入等待池。\n\n#### 恢复:\n\n![](/img/javathread-1.png)\n\n**促发恢复:** 1. 调用`notify`；2. `wait(millisecond)` 给定时间；3. 通过`interrupt`打断等待状态，并抛出`InterruptedException`。\n**恢复状态:** 进入锁池。\n**真正恢复:** 从锁池中重新竞争对象锁，获得锁后回到中断现场(从`wait`后继续执行代码)。\n\n## III. `sleep`\n\n- **方法来源**: `Thread`\n- **方法特点**: 不释放锁。\n- **促发恢复**: 1. `sleep(millisecond)`给定时间；2. 通过`interrupt`打断睡眠状态，并抛出`InterruptedException`。\n\n## IV. `join`\n\n- **方法来源**: `Thread`\n- **作用效果**: 调用线程停下来等待`join`方法所在线程。\n- **促发恢复**: `join`方法所在线程结束（`run()`方法结束）\n\n## V. `yield`\n\n- **方法来源**: `Thread`\n- **作用效果**: 停止当前线程，让同等优先级线程运行, 如果没有同等优先级的线程，`yield`将不会起作用。\n\n## VI. suspend\n可能导致死锁，因此弃用\n\n# Android 中抢占机制需要注意的地方\n\n> 需要注意的是: Android中如果某进程中只有某线程且被长期阻塞在等待池，并且进程所在组件优先级较低，可能会被系统回收。此时更应该考虑使用`AlarmManager`，它持有一个CPU唤醒锁，并且即便是组件或进程已经被回收也会被重新唤起，是不存在这个问题的。(因此如果要做轮询、Socket心跳之类的，推荐使用`AlarmManager`，这样才能保证时间间隔的稳定、可靠)。\n\n\n---\n\n本文已经发布到JackBlog公众号，可请直接访问: [Java Synchronized机制与常见的多线程抢占 - JacksBlog](https://mp.weixin.qq.com/s?__biz=MzIyMjQxMzAzOA==&mid=2247483673&idx=1&sn=cc20b1149e9ffed649dd00d8737e6a08)\n\n---\n\n- [Java线程中sleep()、wait()和notify()和notifyAll()、yield()、join()等方法的用法和区别](http://zheng12tian.iteye.com/blog/1233638)\n- [Difference between wait() and sleep()](http://stackoverflow.com/questions/1036754/difference-between-wait-and-sleep)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/Java多线程抢占.md","raw":"title: Java多线程抢占\ndate: 2015-03-25 08:35:03\npermalink: 2015/03/25/Java多线程抢占\ntags:\n- java\n- 多线程\n- Android\n- 优化\n\n---\n\n## 前言 机制种类\n\n- 抢占机制\n\n\t对于CPU而言多个线程处于就绪线程队列，但是只有一个线程在运行状态。\n\n\t为Java多线程机制。\n\n- 分时机制\n\n\t顾名思义。\n\n<!--more-->\n\n> 多线程抢占中很多机制是与`synchronized`机制息息相关的。关于Java Synchronised机制可以参看这篇文章: http://blog.dreamtobe.cn/2015/11/13/java_synchronized/\n\n## I. `interrupt`\n\n- **方法来源**: `Thread`\n- **作用范围**: `wait`/`sleep`/`join`\n- **作用效果**: 立即抛出`InterruptedException`\n\n## II. `wait`\n\n> 基本原理是: 通过调整`Mark Word`中的标志位来释放对象的所有权，休眠当前线程并且进入等待池来实现。\n\n- **方法来源**: `Object`\n- **使用前提**: 由于其实现原理，因此必须在`synchronized`块下调用。\n- **作用效果**: 释放锁（暂时将锁借给别的线程用），并进入等待池。\n\n#### 恢复:\n\n![](/img/javathread-1.png)\n\n**促发恢复:** 1. 调用`notify`；2. `wait(millisecond)` 给定时间；3. 通过`interrupt`打断等待状态，并抛出`InterruptedException`。\n**恢复状态:** 进入锁池。\n**真正恢复:** 从锁池中重新竞争对象锁，获得锁后回到中断现场(从`wait`后继续执行代码)。\n\n## III. `sleep`\n\n- **方法来源**: `Thread`\n- **方法特点**: 不释放锁。\n- **促发恢复**: 1. `sleep(millisecond)`给定时间；2. 通过`interrupt`打断睡眠状态，并抛出`InterruptedException`。\n\n## IV. `join`\n\n- **方法来源**: `Thread`\n- **作用效果**: 调用线程停下来等待`join`方法所在线程。\n- **促发恢复**: `join`方法所在线程结束（`run()`方法结束）\n\n## V. `yield`\n\n- **方法来源**: `Thread`\n- **作用效果**: 停止当前线程，让同等优先级线程运行, 如果没有同等优先级的线程，`yield`将不会起作用。\n\n## VI. suspend\n可能导致死锁，因此弃用\n\n# Android 中抢占机制需要注意的地方\n\n> 需要注意的是: Android中如果某进程中只有某线程且被长期阻塞在等待池，并且进程所在组件优先级较低，可能会被系统回收。此时更应该考虑使用`AlarmManager`，它持有一个CPU唤醒锁，并且即便是组件或进程已经被回收也会被重新唤起，是不存在这个问题的。(因此如果要做轮询、Socket心跳之类的，推荐使用`AlarmManager`，这样才能保证时间间隔的稳定、可靠)。\n\n\n---\n\n本文已经发布到JackBlog公众号，可请直接访问: [Java Synchronized机制与常见的多线程抢占 - JacksBlog](https://mp.weixin.qq.com/s?__biz=MzIyMjQxMzAzOA==&mid=2247483673&idx=1&sn=cc20b1149e9ffed649dd00d8737e6a08)\n\n---\n\n- [Java线程中sleep()、wait()和notify()和notifyAll()、yield()、join()等方法的用法和区别](http://zheng12tian.iteye.com/blog/1233638)\n- [Difference between wait() and sleep()](http://stackoverflow.com/questions/1036754/difference-between-wait-and-sleep)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2015/03/25/Java多线程抢占","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66hx000w95buwx18ch7b","content":"<h2 id=\"前言-机制种类\"><a href=\"#前言-机制种类\" class=\"headerlink\" title=\"前言 机制种类\"></a>前言 机制种类</h2><ul>\n<li><p>抢占机制</p>\n<p>  对于CPU而言多个线程处于就绪线程队列，但是只有一个线程在运行状态。</p>\n<p>  为Java多线程机制。</p>\n</li>\n<li><p>分时机制</p>\n<p>  顾名思义。</p>\n</li>\n</ul>\n<a id=\"more\"></a>\n<blockquote>\n<p>多线程抢占中很多机制是与<code>synchronized</code>机制息息相关的。关于Java Synchronised机制可以参看这篇文章: <a href=\"http://blog.dreamtobe.cn/2015/11/13/java_synchronized/\">http://blog.dreamtobe.cn/2015/11/13/java_synchronized/</a></p>\n</blockquote>\n<h2 id=\"I-interrupt\"><a href=\"#I-interrupt\" class=\"headerlink\" title=\"I. interrupt\"></a>I. <code>interrupt</code></h2><ul>\n<li><strong>方法来源</strong>: <code>Thread</code></li>\n<li><strong>作用范围</strong>: <code>wait</code>/<code>sleep</code>/<code>join</code></li>\n<li><strong>作用效果</strong>: 立即抛出<code>InterruptedException</code></li>\n</ul>\n<h2 id=\"II-wait\"><a href=\"#II-wait\" class=\"headerlink\" title=\"II. wait\"></a>II. <code>wait</code></h2><blockquote>\n<p>基本原理是: 通过调整<code>Mark Word</code>中的标志位来释放对象的所有权，休眠当前线程并且进入等待池来实现。</p>\n</blockquote>\n<ul>\n<li><strong>方法来源</strong>: <code>Object</code></li>\n<li><strong>使用前提</strong>: 由于其实现原理，因此必须在<code>synchronized</code>块下调用。</li>\n<li><strong>作用效果</strong>: 释放锁（暂时将锁借给别的线程用），并进入等待池。</li>\n</ul>\n<h4 id=\"恢复\"><a href=\"#恢复\" class=\"headerlink\" title=\"恢复:\"></a>恢复:</h4><p><img src=\"/img/javathread-1.png\" alt=\"\"></p>\n<p><strong>促发恢复:</strong> 1. 调用<code>notify</code>；2. <code>wait(millisecond)</code> 给定时间；3. 通过<code>interrupt</code>打断等待状态，并抛出<code>InterruptedException</code>。<br><strong>恢复状态:</strong> 进入锁池。<br><strong>真正恢复:</strong> 从锁池中重新竞争对象锁，获得锁后回到中断现场(从<code>wait</code>后继续执行代码)。</p>\n<h2 id=\"III-sleep\"><a href=\"#III-sleep\" class=\"headerlink\" title=\"III. sleep\"></a>III. <code>sleep</code></h2><ul>\n<li><strong>方法来源</strong>: <code>Thread</code></li>\n<li><strong>方法特点</strong>: 不释放锁。</li>\n<li><strong>促发恢复</strong>: 1. <code>sleep(millisecond)</code>给定时间；2. 通过<code>interrupt</code>打断睡眠状态，并抛出<code>InterruptedException</code>。</li>\n</ul>\n<h2 id=\"IV-join\"><a href=\"#IV-join\" class=\"headerlink\" title=\"IV. join\"></a>IV. <code>join</code></h2><ul>\n<li><strong>方法来源</strong>: <code>Thread</code></li>\n<li><strong>作用效果</strong>: 调用线程停下来等待<code>join</code>方法所在线程。</li>\n<li><strong>促发恢复</strong>: <code>join</code>方法所在线程结束（<code>run()</code>方法结束）</li>\n</ul>\n<h2 id=\"V-yield\"><a href=\"#V-yield\" class=\"headerlink\" title=\"V. yield\"></a>V. <code>yield</code></h2><ul>\n<li><strong>方法来源</strong>: <code>Thread</code></li>\n<li><strong>作用效果</strong>: 停止当前线程，让同等优先级线程运行, 如果没有同等优先级的线程，<code>yield</code>将不会起作用。</li>\n</ul>\n<h2 id=\"VI-suspend\"><a href=\"#VI-suspend\" class=\"headerlink\" title=\"VI. suspend\"></a>VI. suspend</h2><p>可能导致死锁，因此弃用</p>\n<h1 id=\"Android-中抢占机制需要注意的地方\"><a href=\"#Android-中抢占机制需要注意的地方\" class=\"headerlink\" title=\"Android 中抢占机制需要注意的地方\"></a>Android 中抢占机制需要注意的地方</h1><blockquote>\n<p>需要注意的是: Android中如果某进程中只有某线程且被长期阻塞在等待池，并且进程所在组件优先级较低，可能会被系统回收。此时更应该考虑使用<code>AlarmManager</code>，它持有一个CPU唤醒锁，并且即便是组件或进程已经被回收也会被重新唤起，是不存在这个问题的。(因此如果要做轮询、Socket心跳之类的，推荐使用<code>AlarmManager</code>，这样才能保证时间间隔的稳定、可靠)。</p>\n</blockquote>\n<hr>\n<p>本文已经发布到JackBlog公众号，可请直接访问: <a href=\"https://mp.weixin.qq.com/s?__biz=MzIyMjQxMzAzOA==&amp;mid=2247483673&amp;idx=1&amp;sn=cc20b1149e9ffed649dd00d8737e6a08\" target=\"_blank\" rel=\"external\">Java Synchronized机制与常见的多线程抢占 - JacksBlog</a></p>\n<hr>\n<ul>\n<li><a href=\"http://zheng12tian.iteye.com/blog/1233638\" target=\"_blank\" rel=\"external\">Java线程中sleep()、wait()和notify()和notifyAll()、yield()、join()等方法的用法和区别</a></li>\n<li><a href=\"http://stackoverflow.com/questions/1036754/difference-between-wait-and-sleep\" target=\"_blank\" rel=\"external\">Difference between wait() and sleep()</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<h2 id=\"前言-机制种类\"><a href=\"#前言-机制种类\" class=\"headerlink\" title=\"前言 机制种类\"></a>前言 机制种类</h2><ul>\n<li><p>抢占机制</p>\n<p>  对于CPU而言多个线程处于就绪线程队列，但是只有一个线程在运行状态。</p>\n<p>  为Java多线程机制。</p>\n</li>\n<li><p>分时机制</p>\n<p>  顾名思义。</p>\n</li>\n</ul>","more":"<blockquote>\n<p>多线程抢占中很多机制是与<code>synchronized</code>机制息息相关的。关于Java Synchronised机制可以参看这篇文章: <a href=\"http://blog.dreamtobe.cn/2015/11/13/java_synchronized/\">http://blog.dreamtobe.cn/2015/11/13/java_synchronized/</a></p>\n</blockquote>\n<h2 id=\"I-interrupt\"><a href=\"#I-interrupt\" class=\"headerlink\" title=\"I. interrupt\"></a>I. <code>interrupt</code></h2><ul>\n<li><strong>方法来源</strong>: <code>Thread</code></li>\n<li><strong>作用范围</strong>: <code>wait</code>/<code>sleep</code>/<code>join</code></li>\n<li><strong>作用效果</strong>: 立即抛出<code>InterruptedException</code></li>\n</ul>\n<h2 id=\"II-wait\"><a href=\"#II-wait\" class=\"headerlink\" title=\"II. wait\"></a>II. <code>wait</code></h2><blockquote>\n<p>基本原理是: 通过调整<code>Mark Word</code>中的标志位来释放对象的所有权，休眠当前线程并且进入等待池来实现。</p>\n</blockquote>\n<ul>\n<li><strong>方法来源</strong>: <code>Object</code></li>\n<li><strong>使用前提</strong>: 由于其实现原理，因此必须在<code>synchronized</code>块下调用。</li>\n<li><strong>作用效果</strong>: 释放锁（暂时将锁借给别的线程用），并进入等待池。</li>\n</ul>\n<h4 id=\"恢复\"><a href=\"#恢复\" class=\"headerlink\" title=\"恢复:\"></a>恢复:</h4><p><img src=\"/img/javathread-1.png\" alt=\"\"></p>\n<p><strong>促发恢复:</strong> 1. 调用<code>notify</code>；2. <code>wait(millisecond)</code> 给定时间；3. 通过<code>interrupt</code>打断等待状态，并抛出<code>InterruptedException</code>。<br><strong>恢复状态:</strong> 进入锁池。<br><strong>真正恢复:</strong> 从锁池中重新竞争对象锁，获得锁后回到中断现场(从<code>wait</code>后继续执行代码)。</p>\n<h2 id=\"III-sleep\"><a href=\"#III-sleep\" class=\"headerlink\" title=\"III. sleep\"></a>III. <code>sleep</code></h2><ul>\n<li><strong>方法来源</strong>: <code>Thread</code></li>\n<li><strong>方法特点</strong>: 不释放锁。</li>\n<li><strong>促发恢复</strong>: 1. <code>sleep(millisecond)</code>给定时间；2. 通过<code>interrupt</code>打断睡眠状态，并抛出<code>InterruptedException</code>。</li>\n</ul>\n<h2 id=\"IV-join\"><a href=\"#IV-join\" class=\"headerlink\" title=\"IV. join\"></a>IV. <code>join</code></h2><ul>\n<li><strong>方法来源</strong>: <code>Thread</code></li>\n<li><strong>作用效果</strong>: 调用线程停下来等待<code>join</code>方法所在线程。</li>\n<li><strong>促发恢复</strong>: <code>join</code>方法所在线程结束（<code>run()</code>方法结束）</li>\n</ul>\n<h2 id=\"V-yield\"><a href=\"#V-yield\" class=\"headerlink\" title=\"V. yield\"></a>V. <code>yield</code></h2><ul>\n<li><strong>方法来源</strong>: <code>Thread</code></li>\n<li><strong>作用效果</strong>: 停止当前线程，让同等优先级线程运行, 如果没有同等优先级的线程，<code>yield</code>将不会起作用。</li>\n</ul>\n<h2 id=\"VI-suspend\"><a href=\"#VI-suspend\" class=\"headerlink\" title=\"VI. suspend\"></a>VI. suspend</h2><p>可能导致死锁，因此弃用</p>\n<h1 id=\"Android-中抢占机制需要注意的地方\"><a href=\"#Android-中抢占机制需要注意的地方\" class=\"headerlink\" title=\"Android 中抢占机制需要注意的地方\"></a>Android 中抢占机制需要注意的地方</h1><blockquote>\n<p>需要注意的是: Android中如果某进程中只有某线程且被长期阻塞在等待池，并且进程所在组件优先级较低，可能会被系统回收。此时更应该考虑使用<code>AlarmManager</code>，它持有一个CPU唤醒锁，并且即便是组件或进程已经被回收也会被重新唤起，是不存在这个问题的。(因此如果要做轮询、Socket心跳之类的，推荐使用<code>AlarmManager</code>，这样才能保证时间间隔的稳定、可靠)。</p>\n</blockquote>\n<hr>\n<p>本文已经发布到JackBlog公众号，可请直接访问: <a href=\"https://mp.weixin.qq.com/s?__biz=MzIyMjQxMzAzOA==&amp;mid=2247483673&amp;idx=1&amp;sn=cc20b1149e9ffed649dd00d8737e6a08\">Java Synchronized机制与常见的多线程抢占 - JacksBlog</a></p>\n<hr>\n<ul>\n<li><a href=\"http://zheng12tian.iteye.com/blog/1233638\">Java线程中sleep()、wait()和notify()和notifyAll()、yield()、join()等方法的用法和区别</a></li>\n<li><a href=\"http://stackoverflow.com/questions/1036754/difference-between-wait-and-sleep\">Difference between wait() and sleep()</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"RxAndroid(RxJava) 与 AsyncTask","date":"2015-05-09T00:35:03.000Z","_content":"\n> 整理自[使用RxJava.Observable取代AsyncTask和AsyncTaskLoader](https://github.com/bboyfeiyu/android-tech-frontier/tree/master/androidweekly/使用RxJava.Observable取代AsyncTask和AsyncTaskLoader)\n\n<!--more-->\n## I. `AsyncTask`包含的问题:\n\n```\nprivate class CallWebServiceTask extends AsyncTask<String, Result, Void> {\n\n        protected Result doInBackground(String... someData) {\n            Result result = webService.doSomething(someData);\n            return result;\n        }\n\n        protected void onPostExecute(Result result) {\n            if (result.isSuccess() {\n                resultText.setText(\"It worked!\");\n            }\n        }\n    }\n```\n\n1. 书写复杂\n2. 异常处理困难（`try/catch`?）\n3. `Activity/Fragment`的生命周期导致`AsyncTask`有不可预见的问题\n4. 无法足够简单的做复杂的异步（串行异步/并行异步 同步UI）\n5. 难以测试（[如何成功测试AyncTask的帖子](http://www.making-software.com/2012/10/31/testable-android-asynctask/)）\n6. 异步数据无法得到良好的缓存\n\n\n\n## II. 利用`RxAndroid(RxJava)`解决这些问题\n\n#### 1. 关于书写复杂的问题:\n\n> RxJava结合lambda是一个很好的解决方案\n\n```\nwebService.doSomething(someData)\n    .observeOn(AndroidSchedulers.mainThread())\n    .subscribe(\n        result -> resultText.setText(\"It worked!\")),\n        e -> handleError(e)\n    );\n```\n\n#### 2. 关于异常处理困难的问题:\n\n> RxJava 中所有的错误都会回调到onError\n\n```\nSubscriber<String> mySubscriber = new Subscriber<String>() {\n    @Override\n    public void onNext(String s) { System.out.println(s); }\n\n// 如果正确的终结，最后会调到这里\n    @Override\n    public void onCompleted() { }\n\n// 只要有异常抛出（包括操作符中的调用），会调到这里\n    @Override\n    public void onError(Throwable e) { }\n};\n```\n\n#### 3. 关于`Activity/Fragment`生命周期导致`AsyncTask`难以维护的问题:\n\n> RxAndroid给出了很好的解决方案\n\n```\n AppObservable.bindFragment(this, webService.doSomething(someData))\n    .subscribe(\n        result -> resultText.setText(\"It worked!\")),\n        e -> handleError(e)\n    );\n```\n\n#### 4. 关于`AsyncTask`无法足够简单做复杂的异步的问题:\n\n> RxJava中的各类\"操作\"可以解决这个问题，这里如果有较多的线程切换，可以考虑[使用`compose`](http://www.pythonnote.com/archives/bu-yao-da-po-lian-shi-shi-yong-rxjavade-composecao-zuo-fu.html)\n\n```\n//这里是一个链式Web Service调用的例子，这些请求互相依赖，在线程池中运行第二批并行调用，然后在将结果返回给Observer之前，对数据进行合并和排序。\npublic Observable<List<CityWeather>> getWeatherForLargeUsCapitals() {\n    return cityDirectory.getUsCapitals()\n        .flatMap(cityList -> Observable.from(cityList))\n        .filter(city -> city.getPopulation() > 500,000)\n        .flatMap(city -> weatherService.getCurrentWeather(city)) //each runs in parallel\n        .toSortedList((cw1,cw2) -> cw1.getCityName().compare(cw2.getCityName()));\n    }\n```\n\n#### 5. 关于`AsyncTask`难以测试:\n\n> RxJava通过`toblocking()`将一个异步方法变为同步方法来完成测试\n\n```\nList results = getWeatherForLargeUsCapitals().toBlocking().first();\nassertEquals(12, results.size());\n```\n\n#### 6. 关于`AsyncTask`异步数据无法得到良好的缓存\n\n> 通过RxAndroid提供的方法，保存一个对Observable 的缓存的引用\n\n```\n @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        setRetainInstance(true);\n        weatherObservable = weatherManager.getWeatherForLargeUsCapitals().cache();\n    }\n\n    public void onViewCreated(...) {\n        super.onViewCreated(...)\n        bind(weatherObservable).subscribe(this);\n    }\n```\n\n> 如果你想要**避免缓存的Fragment**，可以通过使用**AsyncSubject实现缓存**（无论何时被订阅，AsyncSubject 都会重新发出最后的事件。或者我们可以使用BehaviorSubject获得最后的值和新值改变整个应用程序。）\n\n```\n//WeatherListFragment.java\n\npublic void onViewCreated() {\n    super.onViewCreated()\n    bind(weatherManager.getWeatherForLargeUsCapitals()).subscribe(this);\n}\n```\n\n```\n//WeatherManager.java\n\n    public Observable<List<CityWeather>> getWeatherForLargeUsCapitals() {\n    if (weatherSubject == null) {\n        weatherSubject = AsyncSubject.create();\n\n        cityDirectory.getUsCapitals()\n            .flatMap(cityList -> Observable.from(cityList))\n            .filter(city -> city.getPopulation() > 500,000)\n            .flatMap(city -> weatherService.getCurrentWeather(city))\n            .toSortedList((cw1,cw2) -> cw1.getCityName().compare(cw2.getCityName()))\n            .subscribe(weatherSubject);\n    }\n    return weatherSubject;\n    }\n\n// weatherManager.invalidate(); //invalidate cache on fresh start\n```\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/RxAndroid(RxJava)-与-AsyncTask.md","raw":"title: RxAndroid(RxJava) 与 AsyncTask\ndate: 2015-05-9 08:35:03\npermalink: 2015/05/9/RxAndroid(RxJava)-与-AsyncTask\ntags:\n- AsyncTask\n- RxJava\n- 异步\n- Java\n- Android\n- 框架\n\n---\n\n> 整理自[使用RxJava.Observable取代AsyncTask和AsyncTaskLoader](https://github.com/bboyfeiyu/android-tech-frontier/tree/master/androidweekly/使用RxJava.Observable取代AsyncTask和AsyncTaskLoader)\n\n<!--more-->\n## I. `AsyncTask`包含的问题:\n\n```\nprivate class CallWebServiceTask extends AsyncTask<String, Result, Void> {\n\n        protected Result doInBackground(String... someData) {\n            Result result = webService.doSomething(someData);\n            return result;\n        }\n\n        protected void onPostExecute(Result result) {\n            if (result.isSuccess() {\n                resultText.setText(\"It worked!\");\n            }\n        }\n    }\n```\n\n1. 书写复杂\n2. 异常处理困难（`try/catch`?）\n3. `Activity/Fragment`的生命周期导致`AsyncTask`有不可预见的问题\n4. 无法足够简单的做复杂的异步（串行异步/并行异步 同步UI）\n5. 难以测试（[如何成功测试AyncTask的帖子](http://www.making-software.com/2012/10/31/testable-android-asynctask/)）\n6. 异步数据无法得到良好的缓存\n\n\n\n## II. 利用`RxAndroid(RxJava)`解决这些问题\n\n#### 1. 关于书写复杂的问题:\n\n> RxJava结合lambda是一个很好的解决方案\n\n```\nwebService.doSomething(someData)\n    .observeOn(AndroidSchedulers.mainThread())\n    .subscribe(\n        result -> resultText.setText(\"It worked!\")),\n        e -> handleError(e)\n    );\n```\n\n#### 2. 关于异常处理困难的问题:\n\n> RxJava 中所有的错误都会回调到onError\n\n```\nSubscriber<String> mySubscriber = new Subscriber<String>() {\n    @Override\n    public void onNext(String s) { System.out.println(s); }\n\n// 如果正确的终结，最后会调到这里\n    @Override\n    public void onCompleted() { }\n\n// 只要有异常抛出（包括操作符中的调用），会调到这里\n    @Override\n    public void onError(Throwable e) { }\n};\n```\n\n#### 3. 关于`Activity/Fragment`生命周期导致`AsyncTask`难以维护的问题:\n\n> RxAndroid给出了很好的解决方案\n\n```\n AppObservable.bindFragment(this, webService.doSomething(someData))\n    .subscribe(\n        result -> resultText.setText(\"It worked!\")),\n        e -> handleError(e)\n    );\n```\n\n#### 4. 关于`AsyncTask`无法足够简单做复杂的异步的问题:\n\n> RxJava中的各类\"操作\"可以解决这个问题，这里如果有较多的线程切换，可以考虑[使用`compose`](http://www.pythonnote.com/archives/bu-yao-da-po-lian-shi-shi-yong-rxjavade-composecao-zuo-fu.html)\n\n```\n//这里是一个链式Web Service调用的例子，这些请求互相依赖，在线程池中运行第二批并行调用，然后在将结果返回给Observer之前，对数据进行合并和排序。\npublic Observable<List<CityWeather>> getWeatherForLargeUsCapitals() {\n    return cityDirectory.getUsCapitals()\n        .flatMap(cityList -> Observable.from(cityList))\n        .filter(city -> city.getPopulation() > 500,000)\n        .flatMap(city -> weatherService.getCurrentWeather(city)) //each runs in parallel\n        .toSortedList((cw1,cw2) -> cw1.getCityName().compare(cw2.getCityName()));\n    }\n```\n\n#### 5. 关于`AsyncTask`难以测试:\n\n> RxJava通过`toblocking()`将一个异步方法变为同步方法来完成测试\n\n```\nList results = getWeatherForLargeUsCapitals().toBlocking().first();\nassertEquals(12, results.size());\n```\n\n#### 6. 关于`AsyncTask`异步数据无法得到良好的缓存\n\n> 通过RxAndroid提供的方法，保存一个对Observable 的缓存的引用\n\n```\n @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        setRetainInstance(true);\n        weatherObservable = weatherManager.getWeatherForLargeUsCapitals().cache();\n    }\n\n    public void onViewCreated(...) {\n        super.onViewCreated(...)\n        bind(weatherObservable).subscribe(this);\n    }\n```\n\n> 如果你想要**避免缓存的Fragment**，可以通过使用**AsyncSubject实现缓存**（无论何时被订阅，AsyncSubject 都会重新发出最后的事件。或者我们可以使用BehaviorSubject获得最后的值和新值改变整个应用程序。）\n\n```\n//WeatherListFragment.java\n\npublic void onViewCreated() {\n    super.onViewCreated()\n    bind(weatherManager.getWeatherForLargeUsCapitals()).subscribe(this);\n}\n```\n\n```\n//WeatherManager.java\n\n    public Observable<List<CityWeather>> getWeatherForLargeUsCapitals() {\n    if (weatherSubject == null) {\n        weatherSubject = AsyncSubject.create();\n\n        cityDirectory.getUsCapitals()\n            .flatMap(cityList -> Observable.from(cityList))\n            .filter(city -> city.getPopulation() > 500,000)\n            .flatMap(city -> weatherService.getCurrentWeather(city))\n            .toSortedList((cw1,cw2) -> cw1.getCityName().compare(cw2.getCityName()))\n            .subscribe(weatherSubject);\n    }\n    return weatherSubject;\n    }\n\n// weatherManager.invalidate(); //invalidate cache on fresh start\n```\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2015/05/9/RxAndroid(RxJava)-与-AsyncTask","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66hy000z95buhlvj0htr","content":"<blockquote>\n<p>整理自<a href=\"https://github.com/bboyfeiyu/android-tech-frontier/tree/master/androidweekly/使用RxJava.Observable取代AsyncTask和AsyncTaskLoader\" target=\"_blank\" rel=\"external\">使用RxJava.Observable取代AsyncTask和AsyncTaskLoader</a></p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"I-AsyncTask包含的问题\"><a href=\"#I-AsyncTask包含的问题\" class=\"headerlink\" title=\"I. AsyncTask包含的问题:\"></a>I. <code>AsyncTask</code>包含的问题:</h2><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CallWebServiceTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTask&lt;String</span>, <span class=\"title\">Result</span>, <span class=\"title\">Void&gt;</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"type\">Result</span> doInBackground(<span class=\"type\">String</span>... someData) &#123;</div><div class=\"line\">            <span class=\"type\">Result</span> result = webService.doSomething(someData);</div><div class=\"line\">            <span class=\"keyword\">return</span> result;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">protected</span> void onPostExecute(<span class=\"type\">Result</span> result) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (result.isSuccess() &#123;</div><div class=\"line\">                resultText.setText(<span class=\"string\">\"It worked!\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>书写复杂</li>\n<li>异常处理困难（<code>try/catch</code>?）</li>\n<li><code>Activity/Fragment</code>的生命周期导致<code>AsyncTask</code>有不可预见的问题</li>\n<li>无法足够简单的做复杂的异步（串行异步/并行异步 同步UI）</li>\n<li>难以测试（<a href=\"http://www.making-software.com/2012/10/31/testable-android-asynctask/\" target=\"_blank\" rel=\"external\">如何成功测试AyncTask的帖子</a>）</li>\n<li>异步数据无法得到良好的缓存</li>\n</ol>\n<h2 id=\"II-利用RxAndroid-RxJava-解决这些问题\"><a href=\"#II-利用RxAndroid-RxJava-解决这些问题\" class=\"headerlink\" title=\"II. 利用RxAndroid(RxJava)解决这些问题\"></a>II. 利用<code>RxAndroid(RxJava)</code>解决这些问题</h2><h4 id=\"1-关于书写复杂的问题\"><a href=\"#1-关于书写复杂的问题\" class=\"headerlink\" title=\"1. 关于书写复杂的问题:\"></a>1. 关于书写复杂的问题:</h4><blockquote>\n<p>RxJava结合lambda是一个很好的解决方案</p>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">webService</span><span class=\"selector-class\">.doSomething</span>(<span class=\"selector-tag\">someData</span>)</div><div class=\"line\">    <span class=\"selector-class\">.observeOn</span>(<span class=\"selector-tag\">AndroidSchedulers</span><span class=\"selector-class\">.mainThread</span>())</div><div class=\"line\">    <span class=\"selector-class\">.subscribe</span>(</div><div class=\"line\">        <span class=\"selector-tag\">result</span> <span class=\"selector-tag\">-</span>&gt; <span class=\"selector-tag\">resultText</span><span class=\"selector-class\">.setText</span>(\"<span class=\"selector-tag\">It</span> <span class=\"selector-tag\">worked</span>!\")),</div><div class=\"line\">        <span class=\"selector-tag\">e</span> <span class=\"selector-tag\">-</span>&gt; <span class=\"selector-tag\">handleError</span>(<span class=\"selector-tag\">e</span>)</div><div class=\"line\">    );</div></pre></td></tr></table></figure>\n<h4 id=\"2-关于异常处理困难的问题\"><a href=\"#2-关于异常处理困难的问题\" class=\"headerlink\" title=\"2. 关于异常处理困难的问题:\"></a>2. 关于异常处理困难的问题:</h4><blockquote>\n<p>RxJava 中所有的错误都会回调到onError</p>\n</blockquote>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">Subscriber&lt;String&gt; mySubscriber = <span class=\"keyword\">new</span> Subscriber&lt;String&gt;() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(String s)</span> </span>&#123; System.out.println(s); &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 如果正确的终结，最后会调到这里</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onCompleted</span><span class=\"params\">()</span> </span>&#123; &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 只要有异常抛出（包括操作符中的调用），会调到这里</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123; &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h4 id=\"3-关于Activity-Fragment生命周期导致AsyncTask难以维护的问题\"><a href=\"#3-关于Activity-Fragment生命周期导致AsyncTask难以维护的问题\" class=\"headerlink\" title=\"3. 关于Activity/Fragment生命周期导致AsyncTask难以维护的问题:\"></a>3. 关于<code>Activity/Fragment</code>生命周期导致<code>AsyncTask</code>难以维护的问题:</h4><blockquote>\n<p>RxAndroid给出了很好的解决方案</p>\n</blockquote>\n<figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">AppObservable.bindFragment(this, webService.doSomething(someData))</div><div class=\"line\">   .subscribe(</div><div class=\"line\">       <span class=\"function\"><span class=\"title\">result</span> -&gt;</span> resultText.setText(<span class=\"string\">\"It worked!\"</span>)),</div><div class=\"line\">       <span class=\"function\"><span class=\"title\">e</span> -&gt;</span> handleError(e)</div><div class=\"line\">   );</div></pre></td></tr></table></figure>\n<h4 id=\"4-关于AsyncTask无法足够简单做复杂的异步的问题\"><a href=\"#4-关于AsyncTask无法足够简单做复杂的异步的问题\" class=\"headerlink\" title=\"4. 关于AsyncTask无法足够简单做复杂的异步的问题:\"></a>4. 关于<code>AsyncTask</code>无法足够简单做复杂的异步的问题:</h4><blockquote>\n<p>RxJava中的各类”操作”可以解决这个问题，这里如果有较多的线程切换，可以考虑<a href=\"http://www.pythonnote.com/archives/bu-yao-da-po-lian-shi-shi-yong-rxjavade-composecao-zuo-fu.html\" target=\"_blank\" rel=\"external\">使用<code>compose</code></a></p>\n</blockquote>\n<figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//这里是一个链式Web Service调用的例子，这些请求互相依赖，在线程池中运行第二批并行调用，然后在将结果返回给Observer之前，对数据进行合并和排序。</span></div><div class=\"line\">public Observable&lt;List&lt;CityWeather&gt;&gt; getWeatherForLargeUsCapitals() &#123;</div><div class=\"line\">    return cityDirectory.getUsCapitals()</div><div class=\"line\">        .<span class=\"function\"><span class=\"title\">flatMap</span>(cityList -&gt;</span> Observable.from(cityList))</div><div class=\"line\">        .<span class=\"function\"><span class=\"title\">filter</span>(city -&gt;</span> city.getPopulation() &gt; <span class=\"number\">500</span>,<span class=\"number\">000</span>)</div><div class=\"line\">        .<span class=\"function\"><span class=\"title\">flatMap</span>(city -&gt;</span> weatherService.getCurrentWeather(city)) <span class=\"comment\">//each runs in parallel</span></div><div class=\"line\">        .<span class=\"function\"><span class=\"title\">toSortedList</span>((cw1,cw2) -&gt;</span> cw1.getCityName().compare(cw2.getCityName()));</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"5-关于AsyncTask难以测试\"><a href=\"#5-关于AsyncTask难以测试\" class=\"headerlink\" title=\"5. 关于AsyncTask难以测试:\"></a>5. 关于<code>AsyncTask</code>难以测试:</h4><blockquote>\n<p>RxJava通过<code>toblocking()</code>将一个异步方法变为同步方法来完成测试</p>\n</blockquote>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">List results = getWeatherForLargeUsCapitals().toBlocking().first()<span class=\"comment\">;</span></div><div class=\"line\">assertEquals(<span class=\"number\">12</span>, results.size())<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<h4 id=\"6-关于AsyncTask异步数据无法得到良好的缓存\"><a href=\"#6-关于AsyncTask异步数据无法得到良好的缓存\" class=\"headerlink\" title=\"6. 关于AsyncTask异步数据无法得到良好的缓存\"></a>6. 关于<code>AsyncTask</code>异步数据无法得到良好的缓存</h4><blockquote>\n<p>通过RxAndroid提供的方法，保存一个对Observable 的缓存的引用</p>\n</blockquote>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\"></div><div class=\"line\">       setRetainInstance(<span class=\"keyword\">true</span>);</div><div class=\"line\">       weatherObservable = weatherManager.getWeatherForLargeUsCapitals().cache();</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onViewCreated</span><span class=\"params\">(...)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">super</span>.onViewCreated(...)</div><div class=\"line\">       bind(weatherObservable).subscribe(<span class=\"keyword\">this</span>);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>如果你想要<strong>避免缓存的Fragment</strong>，可以通过使用<strong>AsyncSubject实现缓存</strong>（无论何时被订阅，AsyncSubject 都会重新发出最后的事件。或者我们可以使用BehaviorSubject获得最后的值和新值改变整个应用程序。）</p>\n</blockquote>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//WeatherListFragment.java</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onViewCreated</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onViewCreated()</div><div class=\"line\">    bind(weatherManager.getWeatherForLargeUsCapitals()).subscribe(<span class=\"keyword\">this</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//WeatherManager.java</span></div><div class=\"line\"></div><div class=\"line\">    public Observable&lt;List&lt;CityWeather&gt;&gt; getWeatherForLargeUsCapitals() &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (weatherSubject == null) &#123;</div><div class=\"line\">        weatherSubject = AsyncSubject.create();</div><div class=\"line\"></div><div class=\"line\">        cityDirectory.getUsCapitals()</div><div class=\"line\">            .<span class=\"function\"><span class=\"title\">flatMap</span>(cityList -&gt;</span> Observable.from(cityList))</div><div class=\"line\">            .<span class=\"function\"><span class=\"title\">filter</span>(city -&gt;</span> city.getPopulation() &gt; <span class=\"number\">500</span>,<span class=\"number\">000</span>)</div><div class=\"line\">            .<span class=\"function\"><span class=\"title\">flatMap</span>(city -&gt;</span> weatherService.getCurrentWeather(city))</div><div class=\"line\">            .<span class=\"function\"><span class=\"title\">toSortedList</span>((cw1,cw2) -&gt;</span> cw1.getCityName().compare(cw2.getCityName()))</div><div class=\"line\">            .subscribe(weatherSubject);</div><div class=\"line\">    &#125;</div><div class=\"line\">    return weatherSubject;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// weatherManager.invalidate(); //invalidate cache on fresh start</span></div></pre></td></tr></table></figure>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>整理自<a href=\"https://github.com/bboyfeiyu/android-tech-frontier/tree/master/androidweekly/使用RxJava.Observable取代AsyncTask和AsyncTaskLoader\">使用RxJava.Observable取代AsyncTask和AsyncTaskLoader</a></p>\n</blockquote>","more":"<h2 id=\"I-AsyncTask包含的问题\"><a href=\"#I-AsyncTask包含的问题\" class=\"headerlink\" title=\"I. AsyncTask包含的问题:\"></a>I. <code>AsyncTask</code>包含的问题:</h2><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CallWebServiceTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTask&lt;String</span>, <span class=\"title\">Result</span>, <span class=\"title\">Void&gt;</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"type\">Result</span> doInBackground(<span class=\"type\">String</span>... someData) &#123;</div><div class=\"line\">            <span class=\"type\">Result</span> result = webService.doSomething(someData);</div><div class=\"line\">            <span class=\"keyword\">return</span> result;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">protected</span> void onPostExecute(<span class=\"type\">Result</span> result) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (result.isSuccess() &#123;</div><div class=\"line\">                resultText.setText(<span class=\"string\">\"It worked!\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>书写复杂</li>\n<li>异常处理困难（<code>try/catch</code>?）</li>\n<li><code>Activity/Fragment</code>的生命周期导致<code>AsyncTask</code>有不可预见的问题</li>\n<li>无法足够简单的做复杂的异步（串行异步/并行异步 同步UI）</li>\n<li>难以测试（<a href=\"http://www.making-software.com/2012/10/31/testable-android-asynctask/\">如何成功测试AyncTask的帖子</a>）</li>\n<li>异步数据无法得到良好的缓存</li>\n</ol>\n<h2 id=\"II-利用RxAndroid-RxJava-解决这些问题\"><a href=\"#II-利用RxAndroid-RxJava-解决这些问题\" class=\"headerlink\" title=\"II. 利用RxAndroid(RxJava)解决这些问题\"></a>II. 利用<code>RxAndroid(RxJava)</code>解决这些问题</h2><h4 id=\"1-关于书写复杂的问题\"><a href=\"#1-关于书写复杂的问题\" class=\"headerlink\" title=\"1. 关于书写复杂的问题:\"></a>1. 关于书写复杂的问题:</h4><blockquote>\n<p>RxJava结合lambda是一个很好的解决方案</p>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">webService</span><span class=\"selector-class\">.doSomething</span>(<span class=\"selector-tag\">someData</span>)</div><div class=\"line\">    <span class=\"selector-class\">.observeOn</span>(<span class=\"selector-tag\">AndroidSchedulers</span><span class=\"selector-class\">.mainThread</span>())</div><div class=\"line\">    <span class=\"selector-class\">.subscribe</span>(</div><div class=\"line\">        <span class=\"selector-tag\">result</span> <span class=\"selector-tag\">-</span>&gt; <span class=\"selector-tag\">resultText</span><span class=\"selector-class\">.setText</span>(\"<span class=\"selector-tag\">It</span> <span class=\"selector-tag\">worked</span>!\")),</div><div class=\"line\">        <span class=\"selector-tag\">e</span> <span class=\"selector-tag\">-</span>&gt; <span class=\"selector-tag\">handleError</span>(<span class=\"selector-tag\">e</span>)</div><div class=\"line\">    );</div></pre></td></tr></table></figure>\n<h4 id=\"2-关于异常处理困难的问题\"><a href=\"#2-关于异常处理困难的问题\" class=\"headerlink\" title=\"2. 关于异常处理困难的问题:\"></a>2. 关于异常处理困难的问题:</h4><blockquote>\n<p>RxJava 中所有的错误都会回调到onError</p>\n</blockquote>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">Subscriber&lt;String&gt; mySubscriber = <span class=\"keyword\">new</span> Subscriber&lt;String&gt;() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(String s)</span> </span>&#123; System.out.println(s); &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 如果正确的终结，最后会调到这里</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onCompleted</span><span class=\"params\">()</span> </span>&#123; &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 只要有异常抛出（包括操作符中的调用），会调到这里</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123; &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h4 id=\"3-关于Activity-Fragment生命周期导致AsyncTask难以维护的问题\"><a href=\"#3-关于Activity-Fragment生命周期导致AsyncTask难以维护的问题\" class=\"headerlink\" title=\"3. 关于Activity/Fragment生命周期导致AsyncTask难以维护的问题:\"></a>3. 关于<code>Activity/Fragment</code>生命周期导致<code>AsyncTask</code>难以维护的问题:</h4><blockquote>\n<p>RxAndroid给出了很好的解决方案</p>\n</blockquote>\n<figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">AppObservable.bindFragment(this, webService.doSomething(someData))</div><div class=\"line\">   .subscribe(</div><div class=\"line\">       <span class=\"function\"><span class=\"title\">result</span> -&gt;</span> resultText.setText(<span class=\"string\">\"It worked!\"</span>)),</div><div class=\"line\">       <span class=\"function\"><span class=\"title\">e</span> -&gt;</span> handleError(e)</div><div class=\"line\">   );</div></pre></td></tr></table></figure>\n<h4 id=\"4-关于AsyncTask无法足够简单做复杂的异步的问题\"><a href=\"#4-关于AsyncTask无法足够简单做复杂的异步的问题\" class=\"headerlink\" title=\"4. 关于AsyncTask无法足够简单做复杂的异步的问题:\"></a>4. 关于<code>AsyncTask</code>无法足够简单做复杂的异步的问题:</h4><blockquote>\n<p>RxJava中的各类”操作”可以解决这个问题，这里如果有较多的线程切换，可以考虑<a href=\"http://www.pythonnote.com/archives/bu-yao-da-po-lian-shi-shi-yong-rxjavade-composecao-zuo-fu.html\">使用<code>compose</code></a></p>\n</blockquote>\n<figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//这里是一个链式Web Service调用的例子，这些请求互相依赖，在线程池中运行第二批并行调用，然后在将结果返回给Observer之前，对数据进行合并和排序。</span></div><div class=\"line\">public Observable&lt;List&lt;CityWeather&gt;&gt; getWeatherForLargeUsCapitals() &#123;</div><div class=\"line\">    return cityDirectory.getUsCapitals()</div><div class=\"line\">        .<span class=\"function\"><span class=\"title\">flatMap</span>(cityList -&gt;</span> Observable.from(cityList))</div><div class=\"line\">        .<span class=\"function\"><span class=\"title\">filter</span>(city -&gt;</span> city.getPopulation() &gt; <span class=\"number\">500</span>,<span class=\"number\">000</span>)</div><div class=\"line\">        .<span class=\"function\"><span class=\"title\">flatMap</span>(city -&gt;</span> weatherService.getCurrentWeather(city)) <span class=\"comment\">//each runs in parallel</span></div><div class=\"line\">        .<span class=\"function\"><span class=\"title\">toSortedList</span>((cw1,cw2) -&gt;</span> cw1.getCityName().compare(cw2.getCityName()));</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"5-关于AsyncTask难以测试\"><a href=\"#5-关于AsyncTask难以测试\" class=\"headerlink\" title=\"5. 关于AsyncTask难以测试:\"></a>5. 关于<code>AsyncTask</code>难以测试:</h4><blockquote>\n<p>RxJava通过<code>toblocking()</code>将一个异步方法变为同步方法来完成测试</p>\n</blockquote>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">List results = getWeatherForLargeUsCapitals().toBlocking().first()<span class=\"comment\">;</span></div><div class=\"line\">assertEquals(<span class=\"number\">12</span>, results.size())<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<h4 id=\"6-关于AsyncTask异步数据无法得到良好的缓存\"><a href=\"#6-关于AsyncTask异步数据无法得到良好的缓存\" class=\"headerlink\" title=\"6. 关于AsyncTask异步数据无法得到良好的缓存\"></a>6. 关于<code>AsyncTask</code>异步数据无法得到良好的缓存</h4><blockquote>\n<p>通过RxAndroid提供的方法，保存一个对Observable 的缓存的引用</p>\n</blockquote>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\"></div><div class=\"line\">       setRetainInstance(<span class=\"keyword\">true</span>);</div><div class=\"line\">       weatherObservable = weatherManager.getWeatherForLargeUsCapitals().cache();</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onViewCreated</span><span class=\"params\">(...)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">super</span>.onViewCreated(...)</div><div class=\"line\">       bind(weatherObservable).subscribe(<span class=\"keyword\">this</span>);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>如果你想要<strong>避免缓存的Fragment</strong>，可以通过使用<strong>AsyncSubject实现缓存</strong>（无论何时被订阅，AsyncSubject 都会重新发出最后的事件。或者我们可以使用BehaviorSubject获得最后的值和新值改变整个应用程序。）</p>\n</blockquote>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//WeatherListFragment.java</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onViewCreated</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onViewCreated()</div><div class=\"line\">    bind(weatherManager.getWeatherForLargeUsCapitals()).subscribe(<span class=\"keyword\">this</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//WeatherManager.java</span></div><div class=\"line\"></div><div class=\"line\">    public Observable&lt;List&lt;CityWeather&gt;&gt; getWeatherForLargeUsCapitals() &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (weatherSubject == null) &#123;</div><div class=\"line\">        weatherSubject = AsyncSubject.create();</div><div class=\"line\"></div><div class=\"line\">        cityDirectory.getUsCapitals()</div><div class=\"line\">            .<span class=\"function\"><span class=\"title\">flatMap</span>(cityList -&gt;</span> Observable.from(cityList))</div><div class=\"line\">            .<span class=\"function\"><span class=\"title\">filter</span>(city -&gt;</span> city.getPopulation() &gt; <span class=\"number\">500</span>,<span class=\"number\">000</span>)</div><div class=\"line\">            .<span class=\"function\"><span class=\"title\">flatMap</span>(city -&gt;</span> weatherService.getCurrentWeather(city))</div><div class=\"line\">            .<span class=\"function\"><span class=\"title\">toSortedList</span>((cw1,cw2) -&gt;</span> cw1.getCityName().compare(cw2.getCityName()))</div><div class=\"line\">            .subscribe(weatherSubject);</div><div class=\"line\">    &#125;</div><div class=\"line\">    return weatherSubject;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// weatherManager.invalidate(); //invalidate cache on fresh start</span></div></pre></td></tr></table></figure>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"RxJava","date":"2015-04-29T00:35:03.000Z","_content":"\n> 响应式编程（观察者模式）\n\nps: 如果不了解Lambda的话，最好先看下[Lambda](http://blog.dreamtobe.cn/2281.html), 文中都是使用Lambda语法\n\n## I. 核心\n\n**被观察者:** Observables (发出一系列事件)\n\n**观察者:** Subscribers (处理这些事件)\n\n<!--more-->\n1. Observable和Subscriber可以做任何事情\n\n2. Observable和Subscriber是独立于中间的变换过程的。\n\n\n## II. 基本原型\n\n```java\n//创建 Observable\nObservable<String> myObservable = Observable.create(\n    new Observable.OnSubscribe<String>() {\n        @Override\n        public void call(Subscriber<? super String> sub) {\n            sub.onNext(\"Hello, world!\");\n            sub.onCompleted();\n        }\n    }\n);\n\n//创建 Subscriber\nSubscriber<String> mySubscriber = new Subscriber<String>() {\n    @Override\n    public void onNext(String s) { System.out.println(s); }\n\n// 如果正确的终结，最后会调到这里\n    @Override\n    public void onCompleted() { }\n\n// 只要有异常抛出（包括操作符中的调用），会调到这里\n    @Override\n    public void onError(Throwable e) { }\n};\n\n//mySubscriber订阅myObservable\nmyObservable.subscribe(mySubscriber);  \n```\n\n## III. 通用接口\n\n```java\n// Action1<T>(){ call(String): void}\nmyObservable.subscribe(onNextAction, onErrorAction, onCompleteAction);  \n\nmyObservable.subscribe(onNextAction);  \n```\n\n上面的代码最终可以变成这样\n\n```java\n//Action1<T>\nObservable.just(\"Hello, world!\")\n    .subscribe(s -> System.out.println(s));\n```\n\n## IV. 一些典型的操作符(Operators)\n\n> 操作符用于在Observable和最终的Subscriber之间修改Observable发出的时间(RxJava提供了很多有用的操作符)\n\n```java\n//假设定义了以下方法，接下来有些地方为了举例有用到\nquery(String) : Observable<List<String>> // 根据链接搜索结果\ngetTitle(String) : Observable<String> // 获取标题\nsaveTitle(String) : boolean // 保存标题\n```\n\n#### 1. map操作符\n\n> 把一个事件转换为另一个事件 ( 不必返回Observable对象返回的类型，如下面就返回了int，而Observable返回的是String )\n\n[map官方文档](http://reactivex.io/documentation/operators/map.html)\n\n![](/img/rxjava-map.png)\n\n\n```java\nObservable.just(\"Hello, world!\")\n    .map(s -> s.hashCode())\n    .map(i -> Integer.toString(i))\n    .subscribe(s -> System.out.println(s));\n```\n\n\n\n#### 2. from操作符\n\n> 接收一个集合作为输入，然后每次输出一个元素给subscriber\n\n[from官方文档](http://reactivex.io/documentation/operators/from.html)\n\n![](/img/rxjava-from.png)\n\n```java\nObservable.from(\"url1\", \"url2\", \"url3\")  \n    .subscribe(url -> System.out.println(url));\n```\n\n#### 3. flatMap操作符\n\n> 接收一个Observable的输出作为输入，同时输出另外一个Observable （可以用来很好的解决多重嵌套回调的问题）\n\n[flatMap官方文档](http://reactivex.io/documentation/operators/flatmap.html)\n\n![](/img/rxjava-flatmap.png)\n\n```java\n// 这里通过flatMap，输入一个Observable<List<String>>返回了一个新的Observable<String>\n\nquery(\"Hello, world!\")  \n    .flatMap(urls -> Observable.from(urls))\n    .flatMap(url -> getTitle(url))\n    .subscribe(title -> System.out.println(title));\n```\n\n#### 4. filter操作符\n\n> 输入与输出为相同元素，过滤掉不满足检查条件的\n\n[filter官方文档](http://reactivex.io/documentation/operators/filter.html)\n\n![](/img/rxjava-filter.png)\n\n```java\nquery(\"Hello, world!\")  \n    .flatMap(urls -> Observable.from(urls))  \n    .flatMap(url -> getTitle(url))  \n    .filter(title -> title != null)  // 这里过滤掉了 title 为 null 的情况\n    .subscribe(title -> System.out.println(title));  \n```\n\n#### 5. take操作符\n\n> 输出最多指定数量的结果\n\n[take官方文档](http://reactivex.io/documentation/operators/take.html)\n\n![](/img/rxjava-take.png)\n\n```java\nquery(\"Hello, world!\")  \n    .flatMap(urls -> Observable.from(urls))  \n    .flatMap(url -> getTitle(url))  \n    .filter(title -> title != null)  \n    .take(5) // 最多5个结果\n    .subscribe(title -> System.out.println(title));  \n```\n\n#### 6. doOnNext操作符\n\n> 在每次输出一个元素之前做一些额外的事情\n\n```java\nquery(\"Hello, world!\")  \n    .flatMap(urls -> Observable.from(urls))  \n    .flatMap(url -> getTitle(url))  \n    .filter(title -> title != null)  \n    .take(5)  \n    .doOnNext(title -> saveTitle(title))  // 做保存标题操作\n    .subscribe(title -> System.out.println(title));  \n```\n\n#### 7. subscribeOn/observerOn操作符\n\n> 通过`subscribeOn()`指定观察者运行的线程，`observerOn()`指定订阅者运行的线程\n\n[What's the difference between SubscribeOn and ObserveOn](http://stackoverflow.com/questions/7579237/whats-the-difference-between-subscribeon-and-observeon)\n\n```java\nObservable.from(someSource)  \n    .map(data -> manipulate(data)) //将会在io线程执行\n    .subscribeOn(Schedulers.io())\n    .observeOn(AndroidSchedulers.mainThread())\n    .subscribe(data -> doSomething(data)); // 将会在主线程(UI线程）执行\n```\n\n这里值得一提的是：看到了这里的`Schedulers.io()`来定义I/O线程十分的欣喜，之前在看`Fresco`的时候其中的一个Pipeline结构，它通过按照硬件资源占用比例，分类线程池，提高了`Fresco`的整体速度，由于`CPU`/`GPU`的速度远快于其他模块, 可以利用**尽量占满CPU资源**的原则，创建了多个线程池（如`CPU`、`I/O`、`NET`）来完成。使得资源得到最大的利用以提升速度。而`Schedulers.io`这种方式，也是通过架构的层面达到这种效果。\n\n## V. 取消订阅(Subscriptions)\n\n> 当调用`Observable.subscribe()`，会返回一个`Subscription`对象。这个对象代表了被观察者和订阅者之间的联系。\n\n```java\nubscription subscription = Observable.just(\"Hello, World!\")\n    .subscribe(s -> System.out.println(s));\n\nsubscription.unsubscribe(); //调用会停止整个调用链（会在当前正在执行的操作符的地方就终止）\nSystem.out.println(\"Unsubscribed=\" + subscription.isUnsubscribed());\n// Outputs \"Unsubscribed=true\"\n```\n\n## VI. RxAndroid\n\n> 是RxJava的一个针对Android平台的扩展。它包含了一些能够简化Android开发的工具\n> **地址:** [https://github.com/ReactiveX/RxAndroid](https://github.com/ReactiveX/RxAndroid)\n\n#### 1. AndroidSchedulers\n\n> 提供了针对Android的线程系统的调度\n\n```java\nretrofitService.getImage(url)\n    .subscribeOn(Schedulers.io()) //操作符中间操作在I/0线程\n    .observeOn(AndroidSchedulers.mainThread()) // subscribe 在UI线程\n    .subscribe(bitmap -> myImageView.setImageBitmap(bitmap));\n```\n\n#### 2. AndroidObservable\n\n> 它提供了跟踪Android生命周期的功能。`bindActivity()`和`bindFragment()`方法默认在UI线程调用，并且这两个方法会在生命周期结束的时候通知Observable停止发出新的消息。\n\n```java\nAndroidObservable.bindActivity(this, retrofitService.getImage(url))\n    .subscribeOn(Schedulers.io())\n    .subscribe(bitmap -> myImageView.setImageBitmap(bitmap);\n```\n\n#### 3. AndroidObservable.fromBroadcast\n\n> 功能类似`BroadcastReceiver`\n\n```java\n// 实现了网络变化被通知到\nIntentFilter filter = new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION);\nAndroidObservable.fromBroadcast(context, filter)\n    .subscribe(intent -> handleConnectivityChange(intent));\n```\n\n#### 4. ViewObservable\n\n> 可以很轻易的在View触发某些Action时，被通知\n\n```java\n// 这里监听了mCardNameEditText的点击时间\nViewObservable.clicks(mCardNameEditText, false)\n    .subscribe(view -> handleClick(view));\n\n// 还可以进行很多监听，如ViewObservable.text就可以监听TextView的内容变化\n```\n\n## VII. 常见问题解决\n\n#### 1. 在configuration改变（比如转屏）之后继续之前的Subscription/使用Retrofit发出了一个REST请求，接着想在listview中展示结果。如果在网络请求的时候用户旋转了屏幕怎么办？你当然想继续刚才的请求，但是怎么搞？\n\n> 通过RxJava内置缓存机制解决\n> **原理:** `cache()`(或者`replay()`)不会使`unsubscribe`打断，网络请求，因此在`unsubscribe`以后直接从`cache()`的返回值中创建一个新的`Observable`对象。\n\n```java\nObservable<Photo> request = service.getUserPhoto(id).cache(); //缓存请求结果，缓存的地方需要具体实现(在这个案例中，应该缓存在生命周期以外的地方)\nSubscription sub = request.subscribe(photo -> handleUserPhoto(photo));\n\n//当Activity将需要重建(一般是销毁)的时候\nsub.unsubscribe();\n\n//一旦Activity重建\nrequest.subscribe(photo -> handleUserPhoto(photo));\n```\n#### 2. Observable持有Context导致的内存泄露\n\n> 参考解决方案: 在生命周期的某个时刻取消订阅\n> **原理:** 利用`CompositeSubscription`持有所有的`Subscriptions`，然后在`onDestory()`或者`onDestroyView()`里取消所有的订阅。\n\n```java\n// 一般可以在Activyt/Fragment的基类里面定义这个，达到系统化处理\nprivate CompositeSubscription mCompositeSubscription\n    = new CompositeSubscription();\n\nprivate void doSomething() {\n    mCompositeSubscription.add(\n        AndroidObservable.bindActivity(this, Observable.just(\"Hello, World!\"))\n        .subscribe(s -> System.out.println(s)));\n}\n\n@Override\nprotected void onDestroy() {\n    super.onDestroy();\n\n    //一旦调用了CompositeSubscription.unsubscribe，CompositeSubscription对象就不可用了\n    mCompositeSubscription.unsubscribe();\n}\n```\n\n## VIII. 拓展\n\n#### 1. Retrofit\n\n> **功能:**  REST的网络架构，目前有[测试结果](http://themakeinfo.com/2015/04/retrofit-android-tutorial/)比Volley、AsyncTask快\n> 目前Retrofit库内置了对RxJava的支持\n\n```java\n//请求是获取照片\n@GET(\"/user/{id}/photo\")\nObservable<Photo> getUserPhoto(@Path(\"id\") int id);\n//请求元数据\n@GET(\"/user/{id}/photo/metadata\")\nObservable<Photo> getPhotoMetadata(@Path(\"id\") int id);\n\n// 将这两个请求并发的发出，并且等待两个结果都返回之后再做处理\nObservable.zip(\n    service.getUserPhoto(id),\n    service.getPhotoMetadata(id),\n    (photo, metadata) -> createPhotoWithData(photo, metadata))\n    .subscribe(photoWithData -> showPhoto(photoWithData));\n```\n\n#### 2. 旧代码整合RxJava\n\n> 比较简单的办法\n\n如果`oldMethod`足够快:\n\n```java\nprivate Object oldMethod() { ... }\n\npublic Observable<Object> newMethod() {\n    return Observable.just(oldMethod());\n}\n```\n\n如果`oldMethod`很慢，为了防止阻塞所在线程:\n\n```java\nprivate Object slowBlockingMethod() { ... }\n\npublic Observable<Object> newMethod() {\n    return Observable.defer(() -> Observable.just(slowBlockingMethod()));\n}\n```\n\n----\n\n## 简单案例\n\n#### 案例1\n\n```java\nObservable.just(\"Alpha\",\"Beta\",\"Gamma\",\"Delta\",\"Epsilon\")\n        .map(s -> s.length())\n        .distinct() //去除重复\n        .subscribe(l -> System.out.println(l));\n```\n\n输出\n\n```\n5\n4\n7\n```\n\n#### 案例2\n\n```java\nObservable.just(\"1/5/8\", \"1/9/11/58/16/\", \"9/15/56/49/21\");\n        .flatMap(s -> Observable.from(s.split(\"/\")))\n        .map(s -> Integer.valueOf(s))\n        .subscribe(i -> System.out.println(i));\n```\n\n输出\n\n```\n1\n5\n8\n1\n9\n11\n58\n16\n9\n15\n56\n49\n21\n```\n\n#### 案例3\n\n> 提供多个Observable根据不同的数据进行网络请求，当其中有一个成功，就停止请求，如果所有请求都失败就失败。\n\n```java\nmodelProvider.getItems() // 多个不同数据的Observable\n    .flatMap(retroApiInterface::doBackendRequest) //触发网络请求\n    .takeUntil(response -> response.isSuccessful()) // 直到其中有任意一个请求成功，将停止其他的请求\n    .lastOrDefault(ServerResponse.createUnsuccessful()) // 所有的都请求都失败就返回失败的\n    .toSingle() // 如果最后一个\n    .subscribe(response -> {\n        if (response.isSuccessful()) {\n            // We made it.\n        } else {\n            // Not successful.\n        }\n    }, throwable -> {\n        // Some error happened along the way.\n    })\n\n// 下面是简化版\nmodelProvider.getItems() // 多个不同数据的Observable\n    .flatMap(retroApiInterface::doBackendRequest) //触发网络请求\n    .firstOrDefault(ServerResponse.createUnsuccessful(), response -> response.isSuccessful()) // 直到其中有任意一个请求成功，将停止其他的请求\n    .toSingle()\n```\n\n----\n\n[更多了解请移步>>](https://github.com/ReactiveX/RxJava/wiki)\n\n#### 参考以下文档整理:\n\n- [Grokking RxJava, Part 1: The Basics](http://blog.danlew.net/2014/09/15/grokking-rxjava-part-1/)\n- [Grokking RxJava, Part 2: Operator, Operator](http://blog.danlew.net/2014/09/22/grokking-rxjava-part-2/)\n- [Grokking RxJava, Part 3: Reactive with Benefits](http://blog.danlew.net/2014/09/30/grokking-rxjava-part-3/)\n- [Grokking RxJava, Part 4: Reactive Android](http://blog.danlew.net/2014/10/08/grokking-rxjava-part-4/)\n\n\n#### 参考以下博客的翻译校对:\n\n[大头鬼Bruce](http://blog.csdn.net/lzyzsd)\n\n#### 拓展阅读:\n\n- [不要打破链式：使用Rxjava的compose()操作符](http://www.pythonnote.com/archives/bu-yao-da-po-lian-shi-shi-yong-rxjavade-composecao-zuo-fu.html)\n- [RxAndroid(RxJava) 与 AsyncTask](http://blog.dreamtobe.cn/2312.html)\n- [Crash Course on RxJava with Thomas Nield (Part 1)](http://www.andevcon.com/news/crash-course-on-rxjava-with-thomas-nield-part-1?utm_content=buffer4d157&utm_medium=social&utm_source=twitter.com&utm_campaign=buffer)\n- [通过RxJava简化SQL查询 -  RxJava-JDBC](https://github.com/davidmoten/rxjava-jdbc)\n- [RxJava — Practical takeUntil Example](https://medium.com/@vanniktech/rxjava-practial-takeuntil-example-bc9766918cad#.7ufu9ry19)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/RxJava学习整理.md","raw":"title: RxJava\ndate: 2015-04-29 08:35:03\npermalink: 2015/04/29/RxJava学习整理\ntags:\n- java\n- RxAndroid\n- RxJava\n- 响应式编程\n- 架构\n- 模式\n- 观察者模式\n\n---\n\n> 响应式编程（观察者模式）\n\nps: 如果不了解Lambda的话，最好先看下[Lambda](http://blog.dreamtobe.cn/2281.html), 文中都是使用Lambda语法\n\n## I. 核心\n\n**被观察者:** Observables (发出一系列事件)\n\n**观察者:** Subscribers (处理这些事件)\n\n<!--more-->\n1. Observable和Subscriber可以做任何事情\n\n2. Observable和Subscriber是独立于中间的变换过程的。\n\n\n## II. 基本原型\n\n```java\n//创建 Observable\nObservable<String> myObservable = Observable.create(\n    new Observable.OnSubscribe<String>() {\n        @Override\n        public void call(Subscriber<? super String> sub) {\n            sub.onNext(\"Hello, world!\");\n            sub.onCompleted();\n        }\n    }\n);\n\n//创建 Subscriber\nSubscriber<String> mySubscriber = new Subscriber<String>() {\n    @Override\n    public void onNext(String s) { System.out.println(s); }\n\n// 如果正确的终结，最后会调到这里\n    @Override\n    public void onCompleted() { }\n\n// 只要有异常抛出（包括操作符中的调用），会调到这里\n    @Override\n    public void onError(Throwable e) { }\n};\n\n//mySubscriber订阅myObservable\nmyObservable.subscribe(mySubscriber);  \n```\n\n## III. 通用接口\n\n```java\n// Action1<T>(){ call(String): void}\nmyObservable.subscribe(onNextAction, onErrorAction, onCompleteAction);  \n\nmyObservable.subscribe(onNextAction);  \n```\n\n上面的代码最终可以变成这样\n\n```java\n//Action1<T>\nObservable.just(\"Hello, world!\")\n    .subscribe(s -> System.out.println(s));\n```\n\n## IV. 一些典型的操作符(Operators)\n\n> 操作符用于在Observable和最终的Subscriber之间修改Observable发出的时间(RxJava提供了很多有用的操作符)\n\n```java\n//假设定义了以下方法，接下来有些地方为了举例有用到\nquery(String) : Observable<List<String>> // 根据链接搜索结果\ngetTitle(String) : Observable<String> // 获取标题\nsaveTitle(String) : boolean // 保存标题\n```\n\n#### 1. map操作符\n\n> 把一个事件转换为另一个事件 ( 不必返回Observable对象返回的类型，如下面就返回了int，而Observable返回的是String )\n\n[map官方文档](http://reactivex.io/documentation/operators/map.html)\n\n![](/img/rxjava-map.png)\n\n\n```java\nObservable.just(\"Hello, world!\")\n    .map(s -> s.hashCode())\n    .map(i -> Integer.toString(i))\n    .subscribe(s -> System.out.println(s));\n```\n\n\n\n#### 2. from操作符\n\n> 接收一个集合作为输入，然后每次输出一个元素给subscriber\n\n[from官方文档](http://reactivex.io/documentation/operators/from.html)\n\n![](/img/rxjava-from.png)\n\n```java\nObservable.from(\"url1\", \"url2\", \"url3\")  \n    .subscribe(url -> System.out.println(url));\n```\n\n#### 3. flatMap操作符\n\n> 接收一个Observable的输出作为输入，同时输出另外一个Observable （可以用来很好的解决多重嵌套回调的问题）\n\n[flatMap官方文档](http://reactivex.io/documentation/operators/flatmap.html)\n\n![](/img/rxjava-flatmap.png)\n\n```java\n// 这里通过flatMap，输入一个Observable<List<String>>返回了一个新的Observable<String>\n\nquery(\"Hello, world!\")  \n    .flatMap(urls -> Observable.from(urls))\n    .flatMap(url -> getTitle(url))\n    .subscribe(title -> System.out.println(title));\n```\n\n#### 4. filter操作符\n\n> 输入与输出为相同元素，过滤掉不满足检查条件的\n\n[filter官方文档](http://reactivex.io/documentation/operators/filter.html)\n\n![](/img/rxjava-filter.png)\n\n```java\nquery(\"Hello, world!\")  \n    .flatMap(urls -> Observable.from(urls))  \n    .flatMap(url -> getTitle(url))  \n    .filter(title -> title != null)  // 这里过滤掉了 title 为 null 的情况\n    .subscribe(title -> System.out.println(title));  \n```\n\n#### 5. take操作符\n\n> 输出最多指定数量的结果\n\n[take官方文档](http://reactivex.io/documentation/operators/take.html)\n\n![](/img/rxjava-take.png)\n\n```java\nquery(\"Hello, world!\")  \n    .flatMap(urls -> Observable.from(urls))  \n    .flatMap(url -> getTitle(url))  \n    .filter(title -> title != null)  \n    .take(5) // 最多5个结果\n    .subscribe(title -> System.out.println(title));  \n```\n\n#### 6. doOnNext操作符\n\n> 在每次输出一个元素之前做一些额外的事情\n\n```java\nquery(\"Hello, world!\")  \n    .flatMap(urls -> Observable.from(urls))  \n    .flatMap(url -> getTitle(url))  \n    .filter(title -> title != null)  \n    .take(5)  \n    .doOnNext(title -> saveTitle(title))  // 做保存标题操作\n    .subscribe(title -> System.out.println(title));  \n```\n\n#### 7. subscribeOn/observerOn操作符\n\n> 通过`subscribeOn()`指定观察者运行的线程，`observerOn()`指定订阅者运行的线程\n\n[What's the difference between SubscribeOn and ObserveOn](http://stackoverflow.com/questions/7579237/whats-the-difference-between-subscribeon-and-observeon)\n\n```java\nObservable.from(someSource)  \n    .map(data -> manipulate(data)) //将会在io线程执行\n    .subscribeOn(Schedulers.io())\n    .observeOn(AndroidSchedulers.mainThread())\n    .subscribe(data -> doSomething(data)); // 将会在主线程(UI线程）执行\n```\n\n这里值得一提的是：看到了这里的`Schedulers.io()`来定义I/O线程十分的欣喜，之前在看`Fresco`的时候其中的一个Pipeline结构，它通过按照硬件资源占用比例，分类线程池，提高了`Fresco`的整体速度，由于`CPU`/`GPU`的速度远快于其他模块, 可以利用**尽量占满CPU资源**的原则，创建了多个线程池（如`CPU`、`I/O`、`NET`）来完成。使得资源得到最大的利用以提升速度。而`Schedulers.io`这种方式，也是通过架构的层面达到这种效果。\n\n## V. 取消订阅(Subscriptions)\n\n> 当调用`Observable.subscribe()`，会返回一个`Subscription`对象。这个对象代表了被观察者和订阅者之间的联系。\n\n```java\nubscription subscription = Observable.just(\"Hello, World!\")\n    .subscribe(s -> System.out.println(s));\n\nsubscription.unsubscribe(); //调用会停止整个调用链（会在当前正在执行的操作符的地方就终止）\nSystem.out.println(\"Unsubscribed=\" + subscription.isUnsubscribed());\n// Outputs \"Unsubscribed=true\"\n```\n\n## VI. RxAndroid\n\n> 是RxJava的一个针对Android平台的扩展。它包含了一些能够简化Android开发的工具\n> **地址:** [https://github.com/ReactiveX/RxAndroid](https://github.com/ReactiveX/RxAndroid)\n\n#### 1. AndroidSchedulers\n\n> 提供了针对Android的线程系统的调度\n\n```java\nretrofitService.getImage(url)\n    .subscribeOn(Schedulers.io()) //操作符中间操作在I/0线程\n    .observeOn(AndroidSchedulers.mainThread()) // subscribe 在UI线程\n    .subscribe(bitmap -> myImageView.setImageBitmap(bitmap));\n```\n\n#### 2. AndroidObservable\n\n> 它提供了跟踪Android生命周期的功能。`bindActivity()`和`bindFragment()`方法默认在UI线程调用，并且这两个方法会在生命周期结束的时候通知Observable停止发出新的消息。\n\n```java\nAndroidObservable.bindActivity(this, retrofitService.getImage(url))\n    .subscribeOn(Schedulers.io())\n    .subscribe(bitmap -> myImageView.setImageBitmap(bitmap);\n```\n\n#### 3. AndroidObservable.fromBroadcast\n\n> 功能类似`BroadcastReceiver`\n\n```java\n// 实现了网络变化被通知到\nIntentFilter filter = new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION);\nAndroidObservable.fromBroadcast(context, filter)\n    .subscribe(intent -> handleConnectivityChange(intent));\n```\n\n#### 4. ViewObservable\n\n> 可以很轻易的在View触发某些Action时，被通知\n\n```java\n// 这里监听了mCardNameEditText的点击时间\nViewObservable.clicks(mCardNameEditText, false)\n    .subscribe(view -> handleClick(view));\n\n// 还可以进行很多监听，如ViewObservable.text就可以监听TextView的内容变化\n```\n\n## VII. 常见问题解决\n\n#### 1. 在configuration改变（比如转屏）之后继续之前的Subscription/使用Retrofit发出了一个REST请求，接着想在listview中展示结果。如果在网络请求的时候用户旋转了屏幕怎么办？你当然想继续刚才的请求，但是怎么搞？\n\n> 通过RxJava内置缓存机制解决\n> **原理:** `cache()`(或者`replay()`)不会使`unsubscribe`打断，网络请求，因此在`unsubscribe`以后直接从`cache()`的返回值中创建一个新的`Observable`对象。\n\n```java\nObservable<Photo> request = service.getUserPhoto(id).cache(); //缓存请求结果，缓存的地方需要具体实现(在这个案例中，应该缓存在生命周期以外的地方)\nSubscription sub = request.subscribe(photo -> handleUserPhoto(photo));\n\n//当Activity将需要重建(一般是销毁)的时候\nsub.unsubscribe();\n\n//一旦Activity重建\nrequest.subscribe(photo -> handleUserPhoto(photo));\n```\n#### 2. Observable持有Context导致的内存泄露\n\n> 参考解决方案: 在生命周期的某个时刻取消订阅\n> **原理:** 利用`CompositeSubscription`持有所有的`Subscriptions`，然后在`onDestory()`或者`onDestroyView()`里取消所有的订阅。\n\n```java\n// 一般可以在Activyt/Fragment的基类里面定义这个，达到系统化处理\nprivate CompositeSubscription mCompositeSubscription\n    = new CompositeSubscription();\n\nprivate void doSomething() {\n    mCompositeSubscription.add(\n        AndroidObservable.bindActivity(this, Observable.just(\"Hello, World!\"))\n        .subscribe(s -> System.out.println(s)));\n}\n\n@Override\nprotected void onDestroy() {\n    super.onDestroy();\n\n    //一旦调用了CompositeSubscription.unsubscribe，CompositeSubscription对象就不可用了\n    mCompositeSubscription.unsubscribe();\n}\n```\n\n## VIII. 拓展\n\n#### 1. Retrofit\n\n> **功能:**  REST的网络架构，目前有[测试结果](http://themakeinfo.com/2015/04/retrofit-android-tutorial/)比Volley、AsyncTask快\n> 目前Retrofit库内置了对RxJava的支持\n\n```java\n//请求是获取照片\n@GET(\"/user/{id}/photo\")\nObservable<Photo> getUserPhoto(@Path(\"id\") int id);\n//请求元数据\n@GET(\"/user/{id}/photo/metadata\")\nObservable<Photo> getPhotoMetadata(@Path(\"id\") int id);\n\n// 将这两个请求并发的发出，并且等待两个结果都返回之后再做处理\nObservable.zip(\n    service.getUserPhoto(id),\n    service.getPhotoMetadata(id),\n    (photo, metadata) -> createPhotoWithData(photo, metadata))\n    .subscribe(photoWithData -> showPhoto(photoWithData));\n```\n\n#### 2. 旧代码整合RxJava\n\n> 比较简单的办法\n\n如果`oldMethod`足够快:\n\n```java\nprivate Object oldMethod() { ... }\n\npublic Observable<Object> newMethod() {\n    return Observable.just(oldMethod());\n}\n```\n\n如果`oldMethod`很慢，为了防止阻塞所在线程:\n\n```java\nprivate Object slowBlockingMethod() { ... }\n\npublic Observable<Object> newMethod() {\n    return Observable.defer(() -> Observable.just(slowBlockingMethod()));\n}\n```\n\n----\n\n## 简单案例\n\n#### 案例1\n\n```java\nObservable.just(\"Alpha\",\"Beta\",\"Gamma\",\"Delta\",\"Epsilon\")\n        .map(s -> s.length())\n        .distinct() //去除重复\n        .subscribe(l -> System.out.println(l));\n```\n\n输出\n\n```\n5\n4\n7\n```\n\n#### 案例2\n\n```java\nObservable.just(\"1/5/8\", \"1/9/11/58/16/\", \"9/15/56/49/21\");\n        .flatMap(s -> Observable.from(s.split(\"/\")))\n        .map(s -> Integer.valueOf(s))\n        .subscribe(i -> System.out.println(i));\n```\n\n输出\n\n```\n1\n5\n8\n1\n9\n11\n58\n16\n9\n15\n56\n49\n21\n```\n\n#### 案例3\n\n> 提供多个Observable根据不同的数据进行网络请求，当其中有一个成功，就停止请求，如果所有请求都失败就失败。\n\n```java\nmodelProvider.getItems() // 多个不同数据的Observable\n    .flatMap(retroApiInterface::doBackendRequest) //触发网络请求\n    .takeUntil(response -> response.isSuccessful()) // 直到其中有任意一个请求成功，将停止其他的请求\n    .lastOrDefault(ServerResponse.createUnsuccessful()) // 所有的都请求都失败就返回失败的\n    .toSingle() // 如果最后一个\n    .subscribe(response -> {\n        if (response.isSuccessful()) {\n            // We made it.\n        } else {\n            // Not successful.\n        }\n    }, throwable -> {\n        // Some error happened along the way.\n    })\n\n// 下面是简化版\nmodelProvider.getItems() // 多个不同数据的Observable\n    .flatMap(retroApiInterface::doBackendRequest) //触发网络请求\n    .firstOrDefault(ServerResponse.createUnsuccessful(), response -> response.isSuccessful()) // 直到其中有任意一个请求成功，将停止其他的请求\n    .toSingle()\n```\n\n----\n\n[更多了解请移步>>](https://github.com/ReactiveX/RxJava/wiki)\n\n#### 参考以下文档整理:\n\n- [Grokking RxJava, Part 1: The Basics](http://blog.danlew.net/2014/09/15/grokking-rxjava-part-1/)\n- [Grokking RxJava, Part 2: Operator, Operator](http://blog.danlew.net/2014/09/22/grokking-rxjava-part-2/)\n- [Grokking RxJava, Part 3: Reactive with Benefits](http://blog.danlew.net/2014/09/30/grokking-rxjava-part-3/)\n- [Grokking RxJava, Part 4: Reactive Android](http://blog.danlew.net/2014/10/08/grokking-rxjava-part-4/)\n\n\n#### 参考以下博客的翻译校对:\n\n[大头鬼Bruce](http://blog.csdn.net/lzyzsd)\n\n#### 拓展阅读:\n\n- [不要打破链式：使用Rxjava的compose()操作符](http://www.pythonnote.com/archives/bu-yao-da-po-lian-shi-shi-yong-rxjavade-composecao-zuo-fu.html)\n- [RxAndroid(RxJava) 与 AsyncTask](http://blog.dreamtobe.cn/2312.html)\n- [Crash Course on RxJava with Thomas Nield (Part 1)](http://www.andevcon.com/news/crash-course-on-rxjava-with-thomas-nield-part-1?utm_content=buffer4d157&utm_medium=social&utm_source=twitter.com&utm_campaign=buffer)\n- [通过RxJava简化SQL查询 -  RxJava-JDBC](https://github.com/davidmoten/rxjava-jdbc)\n- [RxJava — Practical takeUntil Example](https://medium.com/@vanniktech/rxjava-practial-takeuntil-example-bc9766918cad#.7ufu9ry19)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2015/04/29/RxJava学习整理","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66i0001095buyghr8fue","content":"<blockquote>\n<p>响应式编程（观察者模式）</p>\n</blockquote>\n<p>ps: 如果不了解Lambda的话，最好先看下<a href=\"http://blog.dreamtobe.cn/2281.html\">Lambda</a>, 文中都是使用Lambda语法</p>\n<h2 id=\"I-核心\"><a href=\"#I-核心\" class=\"headerlink\" title=\"I. 核心\"></a>I. 核心</h2><p><strong>被观察者:</strong> Observables (发出一系列事件)</p>\n<p><strong>观察者:</strong> Subscribers (处理这些事件)</p>\n<a id=\"more\"></a>\n<ol>\n<li><p>Observable和Subscriber可以做任何事情</p>\n</li>\n<li><p>Observable和Subscriber是独立于中间的变换过程的。</p>\n</li>\n</ol>\n<h2 id=\"II-基本原型\"><a href=\"#II-基本原型\" class=\"headerlink\" title=\"II. 基本原型\"></a>II. 基本原型</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建 Observable</span></div><div class=\"line\">Observable&lt;String&gt; myObservable = Observable.create(</div><div class=\"line\">    <span class=\"keyword\">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(Subscriber&lt;? <span class=\"keyword\">super</span> String&gt; sub)</span> </span>&#123;</div><div class=\"line\">            sub.onNext(<span class=\"string\">\"Hello, world!\"</span>);</div><div class=\"line\">            sub.onCompleted();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//创建 Subscriber</span></div><div class=\"line\">Subscriber&lt;String&gt; mySubscriber = <span class=\"keyword\">new</span> Subscriber&lt;String&gt;() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(String s)</span> </span>&#123; System.out.println(s); &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 如果正确的终结，最后会调到这里</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCompleted</span><span class=\"params\">()</span> </span>&#123; &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 只要有异常抛出（包括操作符中的调用），会调到这里</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123; &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//mySubscriber订阅myObservable</span></div><div class=\"line\">myObservable.subscribe(mySubscriber);</div></pre></td></tr></table></figure>\n<h2 id=\"III-通用接口\"><a href=\"#III-通用接口\" class=\"headerlink\" title=\"III. 通用接口\"></a>III. 通用接口</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Action1&lt;T&gt;()&#123; call(String): void&#125;</span></div><div class=\"line\">myObservable.subscribe(onNextAction, onErrorAction, onCompleteAction);  </div><div class=\"line\"></div><div class=\"line\">myObservable.subscribe(onNextAction);</div></pre></td></tr></table></figure>\n<p>上面的代码最终可以变成这样</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Action1&lt;T&gt;</span></div><div class=\"line\">Observable.just(<span class=\"string\">\"Hello, world!\"</span>)</div><div class=\"line\">    .subscribe(s -&gt; System.out.println(s));</div></pre></td></tr></table></figure>\n<h2 id=\"IV-一些典型的操作符-Operators\"><a href=\"#IV-一些典型的操作符-Operators\" class=\"headerlink\" title=\"IV. 一些典型的操作符(Operators)\"></a>IV. 一些典型的操作符(Operators)</h2><blockquote>\n<p>操作符用于在Observable和最终的Subscriber之间修改Observable发出的时间(RxJava提供了很多有用的操作符)</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//假设定义了以下方法，接下来有些地方为了举例有用到</span></div><div class=\"line\">query(String) : Observable&lt;List&lt;String&gt;&gt; <span class=\"comment\">// 根据链接搜索结果</span></div><div class=\"line\">getTitle(String) : Observable&lt;String&gt; <span class=\"comment\">// 获取标题</span></div><div class=\"line\">saveTitle(String) : <span class=\"keyword\">boolean</span> <span class=\"comment\">// 保存标题</span></div></pre></td></tr></table></figure>\n<h4 id=\"1-map操作符\"><a href=\"#1-map操作符\" class=\"headerlink\" title=\"1. map操作符\"></a>1. map操作符</h4><blockquote>\n<p>把一个事件转换为另一个事件 ( 不必返回Observable对象返回的类型，如下面就返回了int，而Observable返回的是String )</p>\n</blockquote>\n<p><a href=\"http://reactivex.io/documentation/operators/map.html\" target=\"_blank\" rel=\"external\">map官方文档</a></p>\n<p><img src=\"/img/rxjava-map.png\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observable.just(<span class=\"string\">\"Hello, world!\"</span>)</div><div class=\"line\">    .map(s -&gt; s.hashCode())</div><div class=\"line\">    .map(i -&gt; Integer.toString(i))</div><div class=\"line\">    .subscribe(s -&gt; System.out.println(s));</div></pre></td></tr></table></figure>\n<h4 id=\"2-from操作符\"><a href=\"#2-from操作符\" class=\"headerlink\" title=\"2. from操作符\"></a>2. from操作符</h4><blockquote>\n<p>接收一个集合作为输入，然后每次输出一个元素给subscriber</p>\n</blockquote>\n<p><a href=\"http://reactivex.io/documentation/operators/from.html\" target=\"_blank\" rel=\"external\">from官方文档</a></p>\n<p><img src=\"/img/rxjava-from.png\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observable.from(<span class=\"string\">\"url1\"</span>, <span class=\"string\">\"url2\"</span>, <span class=\"string\">\"url3\"</span>)  </div><div class=\"line\">    .subscribe(url -&gt; System.out.println(url));</div></pre></td></tr></table></figure>\n<h4 id=\"3-flatMap操作符\"><a href=\"#3-flatMap操作符\" class=\"headerlink\" title=\"3. flatMap操作符\"></a>3. flatMap操作符</h4><blockquote>\n<p>接收一个Observable的输出作为输入，同时输出另外一个Observable （可以用来很好的解决多重嵌套回调的问题）</p>\n</blockquote>\n<p><a href=\"http://reactivex.io/documentation/operators/flatmap.html\" target=\"_blank\" rel=\"external\">flatMap官方文档</a></p>\n<p><img src=\"/img/rxjava-flatmap.png\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 这里通过flatMap，输入一个Observable&lt;List&lt;String&gt;&gt;返回了一个新的Observable&lt;String&gt;</span></div><div class=\"line\"></div><div class=\"line\">query(<span class=\"string\">\"Hello, world!\"</span>)  </div><div class=\"line\">    .flatMap(urls -&gt; Observable.from(urls))</div><div class=\"line\">    .flatMap(url -&gt; getTitle(url))</div><div class=\"line\">    .subscribe(title -&gt; System.out.println(title));</div></pre></td></tr></table></figure>\n<h4 id=\"4-filter操作符\"><a href=\"#4-filter操作符\" class=\"headerlink\" title=\"4. filter操作符\"></a>4. filter操作符</h4><blockquote>\n<p>输入与输出为相同元素，过滤掉不满足检查条件的</p>\n</blockquote>\n<p><a href=\"http://reactivex.io/documentation/operators/filter.html\" target=\"_blank\" rel=\"external\">filter官方文档</a></p>\n<p><img src=\"/img/rxjava-filter.png\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">query(<span class=\"string\">\"Hello, world!\"</span>)  </div><div class=\"line\">    .flatMap(urls -&gt; Observable.from(urls))  </div><div class=\"line\">    .flatMap(url -&gt; getTitle(url))  </div><div class=\"line\">    .filter(title -&gt; title != <span class=\"keyword\">null</span>)  <span class=\"comment\">// 这里过滤掉了 title 为 null 的情况</span></div><div class=\"line\">    .subscribe(title -&gt; System.out.println(title));</div></pre></td></tr></table></figure>\n<h4 id=\"5-take操作符\"><a href=\"#5-take操作符\" class=\"headerlink\" title=\"5. take操作符\"></a>5. take操作符</h4><blockquote>\n<p>输出最多指定数量的结果</p>\n</blockquote>\n<p><a href=\"http://reactivex.io/documentation/operators/take.html\" target=\"_blank\" rel=\"external\">take官方文档</a></p>\n<p><img src=\"/img/rxjava-take.png\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">query(<span class=\"string\">\"Hello, world!\"</span>)  </div><div class=\"line\">    .flatMap(urls -&gt; Observable.from(urls))  </div><div class=\"line\">    .flatMap(url -&gt; getTitle(url))  </div><div class=\"line\">    .filter(title -&gt; title != <span class=\"keyword\">null</span>)  </div><div class=\"line\">    .take(<span class=\"number\">5</span>) <span class=\"comment\">// 最多5个结果</span></div><div class=\"line\">    .subscribe(title -&gt; System.out.println(title));</div></pre></td></tr></table></figure>\n<h4 id=\"6-doOnNext操作符\"><a href=\"#6-doOnNext操作符\" class=\"headerlink\" title=\"6. doOnNext操作符\"></a>6. doOnNext操作符</h4><blockquote>\n<p>在每次输出一个元素之前做一些额外的事情</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">query(<span class=\"string\">\"Hello, world!\"</span>)  </div><div class=\"line\">    .flatMap(urls -&gt; Observable.from(urls))  </div><div class=\"line\">    .flatMap(url -&gt; getTitle(url))  </div><div class=\"line\">    .filter(title -&gt; title != <span class=\"keyword\">null</span>)  </div><div class=\"line\">    .take(<span class=\"number\">5</span>)  </div><div class=\"line\">    .doOnNext(title -&gt; saveTitle(title))  <span class=\"comment\">// 做保存标题操作</span></div><div class=\"line\">    .subscribe(title -&gt; System.out.println(title));</div></pre></td></tr></table></figure>\n<h4 id=\"7-subscribeOn-observerOn操作符\"><a href=\"#7-subscribeOn-observerOn操作符\" class=\"headerlink\" title=\"7. subscribeOn/observerOn操作符\"></a>7. subscribeOn/observerOn操作符</h4><blockquote>\n<p>通过<code>subscribeOn()</code>指定观察者运行的线程，<code>observerOn()</code>指定订阅者运行的线程</p>\n</blockquote>\n<p><a href=\"http://stackoverflow.com/questions/7579237/whats-the-difference-between-subscribeon-and-observeon\" target=\"_blank\" rel=\"external\">What’s the difference between SubscribeOn and ObserveOn</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observable.from(someSource)  </div><div class=\"line\">    .map(data -&gt; manipulate(data)) <span class=\"comment\">//将会在io线程执行</span></div><div class=\"line\">    .subscribeOn(Schedulers.io())</div><div class=\"line\">    .observeOn(AndroidSchedulers.mainThread())</div><div class=\"line\">    .subscribe(data -&gt; doSomething(data)); <span class=\"comment\">// 将会在主线程(UI线程）执行</span></div></pre></td></tr></table></figure>\n<p>这里值得一提的是：看到了这里的<code>Schedulers.io()</code>来定义I/O线程十分的欣喜，之前在看<code>Fresco</code>的时候其中的一个Pipeline结构，它通过按照硬件资源占用比例，分类线程池，提高了<code>Fresco</code>的整体速度，由于<code>CPU</code>/<code>GPU</code>的速度远快于其他模块, 可以利用<strong>尽量占满CPU资源</strong>的原则，创建了多个线程池（如<code>CPU</code>、<code>I/O</code>、<code>NET</code>）来完成。使得资源得到最大的利用以提升速度。而<code>Schedulers.io</code>这种方式，也是通过架构的层面达到这种效果。</p>\n<h2 id=\"V-取消订阅-Subscriptions\"><a href=\"#V-取消订阅-Subscriptions\" class=\"headerlink\" title=\"V. 取消订阅(Subscriptions)\"></a>V. 取消订阅(Subscriptions)</h2><blockquote>\n<p>当调用<code>Observable.subscribe()</code>，会返回一个<code>Subscription</code>对象。这个对象代表了被观察者和订阅者之间的联系。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">ubscription subscription = Observable.just(<span class=\"string\">\"Hello, World!\"</span>)</div><div class=\"line\">    .subscribe(s -&gt; System.out.println(s));</div><div class=\"line\"></div><div class=\"line\">subscription.unsubscribe(); <span class=\"comment\">//调用会停止整个调用链（会在当前正在执行的操作符的地方就终止）</span></div><div class=\"line\">System.out.println(<span class=\"string\">\"Unsubscribed=\"</span> + subscription.isUnsubscribed());</div><div class=\"line\"><span class=\"comment\">// Outputs \"Unsubscribed=true\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"VI-RxAndroid\"><a href=\"#VI-RxAndroid\" class=\"headerlink\" title=\"VI. RxAndroid\"></a>VI. RxAndroid</h2><blockquote>\n<p>是RxJava的一个针对Android平台的扩展。它包含了一些能够简化Android开发的工具<br><strong>地址:</strong> <a href=\"https://github.com/ReactiveX/RxAndroid\" target=\"_blank\" rel=\"external\">https://github.com/ReactiveX/RxAndroid</a></p>\n</blockquote>\n<h4 id=\"1-AndroidSchedulers\"><a href=\"#1-AndroidSchedulers\" class=\"headerlink\" title=\"1. AndroidSchedulers\"></a>1. AndroidSchedulers</h4><blockquote>\n<p>提供了针对Android的线程系统的调度</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">retrofitService.getImage(url)</div><div class=\"line\">    .subscribeOn(Schedulers.io()) <span class=\"comment\">//操作符中间操作在I/0线程</span></div><div class=\"line\">    .observeOn(AndroidSchedulers.mainThread()) <span class=\"comment\">// subscribe 在UI线程</span></div><div class=\"line\">    .subscribe(bitmap -&gt; myImageView.setImageBitmap(bitmap));</div></pre></td></tr></table></figure>\n<h4 id=\"2-AndroidObservable\"><a href=\"#2-AndroidObservable\" class=\"headerlink\" title=\"2. AndroidObservable\"></a>2. AndroidObservable</h4><blockquote>\n<p>它提供了跟踪Android生命周期的功能。<code>bindActivity()</code>和<code>bindFragment()</code>方法默认在UI线程调用，并且这两个方法会在生命周期结束的时候通知Observable停止发出新的消息。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">AndroidObservable.bindActivity(<span class=\"keyword\">this</span>, retrofitService.getImage(url))</div><div class=\"line\">    .subscribeOn(Schedulers.io())</div><div class=\"line\">    .subscribe(bitmap -&gt; myImageView.setImageBitmap(bitmap);</div></pre></td></tr></table></figure>\n<h4 id=\"3-AndroidObservable-fromBroadcast\"><a href=\"#3-AndroidObservable-fromBroadcast\" class=\"headerlink\" title=\"3. AndroidObservable.fromBroadcast\"></a>3. AndroidObservable.fromBroadcast</h4><blockquote>\n<p>功能类似<code>BroadcastReceiver</code></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 实现了网络变化被通知到</span></div><div class=\"line\">IntentFilter filter = <span class=\"keyword\">new</span> IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION);</div><div class=\"line\">AndroidObservable.fromBroadcast(context, filter)</div><div class=\"line\">    .subscribe(intent -&gt; handleConnectivityChange(intent));</div></pre></td></tr></table></figure>\n<h4 id=\"4-ViewObservable\"><a href=\"#4-ViewObservable\" class=\"headerlink\" title=\"4. ViewObservable\"></a>4. ViewObservable</h4><blockquote>\n<p>可以很轻易的在View触发某些Action时，被通知</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 这里监听了mCardNameEditText的点击时间</span></div><div class=\"line\">ViewObservable.clicks(mCardNameEditText, <span class=\"keyword\">false</span>)</div><div class=\"line\">    .subscribe(view -&gt; handleClick(view));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 还可以进行很多监听，如ViewObservable.text就可以监听TextView的内容变化</span></div></pre></td></tr></table></figure>\n<h2 id=\"VII-常见问题解决\"><a href=\"#VII-常见问题解决\" class=\"headerlink\" title=\"VII. 常见问题解决\"></a>VII. 常见问题解决</h2><h4 id=\"1-在configuration改变（比如转屏）之后继续之前的Subscription-使用Retrofit发出了一个REST请求，接着想在listview中展示结果。如果在网络请求的时候用户旋转了屏幕怎么办？你当然想继续刚才的请求，但是怎么搞？\"><a href=\"#1-在configuration改变（比如转屏）之后继续之前的Subscription-使用Retrofit发出了一个REST请求，接着想在listview中展示结果。如果在网络请求的时候用户旋转了屏幕怎么办？你当然想继续刚才的请求，但是怎么搞？\" class=\"headerlink\" title=\"1. 在configuration改变（比如转屏）之后继续之前的Subscription/使用Retrofit发出了一个REST请求，接着想在listview中展示结果。如果在网络请求的时候用户旋转了屏幕怎么办？你当然想继续刚才的请求，但是怎么搞？\"></a>1. 在configuration改变（比如转屏）之后继续之前的Subscription/使用Retrofit发出了一个REST请求，接着想在listview中展示结果。如果在网络请求的时候用户旋转了屏幕怎么办？你当然想继续刚才的请求，但是怎么搞？</h4><blockquote>\n<p>通过RxJava内置缓存机制解决<br><strong>原理:</strong> <code>cache()</code>(或者<code>replay()</code>)不会使<code>unsubscribe</code>打断，网络请求，因此在<code>unsubscribe</code>以后直接从<code>cache()</code>的返回值中创建一个新的<code>Observable</code>对象。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observable&lt;Photo&gt; request = service.getUserPhoto(id).cache(); <span class=\"comment\">//缓存请求结果，缓存的地方需要具体实现(在这个案例中，应该缓存在生命周期以外的地方)</span></div><div class=\"line\">Subscription sub = request.subscribe(photo -&gt; handleUserPhoto(photo));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//当Activity将需要重建(一般是销毁)的时候</span></div><div class=\"line\">sub.unsubscribe();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//一旦Activity重建</span></div><div class=\"line\">request.subscribe(photo -&gt; handleUserPhoto(photo));</div></pre></td></tr></table></figure>\n<h4 id=\"2-Observable持有Context导致的内存泄露\"><a href=\"#2-Observable持有Context导致的内存泄露\" class=\"headerlink\" title=\"2. Observable持有Context导致的内存泄露\"></a>2. Observable持有Context导致的内存泄露</h4><blockquote>\n<p>参考解决方案: 在生命周期的某个时刻取消订阅<br><strong>原理:</strong> 利用<code>CompositeSubscription</code>持有所有的<code>Subscriptions</code>，然后在<code>onDestory()</code>或者<code>onDestroyView()</code>里取消所有的订阅。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 一般可以在Activyt/Fragment的基类里面定义这个，达到系统化处理</span></div><div class=\"line\"><span class=\"keyword\">private</span> CompositeSubscription mCompositeSubscription</div><div class=\"line\">    = <span class=\"keyword\">new</span> CompositeSubscription();</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    mCompositeSubscription.add(</div><div class=\"line\">        AndroidObservable.bindActivity(<span class=\"keyword\">this</span>, Observable.just(<span class=\"string\">\"Hello, World!\"</span>))</div><div class=\"line\">        .subscribe(s -&gt; System.out.println(s)));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//一旦调用了CompositeSubscription.unsubscribe，CompositeSubscription对象就不可用了</span></div><div class=\"line\">    mCompositeSubscription.unsubscribe();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"VIII-拓展\"><a href=\"#VIII-拓展\" class=\"headerlink\" title=\"VIII. 拓展\"></a>VIII. 拓展</h2><h4 id=\"1-Retrofit\"><a href=\"#1-Retrofit\" class=\"headerlink\" title=\"1. Retrofit\"></a>1. Retrofit</h4><blockquote>\n<p><strong>功能:</strong>  REST的网络架构，目前有<a href=\"http://themakeinfo.com/2015/04/retrofit-android-tutorial/\" target=\"_blank\" rel=\"external\">测试结果</a>比Volley、AsyncTask快<br>目前Retrofit库内置了对RxJava的支持</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//请求是获取照片</span></div><div class=\"line\"><span class=\"meta\">@GET</span>(<span class=\"string\">\"/user/&#123;id&#125;/photo\"</span>)</div><div class=\"line\"><span class=\"function\">Observable&lt;Photo&gt; <span class=\"title\">getUserPhoto</span><span class=\"params\">(@Path(<span class=\"string\">\"id\"</span>)</span> <span class=\"keyword\">int</span> id)</span>;</div><div class=\"line\"><span class=\"comment\">//请求元数据</span></div><div class=\"line\"><span class=\"meta\">@GET</span>(<span class=\"string\">\"/user/&#123;id&#125;/photo/metadata\"</span>)</div><div class=\"line\"><span class=\"function\">Observable&lt;Photo&gt; <span class=\"title\">getPhotoMetadata</span><span class=\"params\">(@Path(<span class=\"string\">\"id\"</span>)</span> <span class=\"keyword\">int</span> id)</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 将这两个请求并发的发出，并且等待两个结果都返回之后再做处理</span></div><div class=\"line\">Observable.zip(</div><div class=\"line\">    service.getUserPhoto(id),</div><div class=\"line\">    service.getPhotoMetadata(id),</div><div class=\"line\">    (photo, metadata) -&gt; createPhotoWithData(photo, metadata))</div><div class=\"line\">    .subscribe(photoWithData -&gt; showPhoto(photoWithData));</div></pre></td></tr></table></figure>\n<h4 id=\"2-旧代码整合RxJava\"><a href=\"#2-旧代码整合RxJava\" class=\"headerlink\" title=\"2. 旧代码整合RxJava\"></a>2. 旧代码整合RxJava</h4><blockquote>\n<p>比较简单的办法</p>\n</blockquote>\n<p>如果<code>oldMethod</code>足够快:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Object <span class=\"title\">oldMethod</span><span class=\"params\">()</span> </span>&#123; ... &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Observable&lt;Object&gt; <span class=\"title\">newMethod</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> Observable.just(oldMethod());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果<code>oldMethod</code>很慢，为了防止阻塞所在线程:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Object <span class=\"title\">slowBlockingMethod</span><span class=\"params\">()</span> </span>&#123; ... &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Observable&lt;Object&gt; <span class=\"title\">newMethod</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> Observable.defer(() -&gt; Observable.just(slowBlockingMethod()));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"简单案例\"><a href=\"#简单案例\" class=\"headerlink\" title=\"简单案例\"></a>简单案例</h2><h4 id=\"案例1\"><a href=\"#案例1\" class=\"headerlink\" title=\"案例1\"></a>案例1</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observable.just(<span class=\"string\">\"Alpha\"</span>,<span class=\"string\">\"Beta\"</span>,<span class=\"string\">\"Gamma\"</span>,<span class=\"string\">\"Delta\"</span>,<span class=\"string\">\"Epsilon\"</span>)</div><div class=\"line\">        .map(s -&gt; s.length())</div><div class=\"line\">        .distinct() <span class=\"comment\">//去除重复</span></div><div class=\"line\">        .subscribe(l -&gt; System.out.println(l));</div></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">5</span></div><div class=\"line\"><span class=\"number\">4</span></div><div class=\"line\"><span class=\"number\">7</span></div></pre></td></tr></table></figure>\n<h4 id=\"案例2\"><a href=\"#案例2\" class=\"headerlink\" title=\"案例2\"></a>案例2</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observable.just(<span class=\"string\">\"1/5/8\"</span>, <span class=\"string\">\"1/9/11/58/16/\"</span>, <span class=\"string\">\"9/15/56/49/21\"</span>);</div><div class=\"line\">        .flatMap(s -&gt; Observable.from(s.split(<span class=\"string\">\"/\"</span>)))</div><div class=\"line\">        .map(s -&gt; Integer.valueOf(s))</div><div class=\"line\">        .subscribe(i -&gt; System.out.println(i));</div></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">5</span></div><div class=\"line\"><span class=\"number\">8</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">9</span></div><div class=\"line\"><span class=\"number\">11</span></div><div class=\"line\"><span class=\"number\">58</span></div><div class=\"line\"><span class=\"number\">16</span></div><div class=\"line\"><span class=\"number\">9</span></div><div class=\"line\"><span class=\"number\">15</span></div><div class=\"line\"><span class=\"number\">56</span></div><div class=\"line\"><span class=\"number\">49</span></div><div class=\"line\"><span class=\"number\">21</span></div></pre></td></tr></table></figure>\n<h4 id=\"案例3\"><a href=\"#案例3\" class=\"headerlink\" title=\"案例3\"></a>案例3</h4><blockquote>\n<p>提供多个Observable根据不同的数据进行网络请求，当其中有一个成功，就停止请求，如果所有请求都失败就失败。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">modelProvider.getItems() <span class=\"comment\">// 多个不同数据的Observable</span></div><div class=\"line\">    .flatMap(retroApiInterface::doBackendRequest) <span class=\"comment\">//触发网络请求</span></div><div class=\"line\">    .takeUntil(response -&gt; response.isSuccessful()) <span class=\"comment\">// 直到其中有任意一个请求成功，将停止其他的请求</span></div><div class=\"line\">    .lastOrDefault(ServerResponse.createUnsuccessful()) <span class=\"comment\">// 所有的都请求都失败就返回失败的</span></div><div class=\"line\">    .toSingle() <span class=\"comment\">// 如果最后一个</span></div><div class=\"line\">    .subscribe(response -&gt; &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (response.isSuccessful()) &#123;</div><div class=\"line\">            <span class=\"comment\">// We made it.</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// Not successful.</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;, throwable -&gt; &#123;</div><div class=\"line\">        <span class=\"comment\">// Some error happened along the way.</span></div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 下面是简化版</span></div><div class=\"line\">modelProvider.getItems() <span class=\"comment\">// 多个不同数据的Observable</span></div><div class=\"line\">    .flatMap(retroApiInterface::doBackendRequest) <span class=\"comment\">//触发网络请求</span></div><div class=\"line\">    .firstOrDefault(ServerResponse.createUnsuccessful(), response -&gt; response.isSuccessful()) <span class=\"comment\">// 直到其中有任意一个请求成功，将停止其他的请求</span></div><div class=\"line\">    .toSingle()</div></pre></td></tr></table></figure>\n<hr>\n<p><a href=\"https://github.com/ReactiveX/RxJava/wiki\" target=\"_blank\" rel=\"external\">更多了解请移步&gt;&gt;</a></p>\n<h4 id=\"参考以下文档整理\"><a href=\"#参考以下文档整理\" class=\"headerlink\" title=\"参考以下文档整理:\"></a>参考以下文档整理:</h4><ul>\n<li><a href=\"http://blog.danlew.net/2014/09/15/grokking-rxjava-part-1/\" target=\"_blank\" rel=\"external\">Grokking RxJava, Part 1: The Basics</a></li>\n<li><a href=\"http://blog.danlew.net/2014/09/22/grokking-rxjava-part-2/\" target=\"_blank\" rel=\"external\">Grokking RxJava, Part 2: Operator, Operator</a></li>\n<li><a href=\"http://blog.danlew.net/2014/09/30/grokking-rxjava-part-3/\" target=\"_blank\" rel=\"external\">Grokking RxJava, Part 3: Reactive with Benefits</a></li>\n<li><a href=\"http://blog.danlew.net/2014/10/08/grokking-rxjava-part-4/\" target=\"_blank\" rel=\"external\">Grokking RxJava, Part 4: Reactive Android</a></li>\n</ul>\n<h4 id=\"参考以下博客的翻译校对\"><a href=\"#参考以下博客的翻译校对\" class=\"headerlink\" title=\"参考以下博客的翻译校对:\"></a>参考以下博客的翻译校对:</h4><p><a href=\"http://blog.csdn.net/lzyzsd\" target=\"_blank\" rel=\"external\">大头鬼Bruce</a></p>\n<h4 id=\"拓展阅读\"><a href=\"#拓展阅读\" class=\"headerlink\" title=\"拓展阅读:\"></a>拓展阅读:</h4><ul>\n<li><a href=\"http://www.pythonnote.com/archives/bu-yao-da-po-lian-shi-shi-yong-rxjavade-composecao-zuo-fu.html\" target=\"_blank\" rel=\"external\">不要打破链式：使用Rxjava的compose()操作符</a></li>\n<li><a href=\"http://blog.dreamtobe.cn/2312.html\">RxAndroid(RxJava) 与 AsyncTask</a></li>\n<li><a href=\"http://www.andevcon.com/news/crash-course-on-rxjava-with-thomas-nield-part-1?utm_content=buffer4d157&amp;utm_medium=social&amp;utm_source=twitter.com&amp;utm_campaign=buffer\" target=\"_blank\" rel=\"external\">Crash Course on RxJava with Thomas Nield (Part 1)</a></li>\n<li><a href=\"https://github.com/davidmoten/rxjava-jdbc\" target=\"_blank\" rel=\"external\">通过RxJava简化SQL查询 -  RxJava-JDBC</a></li>\n<li><a href=\"https://medium.com/@vanniktech/rxjava-practial-takeuntil-example-bc9766918cad#.7ufu9ry19\" target=\"_blank\" rel=\"external\">RxJava — Practical takeUntil Example</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>响应式编程（观察者模式）</p>\n</blockquote>\n<p>ps: 如果不了解Lambda的话，最好先看下<a href=\"http://blog.dreamtobe.cn/2281.html\">Lambda</a>, 文中都是使用Lambda语法</p>\n<h2 id=\"I-核心\"><a href=\"#I-核心\" class=\"headerlink\" title=\"I. 核心\"></a>I. 核心</h2><p><strong>被观察者:</strong> Observables (发出一系列事件)</p>\n<p><strong>观察者:</strong> Subscribers (处理这些事件)</p>","more":"<ol>\n<li><p>Observable和Subscriber可以做任何事情</p>\n</li>\n<li><p>Observable和Subscriber是独立于中间的变换过程的。</p>\n</li>\n</ol>\n<h2 id=\"II-基本原型\"><a href=\"#II-基本原型\" class=\"headerlink\" title=\"II. 基本原型\"></a>II. 基本原型</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建 Observable</span></div><div class=\"line\">Observable&lt;String&gt; myObservable = Observable.create(</div><div class=\"line\">    <span class=\"keyword\">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(Subscriber&lt;? <span class=\"keyword\">super</span> String&gt; sub)</span> </span>&#123;</div><div class=\"line\">            sub.onNext(<span class=\"string\">\"Hello, world!\"</span>);</div><div class=\"line\">            sub.onCompleted();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//创建 Subscriber</span></div><div class=\"line\">Subscriber&lt;String&gt; mySubscriber = <span class=\"keyword\">new</span> Subscriber&lt;String&gt;() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(String s)</span> </span>&#123; System.out.println(s); &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 如果正确的终结，最后会调到这里</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCompleted</span><span class=\"params\">()</span> </span>&#123; &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 只要有异常抛出（包括操作符中的调用），会调到这里</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123; &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//mySubscriber订阅myObservable</span></div><div class=\"line\">myObservable.subscribe(mySubscriber);</div></pre></td></tr></table></figure>\n<h2 id=\"III-通用接口\"><a href=\"#III-通用接口\" class=\"headerlink\" title=\"III. 通用接口\"></a>III. 通用接口</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Action1&lt;T&gt;()&#123; call(String): void&#125;</span></div><div class=\"line\">myObservable.subscribe(onNextAction, onErrorAction, onCompleteAction);  </div><div class=\"line\"></div><div class=\"line\">myObservable.subscribe(onNextAction);</div></pre></td></tr></table></figure>\n<p>上面的代码最终可以变成这样</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Action1&lt;T&gt;</span></div><div class=\"line\">Observable.just(<span class=\"string\">\"Hello, world!\"</span>)</div><div class=\"line\">    .subscribe(s -&gt; System.out.println(s));</div></pre></td></tr></table></figure>\n<h2 id=\"IV-一些典型的操作符-Operators\"><a href=\"#IV-一些典型的操作符-Operators\" class=\"headerlink\" title=\"IV. 一些典型的操作符(Operators)\"></a>IV. 一些典型的操作符(Operators)</h2><blockquote>\n<p>操作符用于在Observable和最终的Subscriber之间修改Observable发出的时间(RxJava提供了很多有用的操作符)</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//假设定义了以下方法，接下来有些地方为了举例有用到</span></div><div class=\"line\">query(String) : Observable&lt;List&lt;String&gt;&gt; <span class=\"comment\">// 根据链接搜索结果</span></div><div class=\"line\">getTitle(String) : Observable&lt;String&gt; <span class=\"comment\">// 获取标题</span></div><div class=\"line\">saveTitle(String) : <span class=\"keyword\">boolean</span> <span class=\"comment\">// 保存标题</span></div></pre></td></tr></table></figure>\n<h4 id=\"1-map操作符\"><a href=\"#1-map操作符\" class=\"headerlink\" title=\"1. map操作符\"></a>1. map操作符</h4><blockquote>\n<p>把一个事件转换为另一个事件 ( 不必返回Observable对象返回的类型，如下面就返回了int，而Observable返回的是String )</p>\n</blockquote>\n<p><a href=\"http://reactivex.io/documentation/operators/map.html\">map官方文档</a></p>\n<p><img src=\"/img/rxjava-map.png\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observable.just(<span class=\"string\">\"Hello, world!\"</span>)</div><div class=\"line\">    .map(s -&gt; s.hashCode())</div><div class=\"line\">    .map(i -&gt; Integer.toString(i))</div><div class=\"line\">    .subscribe(s -&gt; System.out.println(s));</div></pre></td></tr></table></figure>\n<h4 id=\"2-from操作符\"><a href=\"#2-from操作符\" class=\"headerlink\" title=\"2. from操作符\"></a>2. from操作符</h4><blockquote>\n<p>接收一个集合作为输入，然后每次输出一个元素给subscriber</p>\n</blockquote>\n<p><a href=\"http://reactivex.io/documentation/operators/from.html\">from官方文档</a></p>\n<p><img src=\"/img/rxjava-from.png\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observable.from(<span class=\"string\">\"url1\"</span>, <span class=\"string\">\"url2\"</span>, <span class=\"string\">\"url3\"</span>)  </div><div class=\"line\">    .subscribe(url -&gt; System.out.println(url));</div></pre></td></tr></table></figure>\n<h4 id=\"3-flatMap操作符\"><a href=\"#3-flatMap操作符\" class=\"headerlink\" title=\"3. flatMap操作符\"></a>3. flatMap操作符</h4><blockquote>\n<p>接收一个Observable的输出作为输入，同时输出另外一个Observable （可以用来很好的解决多重嵌套回调的问题）</p>\n</blockquote>\n<p><a href=\"http://reactivex.io/documentation/operators/flatmap.html\">flatMap官方文档</a></p>\n<p><img src=\"/img/rxjava-flatmap.png\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 这里通过flatMap，输入一个Observable&lt;List&lt;String&gt;&gt;返回了一个新的Observable&lt;String&gt;</span></div><div class=\"line\"></div><div class=\"line\">query(<span class=\"string\">\"Hello, world!\"</span>)  </div><div class=\"line\">    .flatMap(urls -&gt; Observable.from(urls))</div><div class=\"line\">    .flatMap(url -&gt; getTitle(url))</div><div class=\"line\">    .subscribe(title -&gt; System.out.println(title));</div></pre></td></tr></table></figure>\n<h4 id=\"4-filter操作符\"><a href=\"#4-filter操作符\" class=\"headerlink\" title=\"4. filter操作符\"></a>4. filter操作符</h4><blockquote>\n<p>输入与输出为相同元素，过滤掉不满足检查条件的</p>\n</blockquote>\n<p><a href=\"http://reactivex.io/documentation/operators/filter.html\">filter官方文档</a></p>\n<p><img src=\"/img/rxjava-filter.png\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">query(<span class=\"string\">\"Hello, world!\"</span>)  </div><div class=\"line\">    .flatMap(urls -&gt; Observable.from(urls))  </div><div class=\"line\">    .flatMap(url -&gt; getTitle(url))  </div><div class=\"line\">    .filter(title -&gt; title != <span class=\"keyword\">null</span>)  <span class=\"comment\">// 这里过滤掉了 title 为 null 的情况</span></div><div class=\"line\">    .subscribe(title -&gt; System.out.println(title));</div></pre></td></tr></table></figure>\n<h4 id=\"5-take操作符\"><a href=\"#5-take操作符\" class=\"headerlink\" title=\"5. take操作符\"></a>5. take操作符</h4><blockquote>\n<p>输出最多指定数量的结果</p>\n</blockquote>\n<p><a href=\"http://reactivex.io/documentation/operators/take.html\">take官方文档</a></p>\n<p><img src=\"/img/rxjava-take.png\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">query(<span class=\"string\">\"Hello, world!\"</span>)  </div><div class=\"line\">    .flatMap(urls -&gt; Observable.from(urls))  </div><div class=\"line\">    .flatMap(url -&gt; getTitle(url))  </div><div class=\"line\">    .filter(title -&gt; title != <span class=\"keyword\">null</span>)  </div><div class=\"line\">    .take(<span class=\"number\">5</span>) <span class=\"comment\">// 最多5个结果</span></div><div class=\"line\">    .subscribe(title -&gt; System.out.println(title));</div></pre></td></tr></table></figure>\n<h4 id=\"6-doOnNext操作符\"><a href=\"#6-doOnNext操作符\" class=\"headerlink\" title=\"6. doOnNext操作符\"></a>6. doOnNext操作符</h4><blockquote>\n<p>在每次输出一个元素之前做一些额外的事情</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">query(<span class=\"string\">\"Hello, world!\"</span>)  </div><div class=\"line\">    .flatMap(urls -&gt; Observable.from(urls))  </div><div class=\"line\">    .flatMap(url -&gt; getTitle(url))  </div><div class=\"line\">    .filter(title -&gt; title != <span class=\"keyword\">null</span>)  </div><div class=\"line\">    .take(<span class=\"number\">5</span>)  </div><div class=\"line\">    .doOnNext(title -&gt; saveTitle(title))  <span class=\"comment\">// 做保存标题操作</span></div><div class=\"line\">    .subscribe(title -&gt; System.out.println(title));</div></pre></td></tr></table></figure>\n<h4 id=\"7-subscribeOn-observerOn操作符\"><a href=\"#7-subscribeOn-observerOn操作符\" class=\"headerlink\" title=\"7. subscribeOn/observerOn操作符\"></a>7. subscribeOn/observerOn操作符</h4><blockquote>\n<p>通过<code>subscribeOn()</code>指定观察者运行的线程，<code>observerOn()</code>指定订阅者运行的线程</p>\n</blockquote>\n<p><a href=\"http://stackoverflow.com/questions/7579237/whats-the-difference-between-subscribeon-and-observeon\">What’s the difference between SubscribeOn and ObserveOn</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observable.from(someSource)  </div><div class=\"line\">    .map(data -&gt; manipulate(data)) <span class=\"comment\">//将会在io线程执行</span></div><div class=\"line\">    .subscribeOn(Schedulers.io())</div><div class=\"line\">    .observeOn(AndroidSchedulers.mainThread())</div><div class=\"line\">    .subscribe(data -&gt; doSomething(data)); <span class=\"comment\">// 将会在主线程(UI线程）执行</span></div></pre></td></tr></table></figure>\n<p>这里值得一提的是：看到了这里的<code>Schedulers.io()</code>来定义I/O线程十分的欣喜，之前在看<code>Fresco</code>的时候其中的一个Pipeline结构，它通过按照硬件资源占用比例，分类线程池，提高了<code>Fresco</code>的整体速度，由于<code>CPU</code>/<code>GPU</code>的速度远快于其他模块, 可以利用<strong>尽量占满CPU资源</strong>的原则，创建了多个线程池（如<code>CPU</code>、<code>I/O</code>、<code>NET</code>）来完成。使得资源得到最大的利用以提升速度。而<code>Schedulers.io</code>这种方式，也是通过架构的层面达到这种效果。</p>\n<h2 id=\"V-取消订阅-Subscriptions\"><a href=\"#V-取消订阅-Subscriptions\" class=\"headerlink\" title=\"V. 取消订阅(Subscriptions)\"></a>V. 取消订阅(Subscriptions)</h2><blockquote>\n<p>当调用<code>Observable.subscribe()</code>，会返回一个<code>Subscription</code>对象。这个对象代表了被观察者和订阅者之间的联系。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">ubscription subscription = Observable.just(<span class=\"string\">\"Hello, World!\"</span>)</div><div class=\"line\">    .subscribe(s -&gt; System.out.println(s));</div><div class=\"line\"></div><div class=\"line\">subscription.unsubscribe(); <span class=\"comment\">//调用会停止整个调用链（会在当前正在执行的操作符的地方就终止）</span></div><div class=\"line\">System.out.println(<span class=\"string\">\"Unsubscribed=\"</span> + subscription.isUnsubscribed());</div><div class=\"line\"><span class=\"comment\">// Outputs \"Unsubscribed=true\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"VI-RxAndroid\"><a href=\"#VI-RxAndroid\" class=\"headerlink\" title=\"VI. RxAndroid\"></a>VI. RxAndroid</h2><blockquote>\n<p>是RxJava的一个针对Android平台的扩展。它包含了一些能够简化Android开发的工具<br><strong>地址:</strong> <a href=\"https://github.com/ReactiveX/RxAndroid\">https://github.com/ReactiveX/RxAndroid</a></p>\n</blockquote>\n<h4 id=\"1-AndroidSchedulers\"><a href=\"#1-AndroidSchedulers\" class=\"headerlink\" title=\"1. AndroidSchedulers\"></a>1. AndroidSchedulers</h4><blockquote>\n<p>提供了针对Android的线程系统的调度</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">retrofitService.getImage(url)</div><div class=\"line\">    .subscribeOn(Schedulers.io()) <span class=\"comment\">//操作符中间操作在I/0线程</span></div><div class=\"line\">    .observeOn(AndroidSchedulers.mainThread()) <span class=\"comment\">// subscribe 在UI线程</span></div><div class=\"line\">    .subscribe(bitmap -&gt; myImageView.setImageBitmap(bitmap));</div></pre></td></tr></table></figure>\n<h4 id=\"2-AndroidObservable\"><a href=\"#2-AndroidObservable\" class=\"headerlink\" title=\"2. AndroidObservable\"></a>2. AndroidObservable</h4><blockquote>\n<p>它提供了跟踪Android生命周期的功能。<code>bindActivity()</code>和<code>bindFragment()</code>方法默认在UI线程调用，并且这两个方法会在生命周期结束的时候通知Observable停止发出新的消息。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">AndroidObservable.bindActivity(<span class=\"keyword\">this</span>, retrofitService.getImage(url))</div><div class=\"line\">    .subscribeOn(Schedulers.io())</div><div class=\"line\">    .subscribe(bitmap -&gt; myImageView.setImageBitmap(bitmap);</div></pre></td></tr></table></figure>\n<h4 id=\"3-AndroidObservable-fromBroadcast\"><a href=\"#3-AndroidObservable-fromBroadcast\" class=\"headerlink\" title=\"3. AndroidObservable.fromBroadcast\"></a>3. AndroidObservable.fromBroadcast</h4><blockquote>\n<p>功能类似<code>BroadcastReceiver</code></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 实现了网络变化被通知到</span></div><div class=\"line\">IntentFilter filter = <span class=\"keyword\">new</span> IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION);</div><div class=\"line\">AndroidObservable.fromBroadcast(context, filter)</div><div class=\"line\">    .subscribe(intent -&gt; handleConnectivityChange(intent));</div></pre></td></tr></table></figure>\n<h4 id=\"4-ViewObservable\"><a href=\"#4-ViewObservable\" class=\"headerlink\" title=\"4. ViewObservable\"></a>4. ViewObservable</h4><blockquote>\n<p>可以很轻易的在View触发某些Action时，被通知</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 这里监听了mCardNameEditText的点击时间</span></div><div class=\"line\">ViewObservable.clicks(mCardNameEditText, <span class=\"keyword\">false</span>)</div><div class=\"line\">    .subscribe(view -&gt; handleClick(view));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 还可以进行很多监听，如ViewObservable.text就可以监听TextView的内容变化</span></div></pre></td></tr></table></figure>\n<h2 id=\"VII-常见问题解决\"><a href=\"#VII-常见问题解决\" class=\"headerlink\" title=\"VII. 常见问题解决\"></a>VII. 常见问题解决</h2><h4 id=\"1-在configuration改变（比如转屏）之后继续之前的Subscription-使用Retrofit发出了一个REST请求，接着想在listview中展示结果。如果在网络请求的时候用户旋转了屏幕怎么办？你当然想继续刚才的请求，但是怎么搞？\"><a href=\"#1-在configuration改变（比如转屏）之后继续之前的Subscription-使用Retrofit发出了一个REST请求，接着想在listview中展示结果。如果在网络请求的时候用户旋转了屏幕怎么办？你当然想继续刚才的请求，但是怎么搞？\" class=\"headerlink\" title=\"1. 在configuration改变（比如转屏）之后继续之前的Subscription/使用Retrofit发出了一个REST请求，接着想在listview中展示结果。如果在网络请求的时候用户旋转了屏幕怎么办？你当然想继续刚才的请求，但是怎么搞？\"></a>1. 在configuration改变（比如转屏）之后继续之前的Subscription/使用Retrofit发出了一个REST请求，接着想在listview中展示结果。如果在网络请求的时候用户旋转了屏幕怎么办？你当然想继续刚才的请求，但是怎么搞？</h4><blockquote>\n<p>通过RxJava内置缓存机制解决<br><strong>原理:</strong> <code>cache()</code>(或者<code>replay()</code>)不会使<code>unsubscribe</code>打断，网络请求，因此在<code>unsubscribe</code>以后直接从<code>cache()</code>的返回值中创建一个新的<code>Observable</code>对象。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observable&lt;Photo&gt; request = service.getUserPhoto(id).cache(); <span class=\"comment\">//缓存请求结果，缓存的地方需要具体实现(在这个案例中，应该缓存在生命周期以外的地方)</span></div><div class=\"line\">Subscription sub = request.subscribe(photo -&gt; handleUserPhoto(photo));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//当Activity将需要重建(一般是销毁)的时候</span></div><div class=\"line\">sub.unsubscribe();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//一旦Activity重建</span></div><div class=\"line\">request.subscribe(photo -&gt; handleUserPhoto(photo));</div></pre></td></tr></table></figure>\n<h4 id=\"2-Observable持有Context导致的内存泄露\"><a href=\"#2-Observable持有Context导致的内存泄露\" class=\"headerlink\" title=\"2. Observable持有Context导致的内存泄露\"></a>2. Observable持有Context导致的内存泄露</h4><blockquote>\n<p>参考解决方案: 在生命周期的某个时刻取消订阅<br><strong>原理:</strong> 利用<code>CompositeSubscription</code>持有所有的<code>Subscriptions</code>，然后在<code>onDestory()</code>或者<code>onDestroyView()</code>里取消所有的订阅。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 一般可以在Activyt/Fragment的基类里面定义这个，达到系统化处理</span></div><div class=\"line\"><span class=\"keyword\">private</span> CompositeSubscription mCompositeSubscription</div><div class=\"line\">    = <span class=\"keyword\">new</span> CompositeSubscription();</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    mCompositeSubscription.add(</div><div class=\"line\">        AndroidObservable.bindActivity(<span class=\"keyword\">this</span>, Observable.just(<span class=\"string\">\"Hello, World!\"</span>))</div><div class=\"line\">        .subscribe(s -&gt; System.out.println(s)));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//一旦调用了CompositeSubscription.unsubscribe，CompositeSubscription对象就不可用了</span></div><div class=\"line\">    mCompositeSubscription.unsubscribe();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"VIII-拓展\"><a href=\"#VIII-拓展\" class=\"headerlink\" title=\"VIII. 拓展\"></a>VIII. 拓展</h2><h4 id=\"1-Retrofit\"><a href=\"#1-Retrofit\" class=\"headerlink\" title=\"1. Retrofit\"></a>1. Retrofit</h4><blockquote>\n<p><strong>功能:</strong>  REST的网络架构，目前有<a href=\"http://themakeinfo.com/2015/04/retrofit-android-tutorial/\">测试结果</a>比Volley、AsyncTask快<br>目前Retrofit库内置了对RxJava的支持</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//请求是获取照片</span></div><div class=\"line\"><span class=\"meta\">@GET</span>(<span class=\"string\">\"/user/&#123;id&#125;/photo\"</span>)</div><div class=\"line\"><span class=\"function\">Observable&lt;Photo&gt; <span class=\"title\">getUserPhoto</span><span class=\"params\">(@Path(<span class=\"string\">\"id\"</span>)</span> <span class=\"keyword\">int</span> id)</span>;</div><div class=\"line\"><span class=\"comment\">//请求元数据</span></div><div class=\"line\"><span class=\"meta\">@GET</span>(<span class=\"string\">\"/user/&#123;id&#125;/photo/metadata\"</span>)</div><div class=\"line\"><span class=\"function\">Observable&lt;Photo&gt; <span class=\"title\">getPhotoMetadata</span><span class=\"params\">(@Path(<span class=\"string\">\"id\"</span>)</span> <span class=\"keyword\">int</span> id)</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 将这两个请求并发的发出，并且等待两个结果都返回之后再做处理</span></div><div class=\"line\">Observable.zip(</div><div class=\"line\">    service.getUserPhoto(id),</div><div class=\"line\">    service.getPhotoMetadata(id),</div><div class=\"line\">    (photo, metadata) -&gt; createPhotoWithData(photo, metadata))</div><div class=\"line\">    .subscribe(photoWithData -&gt; showPhoto(photoWithData));</div></pre></td></tr></table></figure>\n<h4 id=\"2-旧代码整合RxJava\"><a href=\"#2-旧代码整合RxJava\" class=\"headerlink\" title=\"2. 旧代码整合RxJava\"></a>2. 旧代码整合RxJava</h4><blockquote>\n<p>比较简单的办法</p>\n</blockquote>\n<p>如果<code>oldMethod</code>足够快:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Object <span class=\"title\">oldMethod</span><span class=\"params\">()</span> </span>&#123; ... &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Observable&lt;Object&gt; <span class=\"title\">newMethod</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> Observable.just(oldMethod());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果<code>oldMethod</code>很慢，为了防止阻塞所在线程:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Object <span class=\"title\">slowBlockingMethod</span><span class=\"params\">()</span> </span>&#123; ... &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Observable&lt;Object&gt; <span class=\"title\">newMethod</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> Observable.defer(() -&gt; Observable.just(slowBlockingMethod()));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"简单案例\"><a href=\"#简单案例\" class=\"headerlink\" title=\"简单案例\"></a>简单案例</h2><h4 id=\"案例1\"><a href=\"#案例1\" class=\"headerlink\" title=\"案例1\"></a>案例1</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observable.just(<span class=\"string\">\"Alpha\"</span>,<span class=\"string\">\"Beta\"</span>,<span class=\"string\">\"Gamma\"</span>,<span class=\"string\">\"Delta\"</span>,<span class=\"string\">\"Epsilon\"</span>)</div><div class=\"line\">        .map(s -&gt; s.length())</div><div class=\"line\">        .distinct() <span class=\"comment\">//去除重复</span></div><div class=\"line\">        .subscribe(l -&gt; System.out.println(l));</div></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">5</span></div><div class=\"line\"><span class=\"number\">4</span></div><div class=\"line\"><span class=\"number\">7</span></div></pre></td></tr></table></figure>\n<h4 id=\"案例2\"><a href=\"#案例2\" class=\"headerlink\" title=\"案例2\"></a>案例2</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observable.just(<span class=\"string\">\"1/5/8\"</span>, <span class=\"string\">\"1/9/11/58/16/\"</span>, <span class=\"string\">\"9/15/56/49/21\"</span>);</div><div class=\"line\">        .flatMap(s -&gt; Observable.from(s.split(<span class=\"string\">\"/\"</span>)))</div><div class=\"line\">        .map(s -&gt; Integer.valueOf(s))</div><div class=\"line\">        .subscribe(i -&gt; System.out.println(i));</div></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">5</span></div><div class=\"line\"><span class=\"number\">8</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">9</span></div><div class=\"line\"><span class=\"number\">11</span></div><div class=\"line\"><span class=\"number\">58</span></div><div class=\"line\"><span class=\"number\">16</span></div><div class=\"line\"><span class=\"number\">9</span></div><div class=\"line\"><span class=\"number\">15</span></div><div class=\"line\"><span class=\"number\">56</span></div><div class=\"line\"><span class=\"number\">49</span></div><div class=\"line\"><span class=\"number\">21</span></div></pre></td></tr></table></figure>\n<h4 id=\"案例3\"><a href=\"#案例3\" class=\"headerlink\" title=\"案例3\"></a>案例3</h4><blockquote>\n<p>提供多个Observable根据不同的数据进行网络请求，当其中有一个成功，就停止请求，如果所有请求都失败就失败。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">modelProvider.getItems() <span class=\"comment\">// 多个不同数据的Observable</span></div><div class=\"line\">    .flatMap(retroApiInterface::doBackendRequest) <span class=\"comment\">//触发网络请求</span></div><div class=\"line\">    .takeUntil(response -&gt; response.isSuccessful()) <span class=\"comment\">// 直到其中有任意一个请求成功，将停止其他的请求</span></div><div class=\"line\">    .lastOrDefault(ServerResponse.createUnsuccessful()) <span class=\"comment\">// 所有的都请求都失败就返回失败的</span></div><div class=\"line\">    .toSingle() <span class=\"comment\">// 如果最后一个</span></div><div class=\"line\">    .subscribe(response -&gt; &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (response.isSuccessful()) &#123;</div><div class=\"line\">            <span class=\"comment\">// We made it.</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// Not successful.</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;, throwable -&gt; &#123;</div><div class=\"line\">        <span class=\"comment\">// Some error happened along the way.</span></div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 下面是简化版</span></div><div class=\"line\">modelProvider.getItems() <span class=\"comment\">// 多个不同数据的Observable</span></div><div class=\"line\">    .flatMap(retroApiInterface::doBackendRequest) <span class=\"comment\">//触发网络请求</span></div><div class=\"line\">    .firstOrDefault(ServerResponse.createUnsuccessful(), response -&gt; response.isSuccessful()) <span class=\"comment\">// 直到其中有任意一个请求成功，将停止其他的请求</span></div><div class=\"line\">    .toSingle()</div></pre></td></tr></table></figure>\n<hr>\n<p><a href=\"https://github.com/ReactiveX/RxJava/wiki\">更多了解请移步&gt;&gt;</a></p>\n<h4 id=\"参考以下文档整理\"><a href=\"#参考以下文档整理\" class=\"headerlink\" title=\"参考以下文档整理:\"></a>参考以下文档整理:</h4><ul>\n<li><a href=\"http://blog.danlew.net/2014/09/15/grokking-rxjava-part-1/\">Grokking RxJava, Part 1: The Basics</a></li>\n<li><a href=\"http://blog.danlew.net/2014/09/22/grokking-rxjava-part-2/\">Grokking RxJava, Part 2: Operator, Operator</a></li>\n<li><a href=\"http://blog.danlew.net/2014/09/30/grokking-rxjava-part-3/\">Grokking RxJava, Part 3: Reactive with Benefits</a></li>\n<li><a href=\"http://blog.danlew.net/2014/10/08/grokking-rxjava-part-4/\">Grokking RxJava, Part 4: Reactive Android</a></li>\n</ul>\n<h4 id=\"参考以下博客的翻译校对\"><a href=\"#参考以下博客的翻译校对\" class=\"headerlink\" title=\"参考以下博客的翻译校对:\"></a>参考以下博客的翻译校对:</h4><p><a href=\"http://blog.csdn.net/lzyzsd\">大头鬼Bruce</a></p>\n<h4 id=\"拓展阅读\"><a href=\"#拓展阅读\" class=\"headerlink\" title=\"拓展阅读:\"></a>拓展阅读:</h4><ul>\n<li><a href=\"http://www.pythonnote.com/archives/bu-yao-da-po-lian-shi-shi-yong-rxjavade-composecao-zuo-fu.html\">不要打破链式：使用Rxjava的compose()操作符</a></li>\n<li><a href=\"http://blog.dreamtobe.cn/2312.html\">RxAndroid(RxJava) 与 AsyncTask</a></li>\n<li><a href=\"http://www.andevcon.com/news/crash-course-on-rxjava-with-thomas-nield-part-1?utm_content=buffer4d157&amp;utm_medium=social&amp;utm_source=twitter.com&amp;utm_campaign=buffer\">Crash Course on RxJava with Thomas Nield (Part 1)</a></li>\n<li><a href=\"https://github.com/davidmoten/rxjava-jdbc\">通过RxJava简化SQL查询 -  RxJava-JDBC</a></li>\n<li><a href=\"https://medium.com/@vanniktech/rxjava-practial-takeuntil-example-bc9766918cad#.7ufu9ry19\">RxJava — Practical takeUntil Example</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"SVG-Android库 深入浅出 解析篇","date":"2014-12-10T00:35:03.000Z","_content":"\n- 入口\n- 通过解析得到SVG\n- 将得到的SVG渲染到Picture\\Canvas上\n\n## 1. 入口\n`1.getFromInputStream(InputStream) : SVG` `2.getFromString(String) : SVG` `3.getFromResource(Resources, int) : SVG` `4.getFromAsset(AssetManager, String) : SVG`\n\n<!--more-->\n\n\t// *************** com.caverock.androidsvg.SVG ***************\n\n\t/**\n    * Read and parse an SVG from the given {@code InputStream}.\n    *\n    * @param is the input stream from which to read the file.\n    * @return an SVG instance on which you can call one of the render methods.\n    * @throws SVGParseException if there is an error parsing the document.\n    */\n\tgetFromInputStream(InputStream) : SVG\n\n\t/**\n    * Read and parse an SVG from the given {@code String}.\n    *\n    * @param svg the String instance containing the SVG document.\n    * @return an SVG instance on which you can call one of the render methods.\n    * @throws SVGParseException if there is an error parsing the document.\n    */\n\tgetFromString(String) : SVG\n\n\t/**\n    * Read and parse an SVG from the given resource location.\n    *\n    * @param context the Android context of the resource.\n    * @param resourceId the resource identifier of the SVG document.\n    * @return an SVG instance on which you can call one of the render methods.\n    * @throws SVGParseException if there is an error parsing the document.\n    */\n    getFromResource(Context, int) : SVG\n\n    /**\n    * Read and parse an SVG from the given resource location.\n    *\n    * @param resources the set of Resources in which to locate the file.\n    * @param resourceId the resource identifier of the SVG document.\n    * @return an SVG instance on which you can call one of the render methods.\n    * @throws SVGParseException if there is an error parsing the document.\n    */\n    getFromResource(Resources, int) : SVG\n\n    /**\n    * Read and parse an SVG from the assets folder.\n    *\n    * @param assetManager the AssetManager instance to use when reading the file.\n    * @param filename the filename of the SVG document within assets.\n    * @return an SVG instance on which you can call one of the render methods.\n    * @throws SVGParseException if there is an error parsing the document.\n    * @throws IOException if there is some IO error while reading the file.\n    */\n    getFromAsset(AssetManager, String) : SVG\n\n## 2. 通过解析得到SVG\n### 2.1 输入\nxml InputStream 或 zip InputStream\n### 2.2 输出\nSVG\n### 2.3 XML解析器\nSAX\n### 2.4 解析引擎\n- SVGParser // 主要引擎 继承自 com.xml.sax.ext.DefaultHandler2\n- CCSSVGParser //主要用于解析CSS样式\n\n### 2.5 解析工具\n- NumberParser //解析SVG/Style中 'number'元素内容（速度快于系统）\n- IntegerParser //解析SVG/Style中 'integer'元素或者哈希（速度快于系统）\n- PreserveAspectRatio //在这里用于存储位置与缩放\n\n### 2.6 解析流程\n\n#### startDocument\n![](/img/svg-parse-1.jpg)\n#### startElement\n![](/img/svg-parse-2.jpg)\n#### characters\n![](/img/svg-parse-3.jpg)\n#### endElement\n![](/img/svg-parse-4.jpg)\n#### endDocument\n![](/img/svg-parse-5.jpg)\n\n### 2.7 层级管理\n#### startDocument\n\tsvgDocument = new SVG();\n#### startElement\n\t......\n\tSVG.SVGObject obj = new SVG.SVGObject();\n\t......\n\tif (currentElement == null) {\n\t\tsvgDocument.setRootElement(obj);\n\t} else {\n\t\tcurrentElement.addChild(obj);\n\t}\n\tcurrentElement = obj;\n#### characters\n\n\t......\n\tif (currentElement instanceof SVG.TextContainer) {\n\t\t// The SAX parser can pass us several text nodes in a row. If this happens, we\n\t\t// want to collapse them all into one SVG.TextSequence node\t\t\t\t\n\t\tSVG.SvgConditionalContainer parent = (SVG.SvgConditionalContainer) currentElement;\n\t\tint numOlderSiblings = parent.children.size();\n\t\tSVG.SvgObject previousSibling = (numOlderSiblings == 0) ? null : parent.children.get(numOlderSiblings - 1);\n\t\tif (previousSibling instanceof SVG.TextSequence) {\n\t\t\t// Last sibling was a TextSequence also, so merge them.\n\t\t\t((SVG.TextSequence) previousSibling).text += new String(ch, start, length);\n\t\t} else {\n\t\t\t// Add a new TextSequence to the child node list\n\t\t\t((SVG.SvgConditionalContainer) currentElement).addChild(new SVG.TextSequence(new String(ch, start, length)));\n\t\t}\n\t}\n\n#### endElement\n\t......\n\tcurrentElement = ((SvgObject) currentElement).parent;\n#### endDocument\n\t......\n\n## 3. 将得到的SVG渲染到Picture\\Canvas上\n### 3.1 渲染入口\n`1.renderToPicture() : Picture` `2.renderToPicture(int, int) : Picture` `3.renderViewToPicture(String, int, int) : Picture` `4.renderToCanvas(Canvas) : void` `5.renderToCanvas(Canvas, RectF) : void` `6.renderViewToCanvas(String, Canvas) : void` `7.renderViewToCanvas(String, Canvas, RectF) : void`\n\n\t/**\n    * Renders this SVG document to a Picture object.\n    * <p>\n    * An attempt will be made to determine a suitable initial viewport from the contents of the SVG file.\n    * If an appropriate viewport can't be determined, a default viewport of 512x512 will be used.\n    *\n    * @return a Picture object suitable for later rendering using {@code Canvas.drawPicture()}\n    */\n\trenderToPicture() : Picture\n\n\t/**\n    * Renders this SVG document to a Picture object.\n    *\n    * @param widthInPixels the width of the initial viewport\n    * @param heightInPixels the height of the initial viewport\n    * @return a Picture object suitable for later rendering using {@code Canvas.darwPicture()}\n    */\n\trenderToPicture(int, int) : Picture\n\n\t/**\n    * Renders this SVG document to a Picture object using the specified view defined in the document.\n    * <p>\n    * A View is an special element in a SVG document that describes a rectangular area in the document.\n    * Calling this method with a {@code viewId} will result in the specified view being positioned and scaled\n    * to the viewport.  In other words, use {@link #renderToPicture()} to render the whole document, or use this\n    * method instead to render just a part of it.\n    *\n    * @param viewId the id of a view element in the document that defines which section of the document is to be visible.\n    * @param widthInPixels the width of the initial viewport\n    * @param heightInPixels the height of the initial viewport\n    * @return a Picture object suitable for later rendering using {@code Canvas.drawPicture()}, or null if the viewId was not found.\n    */\n\trenderViewToPicture(String, int, int) : Picture\n\n\t/**\n    * Renders this SVG document to a Canvas object.  The full width and height of the canvas\n    * will be used as the viewport into which the document will be rendered.\n    *\n    * @param canvas the canvas to which the document should be rendered.\n    */\n\trenderToCanvas(Canvas) : void\n\n\t /**\n    * Renders this SVG document to a Canvas object.\n    *\n    * @param canvas the canvas to which the document should be rendered.\n    * @param viewPort the bounds of the area on the canvas you want the SVG rendered, or null for the whole canvas.\n    */\n\trenderToCanvas(Canvas, RectF) : void\n\n\t/**\n    * Renders this SVG document to a Canvas using the specified view defined in the document.\n    * <p>\n    * A View is an special element in a SVG documents that describes a rectangular area in the document.\n    * Calling this method with a {@code viewId} will result in the specified view being positioned and scaled\n    * to the viewport.  In other words, use {@link #renderToPicture()} to render the whole document, or use this\n    * method instead to render just a part of it.\n    * <p>\n    * If the {@code <view>} could not be found, nothing will be drawn.\n    *\n    * @param viewId the id of a view element in the document that defines which section of the document is to be visible.\n    * @param canvas the canvas to which the document should be rendered.\n    */\n\trenderViewToCanvas(String, Canvas) : void\n\n\t/**\n    * Renders this SVG document to a Canvas using the specified view defined in the document.\n    * <p>\n    * A View is an special element in a SVG documents that describes a rectangular area in the document.\n    * Calling this method with a {@code viewId} will result in the specified view being positioned and scaled\n    * to the viewport.  In other words, use {@link #renderToPicture()} to render the whole document, or use this\n    * method instead to render just a part of it.\n    * <p>\n    * If the {@code <view>} could not be found, nothing will be drawn.\n    *\n    * @param viewId the id of a view element in the document that defines which section of the document is to be visible.\n    * @param canvas the canvas to which the document should be rendered.\n    * @param viewPort the bounds of the area on the canvas you want the SVG rendered, or null for the whole canvas.\n    */\n\trenderViewToCanvas(String, Canvas, RectF) : void\n\n\t---\n\n\t> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n\t---\n","source":"_posts/SVG-Android库-深入浅出-解析篇.md","raw":"title: SVG-Android库 深入浅出 解析篇\ndate: 2014-12-10 08:35:03\npermalink: 2014/12/10/SVG-Android库-深入浅出-解析篇\ntags:\n- parse\n- svg\n- Android\n- 解析\n\n---\n\n- 入口\n- 通过解析得到SVG\n- 将得到的SVG渲染到Picture\\Canvas上\n\n## 1. 入口\n`1.getFromInputStream(InputStream) : SVG` `2.getFromString(String) : SVG` `3.getFromResource(Resources, int) : SVG` `4.getFromAsset(AssetManager, String) : SVG`\n\n<!--more-->\n\n\t// *************** com.caverock.androidsvg.SVG ***************\n\n\t/**\n    * Read and parse an SVG from the given {@code InputStream}.\n    *\n    * @param is the input stream from which to read the file.\n    * @return an SVG instance on which you can call one of the render methods.\n    * @throws SVGParseException if there is an error parsing the document.\n    */\n\tgetFromInputStream(InputStream) : SVG\n\n\t/**\n    * Read and parse an SVG from the given {@code String}.\n    *\n    * @param svg the String instance containing the SVG document.\n    * @return an SVG instance on which you can call one of the render methods.\n    * @throws SVGParseException if there is an error parsing the document.\n    */\n\tgetFromString(String) : SVG\n\n\t/**\n    * Read and parse an SVG from the given resource location.\n    *\n    * @param context the Android context of the resource.\n    * @param resourceId the resource identifier of the SVG document.\n    * @return an SVG instance on which you can call one of the render methods.\n    * @throws SVGParseException if there is an error parsing the document.\n    */\n    getFromResource(Context, int) : SVG\n\n    /**\n    * Read and parse an SVG from the given resource location.\n    *\n    * @param resources the set of Resources in which to locate the file.\n    * @param resourceId the resource identifier of the SVG document.\n    * @return an SVG instance on which you can call one of the render methods.\n    * @throws SVGParseException if there is an error parsing the document.\n    */\n    getFromResource(Resources, int) : SVG\n\n    /**\n    * Read and parse an SVG from the assets folder.\n    *\n    * @param assetManager the AssetManager instance to use when reading the file.\n    * @param filename the filename of the SVG document within assets.\n    * @return an SVG instance on which you can call one of the render methods.\n    * @throws SVGParseException if there is an error parsing the document.\n    * @throws IOException if there is some IO error while reading the file.\n    */\n    getFromAsset(AssetManager, String) : SVG\n\n## 2. 通过解析得到SVG\n### 2.1 输入\nxml InputStream 或 zip InputStream\n### 2.2 输出\nSVG\n### 2.3 XML解析器\nSAX\n### 2.4 解析引擎\n- SVGParser // 主要引擎 继承自 com.xml.sax.ext.DefaultHandler2\n- CCSSVGParser //主要用于解析CSS样式\n\n### 2.5 解析工具\n- NumberParser //解析SVG/Style中 'number'元素内容（速度快于系统）\n- IntegerParser //解析SVG/Style中 'integer'元素或者哈希（速度快于系统）\n- PreserveAspectRatio //在这里用于存储位置与缩放\n\n### 2.6 解析流程\n\n#### startDocument\n![](/img/svg-parse-1.jpg)\n#### startElement\n![](/img/svg-parse-2.jpg)\n#### characters\n![](/img/svg-parse-3.jpg)\n#### endElement\n![](/img/svg-parse-4.jpg)\n#### endDocument\n![](/img/svg-parse-5.jpg)\n\n### 2.7 层级管理\n#### startDocument\n\tsvgDocument = new SVG();\n#### startElement\n\t......\n\tSVG.SVGObject obj = new SVG.SVGObject();\n\t......\n\tif (currentElement == null) {\n\t\tsvgDocument.setRootElement(obj);\n\t} else {\n\t\tcurrentElement.addChild(obj);\n\t}\n\tcurrentElement = obj;\n#### characters\n\n\t......\n\tif (currentElement instanceof SVG.TextContainer) {\n\t\t// The SAX parser can pass us several text nodes in a row. If this happens, we\n\t\t// want to collapse them all into one SVG.TextSequence node\t\t\t\t\n\t\tSVG.SvgConditionalContainer parent = (SVG.SvgConditionalContainer) currentElement;\n\t\tint numOlderSiblings = parent.children.size();\n\t\tSVG.SvgObject previousSibling = (numOlderSiblings == 0) ? null : parent.children.get(numOlderSiblings - 1);\n\t\tif (previousSibling instanceof SVG.TextSequence) {\n\t\t\t// Last sibling was a TextSequence also, so merge them.\n\t\t\t((SVG.TextSequence) previousSibling).text += new String(ch, start, length);\n\t\t} else {\n\t\t\t// Add a new TextSequence to the child node list\n\t\t\t((SVG.SvgConditionalContainer) currentElement).addChild(new SVG.TextSequence(new String(ch, start, length)));\n\t\t}\n\t}\n\n#### endElement\n\t......\n\tcurrentElement = ((SvgObject) currentElement).parent;\n#### endDocument\n\t......\n\n## 3. 将得到的SVG渲染到Picture\\Canvas上\n### 3.1 渲染入口\n`1.renderToPicture() : Picture` `2.renderToPicture(int, int) : Picture` `3.renderViewToPicture(String, int, int) : Picture` `4.renderToCanvas(Canvas) : void` `5.renderToCanvas(Canvas, RectF) : void` `6.renderViewToCanvas(String, Canvas) : void` `7.renderViewToCanvas(String, Canvas, RectF) : void`\n\n\t/**\n    * Renders this SVG document to a Picture object.\n    * <p>\n    * An attempt will be made to determine a suitable initial viewport from the contents of the SVG file.\n    * If an appropriate viewport can't be determined, a default viewport of 512x512 will be used.\n    *\n    * @return a Picture object suitable for later rendering using {@code Canvas.drawPicture()}\n    */\n\trenderToPicture() : Picture\n\n\t/**\n    * Renders this SVG document to a Picture object.\n    *\n    * @param widthInPixels the width of the initial viewport\n    * @param heightInPixels the height of the initial viewport\n    * @return a Picture object suitable for later rendering using {@code Canvas.darwPicture()}\n    */\n\trenderToPicture(int, int) : Picture\n\n\t/**\n    * Renders this SVG document to a Picture object using the specified view defined in the document.\n    * <p>\n    * A View is an special element in a SVG document that describes a rectangular area in the document.\n    * Calling this method with a {@code viewId} will result in the specified view being positioned and scaled\n    * to the viewport.  In other words, use {@link #renderToPicture()} to render the whole document, or use this\n    * method instead to render just a part of it.\n    *\n    * @param viewId the id of a view element in the document that defines which section of the document is to be visible.\n    * @param widthInPixels the width of the initial viewport\n    * @param heightInPixels the height of the initial viewport\n    * @return a Picture object suitable for later rendering using {@code Canvas.drawPicture()}, or null if the viewId was not found.\n    */\n\trenderViewToPicture(String, int, int) : Picture\n\n\t/**\n    * Renders this SVG document to a Canvas object.  The full width and height of the canvas\n    * will be used as the viewport into which the document will be rendered.\n    *\n    * @param canvas the canvas to which the document should be rendered.\n    */\n\trenderToCanvas(Canvas) : void\n\n\t /**\n    * Renders this SVG document to a Canvas object.\n    *\n    * @param canvas the canvas to which the document should be rendered.\n    * @param viewPort the bounds of the area on the canvas you want the SVG rendered, or null for the whole canvas.\n    */\n\trenderToCanvas(Canvas, RectF) : void\n\n\t/**\n    * Renders this SVG document to a Canvas using the specified view defined in the document.\n    * <p>\n    * A View is an special element in a SVG documents that describes a rectangular area in the document.\n    * Calling this method with a {@code viewId} will result in the specified view being positioned and scaled\n    * to the viewport.  In other words, use {@link #renderToPicture()} to render the whole document, or use this\n    * method instead to render just a part of it.\n    * <p>\n    * If the {@code <view>} could not be found, nothing will be drawn.\n    *\n    * @param viewId the id of a view element in the document that defines which section of the document is to be visible.\n    * @param canvas the canvas to which the document should be rendered.\n    */\n\trenderViewToCanvas(String, Canvas) : void\n\n\t/**\n    * Renders this SVG document to a Canvas using the specified view defined in the document.\n    * <p>\n    * A View is an special element in a SVG documents that describes a rectangular area in the document.\n    * Calling this method with a {@code viewId} will result in the specified view being positioned and scaled\n    * to the viewport.  In other words, use {@link #renderToPicture()} to render the whole document, or use this\n    * method instead to render just a part of it.\n    * <p>\n    * If the {@code <view>} could not be found, nothing will be drawn.\n    *\n    * @param viewId the id of a view element in the document that defines which section of the document is to be visible.\n    * @param canvas the canvas to which the document should be rendered.\n    * @param viewPort the bounds of the area on the canvas you want the SVG rendered, or null for the whole canvas.\n    */\n\trenderViewToCanvas(String, Canvas, RectF) : void\n\n\t---\n\n\t> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n\t---\n","slug":"2014/12/10/SVG-Android库-深入浅出-解析篇","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66i1001295bu4d1scxie","content":"<ul>\n<li>入口</li>\n<li>通过解析得到SVG</li>\n<li>将得到的SVG渲染到Picture\\Canvas上</li>\n</ul>\n<h2 id=\"1-入口\"><a href=\"#1-入口\" class=\"headerlink\" title=\"1. 入口\"></a>1. 入口</h2><p><code>1.getFromInputStream(InputStream) : SVG</code> <code>2.getFromString(String) : SVG</code> <code>3.getFromResource(Resources, int) : SVG</code> <code>4.getFromAsset(AssetManager, String) : SVG</code></p>\n<a id=\"more\"></a>\n<pre><code>// *************** com.caverock.androidsvg.SVG ***************\n\n/**\n* Read and parse an SVG from the given {@code InputStream}.\n*\n* @param is the input stream from which to read the file.\n* @return an SVG instance on which you can call one of the render methods.\n* @throws SVGParseException if there is an error parsing the document.\n*/\ngetFromInputStream(InputStream) : SVG\n\n/**\n* Read and parse an SVG from the given {@code String}.\n*\n* @param svg the String instance containing the SVG document.\n* @return an SVG instance on which you can call one of the render methods.\n* @throws SVGParseException if there is an error parsing the document.\n*/\ngetFromString(String) : SVG\n\n/**\n* Read and parse an SVG from the given resource location.\n*\n* @param context the Android context of the resource.\n* @param resourceId the resource identifier of the SVG document.\n* @return an SVG instance on which you can call one of the render methods.\n* @throws SVGParseException if there is an error parsing the document.\n*/\ngetFromResource(Context, int) : SVG\n\n/**\n* Read and parse an SVG from the given resource location.\n*\n* @param resources the set of Resources in which to locate the file.\n* @param resourceId the resource identifier of the SVG document.\n* @return an SVG instance on which you can call one of the render methods.\n* @throws SVGParseException if there is an error parsing the document.\n*/\ngetFromResource(Resources, int) : SVG\n\n/**\n* Read and parse an SVG from the assets folder.\n*\n* @param assetManager the AssetManager instance to use when reading the file.\n* @param filename the filename of the SVG document within assets.\n* @return an SVG instance on which you can call one of the render methods.\n* @throws SVGParseException if there is an error parsing the document.\n* @throws IOException if there is some IO error while reading the file.\n*/\ngetFromAsset(AssetManager, String) : SVG\n</code></pre><h2 id=\"2-通过解析得到SVG\"><a href=\"#2-通过解析得到SVG\" class=\"headerlink\" title=\"2. 通过解析得到SVG\"></a>2. 通过解析得到SVG</h2><h3 id=\"2-1-输入\"><a href=\"#2-1-输入\" class=\"headerlink\" title=\"2.1 输入\"></a>2.1 输入</h3><p>xml InputStream 或 zip InputStream</p>\n<h3 id=\"2-2-输出\"><a href=\"#2-2-输出\" class=\"headerlink\" title=\"2.2 输出\"></a>2.2 输出</h3><p>SVG</p>\n<h3 id=\"2-3-XML解析器\"><a href=\"#2-3-XML解析器\" class=\"headerlink\" title=\"2.3 XML解析器\"></a>2.3 XML解析器</h3><p>SAX</p>\n<h3 id=\"2-4-解析引擎\"><a href=\"#2-4-解析引擎\" class=\"headerlink\" title=\"2.4 解析引擎\"></a>2.4 解析引擎</h3><ul>\n<li>SVGParser // 主要引擎 继承自 com.xml.sax.ext.DefaultHandler2</li>\n<li>CCSSVGParser //主要用于解析CSS样式</li>\n</ul>\n<h3 id=\"2-5-解析工具\"><a href=\"#2-5-解析工具\" class=\"headerlink\" title=\"2.5 解析工具\"></a>2.5 解析工具</h3><ul>\n<li>NumberParser //解析SVG/Style中 ‘number’元素内容（速度快于系统）</li>\n<li>IntegerParser //解析SVG/Style中 ‘integer’元素或者哈希（速度快于系统）</li>\n<li>PreserveAspectRatio //在这里用于存储位置与缩放</li>\n</ul>\n<h3 id=\"2-6-解析流程\"><a href=\"#2-6-解析流程\" class=\"headerlink\" title=\"2.6 解析流程\"></a>2.6 解析流程</h3><h4 id=\"startDocument\"><a href=\"#startDocument\" class=\"headerlink\" title=\"startDocument\"></a>startDocument</h4><p><img src=\"/img/svg-parse-1.jpg\" alt=\"\"></p>\n<h4 id=\"startElement\"><a href=\"#startElement\" class=\"headerlink\" title=\"startElement\"></a>startElement</h4><p><img src=\"/img/svg-parse-2.jpg\" alt=\"\"></p>\n<h4 id=\"characters\"><a href=\"#characters\" class=\"headerlink\" title=\"characters\"></a>characters</h4><p><img src=\"/img/svg-parse-3.jpg\" alt=\"\"></p>\n<h4 id=\"endElement\"><a href=\"#endElement\" class=\"headerlink\" title=\"endElement\"></a>endElement</h4><p><img src=\"/img/svg-parse-4.jpg\" alt=\"\"></p>\n<h4 id=\"endDocument\"><a href=\"#endDocument\" class=\"headerlink\" title=\"endDocument\"></a>endDocument</h4><p><img src=\"/img/svg-parse-5.jpg\" alt=\"\"></p>\n<h3 id=\"2-7-层级管理\"><a href=\"#2-7-层级管理\" class=\"headerlink\" title=\"2.7 层级管理\"></a>2.7 层级管理</h3><h4 id=\"startDocument-1\"><a href=\"#startDocument-1\" class=\"headerlink\" title=\"startDocument\"></a>startDocument</h4><pre><code>svgDocument = new SVG();\n</code></pre><h4 id=\"startElement-1\"><a href=\"#startElement-1\" class=\"headerlink\" title=\"startElement\"></a>startElement</h4><pre><code>......\nSVG.SVGObject obj = new SVG.SVGObject();\n......\nif (currentElement == null) {\n    svgDocument.setRootElement(obj);\n} else {\n    currentElement.addChild(obj);\n}\ncurrentElement = obj;\n</code></pre><h4 id=\"characters-1\"><a href=\"#characters-1\" class=\"headerlink\" title=\"characters\"></a>characters</h4><pre><code>......\nif (currentElement instanceof SVG.TextContainer) {\n    // The SAX parser can pass us several text nodes in a row. If this happens, we\n    // want to collapse them all into one SVG.TextSequence node                \n    SVG.SvgConditionalContainer parent = (SVG.SvgConditionalContainer) currentElement;\n    int numOlderSiblings = parent.children.size();\n    SVG.SvgObject previousSibling = (numOlderSiblings == 0) ? null : parent.children.get(numOlderSiblings - 1);\n    if (previousSibling instanceof SVG.TextSequence) {\n        // Last sibling was a TextSequence also, so merge them.\n        ((SVG.TextSequence) previousSibling).text += new String(ch, start, length);\n    } else {\n        // Add a new TextSequence to the child node list\n        ((SVG.SvgConditionalContainer) currentElement).addChild(new SVG.TextSequence(new String(ch, start, length)));\n    }\n}\n</code></pre><h4 id=\"endElement-1\"><a href=\"#endElement-1\" class=\"headerlink\" title=\"endElement\"></a>endElement</h4><pre><code>......\ncurrentElement = ((SvgObject) currentElement).parent;\n</code></pre><h4 id=\"endDocument-1\"><a href=\"#endDocument-1\" class=\"headerlink\" title=\"endDocument\"></a>endDocument</h4><pre><code>......\n</code></pre><h2 id=\"3-将得到的SVG渲染到Picture-Canvas上\"><a href=\"#3-将得到的SVG渲染到Picture-Canvas上\" class=\"headerlink\" title=\"3. 将得到的SVG渲染到Picture\\Canvas上\"></a>3. 将得到的SVG渲染到Picture\\Canvas上</h2><h3 id=\"3-1-渲染入口\"><a href=\"#3-1-渲染入口\" class=\"headerlink\" title=\"3.1 渲染入口\"></a>3.1 渲染入口</h3><p><code>1.renderToPicture() : Picture</code> <code>2.renderToPicture(int, int) : Picture</code> <code>3.renderViewToPicture(String, int, int) : Picture</code> <code>4.renderToCanvas(Canvas) : void</code> <code>5.renderToCanvas(Canvas, RectF) : void</code> <code>6.renderViewToCanvas(String, Canvas) : void</code> <code>7.renderViewToCanvas(String, Canvas, RectF) : void</code></p>\n<pre><code>/**\n* Renders this SVG document to a Picture object.\n* &lt;p&gt;\n* An attempt will be made to determine a suitable initial viewport from the contents of the SVG file.\n* If an appropriate viewport can&apos;t be determined, a default viewport of 512x512 will be used.\n*\n* @return a Picture object suitable for later rendering using {@code Canvas.drawPicture()}\n*/\nrenderToPicture() : Picture\n\n/**\n* Renders this SVG document to a Picture object.\n*\n* @param widthInPixels the width of the initial viewport\n* @param heightInPixels the height of the initial viewport\n* @return a Picture object suitable for later rendering using {@code Canvas.darwPicture()}\n*/\nrenderToPicture(int, int) : Picture\n\n/**\n* Renders this SVG document to a Picture object using the specified view defined in the document.\n* &lt;p&gt;\n* A View is an special element in a SVG document that describes a rectangular area in the document.\n* Calling this method with a {@code viewId} will result in the specified view being positioned and scaled\n* to the viewport.  In other words, use {@link #renderToPicture()} to render the whole document, or use this\n* method instead to render just a part of it.\n*\n* @param viewId the id of a view element in the document that defines which section of the document is to be visible.\n* @param widthInPixels the width of the initial viewport\n* @param heightInPixels the height of the initial viewport\n* @return a Picture object suitable for later rendering using {@code Canvas.drawPicture()}, or null if the viewId was not found.\n*/\nrenderViewToPicture(String, int, int) : Picture\n\n/**\n* Renders this SVG document to a Canvas object.  The full width and height of the canvas\n* will be used as the viewport into which the document will be rendered.\n*\n* @param canvas the canvas to which the document should be rendered.\n*/\nrenderToCanvas(Canvas) : void\n\n /**\n* Renders this SVG document to a Canvas object.\n*\n* @param canvas the canvas to which the document should be rendered.\n* @param viewPort the bounds of the area on the canvas you want the SVG rendered, or null for the whole canvas.\n*/\nrenderToCanvas(Canvas, RectF) : void\n\n/**\n* Renders this SVG document to a Canvas using the specified view defined in the document.\n* &lt;p&gt;\n* A View is an special element in a SVG documents that describes a rectangular area in the document.\n* Calling this method with a {@code viewId} will result in the specified view being positioned and scaled\n* to the viewport.  In other words, use {@link #renderToPicture()} to render the whole document, or use this\n* method instead to render just a part of it.\n* &lt;p&gt;\n* If the {@code &lt;view&gt;} could not be found, nothing will be drawn.\n*\n* @param viewId the id of a view element in the document that defines which section of the document is to be visible.\n* @param canvas the canvas to which the document should be rendered.\n*/\nrenderViewToCanvas(String, Canvas) : void\n\n/**\n* Renders this SVG document to a Canvas using the specified view defined in the document.\n* &lt;p&gt;\n* A View is an special element in a SVG documents that describes a rectangular area in the document.\n* Calling this method with a {@code viewId} will result in the specified view being positioned and scaled\n* to the viewport.  In other words, use {@link #renderToPicture()} to render the whole document, or use this\n* method instead to render just a part of it.\n* &lt;p&gt;\n* If the {@code &lt;view&gt;} could not be found, nothing will be drawn.\n*\n* @param viewId the id of a view element in the document that defines which section of the document is to be visible.\n* @param canvas the canvas to which the document should be rendered.\n* @param viewPort the bounds of the area on the canvas you want the SVG rendered, or null for the whole canvas.\n*/\nrenderViewToCanvas(String, Canvas, RectF) : void\n\n---\n\n&gt; © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n</code></pre>","excerpt":"<ul>\n<li>入口</li>\n<li>通过解析得到SVG</li>\n<li>将得到的SVG渲染到Picture\\Canvas上</li>\n</ul>\n<h2 id=\"1-入口\"><a href=\"#1-入口\" class=\"headerlink\" title=\"1. 入口\"></a>1. 入口</h2><p><code>1.getFromInputStream(InputStream) : SVG</code> <code>2.getFromString(String) : SVG</code> <code>3.getFromResource(Resources, int) : SVG</code> <code>4.getFromAsset(AssetManager, String) : SVG</code></p>","more":"<pre><code>// *************** com.caverock.androidsvg.SVG ***************\n\n/**\n* Read and parse an SVG from the given {@code InputStream}.\n*\n* @param is the input stream from which to read the file.\n* @return an SVG instance on which you can call one of the render methods.\n* @throws SVGParseException if there is an error parsing the document.\n*/\ngetFromInputStream(InputStream) : SVG\n\n/**\n* Read and parse an SVG from the given {@code String}.\n*\n* @param svg the String instance containing the SVG document.\n* @return an SVG instance on which you can call one of the render methods.\n* @throws SVGParseException if there is an error parsing the document.\n*/\ngetFromString(String) : SVG\n\n/**\n* Read and parse an SVG from the given resource location.\n*\n* @param context the Android context of the resource.\n* @param resourceId the resource identifier of the SVG document.\n* @return an SVG instance on which you can call one of the render methods.\n* @throws SVGParseException if there is an error parsing the document.\n*/\ngetFromResource(Context, int) : SVG\n\n/**\n* Read and parse an SVG from the given resource location.\n*\n* @param resources the set of Resources in which to locate the file.\n* @param resourceId the resource identifier of the SVG document.\n* @return an SVG instance on which you can call one of the render methods.\n* @throws SVGParseException if there is an error parsing the document.\n*/\ngetFromResource(Resources, int) : SVG\n\n/**\n* Read and parse an SVG from the assets folder.\n*\n* @param assetManager the AssetManager instance to use when reading the file.\n* @param filename the filename of the SVG document within assets.\n* @return an SVG instance on which you can call one of the render methods.\n* @throws SVGParseException if there is an error parsing the document.\n* @throws IOException if there is some IO error while reading the file.\n*/\ngetFromAsset(AssetManager, String) : SVG\n</code></pre><h2 id=\"2-通过解析得到SVG\"><a href=\"#2-通过解析得到SVG\" class=\"headerlink\" title=\"2. 通过解析得到SVG\"></a>2. 通过解析得到SVG</h2><h3 id=\"2-1-输入\"><a href=\"#2-1-输入\" class=\"headerlink\" title=\"2.1 输入\"></a>2.1 输入</h3><p>xml InputStream 或 zip InputStream</p>\n<h3 id=\"2-2-输出\"><a href=\"#2-2-输出\" class=\"headerlink\" title=\"2.2 输出\"></a>2.2 输出</h3><p>SVG</p>\n<h3 id=\"2-3-XML解析器\"><a href=\"#2-3-XML解析器\" class=\"headerlink\" title=\"2.3 XML解析器\"></a>2.3 XML解析器</h3><p>SAX</p>\n<h3 id=\"2-4-解析引擎\"><a href=\"#2-4-解析引擎\" class=\"headerlink\" title=\"2.4 解析引擎\"></a>2.4 解析引擎</h3><ul>\n<li>SVGParser // 主要引擎 继承自 com.xml.sax.ext.DefaultHandler2</li>\n<li>CCSSVGParser //主要用于解析CSS样式</li>\n</ul>\n<h3 id=\"2-5-解析工具\"><a href=\"#2-5-解析工具\" class=\"headerlink\" title=\"2.5 解析工具\"></a>2.5 解析工具</h3><ul>\n<li>NumberParser //解析SVG/Style中 ‘number’元素内容（速度快于系统）</li>\n<li>IntegerParser //解析SVG/Style中 ‘integer’元素或者哈希（速度快于系统）</li>\n<li>PreserveAspectRatio //在这里用于存储位置与缩放</li>\n</ul>\n<h3 id=\"2-6-解析流程\"><a href=\"#2-6-解析流程\" class=\"headerlink\" title=\"2.6 解析流程\"></a>2.6 解析流程</h3><h4 id=\"startDocument\"><a href=\"#startDocument\" class=\"headerlink\" title=\"startDocument\"></a>startDocument</h4><p><img src=\"/img/svg-parse-1.jpg\" alt=\"\"></p>\n<h4 id=\"startElement\"><a href=\"#startElement\" class=\"headerlink\" title=\"startElement\"></a>startElement</h4><p><img src=\"/img/svg-parse-2.jpg\" alt=\"\"></p>\n<h4 id=\"characters\"><a href=\"#characters\" class=\"headerlink\" title=\"characters\"></a>characters</h4><p><img src=\"/img/svg-parse-3.jpg\" alt=\"\"></p>\n<h4 id=\"endElement\"><a href=\"#endElement\" class=\"headerlink\" title=\"endElement\"></a>endElement</h4><p><img src=\"/img/svg-parse-4.jpg\" alt=\"\"></p>\n<h4 id=\"endDocument\"><a href=\"#endDocument\" class=\"headerlink\" title=\"endDocument\"></a>endDocument</h4><p><img src=\"/img/svg-parse-5.jpg\" alt=\"\"></p>\n<h3 id=\"2-7-层级管理\"><a href=\"#2-7-层级管理\" class=\"headerlink\" title=\"2.7 层级管理\"></a>2.7 层级管理</h3><h4 id=\"startDocument-1\"><a href=\"#startDocument-1\" class=\"headerlink\" title=\"startDocument\"></a>startDocument</h4><pre><code>svgDocument = new SVG();\n</code></pre><h4 id=\"startElement-1\"><a href=\"#startElement-1\" class=\"headerlink\" title=\"startElement\"></a>startElement</h4><pre><code>......\nSVG.SVGObject obj = new SVG.SVGObject();\n......\nif (currentElement == null) {\n    svgDocument.setRootElement(obj);\n} else {\n    currentElement.addChild(obj);\n}\ncurrentElement = obj;\n</code></pre><h4 id=\"characters-1\"><a href=\"#characters-1\" class=\"headerlink\" title=\"characters\"></a>characters</h4><pre><code>......\nif (currentElement instanceof SVG.TextContainer) {\n    // The SAX parser can pass us several text nodes in a row. If this happens, we\n    // want to collapse them all into one SVG.TextSequence node                \n    SVG.SvgConditionalContainer parent = (SVG.SvgConditionalContainer) currentElement;\n    int numOlderSiblings = parent.children.size();\n    SVG.SvgObject previousSibling = (numOlderSiblings == 0) ? null : parent.children.get(numOlderSiblings - 1);\n    if (previousSibling instanceof SVG.TextSequence) {\n        // Last sibling was a TextSequence also, so merge them.\n        ((SVG.TextSequence) previousSibling).text += new String(ch, start, length);\n    } else {\n        // Add a new TextSequence to the child node list\n        ((SVG.SvgConditionalContainer) currentElement).addChild(new SVG.TextSequence(new String(ch, start, length)));\n    }\n}\n</code></pre><h4 id=\"endElement-1\"><a href=\"#endElement-1\" class=\"headerlink\" title=\"endElement\"></a>endElement</h4><pre><code>......\ncurrentElement = ((SvgObject) currentElement).parent;\n</code></pre><h4 id=\"endDocument-1\"><a href=\"#endDocument-1\" class=\"headerlink\" title=\"endDocument\"></a>endDocument</h4><pre><code>......\n</code></pre><h2 id=\"3-将得到的SVG渲染到Picture-Canvas上\"><a href=\"#3-将得到的SVG渲染到Picture-Canvas上\" class=\"headerlink\" title=\"3. 将得到的SVG渲染到Picture\\Canvas上\"></a>3. 将得到的SVG渲染到Picture\\Canvas上</h2><h3 id=\"3-1-渲染入口\"><a href=\"#3-1-渲染入口\" class=\"headerlink\" title=\"3.1 渲染入口\"></a>3.1 渲染入口</h3><p><code>1.renderToPicture() : Picture</code> <code>2.renderToPicture(int, int) : Picture</code> <code>3.renderViewToPicture(String, int, int) : Picture</code> <code>4.renderToCanvas(Canvas) : void</code> <code>5.renderToCanvas(Canvas, RectF) : void</code> <code>6.renderViewToCanvas(String, Canvas) : void</code> <code>7.renderViewToCanvas(String, Canvas, RectF) : void</code></p>\n<pre><code>/**\n* Renders this SVG document to a Picture object.\n* &lt;p&gt;\n* An attempt will be made to determine a suitable initial viewport from the contents of the SVG file.\n* If an appropriate viewport can&apos;t be determined, a default viewport of 512x512 will be used.\n*\n* @return a Picture object suitable for later rendering using {@code Canvas.drawPicture()}\n*/\nrenderToPicture() : Picture\n\n/**\n* Renders this SVG document to a Picture object.\n*\n* @param widthInPixels the width of the initial viewport\n* @param heightInPixels the height of the initial viewport\n* @return a Picture object suitable for later rendering using {@code Canvas.darwPicture()}\n*/\nrenderToPicture(int, int) : Picture\n\n/**\n* Renders this SVG document to a Picture object using the specified view defined in the document.\n* &lt;p&gt;\n* A View is an special element in a SVG document that describes a rectangular area in the document.\n* Calling this method with a {@code viewId} will result in the specified view being positioned and scaled\n* to the viewport.  In other words, use {@link #renderToPicture()} to render the whole document, or use this\n* method instead to render just a part of it.\n*\n* @param viewId the id of a view element in the document that defines which section of the document is to be visible.\n* @param widthInPixels the width of the initial viewport\n* @param heightInPixels the height of the initial viewport\n* @return a Picture object suitable for later rendering using {@code Canvas.drawPicture()}, or null if the viewId was not found.\n*/\nrenderViewToPicture(String, int, int) : Picture\n\n/**\n* Renders this SVG document to a Canvas object.  The full width and height of the canvas\n* will be used as the viewport into which the document will be rendered.\n*\n* @param canvas the canvas to which the document should be rendered.\n*/\nrenderToCanvas(Canvas) : void\n\n /**\n* Renders this SVG document to a Canvas object.\n*\n* @param canvas the canvas to which the document should be rendered.\n* @param viewPort the bounds of the area on the canvas you want the SVG rendered, or null for the whole canvas.\n*/\nrenderToCanvas(Canvas, RectF) : void\n\n/**\n* Renders this SVG document to a Canvas using the specified view defined in the document.\n* &lt;p&gt;\n* A View is an special element in a SVG documents that describes a rectangular area in the document.\n* Calling this method with a {@code viewId} will result in the specified view being positioned and scaled\n* to the viewport.  In other words, use {@link #renderToPicture()} to render the whole document, or use this\n* method instead to render just a part of it.\n* &lt;p&gt;\n* If the {@code &lt;view&gt;} could not be found, nothing will be drawn.\n*\n* @param viewId the id of a view element in the document that defines which section of the document is to be visible.\n* @param canvas the canvas to which the document should be rendered.\n*/\nrenderViewToCanvas(String, Canvas) : void\n\n/**\n* Renders this SVG document to a Canvas using the specified view defined in the document.\n* &lt;p&gt;\n* A View is an special element in a SVG documents that describes a rectangular area in the document.\n* Calling this method with a {@code viewId} will result in the specified view being positioned and scaled\n* to the viewport.  In other words, use {@link #renderToPicture()} to render the whole document, or use this\n* method instead to render just a part of it.\n* &lt;p&gt;\n* If the {@code &lt;view&gt;} could not be found, nothing will be drawn.\n*\n* @param viewId the id of a view element in the document that defines which section of the document is to be visible.\n* @param canvas the canvas to which the document should be rendered.\n* @param viewPort the bounds of the area on the canvas you want the SVG rendered, or null for the whole canvas.\n*/\nrenderViewToCanvas(String, Canvas, RectF) : void\n\n---\n\n&gt; © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n</code></pre>"},{"title":"SVG Android应用探究之路","date":"2017-02-07T07:46:03.000Z","_content":"\n> 《Forms for Kids》开发总结翻译\n\n## I. 结论\n\n#### 优点:\n\n1. vector\n2. 在所有大小分辨率屏幕上完美显示\n3. SVG图片更小\n4. 一张图片可以更具需求多次使用？(One picture is used some times for different permissions)\n5. 减少加载时间\n\n<!--more-->\n\n#### 缺点:\n\n1. 图片只能按照比例缩放\n2. 不支持透明度？\n3. svg文件还可以近一步优化，里面有一些不可取（The schedule needs to be simplified — the more vector elements, the the file more weighs. It is undesirable to use shades and luminescences as it in times increases the size of SVG-files）\n\n#### SVG 的探索来源于：\n\n> No sooner said than done. So, under katom history of introduction of vector images in one of our applications. In article we will impart experience also features of use of vector images in format SVG in applications Android.\n\n\n##### projects on guglokode\n\n- code.google.com/p/svg-android/\n- code.google.com/p/svg-android-2/\n- Detailed article about use NDK:\n- horribileru.blogspot.ru/2011/10/android-imageview-svg.html\n- And some links to dead projects at different forums.\n\n#### SVG可用编辑器\n\nAdobe Illustrator 、Inkscape work.\n\n## II. SVG-Android：\n\n> GitHub: [pents90/svg-android](https://github.com/pents90/svg-android)\n\n他们项目通过底层封装的接口方式：\n\n```java\nSVG svg = SVGParser.getSVGFromResource(getResources(), R.raw.filename);\nDrawable drawable = svg.createPictureDrawable();\nimageView.setImageDrawable(drawable);\n```\n\n- **缺点:** 只支持 SVG basic 1.1(不支持Inkspace编辑、只支持AdobeIllustrator编辑)\n\n## III. SVG-Android-2:\n\n> URL: [svg-android-2](https://code.google.com/p/svg-android-2/wiki/Introduction)\n\n#### 第一个发现：SVG在包含 阴影的情况下大小会飙升：\n\n![icon 1](/img/svg-k-1.png)\n\nizorbrazhenija with a shade and without: 118 KB vs 1 KB\n\n- **解决方法：** 删除对应的阴影\n\n#### 第二个发现：显示梯度颜色，不支持！\n\nThe problem with gradients has dared removal of superfluous tags from svg (it is described further in article). But basically, and with it it would be possible to live and in our simple images to replace a gradient with homogeneous pouring, if not other nuance — considerable load time of images.\n\n- **解决方法：** 用简单的图片代替\n- **后文(第三个发现)提到解决方法：** After we have got rid of the given links, having edited code SVG in some images, the gradient began to be displayed correctly.\n\n![icon 2](/img/svg-k-2.png)\n\n at the left — the black sky in the form of a gradient, on the right — a correct picture.\n\n#### 第三个发现：加载时间\n\n- **根源：** 为什么SVG-Android-2这么耗时，\n- **原因：** SVGParser 解析Image XML file ，解析了两次，第一次 为第二次解析收集多余的属性。多余信息是：\n\n> that the most interesting, — is analyzed only attribute xlink:href which is a semblance of hyperlinks in the document. In our problem images just there were such links, and they conducted anywhere.\n\n- **成果：** 耗时，加载35个SVG的图片(PNG 500px*500px)：从原8s 减少到 1.8-2s。\n\n#### 第四个发现：透明与颜色适配器\n\n- **原因：** 库不是加载 典型的bitmapDrawable与pictureDrawable,并且源码中的setColorFilter、setAlpha方法都是空的：\n\n```java\n@Override\npublic void setColorFilter(ColorFilter colorFilter) {}\n@Override\npublic void setAlpha(int alpha) {}\n```\n\n- **成果：** 在SVGHandler中发现一个Paint类型的fillPaint组件，如果能够在加载元素之前 创建colorFilter即可，略微调整SVGHandler加载SVG的代码：\n\n```java\npublic void setFilterColor(int filterColor) {\n      fillPaint.setColorFilter(new PorterDuffColorFilter(filterColor, Mode.MULTIPLY));\n}\n```\n\n接口调整为：\n\n```java\nSVG svg = SVGParser.getSVGFromResource(getResources(), rawSvgId, filterColor);\n```\n\n因此我们能够在多张图片上通过引用一张图片使用不同的阴影颜色（As a result we could receive some images of different shades from one picture.）\n\n对于透明度，建议并不适用setAlpha去实现（实际上是可以的通过fillPaint）:\n\n> Also it is possible to establish and Alpha for fillPaint, but in games this property is required in the dynamic form (have pressed an element — has become translucent), and podgruzhat each time the new image is inconvenient. Therefore this effect have replaced with scaling (have pressed — the element has decreased).\n\n#### 第五个发现：异常处理：\n\n```java\njava.lang.UnsupportedOperationException\n    at android.view.GLES20Canvas.drawPicture(GLES20Canvas.java:895)\n    at android.graphics.drawable.PictureDrawable.draw(PictureDrawable.java:73)\n```\n\n低版本不支持gpu(api < 11)\n\n```java\npublic static void setSoftwareLayerType(View view) {\n     try {\n       view.setLayerType(View.LAYER_TYPE_SOFTWARE, null);\n     } catch (NoSuchMethodError e) {\n         //Do nothing - this happens on API < 11\n     }\n}\n```\n\n#### 其使用SVG的项目：\n\nhttp://play.google.com/store/apps/details?id=com.whisperarts.kids.forms\n\n> 本文总结自：http://sysmagazine.com/posts/166093/\n\n---\n\n- 文章创建时间: 2014-11-08，[本文迭代日志](https://github.com/Jacksgong/Blog/commits/master/source/_posts/SVG-Android%E5%BA%94%E7%94%A8%E6%8E%A2%E7%A9%B6%E4%B9%8B%E8%B7%AF.md)。\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/SVG-Android应用探究之路.md","raw":"title: SVG Android应用探究之路\ndate: 2017-02-07 15:46:03\npermalink: 2014/11/08/SVG-Android应用探究之路\ntags:\n- svg\n- Android\n\n---\n\n> 《Forms for Kids》开发总结翻译\n\n## I. 结论\n\n#### 优点:\n\n1. vector\n2. 在所有大小分辨率屏幕上完美显示\n3. SVG图片更小\n4. 一张图片可以更具需求多次使用？(One picture is used some times for different permissions)\n5. 减少加载时间\n\n<!--more-->\n\n#### 缺点:\n\n1. 图片只能按照比例缩放\n2. 不支持透明度？\n3. svg文件还可以近一步优化，里面有一些不可取（The schedule needs to be simplified — the more vector elements, the the file more weighs. It is undesirable to use shades and luminescences as it in times increases the size of SVG-files）\n\n#### SVG 的探索来源于：\n\n> No sooner said than done. So, under katom history of introduction of vector images in one of our applications. In article we will impart experience also features of use of vector images in format SVG in applications Android.\n\n\n##### projects on guglokode\n\n- code.google.com/p/svg-android/\n- code.google.com/p/svg-android-2/\n- Detailed article about use NDK:\n- horribileru.blogspot.ru/2011/10/android-imageview-svg.html\n- And some links to dead projects at different forums.\n\n#### SVG可用编辑器\n\nAdobe Illustrator 、Inkscape work.\n\n## II. SVG-Android：\n\n> GitHub: [pents90/svg-android](https://github.com/pents90/svg-android)\n\n他们项目通过底层封装的接口方式：\n\n```java\nSVG svg = SVGParser.getSVGFromResource(getResources(), R.raw.filename);\nDrawable drawable = svg.createPictureDrawable();\nimageView.setImageDrawable(drawable);\n```\n\n- **缺点:** 只支持 SVG basic 1.1(不支持Inkspace编辑、只支持AdobeIllustrator编辑)\n\n## III. SVG-Android-2:\n\n> URL: [svg-android-2](https://code.google.com/p/svg-android-2/wiki/Introduction)\n\n#### 第一个发现：SVG在包含 阴影的情况下大小会飙升：\n\n![icon 1](/img/svg-k-1.png)\n\nizorbrazhenija with a shade and without: 118 KB vs 1 KB\n\n- **解决方法：** 删除对应的阴影\n\n#### 第二个发现：显示梯度颜色，不支持！\n\nThe problem with gradients has dared removal of superfluous tags from svg (it is described further in article). But basically, and with it it would be possible to live and in our simple images to replace a gradient with homogeneous pouring, if not other nuance — considerable load time of images.\n\n- **解决方法：** 用简单的图片代替\n- **后文(第三个发现)提到解决方法：** After we have got rid of the given links, having edited code SVG in some images, the gradient began to be displayed correctly.\n\n![icon 2](/img/svg-k-2.png)\n\n at the left — the black sky in the form of a gradient, on the right — a correct picture.\n\n#### 第三个发现：加载时间\n\n- **根源：** 为什么SVG-Android-2这么耗时，\n- **原因：** SVGParser 解析Image XML file ，解析了两次，第一次 为第二次解析收集多余的属性。多余信息是：\n\n> that the most interesting, — is analyzed only attribute xlink:href which is a semblance of hyperlinks in the document. In our problem images just there were such links, and they conducted anywhere.\n\n- **成果：** 耗时，加载35个SVG的图片(PNG 500px*500px)：从原8s 减少到 1.8-2s。\n\n#### 第四个发现：透明与颜色适配器\n\n- **原因：** 库不是加载 典型的bitmapDrawable与pictureDrawable,并且源码中的setColorFilter、setAlpha方法都是空的：\n\n```java\n@Override\npublic void setColorFilter(ColorFilter colorFilter) {}\n@Override\npublic void setAlpha(int alpha) {}\n```\n\n- **成果：** 在SVGHandler中发现一个Paint类型的fillPaint组件，如果能够在加载元素之前 创建colorFilter即可，略微调整SVGHandler加载SVG的代码：\n\n```java\npublic void setFilterColor(int filterColor) {\n      fillPaint.setColorFilter(new PorterDuffColorFilter(filterColor, Mode.MULTIPLY));\n}\n```\n\n接口调整为：\n\n```java\nSVG svg = SVGParser.getSVGFromResource(getResources(), rawSvgId, filterColor);\n```\n\n因此我们能够在多张图片上通过引用一张图片使用不同的阴影颜色（As a result we could receive some images of different shades from one picture.）\n\n对于透明度，建议并不适用setAlpha去实现（实际上是可以的通过fillPaint）:\n\n> Also it is possible to establish and Alpha for fillPaint, but in games this property is required in the dynamic form (have pressed an element — has become translucent), and podgruzhat each time the new image is inconvenient. Therefore this effect have replaced with scaling (have pressed — the element has decreased).\n\n#### 第五个发现：异常处理：\n\n```java\njava.lang.UnsupportedOperationException\n    at android.view.GLES20Canvas.drawPicture(GLES20Canvas.java:895)\n    at android.graphics.drawable.PictureDrawable.draw(PictureDrawable.java:73)\n```\n\n低版本不支持gpu(api < 11)\n\n```java\npublic static void setSoftwareLayerType(View view) {\n     try {\n       view.setLayerType(View.LAYER_TYPE_SOFTWARE, null);\n     } catch (NoSuchMethodError e) {\n         //Do nothing - this happens on API < 11\n     }\n}\n```\n\n#### 其使用SVG的项目：\n\nhttp://play.google.com/store/apps/details?id=com.whisperarts.kids.forms\n\n> 本文总结自：http://sysmagazine.com/posts/166093/\n\n---\n\n- 文章创建时间: 2014-11-08，[本文迭代日志](https://github.com/Jacksgong/Blog/commits/master/source/_posts/SVG-Android%E5%BA%94%E7%94%A8%E6%8E%A2%E7%A9%B6%E4%B9%8B%E8%B7%AF.md)。\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2014/11/08/SVG-Android应用探究之路","published":1,"updated":"2017-02-15T16:51:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66i2001395bu5vced4vv","content":"<blockquote>\n<p>《Forms for Kids》开发总结翻译</p>\n</blockquote>\n<h2 id=\"I-结论\"><a href=\"#I-结论\" class=\"headerlink\" title=\"I. 结论\"></a>I. 结论</h2><h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点:\"></a>优点:</h4><ol>\n<li>vector</li>\n<li>在所有大小分辨率屏幕上完美显示</li>\n<li>SVG图片更小</li>\n<li>一张图片可以更具需求多次使用？(One picture is used some times for different permissions)</li>\n<li>减少加载时间</li>\n</ol>\n<a id=\"more\"></a>\n<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点:\"></a>缺点:</h4><ol>\n<li>图片只能按照比例缩放</li>\n<li>不支持透明度？</li>\n<li>svg文件还可以近一步优化，里面有一些不可取（The schedule needs to be simplified — the more vector elements, the the file more weighs. It is undesirable to use shades and luminescences as it in times increases the size of SVG-files）</li>\n</ol>\n<h4 id=\"SVG-的探索来源于：\"><a href=\"#SVG-的探索来源于：\" class=\"headerlink\" title=\"SVG 的探索来源于：\"></a>SVG 的探索来源于：</h4><blockquote>\n<p>No sooner said than done. So, under katom history of introduction of vector images in one of our applications. In article we will impart experience also features of use of vector images in format SVG in applications Android.</p>\n</blockquote>\n<h5 id=\"projects-on-guglokode\"><a href=\"#projects-on-guglokode\" class=\"headerlink\" title=\"projects on guglokode\"></a>projects on guglokode</h5><ul>\n<li>code.google.com/p/svg-android/</li>\n<li>code.google.com/p/svg-android-2/</li>\n<li>Detailed article about use NDK:</li>\n<li>horribileru.blogspot.ru/2011/10/android-imageview-svg.html</li>\n<li>And some links to dead projects at different forums.</li>\n</ul>\n<h4 id=\"SVG可用编辑器\"><a href=\"#SVG可用编辑器\" class=\"headerlink\" title=\"SVG可用编辑器\"></a>SVG可用编辑器</h4><p>Adobe Illustrator 、Inkscape work.</p>\n<h2 id=\"II-SVG-Android：\"><a href=\"#II-SVG-Android：\" class=\"headerlink\" title=\"II. SVG-Android：\"></a>II. SVG-Android：</h2><blockquote>\n<p>GitHub: <a href=\"https://github.com/pents90/svg-android\" target=\"_blank\" rel=\"external\">pents90/svg-android</a></p>\n</blockquote>\n<p>他们项目通过底层封装的接口方式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">SVG svg = SVGParser.getSVGFromResource(getResources(), R.raw.filename);</div><div class=\"line\">Drawable drawable = svg.createPictureDrawable();</div><div class=\"line\">imageView.setImageDrawable(drawable);</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>缺点:</strong> 只支持 SVG basic 1.1(不支持Inkspace编辑、只支持AdobeIllustrator编辑)</li>\n</ul>\n<h2 id=\"III-SVG-Android-2\"><a href=\"#III-SVG-Android-2\" class=\"headerlink\" title=\"III. SVG-Android-2:\"></a>III. SVG-Android-2:</h2><blockquote>\n<p>URL: <a href=\"https://code.google.com/p/svg-android-2/wiki/Introduction\" target=\"_blank\" rel=\"external\">svg-android-2</a></p>\n</blockquote>\n<h4 id=\"第一个发现：SVG在包含-阴影的情况下大小会飙升：\"><a href=\"#第一个发现：SVG在包含-阴影的情况下大小会飙升：\" class=\"headerlink\" title=\"第一个发现：SVG在包含 阴影的情况下大小会飙升：\"></a>第一个发现：SVG在包含 阴影的情况下大小会飙升：</h4><p><img src=\"/img/svg-k-1.png\" alt=\"icon 1\"></p>\n<p>izorbrazhenija with a shade and without: 118 KB vs 1 KB</p>\n<ul>\n<li><strong>解决方法：</strong> 删除对应的阴影</li>\n</ul>\n<h4 id=\"第二个发现：显示梯度颜色，不支持！\"><a href=\"#第二个发现：显示梯度颜色，不支持！\" class=\"headerlink\" title=\"第二个发现：显示梯度颜色，不支持！\"></a>第二个发现：显示梯度颜色，不支持！</h4><p>The problem with gradients has dared removal of superfluous tags from svg (it is described further in article). But basically, and with it it would be possible to live and in our simple images to replace a gradient with homogeneous pouring, if not other nuance — considerable load time of images.</p>\n<ul>\n<li><strong>解决方法：</strong> 用简单的图片代替</li>\n<li><strong>后文(第三个发现)提到解决方法：</strong> After we have got rid of the given links, having edited code SVG in some images, the gradient began to be displayed correctly.</li>\n</ul>\n<p><img src=\"/img/svg-k-2.png\" alt=\"icon 2\"></p>\n<p> at the left — the black sky in the form of a gradient, on the right — a correct picture.</p>\n<h4 id=\"第三个发现：加载时间\"><a href=\"#第三个发现：加载时间\" class=\"headerlink\" title=\"第三个发现：加载时间\"></a>第三个发现：加载时间</h4><ul>\n<li><strong>根源：</strong> 为什么SVG-Android-2这么耗时，</li>\n<li><strong>原因：</strong> SVGParser 解析Image XML file ，解析了两次，第一次 为第二次解析收集多余的属性。多余信息是：</li>\n</ul>\n<blockquote>\n<p>that the most interesting, — is analyzed only attribute xlink:href which is a semblance of hyperlinks in the document. In our problem images just there were such links, and they conducted anywhere.</p>\n</blockquote>\n<ul>\n<li><strong>成果：</strong> 耗时，加载35个SVG的图片(PNG 500px*500px)：从原8s 减少到 1.8-2s。</li>\n</ul>\n<h4 id=\"第四个发现：透明与颜色适配器\"><a href=\"#第四个发现：透明与颜色适配器\" class=\"headerlink\" title=\"第四个发现：透明与颜色适配器\"></a>第四个发现：透明与颜色适配器</h4><ul>\n<li><strong>原因：</strong> 库不是加载 典型的bitmapDrawable与pictureDrawable,并且源码中的setColorFilter、setAlpha方法都是空的：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setColorFilter</span><span class=\"params\">(ColorFilter colorFilter)</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAlpha</span><span class=\"params\">(<span class=\"keyword\">int</span> alpha)</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>成果：</strong> 在SVGHandler中发现一个Paint类型的fillPaint组件，如果能够在加载元素之前 创建colorFilter即可，略微调整SVGHandler加载SVG的代码：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setFilterColor</span><span class=\"params\">(<span class=\"keyword\">int</span> filterColor)</span> </span>&#123;</div><div class=\"line\">      fillPaint.setColorFilter(<span class=\"keyword\">new</span> PorterDuffColorFilter(filterColor, Mode.MULTIPLY));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>接口调整为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SVG svg = SVGParser.getSVGFromResource(getResources(), rawSvgId, filterColor);</div></pre></td></tr></table></figure>\n<p>因此我们能够在多张图片上通过引用一张图片使用不同的阴影颜色（As a result we could receive some images of different shades from one picture.）</p>\n<p>对于透明度，建议并不适用setAlpha去实现（实际上是可以的通过fillPaint）:</p>\n<blockquote>\n<p>Also it is possible to establish and Alpha for fillPaint, but in games this property is required in the dynamic form (have pressed an element — has become translucent), and podgruzhat each time the new image is inconvenient. Therefore this effect have replaced with scaling (have pressed — the element has decreased).</p>\n</blockquote>\n<h4 id=\"第五个发现：异常处理：\"><a href=\"#第五个发现：异常处理：\" class=\"headerlink\" title=\"第五个发现：异常处理：\"></a>第五个发现：异常处理：</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">java.lang.UnsupportedOperationException</div><div class=\"line\">    at android.view.GLES20Canvas.drawPicture(GLES20Canvas.java:<span class=\"number\">895</span>)</div><div class=\"line\">    at android.graphics.drawable.PictureDrawable.draw(PictureDrawable.java:<span class=\"number\">73</span>)</div></pre></td></tr></table></figure>\n<p>低版本不支持gpu(api &lt; 11)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setSoftwareLayerType</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">       view.setLayerType(View.LAYER_TYPE_SOFTWARE, <span class=\"keyword\">null</span>);</div><div class=\"line\">     &#125; <span class=\"keyword\">catch</span> (NoSuchMethodError e) &#123;</div><div class=\"line\">         <span class=\"comment\">//Do nothing - this happens on API &lt; 11</span></div><div class=\"line\">     &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"其使用SVG的项目：\"><a href=\"#其使用SVG的项目：\" class=\"headerlink\" title=\"其使用SVG的项目：\"></a>其使用SVG的项目：</h4><p><a href=\"http://play.google.com/store/apps/details?id=com.whisperarts.kids.forms\" target=\"_blank\" rel=\"external\">http://play.google.com/store/apps/details?id=com.whisperarts.kids.forms</a></p>\n<blockquote>\n<p>本文总结自：<a href=\"http://sysmagazine.com/posts/166093/\" target=\"_blank\" rel=\"external\">http://sysmagazine.com/posts/166093/</a></p>\n</blockquote>\n<hr>\n<ul>\n<li>文章创建时间: 2014-11-08，<a href=\"https://github.com/Jacksgong/Blog/commits/master/source/_posts/SVG-Android%E5%BA%94%E7%94%A8%E6%8E%A2%E7%A9%B6%E4%B9%8B%E8%B7%AF.md\" target=\"_blank\" rel=\"external\">本文迭代日志</a>。</li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>《Forms for Kids》开发总结翻译</p>\n</blockquote>\n<h2 id=\"I-结论\"><a href=\"#I-结论\" class=\"headerlink\" title=\"I. 结论\"></a>I. 结论</h2><h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点:\"></a>优点:</h4><ol>\n<li>vector</li>\n<li>在所有大小分辨率屏幕上完美显示</li>\n<li>SVG图片更小</li>\n<li>一张图片可以更具需求多次使用？(One picture is used some times for different permissions)</li>\n<li>减少加载时间</li>\n</ol>","more":"<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点:\"></a>缺点:</h4><ol>\n<li>图片只能按照比例缩放</li>\n<li>不支持透明度？</li>\n<li>svg文件还可以近一步优化，里面有一些不可取（The schedule needs to be simplified — the more vector elements, the the file more weighs. It is undesirable to use shades and luminescences as it in times increases the size of SVG-files）</li>\n</ol>\n<h4 id=\"SVG-的探索来源于：\"><a href=\"#SVG-的探索来源于：\" class=\"headerlink\" title=\"SVG 的探索来源于：\"></a>SVG 的探索来源于：</h4><blockquote>\n<p>No sooner said than done. So, under katom history of introduction of vector images in one of our applications. In article we will impart experience also features of use of vector images in format SVG in applications Android.</p>\n</blockquote>\n<h5 id=\"projects-on-guglokode\"><a href=\"#projects-on-guglokode\" class=\"headerlink\" title=\"projects on guglokode\"></a>projects on guglokode</h5><ul>\n<li>code.google.com/p/svg-android/</li>\n<li>code.google.com/p/svg-android-2/</li>\n<li>Detailed article about use NDK:</li>\n<li>horribileru.blogspot.ru/2011/10/android-imageview-svg.html</li>\n<li>And some links to dead projects at different forums.</li>\n</ul>\n<h4 id=\"SVG可用编辑器\"><a href=\"#SVG可用编辑器\" class=\"headerlink\" title=\"SVG可用编辑器\"></a>SVG可用编辑器</h4><p>Adobe Illustrator 、Inkscape work.</p>\n<h2 id=\"II-SVG-Android：\"><a href=\"#II-SVG-Android：\" class=\"headerlink\" title=\"II. SVG-Android：\"></a>II. SVG-Android：</h2><blockquote>\n<p>GitHub: <a href=\"https://github.com/pents90/svg-android\">pents90/svg-android</a></p>\n</blockquote>\n<p>他们项目通过底层封装的接口方式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">SVG svg = SVGParser.getSVGFromResource(getResources(), R.raw.filename);</div><div class=\"line\">Drawable drawable = svg.createPictureDrawable();</div><div class=\"line\">imageView.setImageDrawable(drawable);</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>缺点:</strong> 只支持 SVG basic 1.1(不支持Inkspace编辑、只支持AdobeIllustrator编辑)</li>\n</ul>\n<h2 id=\"III-SVG-Android-2\"><a href=\"#III-SVG-Android-2\" class=\"headerlink\" title=\"III. SVG-Android-2:\"></a>III. SVG-Android-2:</h2><blockquote>\n<p>URL: <a href=\"https://code.google.com/p/svg-android-2/wiki/Introduction\">svg-android-2</a></p>\n</blockquote>\n<h4 id=\"第一个发现：SVG在包含-阴影的情况下大小会飙升：\"><a href=\"#第一个发现：SVG在包含-阴影的情况下大小会飙升：\" class=\"headerlink\" title=\"第一个发现：SVG在包含 阴影的情况下大小会飙升：\"></a>第一个发现：SVG在包含 阴影的情况下大小会飙升：</h4><p><img src=\"/img/svg-k-1.png\" alt=\"icon 1\"></p>\n<p>izorbrazhenija with a shade and without: 118 KB vs 1 KB</p>\n<ul>\n<li><strong>解决方法：</strong> 删除对应的阴影</li>\n</ul>\n<h4 id=\"第二个发现：显示梯度颜色，不支持！\"><a href=\"#第二个发现：显示梯度颜色，不支持！\" class=\"headerlink\" title=\"第二个发现：显示梯度颜色，不支持！\"></a>第二个发现：显示梯度颜色，不支持！</h4><p>The problem with gradients has dared removal of superfluous tags from svg (it is described further in article). But basically, and with it it would be possible to live and in our simple images to replace a gradient with homogeneous pouring, if not other nuance — considerable load time of images.</p>\n<ul>\n<li><strong>解决方法：</strong> 用简单的图片代替</li>\n<li><strong>后文(第三个发现)提到解决方法：</strong> After we have got rid of the given links, having edited code SVG in some images, the gradient began to be displayed correctly.</li>\n</ul>\n<p><img src=\"/img/svg-k-2.png\" alt=\"icon 2\"></p>\n<p> at the left — the black sky in the form of a gradient, on the right — a correct picture.</p>\n<h4 id=\"第三个发现：加载时间\"><a href=\"#第三个发现：加载时间\" class=\"headerlink\" title=\"第三个发现：加载时间\"></a>第三个发现：加载时间</h4><ul>\n<li><strong>根源：</strong> 为什么SVG-Android-2这么耗时，</li>\n<li><strong>原因：</strong> SVGParser 解析Image XML file ，解析了两次，第一次 为第二次解析收集多余的属性。多余信息是：</li>\n</ul>\n<blockquote>\n<p>that the most interesting, — is analyzed only attribute xlink:href which is a semblance of hyperlinks in the document. In our problem images just there were such links, and they conducted anywhere.</p>\n</blockquote>\n<ul>\n<li><strong>成果：</strong> 耗时，加载35个SVG的图片(PNG 500px*500px)：从原8s 减少到 1.8-2s。</li>\n</ul>\n<h4 id=\"第四个发现：透明与颜色适配器\"><a href=\"#第四个发现：透明与颜色适配器\" class=\"headerlink\" title=\"第四个发现：透明与颜色适配器\"></a>第四个发现：透明与颜色适配器</h4><ul>\n<li><strong>原因：</strong> 库不是加载 典型的bitmapDrawable与pictureDrawable,并且源码中的setColorFilter、setAlpha方法都是空的：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setColorFilter</span><span class=\"params\">(ColorFilter colorFilter)</span> </span>&#123;&#125;</div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAlpha</span><span class=\"params\">(<span class=\"keyword\">int</span> alpha)</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>成果：</strong> 在SVGHandler中发现一个Paint类型的fillPaint组件，如果能够在加载元素之前 创建colorFilter即可，略微调整SVGHandler加载SVG的代码：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setFilterColor</span><span class=\"params\">(<span class=\"keyword\">int</span> filterColor)</span> </span>&#123;</div><div class=\"line\">      fillPaint.setColorFilter(<span class=\"keyword\">new</span> PorterDuffColorFilter(filterColor, Mode.MULTIPLY));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>接口调整为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SVG svg = SVGParser.getSVGFromResource(getResources(), rawSvgId, filterColor);</div></pre></td></tr></table></figure>\n<p>因此我们能够在多张图片上通过引用一张图片使用不同的阴影颜色（As a result we could receive some images of different shades from one picture.）</p>\n<p>对于透明度，建议并不适用setAlpha去实现（实际上是可以的通过fillPaint）:</p>\n<blockquote>\n<p>Also it is possible to establish and Alpha for fillPaint, but in games this property is required in the dynamic form (have pressed an element — has become translucent), and podgruzhat each time the new image is inconvenient. Therefore this effect have replaced with scaling (have pressed — the element has decreased).</p>\n</blockquote>\n<h4 id=\"第五个发现：异常处理：\"><a href=\"#第五个发现：异常处理：\" class=\"headerlink\" title=\"第五个发现：异常处理：\"></a>第五个发现：异常处理：</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">java.lang.UnsupportedOperationException</div><div class=\"line\">    at android.view.GLES20Canvas.drawPicture(GLES20Canvas.java:<span class=\"number\">895</span>)</div><div class=\"line\">    at android.graphics.drawable.PictureDrawable.draw(PictureDrawable.java:<span class=\"number\">73</span>)</div></pre></td></tr></table></figure>\n<p>低版本不支持gpu(api &lt; 11)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setSoftwareLayerType</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">       view.setLayerType(View.LAYER_TYPE_SOFTWARE, <span class=\"keyword\">null</span>);</div><div class=\"line\">     &#125; <span class=\"keyword\">catch</span> (NoSuchMethodError e) &#123;</div><div class=\"line\">         <span class=\"comment\">//Do nothing - this happens on API &lt; 11</span></div><div class=\"line\">     &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"其使用SVG的项目：\"><a href=\"#其使用SVG的项目：\" class=\"headerlink\" title=\"其使用SVG的项目：\"></a>其使用SVG的项目：</h4><p><a href=\"http://play.google.com/store/apps/details?id=com.whisperarts.kids.forms\">http://play.google.com/store/apps/details?id=com.whisperarts.kids.forms</a></p>\n<blockquote>\n<p>本文总结自：<a href=\"http://sysmagazine.com/posts/166093/\">http://sysmagazine.com/posts/166093/</a></p>\n</blockquote>\n<hr>\n<ul>\n<li>文章创建时间: 2014-11-08，<a href=\"https://github.com/Jacksgong/Blog/commits/master/source/_posts/SVG-Android%E5%BA%94%E7%94%A8%E6%8E%A2%E7%A9%B6%E4%B9%8B%E8%B7%AF.md\">本文迭代日志</a>。</li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"SVG矢量预研期总结","date":"2015-02-04T00:35:03.000Z","_content":"\n- 目前的现状：\n\n\tSVG能够在大小上、画质上对Apps进行优化，但是在解析效率上以及对各种图片的支持上是需要接下来持续优化的。\n\n<!--more-->\n- SVG代码特征：\n\n\t目前已有的几个库中，Android-SVG这个库支持的元素、属性最多，但是在效率上却不是最快的（大约90%的时间消耗在了解析SVG文件上），而虽然SVG-Android-JNI这个库在支持方面略有不足，如不支持阴影、不支持渐变，甚至很少的常见元素都不被支持，但是在效率方面却远领先于其他库，也是最接近RESOURCE库的，因此预计作为后期对SVG库开发的基础或参考。\n\n\t目前已有库的总体运行有两个步骤：（1）解析、（2）渲染\n\n- 对Apps的影响\n\n\t(1) 提高清晰度，在所有屏幕分辨率上都能完美显示。\n\n\t(2) 安装包在大小上能够得到一定的缩减，主要来源于SVG XML格式的压缩\n\n\t(3) 初步评估在性能上，总体体验上可接受，但是可能在性能上存在潜在的风险，如一些过于复杂的图片加载时间过长可能会造成体验上的损失，需要在实施时考虑解决方案进行风险规避，可以考虑对加载时间进行监控\n\n- 改进优化的空间：\n\n\t对于支持来说，是后期一个持续加入的过程，对于效率我们有下面一些考量：\n\n\t(1) 多中间格式的支持，SVG文件格式为XML，而对XML的解析效率其实是解析耗时的一个瓶颈，我们可以考虑直接支持更多更高效序列化、反序列化的中间格式的解析。\n\n\t(2) 目前Android-SVG库，在渲染方面表现出色，可以考虑，在解析部分借鉴SVG-Android-JNI的解析，而在渲染上对Android-SVG进行借鉴\n\n\t(3) 考虑实现一个体积更小、便于使用、同时不损失开发效率的库和调用框架，这点对于我们同样重要。\n\n 经过前期对SVG的预研，矢量图在对任意屏幕的完美支持正是我们所需要的，同时SVG资源文件在打包过程中，经过压缩使得资源文件大小上能够得到优化，，而目前耗时上，大约在RESOURCE加载资源图片的3〜8倍之间不等。经过初步评估，资源图片（通常在100x100左右）加载时间大多在2~4毫秒，SVG的加载预计将在一个大体可接受的范围（也就是实际体验不会感知到区别）。最后目前Parser＋Render的解析方式还存在一定的优化空间，相信可以使SVG的效率得到进一步提升。\n\n总的来说，好多于坏，值得研究与引入。\n\n\n\n\n# 详细过程\n\n## 1 主要考量\n- 可行性\n- TTF/SVG选择\n- 与现存Android.getDrawable对比\n- 预计对Apps的影响\n\n## 2 可行性\n其实在网页重构等领域已经被大量的使用，在终端上一般图片实现矢量量化的其实并不多。但就目前Android端分辨率越来越丰富，分辨率越来越高来说，这是一个不错的方向。\n\n目前终端上实现矢量图的表达载体有`TTF`与`SVG`，两者在终端上的应用，在业界已经有了一定的基础，并且对于美工来说都有办法实现让图片转为对应载体的方法，因此可以作为选择对象。\n\n## 3 TTF/SVG选择\n### 3.1 TTF的淘汰\n对于TTF而言其实Android自身就是支持的，只是我们需要将TTF转换为对应的Drawable，作为Drawable来使用，但是这其实也不是难点，因为业界已经有不少开源的TTF转为Drawable的库可供参考（如我们做比较的时候选用的iconfont），并且效率方面与Resource.getDrawable相当，甚至更快。\n\n但是相比SVG而言TTF只支持单一颜色（其实在网页端已经有人通过z轴绝对坐标叠加的方法实现(http://css-tricks.com/stackicons-icon-fonts/)，但是考虑到周期、效率等因素没有再做深究，可做学习），并且对于美工而言，编辑起来没有SVG方便。因此最终决定以SVG的方向进行研究。\n### 3.2 SVG现状\n- 同所有矢量图一样，在所有大小分辨率屏幕上都能完美呈现图片。\n- Android端一张图片只需要一个SVG文件即可\n- 对于SVG而言修改透明度等可以对一张SVG进行复用（如一般的点击效果其实只是颜色的改变）\n- SVG文件大小与图片尺寸无关只与图片复杂度有关\n- 目前已经有了很多开源SVG解析、渲染库可供学习、借鉴\n- 对于美工而言SVG有很多成熟的编辑软件(如:Sketch、Illustrator、Inkscape work等)\n- 相比TTF，SVG理论上可以呈现任意复杂度图片\n- 目前海外的部分Android应用已经开始使用SVG\n\n### 3.3 参与研究预言SVG库\n库名称 | 地址 | 补充说明 | 支持表现 | Licenses\n-|-| - |\nAndroid-SVG | https://code.google.com/p/androidsvg/ | 代码结构清晰，支持元素较多，速度中，纯Java实现 | 一般图片支持良好，阴影不支持、渐变支持 | Apache License 2.0\nSVG-Android-2 | https://code.google.com/p/svg-android-2/ | 速度慢，纯Java实现 |一般图片支持不好，阴影不支持，渐变不支持 | Apache License 2.0\nSVG-Android-JNI | https://code.launchpad.net/~pltxtra/libsvg-android/main | 速度快，C++实现 | 一般图片支持一般，阴影不支持、渐变不支持 | Simplified BSD Licence, GNU GPL v3, GNU LGPL v2.1, GNU LGPL v3, MIT / X / Expat Licence\nSVG-Android-AGG | http://www.antigrain.com/svg/index.html | 速度一般，C++实现，使用了AGG主要是让SVG更平滑 | 一般图片支持一般，阴影不支持、渐变不支持 | GNU GPL v3\n\n**TIPS: 目前这些库的运行都可拆解为：解析SVG xml文件->目标对象->渲染->Drawable/Picture/Bitmap**\n\n## 4 与现存Android.getDrawable对比\n### 4.1 效率\n对于效率，我们经过了比较多的对比来呈现，并且预演几个预计参考库的耗时点。\n\n#### 结论\n\n**TIPS: 目前来说在96px*96px这个级别的图片上，考虑进行参考开发的库解析，渲染的耗时是目前Android.getDrawable的3~8倍.但是在如480px*480px并且简单的大图片上，我们的解析，渲染的耗时小于等于Android.getDrawable的耗时**\n\n![](/img/svg-s-1.png)\n\n![](/img/svg-s-2.png)\n\n#### 对比数据细节\n\n**Tips: 我们举其中几组数据作为说明**\n\n##### (1) 朋友圈(96px*96px)图标:\n\n![](/img/svg-s-sns.png)\n\n###### 数据\n\n库名称 | 平均值 | 最大值 | 最小值 | 变异系数\n-|-|-|-|-|\nSVG-Android | 68.8 | 89 | 44 | 0.2755\nSVG-Android-2 | 103.9 | 156 | 71 | 0.2897\nSVG-Android-JNI | 14.2 | 29 | 5 | 0.4633\nResource.getDrawable | 2.5 | 4 | 2 | 0.2828\n\n![](/img/svg-s-line-1.png)\n\n##### (2) 手机(480px*480px)图标:\n\n![](/img/svg-s-phone.png)\n\n\n###### 数据\n\n库名称 | 平均值 | 最大值 | 最小值 | 变异系数\n-|-|-|-|-|\nSVG-Android | 55.8 | 68 | 35 | 0.2310\nSVG-Android-2 | 55.5 | 63 | 44 | 0.1089\nSVG-Android-JNI | 15.2 | 25 | 9 | 0.3205\nResource.getDrawable | 36.3 | 55 | 23 | 0.2742\n\n![](/img/svg-s-line-2.png)\n\n##### （3）多图比较(96px*96px)图标：\n\n![](/img/svg-s-call.png)\n\n![](/img/svg-s-nearby.png)\n\n![](/img/svg-s-qq.png)\n\n![](/img/svg-s-scan.png)\n\n![](/img/svg-s-shake.png)\n\n![](/img/svg-s-sns.png)\n\n\n###### 数据\n\n库名称 | 平均值 | 最大值 | 最小值 | 变异系数\n-|-|-|-|-|\nSVG-Android | 196.7 | 246 | 162 | 0.1274\nSVG-Android-2 | 362.9 | 425 | 319 | 0.0811\nSVG-Android-JNI | 33.4 | 51 | 17 | 0.3296\nResource.getDrawable | 12.3 | 22 | 6 | 0.4757\n\n![](/img/svg-s-line-3.png)\n\n### 4.2 文件大小\n\n#### SVG的大小相比栅格图像特性主要体现在以下几点：\n- SVG文件是xml格式，在打包时支持压缩，而栅格图像在apk打包时已经不能再被压缩。\n- SVG文件只需要一份，就可以适配所有屏幕，并且可以在代码中修改其特性就可以得到更多复用，而栅格图像为了保证一定程度上的清晰度，需要分别提供多张不同倍数的图片。\n- SVG文件大小只和图片的复杂程度有关与图片尺寸大小无关（正是这个原因，在一些复杂的小图上才出现栅格图像更小的情况，但往往相差不大）。\n\n#### 取一些Apps常用大小与复杂度切图对比（⚠这里只是单张图片对比）：\nNAME | PNG | SVG | PNG SIZE | 图片元素个数 | 图片元素深度\n-|-|-| - |-|\ncell phone | 2kb | 2kb | 96px*96px | 7 |3\nnear friend | 2kb | 3kb | 96px*96px | 9 | 4\nqq | 2kb | 2kb| 96px*96px | 7 |3\nscaner | 2kb | 3kb| 96px*96px | 7 | 3\nshake | 3kb | 4kb| 96px*96px | 14 | 4\nsns | 5kb | 3kb| 96px*96px | 15 | 4\nmobile | 8kb|2kb| 480px*480px | 9 | 3\n\n### 4.3 清晰程度\nSVG完胜栅格化图片形式\n\n## 5 预计对Apps的影响\n### 5.1 前期预计适用范围\n预计前期不支持部分如下：\n\n不适用项目 | 支持情况 | 原因\n-|-|-|\n.9图|暂时不做支持 | 暂时SVG没有对.9图进行支持，如果需要后期会引入自定义规则\n.jpg图片|暂时不做支持|由于在Apps中看到的.jpg图片大多是图片复杂，并且模拟现实场景的图片\n.gif图片|暂时不做支持|由于在Apps中看到.gif都是兔斯基带动画帧率的图片\n一部分模拟实物的图片|暂时不做支持|由于构图较为复杂，对于美工来说要把实物图转换为一条一条线的SVG图片工作量较大\n带有阴影的图片|暂时不做支持|目前Apps中采用阴影的图片不多，并且根据@koalaliang提供Apps以后会减少对阴影的使用（目前以扁平化作为基础的一方面）\n\n其余部分为适用范围。\n\n### 5.2 优点\n\n（1） 目前已经出现2k屏幕，如果需要让Apps在这样屏幕的手机上很好的显示，就需要xxxhdpi，用更大倍数的栅格图像来填充这个需求，未来可能还会有更大分辨率的手机，因此在这个角度考虑，SVG的引入是十分必要的。\n\n（2） 参考某App中（解压缩RB6.1的apk）所有的图片情况如下:\n\n项目 | 个数 | 所占大小\n-|-|-|\n所有图片 | 2700 | 7.7MB\n.9图 | 721 | 1.3MB\n.jpg | 45 | 856kb\n.gif | 16 | 703kb\n预计第一期不支持的剩余png图片| 666 | 2.2MB\n\n目前而言，我们预计第一阶段，不对.9图支持，以及部分较复杂图片支持（如包含阴影、包含模拟实物的图片），因为可进行替换成SVG的图片情况如下：\n\n 个数 | 所占大小\n -|-|\n 2700-721-45-16-666 = 1252 | 7.7MB - 1.3MB - 856kb - 703kb - 2.2MB = 2.68MB\n\n 大小可压缩比较:\n 虽然从4.2文件大小对比来看，其实在App大多数图片都是小图的情况来看，对于单张图片从栅格图像转为SVG而言并没有多少的压缩，二者是差不多大的。\n\n 对于jpg、png、gif等栅格图像而言，在打包应用时是得不到压缩的：\n\n![](/img/svg-s-file-1.png)\n\n 但是对于xml的压缩，在打包时，根据xml大小可以压缩2/3，甚至更多的大小：\n\n![](/img/svg-s-file-2.png)\n\n 一般的xml压缩:\n\n![](/img/svg-s-file-3.png)\n\n（3） App在任意屏幕下都得到完美适配（对后期需求需要做到全局大小调整也可以得到很好的助攻）\n### 5.3 缺点\n（1） 就目前而言，Apps中大多数的资源图片都是96px*96px甚至更小的小图，在资源加载速度方面预计会比目前慢3~8倍。\n\n（2） 对于后期维护以及使用来说，无论如何SVG都是引入新的框架，都需要大家耗费时间去熟悉以及使用。\n\n（3） 目前的库来说都没有对SVG所有元素得到支持，一些甚至是只支持了少数很常见的元素，都需要后期去拓展，比如预计作为开发参考的JNI库，虽然效率很高，但是由于不支持`linearGradient`与`radialGradient`元素，因此还不支持渐变。\n\n\n\n\n## 拓展链接\n1. [SVG-Android库 深入浅出 解析篇](http://blog.dreamtobe.cn/2014/12/10/SVG-Android库-深入浅出-解析篇/)\n2. [SVG Android应用探究之路 【一】](http://blog.dreamtobe.cn/2014/11/08/SVG-Android应用探究之路/)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/SVG矢量预研期总结.md","raw":"title: SVG矢量预研期总结\ndate: 2015-02-04 08:35:03\npermalink: 2015/02/04/SVG矢量预研期总结\ntags:\n- svg\n- 总结\n- Android\n\n---\n\n- 目前的现状：\n\n\tSVG能够在大小上、画质上对Apps进行优化，但是在解析效率上以及对各种图片的支持上是需要接下来持续优化的。\n\n<!--more-->\n- SVG代码特征：\n\n\t目前已有的几个库中，Android-SVG这个库支持的元素、属性最多，但是在效率上却不是最快的（大约90%的时间消耗在了解析SVG文件上），而虽然SVG-Android-JNI这个库在支持方面略有不足，如不支持阴影、不支持渐变，甚至很少的常见元素都不被支持，但是在效率方面却远领先于其他库，也是最接近RESOURCE库的，因此预计作为后期对SVG库开发的基础或参考。\n\n\t目前已有库的总体运行有两个步骤：（1）解析、（2）渲染\n\n- 对Apps的影响\n\n\t(1) 提高清晰度，在所有屏幕分辨率上都能完美显示。\n\n\t(2) 安装包在大小上能够得到一定的缩减，主要来源于SVG XML格式的压缩\n\n\t(3) 初步评估在性能上，总体体验上可接受，但是可能在性能上存在潜在的风险，如一些过于复杂的图片加载时间过长可能会造成体验上的损失，需要在实施时考虑解决方案进行风险规避，可以考虑对加载时间进行监控\n\n- 改进优化的空间：\n\n\t对于支持来说，是后期一个持续加入的过程，对于效率我们有下面一些考量：\n\n\t(1) 多中间格式的支持，SVG文件格式为XML，而对XML的解析效率其实是解析耗时的一个瓶颈，我们可以考虑直接支持更多更高效序列化、反序列化的中间格式的解析。\n\n\t(2) 目前Android-SVG库，在渲染方面表现出色，可以考虑，在解析部分借鉴SVG-Android-JNI的解析，而在渲染上对Android-SVG进行借鉴\n\n\t(3) 考虑实现一个体积更小、便于使用、同时不损失开发效率的库和调用框架，这点对于我们同样重要。\n\n 经过前期对SVG的预研，矢量图在对任意屏幕的完美支持正是我们所需要的，同时SVG资源文件在打包过程中，经过压缩使得资源文件大小上能够得到优化，，而目前耗时上，大约在RESOURCE加载资源图片的3〜8倍之间不等。经过初步评估，资源图片（通常在100x100左右）加载时间大多在2~4毫秒，SVG的加载预计将在一个大体可接受的范围（也就是实际体验不会感知到区别）。最后目前Parser＋Render的解析方式还存在一定的优化空间，相信可以使SVG的效率得到进一步提升。\n\n总的来说，好多于坏，值得研究与引入。\n\n\n\n\n# 详细过程\n\n## 1 主要考量\n- 可行性\n- TTF/SVG选择\n- 与现存Android.getDrawable对比\n- 预计对Apps的影响\n\n## 2 可行性\n其实在网页重构等领域已经被大量的使用，在终端上一般图片实现矢量量化的其实并不多。但就目前Android端分辨率越来越丰富，分辨率越来越高来说，这是一个不错的方向。\n\n目前终端上实现矢量图的表达载体有`TTF`与`SVG`，两者在终端上的应用，在业界已经有了一定的基础，并且对于美工来说都有办法实现让图片转为对应载体的方法，因此可以作为选择对象。\n\n## 3 TTF/SVG选择\n### 3.1 TTF的淘汰\n对于TTF而言其实Android自身就是支持的，只是我们需要将TTF转换为对应的Drawable，作为Drawable来使用，但是这其实也不是难点，因为业界已经有不少开源的TTF转为Drawable的库可供参考（如我们做比较的时候选用的iconfont），并且效率方面与Resource.getDrawable相当，甚至更快。\n\n但是相比SVG而言TTF只支持单一颜色（其实在网页端已经有人通过z轴绝对坐标叠加的方法实现(http://css-tricks.com/stackicons-icon-fonts/)，但是考虑到周期、效率等因素没有再做深究，可做学习），并且对于美工而言，编辑起来没有SVG方便。因此最终决定以SVG的方向进行研究。\n### 3.2 SVG现状\n- 同所有矢量图一样，在所有大小分辨率屏幕上都能完美呈现图片。\n- Android端一张图片只需要一个SVG文件即可\n- 对于SVG而言修改透明度等可以对一张SVG进行复用（如一般的点击效果其实只是颜色的改变）\n- SVG文件大小与图片尺寸无关只与图片复杂度有关\n- 目前已经有了很多开源SVG解析、渲染库可供学习、借鉴\n- 对于美工而言SVG有很多成熟的编辑软件(如:Sketch、Illustrator、Inkscape work等)\n- 相比TTF，SVG理论上可以呈现任意复杂度图片\n- 目前海外的部分Android应用已经开始使用SVG\n\n### 3.3 参与研究预言SVG库\n库名称 | 地址 | 补充说明 | 支持表现 | Licenses\n-|-| - |\nAndroid-SVG | https://code.google.com/p/androidsvg/ | 代码结构清晰，支持元素较多，速度中，纯Java实现 | 一般图片支持良好，阴影不支持、渐变支持 | Apache License 2.0\nSVG-Android-2 | https://code.google.com/p/svg-android-2/ | 速度慢，纯Java实现 |一般图片支持不好，阴影不支持，渐变不支持 | Apache License 2.0\nSVG-Android-JNI | https://code.launchpad.net/~pltxtra/libsvg-android/main | 速度快，C++实现 | 一般图片支持一般，阴影不支持、渐变不支持 | Simplified BSD Licence, GNU GPL v3, GNU LGPL v2.1, GNU LGPL v3, MIT / X / Expat Licence\nSVG-Android-AGG | http://www.antigrain.com/svg/index.html | 速度一般，C++实现，使用了AGG主要是让SVG更平滑 | 一般图片支持一般，阴影不支持、渐变不支持 | GNU GPL v3\n\n**TIPS: 目前这些库的运行都可拆解为：解析SVG xml文件->目标对象->渲染->Drawable/Picture/Bitmap**\n\n## 4 与现存Android.getDrawable对比\n### 4.1 效率\n对于效率，我们经过了比较多的对比来呈现，并且预演几个预计参考库的耗时点。\n\n#### 结论\n\n**TIPS: 目前来说在96px*96px这个级别的图片上，考虑进行参考开发的库解析，渲染的耗时是目前Android.getDrawable的3~8倍.但是在如480px*480px并且简单的大图片上，我们的解析，渲染的耗时小于等于Android.getDrawable的耗时**\n\n![](/img/svg-s-1.png)\n\n![](/img/svg-s-2.png)\n\n#### 对比数据细节\n\n**Tips: 我们举其中几组数据作为说明**\n\n##### (1) 朋友圈(96px*96px)图标:\n\n![](/img/svg-s-sns.png)\n\n###### 数据\n\n库名称 | 平均值 | 最大值 | 最小值 | 变异系数\n-|-|-|-|-|\nSVG-Android | 68.8 | 89 | 44 | 0.2755\nSVG-Android-2 | 103.9 | 156 | 71 | 0.2897\nSVG-Android-JNI | 14.2 | 29 | 5 | 0.4633\nResource.getDrawable | 2.5 | 4 | 2 | 0.2828\n\n![](/img/svg-s-line-1.png)\n\n##### (2) 手机(480px*480px)图标:\n\n![](/img/svg-s-phone.png)\n\n\n###### 数据\n\n库名称 | 平均值 | 最大值 | 最小值 | 变异系数\n-|-|-|-|-|\nSVG-Android | 55.8 | 68 | 35 | 0.2310\nSVG-Android-2 | 55.5 | 63 | 44 | 0.1089\nSVG-Android-JNI | 15.2 | 25 | 9 | 0.3205\nResource.getDrawable | 36.3 | 55 | 23 | 0.2742\n\n![](/img/svg-s-line-2.png)\n\n##### （3）多图比较(96px*96px)图标：\n\n![](/img/svg-s-call.png)\n\n![](/img/svg-s-nearby.png)\n\n![](/img/svg-s-qq.png)\n\n![](/img/svg-s-scan.png)\n\n![](/img/svg-s-shake.png)\n\n![](/img/svg-s-sns.png)\n\n\n###### 数据\n\n库名称 | 平均值 | 最大值 | 最小值 | 变异系数\n-|-|-|-|-|\nSVG-Android | 196.7 | 246 | 162 | 0.1274\nSVG-Android-2 | 362.9 | 425 | 319 | 0.0811\nSVG-Android-JNI | 33.4 | 51 | 17 | 0.3296\nResource.getDrawable | 12.3 | 22 | 6 | 0.4757\n\n![](/img/svg-s-line-3.png)\n\n### 4.2 文件大小\n\n#### SVG的大小相比栅格图像特性主要体现在以下几点：\n- SVG文件是xml格式，在打包时支持压缩，而栅格图像在apk打包时已经不能再被压缩。\n- SVG文件只需要一份，就可以适配所有屏幕，并且可以在代码中修改其特性就可以得到更多复用，而栅格图像为了保证一定程度上的清晰度，需要分别提供多张不同倍数的图片。\n- SVG文件大小只和图片的复杂程度有关与图片尺寸大小无关（正是这个原因，在一些复杂的小图上才出现栅格图像更小的情况，但往往相差不大）。\n\n#### 取一些Apps常用大小与复杂度切图对比（⚠这里只是单张图片对比）：\nNAME | PNG | SVG | PNG SIZE | 图片元素个数 | 图片元素深度\n-|-|-| - |-|\ncell phone | 2kb | 2kb | 96px*96px | 7 |3\nnear friend | 2kb | 3kb | 96px*96px | 9 | 4\nqq | 2kb | 2kb| 96px*96px | 7 |3\nscaner | 2kb | 3kb| 96px*96px | 7 | 3\nshake | 3kb | 4kb| 96px*96px | 14 | 4\nsns | 5kb | 3kb| 96px*96px | 15 | 4\nmobile | 8kb|2kb| 480px*480px | 9 | 3\n\n### 4.3 清晰程度\nSVG完胜栅格化图片形式\n\n## 5 预计对Apps的影响\n### 5.1 前期预计适用范围\n预计前期不支持部分如下：\n\n不适用项目 | 支持情况 | 原因\n-|-|-|\n.9图|暂时不做支持 | 暂时SVG没有对.9图进行支持，如果需要后期会引入自定义规则\n.jpg图片|暂时不做支持|由于在Apps中看到的.jpg图片大多是图片复杂，并且模拟现实场景的图片\n.gif图片|暂时不做支持|由于在Apps中看到.gif都是兔斯基带动画帧率的图片\n一部分模拟实物的图片|暂时不做支持|由于构图较为复杂，对于美工来说要把实物图转换为一条一条线的SVG图片工作量较大\n带有阴影的图片|暂时不做支持|目前Apps中采用阴影的图片不多，并且根据@koalaliang提供Apps以后会减少对阴影的使用（目前以扁平化作为基础的一方面）\n\n其余部分为适用范围。\n\n### 5.2 优点\n\n（1） 目前已经出现2k屏幕，如果需要让Apps在这样屏幕的手机上很好的显示，就需要xxxhdpi，用更大倍数的栅格图像来填充这个需求，未来可能还会有更大分辨率的手机，因此在这个角度考虑，SVG的引入是十分必要的。\n\n（2） 参考某App中（解压缩RB6.1的apk）所有的图片情况如下:\n\n项目 | 个数 | 所占大小\n-|-|-|\n所有图片 | 2700 | 7.7MB\n.9图 | 721 | 1.3MB\n.jpg | 45 | 856kb\n.gif | 16 | 703kb\n预计第一期不支持的剩余png图片| 666 | 2.2MB\n\n目前而言，我们预计第一阶段，不对.9图支持，以及部分较复杂图片支持（如包含阴影、包含模拟实物的图片），因为可进行替换成SVG的图片情况如下：\n\n 个数 | 所占大小\n -|-|\n 2700-721-45-16-666 = 1252 | 7.7MB - 1.3MB - 856kb - 703kb - 2.2MB = 2.68MB\n\n 大小可压缩比较:\n 虽然从4.2文件大小对比来看，其实在App大多数图片都是小图的情况来看，对于单张图片从栅格图像转为SVG而言并没有多少的压缩，二者是差不多大的。\n\n 对于jpg、png、gif等栅格图像而言，在打包应用时是得不到压缩的：\n\n![](/img/svg-s-file-1.png)\n\n 但是对于xml的压缩，在打包时，根据xml大小可以压缩2/3，甚至更多的大小：\n\n![](/img/svg-s-file-2.png)\n\n 一般的xml压缩:\n\n![](/img/svg-s-file-3.png)\n\n（3） App在任意屏幕下都得到完美适配（对后期需求需要做到全局大小调整也可以得到很好的助攻）\n### 5.3 缺点\n（1） 就目前而言，Apps中大多数的资源图片都是96px*96px甚至更小的小图，在资源加载速度方面预计会比目前慢3~8倍。\n\n（2） 对于后期维护以及使用来说，无论如何SVG都是引入新的框架，都需要大家耗费时间去熟悉以及使用。\n\n（3） 目前的库来说都没有对SVG所有元素得到支持，一些甚至是只支持了少数很常见的元素，都需要后期去拓展，比如预计作为开发参考的JNI库，虽然效率很高，但是由于不支持`linearGradient`与`radialGradient`元素，因此还不支持渐变。\n\n\n\n\n## 拓展链接\n1. [SVG-Android库 深入浅出 解析篇](http://blog.dreamtobe.cn/2014/12/10/SVG-Android库-深入浅出-解析篇/)\n2. [SVG Android应用探究之路 【一】](http://blog.dreamtobe.cn/2014/11/08/SVG-Android应用探究之路/)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2015/02/04/SVG矢量预研期总结","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66i2001495but9y8s52k","content":"<ul>\n<li><p>目前的现状：</p>\n<p>  SVG能够在大小上、画质上对Apps进行优化，但是在解析效率上以及对各种图片的支持上是需要接下来持续优化的。</p>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><p>SVG代码特征：</p>\n<p>  目前已有的几个库中，Android-SVG这个库支持的元素、属性最多，但是在效率上却不是最快的（大约90%的时间消耗在了解析SVG文件上），而虽然SVG-Android-JNI这个库在支持方面略有不足，如不支持阴影、不支持渐变，甚至很少的常见元素都不被支持，但是在效率方面却远领先于其他库，也是最接近RESOURCE库的，因此预计作为后期对SVG库开发的基础或参考。</p>\n<p>  目前已有库的总体运行有两个步骤：（1）解析、（2）渲染</p>\n</li>\n<li><p>对Apps的影响</p>\n<p>  (1) 提高清晰度，在所有屏幕分辨率上都能完美显示。</p>\n<p>  (2) 安装包在大小上能够得到一定的缩减，主要来源于SVG XML格式的压缩</p>\n<p>  (3) 初步评估在性能上，总体体验上可接受，但是可能在性能上存在潜在的风险，如一些过于复杂的图片加载时间过长可能会造成体验上的损失，需要在实施时考虑解决方案进行风险规避，可以考虑对加载时间进行监控</p>\n</li>\n<li><p>改进优化的空间：</p>\n<p>  对于支持来说，是后期一个持续加入的过程，对于效率我们有下面一些考量：</p>\n<p>  (1) 多中间格式的支持，SVG文件格式为XML，而对XML的解析效率其实是解析耗时的一个瓶颈，我们可以考虑直接支持更多更高效序列化、反序列化的中间格式的解析。</p>\n<p>  (2) 目前Android-SVG库，在渲染方面表现出色，可以考虑，在解析部分借鉴SVG-Android-JNI的解析，而在渲染上对Android-SVG进行借鉴</p>\n<p>  (3) 考虑实现一个体积更小、便于使用、同时不损失开发效率的库和调用框架，这点对于我们同样重要。</p>\n<p>经过前期对SVG的预研，矢量图在对任意屏幕的完美支持正是我们所需要的，同时SVG资源文件在打包过程中，经过压缩使得资源文件大小上能够得到优化，，而目前耗时上，大约在RESOURCE加载资源图片的3〜8倍之间不等。经过初步评估，资源图片（通常在100x100左右）加载时间大多在2~4毫秒，SVG的加载预计将在一个大体可接受的范围（也就是实际体验不会感知到区别）。最后目前Parser＋Render的解析方式还存在一定的优化空间，相信可以使SVG的效率得到进一步提升。</p>\n</li>\n</ul>\n<p>总的来说，好多于坏，值得研究与引入。</p>\n<h1 id=\"详细过程\"><a href=\"#详细过程\" class=\"headerlink\" title=\"详细过程\"></a>详细过程</h1><h2 id=\"1-主要考量\"><a href=\"#1-主要考量\" class=\"headerlink\" title=\"1 主要考量\"></a>1 主要考量</h2><ul>\n<li>可行性</li>\n<li>TTF/SVG选择</li>\n<li>与现存Android.getDrawable对比</li>\n<li>预计对Apps的影响</li>\n</ul>\n<h2 id=\"2-可行性\"><a href=\"#2-可行性\" class=\"headerlink\" title=\"2 可行性\"></a>2 可行性</h2><p>其实在网页重构等领域已经被大量的使用，在终端上一般图片实现矢量量化的其实并不多。但就目前Android端分辨率越来越丰富，分辨率越来越高来说，这是一个不错的方向。</p>\n<p>目前终端上实现矢量图的表达载体有<code>TTF</code>与<code>SVG</code>，两者在终端上的应用，在业界已经有了一定的基础，并且对于美工来说都有办法实现让图片转为对应载体的方法，因此可以作为选择对象。</p>\n<h2 id=\"3-TTF-SVG选择\"><a href=\"#3-TTF-SVG选择\" class=\"headerlink\" title=\"3 TTF/SVG选择\"></a>3 TTF/SVG选择</h2><h3 id=\"3-1-TTF的淘汰\"><a href=\"#3-1-TTF的淘汰\" class=\"headerlink\" title=\"3.1 TTF的淘汰\"></a>3.1 TTF的淘汰</h3><p>对于TTF而言其实Android自身就是支持的，只是我们需要将TTF转换为对应的Drawable，作为Drawable来使用，但是这其实也不是难点，因为业界已经有不少开源的TTF转为Drawable的库可供参考（如我们做比较的时候选用的iconfont），并且效率方面与Resource.getDrawable相当，甚至更快。</p>\n<p>但是相比SVG而言TTF只支持单一颜色（其实在网页端已经有人通过z轴绝对坐标叠加的方法实现(<a href=\"http://css-tricks.com/stackicons-icon-fonts/)，但是考虑到周期、效率等因素没有再做深究，可做学习），并且对于美工而言，编辑起来没有SVG方便。因此最终决定以SVG的方向进行研究。\" target=\"_blank\" rel=\"external\">http://css-tricks.com/stackicons-icon-fonts/)，但是考虑到周期、效率等因素没有再做深究，可做学习），并且对于美工而言，编辑起来没有SVG方便。因此最终决定以SVG的方向进行研究。</a></p>\n<h3 id=\"3-2-SVG现状\"><a href=\"#3-2-SVG现状\" class=\"headerlink\" title=\"3.2 SVG现状\"></a>3.2 SVG现状</h3><ul>\n<li>同所有矢量图一样，在所有大小分辨率屏幕上都能完美呈现图片。</li>\n<li>Android端一张图片只需要一个SVG文件即可</li>\n<li>对于SVG而言修改透明度等可以对一张SVG进行复用（如一般的点击效果其实只是颜色的改变）</li>\n<li>SVG文件大小与图片尺寸无关只与图片复杂度有关</li>\n<li>目前已经有了很多开源SVG解析、渲染库可供学习、借鉴</li>\n<li>对于美工而言SVG有很多成熟的编辑软件(如:Sketch、Illustrator、Inkscape work等)</li>\n<li>相比TTF，SVG理论上可以呈现任意复杂度图片</li>\n<li>目前海外的部分Android应用已经开始使用SVG</li>\n</ul>\n<h3 id=\"3-3-参与研究预言SVG库\"><a href=\"#3-3-参与研究预言SVG库\" class=\"headerlink\" title=\"3.3 参与研究预言SVG库\"></a>3.3 参与研究预言SVG库</h3><table>\n<thead>\n<tr>\n<th>库名称</th>\n<th>地址</th>\n<th>补充说明</th>\n<th>支持表现</th>\n<th>Licenses</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Android-SVG</td>\n<td><a href=\"https://code.google.com/p/androidsvg/\" target=\"_blank\" rel=\"external\">https://code.google.com/p/androidsvg/</a></td>\n<td>代码结构清晰，支持元素较多，速度中，纯Java实现</td>\n<td>一般图片支持良好，阴影不支持、渐变支持</td>\n<td>Apache License 2.0</td>\n</tr>\n<tr>\n<td>SVG-Android-2</td>\n<td><a href=\"https://code.google.com/p/svg-android-2/\" target=\"_blank\" rel=\"external\">https://code.google.com/p/svg-android-2/</a></td>\n<td>速度慢，纯Java实现</td>\n<td>一般图片支持不好，阴影不支持，渐变不支持</td>\n<td>Apache License 2.0</td>\n</tr>\n<tr>\n<td>SVG-Android-JNI</td>\n<td><a href=\"https://code.launchpad.net/~pltxtra/libsvg-android/main\" target=\"_blank\" rel=\"external\">https://code.launchpad.net/~pltxtra/libsvg-android/main</a></td>\n<td>速度快，C++实现</td>\n<td>一般图片支持一般，阴影不支持、渐变不支持</td>\n<td>Simplified BSD Licence, GNU GPL v3, GNU LGPL v2.1, GNU LGPL v3, MIT / X / Expat Licence</td>\n</tr>\n<tr>\n<td>SVG-Android-AGG</td>\n<td><a href=\"http://www.antigrain.com/svg/index.html\" target=\"_blank\" rel=\"external\">http://www.antigrain.com/svg/index.html</a></td>\n<td>速度一般，C++实现，使用了AGG主要是让SVG更平滑</td>\n<td>一般图片支持一般，阴影不支持、渐变不支持</td>\n<td>GNU GPL v3</td>\n</tr>\n</tbody>\n</table>\n<p><strong>TIPS: 目前这些库的运行都可拆解为：解析SVG xml文件-&gt;目标对象-&gt;渲染-&gt;Drawable/Picture/Bitmap</strong></p>\n<h2 id=\"4-与现存Android-getDrawable对比\"><a href=\"#4-与现存Android-getDrawable对比\" class=\"headerlink\" title=\"4 与现存Android.getDrawable对比\"></a>4 与现存Android.getDrawable对比</h2><h3 id=\"4-1-效率\"><a href=\"#4-1-效率\" class=\"headerlink\" title=\"4.1 效率\"></a>4.1 效率</h3><p>对于效率，我们经过了比较多的对比来呈现，并且预演几个预计参考库的耗时点。</p>\n<h4 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h4><p><strong>TIPS: 目前来说在96px<em>96px这个级别的图片上，考虑进行参考开发的库解析，渲染的耗时是目前Android.getDrawable的3~8倍.但是在如480px</em>480px并且简单的大图片上，我们的解析，渲染的耗时小于等于Android.getDrawable的耗时</strong></p>\n<p><img src=\"/img/svg-s-1.png\" alt=\"\"></p>\n<p><img src=\"/img/svg-s-2.png\" alt=\"\"></p>\n<h4 id=\"对比数据细节\"><a href=\"#对比数据细节\" class=\"headerlink\" title=\"对比数据细节\"></a>对比数据细节</h4><p><strong>Tips: 我们举其中几组数据作为说明</strong></p>\n<h5 id=\"1-朋友圈-96px-96px-图标\"><a href=\"#1-朋友圈-96px-96px-图标\" class=\"headerlink\" title=\"(1) 朋友圈(96px*96px)图标:\"></a>(1) 朋友圈(96px*96px)图标:</h5><p><img src=\"/img/svg-s-sns.png\" alt=\"\"></p>\n<h6 id=\"数据\"><a href=\"#数据\" class=\"headerlink\" title=\"数据\"></a>数据</h6><table>\n<thead>\n<tr>\n<th>库名称</th>\n<th>平均值</th>\n<th>最大值</th>\n<th>最小值</th>\n<th>变异系数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SVG-Android</td>\n<td>68.8</td>\n<td>89</td>\n<td>44</td>\n<td>0.2755</td>\n</tr>\n<tr>\n<td>SVG-Android-2</td>\n<td>103.9</td>\n<td>156</td>\n<td>71</td>\n<td>0.2897</td>\n</tr>\n<tr>\n<td>SVG-Android-JNI</td>\n<td>14.2</td>\n<td>29</td>\n<td>5</td>\n<td>0.4633</td>\n</tr>\n<tr>\n<td>Resource.getDrawable</td>\n<td>2.5</td>\n<td>4</td>\n<td>2</td>\n<td>0.2828</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"/img/svg-s-line-1.png\" alt=\"\"></p>\n<h5 id=\"2-手机-480px-480px-图标\"><a href=\"#2-手机-480px-480px-图标\" class=\"headerlink\" title=\"(2) 手机(480px*480px)图标:\"></a>(2) 手机(480px*480px)图标:</h5><p><img src=\"/img/svg-s-phone.png\" alt=\"\"></p>\n<h6 id=\"数据-1\"><a href=\"#数据-1\" class=\"headerlink\" title=\"数据\"></a>数据</h6><table>\n<thead>\n<tr>\n<th>库名称</th>\n<th>平均值</th>\n<th>最大值</th>\n<th>最小值</th>\n<th>变异系数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SVG-Android</td>\n<td>55.8</td>\n<td>68</td>\n<td>35</td>\n<td>0.2310</td>\n</tr>\n<tr>\n<td>SVG-Android-2</td>\n<td>55.5</td>\n<td>63</td>\n<td>44</td>\n<td>0.1089</td>\n</tr>\n<tr>\n<td>SVG-Android-JNI</td>\n<td>15.2</td>\n<td>25</td>\n<td>9</td>\n<td>0.3205</td>\n</tr>\n<tr>\n<td>Resource.getDrawable</td>\n<td>36.3</td>\n<td>55</td>\n<td>23</td>\n<td>0.2742</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"/img/svg-s-line-2.png\" alt=\"\"></p>\n<h5 id=\"（3）多图比较-96px-96px-图标：\"><a href=\"#（3）多图比较-96px-96px-图标：\" class=\"headerlink\" title=\"（3）多图比较(96px*96px)图标：\"></a>（3）多图比较(96px*96px)图标：</h5><p><img src=\"/img/svg-s-call.png\" alt=\"\"></p>\n<p><img src=\"/img/svg-s-nearby.png\" alt=\"\"></p>\n<p><img src=\"/img/svg-s-qq.png\" alt=\"\"></p>\n<p><img src=\"/img/svg-s-scan.png\" alt=\"\"></p>\n<p><img src=\"/img/svg-s-shake.png\" alt=\"\"></p>\n<p><img src=\"/img/svg-s-sns.png\" alt=\"\"></p>\n<h6 id=\"数据-2\"><a href=\"#数据-2\" class=\"headerlink\" title=\"数据\"></a>数据</h6><table>\n<thead>\n<tr>\n<th>库名称</th>\n<th>平均值</th>\n<th>最大值</th>\n<th>最小值</th>\n<th>变异系数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SVG-Android</td>\n<td>196.7</td>\n<td>246</td>\n<td>162</td>\n<td>0.1274</td>\n</tr>\n<tr>\n<td>SVG-Android-2</td>\n<td>362.9</td>\n<td>425</td>\n<td>319</td>\n<td>0.0811</td>\n</tr>\n<tr>\n<td>SVG-Android-JNI</td>\n<td>33.4</td>\n<td>51</td>\n<td>17</td>\n<td>0.3296</td>\n</tr>\n<tr>\n<td>Resource.getDrawable</td>\n<td>12.3</td>\n<td>22</td>\n<td>6</td>\n<td>0.4757</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"/img/svg-s-line-3.png\" alt=\"\"></p>\n<h3 id=\"4-2-文件大小\"><a href=\"#4-2-文件大小\" class=\"headerlink\" title=\"4.2 文件大小\"></a>4.2 文件大小</h3><h4 id=\"SVG的大小相比栅格图像特性主要体现在以下几点：\"><a href=\"#SVG的大小相比栅格图像特性主要体现在以下几点：\" class=\"headerlink\" title=\"SVG的大小相比栅格图像特性主要体现在以下几点：\"></a>SVG的大小相比栅格图像特性主要体现在以下几点：</h4><ul>\n<li>SVG文件是xml格式，在打包时支持压缩，而栅格图像在apk打包时已经不能再被压缩。</li>\n<li>SVG文件只需要一份，就可以适配所有屏幕，并且可以在代码中修改其特性就可以得到更多复用，而栅格图像为了保证一定程度上的清晰度，需要分别提供多张不同倍数的图片。</li>\n<li>SVG文件大小只和图片的复杂程度有关与图片尺寸大小无关（正是这个原因，在一些复杂的小图上才出现栅格图像更小的情况，但往往相差不大）。</li>\n</ul>\n<h4 id=\"取一些Apps常用大小与复杂度切图对比（⚠这里只是单张图片对比）：\"><a href=\"#取一些Apps常用大小与复杂度切图对比（⚠这里只是单张图片对比）：\" class=\"headerlink\" title=\"取一些Apps常用大小与复杂度切图对比（⚠这里只是单张图片对比）：\"></a>取一些Apps常用大小与复杂度切图对比（⚠这里只是单张图片对比）：</h4><table>\n<thead>\n<tr>\n<th>NAME</th>\n<th>PNG</th>\n<th>SVG</th>\n<th>PNG SIZE</th>\n<th>图片元素个数</th>\n<th>图片元素深度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>cell phone</td>\n<td>2kb</td>\n<td>2kb</td>\n<td>96px*96px</td>\n<td>7</td>\n<td>3</td>\n</tr>\n<tr>\n<td>near friend</td>\n<td>2kb</td>\n<td>3kb</td>\n<td>96px*96px</td>\n<td>9</td>\n<td>4</td>\n</tr>\n<tr>\n<td>qq</td>\n<td>2kb</td>\n<td>2kb</td>\n<td>96px*96px</td>\n<td>7</td>\n<td>3</td>\n</tr>\n<tr>\n<td>scaner</td>\n<td>2kb</td>\n<td>3kb</td>\n<td>96px*96px</td>\n<td>7</td>\n<td>3</td>\n</tr>\n<tr>\n<td>shake</td>\n<td>3kb</td>\n<td>4kb</td>\n<td>96px*96px</td>\n<td>14</td>\n<td>4</td>\n</tr>\n<tr>\n<td>sns</td>\n<td>5kb</td>\n<td>3kb</td>\n<td>96px*96px</td>\n<td>15</td>\n<td>4</td>\n</tr>\n<tr>\n<td>mobile</td>\n<td>8kb</td>\n<td>2kb</td>\n<td>480px*480px</td>\n<td>9</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"4-3-清晰程度\"><a href=\"#4-3-清晰程度\" class=\"headerlink\" title=\"4.3 清晰程度\"></a>4.3 清晰程度</h3><p>SVG完胜栅格化图片形式</p>\n<h2 id=\"5-预计对Apps的影响\"><a href=\"#5-预计对Apps的影响\" class=\"headerlink\" title=\"5 预计对Apps的影响\"></a>5 预计对Apps的影响</h2><h3 id=\"5-1-前期预计适用范围\"><a href=\"#5-1-前期预计适用范围\" class=\"headerlink\" title=\"5.1 前期预计适用范围\"></a>5.1 前期预计适用范围</h3><p>预计前期不支持部分如下：</p>\n<table>\n<thead>\n<tr>\n<th>不适用项目</th>\n<th>支持情况</th>\n<th>原因</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.9图</td>\n<td>暂时不做支持</td>\n<td>暂时SVG没有对.9图进行支持，如果需要后期会引入自定义规则</td>\n</tr>\n<tr>\n<td>.jpg图片</td>\n<td>暂时不做支持</td>\n<td>由于在Apps中看到的.jpg图片大多是图片复杂，并且模拟现实场景的图片</td>\n</tr>\n<tr>\n<td>.gif图片</td>\n<td>暂时不做支持</td>\n<td>由于在Apps中看到.gif都是兔斯基带动画帧率的图片</td>\n</tr>\n<tr>\n<td>一部分模拟实物的图片</td>\n<td>暂时不做支持</td>\n<td>由于构图较为复杂，对于美工来说要把实物图转换为一条一条线的SVG图片工作量较大</td>\n</tr>\n<tr>\n<td>带有阴影的图片</td>\n<td>暂时不做支持</td>\n<td>目前Apps中采用阴影的图片不多，并且根据@koalaliang提供Apps以后会减少对阴影的使用（目前以扁平化作为基础的一方面）</td>\n</tr>\n</tbody>\n</table>\n<p>其余部分为适用范围。</p>\n<h3 id=\"5-2-优点\"><a href=\"#5-2-优点\" class=\"headerlink\" title=\"5.2 优点\"></a>5.2 优点</h3><p>（1） 目前已经出现2k屏幕，如果需要让Apps在这样屏幕的手机上很好的显示，就需要xxxhdpi，用更大倍数的栅格图像来填充这个需求，未来可能还会有更大分辨率的手机，因此在这个角度考虑，SVG的引入是十分必要的。</p>\n<p>（2） 参考某App中（解压缩RB6.1的apk）所有的图片情况如下:</p>\n<table>\n<thead>\n<tr>\n<th>项目</th>\n<th>个数</th>\n<th>所占大小</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>所有图片</td>\n<td>2700</td>\n<td>7.7MB</td>\n</tr>\n<tr>\n<td>.9图</td>\n<td>721</td>\n<td>1.3MB</td>\n</tr>\n<tr>\n<td>.jpg</td>\n<td>45</td>\n<td>856kb</td>\n</tr>\n<tr>\n<td>.gif</td>\n<td>16</td>\n<td>703kb</td>\n</tr>\n<tr>\n<td>预计第一期不支持的剩余png图片</td>\n<td>666</td>\n<td>2.2MB</td>\n</tr>\n</tbody>\n</table>\n<p>目前而言，我们预计第一阶段，不对.9图支持，以及部分较复杂图片支持（如包含阴影、包含模拟实物的图片），因为可进行替换成SVG的图片情况如下：</p>\n<table>\n<thead>\n<tr>\n<th>个数</th>\n<th>所占大小</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td> 2700-721-45-16-666 = 1252</td>\n<td>7.7MB - 1.3MB - 856kb - 703kb - 2.2MB = 2.68MB</td>\n</tr>\n</tbody>\n</table>\n<p> 大小可压缩比较:<br> 虽然从4.2文件大小对比来看，其实在App大多数图片都是小图的情况来看，对于单张图片从栅格图像转为SVG而言并没有多少的压缩，二者是差不多大的。</p>\n<p> 对于jpg、png、gif等栅格图像而言，在打包应用时是得不到压缩的：</p>\n<p><img src=\"/img/svg-s-file-1.png\" alt=\"\"></p>\n<p> 但是对于xml的压缩，在打包时，根据xml大小可以压缩2/3，甚至更多的大小：</p>\n<p><img src=\"/img/svg-s-file-2.png\" alt=\"\"></p>\n<p> 一般的xml压缩:</p>\n<p><img src=\"/img/svg-s-file-3.png\" alt=\"\"></p>\n<p>（3） App在任意屏幕下都得到完美适配（对后期需求需要做到全局大小调整也可以得到很好的助攻）</p>\n<h3 id=\"5-3-缺点\"><a href=\"#5-3-缺点\" class=\"headerlink\" title=\"5.3 缺点\"></a>5.3 缺点</h3><p>（1） 就目前而言，Apps中大多数的资源图片都是96px*96px甚至更小的小图，在资源加载速度方面预计会比目前慢3~8倍。</p>\n<p>（2） 对于后期维护以及使用来说，无论如何SVG都是引入新的框架，都需要大家耗费时间去熟悉以及使用。</p>\n<p>（3） 目前的库来说都没有对SVG所有元素得到支持，一些甚至是只支持了少数很常见的元素，都需要后期去拓展，比如预计作为开发参考的JNI库，虽然效率很高，但是由于不支持<code>linearGradient</code>与<code>radialGradient</code>元素，因此还不支持渐变。</p>\n<h2 id=\"拓展链接\"><a href=\"#拓展链接\" class=\"headerlink\" title=\"拓展链接\"></a>拓展链接</h2><ol>\n<li><a href=\"http://blog.dreamtobe.cn/2014/12/10/SVG-Android库-深入浅出-解析篇/\">SVG-Android库 深入浅出 解析篇</a></li>\n<li><a href=\"http://blog.dreamtobe.cn/2014/11/08/SVG-Android应用探究之路/\">SVG Android应用探究之路 【一】</a></li>\n</ol>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<ul>\n<li><p>目前的现状：</p>\n<p>  SVG能够在大小上、画质上对Apps进行优化，但是在解析效率上以及对各种图片的支持上是需要接下来持续优化的。</p>\n</li>\n</ul>","more":"<ul>\n<li><p>SVG代码特征：</p>\n<p>  目前已有的几个库中，Android-SVG这个库支持的元素、属性最多，但是在效率上却不是最快的（大约90%的时间消耗在了解析SVG文件上），而虽然SVG-Android-JNI这个库在支持方面略有不足，如不支持阴影、不支持渐变，甚至很少的常见元素都不被支持，但是在效率方面却远领先于其他库，也是最接近RESOURCE库的，因此预计作为后期对SVG库开发的基础或参考。</p>\n<p>  目前已有库的总体运行有两个步骤：（1）解析、（2）渲染</p>\n</li>\n<li><p>对Apps的影响</p>\n<p>  (1) 提高清晰度，在所有屏幕分辨率上都能完美显示。</p>\n<p>  (2) 安装包在大小上能够得到一定的缩减，主要来源于SVG XML格式的压缩</p>\n<p>  (3) 初步评估在性能上，总体体验上可接受，但是可能在性能上存在潜在的风险，如一些过于复杂的图片加载时间过长可能会造成体验上的损失，需要在实施时考虑解决方案进行风险规避，可以考虑对加载时间进行监控</p>\n</li>\n<li><p>改进优化的空间：</p>\n<p>  对于支持来说，是后期一个持续加入的过程，对于效率我们有下面一些考量：</p>\n<p>  (1) 多中间格式的支持，SVG文件格式为XML，而对XML的解析效率其实是解析耗时的一个瓶颈，我们可以考虑直接支持更多更高效序列化、反序列化的中间格式的解析。</p>\n<p>  (2) 目前Android-SVG库，在渲染方面表现出色，可以考虑，在解析部分借鉴SVG-Android-JNI的解析，而在渲染上对Android-SVG进行借鉴</p>\n<p>  (3) 考虑实现一个体积更小、便于使用、同时不损失开发效率的库和调用框架，这点对于我们同样重要。</p>\n<p>经过前期对SVG的预研，矢量图在对任意屏幕的完美支持正是我们所需要的，同时SVG资源文件在打包过程中，经过压缩使得资源文件大小上能够得到优化，，而目前耗时上，大约在RESOURCE加载资源图片的3〜8倍之间不等。经过初步评估，资源图片（通常在100x100左右）加载时间大多在2~4毫秒，SVG的加载预计将在一个大体可接受的范围（也就是实际体验不会感知到区别）。最后目前Parser＋Render的解析方式还存在一定的优化空间，相信可以使SVG的效率得到进一步提升。</p>\n</li>\n</ul>\n<p>总的来说，好多于坏，值得研究与引入。</p>\n<h1 id=\"详细过程\"><a href=\"#详细过程\" class=\"headerlink\" title=\"详细过程\"></a>详细过程</h1><h2 id=\"1-主要考量\"><a href=\"#1-主要考量\" class=\"headerlink\" title=\"1 主要考量\"></a>1 主要考量</h2><ul>\n<li>可行性</li>\n<li>TTF/SVG选择</li>\n<li>与现存Android.getDrawable对比</li>\n<li>预计对Apps的影响</li>\n</ul>\n<h2 id=\"2-可行性\"><a href=\"#2-可行性\" class=\"headerlink\" title=\"2 可行性\"></a>2 可行性</h2><p>其实在网页重构等领域已经被大量的使用，在终端上一般图片实现矢量量化的其实并不多。但就目前Android端分辨率越来越丰富，分辨率越来越高来说，这是一个不错的方向。</p>\n<p>目前终端上实现矢量图的表达载体有<code>TTF</code>与<code>SVG</code>，两者在终端上的应用，在业界已经有了一定的基础，并且对于美工来说都有办法实现让图片转为对应载体的方法，因此可以作为选择对象。</p>\n<h2 id=\"3-TTF-SVG选择\"><a href=\"#3-TTF-SVG选择\" class=\"headerlink\" title=\"3 TTF/SVG选择\"></a>3 TTF/SVG选择</h2><h3 id=\"3-1-TTF的淘汰\"><a href=\"#3-1-TTF的淘汰\" class=\"headerlink\" title=\"3.1 TTF的淘汰\"></a>3.1 TTF的淘汰</h3><p>对于TTF而言其实Android自身就是支持的，只是我们需要将TTF转换为对应的Drawable，作为Drawable来使用，但是这其实也不是难点，因为业界已经有不少开源的TTF转为Drawable的库可供参考（如我们做比较的时候选用的iconfont），并且效率方面与Resource.getDrawable相当，甚至更快。</p>\n<p>但是相比SVG而言TTF只支持单一颜色（其实在网页端已经有人通过z轴绝对坐标叠加的方法实现(<a href=\"http://css-tricks.com/stackicons-icon-fonts/)，但是考虑到周期、效率等因素没有再做深究，可做学习），并且对于美工而言，编辑起来没有SVG方便。因此最终决定以SVG的方向进行研究。\">http://css-tricks.com/stackicons-icon-fonts/)，但是考虑到周期、效率等因素没有再做深究，可做学习），并且对于美工而言，编辑起来没有SVG方便。因此最终决定以SVG的方向进行研究。</a></p>\n<h3 id=\"3-2-SVG现状\"><a href=\"#3-2-SVG现状\" class=\"headerlink\" title=\"3.2 SVG现状\"></a>3.2 SVG现状</h3><ul>\n<li>同所有矢量图一样，在所有大小分辨率屏幕上都能完美呈现图片。</li>\n<li>Android端一张图片只需要一个SVG文件即可</li>\n<li>对于SVG而言修改透明度等可以对一张SVG进行复用（如一般的点击效果其实只是颜色的改变）</li>\n<li>SVG文件大小与图片尺寸无关只与图片复杂度有关</li>\n<li>目前已经有了很多开源SVG解析、渲染库可供学习、借鉴</li>\n<li>对于美工而言SVG有很多成熟的编辑软件(如:Sketch、Illustrator、Inkscape work等)</li>\n<li>相比TTF，SVG理论上可以呈现任意复杂度图片</li>\n<li>目前海外的部分Android应用已经开始使用SVG</li>\n</ul>\n<h3 id=\"3-3-参与研究预言SVG库\"><a href=\"#3-3-参与研究预言SVG库\" class=\"headerlink\" title=\"3.3 参与研究预言SVG库\"></a>3.3 参与研究预言SVG库</h3><table>\n<thead>\n<tr>\n<th>库名称</th>\n<th>地址</th>\n<th>补充说明</th>\n<th>支持表现</th>\n<th>Licenses</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Android-SVG</td>\n<td><a href=\"https://code.google.com/p/androidsvg/\">https://code.google.com/p/androidsvg/</a></td>\n<td>代码结构清晰，支持元素较多，速度中，纯Java实现</td>\n<td>一般图片支持良好，阴影不支持、渐变支持</td>\n<td>Apache License 2.0</td>\n</tr>\n<tr>\n<td>SVG-Android-2</td>\n<td><a href=\"https://code.google.com/p/svg-android-2/\">https://code.google.com/p/svg-android-2/</a></td>\n<td>速度慢，纯Java实现</td>\n<td>一般图片支持不好，阴影不支持，渐变不支持</td>\n<td>Apache License 2.0</td>\n</tr>\n<tr>\n<td>SVG-Android-JNI</td>\n<td><a href=\"https://code.launchpad.net/~pltxtra/libsvg-android/main\">https://code.launchpad.net/~pltxtra/libsvg-android/main</a></td>\n<td>速度快，C++实现</td>\n<td>一般图片支持一般，阴影不支持、渐变不支持</td>\n<td>Simplified BSD Licence, GNU GPL v3, GNU LGPL v2.1, GNU LGPL v3, MIT / X / Expat Licence</td>\n</tr>\n<tr>\n<td>SVG-Android-AGG</td>\n<td><a href=\"http://www.antigrain.com/svg/index.html\">http://www.antigrain.com/svg/index.html</a></td>\n<td>速度一般，C++实现，使用了AGG主要是让SVG更平滑</td>\n<td>一般图片支持一般，阴影不支持、渐变不支持</td>\n<td>GNU GPL v3</td>\n</tr>\n</tbody>\n</table>\n<p><strong>TIPS: 目前这些库的运行都可拆解为：解析SVG xml文件-&gt;目标对象-&gt;渲染-&gt;Drawable/Picture/Bitmap</strong></p>\n<h2 id=\"4-与现存Android-getDrawable对比\"><a href=\"#4-与现存Android-getDrawable对比\" class=\"headerlink\" title=\"4 与现存Android.getDrawable对比\"></a>4 与现存Android.getDrawable对比</h2><h3 id=\"4-1-效率\"><a href=\"#4-1-效率\" class=\"headerlink\" title=\"4.1 效率\"></a>4.1 效率</h3><p>对于效率，我们经过了比较多的对比来呈现，并且预演几个预计参考库的耗时点。</p>\n<h4 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h4><p><strong>TIPS: 目前来说在96px<em>96px这个级别的图片上，考虑进行参考开发的库解析，渲染的耗时是目前Android.getDrawable的3~8倍.但是在如480px</em>480px并且简单的大图片上，我们的解析，渲染的耗时小于等于Android.getDrawable的耗时</strong></p>\n<p><img src=\"/img/svg-s-1.png\" alt=\"\"></p>\n<p><img src=\"/img/svg-s-2.png\" alt=\"\"></p>\n<h4 id=\"对比数据细节\"><a href=\"#对比数据细节\" class=\"headerlink\" title=\"对比数据细节\"></a>对比数据细节</h4><p><strong>Tips: 我们举其中几组数据作为说明</strong></p>\n<h5 id=\"1-朋友圈-96px-96px-图标\"><a href=\"#1-朋友圈-96px-96px-图标\" class=\"headerlink\" title=\"(1) 朋友圈(96px*96px)图标:\"></a>(1) 朋友圈(96px*96px)图标:</h5><p><img src=\"/img/svg-s-sns.png\" alt=\"\"></p>\n<h6 id=\"数据\"><a href=\"#数据\" class=\"headerlink\" title=\"数据\"></a>数据</h6><table>\n<thead>\n<tr>\n<th>库名称</th>\n<th>平均值</th>\n<th>最大值</th>\n<th>最小值</th>\n<th>变异系数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SVG-Android</td>\n<td>68.8</td>\n<td>89</td>\n<td>44</td>\n<td>0.2755</td>\n</tr>\n<tr>\n<td>SVG-Android-2</td>\n<td>103.9</td>\n<td>156</td>\n<td>71</td>\n<td>0.2897</td>\n</tr>\n<tr>\n<td>SVG-Android-JNI</td>\n<td>14.2</td>\n<td>29</td>\n<td>5</td>\n<td>0.4633</td>\n</tr>\n<tr>\n<td>Resource.getDrawable</td>\n<td>2.5</td>\n<td>4</td>\n<td>2</td>\n<td>0.2828</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"/img/svg-s-line-1.png\" alt=\"\"></p>\n<h5 id=\"2-手机-480px-480px-图标\"><a href=\"#2-手机-480px-480px-图标\" class=\"headerlink\" title=\"(2) 手机(480px*480px)图标:\"></a>(2) 手机(480px*480px)图标:</h5><p><img src=\"/img/svg-s-phone.png\" alt=\"\"></p>\n<h6 id=\"数据-1\"><a href=\"#数据-1\" class=\"headerlink\" title=\"数据\"></a>数据</h6><table>\n<thead>\n<tr>\n<th>库名称</th>\n<th>平均值</th>\n<th>最大值</th>\n<th>最小值</th>\n<th>变异系数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SVG-Android</td>\n<td>55.8</td>\n<td>68</td>\n<td>35</td>\n<td>0.2310</td>\n</tr>\n<tr>\n<td>SVG-Android-2</td>\n<td>55.5</td>\n<td>63</td>\n<td>44</td>\n<td>0.1089</td>\n</tr>\n<tr>\n<td>SVG-Android-JNI</td>\n<td>15.2</td>\n<td>25</td>\n<td>9</td>\n<td>0.3205</td>\n</tr>\n<tr>\n<td>Resource.getDrawable</td>\n<td>36.3</td>\n<td>55</td>\n<td>23</td>\n<td>0.2742</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"/img/svg-s-line-2.png\" alt=\"\"></p>\n<h5 id=\"（3）多图比较-96px-96px-图标：\"><a href=\"#（3）多图比较-96px-96px-图标：\" class=\"headerlink\" title=\"（3）多图比较(96px*96px)图标：\"></a>（3）多图比较(96px*96px)图标：</h5><p><img src=\"/img/svg-s-call.png\" alt=\"\"></p>\n<p><img src=\"/img/svg-s-nearby.png\" alt=\"\"></p>\n<p><img src=\"/img/svg-s-qq.png\" alt=\"\"></p>\n<p><img src=\"/img/svg-s-scan.png\" alt=\"\"></p>\n<p><img src=\"/img/svg-s-shake.png\" alt=\"\"></p>\n<p><img src=\"/img/svg-s-sns.png\" alt=\"\"></p>\n<h6 id=\"数据-2\"><a href=\"#数据-2\" class=\"headerlink\" title=\"数据\"></a>数据</h6><table>\n<thead>\n<tr>\n<th>库名称</th>\n<th>平均值</th>\n<th>最大值</th>\n<th>最小值</th>\n<th>变异系数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SVG-Android</td>\n<td>196.7</td>\n<td>246</td>\n<td>162</td>\n<td>0.1274</td>\n</tr>\n<tr>\n<td>SVG-Android-2</td>\n<td>362.9</td>\n<td>425</td>\n<td>319</td>\n<td>0.0811</td>\n</tr>\n<tr>\n<td>SVG-Android-JNI</td>\n<td>33.4</td>\n<td>51</td>\n<td>17</td>\n<td>0.3296</td>\n</tr>\n<tr>\n<td>Resource.getDrawable</td>\n<td>12.3</td>\n<td>22</td>\n<td>6</td>\n<td>0.4757</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"/img/svg-s-line-3.png\" alt=\"\"></p>\n<h3 id=\"4-2-文件大小\"><a href=\"#4-2-文件大小\" class=\"headerlink\" title=\"4.2 文件大小\"></a>4.2 文件大小</h3><h4 id=\"SVG的大小相比栅格图像特性主要体现在以下几点：\"><a href=\"#SVG的大小相比栅格图像特性主要体现在以下几点：\" class=\"headerlink\" title=\"SVG的大小相比栅格图像特性主要体现在以下几点：\"></a>SVG的大小相比栅格图像特性主要体现在以下几点：</h4><ul>\n<li>SVG文件是xml格式，在打包时支持压缩，而栅格图像在apk打包时已经不能再被压缩。</li>\n<li>SVG文件只需要一份，就可以适配所有屏幕，并且可以在代码中修改其特性就可以得到更多复用，而栅格图像为了保证一定程度上的清晰度，需要分别提供多张不同倍数的图片。</li>\n<li>SVG文件大小只和图片的复杂程度有关与图片尺寸大小无关（正是这个原因，在一些复杂的小图上才出现栅格图像更小的情况，但往往相差不大）。</li>\n</ul>\n<h4 id=\"取一些Apps常用大小与复杂度切图对比（⚠这里只是单张图片对比）：\"><a href=\"#取一些Apps常用大小与复杂度切图对比（⚠这里只是单张图片对比）：\" class=\"headerlink\" title=\"取一些Apps常用大小与复杂度切图对比（⚠这里只是单张图片对比）：\"></a>取一些Apps常用大小与复杂度切图对比（⚠这里只是单张图片对比）：</h4><table>\n<thead>\n<tr>\n<th>NAME</th>\n<th>PNG</th>\n<th>SVG</th>\n<th>PNG SIZE</th>\n<th>图片元素个数</th>\n<th>图片元素深度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>cell phone</td>\n<td>2kb</td>\n<td>2kb</td>\n<td>96px*96px</td>\n<td>7</td>\n<td>3</td>\n</tr>\n<tr>\n<td>near friend</td>\n<td>2kb</td>\n<td>3kb</td>\n<td>96px*96px</td>\n<td>9</td>\n<td>4</td>\n</tr>\n<tr>\n<td>qq</td>\n<td>2kb</td>\n<td>2kb</td>\n<td>96px*96px</td>\n<td>7</td>\n<td>3</td>\n</tr>\n<tr>\n<td>scaner</td>\n<td>2kb</td>\n<td>3kb</td>\n<td>96px*96px</td>\n<td>7</td>\n<td>3</td>\n</tr>\n<tr>\n<td>shake</td>\n<td>3kb</td>\n<td>4kb</td>\n<td>96px*96px</td>\n<td>14</td>\n<td>4</td>\n</tr>\n<tr>\n<td>sns</td>\n<td>5kb</td>\n<td>3kb</td>\n<td>96px*96px</td>\n<td>15</td>\n<td>4</td>\n</tr>\n<tr>\n<td>mobile</td>\n<td>8kb</td>\n<td>2kb</td>\n<td>480px*480px</td>\n<td>9</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"4-3-清晰程度\"><a href=\"#4-3-清晰程度\" class=\"headerlink\" title=\"4.3 清晰程度\"></a>4.3 清晰程度</h3><p>SVG完胜栅格化图片形式</p>\n<h2 id=\"5-预计对Apps的影响\"><a href=\"#5-预计对Apps的影响\" class=\"headerlink\" title=\"5 预计对Apps的影响\"></a>5 预计对Apps的影响</h2><h3 id=\"5-1-前期预计适用范围\"><a href=\"#5-1-前期预计适用范围\" class=\"headerlink\" title=\"5.1 前期预计适用范围\"></a>5.1 前期预计适用范围</h3><p>预计前期不支持部分如下：</p>\n<table>\n<thead>\n<tr>\n<th>不适用项目</th>\n<th>支持情况</th>\n<th>原因</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.9图</td>\n<td>暂时不做支持</td>\n<td>暂时SVG没有对.9图进行支持，如果需要后期会引入自定义规则</td>\n</tr>\n<tr>\n<td>.jpg图片</td>\n<td>暂时不做支持</td>\n<td>由于在Apps中看到的.jpg图片大多是图片复杂，并且模拟现实场景的图片</td>\n</tr>\n<tr>\n<td>.gif图片</td>\n<td>暂时不做支持</td>\n<td>由于在Apps中看到.gif都是兔斯基带动画帧率的图片</td>\n</tr>\n<tr>\n<td>一部分模拟实物的图片</td>\n<td>暂时不做支持</td>\n<td>由于构图较为复杂，对于美工来说要把实物图转换为一条一条线的SVG图片工作量较大</td>\n</tr>\n<tr>\n<td>带有阴影的图片</td>\n<td>暂时不做支持</td>\n<td>目前Apps中采用阴影的图片不多，并且根据@koalaliang提供Apps以后会减少对阴影的使用（目前以扁平化作为基础的一方面）</td>\n</tr>\n</tbody>\n</table>\n<p>其余部分为适用范围。</p>\n<h3 id=\"5-2-优点\"><a href=\"#5-2-优点\" class=\"headerlink\" title=\"5.2 优点\"></a>5.2 优点</h3><p>（1） 目前已经出现2k屏幕，如果需要让Apps在这样屏幕的手机上很好的显示，就需要xxxhdpi，用更大倍数的栅格图像来填充这个需求，未来可能还会有更大分辨率的手机，因此在这个角度考虑，SVG的引入是十分必要的。</p>\n<p>（2） 参考某App中（解压缩RB6.1的apk）所有的图片情况如下:</p>\n<table>\n<thead>\n<tr>\n<th>项目</th>\n<th>个数</th>\n<th>所占大小</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>所有图片</td>\n<td>2700</td>\n<td>7.7MB</td>\n</tr>\n<tr>\n<td>.9图</td>\n<td>721</td>\n<td>1.3MB</td>\n</tr>\n<tr>\n<td>.jpg</td>\n<td>45</td>\n<td>856kb</td>\n</tr>\n<tr>\n<td>.gif</td>\n<td>16</td>\n<td>703kb</td>\n</tr>\n<tr>\n<td>预计第一期不支持的剩余png图片</td>\n<td>666</td>\n<td>2.2MB</td>\n</tr>\n</tbody>\n</table>\n<p>目前而言，我们预计第一阶段，不对.9图支持，以及部分较复杂图片支持（如包含阴影、包含模拟实物的图片），因为可进行替换成SVG的图片情况如下：</p>\n<table>\n<thead>\n<tr>\n<th>个数</th>\n<th>所占大小</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td> 2700-721-45-16-666 = 1252</td>\n<td>7.7MB - 1.3MB - 856kb - 703kb - 2.2MB = 2.68MB</td>\n</tr>\n</tbody>\n</table>\n<p> 大小可压缩比较:<br> 虽然从4.2文件大小对比来看，其实在App大多数图片都是小图的情况来看，对于单张图片从栅格图像转为SVG而言并没有多少的压缩，二者是差不多大的。</p>\n<p> 对于jpg、png、gif等栅格图像而言，在打包应用时是得不到压缩的：</p>\n<p><img src=\"/img/svg-s-file-1.png\" alt=\"\"></p>\n<p> 但是对于xml的压缩，在打包时，根据xml大小可以压缩2/3，甚至更多的大小：</p>\n<p><img src=\"/img/svg-s-file-2.png\" alt=\"\"></p>\n<p> 一般的xml压缩:</p>\n<p><img src=\"/img/svg-s-file-3.png\" alt=\"\"></p>\n<p>（3） App在任意屏幕下都得到完美适配（对后期需求需要做到全局大小调整也可以得到很好的助攻）</p>\n<h3 id=\"5-3-缺点\"><a href=\"#5-3-缺点\" class=\"headerlink\" title=\"5.3 缺点\"></a>5.3 缺点</h3><p>（1） 就目前而言，Apps中大多数的资源图片都是96px*96px甚至更小的小图，在资源加载速度方面预计会比目前慢3~8倍。</p>\n<p>（2） 对于后期维护以及使用来说，无论如何SVG都是引入新的框架，都需要大家耗费时间去熟悉以及使用。</p>\n<p>（3） 目前的库来说都没有对SVG所有元素得到支持，一些甚至是只支持了少数很常见的元素，都需要后期去拓展，比如预计作为开发参考的JNI库，虽然效率很高，但是由于不支持<code>linearGradient</code>与<code>radialGradient</code>元素，因此还不支持渐变。</p>\n<h2 id=\"拓展链接\"><a href=\"#拓展链接\" class=\"headerlink\" title=\"拓展链接\"></a>拓展链接</h2><ol>\n<li><a href=\"http://blog.dreamtobe.cn/2014/12/10/SVG-Android库-深入浅出-解析篇/\">SVG-Android库 深入浅出 解析篇</a></li>\n<li><a href=\"http://blog.dreamtobe.cn/2014/11/08/SVG-Android应用探究之路/\">SVG Android应用探究之路 【一】</a></li>\n</ol>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"Switching between the panel and the keyboard in Wechat","date":"2015-02-06T23:47:03.000Z","_content":"\n>Somebody ask me, why there are no layout jumping in wechat when switching between the panel and the keyboard?\n\n>It's very simple.\n\n>Just 2 cases under 2 rules.\n\n<!--more-->\n### Precondition:\n- Definition android:windowSoftInputMode as adjustSize for Activity in AndroidManifest xml.\n- Already calculated keybord height.\n\n\n### Case 1: switching from the panel to the keyboard:\n#### Rule:\nTo ensure that gone(or providing zero height) panel during keyboard squeeze layout trigger layout real remeasuring smaller height and redrawing.\n\n### Case 2: switching from the keyboard to the panel:\n#### Rule:\nTo ensure that switching panel to display(visible&valid height) from hidden(gone|no height) state is in the keybord hiding trigger layout real remeasuring more high and redrawing period.\n\n\n## In a word\n- No trigger layout remeasure & redraw by panel.\n- Readjusting panel height during keybord trigger layout remeasuring new height.\n\n>any suggestions and questions, welcome to follow post comment.\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/Switching-between-the-panel-and-the-keyboard.md","raw":"title: Switching between the panel and the keyboard in Wechat\ndate: 2015-02-07 07:47:03\npermalink: 2015/02/07/Switching-between-the-panel-and-the-keyboard\ntags:\n- keybord\n- Android\n- Panel\n- Wechat\n- 优化\n\n---\n\n>Somebody ask me, why there are no layout jumping in wechat when switching between the panel and the keyboard?\n\n>It's very simple.\n\n>Just 2 cases under 2 rules.\n\n<!--more-->\n### Precondition:\n- Definition android:windowSoftInputMode as adjustSize for Activity in AndroidManifest xml.\n- Already calculated keybord height.\n\n\n### Case 1: switching from the panel to the keyboard:\n#### Rule:\nTo ensure that gone(or providing zero height) panel during keyboard squeeze layout trigger layout real remeasuring smaller height and redrawing.\n\n### Case 2: switching from the keyboard to the panel:\n#### Rule:\nTo ensure that switching panel to display(visible&valid height) from hidden(gone|no height) state is in the keybord hiding trigger layout real remeasuring more high and redrawing period.\n\n\n## In a word\n- No trigger layout remeasure & redraw by panel.\n- Readjusting panel height during keybord trigger layout remeasuring new height.\n\n>any suggestions and questions, welcome to follow post comment.\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2015/02/07/Switching-between-the-panel-and-the-keyboard","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66i3001695buvfokvb3l","content":"<blockquote>\n<p>Somebody ask me, why there are no layout jumping in wechat when switching between the panel and the keyboard?</p>\n<p>It’s very simple.</p>\n<p>Just 2 cases under 2 rules.</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"Precondition\"><a href=\"#Precondition\" class=\"headerlink\" title=\"Precondition:\"></a>Precondition:</h3><ul>\n<li>Definition android:windowSoftInputMode as adjustSize for Activity in AndroidManifest xml.</li>\n<li>Already calculated keybord height.</li>\n</ul>\n<h3 id=\"Case-1-switching-from-the-panel-to-the-keyboard\"><a href=\"#Case-1-switching-from-the-panel-to-the-keyboard\" class=\"headerlink\" title=\"Case 1: switching from the panel to the keyboard:\"></a>Case 1: switching from the panel to the keyboard:</h3><h4 id=\"Rule\"><a href=\"#Rule\" class=\"headerlink\" title=\"Rule:\"></a>Rule:</h4><p>To ensure that gone(or providing zero height) panel during keyboard squeeze layout trigger layout real remeasuring smaller height and redrawing.</p>\n<h3 id=\"Case-2-switching-from-the-keyboard-to-the-panel\"><a href=\"#Case-2-switching-from-the-keyboard-to-the-panel\" class=\"headerlink\" title=\"Case 2: switching from the keyboard to the panel:\"></a>Case 2: switching from the keyboard to the panel:</h3><h4 id=\"Rule-1\"><a href=\"#Rule-1\" class=\"headerlink\" title=\"Rule:\"></a>Rule:</h4><p>To ensure that switching panel to display(visible&amp;valid height) from hidden(gone|no height) state is in the keybord hiding trigger layout real remeasuring more high and redrawing period.</p>\n<h2 id=\"In-a-word\"><a href=\"#In-a-word\" class=\"headerlink\" title=\"In a word\"></a>In a word</h2><ul>\n<li>No trigger layout remeasure &amp; redraw by panel.</li>\n<li>Readjusting panel height during keybord trigger layout remeasuring new height.</li>\n</ul>\n<blockquote>\n<p>any suggestions and questions, welcome to follow post comment.</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>Somebody ask me, why there are no layout jumping in wechat when switching between the panel and the keyboard?</p>\n<p>It’s very simple.</p>\n<p>Just 2 cases under 2 rules.</p>\n</blockquote>","more":"<h3 id=\"Precondition\"><a href=\"#Precondition\" class=\"headerlink\" title=\"Precondition:\"></a>Precondition:</h3><ul>\n<li>Definition android:windowSoftInputMode as adjustSize for Activity in AndroidManifest xml.</li>\n<li>Already calculated keybord height.</li>\n</ul>\n<h3 id=\"Case-1-switching-from-the-panel-to-the-keyboard\"><a href=\"#Case-1-switching-from-the-panel-to-the-keyboard\" class=\"headerlink\" title=\"Case 1: switching from the panel to the keyboard:\"></a>Case 1: switching from the panel to the keyboard:</h3><h4 id=\"Rule\"><a href=\"#Rule\" class=\"headerlink\" title=\"Rule:\"></a>Rule:</h4><p>To ensure that gone(or providing zero height) panel during keyboard squeeze layout trigger layout real remeasuring smaller height and redrawing.</p>\n<h3 id=\"Case-2-switching-from-the-keyboard-to-the-panel\"><a href=\"#Case-2-switching-from-the-keyboard-to-the-panel\" class=\"headerlink\" title=\"Case 2: switching from the keyboard to the panel:\"></a>Case 2: switching from the keyboard to the panel:</h3><h4 id=\"Rule-1\"><a href=\"#Rule-1\" class=\"headerlink\" title=\"Rule:\"></a>Rule:</h4><p>To ensure that switching panel to display(visible&amp;valid height) from hidden(gone|no height) state is in the keybord hiding trigger layout real remeasuring more high and redrawing period.</p>\n<h2 id=\"In-a-word\"><a href=\"#In-a-word\" class=\"headerlink\" title=\"In a word\"></a>In a word</h2><ul>\n<li>No trigger layout remeasure &amp; redraw by panel.</li>\n<li>Readjusting panel height during keybord trigger layout remeasuring new height.</li>\n</ul>\n<blockquote>\n<p>any suggestions and questions, welcome to follow post comment.</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"TP-Link WR841N-V7路由器刷机OpenWrt配置翻墙","date":"2015-09-04T18:08:03.000Z","_content":"\n> 由于家里，有ipad、iphone、小米手机、小米盒子...，一直一来我都是用shadowsocks协助翻墙，Android配起来还快，iphone和ipad很是苦恼，没有越狱就只能在Shadowsocks自带app上玩玩，小米盒子就更不用想了，因此就琢磨着给路由器直接翻墙。\n\n刚开始是家里刚好有一台TP-Link WR720N，根据网上的教程很快的就刷好了，配了wireless，network，眼看可以了，但是开始整挂载，luci，shadowsocks时，才发现可是蛋疼的是只有4M内存，做起事来畏首畏尾，各种提示没有空间，...咋办，淘宝了下，直接入手了一台别人搞好的（包括硬件与软件）TP-Link WR841n v7，但是考虑到路由器的安全问题，还是打算把里面的软的全部重新刷过，重新配。\n\n<!--more-->\n## 简单说明\n\n### I.  刷入了Bootloader\n\n> 根据此 [AR/QCA/MT7620 Breed, ，功能强大的多线程 Bootloader](http://www.right.com.cn/forum/thread-161906-1-1.html)，可以配合[不死uBoot](http://www.right.com.cn/forum/thread-136444-1-1.html)这里的配置表看看对应的机型对应要下载对应的硬件配置。\n\n\n1. 按住复位键再插电源，等所有网囗指示灯一闪一闪后松开复位按钮，然后在浏览器中输入192.168.1.1进入控制台刷机页面\n2. 根据路由器机器背面的说明，录入MAC地址与PIN。\n3. 完成。\n\n### II. 刷入固件\n\n原本我选用的是: [AR系列OPENWRT固件--带是像鬼qos,qosv4,下载,vpn,翻wall等](http://www.right.com.cn/forum/thread-139399-1-1.html)，后来发现比较大，带的东西比较多，大神做的东西果断是给力啊，但是就是界面无法接受了点，后来就选用了设置页面好看，固件小够用的[OpenWrt ar71xx系列 for BB r46516 4M](http://www.right.com.cn/forum/thread-114913-1-1.html)，我选的是8M那个。\n\n1. 按住复位键再插电源，等所有网囗指示灯一闪一闪后松开复位按钮，然后在浏览器中输入192.168.1.1进入控制台刷机页面\n2. 点击固件升级、上传下载来的固件(*.bin)的固件。\n3. 刷成功后，等路由器的设置的灯不再闪了，就说明重新开机成功了。\n\n### III. 其他小坑\n\n好吧，由于我的是**特别的**电信路由器，我这边还必须需要配置下lan口为静态ip，并且配置`ipaddr`为非192.168.1.1的ip段，否则取不到wan口的地址，上不了网，好吧，我给配了，192.168.2.1，至此，可以正常上网工作了。\n\n### III. ShadowSocks配置\n\n原本我是打算参照[这个](http://hong.im/2014/03/16/configure-an-openwrt-based-router-to-use-shadowsocks-and-redirect-foreign-traffic/)教程搞shadowsocks的，但是猛然在执行一半时候发现，这个固件既然已经安装了`shadowsocks-libev-spec`，显然是已经支持了，我再看了下设置页面的扩展，果然有。于是乎，嘿嘿。。\n\n唯一需要注意的地方是: 配置文件`config.json`的格式是:\n\n```\n{\n    \"server\":\"[服务器IP地址]\",\n    \"server_port\":[服务器端口],\n    \"local_port\":[本地端口,稍后iptables会用到],\n    \"password\":\"[密码]\",\n    \"timeout\":600,\n    \"method\":\"[加密方式]\"\n}\n```\n\n> 大功告成!\n\n---\n\n- [TP-Link WR720N刷入OpenWrt之一：刷入](http://seak.me/archives/125)\n- [wifi client mode with static ip](https://forum.openwrt.org/viewtopic.php?id=29667)\n- [OpenWrt and WPA wireless setup](http://developwithguru.com/openwrt-and-wpa-wireless-setup/)\n- [openwrt 刷机包](http://downloads.openwrt.org/snapshots/trunk/ar71xx/generic/)\n- [指定DNS服务器](http://www.right.com.cn/forum/thread-46811-1-1.html)\n- [OpenWrt Download](http://downloads.openwrt.org.cn/)\n- [DNS errot](https://forum.openwrt.org/viewtopic.php?id=16929)\n- [WR84n v7 改造](http://www.right.com.cn/forum/forum.php?mod=viewthread&tid=170441&highlight=wr841n)\n- [不死uBoot](http://www.right.com.cn/forum/thread-136444-1-1.html)\n- [AR/QCA/MT7620 Breed, ，功能强大的多线程 Bootloader](http://www.right.com.cn/forum/thread-161906-1-1.html)\n- [AR系列OPENWRT固件--带是像鬼qos,qosv4,下载,vpn,翻wall等](http://www.right.com.cn/forum/thread-139399-1-1.html)\n- [OpenWrt ar71xx系列 for BB r46516 4M](http://www.right.com.cn/forum/thread-114913-1-1.html)\n- [OpenWrt智能、自动、透明翻墙](https://github.com/softwaredownload/openwrt-fanqiang)\n\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/TP-Link-WR841N-V7-OpenWrt-ShadowSocks.md","raw":"\ntitle: TP-Link WR841N-V7路由器刷机OpenWrt配置翻墙\ndate: 2015-09-05 02:08:03\npermalink: 2015/09/05/TP-Link-WR841N-V7-OpenWrt-ShadowSocks\ntags:\n- 硬件\n- 路由器\n- 翻墙\n- shadowsocks\n- OpenWrt\n\n---\n\n> 由于家里，有ipad、iphone、小米手机、小米盒子...，一直一来我都是用shadowsocks协助翻墙，Android配起来还快，iphone和ipad很是苦恼，没有越狱就只能在Shadowsocks自带app上玩玩，小米盒子就更不用想了，因此就琢磨着给路由器直接翻墙。\n\n刚开始是家里刚好有一台TP-Link WR720N，根据网上的教程很快的就刷好了，配了wireless，network，眼看可以了，但是开始整挂载，luci，shadowsocks时，才发现可是蛋疼的是只有4M内存，做起事来畏首畏尾，各种提示没有空间，...咋办，淘宝了下，直接入手了一台别人搞好的（包括硬件与软件）TP-Link WR841n v7，但是考虑到路由器的安全问题，还是打算把里面的软的全部重新刷过，重新配。\n\n<!--more-->\n## 简单说明\n\n### I.  刷入了Bootloader\n\n> 根据此 [AR/QCA/MT7620 Breed, ，功能强大的多线程 Bootloader](http://www.right.com.cn/forum/thread-161906-1-1.html)，可以配合[不死uBoot](http://www.right.com.cn/forum/thread-136444-1-1.html)这里的配置表看看对应的机型对应要下载对应的硬件配置。\n\n\n1. 按住复位键再插电源，等所有网囗指示灯一闪一闪后松开复位按钮，然后在浏览器中输入192.168.1.1进入控制台刷机页面\n2. 根据路由器机器背面的说明，录入MAC地址与PIN。\n3. 完成。\n\n### II. 刷入固件\n\n原本我选用的是: [AR系列OPENWRT固件--带是像鬼qos,qosv4,下载,vpn,翻wall等](http://www.right.com.cn/forum/thread-139399-1-1.html)，后来发现比较大，带的东西比较多，大神做的东西果断是给力啊，但是就是界面无法接受了点，后来就选用了设置页面好看，固件小够用的[OpenWrt ar71xx系列 for BB r46516 4M](http://www.right.com.cn/forum/thread-114913-1-1.html)，我选的是8M那个。\n\n1. 按住复位键再插电源，等所有网囗指示灯一闪一闪后松开复位按钮，然后在浏览器中输入192.168.1.1进入控制台刷机页面\n2. 点击固件升级、上传下载来的固件(*.bin)的固件。\n3. 刷成功后，等路由器的设置的灯不再闪了，就说明重新开机成功了。\n\n### III. 其他小坑\n\n好吧，由于我的是**特别的**电信路由器，我这边还必须需要配置下lan口为静态ip，并且配置`ipaddr`为非192.168.1.1的ip段，否则取不到wan口的地址，上不了网，好吧，我给配了，192.168.2.1，至此，可以正常上网工作了。\n\n### III. ShadowSocks配置\n\n原本我是打算参照[这个](http://hong.im/2014/03/16/configure-an-openwrt-based-router-to-use-shadowsocks-and-redirect-foreign-traffic/)教程搞shadowsocks的，但是猛然在执行一半时候发现，这个固件既然已经安装了`shadowsocks-libev-spec`，显然是已经支持了，我再看了下设置页面的扩展，果然有。于是乎，嘿嘿。。\n\n唯一需要注意的地方是: 配置文件`config.json`的格式是:\n\n```\n{\n    \"server\":\"[服务器IP地址]\",\n    \"server_port\":[服务器端口],\n    \"local_port\":[本地端口,稍后iptables会用到],\n    \"password\":\"[密码]\",\n    \"timeout\":600,\n    \"method\":\"[加密方式]\"\n}\n```\n\n> 大功告成!\n\n---\n\n- [TP-Link WR720N刷入OpenWrt之一：刷入](http://seak.me/archives/125)\n- [wifi client mode with static ip](https://forum.openwrt.org/viewtopic.php?id=29667)\n- [OpenWrt and WPA wireless setup](http://developwithguru.com/openwrt-and-wpa-wireless-setup/)\n- [openwrt 刷机包](http://downloads.openwrt.org/snapshots/trunk/ar71xx/generic/)\n- [指定DNS服务器](http://www.right.com.cn/forum/thread-46811-1-1.html)\n- [OpenWrt Download](http://downloads.openwrt.org.cn/)\n- [DNS errot](https://forum.openwrt.org/viewtopic.php?id=16929)\n- [WR84n v7 改造](http://www.right.com.cn/forum/forum.php?mod=viewthread&tid=170441&highlight=wr841n)\n- [不死uBoot](http://www.right.com.cn/forum/thread-136444-1-1.html)\n- [AR/QCA/MT7620 Breed, ，功能强大的多线程 Bootloader](http://www.right.com.cn/forum/thread-161906-1-1.html)\n- [AR系列OPENWRT固件--带是像鬼qos,qosv4,下载,vpn,翻wall等](http://www.right.com.cn/forum/thread-139399-1-1.html)\n- [OpenWrt ar71xx系列 for BB r46516 4M](http://www.right.com.cn/forum/thread-114913-1-1.html)\n- [OpenWrt智能、自动、透明翻墙](https://github.com/softwaredownload/openwrt-fanqiang)\n\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2015/09/05/TP-Link-WR841N-V7-OpenWrt-ShadowSocks","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66i4001795buq99qptwo","content":"<blockquote>\n<p>由于家里，有ipad、iphone、小米手机、小米盒子…，一直一来我都是用shadowsocks协助翻墙，Android配起来还快，iphone和ipad很是苦恼，没有越狱就只能在Shadowsocks自带app上玩玩，小米盒子就更不用想了，因此就琢磨着给路由器直接翻墙。</p>\n</blockquote>\n<p>刚开始是家里刚好有一台TP-Link WR720N，根据网上的教程很快的就刷好了，配了wireless，network，眼看可以了，但是开始整挂载，luci，shadowsocks时，才发现可是蛋疼的是只有4M内存，做起事来畏首畏尾，各种提示没有空间，…咋办，淘宝了下，直接入手了一台别人搞好的（包括硬件与软件）TP-Link WR841n v7，但是考虑到路由器的安全问题，还是打算把里面的软的全部重新刷过，重新配。</p>\n<a id=\"more\"></a>\n<h2 id=\"简单说明\"><a href=\"#简单说明\" class=\"headerlink\" title=\"简单说明\"></a>简单说明</h2><h3 id=\"I-刷入了Bootloader\"><a href=\"#I-刷入了Bootloader\" class=\"headerlink\" title=\"I.  刷入了Bootloader\"></a>I.  刷入了Bootloader</h3><blockquote>\n<p>根据此 <a href=\"http://www.right.com.cn/forum/thread-161906-1-1.html\" target=\"_blank\" rel=\"external\">AR/QCA/MT7620 Breed, ，功能强大的多线程 Bootloader</a>，可以配合<a href=\"http://www.right.com.cn/forum/thread-136444-1-1.html\" target=\"_blank\" rel=\"external\">不死uBoot</a>这里的配置表看看对应的机型对应要下载对应的硬件配置。</p>\n</blockquote>\n<ol>\n<li>按住复位键再插电源，等所有网囗指示灯一闪一闪后松开复位按钮，然后在浏览器中输入192.168.1.1进入控制台刷机页面</li>\n<li>根据路由器机器背面的说明，录入MAC地址与PIN。</li>\n<li>完成。</li>\n</ol>\n<h3 id=\"II-刷入固件\"><a href=\"#II-刷入固件\" class=\"headerlink\" title=\"II. 刷入固件\"></a>II. 刷入固件</h3><p>原本我选用的是: <a href=\"http://www.right.com.cn/forum/thread-139399-1-1.html\" target=\"_blank\" rel=\"external\">AR系列OPENWRT固件–带是像鬼qos,qosv4,下载,vpn,翻wall等</a>，后来发现比较大，带的东西比较多，大神做的东西果断是给力啊，但是就是界面无法接受了点，后来就选用了设置页面好看，固件小够用的<a href=\"http://www.right.com.cn/forum/thread-114913-1-1.html\" target=\"_blank\" rel=\"external\">OpenWrt ar71xx系列 for BB r46516 4M</a>，我选的是8M那个。</p>\n<ol>\n<li>按住复位键再插电源，等所有网囗指示灯一闪一闪后松开复位按钮，然后在浏览器中输入192.168.1.1进入控制台刷机页面</li>\n<li>点击固件升级、上传下载来的固件(*.bin)的固件。</li>\n<li>刷成功后，等路由器的设置的灯不再闪了，就说明重新开机成功了。</li>\n</ol>\n<h3 id=\"III-其他小坑\"><a href=\"#III-其他小坑\" class=\"headerlink\" title=\"III. 其他小坑\"></a>III. 其他小坑</h3><p>好吧，由于我的是<strong>特别的</strong>电信路由器，我这边还必须需要配置下lan口为静态ip，并且配置<code>ipaddr</code>为非192.168.1.1的ip段，否则取不到wan口的地址，上不了网，好吧，我给配了，192.168.2.1，至此，可以正常上网工作了。</p>\n<h3 id=\"III-ShadowSocks配置\"><a href=\"#III-ShadowSocks配置\" class=\"headerlink\" title=\"III. ShadowSocks配置\"></a>III. ShadowSocks配置</h3><p>原本我是打算参照<a href=\"http://hong.im/2014/03/16/configure-an-openwrt-based-router-to-use-shadowsocks-and-redirect-foreign-traffic/\" target=\"_blank\" rel=\"external\">这个</a>教程搞shadowsocks的，但是猛然在执行一半时候发现，这个固件既然已经安装了<code>shadowsocks-libev-spec</code>，显然是已经支持了，我再看了下设置页面的扩展，果然有。于是乎，嘿嘿。。</p>\n<p>唯一需要注意的地方是: 配置文件<code>config.json</code>的格式是:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"server\"</span>:<span class=\"string\">\"[服务器IP地址]\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"server_port\"</span>:[服务器端口],</div><div class=\"line\">    <span class=\"attr\">\"local_port\"</span>:[本地端口,稍后iptables会用到],</div><div class=\"line\">    <span class=\"attr\">\"password\"</span>:<span class=\"string\">\"[密码]\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"timeout\"</span>:<span class=\"number\">600</span>,</div><div class=\"line\">    <span class=\"attr\">\"method\"</span>:<span class=\"string\">\"[加密方式]\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>大功告成!</p>\n</blockquote>\n<hr>\n<ul>\n<li><a href=\"http://seak.me/archives/125\" target=\"_blank\" rel=\"external\">TP-Link WR720N刷入OpenWrt之一：刷入</a></li>\n<li><a href=\"https://forum.openwrt.org/viewtopic.php?id=29667\" target=\"_blank\" rel=\"external\">wifi client mode with static ip</a></li>\n<li><a href=\"http://developwithguru.com/openwrt-and-wpa-wireless-setup/\" target=\"_blank\" rel=\"external\">OpenWrt and WPA wireless setup</a></li>\n<li><a href=\"http://downloads.openwrt.org/snapshots/trunk/ar71xx/generic/\" target=\"_blank\" rel=\"external\">openwrt 刷机包</a></li>\n<li><a href=\"http://www.right.com.cn/forum/thread-46811-1-1.html\" target=\"_blank\" rel=\"external\">指定DNS服务器</a></li>\n<li><a href=\"http://downloads.openwrt.org.cn/\" target=\"_blank\" rel=\"external\">OpenWrt Download</a></li>\n<li><a href=\"https://forum.openwrt.org/viewtopic.php?id=16929\" target=\"_blank\" rel=\"external\">DNS errot</a></li>\n<li><a href=\"http://www.right.com.cn/forum/forum.php?mod=viewthread&amp;tid=170441&amp;highlight=wr841n\" target=\"_blank\" rel=\"external\">WR84n v7 改造</a></li>\n<li><a href=\"http://www.right.com.cn/forum/thread-136444-1-1.html\" target=\"_blank\" rel=\"external\">不死uBoot</a></li>\n<li><a href=\"http://www.right.com.cn/forum/thread-161906-1-1.html\" target=\"_blank\" rel=\"external\">AR/QCA/MT7620 Breed, ，功能强大的多线程 Bootloader</a></li>\n<li><a href=\"http://www.right.com.cn/forum/thread-139399-1-1.html\" target=\"_blank\" rel=\"external\">AR系列OPENWRT固件–带是像鬼qos,qosv4,下载,vpn,翻wall等</a></li>\n<li><a href=\"http://www.right.com.cn/forum/thread-114913-1-1.html\" target=\"_blank\" rel=\"external\">OpenWrt ar71xx系列 for BB r46516 4M</a></li>\n<li><a href=\"https://github.com/softwaredownload/openwrt-fanqiang\" target=\"_blank\" rel=\"external\">OpenWrt智能、自动、透明翻墙</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>由于家里，有ipad、iphone、小米手机、小米盒子…，一直一来我都是用shadowsocks协助翻墙，Android配起来还快，iphone和ipad很是苦恼，没有越狱就只能在Shadowsocks自带app上玩玩，小米盒子就更不用想了，因此就琢磨着给路由器直接翻墙。</p>\n</blockquote>\n<p>刚开始是家里刚好有一台TP-Link WR720N，根据网上的教程很快的就刷好了，配了wireless，network，眼看可以了，但是开始整挂载，luci，shadowsocks时，才发现可是蛋疼的是只有4M内存，做起事来畏首畏尾，各种提示没有空间，…咋办，淘宝了下，直接入手了一台别人搞好的（包括硬件与软件）TP-Link WR841n v7，但是考虑到路由器的安全问题，还是打算把里面的软的全部重新刷过，重新配。</p>","more":"<h2 id=\"简单说明\"><a href=\"#简单说明\" class=\"headerlink\" title=\"简单说明\"></a>简单说明</h2><h3 id=\"I-刷入了Bootloader\"><a href=\"#I-刷入了Bootloader\" class=\"headerlink\" title=\"I.  刷入了Bootloader\"></a>I.  刷入了Bootloader</h3><blockquote>\n<p>根据此 <a href=\"http://www.right.com.cn/forum/thread-161906-1-1.html\">AR/QCA/MT7620 Breed, ，功能强大的多线程 Bootloader</a>，可以配合<a href=\"http://www.right.com.cn/forum/thread-136444-1-1.html\">不死uBoot</a>这里的配置表看看对应的机型对应要下载对应的硬件配置。</p>\n</blockquote>\n<ol>\n<li>按住复位键再插电源，等所有网囗指示灯一闪一闪后松开复位按钮，然后在浏览器中输入192.168.1.1进入控制台刷机页面</li>\n<li>根据路由器机器背面的说明，录入MAC地址与PIN。</li>\n<li>完成。</li>\n</ol>\n<h3 id=\"II-刷入固件\"><a href=\"#II-刷入固件\" class=\"headerlink\" title=\"II. 刷入固件\"></a>II. 刷入固件</h3><p>原本我选用的是: <a href=\"http://www.right.com.cn/forum/thread-139399-1-1.html\">AR系列OPENWRT固件–带是像鬼qos,qosv4,下载,vpn,翻wall等</a>，后来发现比较大，带的东西比较多，大神做的东西果断是给力啊，但是就是界面无法接受了点，后来就选用了设置页面好看，固件小够用的<a href=\"http://www.right.com.cn/forum/thread-114913-1-1.html\">OpenWrt ar71xx系列 for BB r46516 4M</a>，我选的是8M那个。</p>\n<ol>\n<li>按住复位键再插电源，等所有网囗指示灯一闪一闪后松开复位按钮，然后在浏览器中输入192.168.1.1进入控制台刷机页面</li>\n<li>点击固件升级、上传下载来的固件(*.bin)的固件。</li>\n<li>刷成功后，等路由器的设置的灯不再闪了，就说明重新开机成功了。</li>\n</ol>\n<h3 id=\"III-其他小坑\"><a href=\"#III-其他小坑\" class=\"headerlink\" title=\"III. 其他小坑\"></a>III. 其他小坑</h3><p>好吧，由于我的是<strong>特别的</strong>电信路由器，我这边还必须需要配置下lan口为静态ip，并且配置<code>ipaddr</code>为非192.168.1.1的ip段，否则取不到wan口的地址，上不了网，好吧，我给配了，192.168.2.1，至此，可以正常上网工作了。</p>\n<h3 id=\"III-ShadowSocks配置\"><a href=\"#III-ShadowSocks配置\" class=\"headerlink\" title=\"III. ShadowSocks配置\"></a>III. ShadowSocks配置</h3><p>原本我是打算参照<a href=\"http://hong.im/2014/03/16/configure-an-openwrt-based-router-to-use-shadowsocks-and-redirect-foreign-traffic/\">这个</a>教程搞shadowsocks的，但是猛然在执行一半时候发现，这个固件既然已经安装了<code>shadowsocks-libev-spec</code>，显然是已经支持了，我再看了下设置页面的扩展，果然有。于是乎，嘿嘿。。</p>\n<p>唯一需要注意的地方是: 配置文件<code>config.json</code>的格式是:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"server\"</span>:<span class=\"string\">\"[服务器IP地址]\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"server_port\"</span>:[服务器端口],</div><div class=\"line\">    <span class=\"attr\">\"local_port\"</span>:[本地端口,稍后iptables会用到],</div><div class=\"line\">    <span class=\"attr\">\"password\"</span>:<span class=\"string\">\"[密码]\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"timeout\"</span>:<span class=\"number\">600</span>,</div><div class=\"line\">    <span class=\"attr\">\"method\"</span>:<span class=\"string\">\"[加密方式]\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>大功告成!</p>\n</blockquote>\n<hr>\n<ul>\n<li><a href=\"http://seak.me/archives/125\">TP-Link WR720N刷入OpenWrt之一：刷入</a></li>\n<li><a href=\"https://forum.openwrt.org/viewtopic.php?id=29667\">wifi client mode with static ip</a></li>\n<li><a href=\"http://developwithguru.com/openwrt-and-wpa-wireless-setup/\">OpenWrt and WPA wireless setup</a></li>\n<li><a href=\"http://downloads.openwrt.org/snapshots/trunk/ar71xx/generic/\">openwrt 刷机包</a></li>\n<li><a href=\"http://www.right.com.cn/forum/thread-46811-1-1.html\">指定DNS服务器</a></li>\n<li><a href=\"http://downloads.openwrt.org.cn/\">OpenWrt Download</a></li>\n<li><a href=\"https://forum.openwrt.org/viewtopic.php?id=16929\">DNS errot</a></li>\n<li><a href=\"http://www.right.com.cn/forum/forum.php?mod=viewthread&amp;tid=170441&amp;highlight=wr841n\">WR84n v7 改造</a></li>\n<li><a href=\"http://www.right.com.cn/forum/thread-136444-1-1.html\">不死uBoot</a></li>\n<li><a href=\"http://www.right.com.cn/forum/thread-161906-1-1.html\">AR/QCA/MT7620 Breed, ，功能强大的多线程 Bootloader</a></li>\n<li><a href=\"http://www.right.com.cn/forum/thread-139399-1-1.html\">AR系列OPENWRT固件–带是像鬼qos,qosv4,下载,vpn,翻wall等</a></li>\n<li><a href=\"http://www.right.com.cn/forum/thread-114913-1-1.html\">OpenWrt ar71xx系列 for BB r46516 4M</a></li>\n<li><a href=\"https://github.com/softwaredownload/openwrt-fanqiang\">OpenWrt智能、自动、透明翻墙</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"Workflows Proxy","date":"2014-12-08T00:35:03.000Z","_content":"\n## 1. 准备工具:\n\n- Android Application: fqrouter\n- Mac Application: Alfred\n\n## 2. 工具配置\n\n2.1 为Alfred 安装上proxy插件\n\n2.2 进入插件目录，双击Authenticate.app输入Mac的用户名密码（由于代理修改需要权限）\n\n<!--more-->\n## 3. 使用\n\n1. fqrouter开启以后，会提示在同一局域网下，配置自动web代理为：http://xxx.xxx.xxx.xxx:2515即可实现翻墙\n2. 此时Mac端用Alfred输入对应的即可：\n\n\n`switch Tencent proxy and Home Proxy `\n\n### 1. Switch to the Tencent Proxy:\n![image](https://github.com/Jacksgong/workflows-proxy/raw/master/readme/raw_qq.png)\n### 2. Switch to the DIY Home Proxy:\n![image](https://github.com/Jacksgong/workflows-proxy/raw/master/readme/raw_diy.png)\n### 3. Close Automatic Proxy:\n![image](https://github.com/Jacksgong/workflows-proxy/raw/master/readme/raw_off.png)\n### 4. Show Automatic Proxy Status:\n![image](https://github.com/Jacksgong/workflows-proxy/raw/master/readme/raw_show.png)\n\n## 4. DIY\n\n这个Alfred workflow我是根据我的个人需求定制的，如果需要调整的，可以在对应根目录下的proxy.py进行修改:\n\n```\n__author__ = 'jacksgong'\n\nimport sys\nimport os\nfrom workflow import Workflow, ICON_WEB, web\n\ndef main(wf):\n\n    params = wf.args[0]\n\n    echo_qq = 'http://txp-01.tencent.com/proxy.pac'\n    echo_off = 'off'\n    echo_pre = 'networksetup -setautoproxyurl Wi-Fi '\n    echo_diy_pre = 'http://192.168.'\n    echo_diy_end = ':2516'\n\n    if params.startswith('q') :\n        wf.add_item(echo_qq,'switch to Tencent proxy',arg =echo_qq,uid=0,valid=True, icon = './qq-proxy.png')\n    elif params.startswith('o') :\n        wf.add_item(echo_off,'off wifi proxy',arg = echo_off, uid = 0, valid= True, icon = './off.png')\n    elif params.startswith('s') :\n        status  = os.popen('networksetup -getautoproxyurl wi-fi').read()\n        statusList = status.splitlines()\n        ip = statusList[0]\n        enable = statusList[1]\n\n        wf.add_item(ip,enable, arg =('current status: '+ status),uid = 0)\n    else:\n        diy = echo_diy_pre + params + echo_diy_end\n        wf.add_item(diy,'switch to ' + diy + ' proxy', arg =diy, uid = 0, valid = True, icon = './others-proxy.png')\n\n\n    wf.send_feedback()\n\nif __name__ == '__main__':\n    wf = Workflow()\n    sys.exit(wf.run(main))\n```\n\n## 5. 开源\n\nGITHUB: https://github.com/Jacksgong/workflows-proxy\n","source":"_posts/Workflows-Proxy.md","raw":"title: Workflows Proxy\ndate: 2014-12-08 08:35:03\npermalink: 2014/12/08/Workflows-Proxy\ntags:\n- mac\n- proxy\n- python\n- 代理\n- 项目\n\n---\n\n## 1. 准备工具:\n\n- Android Application: fqrouter\n- Mac Application: Alfred\n\n## 2. 工具配置\n\n2.1 为Alfred 安装上proxy插件\n\n2.2 进入插件目录，双击Authenticate.app输入Mac的用户名密码（由于代理修改需要权限）\n\n<!--more-->\n## 3. 使用\n\n1. fqrouter开启以后，会提示在同一局域网下，配置自动web代理为：http://xxx.xxx.xxx.xxx:2515即可实现翻墙\n2. 此时Mac端用Alfred输入对应的即可：\n\n\n`switch Tencent proxy and Home Proxy `\n\n### 1. Switch to the Tencent Proxy:\n![image](https://github.com/Jacksgong/workflows-proxy/raw/master/readme/raw_qq.png)\n### 2. Switch to the DIY Home Proxy:\n![image](https://github.com/Jacksgong/workflows-proxy/raw/master/readme/raw_diy.png)\n### 3. Close Automatic Proxy:\n![image](https://github.com/Jacksgong/workflows-proxy/raw/master/readme/raw_off.png)\n### 4. Show Automatic Proxy Status:\n![image](https://github.com/Jacksgong/workflows-proxy/raw/master/readme/raw_show.png)\n\n## 4. DIY\n\n这个Alfred workflow我是根据我的个人需求定制的，如果需要调整的，可以在对应根目录下的proxy.py进行修改:\n\n```\n__author__ = 'jacksgong'\n\nimport sys\nimport os\nfrom workflow import Workflow, ICON_WEB, web\n\ndef main(wf):\n\n    params = wf.args[0]\n\n    echo_qq = 'http://txp-01.tencent.com/proxy.pac'\n    echo_off = 'off'\n    echo_pre = 'networksetup -setautoproxyurl Wi-Fi '\n    echo_diy_pre = 'http://192.168.'\n    echo_diy_end = ':2516'\n\n    if params.startswith('q') :\n        wf.add_item(echo_qq,'switch to Tencent proxy',arg =echo_qq,uid=0,valid=True, icon = './qq-proxy.png')\n    elif params.startswith('o') :\n        wf.add_item(echo_off,'off wifi proxy',arg = echo_off, uid = 0, valid= True, icon = './off.png')\n    elif params.startswith('s') :\n        status  = os.popen('networksetup -getautoproxyurl wi-fi').read()\n        statusList = status.splitlines()\n        ip = statusList[0]\n        enable = statusList[1]\n\n        wf.add_item(ip,enable, arg =('current status: '+ status),uid = 0)\n    else:\n        diy = echo_diy_pre + params + echo_diy_end\n        wf.add_item(diy,'switch to ' + diy + ' proxy', arg =diy, uid = 0, valid = True, icon = './others-proxy.png')\n\n\n    wf.send_feedback()\n\nif __name__ == '__main__':\n    wf = Workflow()\n    sys.exit(wf.run(main))\n```\n\n## 5. 开源\n\nGITHUB: https://github.com/Jacksgong/workflows-proxy\n","slug":"2014/12/08/Workflows-Proxy","published":1,"updated":"2017-01-26T14:52:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66i7001995bu4pcdir3o","content":"<h2 id=\"1-准备工具\"><a href=\"#1-准备工具\" class=\"headerlink\" title=\"1. 准备工具:\"></a>1. 准备工具:</h2><ul>\n<li>Android Application: fqrouter</li>\n<li>Mac Application: Alfred</li>\n</ul>\n<h2 id=\"2-工具配置\"><a href=\"#2-工具配置\" class=\"headerlink\" title=\"2. 工具配置\"></a>2. 工具配置</h2><p>2.1 为Alfred 安装上proxy插件</p>\n<p>2.2 进入插件目录，双击Authenticate.app输入Mac的用户名密码（由于代理修改需要权限）</p>\n<a id=\"more\"></a>\n<h2 id=\"3-使用\"><a href=\"#3-使用\" class=\"headerlink\" title=\"3. 使用\"></a>3. 使用</h2><ol>\n<li>fqrouter开启以后，会提示在同一局域网下，配置自动web代理为：<a href=\"http://xxx.xxx.xxx.xxx:2515即可实现翻墙\" target=\"_blank\" rel=\"external\">http://xxx.xxx.xxx.xxx:2515即可实现翻墙</a></li>\n<li>此时Mac端用Alfred输入对应的即可：</li>\n</ol>\n<p><code>switch Tencent proxy and Home Proxy</code></p>\n<h3 id=\"1-Switch-to-the-Tencent-Proxy\"><a href=\"#1-Switch-to-the-Tencent-Proxy\" class=\"headerlink\" title=\"1. Switch to the Tencent Proxy:\"></a>1. Switch to the Tencent Proxy:</h3><p><img src=\"https://github.com/Jacksgong/workflows-proxy/raw/master/readme/raw_qq.png\" alt=\"image\"></p>\n<h3 id=\"2-Switch-to-the-DIY-Home-Proxy\"><a href=\"#2-Switch-to-the-DIY-Home-Proxy\" class=\"headerlink\" title=\"2. Switch to the DIY Home Proxy:\"></a>2. Switch to the DIY Home Proxy:</h3><p><img src=\"https://github.com/Jacksgong/workflows-proxy/raw/master/readme/raw_diy.png\" alt=\"image\"></p>\n<h3 id=\"3-Close-Automatic-Proxy\"><a href=\"#3-Close-Automatic-Proxy\" class=\"headerlink\" title=\"3. Close Automatic Proxy:\"></a>3. Close Automatic Proxy:</h3><p><img src=\"https://github.com/Jacksgong/workflows-proxy/raw/master/readme/raw_off.png\" alt=\"image\"></p>\n<h3 id=\"4-Show-Automatic-Proxy-Status\"><a href=\"#4-Show-Automatic-Proxy-Status\" class=\"headerlink\" title=\"4. Show Automatic Proxy Status:\"></a>4. Show Automatic Proxy Status:</h3><p><img src=\"https://github.com/Jacksgong/workflows-proxy/raw/master/readme/raw_show.png\" alt=\"image\"></p>\n<h2 id=\"4-DIY\"><a href=\"#4-DIY\" class=\"headerlink\" title=\"4. DIY\"></a>4. DIY</h2><p>这个Alfred workflow我是根据我的个人需求定制的，如果需要调整的，可以在对应根目录下的proxy.py进行修改:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">__author__ = <span class=\"string\">'jacksgong'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"><span class=\"keyword\">from</span> workflow <span class=\"keyword\">import</span> Workflow, ICON_WEB, web</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">(wf)</span>:</span></div><div class=\"line\"></div><div class=\"line\">    params = wf.args[<span class=\"number\">0</span>]</div><div class=\"line\"></div><div class=\"line\">    echo_qq = <span class=\"string\">'http://txp-01.tencent.com/proxy.pac'</span></div><div class=\"line\">    echo_off = <span class=\"string\">'off'</span></div><div class=\"line\">    echo_pre = <span class=\"string\">'networksetup -setautoproxyurl Wi-Fi '</span></div><div class=\"line\">    echo_diy_pre = <span class=\"string\">'http://192.168.'</span></div><div class=\"line\">    echo_diy_end = <span class=\"string\">':2516'</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> params.startswith(<span class=\"string\">'q'</span>) :</div><div class=\"line\">        wf.add_item(echo_qq,<span class=\"string\">'switch to Tencent proxy'</span>,arg =echo_qq,uid=<span class=\"number\">0</span>,valid=<span class=\"keyword\">True</span>, icon = <span class=\"string\">'./qq-proxy.png'</span>)</div><div class=\"line\">    <span class=\"keyword\">elif</span> params.startswith(<span class=\"string\">'o'</span>) :</div><div class=\"line\">        wf.add_item(echo_off,<span class=\"string\">'off wifi proxy'</span>,arg = echo_off, uid = <span class=\"number\">0</span>, valid= <span class=\"keyword\">True</span>, icon = <span class=\"string\">'./off.png'</span>)</div><div class=\"line\">    <span class=\"keyword\">elif</span> params.startswith(<span class=\"string\">'s'</span>) :</div><div class=\"line\">        status  = os.popen(<span class=\"string\">'networksetup -getautoproxyurl wi-fi'</span>).read()</div><div class=\"line\">        statusList = status.splitlines()</div><div class=\"line\">        ip = statusList[<span class=\"number\">0</span>]</div><div class=\"line\">        enable = statusList[<span class=\"number\">1</span>]</div><div class=\"line\"></div><div class=\"line\">        wf.add_item(ip,enable, arg =(<span class=\"string\">'current status: '</span>+ status),uid = <span class=\"number\">0</span>)</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        diy = echo_diy_pre + params + echo_diy_end</div><div class=\"line\">        wf.add_item(diy,<span class=\"string\">'switch to '</span> + diy + <span class=\"string\">' proxy'</span>, arg =diy, uid = <span class=\"number\">0</span>, valid = <span class=\"keyword\">True</span>, icon = <span class=\"string\">'./others-proxy.png'</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    wf.send_feedback()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    wf = Workflow()</div><div class=\"line\">    sys.exit(wf.run(main))</div></pre></td></tr></table></figure>\n<h2 id=\"5-开源\"><a href=\"#5-开源\" class=\"headerlink\" title=\"5. 开源\"></a>5. 开源</h2><p>GITHUB: <a href=\"https://github.com/Jacksgong/workflows-proxy\" target=\"_blank\" rel=\"external\">https://github.com/Jacksgong/workflows-proxy</a></p>\n","excerpt":"<h2 id=\"1-准备工具\"><a href=\"#1-准备工具\" class=\"headerlink\" title=\"1. 准备工具:\"></a>1. 准备工具:</h2><ul>\n<li>Android Application: fqrouter</li>\n<li>Mac Application: Alfred</li>\n</ul>\n<h2 id=\"2-工具配置\"><a href=\"#2-工具配置\" class=\"headerlink\" title=\"2. 工具配置\"></a>2. 工具配置</h2><p>2.1 为Alfred 安装上proxy插件</p>\n<p>2.2 进入插件目录，双击Authenticate.app输入Mac的用户名密码（由于代理修改需要权限）</p>","more":"<h2 id=\"3-使用\"><a href=\"#3-使用\" class=\"headerlink\" title=\"3. 使用\"></a>3. 使用</h2><ol>\n<li>fqrouter开启以后，会提示在同一局域网下，配置自动web代理为：<a href=\"http://xxx.xxx.xxx.xxx:2515即可实现翻墙\">http://xxx.xxx.xxx.xxx:2515即可实现翻墙</a></li>\n<li>此时Mac端用Alfred输入对应的即可：</li>\n</ol>\n<p><code>switch Tencent proxy and Home Proxy</code></p>\n<h3 id=\"1-Switch-to-the-Tencent-Proxy\"><a href=\"#1-Switch-to-the-Tencent-Proxy\" class=\"headerlink\" title=\"1. Switch to the Tencent Proxy:\"></a>1. Switch to the Tencent Proxy:</h3><p><img src=\"https://github.com/Jacksgong/workflows-proxy/raw/master/readme/raw_qq.png\" alt=\"image\"></p>\n<h3 id=\"2-Switch-to-the-DIY-Home-Proxy\"><a href=\"#2-Switch-to-the-DIY-Home-Proxy\" class=\"headerlink\" title=\"2. Switch to the DIY Home Proxy:\"></a>2. Switch to the DIY Home Proxy:</h3><p><img src=\"https://github.com/Jacksgong/workflows-proxy/raw/master/readme/raw_diy.png\" alt=\"image\"></p>\n<h3 id=\"3-Close-Automatic-Proxy\"><a href=\"#3-Close-Automatic-Proxy\" class=\"headerlink\" title=\"3. Close Automatic Proxy:\"></a>3. Close Automatic Proxy:</h3><p><img src=\"https://github.com/Jacksgong/workflows-proxy/raw/master/readme/raw_off.png\" alt=\"image\"></p>\n<h3 id=\"4-Show-Automatic-Proxy-Status\"><a href=\"#4-Show-Automatic-Proxy-Status\" class=\"headerlink\" title=\"4. Show Automatic Proxy Status:\"></a>4. Show Automatic Proxy Status:</h3><p><img src=\"https://github.com/Jacksgong/workflows-proxy/raw/master/readme/raw_show.png\" alt=\"image\"></p>\n<h2 id=\"4-DIY\"><a href=\"#4-DIY\" class=\"headerlink\" title=\"4. DIY\"></a>4. DIY</h2><p>这个Alfred workflow我是根据我的个人需求定制的，如果需要调整的，可以在对应根目录下的proxy.py进行修改:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">__author__ = <span class=\"string\">'jacksgong'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"><span class=\"keyword\">from</span> workflow <span class=\"keyword\">import</span> Workflow, ICON_WEB, web</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">(wf)</span>:</span></div><div class=\"line\"></div><div class=\"line\">    params = wf.args[<span class=\"number\">0</span>]</div><div class=\"line\"></div><div class=\"line\">    echo_qq = <span class=\"string\">'http://txp-01.tencent.com/proxy.pac'</span></div><div class=\"line\">    echo_off = <span class=\"string\">'off'</span></div><div class=\"line\">    echo_pre = <span class=\"string\">'networksetup -setautoproxyurl Wi-Fi '</span></div><div class=\"line\">    echo_diy_pre = <span class=\"string\">'http://192.168.'</span></div><div class=\"line\">    echo_diy_end = <span class=\"string\">':2516'</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> params.startswith(<span class=\"string\">'q'</span>) :</div><div class=\"line\">        wf.add_item(echo_qq,<span class=\"string\">'switch to Tencent proxy'</span>,arg =echo_qq,uid=<span class=\"number\">0</span>,valid=<span class=\"keyword\">True</span>, icon = <span class=\"string\">'./qq-proxy.png'</span>)</div><div class=\"line\">    <span class=\"keyword\">elif</span> params.startswith(<span class=\"string\">'o'</span>) :</div><div class=\"line\">        wf.add_item(echo_off,<span class=\"string\">'off wifi proxy'</span>,arg = echo_off, uid = <span class=\"number\">0</span>, valid= <span class=\"keyword\">True</span>, icon = <span class=\"string\">'./off.png'</span>)</div><div class=\"line\">    <span class=\"keyword\">elif</span> params.startswith(<span class=\"string\">'s'</span>) :</div><div class=\"line\">        status  = os.popen(<span class=\"string\">'networksetup -getautoproxyurl wi-fi'</span>).read()</div><div class=\"line\">        statusList = status.splitlines()</div><div class=\"line\">        ip = statusList[<span class=\"number\">0</span>]</div><div class=\"line\">        enable = statusList[<span class=\"number\">1</span>]</div><div class=\"line\"></div><div class=\"line\">        wf.add_item(ip,enable, arg =(<span class=\"string\">'current status: '</span>+ status),uid = <span class=\"number\">0</span>)</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        diy = echo_diy_pre + params + echo_diy_end</div><div class=\"line\">        wf.add_item(diy,<span class=\"string\">'switch to '</span> + diy + <span class=\"string\">' proxy'</span>, arg =diy, uid = <span class=\"number\">0</span>, valid = <span class=\"keyword\">True</span>, icon = <span class=\"string\">'./others-proxy.png'</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    wf.send_feedback()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    wf = Workflow()</div><div class=\"line\">    sys.exit(wf.run(main))</div></pre></td></tr></table></figure>\n<h2 id=\"5-开源\"><a href=\"#5-开源\" class=\"headerlink\" title=\"5. 开源\"></a>5. 开源</h2><p>GITHUB: <a href=\"https://github.com/Jacksgong/workflows-proxy\">https://github.com/Jacksgong/workflows-proxy</a></p>"},{"title":"笔记-谷歌是如何做代码审查的","date":"2015-03-22T22:35:03.000Z","_content":"\n#谷歌是如何做代码审查的\n\n## 全文地址\n[http://www.vaikan.com/things-everyone-should-do-code-review/#rd?sukey=da680bc217eb087538818c97c8e90f0b1384fef40154c0000c175c180ac5e233ee565fdb662087e0ddef5e73232c8528](http://www.vaikan.com/things-everyone-should-do-code-review/#rd?sukey=da680bc217eb087538818c97c8e90f0b1384fef40154c0000c175c180ac5e233ee565fdb662087e0ddef5e73232c8528)\n\n## 前言\n\n在Google，没有程序，任何产品、任何项目的程序代码，可以在没有经过有效的代码审查前提交到代码库里\n\n<!--more-->\n## I. 能得到什么?\n\n1. 防止Bug混入\n2. 会改善人们的编程态度（由于知道将会有通知检查代码）\n3. 代码熟悉的传播，减少人员分险\n\n## II. 原则\n\n作为代码审计方，只需要确认它是正确的就好\n\n## III. 需要避免的\n\n1. 在审查时，要避免以编程风格是否符合自己的标准来评价\n2. 在审查时，要避免过多评论，或不要评论。（可以评论如：哎呦，不错哦）不需要太多主管臆断\n3. 在审查时，要避免消耗太多时间。\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/[笔记]谷歌是如何做代码审查的.md","raw":"title: 笔记-谷歌是如何做代码审查的\ndate: 2015-03-23 06:35:03\npermalink: 2015/03/23/[笔记]谷歌是如何做代码审查的\ntags:\n- 代码审查\n- Google\n- 管理\n\n---\n\n#谷歌是如何做代码审查的\n\n## 全文地址\n[http://www.vaikan.com/things-everyone-should-do-code-review/#rd?sukey=da680bc217eb087538818c97c8e90f0b1384fef40154c0000c175c180ac5e233ee565fdb662087e0ddef5e73232c8528](http://www.vaikan.com/things-everyone-should-do-code-review/#rd?sukey=da680bc217eb087538818c97c8e90f0b1384fef40154c0000c175c180ac5e233ee565fdb662087e0ddef5e73232c8528)\n\n## 前言\n\n在Google，没有程序，任何产品、任何项目的程序代码，可以在没有经过有效的代码审查前提交到代码库里\n\n<!--more-->\n## I. 能得到什么?\n\n1. 防止Bug混入\n2. 会改善人们的编程态度（由于知道将会有通知检查代码）\n3. 代码熟悉的传播，减少人员分险\n\n## II. 原则\n\n作为代码审计方，只需要确认它是正确的就好\n\n## III. 需要避免的\n\n1. 在审查时，要避免以编程风格是否符合自己的标准来评价\n2. 在审查时，要避免过多评论，或不要评论。（可以评论如：哎呦，不错哦）不需要太多主管臆断\n3. 在审查时，要避免消耗太多时间。\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2015/03/23/[笔记]谷歌是如何做代码审查的","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66i8001b95buyl0bwiy6","content":"<p>#谷歌是如何做代码审查的</p>\n<h2 id=\"全文地址\"><a href=\"#全文地址\" class=\"headerlink\" title=\"全文地址\"></a>全文地址</h2><p><a href=\"http://www.vaikan.com/things-everyone-should-do-code-review/#rd?sukey=da680bc217eb087538818c97c8e90f0b1384fef40154c0000c175c180ac5e233ee565fdb662087e0ddef5e73232c8528\" target=\"_blank\" rel=\"external\">http://www.vaikan.com/things-everyone-should-do-code-review/#rd?sukey=da680bc217eb087538818c97c8e90f0b1384fef40154c0000c175c180ac5e233ee565fdb662087e0ddef5e73232c8528</a></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在Google，没有程序，任何产品、任何项目的程序代码，可以在没有经过有效的代码审查前提交到代码库里</p>\n<a id=\"more\"></a>\n<h2 id=\"I-能得到什么\"><a href=\"#I-能得到什么\" class=\"headerlink\" title=\"I. 能得到什么?\"></a>I. 能得到什么?</h2><ol>\n<li>防止Bug混入</li>\n<li>会改善人们的编程态度（由于知道将会有通知检查代码）</li>\n<li>代码熟悉的传播，减少人员分险</li>\n</ol>\n<h2 id=\"II-原则\"><a href=\"#II-原则\" class=\"headerlink\" title=\"II. 原则\"></a>II. 原则</h2><p>作为代码审计方，只需要确认它是正确的就好</p>\n<h2 id=\"III-需要避免的\"><a href=\"#III-需要避免的\" class=\"headerlink\" title=\"III. 需要避免的\"></a>III. 需要避免的</h2><ol>\n<li>在审查时，要避免以编程风格是否符合自己的标准来评价</li>\n<li>在审查时，要避免过多评论，或不要评论。（可以评论如：哎呦，不错哦）不需要太多主管臆断</li>\n<li>在审查时，要避免消耗太多时间。</li>\n</ol>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<p>#谷歌是如何做代码审查的</p>\n<h2 id=\"全文地址\"><a href=\"#全文地址\" class=\"headerlink\" title=\"全文地址\"></a>全文地址</h2><p><a href=\"http://www.vaikan.com/things-everyone-should-do-code-review/#rd?sukey=da680bc217eb087538818c97c8e90f0b1384fef40154c0000c175c180ac5e233ee565fdb662087e0ddef5e73232c8528\">http://www.vaikan.com/things-everyone-should-do-code-review/#rd?sukey=da680bc217eb087538818c97c8e90f0b1384fef40154c0000c175c180ac5e233ee565fdb662087e0ddef5e73232c8528</a></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在Google，没有程序，任何产品、任何项目的程序代码，可以在没有经过有效的代码审查前提交到代码库里</p>","more":"<h2 id=\"I-能得到什么\"><a href=\"#I-能得到什么\" class=\"headerlink\" title=\"I. 能得到什么?\"></a>I. 能得到什么?</h2><ol>\n<li>防止Bug混入</li>\n<li>会改善人们的编程态度（由于知道将会有通知检查代码）</li>\n<li>代码熟悉的传播，减少人员分险</li>\n</ol>\n<h2 id=\"II-原则\"><a href=\"#II-原则\" class=\"headerlink\" title=\"II. 原则\"></a>II. 原则</h2><p>作为代码审计方，只需要确认它是正确的就好</p>\n<h2 id=\"III-需要避免的\"><a href=\"#III-需要避免的\" class=\"headerlink\" title=\"III. 需要避免的\"></a>III. 需要避免的</h2><ol>\n<li>在审查时，要避免以编程风格是否符合自己的标准来评价</li>\n<li>在审查时，要避免过多评论，或不要评论。（可以评论如：哎呦，不错哦）不需要太多主管臆断</li>\n<li>在审查时，要避免消耗太多时间。</li>\n</ol>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"我心目中的支付宝架构","date":"2017-01-26T05:56:03.000Z","_content":"\n## 前言\n\n虽然不是我的工作中心，但是看到支付宝的架构体系存在一些我认为可以优化的点，因此在周末时，我还是希望自己能够回归技术探究，因此写了一些的根据自己短暂的工作经验的想法的从工作流到整个架构体系的优化建议。今天就谈谈我想要的架构体系优化，虽然最后因为一些原因**没有在支付宝中推动起来**，但是大家可以交流交流，这个简单的体系并不耦合于支付宝体系本身。\n\n<!--more-->\n\n## 原委\n\n现有的支付宝现有的架构体系，大家应可以通过三平的这个[沙龙](http://club.alibabatech.org/technical_preacher_detail.htm?guestId=155)中窥探，这套架构体系，在提出来的时候是十分先进的，通过每个模块从原本的\"静态库\"调整为\"共享库\"（APK），使得每个模块充分解耦并支持独立动态部署、独立的版本管理，但是也因此需要侵入期间的编译环节、随之带来了很强的侵入性（架构复杂度很高使得维护成本变得很高）、相对社区闭塞的技术发展、新技术应用门槛变高，使我想要重新审视这套架构，我总觉得在现在社区的技术而言，侵入性完全可以得到优化。\n\n## 新架构预想\n\n- 兼并已有的各模块独立开发的优势\n- 符合社区标准，利于哺乳社区与反哺社区\n- 尽量轻量，严格的性能监控\n- 严谨的架构扩张\n- 严格、行而有效的开发流程\n- 对上层尽量无感知，将学习成本降到最低，减少整合门槛\n\n![](/img/alipay-architecture-thought.png)\n\n右侧是思考了，并实践了的过渡版本，左侧的V2是预想中的支付宝架构(自己简单实践，其中的api与impl的打包可以参照[gradle-sample](https://github.com/Jacksgong/gralde-sample))。\n","source":"_posts/alipay_architecture_thought.md","raw":"title: 我心目中的支付宝架构\ndate: 2017-01-26 13:56:03\ntags:\n- Alipay\n- Architecture\n- Decoupling\n\n---\n\n## 前言\n\n虽然不是我的工作中心，但是看到支付宝的架构体系存在一些我认为可以优化的点，因此在周末时，我还是希望自己能够回归技术探究，因此写了一些的根据自己短暂的工作经验的想法的从工作流到整个架构体系的优化建议。今天就谈谈我想要的架构体系优化，虽然最后因为一些原因**没有在支付宝中推动起来**，但是大家可以交流交流，这个简单的体系并不耦合于支付宝体系本身。\n\n<!--more-->\n\n## 原委\n\n现有的支付宝现有的架构体系，大家应可以通过三平的这个[沙龙](http://club.alibabatech.org/technical_preacher_detail.htm?guestId=155)中窥探，这套架构体系，在提出来的时候是十分先进的，通过每个模块从原本的\"静态库\"调整为\"共享库\"（APK），使得每个模块充分解耦并支持独立动态部署、独立的版本管理，但是也因此需要侵入期间的编译环节、随之带来了很强的侵入性（架构复杂度很高使得维护成本变得很高）、相对社区闭塞的技术发展、新技术应用门槛变高，使我想要重新审视这套架构，我总觉得在现在社区的技术而言，侵入性完全可以得到优化。\n\n## 新架构预想\n\n- 兼并已有的各模块独立开发的优势\n- 符合社区标准，利于哺乳社区与反哺社区\n- 尽量轻量，严格的性能监控\n- 严谨的架构扩张\n- 严格、行而有效的开发流程\n- 对上层尽量无感知，将学习成本降到最低，减少整合门槛\n\n![](/img/alipay-architecture-thought.png)\n\n右侧是思考了，并实践了的过渡版本，左侧的V2是预想中的支付宝架构(自己简单实践，其中的api与impl的打包可以参照[gradle-sample](https://github.com/Jacksgong/gralde-sample))。\n","slug":"alipay_architecture_thought","published":1,"updated":"2017-01-26T14:54:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66i9001e95buzs1hudyb","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>虽然不是我的工作中心，但是看到支付宝的架构体系存在一些我认为可以优化的点，因此在周末时，我还是希望自己能够回归技术探究，因此写了一些的根据自己短暂的工作经验的想法的从工作流到整个架构体系的优化建议。今天就谈谈我想要的架构体系优化，虽然最后因为一些原因<strong>没有在支付宝中推动起来</strong>，但是大家可以交流交流，这个简单的体系并不耦合于支付宝体系本身。</p>\n<a id=\"more\"></a>\n<h2 id=\"原委\"><a href=\"#原委\" class=\"headerlink\" title=\"原委\"></a>原委</h2><p>现有的支付宝现有的架构体系，大家应可以通过三平的这个<a href=\"http://club.alibabatech.org/technical_preacher_detail.htm?guestId=155\" target=\"_blank\" rel=\"external\">沙龙</a>中窥探，这套架构体系，在提出来的时候是十分先进的，通过每个模块从原本的”静态库”调整为”共享库”（APK），使得每个模块充分解耦并支持独立动态部署、独立的版本管理，但是也因此需要侵入期间的编译环节、随之带来了很强的侵入性（架构复杂度很高使得维护成本变得很高）、相对社区闭塞的技术发展、新技术应用门槛变高，使我想要重新审视这套架构，我总觉得在现在社区的技术而言，侵入性完全可以得到优化。</p>\n<h2 id=\"新架构预想\"><a href=\"#新架构预想\" class=\"headerlink\" title=\"新架构预想\"></a>新架构预想</h2><ul>\n<li>兼并已有的各模块独立开发的优势</li>\n<li>符合社区标准，利于哺乳社区与反哺社区</li>\n<li>尽量轻量，严格的性能监控</li>\n<li>严谨的架构扩张</li>\n<li>严格、行而有效的开发流程</li>\n<li>对上层尽量无感知，将学习成本降到最低，减少整合门槛</li>\n</ul>\n<p><img src=\"/img/alipay-architecture-thought.png\" alt=\"\"></p>\n<p>右侧是思考了，并实践了的过渡版本，左侧的V2是预想中的支付宝架构(自己简单实践，其中的api与impl的打包可以参照<a href=\"https://github.com/Jacksgong/gralde-sample\" target=\"_blank\" rel=\"external\">gradle-sample</a>)。</p>\n","excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>虽然不是我的工作中心，但是看到支付宝的架构体系存在一些我认为可以优化的点，因此在周末时，我还是希望自己能够回归技术探究，因此写了一些的根据自己短暂的工作经验的想法的从工作流到整个架构体系的优化建议。今天就谈谈我想要的架构体系优化，虽然最后因为一些原因<strong>没有在支付宝中推动起来</strong>，但是大家可以交流交流，这个简单的体系并不耦合于支付宝体系本身。</p>","more":"<h2 id=\"原委\"><a href=\"#原委\" class=\"headerlink\" title=\"原委\"></a>原委</h2><p>现有的支付宝现有的架构体系，大家应可以通过三平的这个<a href=\"http://club.alibabatech.org/technical_preacher_detail.htm?guestId=155\">沙龙</a>中窥探，这套架构体系，在提出来的时候是十分先进的，通过每个模块从原本的”静态库”调整为”共享库”（APK），使得每个模块充分解耦并支持独立动态部署、独立的版本管理，但是也因此需要侵入期间的编译环节、随之带来了很强的侵入性（架构复杂度很高使得维护成本变得很高）、相对社区闭塞的技术发展、新技术应用门槛变高，使我想要重新审视这套架构，我总觉得在现在社区的技术而言，侵入性完全可以得到优化。</p>\n<h2 id=\"新架构预想\"><a href=\"#新架构预想\" class=\"headerlink\" title=\"新架构预想\"></a>新架构预想</h2><ul>\n<li>兼并已有的各模块独立开发的优势</li>\n<li>符合社区标准，利于哺乳社区与反哺社区</li>\n<li>尽量轻量，严格的性能监控</li>\n<li>严谨的架构扩张</li>\n<li>严格、行而有效的开发流程</li>\n<li>对上层尽量无感知，将学习成本降到最低，减少整合门槛</li>\n</ul>\n<p><img src=\"/img/alipay-architecture-thought.png\" alt=\"\"></p>\n<p>右侧是思考了，并实践了的过渡版本，左侧的V2是预想中的支付宝架构(自己简单实践，其中的api与impl的打包可以参照<a href=\"https://github.com/Jacksgong/gralde-sample\">gradle-sample</a>)。</p>"},{"title":"ActivityManagerService","date":"2015-11-26T12:49:03.000Z","_content":"\n> 负责为应用程序创建新进程，本身也是运行在独立进程，系统启动时创建\n\n<!-- more -->\n\nServiceManager初始化，有一个循环等待Client组件发送的请求(参考[Android多进程]http://blog.dreamtobe.cn/2015/11/25/android_multiply_process/)，当时我们自己创建的Service的时候并没有循环等待Client，那是怎么做到通信的呢?\n\n1. ServiceManager中特有句柄为0\n2. ActivityManagerService在启动应用(ActivityThread.main)之前就已经建立好了这个循环\n\n![](/img/ActivityManagerService.png)\n\n---\n\n- [Android应用程序进程启动过程源码分析](http://blog.csdn.net/luoshengyang/article/details/6747696)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/activitymanagerservice.md","raw":"title: ActivityManagerService\ndate: 2015-11-26 20:49:03\npermalink: 2015/11/26/activitymanagerservice\ntags:\n- ActivityManagerService\n- ActivityThread\n- Zygote\n\n---\n\n> 负责为应用程序创建新进程，本身也是运行在独立进程，系统启动时创建\n\n<!-- more -->\n\nServiceManager初始化，有一个循环等待Client组件发送的请求(参考[Android多进程]http://blog.dreamtobe.cn/2015/11/25/android_multiply_process/)，当时我们自己创建的Service的时候并没有循环等待Client，那是怎么做到通信的呢?\n\n1. ServiceManager中特有句柄为0\n2. ActivityManagerService在启动应用(ActivityThread.main)之前就已经建立好了这个循环\n\n![](/img/ActivityManagerService.png)\n\n---\n\n- [Android应用程序进程启动过程源码分析](http://blog.csdn.net/luoshengyang/article/details/6747696)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2015/11/26/activitymanagerservice","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66i9001g95buu11i9cwp","content":"<blockquote>\n<p>负责为应用程序创建新进程，本身也是运行在独立进程，系统启动时创建</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>ServiceManager初始化，有一个循环等待Client组件发送的请求(参考[Android多进程]<a href=\"http://blog.dreamtobe.cn/2015/11/25/android_multiply_process/)，当时我们自己创建的Service的时候并没有循环等待Client，那是怎么做到通信的呢?\">http://blog.dreamtobe.cn/2015/11/25/android_multiply_process/)，当时我们自己创建的Service的时候并没有循环等待Client，那是怎么做到通信的呢?</a></p>\n<ol>\n<li>ServiceManager中特有句柄为0</li>\n<li>ActivityManagerService在启动应用(ActivityThread.main)之前就已经建立好了这个循环</li>\n</ol>\n<p><img src=\"/img/ActivityManagerService.png\" alt=\"\"></p>\n<hr>\n<ul>\n<li><a href=\"http://blog.csdn.net/luoshengyang/article/details/6747696\" target=\"_blank\" rel=\"external\">Android应用程序进程启动过程源码分析</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>负责为应用程序创建新进程，本身也是运行在独立进程，系统启动时创建</p>\n</blockquote>","more":"<p>ServiceManager初始化，有一个循环等待Client组件发送的请求(参考[Android多进程]<a href=\"http://blog.dreamtobe.cn/2015/11/25/android_multiply_process/)，当时我们自己创建的Service的时候并没有循环等待Client，那是怎么做到通信的呢?\">http://blog.dreamtobe.cn/2015/11/25/android_multiply_process/)，当时我们自己创建的Service的时候并没有循环等待Client，那是怎么做到通信的呢?</a></p>\n<ol>\n<li>ServiceManager中特有句柄为0</li>\n<li>ActivityManagerService在启动应用(ActivityThread.main)之前就已经建立好了这个循环</li>\n</ol>\n<p><img src=\"/img/ActivityManagerService.png\" alt=\"\"></p>\n<hr>\n<ul>\n<li><a href=\"http://blog.csdn.net/luoshengyang/article/details/6747696\">Android应用程序进程启动过程源码分析</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"Android绘制","date":"2015-10-19T16:48:03.000Z","_content":"\n## I. 布局简单优化\n\n1. 尽量少的布局层级\n2. `LinearLayout`性能比`RelativeLayout` 稍高\n3. `ViewStub`代替`include`来引用不常用的布局\n4. 用`merge`来代替根节点是`FrameLayout`，并且不需要`background`或`padding`等属性时。\n5. 用`merge`来代替`include`的顶节点，这样被引入时顶节点会自动被忽略。\n\n<!-- more -->\n\n## II. 绘制相关深度优化\n\n> 可以通过[Hierarchy Viewer](http://developer.android.com/tools/help/hierarchy-viewer.html)可视化布局，直观的看布局层级分布以及各View `measure`、`layout`、`draw` 的耗时。\n> 可以通过[traceview](http://developer.android.com/tools/debugging/debugging-tracing.html)，计算出每个方法所占用的CPU时间。\n\n1. 已知View大小的，自定义View，`onMeasure`时直接`setMeasuredDimension`\n2. 已知布局或者其他特定规律的，直接自定义View，达到减少层级，针对性`measure`、`layout`、`draw`\n3. 如果布局含有复杂的动画，或者需要复杂的绘制，考虑在独立的绘制线程处理，而不block UI线程，此时考虑`SurfaceView`或`TextureView`(Android 4.0引入)(相比`SurfaceView`而言，可以像常规视图一样被改变)\n4. 使用`OpenGL ES` API进行绘制，可以更加针对性的高性能绘图。\n5. 如果资源图片比较大，考虑放在`drawable-nodpi`或者直接放在asset，防止获取资源的时候缩放暂用大量内存，也产生不必要的延时。\n\n## III. `LayoutInflater`\n\n- 使用XmlPull来解析\n- `rInflate()`方法(中不断递归)遍历根布局下的子布局\n- 由于`setContentView`默认是添加到id为`content`的`FrameLayout`中，因此`LyoautParams`有效。\n\n\n### 最终结果:\n是一个完整的DOM结构，返回的是顶层布局。\n\n### 耗时点:\n\n1. 其中的`createView()`方法中通过反射创建出View实例\n\n## IV. 绘制过程\n\n### 开始\n\n`ViewRoot`的`performTraversals()`\n\n### `onMeasure()`\n\n从`measure()`中调用，每个`View`都有一次`measure()`的过程.\n\n参数: 规格和大小: MeasureSpec = specSize | specMode\n\n#### 规格说明:\n\n名称 | 注解\n-|-\nEXACTLY | 希望子视图大小 由 specSize决定\nAT_MOST | 希望子视图大小 保证不超过 specSize\nUNSPECIFIED | 希望子视图 任意大小（很少遇到）\n\n\n#### `widthMeasureSpec`、`heightMeasureSpec`参数由来:\n\n- 一般情况: 由父布局计算得到\n- 根布局: 由`getRootMeasureSpec()`处理得到:\n\n根布局给的参数 | 规格 | 大小\n-|-\n`MATCH_PARENT` | `EXACTLY` | 视窗大小\n`WRAP_CONTENT` | `AT_MOST` | 视窗大小\n给定大小 | `EXACTLY` | 给定大小\n\n#### `ViewGroup`的`measure`:\n\n> 遍历child View，进行`measureChild`\n\n结合`ViewGroup`的规格与大小，以及child规格与大小获得参数传入`child View`进行子布局的`measure`\n\n#### 结束:\n将最终结果通过`setMeasuredDimension`设置最终测量的结果，一次`measure`过程结束\n\n> 注意: `setMeasuredDimension()`后`getMeasuredWidth`和`getMeasuredHeight`才是有效值。\n\n### `onLayout()`\n\n紧接着`measure`之后，就是布局，确定位置。调用`View`的`layout()`方法触发。\n\n#### 决定是否需要`onLayout`\n\n1.  `layout()`中，首先会调用`setFrame()`方法来判断 视图是否发生过变化。\n2.  或者`layout()`中，有`LAYOUT_REQUIRED`(请求onLayout)\n\n\n### `onDraw()`\n\n紧接着`layout()`之后，就是真正的绘制。调用`View`的`draw()`方法触发\n\n#### 步骤一，绘制背景\n\n#### 步骤二，为了淡入淡出做准备（一般没有）\n\n如果有的情况下，一般情况下没有，就是保存canvas的Layers\n\n#### 步骤三，绘制内容\n\n调用`onDraw(Canvas)`，默认是空方法，这一部分是case by case\n\n#### 步骤四，绘制子View\n\n调用`dispatchDraw(Canvas)`，默认空方法，这一部分也是case by case\n\n#### 步骤五，绘制淡入淡出\n\n如果有的情况下，绘制，然后还原canvas的Layer\n\n#### 步骤六，绘制滚动条\n\n其实每个View都可以有滚动条的。\n\n## V. 视图状态\n\n> 这里只提到需要特别注意到的。\n\n> View的视图状态变化，会回调`View#drawableStateChange()`\n\n### focused\n\n- `requestFocus()`不能保证一定能获取到焦点，返回值为`true`才表示获取成功。需要focusable && focusable in touch mode\n- 一个界面只有一个焦点\n\n### window_focused\n\n- 应用程序不能改变，由系统控制\n- 表示视图是否处于正在交互的窗口中\n\n### selected\n\n- 一个界面中可以有多个选中态\n\n### pressed\n\n- 实际上应用程序也可以通过`setPressed()`方法来控制的\n\n## VI. 状态变化回调\n\n![](/img/android_view-1.png)\n\n## VII. View#invalidate\n\n> 需要注意`invalidate`虽然最终调到`performTraversals()`但是很可能没有 **重新测量标志**，大小没有变化，因此不会执行`measure`和`layout`，只有`draw`可以执行到。\n> 相比之下如果希望视图绘制流程完整重新走一遍，需要调用`requestLayout`。\n\n![](/img/android_view-2.png)\n\n\n---\n\n> ps [第四篇](http://blog.csdn.net/guolin_blog/article/details/17357967)是一些简单的应用层，就没有整理了\n\n----\n\n- [Google I/O 2013 - Writing Custom Views for Android](https://www.youtube.com/watch?v=NYtB6mlu7vA&t=1m41s)\n- [Android LayoutInflater原理分析，带你一步步深入了解View(一)](http://blog.csdn.net/guolin_blog/article/details/12921889)\n- [Android视图绘制流程完全解析，带你一步步深入了解View(二)](http://blog.csdn.net/guolin_blog/article/details/16330267)\n- [Android视图状态及重绘流程分析，带你一步步深入了解View(三)](http://blog.csdn.net/guolin_blog/article/details/17045157)\n- [Android 布局优化](http://www.stormzhang.com/android/2014/04/10/android-optimize-layout/)\n- [性能优化之布局优化](http://www.trinea.cn/android/layout-performance/)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/android-view.md","raw":"title: Android绘制\ndate: 2015-10-20 00:48:03\npermalink: 2015/10/20/android-view\ntags:\n- Android\n- 视图\n- View\n- 优化\n- 重绘\n\n---\n\n## I. 布局简单优化\n\n1. 尽量少的布局层级\n2. `LinearLayout`性能比`RelativeLayout` 稍高\n3. `ViewStub`代替`include`来引用不常用的布局\n4. 用`merge`来代替根节点是`FrameLayout`，并且不需要`background`或`padding`等属性时。\n5. 用`merge`来代替`include`的顶节点，这样被引入时顶节点会自动被忽略。\n\n<!-- more -->\n\n## II. 绘制相关深度优化\n\n> 可以通过[Hierarchy Viewer](http://developer.android.com/tools/help/hierarchy-viewer.html)可视化布局，直观的看布局层级分布以及各View `measure`、`layout`、`draw` 的耗时。\n> 可以通过[traceview](http://developer.android.com/tools/debugging/debugging-tracing.html)，计算出每个方法所占用的CPU时间。\n\n1. 已知View大小的，自定义View，`onMeasure`时直接`setMeasuredDimension`\n2. 已知布局或者其他特定规律的，直接自定义View，达到减少层级，针对性`measure`、`layout`、`draw`\n3. 如果布局含有复杂的动画，或者需要复杂的绘制，考虑在独立的绘制线程处理，而不block UI线程，此时考虑`SurfaceView`或`TextureView`(Android 4.0引入)(相比`SurfaceView`而言，可以像常规视图一样被改变)\n4. 使用`OpenGL ES` API进行绘制，可以更加针对性的高性能绘图。\n5. 如果资源图片比较大，考虑放在`drawable-nodpi`或者直接放在asset，防止获取资源的时候缩放暂用大量内存，也产生不必要的延时。\n\n## III. `LayoutInflater`\n\n- 使用XmlPull来解析\n- `rInflate()`方法(中不断递归)遍历根布局下的子布局\n- 由于`setContentView`默认是添加到id为`content`的`FrameLayout`中，因此`LyoautParams`有效。\n\n\n### 最终结果:\n是一个完整的DOM结构，返回的是顶层布局。\n\n### 耗时点:\n\n1. 其中的`createView()`方法中通过反射创建出View实例\n\n## IV. 绘制过程\n\n### 开始\n\n`ViewRoot`的`performTraversals()`\n\n### `onMeasure()`\n\n从`measure()`中调用，每个`View`都有一次`measure()`的过程.\n\n参数: 规格和大小: MeasureSpec = specSize | specMode\n\n#### 规格说明:\n\n名称 | 注解\n-|-\nEXACTLY | 希望子视图大小 由 specSize决定\nAT_MOST | 希望子视图大小 保证不超过 specSize\nUNSPECIFIED | 希望子视图 任意大小（很少遇到）\n\n\n#### `widthMeasureSpec`、`heightMeasureSpec`参数由来:\n\n- 一般情况: 由父布局计算得到\n- 根布局: 由`getRootMeasureSpec()`处理得到:\n\n根布局给的参数 | 规格 | 大小\n-|-\n`MATCH_PARENT` | `EXACTLY` | 视窗大小\n`WRAP_CONTENT` | `AT_MOST` | 视窗大小\n给定大小 | `EXACTLY` | 给定大小\n\n#### `ViewGroup`的`measure`:\n\n> 遍历child View，进行`measureChild`\n\n结合`ViewGroup`的规格与大小，以及child规格与大小获得参数传入`child View`进行子布局的`measure`\n\n#### 结束:\n将最终结果通过`setMeasuredDimension`设置最终测量的结果，一次`measure`过程结束\n\n> 注意: `setMeasuredDimension()`后`getMeasuredWidth`和`getMeasuredHeight`才是有效值。\n\n### `onLayout()`\n\n紧接着`measure`之后，就是布局，确定位置。调用`View`的`layout()`方法触发。\n\n#### 决定是否需要`onLayout`\n\n1.  `layout()`中，首先会调用`setFrame()`方法来判断 视图是否发生过变化。\n2.  或者`layout()`中，有`LAYOUT_REQUIRED`(请求onLayout)\n\n\n### `onDraw()`\n\n紧接着`layout()`之后，就是真正的绘制。调用`View`的`draw()`方法触发\n\n#### 步骤一，绘制背景\n\n#### 步骤二，为了淡入淡出做准备（一般没有）\n\n如果有的情况下，一般情况下没有，就是保存canvas的Layers\n\n#### 步骤三，绘制内容\n\n调用`onDraw(Canvas)`，默认是空方法，这一部分是case by case\n\n#### 步骤四，绘制子View\n\n调用`dispatchDraw(Canvas)`，默认空方法，这一部分也是case by case\n\n#### 步骤五，绘制淡入淡出\n\n如果有的情况下，绘制，然后还原canvas的Layer\n\n#### 步骤六，绘制滚动条\n\n其实每个View都可以有滚动条的。\n\n## V. 视图状态\n\n> 这里只提到需要特别注意到的。\n\n> View的视图状态变化，会回调`View#drawableStateChange()`\n\n### focused\n\n- `requestFocus()`不能保证一定能获取到焦点，返回值为`true`才表示获取成功。需要focusable && focusable in touch mode\n- 一个界面只有一个焦点\n\n### window_focused\n\n- 应用程序不能改变，由系统控制\n- 表示视图是否处于正在交互的窗口中\n\n### selected\n\n- 一个界面中可以有多个选中态\n\n### pressed\n\n- 实际上应用程序也可以通过`setPressed()`方法来控制的\n\n## VI. 状态变化回调\n\n![](/img/android_view-1.png)\n\n## VII. View#invalidate\n\n> 需要注意`invalidate`虽然最终调到`performTraversals()`但是很可能没有 **重新测量标志**，大小没有变化，因此不会执行`measure`和`layout`，只有`draw`可以执行到。\n> 相比之下如果希望视图绘制流程完整重新走一遍，需要调用`requestLayout`。\n\n![](/img/android_view-2.png)\n\n\n---\n\n> ps [第四篇](http://blog.csdn.net/guolin_blog/article/details/17357967)是一些简单的应用层，就没有整理了\n\n----\n\n- [Google I/O 2013 - Writing Custom Views for Android](https://www.youtube.com/watch?v=NYtB6mlu7vA&t=1m41s)\n- [Android LayoutInflater原理分析，带你一步步深入了解View(一)](http://blog.csdn.net/guolin_blog/article/details/12921889)\n- [Android视图绘制流程完全解析，带你一步步深入了解View(二)](http://blog.csdn.net/guolin_blog/article/details/16330267)\n- [Android视图状态及重绘流程分析，带你一步步深入了解View(三)](http://blog.csdn.net/guolin_blog/article/details/17045157)\n- [Android 布局优化](http://www.stormzhang.com/android/2014/04/10/android-optimize-layout/)\n- [性能优化之布局优化](http://www.trinea.cn/android/layout-performance/)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2015/10/20/android-view","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66ia001j95buy1830zvu","content":"<h2 id=\"I-布局简单优化\"><a href=\"#I-布局简单优化\" class=\"headerlink\" title=\"I. 布局简单优化\"></a>I. 布局简单优化</h2><ol>\n<li>尽量少的布局层级</li>\n<li><code>LinearLayout</code>性能比<code>RelativeLayout</code> 稍高</li>\n<li><code>ViewStub</code>代替<code>include</code>来引用不常用的布局</li>\n<li>用<code>merge</code>来代替根节点是<code>FrameLayout</code>，并且不需要<code>background</code>或<code>padding</code>等属性时。</li>\n<li>用<code>merge</code>来代替<code>include</code>的顶节点，这样被引入时顶节点会自动被忽略。</li>\n</ol>\n<a id=\"more\"></a>\n<h2 id=\"II-绘制相关深度优化\"><a href=\"#II-绘制相关深度优化\" class=\"headerlink\" title=\"II. 绘制相关深度优化\"></a>II. 绘制相关深度优化</h2><blockquote>\n<p>可以通过<a href=\"http://developer.android.com/tools/help/hierarchy-viewer.html\" target=\"_blank\" rel=\"external\">Hierarchy Viewer</a>可视化布局，直观的看布局层级分布以及各View <code>measure</code>、<code>layout</code>、<code>draw</code> 的耗时。<br>可以通过<a href=\"http://developer.android.com/tools/debugging/debugging-tracing.html\" target=\"_blank\" rel=\"external\">traceview</a>，计算出每个方法所占用的CPU时间。</p>\n</blockquote>\n<ol>\n<li>已知View大小的，自定义View，<code>onMeasure</code>时直接<code>setMeasuredDimension</code></li>\n<li>已知布局或者其他特定规律的，直接自定义View，达到减少层级，针对性<code>measure</code>、<code>layout</code>、<code>draw</code></li>\n<li>如果布局含有复杂的动画，或者需要复杂的绘制，考虑在独立的绘制线程处理，而不block UI线程，此时考虑<code>SurfaceView</code>或<code>TextureView</code>(Android 4.0引入)(相比<code>SurfaceView</code>而言，可以像常规视图一样被改变)</li>\n<li>使用<code>OpenGL ES</code> API进行绘制，可以更加针对性的高性能绘图。</li>\n<li>如果资源图片比较大，考虑放在<code>drawable-nodpi</code>或者直接放在asset，防止获取资源的时候缩放暂用大量内存，也产生不必要的延时。</li>\n</ol>\n<h2 id=\"III-LayoutInflater\"><a href=\"#III-LayoutInflater\" class=\"headerlink\" title=\"III. LayoutInflater\"></a>III. <code>LayoutInflater</code></h2><ul>\n<li>使用XmlPull来解析</li>\n<li><code>rInflate()</code>方法(中不断递归)遍历根布局下的子布局</li>\n<li>由于<code>setContentView</code>默认是添加到id为<code>content</code>的<code>FrameLayout</code>中，因此<code>LyoautParams</code>有效。</li>\n</ul>\n<h3 id=\"最终结果\"><a href=\"#最终结果\" class=\"headerlink\" title=\"最终结果:\"></a>最终结果:</h3><p>是一个完整的DOM结构，返回的是顶层布局。</p>\n<h3 id=\"耗时点\"><a href=\"#耗时点\" class=\"headerlink\" title=\"耗时点:\"></a>耗时点:</h3><ol>\n<li>其中的<code>createView()</code>方法中通过反射创建出View实例</li>\n</ol>\n<h2 id=\"IV-绘制过程\"><a href=\"#IV-绘制过程\" class=\"headerlink\" title=\"IV. 绘制过程\"></a>IV. 绘制过程</h2><h3 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h3><p><code>ViewRoot</code>的<code>performTraversals()</code></p>\n<h3 id=\"onMeasure\"><a href=\"#onMeasure\" class=\"headerlink\" title=\"onMeasure()\"></a><code>onMeasure()</code></h3><p>从<code>measure()</code>中调用，每个<code>View</code>都有一次<code>measure()</code>的过程.</p>\n<p>参数: 规格和大小: MeasureSpec = specSize | specMode</p>\n<h4 id=\"规格说明\"><a href=\"#规格说明\" class=\"headerlink\" title=\"规格说明:\"></a>规格说明:</h4><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>注解</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>EXACTLY</td>\n<td>希望子视图大小 由 specSize决定</td>\n</tr>\n<tr>\n<td>AT_MOST</td>\n<td>希望子视图大小 保证不超过 specSize</td>\n</tr>\n<tr>\n<td>UNSPECIFIED</td>\n<td>希望子视图 任意大小（很少遇到）</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"widthMeasureSpec、heightMeasureSpec参数由来\"><a href=\"#widthMeasureSpec、heightMeasureSpec参数由来\" class=\"headerlink\" title=\"widthMeasureSpec、heightMeasureSpec参数由来:\"></a><code>widthMeasureSpec</code>、<code>heightMeasureSpec</code>参数由来:</h4><ul>\n<li>一般情况: 由父布局计算得到</li>\n<li>根布局: 由<code>getRootMeasureSpec()</code>处理得到:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>根布局给的参数</th>\n<th>规格</th>\n<th>大小</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>MATCH_PARENT</code></td>\n<td><code>EXACTLY</code></td>\n<td>视窗大小</td>\n</tr>\n<tr>\n<td><code>WRAP_CONTENT</code></td>\n<td><code>AT_MOST</code></td>\n<td>视窗大小</td>\n</tr>\n<tr>\n<td>给定大小</td>\n<td><code>EXACTLY</code></td>\n<td>给定大小</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"ViewGroup的measure\"><a href=\"#ViewGroup的measure\" class=\"headerlink\" title=\"ViewGroup的measure:\"></a><code>ViewGroup</code>的<code>measure</code>:</h4><blockquote>\n<p>遍历child View，进行<code>measureChild</code></p>\n</blockquote>\n<p>结合<code>ViewGroup</code>的规格与大小，以及child规格与大小获得参数传入<code>child View</code>进行子布局的<code>measure</code></p>\n<h4 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束:\"></a>结束:</h4><p>将最终结果通过<code>setMeasuredDimension</code>设置最终测量的结果，一次<code>measure</code>过程结束</p>\n<blockquote>\n<p>注意: <code>setMeasuredDimension()</code>后<code>getMeasuredWidth</code>和<code>getMeasuredHeight</code>才是有效值。</p>\n</blockquote>\n<h3 id=\"onLayout\"><a href=\"#onLayout\" class=\"headerlink\" title=\"onLayout()\"></a><code>onLayout()</code></h3><p>紧接着<code>measure</code>之后，就是布局，确定位置。调用<code>View</code>的<code>layout()</code>方法触发。</p>\n<h4 id=\"决定是否需要onLayout\"><a href=\"#决定是否需要onLayout\" class=\"headerlink\" title=\"决定是否需要onLayout\"></a>决定是否需要<code>onLayout</code></h4><ol>\n<li><code>layout()</code>中，首先会调用<code>setFrame()</code>方法来判断 视图是否发生过变化。</li>\n<li>或者<code>layout()</code>中，有<code>LAYOUT_REQUIRED</code>(请求onLayout)</li>\n</ol>\n<h3 id=\"onDraw\"><a href=\"#onDraw\" class=\"headerlink\" title=\"onDraw()\"></a><code>onDraw()</code></h3><p>紧接着<code>layout()</code>之后，就是真正的绘制。调用<code>View</code>的<code>draw()</code>方法触发</p>\n<h4 id=\"步骤一，绘制背景\"><a href=\"#步骤一，绘制背景\" class=\"headerlink\" title=\"步骤一，绘制背景\"></a>步骤一，绘制背景</h4><h4 id=\"步骤二，为了淡入淡出做准备（一般没有）\"><a href=\"#步骤二，为了淡入淡出做准备（一般没有）\" class=\"headerlink\" title=\"步骤二，为了淡入淡出做准备（一般没有）\"></a>步骤二，为了淡入淡出做准备（一般没有）</h4><p>如果有的情况下，一般情况下没有，就是保存canvas的Layers</p>\n<h4 id=\"步骤三，绘制内容\"><a href=\"#步骤三，绘制内容\" class=\"headerlink\" title=\"步骤三，绘制内容\"></a>步骤三，绘制内容</h4><p>调用<code>onDraw(Canvas)</code>，默认是空方法，这一部分是case by case</p>\n<h4 id=\"步骤四，绘制子View\"><a href=\"#步骤四，绘制子View\" class=\"headerlink\" title=\"步骤四，绘制子View\"></a>步骤四，绘制子View</h4><p>调用<code>dispatchDraw(Canvas)</code>，默认空方法，这一部分也是case by case</p>\n<h4 id=\"步骤五，绘制淡入淡出\"><a href=\"#步骤五，绘制淡入淡出\" class=\"headerlink\" title=\"步骤五，绘制淡入淡出\"></a>步骤五，绘制淡入淡出</h4><p>如果有的情况下，绘制，然后还原canvas的Layer</p>\n<h4 id=\"步骤六，绘制滚动条\"><a href=\"#步骤六，绘制滚动条\" class=\"headerlink\" title=\"步骤六，绘制滚动条\"></a>步骤六，绘制滚动条</h4><p>其实每个View都可以有滚动条的。</p>\n<h2 id=\"V-视图状态\"><a href=\"#V-视图状态\" class=\"headerlink\" title=\"V. 视图状态\"></a>V. 视图状态</h2><blockquote>\n<p>这里只提到需要特别注意到的。</p>\n<p>View的视图状态变化，会回调<code>View#drawableStateChange()</code></p>\n</blockquote>\n<h3 id=\"focused\"><a href=\"#focused\" class=\"headerlink\" title=\"focused\"></a>focused</h3><ul>\n<li><code>requestFocus()</code>不能保证一定能获取到焦点，返回值为<code>true</code>才表示获取成功。需要focusable &amp;&amp; focusable in touch mode</li>\n<li>一个界面只有一个焦点</li>\n</ul>\n<h3 id=\"window-focused\"><a href=\"#window-focused\" class=\"headerlink\" title=\"window_focused\"></a>window_focused</h3><ul>\n<li>应用程序不能改变，由系统控制</li>\n<li>表示视图是否处于正在交互的窗口中</li>\n</ul>\n<h3 id=\"selected\"><a href=\"#selected\" class=\"headerlink\" title=\"selected\"></a>selected</h3><ul>\n<li>一个界面中可以有多个选中态</li>\n</ul>\n<h3 id=\"pressed\"><a href=\"#pressed\" class=\"headerlink\" title=\"pressed\"></a>pressed</h3><ul>\n<li>实际上应用程序也可以通过<code>setPressed()</code>方法来控制的</li>\n</ul>\n<h2 id=\"VI-状态变化回调\"><a href=\"#VI-状态变化回调\" class=\"headerlink\" title=\"VI. 状态变化回调\"></a>VI. 状态变化回调</h2><p><img src=\"/img/android_view-1.png\" alt=\"\"></p>\n<h2 id=\"VII-View-invalidate\"><a href=\"#VII-View-invalidate\" class=\"headerlink\" title=\"VII. View#invalidate\"></a>VII. View#invalidate</h2><blockquote>\n<p>需要注意<code>invalidate</code>虽然最终调到<code>performTraversals()</code>但是很可能没有 <strong>重新测量标志</strong>，大小没有变化，因此不会执行<code>measure</code>和<code>layout</code>，只有<code>draw</code>可以执行到。<br>相比之下如果希望视图绘制流程完整重新走一遍，需要调用<code>requestLayout</code>。</p>\n</blockquote>\n<p><img src=\"/img/android_view-2.png\" alt=\"\"></p>\n<hr>\n<blockquote>\n<p>ps <a href=\"http://blog.csdn.net/guolin_blog/article/details/17357967\" target=\"_blank\" rel=\"external\">第四篇</a>是一些简单的应用层，就没有整理了</p>\n</blockquote>\n<hr>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=NYtB6mlu7vA&amp;t=1m41s\" target=\"_blank\" rel=\"external\">Google I/O 2013 - Writing Custom Views for Android</a></li>\n<li><a href=\"http://blog.csdn.net/guolin_blog/article/details/12921889\" target=\"_blank\" rel=\"external\">Android LayoutInflater原理分析，带你一步步深入了解View(一)</a></li>\n<li><a href=\"http://blog.csdn.net/guolin_blog/article/details/16330267\" target=\"_blank\" rel=\"external\">Android视图绘制流程完全解析，带你一步步深入了解View(二)</a></li>\n<li><a href=\"http://blog.csdn.net/guolin_blog/article/details/17045157\" target=\"_blank\" rel=\"external\">Android视图状态及重绘流程分析，带你一步步深入了解View(三)</a></li>\n<li><a href=\"http://www.stormzhang.com/android/2014/04/10/android-optimize-layout/\" target=\"_blank\" rel=\"external\">Android 布局优化</a></li>\n<li><a href=\"http://www.trinea.cn/android/layout-performance/\" target=\"_blank\" rel=\"external\">性能优化之布局优化</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<h2 id=\"I-布局简单优化\"><a href=\"#I-布局简单优化\" class=\"headerlink\" title=\"I. 布局简单优化\"></a>I. 布局简单优化</h2><ol>\n<li>尽量少的布局层级</li>\n<li><code>LinearLayout</code>性能比<code>RelativeLayout</code> 稍高</li>\n<li><code>ViewStub</code>代替<code>include</code>来引用不常用的布局</li>\n<li>用<code>merge</code>来代替根节点是<code>FrameLayout</code>，并且不需要<code>background</code>或<code>padding</code>等属性时。</li>\n<li>用<code>merge</code>来代替<code>include</code>的顶节点，这样被引入时顶节点会自动被忽略。</li>\n</ol>","more":"<h2 id=\"II-绘制相关深度优化\"><a href=\"#II-绘制相关深度优化\" class=\"headerlink\" title=\"II. 绘制相关深度优化\"></a>II. 绘制相关深度优化</h2><blockquote>\n<p>可以通过<a href=\"http://developer.android.com/tools/help/hierarchy-viewer.html\">Hierarchy Viewer</a>可视化布局，直观的看布局层级分布以及各View <code>measure</code>、<code>layout</code>、<code>draw</code> 的耗时。<br>可以通过<a href=\"http://developer.android.com/tools/debugging/debugging-tracing.html\">traceview</a>，计算出每个方法所占用的CPU时间。</p>\n</blockquote>\n<ol>\n<li>已知View大小的，自定义View，<code>onMeasure</code>时直接<code>setMeasuredDimension</code></li>\n<li>已知布局或者其他特定规律的，直接自定义View，达到减少层级，针对性<code>measure</code>、<code>layout</code>、<code>draw</code></li>\n<li>如果布局含有复杂的动画，或者需要复杂的绘制，考虑在独立的绘制线程处理，而不block UI线程，此时考虑<code>SurfaceView</code>或<code>TextureView</code>(Android 4.0引入)(相比<code>SurfaceView</code>而言，可以像常规视图一样被改变)</li>\n<li>使用<code>OpenGL ES</code> API进行绘制，可以更加针对性的高性能绘图。</li>\n<li>如果资源图片比较大，考虑放在<code>drawable-nodpi</code>或者直接放在asset，防止获取资源的时候缩放暂用大量内存，也产生不必要的延时。</li>\n</ol>\n<h2 id=\"III-LayoutInflater\"><a href=\"#III-LayoutInflater\" class=\"headerlink\" title=\"III. LayoutInflater\"></a>III. <code>LayoutInflater</code></h2><ul>\n<li>使用XmlPull来解析</li>\n<li><code>rInflate()</code>方法(中不断递归)遍历根布局下的子布局</li>\n<li>由于<code>setContentView</code>默认是添加到id为<code>content</code>的<code>FrameLayout</code>中，因此<code>LyoautParams</code>有效。</li>\n</ul>\n<h3 id=\"最终结果\"><a href=\"#最终结果\" class=\"headerlink\" title=\"最终结果:\"></a>最终结果:</h3><p>是一个完整的DOM结构，返回的是顶层布局。</p>\n<h3 id=\"耗时点\"><a href=\"#耗时点\" class=\"headerlink\" title=\"耗时点:\"></a>耗时点:</h3><ol>\n<li>其中的<code>createView()</code>方法中通过反射创建出View实例</li>\n</ol>\n<h2 id=\"IV-绘制过程\"><a href=\"#IV-绘制过程\" class=\"headerlink\" title=\"IV. 绘制过程\"></a>IV. 绘制过程</h2><h3 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h3><p><code>ViewRoot</code>的<code>performTraversals()</code></p>\n<h3 id=\"onMeasure\"><a href=\"#onMeasure\" class=\"headerlink\" title=\"onMeasure()\"></a><code>onMeasure()</code></h3><p>从<code>measure()</code>中调用，每个<code>View</code>都有一次<code>measure()</code>的过程.</p>\n<p>参数: 规格和大小: MeasureSpec = specSize | specMode</p>\n<h4 id=\"规格说明\"><a href=\"#规格说明\" class=\"headerlink\" title=\"规格说明:\"></a>规格说明:</h4><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>注解</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>EXACTLY</td>\n<td>希望子视图大小 由 specSize决定</td>\n</tr>\n<tr>\n<td>AT_MOST</td>\n<td>希望子视图大小 保证不超过 specSize</td>\n</tr>\n<tr>\n<td>UNSPECIFIED</td>\n<td>希望子视图 任意大小（很少遇到）</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"widthMeasureSpec、heightMeasureSpec参数由来\"><a href=\"#widthMeasureSpec、heightMeasureSpec参数由来\" class=\"headerlink\" title=\"widthMeasureSpec、heightMeasureSpec参数由来:\"></a><code>widthMeasureSpec</code>、<code>heightMeasureSpec</code>参数由来:</h4><ul>\n<li>一般情况: 由父布局计算得到</li>\n<li>根布局: 由<code>getRootMeasureSpec()</code>处理得到:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>根布局给的参数</th>\n<th>规格</th>\n<th>大小</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>MATCH_PARENT</code></td>\n<td><code>EXACTLY</code></td>\n<td>视窗大小</td>\n</tr>\n<tr>\n<td><code>WRAP_CONTENT</code></td>\n<td><code>AT_MOST</code></td>\n<td>视窗大小</td>\n</tr>\n<tr>\n<td>给定大小</td>\n<td><code>EXACTLY</code></td>\n<td>给定大小</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"ViewGroup的measure\"><a href=\"#ViewGroup的measure\" class=\"headerlink\" title=\"ViewGroup的measure:\"></a><code>ViewGroup</code>的<code>measure</code>:</h4><blockquote>\n<p>遍历child View，进行<code>measureChild</code></p>\n</blockquote>\n<p>结合<code>ViewGroup</code>的规格与大小，以及child规格与大小获得参数传入<code>child View</code>进行子布局的<code>measure</code></p>\n<h4 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束:\"></a>结束:</h4><p>将最终结果通过<code>setMeasuredDimension</code>设置最终测量的结果，一次<code>measure</code>过程结束</p>\n<blockquote>\n<p>注意: <code>setMeasuredDimension()</code>后<code>getMeasuredWidth</code>和<code>getMeasuredHeight</code>才是有效值。</p>\n</blockquote>\n<h3 id=\"onLayout\"><a href=\"#onLayout\" class=\"headerlink\" title=\"onLayout()\"></a><code>onLayout()</code></h3><p>紧接着<code>measure</code>之后，就是布局，确定位置。调用<code>View</code>的<code>layout()</code>方法触发。</p>\n<h4 id=\"决定是否需要onLayout\"><a href=\"#决定是否需要onLayout\" class=\"headerlink\" title=\"决定是否需要onLayout\"></a>决定是否需要<code>onLayout</code></h4><ol>\n<li><code>layout()</code>中，首先会调用<code>setFrame()</code>方法来判断 视图是否发生过变化。</li>\n<li>或者<code>layout()</code>中，有<code>LAYOUT_REQUIRED</code>(请求onLayout)</li>\n</ol>\n<h3 id=\"onDraw\"><a href=\"#onDraw\" class=\"headerlink\" title=\"onDraw()\"></a><code>onDraw()</code></h3><p>紧接着<code>layout()</code>之后，就是真正的绘制。调用<code>View</code>的<code>draw()</code>方法触发</p>\n<h4 id=\"步骤一，绘制背景\"><a href=\"#步骤一，绘制背景\" class=\"headerlink\" title=\"步骤一，绘制背景\"></a>步骤一，绘制背景</h4><h4 id=\"步骤二，为了淡入淡出做准备（一般没有）\"><a href=\"#步骤二，为了淡入淡出做准备（一般没有）\" class=\"headerlink\" title=\"步骤二，为了淡入淡出做准备（一般没有）\"></a>步骤二，为了淡入淡出做准备（一般没有）</h4><p>如果有的情况下，一般情况下没有，就是保存canvas的Layers</p>\n<h4 id=\"步骤三，绘制内容\"><a href=\"#步骤三，绘制内容\" class=\"headerlink\" title=\"步骤三，绘制内容\"></a>步骤三，绘制内容</h4><p>调用<code>onDraw(Canvas)</code>，默认是空方法，这一部分是case by case</p>\n<h4 id=\"步骤四，绘制子View\"><a href=\"#步骤四，绘制子View\" class=\"headerlink\" title=\"步骤四，绘制子View\"></a>步骤四，绘制子View</h4><p>调用<code>dispatchDraw(Canvas)</code>，默认空方法，这一部分也是case by case</p>\n<h4 id=\"步骤五，绘制淡入淡出\"><a href=\"#步骤五，绘制淡入淡出\" class=\"headerlink\" title=\"步骤五，绘制淡入淡出\"></a>步骤五，绘制淡入淡出</h4><p>如果有的情况下，绘制，然后还原canvas的Layer</p>\n<h4 id=\"步骤六，绘制滚动条\"><a href=\"#步骤六，绘制滚动条\" class=\"headerlink\" title=\"步骤六，绘制滚动条\"></a>步骤六，绘制滚动条</h4><p>其实每个View都可以有滚动条的。</p>\n<h2 id=\"V-视图状态\"><a href=\"#V-视图状态\" class=\"headerlink\" title=\"V. 视图状态\"></a>V. 视图状态</h2><blockquote>\n<p>这里只提到需要特别注意到的。</p>\n<p>View的视图状态变化，会回调<code>View#drawableStateChange()</code></p>\n</blockquote>\n<h3 id=\"focused\"><a href=\"#focused\" class=\"headerlink\" title=\"focused\"></a>focused</h3><ul>\n<li><code>requestFocus()</code>不能保证一定能获取到焦点，返回值为<code>true</code>才表示获取成功。需要focusable &amp;&amp; focusable in touch mode</li>\n<li>一个界面只有一个焦点</li>\n</ul>\n<h3 id=\"window-focused\"><a href=\"#window-focused\" class=\"headerlink\" title=\"window_focused\"></a>window_focused</h3><ul>\n<li>应用程序不能改变，由系统控制</li>\n<li>表示视图是否处于正在交互的窗口中</li>\n</ul>\n<h3 id=\"selected\"><a href=\"#selected\" class=\"headerlink\" title=\"selected\"></a>selected</h3><ul>\n<li>一个界面中可以有多个选中态</li>\n</ul>\n<h3 id=\"pressed\"><a href=\"#pressed\" class=\"headerlink\" title=\"pressed\"></a>pressed</h3><ul>\n<li>实际上应用程序也可以通过<code>setPressed()</code>方法来控制的</li>\n</ul>\n<h2 id=\"VI-状态变化回调\"><a href=\"#VI-状态变化回调\" class=\"headerlink\" title=\"VI. 状态变化回调\"></a>VI. 状态变化回调</h2><p><img src=\"/img/android_view-1.png\" alt=\"\"></p>\n<h2 id=\"VII-View-invalidate\"><a href=\"#VII-View-invalidate\" class=\"headerlink\" title=\"VII. View#invalidate\"></a>VII. View#invalidate</h2><blockquote>\n<p>需要注意<code>invalidate</code>虽然最终调到<code>performTraversals()</code>但是很可能没有 <strong>重新测量标志</strong>，大小没有变化，因此不会执行<code>measure</code>和<code>layout</code>，只有<code>draw</code>可以执行到。<br>相比之下如果希望视图绘制流程完整重新走一遍，需要调用<code>requestLayout</code>。</p>\n</blockquote>\n<p><img src=\"/img/android_view-2.png\" alt=\"\"></p>\n<hr>\n<blockquote>\n<p>ps <a href=\"http://blog.csdn.net/guolin_blog/article/details/17357967\">第四篇</a>是一些简单的应用层，就没有整理了</p>\n</blockquote>\n<hr>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=NYtB6mlu7vA&amp;t=1m41s\">Google I/O 2013 - Writing Custom Views for Android</a></li>\n<li><a href=\"http://blog.csdn.net/guolin_blog/article/details/12921889\">Android LayoutInflater原理分析，带你一步步深入了解View(一)</a></li>\n<li><a href=\"http://blog.csdn.net/guolin_blog/article/details/16330267\">Android视图绘制流程完全解析，带你一步步深入了解View(二)</a></li>\n<li><a href=\"http://blog.csdn.net/guolin_blog/article/details/17045157\">Android视图状态及重绘流程分析，带你一步步深入了解View(三)</a></li>\n<li><a href=\"http://www.stormzhang.com/android/2014/04/10/android-optimize-layout/\">Android 布局优化</a></li>\n<li><a href=\"http://www.trinea.cn/android/layout-performance/\">性能优化之布局优化</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"Android动画","date":"2015-11-02T12:58:03.000Z","_content":"\n> 再复杂的动画，都是简单动画的结合\n\n<!-- more -->\n\n## I. Tween Animation(补间动画)\n\n形式 | 备注\n-|-\nalpha | 渐变透明度\nscale | 渐变尺寸\ntranslate | 画面位置移动\nrotate | 画面旋转\n\n#### 实现方式\n\n`Animation`配合`AnimationUtils`，结合xml中`set`\n\n## II. Frame Animation(关键帧动画)\n\n> 顺序播放关键帧\n\n#### 实现方式\n\n`AnimationDrawable`结合xml中定义`animation-list`标签\n\n> `AnimationDrawable`本身无法监听动画状态\n\n## III. 对象属性动画\n\n> Andorid 3.0加入(如果3.0以下想用使用，可以参考开源动画库: http://nineoldandroids.com/)\n> 基本概念: 可以对对象属性进行动画，不仅仅是View\n\n动画的默认帧率是一帧10ms(100帧/s(Android正常绘制60帧/s))\n\n### 1. TimeInterpolator(时间插值器)\n\n> 根据时间流逝的百分比来计算出当前属性值改变的百分比\n\n#### 系统默认提供的\n\n- `LinearInterpolator`: 线性插值器，匀速动画\n- `AccelerateDecelerateInterpolator`: 加速减速插值器，动画两头慢中间快\n- `DecelerateInterpolator`: 减速插值器，动画越来越慢\n- `AccelerateInterpolator`: 加速插值器，动画越来越快\n...\n\n### 2. TypeEvaluator(类型估值算法)\n\n> 根据当前属性改变的百分比来计算改变后的属性值\n\n#### 系统默认提供的\n\n- `IntEvaluator`: 针对整型属性\n- `FloatEvaluator`: 针对浮点型属性\n- `ArgbEvaluator`: 针对Color属性\n...\n\n> TypeEvaluator与TimeInterpolator是实现非匀速动画的神器。\n\n#### 实现方式\n\nTimeInterpolator与TypeEvaluator两者是配合使用的，\n\n```\npublic class LinearInterpolator implements Interpolator {\n\n    ...\n    public float getInterpolation(float input) {\n        // 返回时间流逝的百分比 input = (当前时间 - 开始时间)/ 总时间\n        return input; // 匀速\n        //return input * input; //加速\n    }\n}\n\npublic class IntEvaluator implements TypeEvaluator<Integer> {\n\n    public Integer evaluate(float fraction, Integer startValue, Integer endValue) {\n        // 返回需要变化的整型\n        int startInt = startValue;\n        // fraction: LinearInterpolator返回的流逝百分比\n        return (int)(startInt + fraction * (endValue - startInt));\n    }\n}\n```\n\n\n### 3. ObjectAnimator、ValueAnimator、AnimatorSet\n\n> 都可以直接在xml中定义 / 直接代码中实现，结合TimeInterpolator与TypeEvaluator，几乎可以实现所有想要的动画\n\n---\n\n#### 例子:\n\n> 为了理解，直接看几个例子\n> ps: 以下例子来自: [Android动画进阶—使用开源动画库nineoldandroids](http://blog.csdn.net/singwhatiwanna/article/details/17639987)与[Android属性动画深入分析：让你成为动画牛人](http://blog.csdn.net/singwhatiwanna/article/details/17841165)\n\n##### 第二个参数PropertyName\n\n> PropertyName: 如第一个例子的\"translationY\"\n\n> 我们定义第一个例子中的myObject为target\n\n1. 如果Animator中已经提供初始值，就只需要target包含Property的set方法(如第一个例子中myObject需要包含`setTranslationY(float)`)\n2. 如果Animator中未提供初始值，除了需要set方法，还需要包含Property的get方法(如地i一个例子中myObject需要包含`getTranslationY():float`)\n3. 满足以上两条，就可以定义为Property\n\n> ps: 如果View/某对象没有满足上面的条件，如果可以，未尝不可自己封装一层实现。\n\n```\n// 默认时间内，移动其高度的距离\nObjectAnimator.ofFloat(myObject, \"translationY\", -myObject.getHeight()).start();\n```\n\n```\n//  不断循环3s内背景颜色从红色渐变到蓝色再到红色\nValueAnimator colorAnim = ObjectAnimator.ofInt(\n                this, \"backgroundColor\",\n                /*Red*/0xFFFF8080,/*Blue*/0xFF8080FF);\ncolorAnim.setDuration(3000);\ncolorAnim.setEvaluator(new ArgbEvaluator());\ncolorAnim.setRepeatCount(ValueAnimator.INFINITE);\ncolorAnim.setRepeatMode(ValueAnimator.REVERSE);\ncolorAnim.start();\n```\n\n```\n// 5s内同时对View旋转、平移、缩放、透明都进行了改变\nAnimatorSet set = new AnimatorSet();\nset.playTogether(\n    ObjectAnimator.ofFloat(myView, \"rotationX\", 0, 360),\n    ObjectAnimator.ofFloat(myView, \"rotationY\", 0, 180),\n    ObjectAnimator.ofFloat(myView, \"rotation\", 0, -90),\n    ObjectAnimator.ofFloat(myView, \"translationX\", 0, 90),\n    ObjectAnimator.ofFloat(myView, \"translationY\", 0, 90),\n    ObjectAnimator.ofFloat(myView, \"scaleX\", 1, 1.5f),\n    ObjectAnimator.ofFloat(myView, \"scaleY\", 1, 0.5f),\n    ObjectAnimator.ofFloat(myView, \"alpha\", 1, 0.25f, 1)\n);\nset.setDuration(5 * 1000).start();\n```\n\n```\n// ValueAnimator的使用\n// 5s内匀速修改target的宽度\nprivate void performAnimate(final View target, final int start, final int end) {\n    ValueAnimator valueAnimator = ValueAnimator.ofInt(1, 100);\n\n    valueAnimator.addUpdateListener(new AnimatorUpdateListener() {\n\n        //持有一个IntEvaluator对象，方便下面估值的时候使用\n        private IntEvaluator mEvaluator = new IntEvaluator();\n\n        @Override\n        public void onAnimationUpdate(ValueAnimator animator) {\n            //获得当前动画的进度值，整型，1-100之间\n            int currentValue = (Integer)animator.getAnimatedValue();\n            Log.d(TAG, \"current value: \" + currentValue);\n\n            //计算当前进度占整个动画过程的比例，浮点型，0-1之间\n            float fraction = currentValue / 100f;\n\n            //直接调用整型估值器通过比例计算出宽度，然后再设给Button\n            target.getLayoutParams().width = mEvaluator.evaluate(fraction, start, end);\n            target.requestLayout();\n        }\n    });\n\n    valueAnimator.setDuration(5000).start();\n}\n```\n\n---\n\n- [Property Animation](https://developer.android.com/intl/zh-cn/guide/topics/graphics/prop-animation.html)\n- [android动画简介](http://blog.csdn.net/singwhatiwanna/article/details/9270275)\n- [Android动画进阶—使用开源动画库nineoldandroids](http://blog.csdn.net/singwhatiwanna/article/details/17639987)\n- [Animation 之 Interpolator 插补器理解](http://blog.csdn.net/qingye_love/article/details/8859347)\n- [Android属性动画深入分析：让你成为动画牛人](http://blog.csdn.net/singwhatiwanna/article/details/17841165)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/android_animation.md","raw":"title: Android动画\ndate: 2015-11-02 20:58:03\npermalink: 2015/11/02/android_animation\ntags:\n- Android\n- 动画\n- animation\n- TimeInterpolator\n- TypeEvaluator\n- ObjectAnimator\n- ValueAnimator\n- AnimatorSet\n\n---\n\n> 再复杂的动画，都是简单动画的结合\n\n<!-- more -->\n\n## I. Tween Animation(补间动画)\n\n形式 | 备注\n-|-\nalpha | 渐变透明度\nscale | 渐变尺寸\ntranslate | 画面位置移动\nrotate | 画面旋转\n\n#### 实现方式\n\n`Animation`配合`AnimationUtils`，结合xml中`set`\n\n## II. Frame Animation(关键帧动画)\n\n> 顺序播放关键帧\n\n#### 实现方式\n\n`AnimationDrawable`结合xml中定义`animation-list`标签\n\n> `AnimationDrawable`本身无法监听动画状态\n\n## III. 对象属性动画\n\n> Andorid 3.0加入(如果3.0以下想用使用，可以参考开源动画库: http://nineoldandroids.com/)\n> 基本概念: 可以对对象属性进行动画，不仅仅是View\n\n动画的默认帧率是一帧10ms(100帧/s(Android正常绘制60帧/s))\n\n### 1. TimeInterpolator(时间插值器)\n\n> 根据时间流逝的百分比来计算出当前属性值改变的百分比\n\n#### 系统默认提供的\n\n- `LinearInterpolator`: 线性插值器，匀速动画\n- `AccelerateDecelerateInterpolator`: 加速减速插值器，动画两头慢中间快\n- `DecelerateInterpolator`: 减速插值器，动画越来越慢\n- `AccelerateInterpolator`: 加速插值器，动画越来越快\n...\n\n### 2. TypeEvaluator(类型估值算法)\n\n> 根据当前属性改变的百分比来计算改变后的属性值\n\n#### 系统默认提供的\n\n- `IntEvaluator`: 针对整型属性\n- `FloatEvaluator`: 针对浮点型属性\n- `ArgbEvaluator`: 针对Color属性\n...\n\n> TypeEvaluator与TimeInterpolator是实现非匀速动画的神器。\n\n#### 实现方式\n\nTimeInterpolator与TypeEvaluator两者是配合使用的，\n\n```\npublic class LinearInterpolator implements Interpolator {\n\n    ...\n    public float getInterpolation(float input) {\n        // 返回时间流逝的百分比 input = (当前时间 - 开始时间)/ 总时间\n        return input; // 匀速\n        //return input * input; //加速\n    }\n}\n\npublic class IntEvaluator implements TypeEvaluator<Integer> {\n\n    public Integer evaluate(float fraction, Integer startValue, Integer endValue) {\n        // 返回需要变化的整型\n        int startInt = startValue;\n        // fraction: LinearInterpolator返回的流逝百分比\n        return (int)(startInt + fraction * (endValue - startInt));\n    }\n}\n```\n\n\n### 3. ObjectAnimator、ValueAnimator、AnimatorSet\n\n> 都可以直接在xml中定义 / 直接代码中实现，结合TimeInterpolator与TypeEvaluator，几乎可以实现所有想要的动画\n\n---\n\n#### 例子:\n\n> 为了理解，直接看几个例子\n> ps: 以下例子来自: [Android动画进阶—使用开源动画库nineoldandroids](http://blog.csdn.net/singwhatiwanna/article/details/17639987)与[Android属性动画深入分析：让你成为动画牛人](http://blog.csdn.net/singwhatiwanna/article/details/17841165)\n\n##### 第二个参数PropertyName\n\n> PropertyName: 如第一个例子的\"translationY\"\n\n> 我们定义第一个例子中的myObject为target\n\n1. 如果Animator中已经提供初始值，就只需要target包含Property的set方法(如第一个例子中myObject需要包含`setTranslationY(float)`)\n2. 如果Animator中未提供初始值，除了需要set方法，还需要包含Property的get方法(如地i一个例子中myObject需要包含`getTranslationY():float`)\n3. 满足以上两条，就可以定义为Property\n\n> ps: 如果View/某对象没有满足上面的条件，如果可以，未尝不可自己封装一层实现。\n\n```\n// 默认时间内，移动其高度的距离\nObjectAnimator.ofFloat(myObject, \"translationY\", -myObject.getHeight()).start();\n```\n\n```\n//  不断循环3s内背景颜色从红色渐变到蓝色再到红色\nValueAnimator colorAnim = ObjectAnimator.ofInt(\n                this, \"backgroundColor\",\n                /*Red*/0xFFFF8080,/*Blue*/0xFF8080FF);\ncolorAnim.setDuration(3000);\ncolorAnim.setEvaluator(new ArgbEvaluator());\ncolorAnim.setRepeatCount(ValueAnimator.INFINITE);\ncolorAnim.setRepeatMode(ValueAnimator.REVERSE);\ncolorAnim.start();\n```\n\n```\n// 5s内同时对View旋转、平移、缩放、透明都进行了改变\nAnimatorSet set = new AnimatorSet();\nset.playTogether(\n    ObjectAnimator.ofFloat(myView, \"rotationX\", 0, 360),\n    ObjectAnimator.ofFloat(myView, \"rotationY\", 0, 180),\n    ObjectAnimator.ofFloat(myView, \"rotation\", 0, -90),\n    ObjectAnimator.ofFloat(myView, \"translationX\", 0, 90),\n    ObjectAnimator.ofFloat(myView, \"translationY\", 0, 90),\n    ObjectAnimator.ofFloat(myView, \"scaleX\", 1, 1.5f),\n    ObjectAnimator.ofFloat(myView, \"scaleY\", 1, 0.5f),\n    ObjectAnimator.ofFloat(myView, \"alpha\", 1, 0.25f, 1)\n);\nset.setDuration(5 * 1000).start();\n```\n\n```\n// ValueAnimator的使用\n// 5s内匀速修改target的宽度\nprivate void performAnimate(final View target, final int start, final int end) {\n    ValueAnimator valueAnimator = ValueAnimator.ofInt(1, 100);\n\n    valueAnimator.addUpdateListener(new AnimatorUpdateListener() {\n\n        //持有一个IntEvaluator对象，方便下面估值的时候使用\n        private IntEvaluator mEvaluator = new IntEvaluator();\n\n        @Override\n        public void onAnimationUpdate(ValueAnimator animator) {\n            //获得当前动画的进度值，整型，1-100之间\n            int currentValue = (Integer)animator.getAnimatedValue();\n            Log.d(TAG, \"current value: \" + currentValue);\n\n            //计算当前进度占整个动画过程的比例，浮点型，0-1之间\n            float fraction = currentValue / 100f;\n\n            //直接调用整型估值器通过比例计算出宽度，然后再设给Button\n            target.getLayoutParams().width = mEvaluator.evaluate(fraction, start, end);\n            target.requestLayout();\n        }\n    });\n\n    valueAnimator.setDuration(5000).start();\n}\n```\n\n---\n\n- [Property Animation](https://developer.android.com/intl/zh-cn/guide/topics/graphics/prop-animation.html)\n- [android动画简介](http://blog.csdn.net/singwhatiwanna/article/details/9270275)\n- [Android动画进阶—使用开源动画库nineoldandroids](http://blog.csdn.net/singwhatiwanna/article/details/17639987)\n- [Animation 之 Interpolator 插补器理解](http://blog.csdn.net/qingye_love/article/details/8859347)\n- [Android属性动画深入分析：让你成为动画牛人](http://blog.csdn.net/singwhatiwanna/article/details/17841165)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2015/11/02/android_animation","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66ic001l95bu5hx5j01r","content":"<blockquote>\n<p>再复杂的动画，都是简单动画的结合</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"I-Tween-Animation-补间动画\"><a href=\"#I-Tween-Animation-补间动画\" class=\"headerlink\" title=\"I. Tween Animation(补间动画)\"></a>I. Tween Animation(补间动画)</h2><table>\n<thead>\n<tr>\n<th>形式</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>alpha</td>\n<td>渐变透明度</td>\n</tr>\n<tr>\n<td>scale</td>\n<td>渐变尺寸</td>\n</tr>\n<tr>\n<td>translate</td>\n<td>画面位置移动</td>\n</tr>\n<tr>\n<td>rotate</td>\n<td>画面旋转</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h4><p><code>Animation</code>配合<code>AnimationUtils</code>，结合xml中<code>set</code></p>\n<h2 id=\"II-Frame-Animation-关键帧动画\"><a href=\"#II-Frame-Animation-关键帧动画\" class=\"headerlink\" title=\"II. Frame Animation(关键帧动画)\"></a>II. Frame Animation(关键帧动画)</h2><blockquote>\n<p>顺序播放关键帧</p>\n</blockquote>\n<h4 id=\"实现方式-1\"><a href=\"#实现方式-1\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h4><p><code>AnimationDrawable</code>结合xml中定义<code>animation-list</code>标签</p>\n<blockquote>\n<p><code>AnimationDrawable</code>本身无法监听动画状态</p>\n</blockquote>\n<h2 id=\"III-对象属性动画\"><a href=\"#III-对象属性动画\" class=\"headerlink\" title=\"III. 对象属性动画\"></a>III. 对象属性动画</h2><blockquote>\n<p>Andorid 3.0加入(如果3.0以下想用使用，可以参考开源动画库: <a href=\"http://nineoldandroids.com/\" target=\"_blank\" rel=\"external\">http://nineoldandroids.com/</a>)<br>基本概念: 可以对对象属性进行动画，不仅仅是View</p>\n</blockquote>\n<p>动画的默认帧率是一帧10ms(100帧/s(Android正常绘制60帧/s))</p>\n<h3 id=\"1-TimeInterpolator-时间插值器\"><a href=\"#1-TimeInterpolator-时间插值器\" class=\"headerlink\" title=\"1. TimeInterpolator(时间插值器)\"></a>1. TimeInterpolator(时间插值器)</h3><blockquote>\n<p>根据时间流逝的百分比来计算出当前属性值改变的百分比</p>\n</blockquote>\n<h4 id=\"系统默认提供的\"><a href=\"#系统默认提供的\" class=\"headerlink\" title=\"系统默认提供的\"></a>系统默认提供的</h4><ul>\n<li><code>LinearInterpolator</code>: 线性插值器，匀速动画</li>\n<li><code>AccelerateDecelerateInterpolator</code>: 加速减速插值器，动画两头慢中间快</li>\n<li><code>DecelerateInterpolator</code>: 减速插值器，动画越来越慢</li>\n<li><code>AccelerateInterpolator</code>: 加速插值器，动画越来越快<br>…</li>\n</ul>\n<h3 id=\"2-TypeEvaluator-类型估值算法\"><a href=\"#2-TypeEvaluator-类型估值算法\" class=\"headerlink\" title=\"2. TypeEvaluator(类型估值算法)\"></a>2. TypeEvaluator(类型估值算法)</h3><blockquote>\n<p>根据当前属性改变的百分比来计算改变后的属性值</p>\n</blockquote>\n<h4 id=\"系统默认提供的-1\"><a href=\"#系统默认提供的-1\" class=\"headerlink\" title=\"系统默认提供的\"></a>系统默认提供的</h4><ul>\n<li><code>IntEvaluator</code>: 针对整型属性</li>\n<li><code>FloatEvaluator</code>: 针对浮点型属性</li>\n<li><code>ArgbEvaluator</code>: 针对Color属性<br>…</li>\n</ul>\n<blockquote>\n<p>TypeEvaluator与TimeInterpolator是实现非匀速动画的神器。</p>\n</blockquote>\n<h4 id=\"实现方式-2\"><a href=\"#实现方式-2\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h4><p>TimeInterpolator与TypeEvaluator两者是配合使用的，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinearInterpolator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Interpolator</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">float</span> <span class=\"title\">getInterpolation</span><span class=\"params\">(<span class=\"keyword\">float</span> input)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 返回时间流逝的百分比 input = (当前时间 - 开始时间)/ 总时间</span></div><div class=\"line\">        <span class=\"keyword\">return</span> input; <span class=\"comment\">// 匀速</span></div><div class=\"line\">        <span class=\"comment\">//return input * input; //加速</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IntEvaluator</span> <span class=\"keyword\">implements</span> <span class=\"title\">TypeEvaluator</span>&lt;<span class=\"title\">Integer</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">evaluate</span><span class=\"params\">(<span class=\"keyword\">float</span> fraction, Integer startValue, Integer endValue)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 返回需要变化的整型</span></div><div class=\"line\">        <span class=\"keyword\">int</span> startInt = startValue;</div><div class=\"line\">        <span class=\"comment\">// fraction: LinearInterpolator返回的流逝百分比</span></div><div class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>)(startInt + fraction * (endValue - startInt));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-ObjectAnimator、ValueAnimator、AnimatorSet\"><a href=\"#3-ObjectAnimator、ValueAnimator、AnimatorSet\" class=\"headerlink\" title=\"3. ObjectAnimator、ValueAnimator、AnimatorSet\"></a>3. ObjectAnimator、ValueAnimator、AnimatorSet</h3><blockquote>\n<p>都可以直接在xml中定义 / 直接代码中实现，结合TimeInterpolator与TypeEvaluator，几乎可以实现所有想要的动画</p>\n</blockquote>\n<hr>\n<h4 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子:\"></a>例子:</h4><blockquote>\n<p>为了理解，直接看几个例子<br>ps: 以下例子来自: <a href=\"http://blog.csdn.net/singwhatiwanna/article/details/17639987\" target=\"_blank\" rel=\"external\">Android动画进阶—使用开源动画库nineoldandroids</a>与<a href=\"http://blog.csdn.net/singwhatiwanna/article/details/17841165\" target=\"_blank\" rel=\"external\">Android属性动画深入分析：让你成为动画牛人</a></p>\n</blockquote>\n<h5 id=\"第二个参数PropertyName\"><a href=\"#第二个参数PropertyName\" class=\"headerlink\" title=\"第二个参数PropertyName\"></a>第二个参数PropertyName</h5><blockquote>\n<p>PropertyName: 如第一个例子的”translationY”</p>\n<p>我们定义第一个例子中的myObject为target</p>\n</blockquote>\n<ol>\n<li>如果Animator中已经提供初始值，就只需要target包含Property的set方法(如第一个例子中myObject需要包含<code>setTranslationY(float)</code>)</li>\n<li>如果Animator中未提供初始值，除了需要set方法，还需要包含Property的get方法(如地i一个例子中myObject需要包含<code>getTranslationY():float</code>)</li>\n<li>满足以上两条，就可以定义为Property</li>\n</ol>\n<blockquote>\n<p>ps: 如果View/某对象没有满足上面的条件，如果可以，未尝不可自己封装一层实现。</p>\n</blockquote>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 默认时间内，移动其高度的距离</span></div><div class=\"line\"><span class=\"selector-tag\">ObjectAnimator</span><span class=\"selector-class\">.ofFloat</span>(myObject, <span class=\"string\">\"translationY\"</span>, -myObject.getHeight())<span class=\"selector-class\">.start</span>();</div></pre></td></tr></table></figure>\n<figure class=\"highlight pony\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//  不断循环3s内背景颜色从红色渐变到蓝色再到红色</span></div><div class=\"line\"><span class=\"type\">ValueAnimator</span> colorAnim = <span class=\"type\">ObjectAnimator</span>.ofInt(</div><div class=\"line\">                <span class=\"literal\">this</span>, <span class=\"string\">\"backgroundColor\"</span>,</div><div class=\"line\">                <span class=\"comment\">/*Red*/</span><span class=\"number\">0xFFFF8080</span>,<span class=\"comment\">/*Blue*/</span><span class=\"number\">0xFF8080FF</span>);</div><div class=\"line\">colorAnim.setDuration(<span class=\"number\">3000</span>);</div><div class=\"line\">colorAnim.setEvaluator(<span class=\"function\"><span class=\"keyword\">new</span> <span class=\"title\">ArgbEvaluator</span>());</span></div><div class=\"line\"><span class=\"title\">colorAnim</span>.<span class=\"title\">setRepeatCount</span>(<span class=\"type\">ValueAnimator</span>.<span class=\"type\">INFINITE</span>);</div><div class=\"line\"><span class=\"title\">colorAnim</span>.<span class=\"title\">setRepeatMode</span>(<span class=\"type\">ValueAnimator</span>.<span class=\"type\">REVERSE</span>);</div><div class=\"line\"><span class=\"title\">colorAnim</span>.<span class=\"title\">start</span>();</div></pre></td></tr></table></figure>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 5s内同时对View旋转、平移、缩放、透明都进行了改变</span></div><div class=\"line\">AnimatorSet set = new AnimatorSet();</div><div class=\"line\">set.playTogether(</div><div class=\"line\">    ObjectAnimator.ofFloat(myView, <span class=\"string\">\"rotationX\"</span>, <span class=\"number\">0</span>, <span class=\"number\">360</span>),</div><div class=\"line\">    ObjectAnimator.ofFloat(myView, <span class=\"string\">\"rotationY\"</span>, <span class=\"number\">0</span>, <span class=\"number\">180</span>),</div><div class=\"line\">    ObjectAnimator.ofFloat(myView, <span class=\"string\">\"rotation\"</span>, <span class=\"number\">0</span>, <span class=\"number\">-90</span>),</div><div class=\"line\">    ObjectAnimator.ofFloat(myView, <span class=\"string\">\"translationX\"</span>, <span class=\"number\">0</span>, <span class=\"number\">90</span>),</div><div class=\"line\">    ObjectAnimator.ofFloat(myView, <span class=\"string\">\"translationY\"</span>, <span class=\"number\">0</span>, <span class=\"number\">90</span>),</div><div class=\"line\">    ObjectAnimator.ofFloat(myView, <span class=\"string\">\"scaleX\"</span>, <span class=\"number\">1</span>, <span class=\"number\">1.5</span>f),</div><div class=\"line\">    ObjectAnimator.ofFloat(myView, <span class=\"string\">\"scaleY\"</span>, <span class=\"number\">1</span>, <span class=\"number\">0.5</span>f),</div><div class=\"line\">    ObjectAnimator.ofFloat(myView, <span class=\"string\">\"alpha\"</span>, <span class=\"number\">1</span>, <span class=\"number\">0.25</span>f, <span class=\"number\">1</span>)</div><div class=\"line\">);</div><div class=\"line\">set.setDuration(<span class=\"number\">5</span> * <span class=\"number\">1000</span>).start();</div></pre></td></tr></table></figure>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ValueAnimator的使用</span></div><div class=\"line\"><span class=\"comment\">// 5s内匀速修改target的宽度</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">performAnimate</span><span class=\"params\">(<span class=\"keyword\">final</span> View <span class=\"keyword\">target</span>, <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> start, <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> end)</span> </span>&#123;</div><div class=\"line\">    ValueAnimator valueAnimator = ValueAnimator.ofInt(<span class=\"number\">1</span>, <span class=\"number\">100</span>);</div><div class=\"line\"></div><div class=\"line\">    valueAnimator.addUpdateListener(<span class=\"keyword\">new</span> AnimatorUpdateListener() &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//持有一个IntEvaluator对象，方便下面估值的时候使用</span></div><div class=\"line\">        <span class=\"keyword\">private</span> IntEvaluator mEvaluator = <span class=\"keyword\">new</span> IntEvaluator();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onAnimationUpdate</span><span class=\"params\">(ValueAnimator animator)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">//获得当前动画的进度值，整型，1-100之间</span></div><div class=\"line\">            <span class=\"keyword\">int</span> currentValue = (Integer)animator.getAnimatedValue();</div><div class=\"line\">            Log.d(TAG, <span class=\"string\">\"current value: \"</span> + currentValue);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">//计算当前进度占整个动画过程的比例，浮点型，0-1之间</span></div><div class=\"line\">            <span class=\"keyword\">float</span> fraction = currentValue / <span class=\"number\">100</span>f;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">//直接调用整型估值器通过比例计算出宽度，然后再设给Button</span></div><div class=\"line\">            <span class=\"keyword\">target</span>.getLayoutParams().width = mEvaluator.evaluate(fraction, start, end);</div><div class=\"line\">            <span class=\"keyword\">target</span>.requestLayout();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    valueAnimator.setDuration(<span class=\"number\">5000</span>).start();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<ul>\n<li><a href=\"https://developer.android.com/intl/zh-cn/guide/topics/graphics/prop-animation.html\" target=\"_blank\" rel=\"external\">Property Animation</a></li>\n<li><a href=\"http://blog.csdn.net/singwhatiwanna/article/details/9270275\" target=\"_blank\" rel=\"external\">android动画简介</a></li>\n<li><a href=\"http://blog.csdn.net/singwhatiwanna/article/details/17639987\" target=\"_blank\" rel=\"external\">Android动画进阶—使用开源动画库nineoldandroids</a></li>\n<li><a href=\"http://blog.csdn.net/qingye_love/article/details/8859347\" target=\"_blank\" rel=\"external\">Animation 之 Interpolator 插补器理解</a></li>\n<li><a href=\"http://blog.csdn.net/singwhatiwanna/article/details/17841165\" target=\"_blank\" rel=\"external\">Android属性动画深入分析：让你成为动画牛人</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>再复杂的动画，都是简单动画的结合</p>\n</blockquote>","more":"<h2 id=\"I-Tween-Animation-补间动画\"><a href=\"#I-Tween-Animation-补间动画\" class=\"headerlink\" title=\"I. Tween Animation(补间动画)\"></a>I. Tween Animation(补间动画)</h2><table>\n<thead>\n<tr>\n<th>形式</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>alpha</td>\n<td>渐变透明度</td>\n</tr>\n<tr>\n<td>scale</td>\n<td>渐变尺寸</td>\n</tr>\n<tr>\n<td>translate</td>\n<td>画面位置移动</td>\n</tr>\n<tr>\n<td>rotate</td>\n<td>画面旋转</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h4><p><code>Animation</code>配合<code>AnimationUtils</code>，结合xml中<code>set</code></p>\n<h2 id=\"II-Frame-Animation-关键帧动画\"><a href=\"#II-Frame-Animation-关键帧动画\" class=\"headerlink\" title=\"II. Frame Animation(关键帧动画)\"></a>II. Frame Animation(关键帧动画)</h2><blockquote>\n<p>顺序播放关键帧</p>\n</blockquote>\n<h4 id=\"实现方式-1\"><a href=\"#实现方式-1\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h4><p><code>AnimationDrawable</code>结合xml中定义<code>animation-list</code>标签</p>\n<blockquote>\n<p><code>AnimationDrawable</code>本身无法监听动画状态</p>\n</blockquote>\n<h2 id=\"III-对象属性动画\"><a href=\"#III-对象属性动画\" class=\"headerlink\" title=\"III. 对象属性动画\"></a>III. 对象属性动画</h2><blockquote>\n<p>Andorid 3.0加入(如果3.0以下想用使用，可以参考开源动画库: <a href=\"http://nineoldandroids.com/\">http://nineoldandroids.com/</a>)<br>基本概念: 可以对对象属性进行动画，不仅仅是View</p>\n</blockquote>\n<p>动画的默认帧率是一帧10ms(100帧/s(Android正常绘制60帧/s))</p>\n<h3 id=\"1-TimeInterpolator-时间插值器\"><a href=\"#1-TimeInterpolator-时间插值器\" class=\"headerlink\" title=\"1. TimeInterpolator(时间插值器)\"></a>1. TimeInterpolator(时间插值器)</h3><blockquote>\n<p>根据时间流逝的百分比来计算出当前属性值改变的百分比</p>\n</blockquote>\n<h4 id=\"系统默认提供的\"><a href=\"#系统默认提供的\" class=\"headerlink\" title=\"系统默认提供的\"></a>系统默认提供的</h4><ul>\n<li><code>LinearInterpolator</code>: 线性插值器，匀速动画</li>\n<li><code>AccelerateDecelerateInterpolator</code>: 加速减速插值器，动画两头慢中间快</li>\n<li><code>DecelerateInterpolator</code>: 减速插值器，动画越来越慢</li>\n<li><code>AccelerateInterpolator</code>: 加速插值器，动画越来越快<br>…</li>\n</ul>\n<h3 id=\"2-TypeEvaluator-类型估值算法\"><a href=\"#2-TypeEvaluator-类型估值算法\" class=\"headerlink\" title=\"2. TypeEvaluator(类型估值算法)\"></a>2. TypeEvaluator(类型估值算法)</h3><blockquote>\n<p>根据当前属性改变的百分比来计算改变后的属性值</p>\n</blockquote>\n<h4 id=\"系统默认提供的-1\"><a href=\"#系统默认提供的-1\" class=\"headerlink\" title=\"系统默认提供的\"></a>系统默认提供的</h4><ul>\n<li><code>IntEvaluator</code>: 针对整型属性</li>\n<li><code>FloatEvaluator</code>: 针对浮点型属性</li>\n<li><code>ArgbEvaluator</code>: 针对Color属性<br>…</li>\n</ul>\n<blockquote>\n<p>TypeEvaluator与TimeInterpolator是实现非匀速动画的神器。</p>\n</blockquote>\n<h4 id=\"实现方式-2\"><a href=\"#实现方式-2\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h4><p>TimeInterpolator与TypeEvaluator两者是配合使用的，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinearInterpolator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Interpolator</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">float</span> <span class=\"title\">getInterpolation</span><span class=\"params\">(<span class=\"keyword\">float</span> input)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 返回时间流逝的百分比 input = (当前时间 - 开始时间)/ 总时间</span></div><div class=\"line\">        <span class=\"keyword\">return</span> input; <span class=\"comment\">// 匀速</span></div><div class=\"line\">        <span class=\"comment\">//return input * input; //加速</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IntEvaluator</span> <span class=\"keyword\">implements</span> <span class=\"title\">TypeEvaluator</span>&lt;<span class=\"title\">Integer</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">evaluate</span><span class=\"params\">(<span class=\"keyword\">float</span> fraction, Integer startValue, Integer endValue)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 返回需要变化的整型</span></div><div class=\"line\">        <span class=\"keyword\">int</span> startInt = startValue;</div><div class=\"line\">        <span class=\"comment\">// fraction: LinearInterpolator返回的流逝百分比</span></div><div class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>)(startInt + fraction * (endValue - startInt));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-ObjectAnimator、ValueAnimator、AnimatorSet\"><a href=\"#3-ObjectAnimator、ValueAnimator、AnimatorSet\" class=\"headerlink\" title=\"3. ObjectAnimator、ValueAnimator、AnimatorSet\"></a>3. ObjectAnimator、ValueAnimator、AnimatorSet</h3><blockquote>\n<p>都可以直接在xml中定义 / 直接代码中实现，结合TimeInterpolator与TypeEvaluator，几乎可以实现所有想要的动画</p>\n</blockquote>\n<hr>\n<h4 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子:\"></a>例子:</h4><blockquote>\n<p>为了理解，直接看几个例子<br>ps: 以下例子来自: <a href=\"http://blog.csdn.net/singwhatiwanna/article/details/17639987\">Android动画进阶—使用开源动画库nineoldandroids</a>与<a href=\"http://blog.csdn.net/singwhatiwanna/article/details/17841165\">Android属性动画深入分析：让你成为动画牛人</a></p>\n</blockquote>\n<h5 id=\"第二个参数PropertyName\"><a href=\"#第二个参数PropertyName\" class=\"headerlink\" title=\"第二个参数PropertyName\"></a>第二个参数PropertyName</h5><blockquote>\n<p>PropertyName: 如第一个例子的”translationY”</p>\n<p>我们定义第一个例子中的myObject为target</p>\n</blockquote>\n<ol>\n<li>如果Animator中已经提供初始值，就只需要target包含Property的set方法(如第一个例子中myObject需要包含<code>setTranslationY(float)</code>)</li>\n<li>如果Animator中未提供初始值，除了需要set方法，还需要包含Property的get方法(如地i一个例子中myObject需要包含<code>getTranslationY():float</code>)</li>\n<li>满足以上两条，就可以定义为Property</li>\n</ol>\n<blockquote>\n<p>ps: 如果View/某对象没有满足上面的条件，如果可以，未尝不可自己封装一层实现。</p>\n</blockquote>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 默认时间内，移动其高度的距离</span></div><div class=\"line\"><span class=\"selector-tag\">ObjectAnimator</span><span class=\"selector-class\">.ofFloat</span>(myObject, <span class=\"string\">\"translationY\"</span>, -myObject.getHeight())<span class=\"selector-class\">.start</span>();</div></pre></td></tr></table></figure>\n<figure class=\"highlight pony\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//  不断循环3s内背景颜色从红色渐变到蓝色再到红色</span></div><div class=\"line\"><span class=\"type\">ValueAnimator</span> colorAnim = <span class=\"type\">ObjectAnimator</span>.ofInt(</div><div class=\"line\">                <span class=\"literal\">this</span>, <span class=\"string\">\"backgroundColor\"</span>,</div><div class=\"line\">                <span class=\"comment\">/*Red*/</span><span class=\"number\">0xFFFF8080</span>,<span class=\"comment\">/*Blue*/</span><span class=\"number\">0xFF8080FF</span>);</div><div class=\"line\">colorAnim.setDuration(<span class=\"number\">3000</span>);</div><div class=\"line\">colorAnim.setEvaluator(<span class=\"function\"><span class=\"keyword\">new</span> <span class=\"title\">ArgbEvaluator</span>());</div><div class=\"line\"><span class=\"title\">colorAnim</span>.<span class=\"title\">setRepeatCount</span>(<span class=\"type\">ValueAnimator</span>.<span class=\"type\">INFINITE</span>);</div><div class=\"line\"><span class=\"title\">colorAnim</span>.<span class=\"title\">setRepeatMode</span>(<span class=\"type\">ValueAnimator</span>.<span class=\"type\">REVERSE</span>);</div><div class=\"line\"><span class=\"title\">colorAnim</span>.<span class=\"title\">start</span>();</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 5s内同时对View旋转、平移、缩放、透明都进行了改变</span></div><div class=\"line\">AnimatorSet set = new AnimatorSet();</div><div class=\"line\">set.playTogether(</div><div class=\"line\">    ObjectAnimator.ofFloat(myView, <span class=\"string\">\"rotationX\"</span>, <span class=\"number\">0</span>, <span class=\"number\">360</span>),</div><div class=\"line\">    ObjectAnimator.ofFloat(myView, <span class=\"string\">\"rotationY\"</span>, <span class=\"number\">0</span>, <span class=\"number\">180</span>),</div><div class=\"line\">    ObjectAnimator.ofFloat(myView, <span class=\"string\">\"rotation\"</span>, <span class=\"number\">0</span>, <span class=\"number\">-90</span>),</div><div class=\"line\">    ObjectAnimator.ofFloat(myView, <span class=\"string\">\"translationX\"</span>, <span class=\"number\">0</span>, <span class=\"number\">90</span>),</div><div class=\"line\">    ObjectAnimator.ofFloat(myView, <span class=\"string\">\"translationY\"</span>, <span class=\"number\">0</span>, <span class=\"number\">90</span>),</div><div class=\"line\">    ObjectAnimator.ofFloat(myView, <span class=\"string\">\"scaleX\"</span>, <span class=\"number\">1</span>, <span class=\"number\">1.5</span>f),</div><div class=\"line\">    ObjectAnimator.ofFloat(myView, <span class=\"string\">\"scaleY\"</span>, <span class=\"number\">1</span>, <span class=\"number\">0.5</span>f),</div><div class=\"line\">    ObjectAnimator.ofFloat(myView, <span class=\"string\">\"alpha\"</span>, <span class=\"number\">1</span>, <span class=\"number\">0.25</span>f, <span class=\"number\">1</span>)</div><div class=\"line\">);</div><div class=\"line\">set.setDuration(<span class=\"number\">5</span> * <span class=\"number\">1000</span>).start();</div></pre></td></tr></table></figure>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ValueAnimator的使用</span></div><div class=\"line\"><span class=\"comment\">// 5s内匀速修改target的宽度</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">performAnimate</span><span class=\"params\">(<span class=\"keyword\">final</span> View <span class=\"keyword\">target</span>, <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> start, <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> end)</span> </span>&#123;</div><div class=\"line\">    ValueAnimator valueAnimator = ValueAnimator.ofInt(<span class=\"number\">1</span>, <span class=\"number\">100</span>);</div><div class=\"line\"></div><div class=\"line\">    valueAnimator.addUpdateListener(<span class=\"keyword\">new</span> AnimatorUpdateListener() &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//持有一个IntEvaluator对象，方便下面估值的时候使用</span></div><div class=\"line\">        <span class=\"keyword\">private</span> IntEvaluator mEvaluator = <span class=\"keyword\">new</span> IntEvaluator();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onAnimationUpdate</span><span class=\"params\">(ValueAnimator animator)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">//获得当前动画的进度值，整型，1-100之间</span></div><div class=\"line\">            <span class=\"keyword\">int</span> currentValue = (Integer)animator.getAnimatedValue();</div><div class=\"line\">            Log.d(TAG, <span class=\"string\">\"current value: \"</span> + currentValue);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">//计算当前进度占整个动画过程的比例，浮点型，0-1之间</span></div><div class=\"line\">            <span class=\"keyword\">float</span> fraction = currentValue / <span class=\"number\">100</span>f;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">//直接调用整型估值器通过比例计算出宽度，然后再设给Button</span></div><div class=\"line\">            <span class=\"keyword\">target</span>.getLayoutParams().width = mEvaluator.evaluate(fraction, start, end);</div><div class=\"line\">            <span class=\"keyword\">target</span>.requestLayout();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    valueAnimator.setDuration(<span class=\"number\">5000</span>).start();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<ul>\n<li><a href=\"https://developer.android.com/intl/zh-cn/guide/topics/graphics/prop-animation.html\">Property Animation</a></li>\n<li><a href=\"http://blog.csdn.net/singwhatiwanna/article/details/9270275\">android动画简介</a></li>\n<li><a href=\"http://blog.csdn.net/singwhatiwanna/article/details/17639987\">Android动画进阶—使用开源动画库nineoldandroids</a></li>\n<li><a href=\"http://blog.csdn.net/qingye_love/article/details/8859347\">Animation 之 Interpolator 插补器理解</a></li>\n<li><a href=\"http://blog.csdn.net/singwhatiwanna/article/details/17841165\">Android属性动画深入分析：让你成为动画牛人</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"ART、Dalvik","date":"2015-11-01T04:23:03.000Z","_content":"> ART虚拟机的实现在libart.so中，而Dalvik再libdvm.so中\n> 实现了Java虚拟机的接口，内部却提供完全不一样的东西， -- 为了兼容。\n\n<!-- more -->\n\n## I. Dalvik\n\n#### dex字节码解释器\n\n逐条逐行的执行字节码指令\n\n#### JIT(Just-In-Time)编译器\n\n当多次运行速度稍慢的代码时，JIT编译器则会自动将热点代码编译并缓存起来，由此执行速度会逐渐加快\n\n## II. ART\n\n> Ahead-Of-Time(AOT)编译\n\n在安装时就已经编译成本地代码，因此只需要编译一次，运行时直接执行（应用运行更快(少去该部分的资源竞争)的同时，更省电）。\n\n- 占用内存空间变大。\n- 运行速度更快，且更省电 - 运行程序时无需额外的编译、加载转换等，少去这块的CPU资源竞争。\n\n\n## III. ART与Dalvik相同之处\n\n接口名 | 备注\n-|-\n`JNI_GetDefaultJavaVMInitArgs` | 获取虚拟机的默认初始化参数\n`JNI_CreateJavaVM` | 在进程中创建虚拟机实例\n`JNI_GetCreatedJavaVMs` | 获取进程中创建的虚拟机实例\n\n## IV. ART与Dalvik不同之处\n\n虚拟机名 | 安装时 | 每次重新运行apk时 |\n:-: | - | - |\nART | 解析翻译dex字节码为本地代码(AOT) | 直接执行本地代码\nDalvik | 将dex字节码优化生成odex文件(`PackageManagerService`请求守护进程`installd`来执行) | 通过解释器(Android 2.2引入JIT(缓存热点代码的解释结果))对dex字节码解释为机器码，再执行机器码\n\n\n## V. 推敲\n\n> `persist.sys.dalvik.vm.lib`: 系统属性，若等于`libdvm.so`则当前使用的是Dalvik虚拟机，若等于`libstart.so`，则当前使用的是ART虚拟机\n\n### 1. 安装\n> 最终安装优化/翻译 结果都是保存在`odex`文件中\n\n![](/img/android_dvm_art-1.png)\n\n> 系统启动时，系统除了对/system/app和/data/app目录下所有apk进行翻译以外，还会对/system/framework目录的apk/jar以及这些apk所引用的外部jar进行翻译，保证不对Dalvik虚拟机产生任何依赖。\n\n### 2. 运行\n\n![](/img/android_dvm_art-2.png)\n\n---\n\n#### 运行相关代码段:\n\n```\n// frameworks/base/core/jni/AndroidRuntime.cpp\nvoid AndroidRuntime::start(const char* className, const char* options)\n{\n    ......\n\n    /* start the virtual machine */\n    JniInvocation jni_invocation;\n    jni_invocation.Init(NULL);\n    JNIEnv* env;\n    if (startVm(&mJavaVM, &env) != 0) {\n        return;\n    }\n\n    ......\n\n    /*\n     * Start VM.  This thread becomes the main thread of the VM, and will\n     * not return until the VM exits.\n     */\n    char* slashClassName = toSlashClassName(className);\n    jclass startClass = env->FindClass(slashClassName);\n    if (startClass == NULL) {\n        ALOGE(\"JavaVM unable to locate class '%s'\\n\", slashClassName);\n        /* keep going */\n    } else {\n        jmethodID startMeth = env->GetStaticMethodID(startClass, \"main\",\n            \"([Ljava/lang/String;)V\");\n        if (startMeth == NULL) {\n            ALOGE(\"JavaVM unable to find main() in '%s'\\n\", className);\n            /* keep going */\n        } else {\n            env->CallStaticVoidMethod(startClass, startMeth, strArray);\n\n#if 0\n            if (env->ExceptionCheck())\n                threadExitUncaughtException(env);\n#endif\n        }\n    }\n\n    ......\n}\n\nint AndroidRuntime::startVm(JavaVM** pJavaVM, JNIEnv** pEnv)\n{\n    ......\n\n    /*\n     * Initialize the VM.\n     *\n     * The JavaVM* is essentially per-process, and the JNIEnv* is per-thread.\n     * If this call succeeds, the VM is ready, and we can start issuing\n     * JNI calls.\n     */\n    if (JNI_CreateJavaVM(pJavaVM, pEnv, &initArgs) < 0) {\n        ALOGE(\"JNI_CreateJavaVM failed\\n\");\n        goto bail;\n    }\n\n    ......\n}\n```\n\n```\n// libnativehelper/JniInvocation.cpp\n#ifdef HAVE_ANDROID_OS\nstatic const char* kLibrarySystemProperty = \"persist.sys.dalvik.vm.lib\";\n#endif\nstatic const char* kLibraryFallback = \"libdvm.so\";\n\nbool JniInvocation::Init(const char* library) {\n#ifdef HAVE_ANDROID_OS\n  char default_library[PROPERTY_VALUE_MAX];\n  property_get(kLibrarySystemProperty, default_library, kLibraryFallback);\n#else\n  const char* default_library = kLibraryFallback;\n#endif\n  if (library == NULL) {\n    library = default_library;\n  }\n\n  handle_ = dlopen(library, RTLD_NOW);\n  if (handle_ == NULL) {\n    if (strcmp(library, kLibraryFallback) == 0) {\n      // Nothing else to try.\n      ALOGE(\"Failed to dlopen %s: %s\", library, dlerror());\n      return false;\n    }\n    // Note that this is enough to get something like the zygote\n    // running, we can't property_set here to fix this for the future\n    // because we are root and not the system user. See\n    // RuntimeInit.commonInit for where we fix up the property to\n    // avoid future fallbacks. http://b/11463182\n    ALOGW(\"Falling back from %s to %s after dlopen error: %s\",\n          library, kLibraryFallback, dlerror());\n    library = kLibraryFallback;\n    handle_ = dlopen(library, RTLD_NOW);\n    if (handle_ == NULL) {\n      ALOGE(\"Failed to dlopen %s: %s\", library, dlerror());\n      return false;\n    }\n  }\n  if (!FindSymbol(reinterpret_cast<void**>(&JNI_GetDefaultJavaVMInitArgs_),\n                  \"JNI_GetDefaultJavaVMInitArgs\")) {\n    return false;\n  }\n  if (!FindSymbol(reinterpret_cast<void**>(&JNI_CreateJavaVM_),\n                  \"JNI_CreateJavaVM\")) {\n    return false;\n  }\n  if (!FindSymbol(reinterpret_cast<void**>(&JNI_GetCreatedJavaVMs_),\n                  \"JNI_GetCreatedJavaVMs\")) {\n    return false;\n  }\n  return true;\n}\n\n\nextern \"C\" jint JNI_CreateJavaVM(JavaVM** p_vm, JNIEnv** p_env, void* vm_args) {\n  return JniInvocation::GetJniInvocation().JNI_CreateJavaVM(p_vm, p_env, vm_args);\n}\n\njint JniInvocation::JNI_CreateJavaVM(JavaVM** p_vm, JNIEnv** p_env, void* vm_args) {\n  return JNI_CreateJavaVM_(p_vm, p_env, vm_args);\n}\n```\n\n---\n#### 安装相关代码段:\n\n```\n// frameworks/base/services/java/com/android/server/pm/Installer.java\npublic final class Installer {\n    ......\n\n    public int dexopt(String apkPath, int uid, boolean isPublic) {\n        StringBuilder builder = new StringBuilder(\"dexopt\");\n        builder.append(' ');\n        builder.append(apkPath);\n        builder.append(' ');\n        builder.append(uid);\n        builder.append(isPublic ? \" 1\" : \" 0\");\n        return execute(builder.toString());\n    }\n\n    ......\n}\n```\n\n```\n// frameworks/native/cmds/installd/commands.c\nint dexopt(const char *apk_path, uid_t uid, int is_public)\n{\n    struct utimbuf ut;\n    struct stat apk_stat, dex_stat;\n    char out_path[PKG_PATH_MAX];\n    char dexopt_flags[PROPERTY_VALUE_MAX];\n    char persist_sys_dalvik_vm_lib[PROPERTY_VALUE_MAX];\n    char *end;\n    int res, zip_fd=-1, out_fd=-1;\n\n    ......\n\n    /* The command to run depend ones the value of persist.sys.dalvik.vm.lib */\n    property_get(\"persist.sys.dalvik.vm.lib\", persist_sys_dalvik_vm_lib, \"libdvm.so\");\n\n    /* Before anything else: is there a .odex file?  If so, we have\n     * precompiled the apk and there is nothing to do here.\n     */\n    sprintf(out_path, \"%s%s\", apk_path, \".odex\");\n    if (stat(out_path, &dex_stat) == 0) {\n        return 0;\n    }\n\n    if (create_cache_path(out_path, apk_path)) {\n        return -1;\n    }\n\n    ......\n\n    out_fd = open(out_path, O_RDWR | O_CREAT | O_EXCL, 0644);\n\n    ......\n\n    pid_t pid;\n    pid = fork();\n    if (pid == 0) {\n        ......\n\n        if (strncmp(persist_sys_dalvik_vm_lib, \"libdvm\", 6) == 0) {\n            run_dexopt(zip_fd, out_fd, apk_path, out_path, dexopt_flags);\n        } else if (strncmp(persist_sys_dalvik_vm_lib, \"libart\", 6) == 0) {\n            run_dex2oat(zip_fd, out_fd, apk_path, out_path, dexopt_flags);\n        } else {\n            exit(69);   /* Unexpected persist.sys.dalvik.vm.lib value */\n        }\n        exit(68);   /* only get here on exec failure */\n    }\n\n    ......\n}\n\nstatic void run_dexopt(int zip_fd, int odex_fd, const char* input_file_name,\n    const char* output_file_name, const char* dexopt_flags)\n{\n    static const char* DEX_OPT_BIN = \"/system/bin/dexopt\";\n    static const int MAX_INT_LEN = 12;      // '-'+10dig+'\\0' -OR- 0x+8dig\n    char zip_num[MAX_INT_LEN];\n    char odex_num[MAX_INT_LEN];\n\n    sprintf(zip_num, \"%d\", zip_fd);\n    sprintf(odex_num, \"%d\", odex_fd);\n\n    ALOGV(\"Running %s in=%s out=%s\\n\", DEX_OPT_BIN, input_file_name, output_file_name);\n    execl(DEX_OPT_BIN, DEX_OPT_BIN, \"--zip\", zip_num, odex_num, input_file_name,\n        dexopt_flags, (char*) NULL);\n    ALOGE(\"execl(%s) failed: %s\\n\", DEX_OPT_BIN, strerror(errno));\n}\n\nstatic void run_dex2oat(int zip_fd, int oat_fd, const char* input_file_name,\n    const char* output_file_name, const char* dexopt_flags)\n{\n    static const char* DEX2OAT_BIN = \"/system/bin/dex2oat\";\n    static const int MAX_INT_LEN = 12;      // '-'+10dig+'\\0' -OR- 0x+8dig\n    char zip_fd_arg[strlen(\"--zip-fd=\") + MAX_INT_LEN];\n    char zip_location_arg[strlen(\"--zip-location=\") + PKG_PATH_MAX];\n    char oat_fd_arg[strlen(\"--oat-fd=\") + MAX_INT_LEN];\n    char oat_location_arg[strlen(\"--oat-name=\") + PKG_PATH_MAX];\n\n    sprintf(zip_fd_arg, \"--zip-fd=%d\", zip_fd);\n    sprintf(zip_location_arg, \"--zip-location=%s\", input_file_name);\n    sprintf(oat_fd_arg, \"--oat-fd=%d\", oat_fd);\n    sprintf(oat_location_arg, \"--oat-location=%s\", output_file_name);\n\n    ALOGV(\"Running %s in=%s out=%s\\n\", DEX2OAT_BIN, input_file_name, output_file_name);\n    execl(DEX2OAT_BIN, DEX2OAT_BIN,\n          zip_fd_arg, zip_location_arg,\n          oat_fd_arg, oat_location_arg,\n          (char*) NULL);\n    ALOGE(\"execl(%s) failed: %s\\n\", DEX2OAT_BIN, strerror(errno));\n}\n```\n---\n\n- [Android ART运行时无缝替换Dalvik虚拟机的过程分析](http://blog.csdn.net/luoshengyang/article/details/18006645)\n- [Dalvik VM vs. ART (Android Runtime): Impact for end-users?](http://android.stackexchange.com/questions/56773/dalvik-vm-vs-art-android-runtime-impact-for-end-users)\n- [Dalvik、ART虚拟机小结](http://www.itlipan.info/android/2015/08/07/android-dalvik.html)\n- [ART运行时垃圾收集（GC）过程分析](http://blog.csdn.net/luoshengyang/article/details/42555483)\n- [浅谈为什么Java运行环境是虚拟机，而Python运行环境是解释器](http://www.xrpmoon.com/blog/archives/jripple1105.html)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/android_art_dalvik.md","raw":"title: ART、Dalvik\ndate: 2015-11-01 12:23:03\npermalink: 2015/11/01/android_art_dalvik\ntags:\n- ART\n- Dalvik\n- Android\n- 安装\n- 运行\n\n---\n> ART虚拟机的实现在libart.so中，而Dalvik再libdvm.so中\n> 实现了Java虚拟机的接口，内部却提供完全不一样的东西， -- 为了兼容。\n\n<!-- more -->\n\n## I. Dalvik\n\n#### dex字节码解释器\n\n逐条逐行的执行字节码指令\n\n#### JIT(Just-In-Time)编译器\n\n当多次运行速度稍慢的代码时，JIT编译器则会自动将热点代码编译并缓存起来，由此执行速度会逐渐加快\n\n## II. ART\n\n> Ahead-Of-Time(AOT)编译\n\n在安装时就已经编译成本地代码，因此只需要编译一次，运行时直接执行（应用运行更快(少去该部分的资源竞争)的同时，更省电）。\n\n- 占用内存空间变大。\n- 运行速度更快，且更省电 - 运行程序时无需额外的编译、加载转换等，少去这块的CPU资源竞争。\n\n\n## III. ART与Dalvik相同之处\n\n接口名 | 备注\n-|-\n`JNI_GetDefaultJavaVMInitArgs` | 获取虚拟机的默认初始化参数\n`JNI_CreateJavaVM` | 在进程中创建虚拟机实例\n`JNI_GetCreatedJavaVMs` | 获取进程中创建的虚拟机实例\n\n## IV. ART与Dalvik不同之处\n\n虚拟机名 | 安装时 | 每次重新运行apk时 |\n:-: | - | - |\nART | 解析翻译dex字节码为本地代码(AOT) | 直接执行本地代码\nDalvik | 将dex字节码优化生成odex文件(`PackageManagerService`请求守护进程`installd`来执行) | 通过解释器(Android 2.2引入JIT(缓存热点代码的解释结果))对dex字节码解释为机器码，再执行机器码\n\n\n## V. 推敲\n\n> `persist.sys.dalvik.vm.lib`: 系统属性，若等于`libdvm.so`则当前使用的是Dalvik虚拟机，若等于`libstart.so`，则当前使用的是ART虚拟机\n\n### 1. 安装\n> 最终安装优化/翻译 结果都是保存在`odex`文件中\n\n![](/img/android_dvm_art-1.png)\n\n> 系统启动时，系统除了对/system/app和/data/app目录下所有apk进行翻译以外，还会对/system/framework目录的apk/jar以及这些apk所引用的外部jar进行翻译，保证不对Dalvik虚拟机产生任何依赖。\n\n### 2. 运行\n\n![](/img/android_dvm_art-2.png)\n\n---\n\n#### 运行相关代码段:\n\n```\n// frameworks/base/core/jni/AndroidRuntime.cpp\nvoid AndroidRuntime::start(const char* className, const char* options)\n{\n    ......\n\n    /* start the virtual machine */\n    JniInvocation jni_invocation;\n    jni_invocation.Init(NULL);\n    JNIEnv* env;\n    if (startVm(&mJavaVM, &env) != 0) {\n        return;\n    }\n\n    ......\n\n    /*\n     * Start VM.  This thread becomes the main thread of the VM, and will\n     * not return until the VM exits.\n     */\n    char* slashClassName = toSlashClassName(className);\n    jclass startClass = env->FindClass(slashClassName);\n    if (startClass == NULL) {\n        ALOGE(\"JavaVM unable to locate class '%s'\\n\", slashClassName);\n        /* keep going */\n    } else {\n        jmethodID startMeth = env->GetStaticMethodID(startClass, \"main\",\n            \"([Ljava/lang/String;)V\");\n        if (startMeth == NULL) {\n            ALOGE(\"JavaVM unable to find main() in '%s'\\n\", className);\n            /* keep going */\n        } else {\n            env->CallStaticVoidMethod(startClass, startMeth, strArray);\n\n#if 0\n            if (env->ExceptionCheck())\n                threadExitUncaughtException(env);\n#endif\n        }\n    }\n\n    ......\n}\n\nint AndroidRuntime::startVm(JavaVM** pJavaVM, JNIEnv** pEnv)\n{\n    ......\n\n    /*\n     * Initialize the VM.\n     *\n     * The JavaVM* is essentially per-process, and the JNIEnv* is per-thread.\n     * If this call succeeds, the VM is ready, and we can start issuing\n     * JNI calls.\n     */\n    if (JNI_CreateJavaVM(pJavaVM, pEnv, &initArgs) < 0) {\n        ALOGE(\"JNI_CreateJavaVM failed\\n\");\n        goto bail;\n    }\n\n    ......\n}\n```\n\n```\n// libnativehelper/JniInvocation.cpp\n#ifdef HAVE_ANDROID_OS\nstatic const char* kLibrarySystemProperty = \"persist.sys.dalvik.vm.lib\";\n#endif\nstatic const char* kLibraryFallback = \"libdvm.so\";\n\nbool JniInvocation::Init(const char* library) {\n#ifdef HAVE_ANDROID_OS\n  char default_library[PROPERTY_VALUE_MAX];\n  property_get(kLibrarySystemProperty, default_library, kLibraryFallback);\n#else\n  const char* default_library = kLibraryFallback;\n#endif\n  if (library == NULL) {\n    library = default_library;\n  }\n\n  handle_ = dlopen(library, RTLD_NOW);\n  if (handle_ == NULL) {\n    if (strcmp(library, kLibraryFallback) == 0) {\n      // Nothing else to try.\n      ALOGE(\"Failed to dlopen %s: %s\", library, dlerror());\n      return false;\n    }\n    // Note that this is enough to get something like the zygote\n    // running, we can't property_set here to fix this for the future\n    // because we are root and not the system user. See\n    // RuntimeInit.commonInit for where we fix up the property to\n    // avoid future fallbacks. http://b/11463182\n    ALOGW(\"Falling back from %s to %s after dlopen error: %s\",\n          library, kLibraryFallback, dlerror());\n    library = kLibraryFallback;\n    handle_ = dlopen(library, RTLD_NOW);\n    if (handle_ == NULL) {\n      ALOGE(\"Failed to dlopen %s: %s\", library, dlerror());\n      return false;\n    }\n  }\n  if (!FindSymbol(reinterpret_cast<void**>(&JNI_GetDefaultJavaVMInitArgs_),\n                  \"JNI_GetDefaultJavaVMInitArgs\")) {\n    return false;\n  }\n  if (!FindSymbol(reinterpret_cast<void**>(&JNI_CreateJavaVM_),\n                  \"JNI_CreateJavaVM\")) {\n    return false;\n  }\n  if (!FindSymbol(reinterpret_cast<void**>(&JNI_GetCreatedJavaVMs_),\n                  \"JNI_GetCreatedJavaVMs\")) {\n    return false;\n  }\n  return true;\n}\n\n\nextern \"C\" jint JNI_CreateJavaVM(JavaVM** p_vm, JNIEnv** p_env, void* vm_args) {\n  return JniInvocation::GetJniInvocation().JNI_CreateJavaVM(p_vm, p_env, vm_args);\n}\n\njint JniInvocation::JNI_CreateJavaVM(JavaVM** p_vm, JNIEnv** p_env, void* vm_args) {\n  return JNI_CreateJavaVM_(p_vm, p_env, vm_args);\n}\n```\n\n---\n#### 安装相关代码段:\n\n```\n// frameworks/base/services/java/com/android/server/pm/Installer.java\npublic final class Installer {\n    ......\n\n    public int dexopt(String apkPath, int uid, boolean isPublic) {\n        StringBuilder builder = new StringBuilder(\"dexopt\");\n        builder.append(' ');\n        builder.append(apkPath);\n        builder.append(' ');\n        builder.append(uid);\n        builder.append(isPublic ? \" 1\" : \" 0\");\n        return execute(builder.toString());\n    }\n\n    ......\n}\n```\n\n```\n// frameworks/native/cmds/installd/commands.c\nint dexopt(const char *apk_path, uid_t uid, int is_public)\n{\n    struct utimbuf ut;\n    struct stat apk_stat, dex_stat;\n    char out_path[PKG_PATH_MAX];\n    char dexopt_flags[PROPERTY_VALUE_MAX];\n    char persist_sys_dalvik_vm_lib[PROPERTY_VALUE_MAX];\n    char *end;\n    int res, zip_fd=-1, out_fd=-1;\n\n    ......\n\n    /* The command to run depend ones the value of persist.sys.dalvik.vm.lib */\n    property_get(\"persist.sys.dalvik.vm.lib\", persist_sys_dalvik_vm_lib, \"libdvm.so\");\n\n    /* Before anything else: is there a .odex file?  If so, we have\n     * precompiled the apk and there is nothing to do here.\n     */\n    sprintf(out_path, \"%s%s\", apk_path, \".odex\");\n    if (stat(out_path, &dex_stat) == 0) {\n        return 0;\n    }\n\n    if (create_cache_path(out_path, apk_path)) {\n        return -1;\n    }\n\n    ......\n\n    out_fd = open(out_path, O_RDWR | O_CREAT | O_EXCL, 0644);\n\n    ......\n\n    pid_t pid;\n    pid = fork();\n    if (pid == 0) {\n        ......\n\n        if (strncmp(persist_sys_dalvik_vm_lib, \"libdvm\", 6) == 0) {\n            run_dexopt(zip_fd, out_fd, apk_path, out_path, dexopt_flags);\n        } else if (strncmp(persist_sys_dalvik_vm_lib, \"libart\", 6) == 0) {\n            run_dex2oat(zip_fd, out_fd, apk_path, out_path, dexopt_flags);\n        } else {\n            exit(69);   /* Unexpected persist.sys.dalvik.vm.lib value */\n        }\n        exit(68);   /* only get here on exec failure */\n    }\n\n    ......\n}\n\nstatic void run_dexopt(int zip_fd, int odex_fd, const char* input_file_name,\n    const char* output_file_name, const char* dexopt_flags)\n{\n    static const char* DEX_OPT_BIN = \"/system/bin/dexopt\";\n    static const int MAX_INT_LEN = 12;      // '-'+10dig+'\\0' -OR- 0x+8dig\n    char zip_num[MAX_INT_LEN];\n    char odex_num[MAX_INT_LEN];\n\n    sprintf(zip_num, \"%d\", zip_fd);\n    sprintf(odex_num, \"%d\", odex_fd);\n\n    ALOGV(\"Running %s in=%s out=%s\\n\", DEX_OPT_BIN, input_file_name, output_file_name);\n    execl(DEX_OPT_BIN, DEX_OPT_BIN, \"--zip\", zip_num, odex_num, input_file_name,\n        dexopt_flags, (char*) NULL);\n    ALOGE(\"execl(%s) failed: %s\\n\", DEX_OPT_BIN, strerror(errno));\n}\n\nstatic void run_dex2oat(int zip_fd, int oat_fd, const char* input_file_name,\n    const char* output_file_name, const char* dexopt_flags)\n{\n    static const char* DEX2OAT_BIN = \"/system/bin/dex2oat\";\n    static const int MAX_INT_LEN = 12;      // '-'+10dig+'\\0' -OR- 0x+8dig\n    char zip_fd_arg[strlen(\"--zip-fd=\") + MAX_INT_LEN];\n    char zip_location_arg[strlen(\"--zip-location=\") + PKG_PATH_MAX];\n    char oat_fd_arg[strlen(\"--oat-fd=\") + MAX_INT_LEN];\n    char oat_location_arg[strlen(\"--oat-name=\") + PKG_PATH_MAX];\n\n    sprintf(zip_fd_arg, \"--zip-fd=%d\", zip_fd);\n    sprintf(zip_location_arg, \"--zip-location=%s\", input_file_name);\n    sprintf(oat_fd_arg, \"--oat-fd=%d\", oat_fd);\n    sprintf(oat_location_arg, \"--oat-location=%s\", output_file_name);\n\n    ALOGV(\"Running %s in=%s out=%s\\n\", DEX2OAT_BIN, input_file_name, output_file_name);\n    execl(DEX2OAT_BIN, DEX2OAT_BIN,\n          zip_fd_arg, zip_location_arg,\n          oat_fd_arg, oat_location_arg,\n          (char*) NULL);\n    ALOGE(\"execl(%s) failed: %s\\n\", DEX2OAT_BIN, strerror(errno));\n}\n```\n---\n\n- [Android ART运行时无缝替换Dalvik虚拟机的过程分析](http://blog.csdn.net/luoshengyang/article/details/18006645)\n- [Dalvik VM vs. ART (Android Runtime): Impact for end-users?](http://android.stackexchange.com/questions/56773/dalvik-vm-vs-art-android-runtime-impact-for-end-users)\n- [Dalvik、ART虚拟机小结](http://www.itlipan.info/android/2015/08/07/android-dalvik.html)\n- [ART运行时垃圾收集（GC）过程分析](http://blog.csdn.net/luoshengyang/article/details/42555483)\n- [浅谈为什么Java运行环境是虚拟机，而Python运行环境是解释器](http://www.xrpmoon.com/blog/archives/jripple1105.html)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2015/11/01/android_art_dalvik","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66id001n95buvo8cvlxw","content":"<blockquote>\n<p>ART虚拟机的实现在libart.so中，而Dalvik再libdvm.so中<br>实现了Java虚拟机的接口，内部却提供完全不一样的东西， – 为了兼容。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"I-Dalvik\"><a href=\"#I-Dalvik\" class=\"headerlink\" title=\"I. Dalvik\"></a>I. Dalvik</h2><h4 id=\"dex字节码解释器\"><a href=\"#dex字节码解释器\" class=\"headerlink\" title=\"dex字节码解释器\"></a>dex字节码解释器</h4><p>逐条逐行的执行字节码指令</p>\n<h4 id=\"JIT-Just-In-Time-编译器\"><a href=\"#JIT-Just-In-Time-编译器\" class=\"headerlink\" title=\"JIT(Just-In-Time)编译器\"></a>JIT(Just-In-Time)编译器</h4><p>当多次运行速度稍慢的代码时，JIT编译器则会自动将热点代码编译并缓存起来，由此执行速度会逐渐加快</p>\n<h2 id=\"II-ART\"><a href=\"#II-ART\" class=\"headerlink\" title=\"II. ART\"></a>II. ART</h2><blockquote>\n<p>Ahead-Of-Time(AOT)编译</p>\n</blockquote>\n<p>在安装时就已经编译成本地代码，因此只需要编译一次，运行时直接执行（应用运行更快(少去该部分的资源竞争)的同时，更省电）。</p>\n<ul>\n<li>占用内存空间变大。</li>\n<li>运行速度更快，且更省电 - 运行程序时无需额外的编译、加载转换等，少去这块的CPU资源竞争。</li>\n</ul>\n<h2 id=\"III-ART与Dalvik相同之处\"><a href=\"#III-ART与Dalvik相同之处\" class=\"headerlink\" title=\"III. ART与Dalvik相同之处\"></a>III. ART与Dalvik相同之处</h2><table>\n<thead>\n<tr>\n<th>接口名</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>JNI_GetDefaultJavaVMInitArgs</code></td>\n<td>获取虚拟机的默认初始化参数</td>\n</tr>\n<tr>\n<td><code>JNI_CreateJavaVM</code></td>\n<td>在进程中创建虚拟机实例</td>\n</tr>\n<tr>\n<td><code>JNI_GetCreatedJavaVMs</code></td>\n<td>获取进程中创建的虚拟机实例</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"IV-ART与Dalvik不同之处\"><a href=\"#IV-ART与Dalvik不同之处\" class=\"headerlink\" title=\"IV. ART与Dalvik不同之处\"></a>IV. ART与Dalvik不同之处</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">虚拟机名</th>\n<th>安装时</th>\n<th>每次重新运行apk时</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">ART</td>\n<td>解析翻译dex字节码为本地代码(AOT)</td>\n<td>直接执行本地代码</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Dalvik</td>\n<td>将dex字节码优化生成odex文件(<code>PackageManagerService</code>请求守护进程<code>installd</code>来执行)</td>\n<td>通过解释器(Android 2.2引入JIT(缓存热点代码的解释结果))对dex字节码解释为机器码，再执行机器码</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"V-推敲\"><a href=\"#V-推敲\" class=\"headerlink\" title=\"V. 推敲\"></a>V. 推敲</h2><blockquote>\n<p><code>persist.sys.dalvik.vm.lib</code>: 系统属性，若等于<code>libdvm.so</code>则当前使用的是Dalvik虚拟机，若等于<code>libstart.so</code>，则当前使用的是ART虚拟机</p>\n</blockquote>\n<h3 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1. 安装\"></a>1. 安装</h3><blockquote>\n<p>最终安装优化/翻译 结果都是保存在<code>odex</code>文件中</p>\n</blockquote>\n<p><img src=\"/img/android_dvm_art-1.png\" alt=\"\"></p>\n<blockquote>\n<p>系统启动时，系统除了对/system/app和/data/app目录下所有apk进行翻译以外，还会对/system/framework目录的apk/jar以及这些apk所引用的外部jar进行翻译，保证不对Dalvik虚拟机产生任何依赖。</p>\n</blockquote>\n<h3 id=\"2-运行\"><a href=\"#2-运行\" class=\"headerlink\" title=\"2. 运行\"></a>2. 运行</h3><p><img src=\"/img/android_dvm_art-2.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"运行相关代码段\"><a href=\"#运行相关代码段\" class=\"headerlink\" title=\"运行相关代码段:\"></a>运行相关代码段:</h4><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// frameworks/base/core/jni/AndroidRuntime.cpp</span></div><div class=\"line\">void AndroidRuntime::start(const char* className, const char* options)</div><div class=\"line\">&#123;</div><div class=\"line\">    ......</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/* start the virtual machine */</span></div><div class=\"line\">    JniInvocation jni_invocation;</div><div class=\"line\">    jni_invocation.Init(NULL);</div><div class=\"line\">    JNIEnv* env;</div><div class=\"line\">    <span class=\"keyword\">if</span> (startVm(&amp;mJavaVM, &amp;env) != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    ......</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">     * Start VM.  This thread becomes the main thread of the VM, and will</div><div class=\"line\">     * not return until the VM exits.</div><div class=\"line\">     */</div><div class=\"line\">    char* slashClassName = toSlashClassName(className);</div><div class=\"line\">    jclass startClass = env-&gt;FindClass(slashClassName);</div><div class=\"line\">    <span class=\"keyword\">if</span> (startClass == NULL) &#123;</div><div class=\"line\">        ALOGE(<span class=\"string\">\"JavaVM unable to locate class '%s'\\n\"</span>, slashClassName);</div><div class=\"line\">        <span class=\"comment\">/* keep going */</span></div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        jmethodID startMeth = env-&gt;GetStaticMethodID(startClass, <span class=\"string\">\"main\"</span>,</div><div class=\"line\">            <span class=\"string\">\"([Ljava/lang/String;)V\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (startMeth == NULL) &#123;</div><div class=\"line\">            ALOGE(<span class=\"string\">\"JavaVM unable to find main() in '%s'\\n\"</span>, className);</div><div class=\"line\">            <span class=\"comment\">/* keep going */</span></div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            env-&gt;CallStaticVoidMethod(startClass, startMeth, strArray);</div><div class=\"line\"></div><div class=\"line\">#<span class=\"keyword\">if</span> <span class=\"number\">0</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (env-&gt;ExceptionCheck())</div><div class=\"line\">                threadExitUncaughtException(env);</div><div class=\"line\">#endif</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    ......</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">int AndroidRuntime::startVm(JavaVM** pJavaVM, JNIEnv** pEnv)</div><div class=\"line\">&#123;</div><div class=\"line\">    ......</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">     * Initialize the VM.</div><div class=\"line\">     *</div><div class=\"line\">     * The JavaVM* is essentially per-process, and the JNIEnv* is per-thread.</div><div class=\"line\">     * If this call succeeds, the VM is ready, and we can start issuing</div><div class=\"line\">     * JNI calls.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">if</span> (JNI_CreateJavaVM(pJavaVM, pEnv, &amp;initArgs) &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        ALOGE(<span class=\"string\">\"JNI_CreateJavaVM failed\\n\"</span>);</div><div class=\"line\">        goto bail;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    ......</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// libnativehelper/JniInvocation.cpp</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> HAVE_ANDROID_OS</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* kLibrarySystemProperty = <span class=\"string\">\"persist.sys.dalvik.vm.lib\"</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* kLibraryFallback = <span class=\"string\">\"libdvm.so\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">bool</span> JniInvocation::Init(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* library) &#123;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> HAVE_ANDROID_OS</span></div><div class=\"line\">  <span class=\"keyword\">char</span> default_library[PROPERTY_VALUE_MAX];</div><div class=\"line\">  property_get(kLibrarySystemProperty, default_library, kLibraryFallback);</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></div><div class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* default_library = kLibraryFallback;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\">  <span class=\"keyword\">if</span> (library == <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">    library = default_library;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  handle_ = dlopen(library, RTLD_NOW);</div><div class=\"line\">  <span class=\"keyword\">if</span> (handle_ == <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(library, kLibraryFallback) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">      <span class=\"comment\">// Nothing else to try.</span></div><div class=\"line\">      ALOGE(<span class=\"string\">\"Failed to dlopen %s: %s\"</span>, library, dlerror());</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// Note that this is enough to get something like the zygote</span></div><div class=\"line\">    <span class=\"comment\">// running, we can't property_set here to fix this for the future</span></div><div class=\"line\">    <span class=\"comment\">// because we are root and not the system user. See</span></div><div class=\"line\">    <span class=\"comment\">// RuntimeInit.commonInit for where we fix up the property to</span></div><div class=\"line\">    <span class=\"comment\">// avoid future fallbacks. http://b/11463182</span></div><div class=\"line\">    ALOGW(<span class=\"string\">\"Falling back from %s to %s after dlopen error: %s\"</span>,</div><div class=\"line\">          library, kLibraryFallback, dlerror());</div><div class=\"line\">    library = kLibraryFallback;</div><div class=\"line\">    handle_ = dlopen(library, RTLD_NOW);</div><div class=\"line\">    <span class=\"keyword\">if</span> (handle_ == <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">      ALOGE(<span class=\"string\">\"Failed to dlopen %s: %s\"</span>, library, dlerror());</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span> (!FindSymbol(<span class=\"keyword\">reinterpret_cast</span>&lt;<span class=\"keyword\">void</span>**&gt;(&amp;JNI_GetDefaultJavaVMInitArgs_),</div><div class=\"line\">                  <span class=\"string\">\"JNI_GetDefaultJavaVMInitArgs\"</span>)) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span> (!FindSymbol(<span class=\"keyword\">reinterpret_cast</span>&lt;<span class=\"keyword\">void</span>**&gt;(&amp;JNI_CreateJavaVM_),</div><div class=\"line\">                  <span class=\"string\">\"JNI_CreateJavaVM\"</span>)) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span> (!FindSymbol(<span class=\"keyword\">reinterpret_cast</span>&lt;<span class=\"keyword\">void</span>**&gt;(&amp;JNI_GetCreatedJavaVMs_),</div><div class=\"line\">                  <span class=\"string\">\"JNI_GetCreatedJavaVMs\"</span>)) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">\"C\"</span> <span class=\"function\">jint <span class=\"title\">JNI_CreateJavaVM</span><span class=\"params\">(JavaVM** p_vm, JNIEnv** p_env, <span class=\"keyword\">void</span>* vm_args)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> JniInvocation::GetJniInvocation().JNI_CreateJavaVM(p_vm, p_env, vm_args);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">jint JniInvocation::JNI_CreateJavaVM(JavaVM** p_vm, JNIEnv** p_env, <span class=\"keyword\">void</span>* vm_args) &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> JNI_CreateJavaVM_(p_vm, p_env, vm_args);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"安装相关代码段\"><a href=\"#安装相关代码段\" class=\"headerlink\" title=\"安装相关代码段:\"></a>安装相关代码段:</h4><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// frameworks/base/services/java/com/android/server/pm/Installer.java</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> Installer &#123;</div><div class=\"line\">    ......</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> dexopt(String apkPath, <span class=\"keyword\">int</span> uid, <span class=\"keyword\">boolean</span> isPublic) &#123;</div><div class=\"line\">        StringBuilder builder = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">\"dexopt\"</span>);</div><div class=\"line\">        builder.<span class=\"keyword\">append</span>(<span class=\"string\">' '</span>);</div><div class=\"line\">        builder.<span class=\"keyword\">append</span>(apkPath);</div><div class=\"line\">        builder.<span class=\"keyword\">append</span>(<span class=\"string\">' '</span>);</div><div class=\"line\">        builder.<span class=\"keyword\">append</span>(uid);</div><div class=\"line\">        builder.<span class=\"keyword\">append</span>(isPublic ? <span class=\"string\">\" 1\"</span> : <span class=\"string\">\" 0\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> execute(builder.toString());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    ......</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// frameworks/native/cmds/installd/commands.c</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dexopt</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *apk_path, <span class=\"keyword\">uid_t</span> uid, <span class=\"keyword\">int</span> is_public)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">struct</span> utimbuf ut;</div><div class=\"line\">    <span class=\"keyword\">struct</span> stat apk_stat, dex_stat;</div><div class=\"line\">    <span class=\"keyword\">char</span> out_path[PKG_PATH_MAX];</div><div class=\"line\">    <span class=\"keyword\">char</span> dexopt_flags[PROPERTY_VALUE_MAX];</div><div class=\"line\">    <span class=\"keyword\">char</span> persist_sys_dalvik_vm_lib[PROPERTY_VALUE_MAX];</div><div class=\"line\">    <span class=\"keyword\">char</span> *end;</div><div class=\"line\">    <span class=\"keyword\">int</span> res, zip_fd=<span class=\"number\">-1</span>, out_fd=<span class=\"number\">-1</span>;</div><div class=\"line\"></div><div class=\"line\">    ......</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/* The command to run depend ones the value of persist.sys.dalvik.vm.lib */</span></div><div class=\"line\">    property_get(<span class=\"string\">\"persist.sys.dalvik.vm.lib\"</span>, persist_sys_dalvik_vm_lib, <span class=\"string\">\"libdvm.so\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/* Before anything else: is there a .odex file?  If so, we have</span></div><div class=\"line\">     * precompiled the apk and there is nothing to do here.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"built_in\">sprintf</span>(out_path, <span class=\"string\">\"%s%s\"</span>, apk_path, <span class=\"string\">\".odex\"</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span> (stat(out_path, &amp;dex_stat) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (create_cache_path(out_path, apk_path)) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    ......</div><div class=\"line\"></div><div class=\"line\">    out_fd = open(out_path, O_RDWR | O_CREAT | O_EXCL, <span class=\"number\">0644</span>);</div><div class=\"line\"></div><div class=\"line\">    ......</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">pid_t</span> pid;</div><div class=\"line\">    pid = fork();</div><div class=\"line\">    <span class=\"keyword\">if</span> (pid == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        ......</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">strncmp</span>(persist_sys_dalvik_vm_lib, <span class=\"string\">\"libdvm\"</span>, <span class=\"number\">6</span>) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            run_dexopt(zip_fd, out_fd, apk_path, out_path, dexopt_flags);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">strncmp</span>(persist_sys_dalvik_vm_lib, <span class=\"string\">\"libart\"</span>, <span class=\"number\">6</span>) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            run_dex2oat(zip_fd, out_fd, apk_path, out_path, dexopt_flags);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">exit</span>(<span class=\"number\">69</span>);   <span class=\"comment\">/* Unexpected persist.sys.dalvik.vm.lib value */</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">68</span>);   <span class=\"comment\">/* only get here on exec failure */</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    ......</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">run_dexopt</span><span class=\"params\">(<span class=\"keyword\">int</span> zip_fd, <span class=\"keyword\">int</span> odex_fd, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* input_file_name,</span></span></div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* output_file_name, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* dexopt_flags)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* DEX_OPT_BIN = <span class=\"string\">\"/system/bin/dexopt\"</span>;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAX_INT_LEN = <span class=\"number\">12</span>;      <span class=\"comment\">// '-'+10dig+'\\0' -OR- 0x+8dig</span></div><div class=\"line\">    <span class=\"keyword\">char</span> zip_num[MAX_INT_LEN];</div><div class=\"line\">    <span class=\"keyword\">char</span> odex_num[MAX_INT_LEN];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">sprintf</span>(zip_num, <span class=\"string\">\"%d\"</span>, zip_fd);</div><div class=\"line\">    <span class=\"built_in\">sprintf</span>(odex_num, <span class=\"string\">\"%d\"</span>, odex_fd);</div><div class=\"line\"></div><div class=\"line\">    ALOGV(<span class=\"string\">\"Running %s in=%s out=%s\\n\"</span>, DEX_OPT_BIN, input_file_name, output_file_name);</div><div class=\"line\">    execl(DEX_OPT_BIN, DEX_OPT_BIN, <span class=\"string\">\"--zip\"</span>, zip_num, odex_num, input_file_name,</div><div class=\"line\">        dexopt_flags, (<span class=\"keyword\">char</span>*) <span class=\"literal\">NULL</span>);</div><div class=\"line\">    ALOGE(<span class=\"string\">\"execl(%s) failed: %s\\n\"</span>, DEX_OPT_BIN, strerror(errno));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">run_dex2oat</span><span class=\"params\">(<span class=\"keyword\">int</span> zip_fd, <span class=\"keyword\">int</span> oat_fd, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* input_file_name,</span></span></div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* output_file_name, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* dexopt_flags)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* DEX2OAT_BIN = <span class=\"string\">\"/system/bin/dex2oat\"</span>;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAX_INT_LEN = <span class=\"number\">12</span>;      <span class=\"comment\">// '-'+10dig+'\\0' -OR- 0x+8dig</span></div><div class=\"line\">    <span class=\"keyword\">char</span> zip_fd_arg[<span class=\"built_in\">strlen</span>(<span class=\"string\">\"--zip-fd=\"</span>) + MAX_INT_LEN];</div><div class=\"line\">    <span class=\"keyword\">char</span> zip_location_arg[<span class=\"built_in\">strlen</span>(<span class=\"string\">\"--zip-location=\"</span>) + PKG_PATH_MAX];</div><div class=\"line\">    <span class=\"keyword\">char</span> oat_fd_arg[<span class=\"built_in\">strlen</span>(<span class=\"string\">\"--oat-fd=\"</span>) + MAX_INT_LEN];</div><div class=\"line\">    <span class=\"keyword\">char</span> oat_location_arg[<span class=\"built_in\">strlen</span>(<span class=\"string\">\"--oat-name=\"</span>) + PKG_PATH_MAX];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">sprintf</span>(zip_fd_arg, <span class=\"string\">\"--zip-fd=%d\"</span>, zip_fd);</div><div class=\"line\">    <span class=\"built_in\">sprintf</span>(zip_location_arg, <span class=\"string\">\"--zip-location=%s\"</span>, input_file_name);</div><div class=\"line\">    <span class=\"built_in\">sprintf</span>(oat_fd_arg, <span class=\"string\">\"--oat-fd=%d\"</span>, oat_fd);</div><div class=\"line\">    <span class=\"built_in\">sprintf</span>(oat_location_arg, <span class=\"string\">\"--oat-location=%s\"</span>, output_file_name);</div><div class=\"line\"></div><div class=\"line\">    ALOGV(<span class=\"string\">\"Running %s in=%s out=%s\\n\"</span>, DEX2OAT_BIN, input_file_name, output_file_name);</div><div class=\"line\">    execl(DEX2OAT_BIN, DEX2OAT_BIN,</div><div class=\"line\">          zip_fd_arg, zip_location_arg,</div><div class=\"line\">          oat_fd_arg, oat_location_arg,</div><div class=\"line\">          (<span class=\"keyword\">char</span>*) <span class=\"literal\">NULL</span>);</div><div class=\"line\">    ALOGE(<span class=\"string\">\"execl(%s) failed: %s\\n\"</span>, DEX2OAT_BIN, strerror(errno));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<ul>\n<li><a href=\"http://blog.csdn.net/luoshengyang/article/details/18006645\" target=\"_blank\" rel=\"external\">Android ART运行时无缝替换Dalvik虚拟机的过程分析</a></li>\n<li><a href=\"http://android.stackexchange.com/questions/56773/dalvik-vm-vs-art-android-runtime-impact-for-end-users\" target=\"_blank\" rel=\"external\">Dalvik VM vs. ART (Android Runtime): Impact for end-users?</a></li>\n<li><a href=\"http://www.itlipan.info/android/2015/08/07/android-dalvik.html\" target=\"_blank\" rel=\"external\">Dalvik、ART虚拟机小结</a></li>\n<li><a href=\"http://blog.csdn.net/luoshengyang/article/details/42555483\" target=\"_blank\" rel=\"external\">ART运行时垃圾收集（GC）过程分析</a></li>\n<li><a href=\"http://www.xrpmoon.com/blog/archives/jripple1105.html\" target=\"_blank\" rel=\"external\">浅谈为什么Java运行环境是虚拟机，而Python运行环境是解释器</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>ART虚拟机的实现在libart.so中，而Dalvik再libdvm.so中<br>实现了Java虚拟机的接口，内部却提供完全不一样的东西， – 为了兼容。</p>\n</blockquote>","more":"<h2 id=\"I-Dalvik\"><a href=\"#I-Dalvik\" class=\"headerlink\" title=\"I. Dalvik\"></a>I. Dalvik</h2><h4 id=\"dex字节码解释器\"><a href=\"#dex字节码解释器\" class=\"headerlink\" title=\"dex字节码解释器\"></a>dex字节码解释器</h4><p>逐条逐行的执行字节码指令</p>\n<h4 id=\"JIT-Just-In-Time-编译器\"><a href=\"#JIT-Just-In-Time-编译器\" class=\"headerlink\" title=\"JIT(Just-In-Time)编译器\"></a>JIT(Just-In-Time)编译器</h4><p>当多次运行速度稍慢的代码时，JIT编译器则会自动将热点代码编译并缓存起来，由此执行速度会逐渐加快</p>\n<h2 id=\"II-ART\"><a href=\"#II-ART\" class=\"headerlink\" title=\"II. ART\"></a>II. ART</h2><blockquote>\n<p>Ahead-Of-Time(AOT)编译</p>\n</blockquote>\n<p>在安装时就已经编译成本地代码，因此只需要编译一次，运行时直接执行（应用运行更快(少去该部分的资源竞争)的同时，更省电）。</p>\n<ul>\n<li>占用内存空间变大。</li>\n<li>运行速度更快，且更省电 - 运行程序时无需额外的编译、加载转换等，少去这块的CPU资源竞争。</li>\n</ul>\n<h2 id=\"III-ART与Dalvik相同之处\"><a href=\"#III-ART与Dalvik相同之处\" class=\"headerlink\" title=\"III. ART与Dalvik相同之处\"></a>III. ART与Dalvik相同之处</h2><table>\n<thead>\n<tr>\n<th>接口名</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>JNI_GetDefaultJavaVMInitArgs</code></td>\n<td>获取虚拟机的默认初始化参数</td>\n</tr>\n<tr>\n<td><code>JNI_CreateJavaVM</code></td>\n<td>在进程中创建虚拟机实例</td>\n</tr>\n<tr>\n<td><code>JNI_GetCreatedJavaVMs</code></td>\n<td>获取进程中创建的虚拟机实例</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"IV-ART与Dalvik不同之处\"><a href=\"#IV-ART与Dalvik不同之处\" class=\"headerlink\" title=\"IV. ART与Dalvik不同之处\"></a>IV. ART与Dalvik不同之处</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">虚拟机名</th>\n<th>安装时</th>\n<th>每次重新运行apk时</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">ART</td>\n<td>解析翻译dex字节码为本地代码(AOT)</td>\n<td>直接执行本地代码</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Dalvik</td>\n<td>将dex字节码优化生成odex文件(<code>PackageManagerService</code>请求守护进程<code>installd</code>来执行)</td>\n<td>通过解释器(Android 2.2引入JIT(缓存热点代码的解释结果))对dex字节码解释为机器码，再执行机器码</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"V-推敲\"><a href=\"#V-推敲\" class=\"headerlink\" title=\"V. 推敲\"></a>V. 推敲</h2><blockquote>\n<p><code>persist.sys.dalvik.vm.lib</code>: 系统属性，若等于<code>libdvm.so</code>则当前使用的是Dalvik虚拟机，若等于<code>libstart.so</code>，则当前使用的是ART虚拟机</p>\n</blockquote>\n<h3 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1. 安装\"></a>1. 安装</h3><blockquote>\n<p>最终安装优化/翻译 结果都是保存在<code>odex</code>文件中</p>\n</blockquote>\n<p><img src=\"/img/android_dvm_art-1.png\" alt=\"\"></p>\n<blockquote>\n<p>系统启动时，系统除了对/system/app和/data/app目录下所有apk进行翻译以外，还会对/system/framework目录的apk/jar以及这些apk所引用的外部jar进行翻译，保证不对Dalvik虚拟机产生任何依赖。</p>\n</blockquote>\n<h3 id=\"2-运行\"><a href=\"#2-运行\" class=\"headerlink\" title=\"2. 运行\"></a>2. 运行</h3><p><img src=\"/img/android_dvm_art-2.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"运行相关代码段\"><a href=\"#运行相关代码段\" class=\"headerlink\" title=\"运行相关代码段:\"></a>运行相关代码段:</h4><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// frameworks/base/core/jni/AndroidRuntime.cpp</span></div><div class=\"line\">void AndroidRuntime::start(const char* className, const char* options)</div><div class=\"line\">&#123;</div><div class=\"line\">    ......</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/* start the virtual machine */</span></div><div class=\"line\">    JniInvocation jni_invocation;</div><div class=\"line\">    jni_invocation.Init(NULL);</div><div class=\"line\">    JNIEnv* env;</div><div class=\"line\">    <span class=\"keyword\">if</span> (startVm(&amp;mJavaVM, &amp;env) != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    ......</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">     * Start VM.  This thread becomes the main thread of the VM, and will</div><div class=\"line\">     * not return until the VM exits.</div><div class=\"line\">     */</span></div><div class=\"line\">    char* slashClassName = toSlashClassName(className);</div><div class=\"line\">    jclass startClass = env-&gt;FindClass(slashClassName);</div><div class=\"line\">    <span class=\"keyword\">if</span> (startClass == NULL) &#123;</div><div class=\"line\">        ALOGE(<span class=\"string\">\"JavaVM unable to locate class '%s'\\n\"</span>, slashClassName);</div><div class=\"line\">        <span class=\"comment\">/* keep going */</span></div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        jmethodID startMeth = env-&gt;GetStaticMethodID(startClass, <span class=\"string\">\"main\"</span>,</div><div class=\"line\">            <span class=\"string\">\"([Ljava/lang/String;)V\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (startMeth == NULL) &#123;</div><div class=\"line\">            ALOGE(<span class=\"string\">\"JavaVM unable to find main() in '%s'\\n\"</span>, className);</div><div class=\"line\">            <span class=\"comment\">/* keep going */</span></div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            env-&gt;CallStaticVoidMethod(startClass, startMeth, strArray);</div><div class=\"line\"></div><div class=\"line\">#<span class=\"keyword\">if</span> <span class=\"number\">0</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (env-&gt;ExceptionCheck())</div><div class=\"line\">                threadExitUncaughtException(env);</div><div class=\"line\">#endif</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    ......</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">int AndroidRuntime::startVm(JavaVM** pJavaVM, JNIEnv** pEnv)</div><div class=\"line\">&#123;</div><div class=\"line\">    ......</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">     * Initialize the VM.</div><div class=\"line\">     *</div><div class=\"line\">     * The JavaVM* is essentially per-process, and the JNIEnv* is per-thread.</div><div class=\"line\">     * If this call succeeds, the VM is ready, and we can start issuing</div><div class=\"line\">     * JNI calls.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (JNI_CreateJavaVM(pJavaVM, pEnv, &amp;initArgs) &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        ALOGE(<span class=\"string\">\"JNI_CreateJavaVM failed\\n\"</span>);</div><div class=\"line\">        goto bail;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    ......</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// libnativehelper/JniInvocation.cpp</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> HAVE_ANDROID_OS</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* kLibrarySystemProperty = <span class=\"string\">\"persist.sys.dalvik.vm.lib\"</span>;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* kLibraryFallback = <span class=\"string\">\"libdvm.so\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">bool</span> JniInvocation::Init(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* library) &#123;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> HAVE_ANDROID_OS</span></div><div class=\"line\">  <span class=\"keyword\">char</span> default_library[PROPERTY_VALUE_MAX];</div><div class=\"line\">  property_get(kLibrarySystemProperty, default_library, kLibraryFallback);</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></div><div class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* default_library = kLibraryFallback;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\">  <span class=\"keyword\">if</span> (library == <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">    library = default_library;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  handle_ = dlopen(library, RTLD_NOW);</div><div class=\"line\">  <span class=\"keyword\">if</span> (handle_ == <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(library, kLibraryFallback) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">      <span class=\"comment\">// Nothing else to try.</span></div><div class=\"line\">      ALOGE(<span class=\"string\">\"Failed to dlopen %s: %s\"</span>, library, dlerror());</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// Note that this is enough to get something like the zygote</span></div><div class=\"line\">    <span class=\"comment\">// running, we can't property_set here to fix this for the future</span></div><div class=\"line\">    <span class=\"comment\">// because we are root and not the system user. See</span></div><div class=\"line\">    <span class=\"comment\">// RuntimeInit.commonInit for where we fix up the property to</span></div><div class=\"line\">    <span class=\"comment\">// avoid future fallbacks. http://b/11463182</span></div><div class=\"line\">    ALOGW(<span class=\"string\">\"Falling back from %s to %s after dlopen error: %s\"</span>,</div><div class=\"line\">          library, kLibraryFallback, dlerror());</div><div class=\"line\">    library = kLibraryFallback;</div><div class=\"line\">    handle_ = dlopen(library, RTLD_NOW);</div><div class=\"line\">    <span class=\"keyword\">if</span> (handle_ == <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">      ALOGE(<span class=\"string\">\"Failed to dlopen %s: %s\"</span>, library, dlerror());</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span> (!FindSymbol(<span class=\"keyword\">reinterpret_cast</span>&lt;<span class=\"keyword\">void</span>**&gt;(&amp;JNI_GetDefaultJavaVMInitArgs_),</div><div class=\"line\">                  <span class=\"string\">\"JNI_GetDefaultJavaVMInitArgs\"</span>)) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span> (!FindSymbol(<span class=\"keyword\">reinterpret_cast</span>&lt;<span class=\"keyword\">void</span>**&gt;(&amp;JNI_CreateJavaVM_),</div><div class=\"line\">                  <span class=\"string\">\"JNI_CreateJavaVM\"</span>)) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span> (!FindSymbol(<span class=\"keyword\">reinterpret_cast</span>&lt;<span class=\"keyword\">void</span>**&gt;(&amp;JNI_GetCreatedJavaVMs_),</div><div class=\"line\">                  <span class=\"string\">\"JNI_GetCreatedJavaVMs\"</span>)) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">\"C\"</span> <span class=\"function\">jint <span class=\"title\">JNI_CreateJavaVM</span><span class=\"params\">(JavaVM** p_vm, JNIEnv** p_env, <span class=\"keyword\">void</span>* vm_args)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> JniInvocation::GetJniInvocation().JNI_CreateJavaVM(p_vm, p_env, vm_args);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">jint JniInvocation::JNI_CreateJavaVM(JavaVM** p_vm, JNIEnv** p_env, <span class=\"keyword\">void</span>* vm_args) &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> JNI_CreateJavaVM_(p_vm, p_env, vm_args);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"安装相关代码段\"><a href=\"#安装相关代码段\" class=\"headerlink\" title=\"安装相关代码段:\"></a>安装相关代码段:</h4><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// frameworks/base/services/java/com/android/server/pm/Installer.java</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> Installer &#123;</div><div class=\"line\">    ......</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> dexopt(String apkPath, <span class=\"keyword\">int</span> uid, <span class=\"keyword\">boolean</span> isPublic) &#123;</div><div class=\"line\">        StringBuilder builder = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">\"dexopt\"</span>);</div><div class=\"line\">        builder.<span class=\"keyword\">append</span>(<span class=\"string\">' '</span>);</div><div class=\"line\">        builder.<span class=\"keyword\">append</span>(apkPath);</div><div class=\"line\">        builder.<span class=\"keyword\">append</span>(<span class=\"string\">' '</span>);</div><div class=\"line\">        builder.<span class=\"keyword\">append</span>(uid);</div><div class=\"line\">        builder.<span class=\"keyword\">append</span>(isPublic ? <span class=\"string\">\" 1\"</span> : <span class=\"string\">\" 0\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> execute(builder.toString());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    ......</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// frameworks/native/cmds/installd/commands.c</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dexopt</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *apk_path, <span class=\"keyword\">uid_t</span> uid, <span class=\"keyword\">int</span> is_public)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">struct</span> utimbuf ut;</div><div class=\"line\">    <span class=\"keyword\">struct</span> stat apk_stat, dex_stat;</div><div class=\"line\">    <span class=\"keyword\">char</span> out_path[PKG_PATH_MAX];</div><div class=\"line\">    <span class=\"keyword\">char</span> dexopt_flags[PROPERTY_VALUE_MAX];</div><div class=\"line\">    <span class=\"keyword\">char</span> persist_sys_dalvik_vm_lib[PROPERTY_VALUE_MAX];</div><div class=\"line\">    <span class=\"keyword\">char</span> *end;</div><div class=\"line\">    <span class=\"keyword\">int</span> res, zip_fd=<span class=\"number\">-1</span>, out_fd=<span class=\"number\">-1</span>;</div><div class=\"line\"></div><div class=\"line\">    ......</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/* The command to run depend ones the value of persist.sys.dalvik.vm.lib */</span></div><div class=\"line\">    property_get(<span class=\"string\">\"persist.sys.dalvik.vm.lib\"</span>, persist_sys_dalvik_vm_lib, <span class=\"string\">\"libdvm.so\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/* Before anything else: is there a .odex file?  If so, we have</div><div class=\"line\">     * precompiled the apk and there is nothing to do here.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"built_in\">sprintf</span>(out_path, <span class=\"string\">\"%s%s\"</span>, apk_path, <span class=\"string\">\".odex\"</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span> (stat(out_path, &amp;dex_stat) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (create_cache_path(out_path, apk_path)) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    ......</div><div class=\"line\"></div><div class=\"line\">    out_fd = open(out_path, O_RDWR | O_CREAT | O_EXCL, <span class=\"number\">0644</span>);</div><div class=\"line\"></div><div class=\"line\">    ......</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">pid_t</span> pid;</div><div class=\"line\">    pid = fork();</div><div class=\"line\">    <span class=\"keyword\">if</span> (pid == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        ......</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">strncmp</span>(persist_sys_dalvik_vm_lib, <span class=\"string\">\"libdvm\"</span>, <span class=\"number\">6</span>) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            run_dexopt(zip_fd, out_fd, apk_path, out_path, dexopt_flags);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">strncmp</span>(persist_sys_dalvik_vm_lib, <span class=\"string\">\"libart\"</span>, <span class=\"number\">6</span>) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            run_dex2oat(zip_fd, out_fd, apk_path, out_path, dexopt_flags);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">exit</span>(<span class=\"number\">69</span>);   <span class=\"comment\">/* Unexpected persist.sys.dalvik.vm.lib value */</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">68</span>);   <span class=\"comment\">/* only get here on exec failure */</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    ......</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">run_dexopt</span><span class=\"params\">(<span class=\"keyword\">int</span> zip_fd, <span class=\"keyword\">int</span> odex_fd, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* input_file_name,</div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* output_file_name, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* dexopt_flags)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* DEX_OPT_BIN = <span class=\"string\">\"/system/bin/dexopt\"</span>;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAX_INT_LEN = <span class=\"number\">12</span>;      <span class=\"comment\">// '-'+10dig+'\\0' -OR- 0x+8dig</span></div><div class=\"line\">    <span class=\"keyword\">char</span> zip_num[MAX_INT_LEN];</div><div class=\"line\">    <span class=\"keyword\">char</span> odex_num[MAX_INT_LEN];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">sprintf</span>(zip_num, <span class=\"string\">\"%d\"</span>, zip_fd);</div><div class=\"line\">    <span class=\"built_in\">sprintf</span>(odex_num, <span class=\"string\">\"%d\"</span>, odex_fd);</div><div class=\"line\"></div><div class=\"line\">    ALOGV(<span class=\"string\">\"Running %s in=%s out=%s\\n\"</span>, DEX_OPT_BIN, input_file_name, output_file_name);</div><div class=\"line\">    execl(DEX_OPT_BIN, DEX_OPT_BIN, <span class=\"string\">\"--zip\"</span>, zip_num, odex_num, input_file_name,</div><div class=\"line\">        dexopt_flags, (<span class=\"keyword\">char</span>*) <span class=\"literal\">NULL</span>);</div><div class=\"line\">    ALOGE(<span class=\"string\">\"execl(%s) failed: %s\\n\"</span>, DEX_OPT_BIN, strerror(errno));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">run_dex2oat</span><span class=\"params\">(<span class=\"keyword\">int</span> zip_fd, <span class=\"keyword\">int</span> oat_fd, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* input_file_name,</div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* output_file_name, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* dexopt_flags)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* DEX2OAT_BIN = <span class=\"string\">\"/system/bin/dex2oat\"</span>;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAX_INT_LEN = <span class=\"number\">12</span>;      <span class=\"comment\">// '-'+10dig+'\\0' -OR- 0x+8dig</span></div><div class=\"line\">    <span class=\"keyword\">char</span> zip_fd_arg[<span class=\"built_in\">strlen</span>(<span class=\"string\">\"--zip-fd=\"</span>) + MAX_INT_LEN];</div><div class=\"line\">    <span class=\"keyword\">char</span> zip_location_arg[<span class=\"built_in\">strlen</span>(<span class=\"string\">\"--zip-location=\"</span>) + PKG_PATH_MAX];</div><div class=\"line\">    <span class=\"keyword\">char</span> oat_fd_arg[<span class=\"built_in\">strlen</span>(<span class=\"string\">\"--oat-fd=\"</span>) + MAX_INT_LEN];</div><div class=\"line\">    <span class=\"keyword\">char</span> oat_location_arg[<span class=\"built_in\">strlen</span>(<span class=\"string\">\"--oat-name=\"</span>) + PKG_PATH_MAX];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">sprintf</span>(zip_fd_arg, <span class=\"string\">\"--zip-fd=%d\"</span>, zip_fd);</div><div class=\"line\">    <span class=\"built_in\">sprintf</span>(zip_location_arg, <span class=\"string\">\"--zip-location=%s\"</span>, input_file_name);</div><div class=\"line\">    <span class=\"built_in\">sprintf</span>(oat_fd_arg, <span class=\"string\">\"--oat-fd=%d\"</span>, oat_fd);</div><div class=\"line\">    <span class=\"built_in\">sprintf</span>(oat_location_arg, <span class=\"string\">\"--oat-location=%s\"</span>, output_file_name);</div><div class=\"line\"></div><div class=\"line\">    ALOGV(<span class=\"string\">\"Running %s in=%s out=%s\\n\"</span>, DEX2OAT_BIN, input_file_name, output_file_name);</div><div class=\"line\">    execl(DEX2OAT_BIN, DEX2OAT_BIN,</div><div class=\"line\">          zip_fd_arg, zip_location_arg,</div><div class=\"line\">          oat_fd_arg, oat_location_arg,</div><div class=\"line\">          (<span class=\"keyword\">char</span>*) <span class=\"literal\">NULL</span>);</div><div class=\"line\">    ALOGE(<span class=\"string\">\"execl(%s) failed: %s\\n\"</span>, DEX2OAT_BIN, strerror(errno));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<ul>\n<li><a href=\"http://blog.csdn.net/luoshengyang/article/details/18006645\">Android ART运行时无缝替换Dalvik虚拟机的过程分析</a></li>\n<li><a href=\"http://android.stackexchange.com/questions/56773/dalvik-vm-vs-art-android-runtime-impact-for-end-users\">Dalvik VM vs. ART (Android Runtime): Impact for end-users?</a></li>\n<li><a href=\"http://www.itlipan.info/android/2015/08/07/android-dalvik.html\">Dalvik、ART虚拟机小结</a></li>\n<li><a href=\"http://blog.csdn.net/luoshengyang/article/details/42555483\">ART运行时垃圾收集（GC）过程分析</a></li>\n<li><a href=\"http://www.xrpmoon.com/blog/archives/jripple1105.html\">浅谈为什么Java运行环境是虚拟机，而Python运行环境是解释器</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"Android 动态加载dex","date":"2015-12-06T16:48:03.000Z","_content":"\n> 首先如果仅仅是因为64K method的问题可以直接看这里[DexGuard、Proguard、Multi-dex](http://blog.dreamtobe.cn/2015/11/04/guard_multi_dex/)给出的解决方案。\n\n> 本文主要讨论从编译层面，dex动态加载器选择层面以及安全层面讨论dex动态加载\n\n<!-- more -->\n\n---\n\n## I. 类加载器\n\n比较两个类是否相等: 前提是采用的是同样的加载器加载的，否则必不相等。\n\n### 一般加载器类别\n\n#### 虚拟机的角度\n\n##### 1. 启动类加载器(Bootstrap ClassLoader)\n\n使用C++语言实现，虚拟机自身的一部分。\n\n##### 2. 其他的类加载器\n\n使用Java语言实现，独立于JVM外部，全部继承自类`java.lang.ClassLoader`。\n\n#### 开发人员角度\n\n##### 1. 启动类加载器(Bootstrap ClassLoader)\n\n- **层级**: native层实现。\n- **负责加载**: `JAVA_HOME\\lib`目录中能被JVM识别的类库加载到JVM内存中(名称不符合的类库不会被加载)(java的核心类，如 `java.lang`、`java.util`等，是java运行时环境所需类的一部分, 如果是Android，还会加载Android sdk层，如`TextUtils`, `TextView`等)。\n- **使用关系**: 无法被Java程序直接引用。\n\n##### 2. 扩展类加载器(Extersion ClassLoader)\n\n- **负责加载**: `JAVA_HOME\\lib\\ext`目录中的类库(继承自java核心类的类)。\n- **使用关系**: 可以被开发者直接使用。\n\n##### 3. 应用程序类加载器(Application ClassLoader)\n\n> 系统类加载器。\n\n- **负责加载**: 用户类路径(Classpath)上所指定的类库。Android中大多数的应用中的类(从odex中加载出来的类: 如 MainActivity、自定义View、XXXApplication)。\n- **使用关系**:  可以被开发者直接使用。\n- **备注**: 一般是应用程序默认的类加载器。\n\n### 特性\n\n#### 什么是双亲委派模型?\n\n一个类收到了类加载请求，会将请求先委派给父类加载，每层皆如此，因此所有的类加载是从上而下的，只有上层无法加载了才到下层加载。\n\n参考`ClassLoader`中给出的解释:\n\n```\nLoads the class with the specified name, optionally linking it after loading. The following steps are performed:\n1. Call findLoadedClass(java.lang.String) to determine if the requested class has already been loaded.\n2. If the class has not yet been loaded: Invoke this method on the parent class loader.\n3. If the class has still not been loaded: Call findClass(java.lang.String) to find the class.\n```\n\n#### 为什么要遵循双亲委派模型?\n\n为了保证所加载的类的唯一性，保证相同的类只会被一个加载器所加载。也保证了一个类不会被多个加载器加载到JVM中，导致同一个类在JVM被不同的加载器加载多次。\n\n#### Dalvik虚拟机的类加载器与其他Java虚拟机的不同?\n\n一般的Java虚拟机，是自定义继承自`ClassLoader`的类加载器，然后通过`defineClass`方法从二进制流中加载Class，或者从Class文件中读取。而Dalvik虚拟机是阉割以及修改过的，无法从二进制流中加载，Dalvik只识别dex文件，因此我们能加载的只是dex文件或包含dex文件的`.jar`或`.apk`。\n\n#### 其他梗\n\n- 当java源码被编译为binary class时，编译器会插入一个静态常量`final static java.lang.Class class`，因为任意类我们都可以通过`.class`获得当前类的`java.lang.Class`。\n- java中的静态对象是attach到对应的class上面的，也就是attach在该class的`ClassLoader`上面的，当`ClassLoader`被unload的时候，如果再次访问该静态对象，就是一个全新的静态对象在一个新的`ClassLoader`上了。\n- 可以通过`Class.getClassLoader()`来获得该类的`ClassLoader`。\n\n## II. Android 动态加载Dex的方式\n\n![](/img/android_dynamic_dex.png)\n\n#### DexFile\n\nAndroid中的这几种类加载器实际是依赖`DexFile`的，对于`DexFile`有以下两点:\n\n1. 打开的DEX文件不会直接存储在`DexFile`对象中，而是存储在对于虚拟机只读的memory-mapped上。\n2. 我们无法直接调用`DexFile.loadClass`进行对dex的加载，只能通过ClassLoader进行加载。\n\n案例参考:\n\n- `PathClassLoader`的使用案例推荐参考: [secondary-dex-gradle/.../secondarydex/plugin/](https://github.com/creativepsyco/secondary-dex-gradle/tree/master/app/src/main/java/com/github/creativepsyco/secondarydex/plugin)\n- `DexClassLoader`的使用案例推荐参考: [Custom Class Loading in Dalvik](http://android-developers.blogspot.hk/2011/07/custom-class-loading-in-dalvik.html)，如果你有网络下载dex动态打补丁的需求的话。\n\n## III. 编译层面实现打指定独立dex\n\n#### Ant\n\n可以参考[这里](http://android-developers.blogspot.hk/2011/07/custom-class-loading-in-dalvik.html)后面的`Build Process`。\n\n#### Gradle\n\n在编译层面将指定的module拆分出来打包成dex放入assets中，完全可以参考这个方案: [secondary-dex-gradle/app/build.gradle](https://github.com/creativepsyco/secondary-dex-gradle/blob/master/app/build.gradle)\n\n> 如果不理解的可以看我fork的，我添加了中文注解: [Jacksgong/secondary-dex-gradle/app/build.gradle](https://github.com/Jacksgong/secondary-dex-gradle/blob/master/app/build.gradle)\n\n## IV. 安全性讨论\n\n#### 动态加载Dex的安全性主要存在两方面:\n\n1. 存储dex的文件暴露在其他应用可读写的目录下。\n2. 加载外部dex的时候没有做好完整的安全性校验。\n\n\n#### 解决方案\n\n1. 尽量将dex放到当前应用的私有目录下，保证只有当前应用uid可以读甚至写(一般就只有`Context.getFileDir()`/ `Context.getDir(String, MODE_PRIVATE)` / `Context.getCacheDir()`)，这方面目录相关知识可以参看: [Android中尽量不用Storage Permission](http://blog.dreamtobe.cn/2015/11/30/android_storage_permission/)\n2. 对从服务端下载或者外部加载的dex，做校验（对文件进行哈希值校验等）。\n3. 将dex文件加密，通过JNI将解密代码写在Native层，解密之后通过`defineClass`指定路径加载完成后，删除解密后文件。\n\n---\n\n本文已经发布到JackBlog公众号，可请直接访问: [Android动态加载dex - JacksBlog](https://mp.weixin.qq.com/s?__biz=MzIyMjQxMzAzOA==&mid=2247483667&idx=1&sn=5e4cc3bd07e81efa41fbfce25f4a6bd3)\n\n---\n\n- [Custom Class Loading in Dalvik](http://android-developers.blogspot.hk/2011/07/custom-class-loading-in-dalvik.html)\n- [Custom Class Loading in Dalvik with Gradle (Android New Build System)](http://stackoverflow.com/questions/18174022/custom-class-loading-in-dalvik-with-gradle-android-new-build-system)\n- [外部动态加载DEX安全风险浅析](http://jaq.alibaba.com/blog.htm?id=63)\n- [creativepsyco/secondary-dex-gradle](https://github.com/creativepsyco/secondary-dex-gradle)\n- [Android类动态加载技术](http://www.blogjava.net/zh-weir/archive/2011/10/29/362294.html)\n- [JVM学习笔记（八）：类加载器以及双亲委派模型介绍](http://chenzhou123520.iteye.com/blog/1601319)\n- [Java Class Loader](http://javapapers.com/core-java/java-class-loader/)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/android_dynamic_dex.md","raw":"title: Android 动态加载dex\ndate: 2015-12-07 00:48:03\npermalink: 2015/12/07/android_dynamic_dex\ntags:\n- Android\n- dex\n- gradle\n- ant\n- ClassLoader\n- 安全\n\n---\n\n> 首先如果仅仅是因为64K method的问题可以直接看这里[DexGuard、Proguard、Multi-dex](http://blog.dreamtobe.cn/2015/11/04/guard_multi_dex/)给出的解决方案。\n\n> 本文主要讨论从编译层面，dex动态加载器选择层面以及安全层面讨论dex动态加载\n\n<!-- more -->\n\n---\n\n## I. 类加载器\n\n比较两个类是否相等: 前提是采用的是同样的加载器加载的，否则必不相等。\n\n### 一般加载器类别\n\n#### 虚拟机的角度\n\n##### 1. 启动类加载器(Bootstrap ClassLoader)\n\n使用C++语言实现，虚拟机自身的一部分。\n\n##### 2. 其他的类加载器\n\n使用Java语言实现，独立于JVM外部，全部继承自类`java.lang.ClassLoader`。\n\n#### 开发人员角度\n\n##### 1. 启动类加载器(Bootstrap ClassLoader)\n\n- **层级**: native层实现。\n- **负责加载**: `JAVA_HOME\\lib`目录中能被JVM识别的类库加载到JVM内存中(名称不符合的类库不会被加载)(java的核心类，如 `java.lang`、`java.util`等，是java运行时环境所需类的一部分, 如果是Android，还会加载Android sdk层，如`TextUtils`, `TextView`等)。\n- **使用关系**: 无法被Java程序直接引用。\n\n##### 2. 扩展类加载器(Extersion ClassLoader)\n\n- **负责加载**: `JAVA_HOME\\lib\\ext`目录中的类库(继承自java核心类的类)。\n- **使用关系**: 可以被开发者直接使用。\n\n##### 3. 应用程序类加载器(Application ClassLoader)\n\n> 系统类加载器。\n\n- **负责加载**: 用户类路径(Classpath)上所指定的类库。Android中大多数的应用中的类(从odex中加载出来的类: 如 MainActivity、自定义View、XXXApplication)。\n- **使用关系**:  可以被开发者直接使用。\n- **备注**: 一般是应用程序默认的类加载器。\n\n### 特性\n\n#### 什么是双亲委派模型?\n\n一个类收到了类加载请求，会将请求先委派给父类加载，每层皆如此，因此所有的类加载是从上而下的，只有上层无法加载了才到下层加载。\n\n参考`ClassLoader`中给出的解释:\n\n```\nLoads the class with the specified name, optionally linking it after loading. The following steps are performed:\n1. Call findLoadedClass(java.lang.String) to determine if the requested class has already been loaded.\n2. If the class has not yet been loaded: Invoke this method on the parent class loader.\n3. If the class has still not been loaded: Call findClass(java.lang.String) to find the class.\n```\n\n#### 为什么要遵循双亲委派模型?\n\n为了保证所加载的类的唯一性，保证相同的类只会被一个加载器所加载。也保证了一个类不会被多个加载器加载到JVM中，导致同一个类在JVM被不同的加载器加载多次。\n\n#### Dalvik虚拟机的类加载器与其他Java虚拟机的不同?\n\n一般的Java虚拟机，是自定义继承自`ClassLoader`的类加载器，然后通过`defineClass`方法从二进制流中加载Class，或者从Class文件中读取。而Dalvik虚拟机是阉割以及修改过的，无法从二进制流中加载，Dalvik只识别dex文件，因此我们能加载的只是dex文件或包含dex文件的`.jar`或`.apk`。\n\n#### 其他梗\n\n- 当java源码被编译为binary class时，编译器会插入一个静态常量`final static java.lang.Class class`，因为任意类我们都可以通过`.class`获得当前类的`java.lang.Class`。\n- java中的静态对象是attach到对应的class上面的，也就是attach在该class的`ClassLoader`上面的，当`ClassLoader`被unload的时候，如果再次访问该静态对象，就是一个全新的静态对象在一个新的`ClassLoader`上了。\n- 可以通过`Class.getClassLoader()`来获得该类的`ClassLoader`。\n\n## II. Android 动态加载Dex的方式\n\n![](/img/android_dynamic_dex.png)\n\n#### DexFile\n\nAndroid中的这几种类加载器实际是依赖`DexFile`的，对于`DexFile`有以下两点:\n\n1. 打开的DEX文件不会直接存储在`DexFile`对象中，而是存储在对于虚拟机只读的memory-mapped上。\n2. 我们无法直接调用`DexFile.loadClass`进行对dex的加载，只能通过ClassLoader进行加载。\n\n案例参考:\n\n- `PathClassLoader`的使用案例推荐参考: [secondary-dex-gradle/.../secondarydex/plugin/](https://github.com/creativepsyco/secondary-dex-gradle/tree/master/app/src/main/java/com/github/creativepsyco/secondarydex/plugin)\n- `DexClassLoader`的使用案例推荐参考: [Custom Class Loading in Dalvik](http://android-developers.blogspot.hk/2011/07/custom-class-loading-in-dalvik.html)，如果你有网络下载dex动态打补丁的需求的话。\n\n## III. 编译层面实现打指定独立dex\n\n#### Ant\n\n可以参考[这里](http://android-developers.blogspot.hk/2011/07/custom-class-loading-in-dalvik.html)后面的`Build Process`。\n\n#### Gradle\n\n在编译层面将指定的module拆分出来打包成dex放入assets中，完全可以参考这个方案: [secondary-dex-gradle/app/build.gradle](https://github.com/creativepsyco/secondary-dex-gradle/blob/master/app/build.gradle)\n\n> 如果不理解的可以看我fork的，我添加了中文注解: [Jacksgong/secondary-dex-gradle/app/build.gradle](https://github.com/Jacksgong/secondary-dex-gradle/blob/master/app/build.gradle)\n\n## IV. 安全性讨论\n\n#### 动态加载Dex的安全性主要存在两方面:\n\n1. 存储dex的文件暴露在其他应用可读写的目录下。\n2. 加载外部dex的时候没有做好完整的安全性校验。\n\n\n#### 解决方案\n\n1. 尽量将dex放到当前应用的私有目录下，保证只有当前应用uid可以读甚至写(一般就只有`Context.getFileDir()`/ `Context.getDir(String, MODE_PRIVATE)` / `Context.getCacheDir()`)，这方面目录相关知识可以参看: [Android中尽量不用Storage Permission](http://blog.dreamtobe.cn/2015/11/30/android_storage_permission/)\n2. 对从服务端下载或者外部加载的dex，做校验（对文件进行哈希值校验等）。\n3. 将dex文件加密，通过JNI将解密代码写在Native层，解密之后通过`defineClass`指定路径加载完成后，删除解密后文件。\n\n---\n\n本文已经发布到JackBlog公众号，可请直接访问: [Android动态加载dex - JacksBlog](https://mp.weixin.qq.com/s?__biz=MzIyMjQxMzAzOA==&mid=2247483667&idx=1&sn=5e4cc3bd07e81efa41fbfce25f4a6bd3)\n\n---\n\n- [Custom Class Loading in Dalvik](http://android-developers.blogspot.hk/2011/07/custom-class-loading-in-dalvik.html)\n- [Custom Class Loading in Dalvik with Gradle (Android New Build System)](http://stackoverflow.com/questions/18174022/custom-class-loading-in-dalvik-with-gradle-android-new-build-system)\n- [外部动态加载DEX安全风险浅析](http://jaq.alibaba.com/blog.htm?id=63)\n- [creativepsyco/secondary-dex-gradle](https://github.com/creativepsyco/secondary-dex-gradle)\n- [Android类动态加载技术](http://www.blogjava.net/zh-weir/archive/2011/10/29/362294.html)\n- [JVM学习笔记（八）：类加载器以及双亲委派模型介绍](http://chenzhou123520.iteye.com/blog/1601319)\n- [Java Class Loader](http://javapapers.com/core-java/java-class-loader/)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2015/12/07/android_dynamic_dex","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66id001p95bus4h4zkhj","content":"<blockquote>\n<p>首先如果仅仅是因为64K method的问题可以直接看这里<a href=\"http://blog.dreamtobe.cn/2015/11/04/guard_multi_dex/\">DexGuard、Proguard、Multi-dex</a>给出的解决方案。</p>\n<p>本文主要讨论从编译层面，dex动态加载器选择层面以及安全层面讨论dex动态加载</p>\n</blockquote>\n<a id=\"more\"></a>\n<hr>\n<h2 id=\"I-类加载器\"><a href=\"#I-类加载器\" class=\"headerlink\" title=\"I. 类加载器\"></a>I. 类加载器</h2><p>比较两个类是否相等: 前提是采用的是同样的加载器加载的，否则必不相等。</p>\n<h3 id=\"一般加载器类别\"><a href=\"#一般加载器类别\" class=\"headerlink\" title=\"一般加载器类别\"></a>一般加载器类别</h3><h4 id=\"虚拟机的角度\"><a href=\"#虚拟机的角度\" class=\"headerlink\" title=\"虚拟机的角度\"></a>虚拟机的角度</h4><h5 id=\"1-启动类加载器-Bootstrap-ClassLoader\"><a href=\"#1-启动类加载器-Bootstrap-ClassLoader\" class=\"headerlink\" title=\"1. 启动类加载器(Bootstrap ClassLoader)\"></a>1. 启动类加载器(Bootstrap ClassLoader)</h5><p>使用C++语言实现，虚拟机自身的一部分。</p>\n<h5 id=\"2-其他的类加载器\"><a href=\"#2-其他的类加载器\" class=\"headerlink\" title=\"2. 其他的类加载器\"></a>2. 其他的类加载器</h5><p>使用Java语言实现，独立于JVM外部，全部继承自类<code>java.lang.ClassLoader</code>。</p>\n<h4 id=\"开发人员角度\"><a href=\"#开发人员角度\" class=\"headerlink\" title=\"开发人员角度\"></a>开发人员角度</h4><h5 id=\"1-启动类加载器-Bootstrap-ClassLoader-1\"><a href=\"#1-启动类加载器-Bootstrap-ClassLoader-1\" class=\"headerlink\" title=\"1. 启动类加载器(Bootstrap ClassLoader)\"></a>1. 启动类加载器(Bootstrap ClassLoader)</h5><ul>\n<li><strong>层级</strong>: native层实现。</li>\n<li><strong>负责加载</strong>: <code>JAVA_HOME\\lib</code>目录中能被JVM识别的类库加载到JVM内存中(名称不符合的类库不会被加载)(java的核心类，如 <code>java.lang</code>、<code>java.util</code>等，是java运行时环境所需类的一部分, 如果是Android，还会加载Android sdk层，如<code>TextUtils</code>, <code>TextView</code>等)。</li>\n<li><strong>使用关系</strong>: 无法被Java程序直接引用。</li>\n</ul>\n<h5 id=\"2-扩展类加载器-Extersion-ClassLoader\"><a href=\"#2-扩展类加载器-Extersion-ClassLoader\" class=\"headerlink\" title=\"2. 扩展类加载器(Extersion ClassLoader)\"></a>2. 扩展类加载器(Extersion ClassLoader)</h5><ul>\n<li><strong>负责加载</strong>: <code>JAVA_HOME\\lib\\ext</code>目录中的类库(继承自java核心类的类)。</li>\n<li><strong>使用关系</strong>: 可以被开发者直接使用。</li>\n</ul>\n<h5 id=\"3-应用程序类加载器-Application-ClassLoader\"><a href=\"#3-应用程序类加载器-Application-ClassLoader\" class=\"headerlink\" title=\"3. 应用程序类加载器(Application ClassLoader)\"></a>3. 应用程序类加载器(Application ClassLoader)</h5><blockquote>\n<p>系统类加载器。</p>\n</blockquote>\n<ul>\n<li><strong>负责加载</strong>: 用户类路径(Classpath)上所指定的类库。Android中大多数的应用中的类(从odex中加载出来的类: 如 MainActivity、自定义View、XXXApplication)。</li>\n<li><strong>使用关系</strong>:  可以被开发者直接使用。</li>\n<li><strong>备注</strong>: 一般是应用程序默认的类加载器。</li>\n</ul>\n<h3 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h3><h4 id=\"什么是双亲委派模型\"><a href=\"#什么是双亲委派模型\" class=\"headerlink\" title=\"什么是双亲委派模型?\"></a>什么是双亲委派模型?</h4><p>一个类收到了类加载请求，会将请求先委派给父类加载，每层皆如此，因此所有的类加载是从上而下的，只有上层无法加载了才到下层加载。</p>\n<p>参考<code>ClassLoader</code>中给出的解释:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"type\">Loads</span> the <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"keyword\">with</span> <span class=\"title\">the</span> <span class=\"title\">specified</span> <span class=\"title\">name</span>, <span class=\"title\">optionally</span> <span class=\"title\">linking</span> <span class=\"title\">it</span> <span class=\"title\">after</span> <span class=\"title\">loading</span>. <span class=\"title\">The</span> <span class=\"title\">following</span> <span class=\"title\">steps</span> <span class=\"title\">are</span> <span class=\"title\">performed</span></span>:</div><div class=\"line\"><span class=\"number\">1.</span> <span class=\"type\">Call</span> findLoadedClass(java.lang.<span class=\"type\">String</span>) to determine <span class=\"keyword\">if</span> the requested <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">has</span> <span class=\"title\">already</span> <span class=\"title\">been</span> <span class=\"title\">loaded</span>.</span></div><div class=\"line\"><span class=\"number\">2.</span> <span class=\"type\">If</span> the <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">has</span> <span class=\"title\">not</span> <span class=\"title\">yet</span> <span class=\"title\">been</span> <span class=\"title\">loaded</span></span>: <span class=\"type\">Invoke</span> <span class=\"keyword\">this</span> method on the parent <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">loader</span>.</span></div><div class=\"line\"><span class=\"number\">3.</span> <span class=\"type\">If</span> the <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">has</span> <span class=\"title\">still</span> <span class=\"title\">not</span> <span class=\"title\">been</span> <span class=\"title\">loaded</span></span>: <span class=\"type\">Call</span> findClass(java.lang.<span class=\"type\">String</span>) to find the <span class=\"class\"><span class=\"keyword\">class</span>.</span></div></pre></td></tr></table></figure>\n<h4 id=\"为什么要遵循双亲委派模型\"><a href=\"#为什么要遵循双亲委派模型\" class=\"headerlink\" title=\"为什么要遵循双亲委派模型?\"></a>为什么要遵循双亲委派模型?</h4><p>为了保证所加载的类的唯一性，保证相同的类只会被一个加载器所加载。也保证了一个类不会被多个加载器加载到JVM中，导致同一个类在JVM被不同的加载器加载多次。</p>\n<h4 id=\"Dalvik虚拟机的类加载器与其他Java虚拟机的不同\"><a href=\"#Dalvik虚拟机的类加载器与其他Java虚拟机的不同\" class=\"headerlink\" title=\"Dalvik虚拟机的类加载器与其他Java虚拟机的不同?\"></a>Dalvik虚拟机的类加载器与其他Java虚拟机的不同?</h4><p>一般的Java虚拟机，是自定义继承自<code>ClassLoader</code>的类加载器，然后通过<code>defineClass</code>方法从二进制流中加载Class，或者从Class文件中读取。而Dalvik虚拟机是阉割以及修改过的，无法从二进制流中加载，Dalvik只识别dex文件，因此我们能加载的只是dex文件或包含dex文件的<code>.jar</code>或<code>.apk</code>。</p>\n<h4 id=\"其他梗\"><a href=\"#其他梗\" class=\"headerlink\" title=\"其他梗\"></a>其他梗</h4><ul>\n<li>当java源码被编译为binary class时，编译器会插入一个静态常量<code>final static java.lang.Class class</code>，因为任意类我们都可以通过<code>.class</code>获得当前类的<code>java.lang.Class</code>。</li>\n<li>java中的静态对象是attach到对应的class上面的，也就是attach在该class的<code>ClassLoader</code>上面的，当<code>ClassLoader</code>被unload的时候，如果再次访问该静态对象，就是一个全新的静态对象在一个新的<code>ClassLoader</code>上了。</li>\n<li>可以通过<code>Class.getClassLoader()</code>来获得该类的<code>ClassLoader</code>。</li>\n</ul>\n<h2 id=\"II-Android-动态加载Dex的方式\"><a href=\"#II-Android-动态加载Dex的方式\" class=\"headerlink\" title=\"II. Android 动态加载Dex的方式\"></a>II. Android 动态加载Dex的方式</h2><p><img src=\"/img/android_dynamic_dex.png\" alt=\"\"></p>\n<h4 id=\"DexFile\"><a href=\"#DexFile\" class=\"headerlink\" title=\"DexFile\"></a>DexFile</h4><p>Android中的这几种类加载器实际是依赖<code>DexFile</code>的，对于<code>DexFile</code>有以下两点:</p>\n<ol>\n<li>打开的DEX文件不会直接存储在<code>DexFile</code>对象中，而是存储在对于虚拟机只读的memory-mapped上。</li>\n<li>我们无法直接调用<code>DexFile.loadClass</code>进行对dex的加载，只能通过ClassLoader进行加载。</li>\n</ol>\n<p>案例参考:</p>\n<ul>\n<li><code>PathClassLoader</code>的使用案例推荐参考: <a href=\"https://github.com/creativepsyco/secondary-dex-gradle/tree/master/app/src/main/java/com/github/creativepsyco/secondarydex/plugin\" target=\"_blank\" rel=\"external\">secondary-dex-gradle/…/secondarydex/plugin/</a></li>\n<li><code>DexClassLoader</code>的使用案例推荐参考: <a href=\"http://android-developers.blogspot.hk/2011/07/custom-class-loading-in-dalvik.html\" target=\"_blank\" rel=\"external\">Custom Class Loading in Dalvik</a>，如果你有网络下载dex动态打补丁的需求的话。</li>\n</ul>\n<h2 id=\"III-编译层面实现打指定独立dex\"><a href=\"#III-编译层面实现打指定独立dex\" class=\"headerlink\" title=\"III. 编译层面实现打指定独立dex\"></a>III. 编译层面实现打指定独立dex</h2><h4 id=\"Ant\"><a href=\"#Ant\" class=\"headerlink\" title=\"Ant\"></a>Ant</h4><p>可以参考<a href=\"http://android-developers.blogspot.hk/2011/07/custom-class-loading-in-dalvik.html\" target=\"_blank\" rel=\"external\">这里</a>后面的<code>Build Process</code>。</p>\n<h4 id=\"Gradle\"><a href=\"#Gradle\" class=\"headerlink\" title=\"Gradle\"></a>Gradle</h4><p>在编译层面将指定的module拆分出来打包成dex放入assets中，完全可以参考这个方案: <a href=\"https://github.com/creativepsyco/secondary-dex-gradle/blob/master/app/build.gradle\" target=\"_blank\" rel=\"external\">secondary-dex-gradle/app/build.gradle</a></p>\n<blockquote>\n<p>如果不理解的可以看我fork的，我添加了中文注解: <a href=\"https://github.com/Jacksgong/secondary-dex-gradle/blob/master/app/build.gradle\" target=\"_blank\" rel=\"external\">Jacksgong/secondary-dex-gradle/app/build.gradle</a></p>\n</blockquote>\n<h2 id=\"IV-安全性讨论\"><a href=\"#IV-安全性讨论\" class=\"headerlink\" title=\"IV. 安全性讨论\"></a>IV. 安全性讨论</h2><h4 id=\"动态加载Dex的安全性主要存在两方面\"><a href=\"#动态加载Dex的安全性主要存在两方面\" class=\"headerlink\" title=\"动态加载Dex的安全性主要存在两方面:\"></a>动态加载Dex的安全性主要存在两方面:</h4><ol>\n<li>存储dex的文件暴露在其他应用可读写的目录下。</li>\n<li>加载外部dex的时候没有做好完整的安全性校验。</li>\n</ol>\n<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><ol>\n<li>尽量将dex放到当前应用的私有目录下，保证只有当前应用uid可以读甚至写(一般就只有<code>Context.getFileDir()</code>/ <code>Context.getDir(String, MODE_PRIVATE)</code> / <code>Context.getCacheDir()</code>)，这方面目录相关知识可以参看: <a href=\"http://blog.dreamtobe.cn/2015/11/30/android_storage_permission/\">Android中尽量不用Storage Permission</a></li>\n<li>对从服务端下载或者外部加载的dex，做校验（对文件进行哈希值校验等）。</li>\n<li>将dex文件加密，通过JNI将解密代码写在Native层，解密之后通过<code>defineClass</code>指定路径加载完成后，删除解密后文件。</li>\n</ol>\n<hr>\n<p>本文已经发布到JackBlog公众号，可请直接访问: <a href=\"https://mp.weixin.qq.com/s?__biz=MzIyMjQxMzAzOA==&amp;mid=2247483667&amp;idx=1&amp;sn=5e4cc3bd07e81efa41fbfce25f4a6bd3\" target=\"_blank\" rel=\"external\">Android动态加载dex - JacksBlog</a></p>\n<hr>\n<ul>\n<li><a href=\"http://android-developers.blogspot.hk/2011/07/custom-class-loading-in-dalvik.html\" target=\"_blank\" rel=\"external\">Custom Class Loading in Dalvik</a></li>\n<li><a href=\"http://stackoverflow.com/questions/18174022/custom-class-loading-in-dalvik-with-gradle-android-new-build-system\" target=\"_blank\" rel=\"external\">Custom Class Loading in Dalvik with Gradle (Android New Build System)</a></li>\n<li><a href=\"http://jaq.alibaba.com/blog.htm?id=63\" target=\"_blank\" rel=\"external\">外部动态加载DEX安全风险浅析</a></li>\n<li><a href=\"https://github.com/creativepsyco/secondary-dex-gradle\" target=\"_blank\" rel=\"external\">creativepsyco/secondary-dex-gradle</a></li>\n<li><a href=\"http://www.blogjava.net/zh-weir/archive/2011/10/29/362294.html\" target=\"_blank\" rel=\"external\">Android类动态加载技术</a></li>\n<li><a href=\"http://chenzhou123520.iteye.com/blog/1601319\" target=\"_blank\" rel=\"external\">JVM学习笔记（八）：类加载器以及双亲委派模型介绍</a></li>\n<li><a href=\"http://javapapers.com/core-java/java-class-loader/\" target=\"_blank\" rel=\"external\">Java Class Loader</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>首先如果仅仅是因为64K method的问题可以直接看这里<a href=\"http://blog.dreamtobe.cn/2015/11/04/guard_multi_dex/\">DexGuard、Proguard、Multi-dex</a>给出的解决方案。</p>\n<p>本文主要讨论从编译层面，dex动态加载器选择层面以及安全层面讨论dex动态加载</p>\n</blockquote>","more":"<hr>\n<h2 id=\"I-类加载器\"><a href=\"#I-类加载器\" class=\"headerlink\" title=\"I. 类加载器\"></a>I. 类加载器</h2><p>比较两个类是否相等: 前提是采用的是同样的加载器加载的，否则必不相等。</p>\n<h3 id=\"一般加载器类别\"><a href=\"#一般加载器类别\" class=\"headerlink\" title=\"一般加载器类别\"></a>一般加载器类别</h3><h4 id=\"虚拟机的角度\"><a href=\"#虚拟机的角度\" class=\"headerlink\" title=\"虚拟机的角度\"></a>虚拟机的角度</h4><h5 id=\"1-启动类加载器-Bootstrap-ClassLoader\"><a href=\"#1-启动类加载器-Bootstrap-ClassLoader\" class=\"headerlink\" title=\"1. 启动类加载器(Bootstrap ClassLoader)\"></a>1. 启动类加载器(Bootstrap ClassLoader)</h5><p>使用C++语言实现，虚拟机自身的一部分。</p>\n<h5 id=\"2-其他的类加载器\"><a href=\"#2-其他的类加载器\" class=\"headerlink\" title=\"2. 其他的类加载器\"></a>2. 其他的类加载器</h5><p>使用Java语言实现，独立于JVM外部，全部继承自类<code>java.lang.ClassLoader</code>。</p>\n<h4 id=\"开发人员角度\"><a href=\"#开发人员角度\" class=\"headerlink\" title=\"开发人员角度\"></a>开发人员角度</h4><h5 id=\"1-启动类加载器-Bootstrap-ClassLoader-1\"><a href=\"#1-启动类加载器-Bootstrap-ClassLoader-1\" class=\"headerlink\" title=\"1. 启动类加载器(Bootstrap ClassLoader)\"></a>1. 启动类加载器(Bootstrap ClassLoader)</h5><ul>\n<li><strong>层级</strong>: native层实现。</li>\n<li><strong>负责加载</strong>: <code>JAVA_HOME\\lib</code>目录中能被JVM识别的类库加载到JVM内存中(名称不符合的类库不会被加载)(java的核心类，如 <code>java.lang</code>、<code>java.util</code>等，是java运行时环境所需类的一部分, 如果是Android，还会加载Android sdk层，如<code>TextUtils</code>, <code>TextView</code>等)。</li>\n<li><strong>使用关系</strong>: 无法被Java程序直接引用。</li>\n</ul>\n<h5 id=\"2-扩展类加载器-Extersion-ClassLoader\"><a href=\"#2-扩展类加载器-Extersion-ClassLoader\" class=\"headerlink\" title=\"2. 扩展类加载器(Extersion ClassLoader)\"></a>2. 扩展类加载器(Extersion ClassLoader)</h5><ul>\n<li><strong>负责加载</strong>: <code>JAVA_HOME\\lib\\ext</code>目录中的类库(继承自java核心类的类)。</li>\n<li><strong>使用关系</strong>: 可以被开发者直接使用。</li>\n</ul>\n<h5 id=\"3-应用程序类加载器-Application-ClassLoader\"><a href=\"#3-应用程序类加载器-Application-ClassLoader\" class=\"headerlink\" title=\"3. 应用程序类加载器(Application ClassLoader)\"></a>3. 应用程序类加载器(Application ClassLoader)</h5><blockquote>\n<p>系统类加载器。</p>\n</blockquote>\n<ul>\n<li><strong>负责加载</strong>: 用户类路径(Classpath)上所指定的类库。Android中大多数的应用中的类(从odex中加载出来的类: 如 MainActivity、自定义View、XXXApplication)。</li>\n<li><strong>使用关系</strong>:  可以被开发者直接使用。</li>\n<li><strong>备注</strong>: 一般是应用程序默认的类加载器。</li>\n</ul>\n<h3 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h3><h4 id=\"什么是双亲委派模型\"><a href=\"#什么是双亲委派模型\" class=\"headerlink\" title=\"什么是双亲委派模型?\"></a>什么是双亲委派模型?</h4><p>一个类收到了类加载请求，会将请求先委派给父类加载，每层皆如此，因此所有的类加载是从上而下的，只有上层无法加载了才到下层加载。</p>\n<p>参考<code>ClassLoader</code>中给出的解释:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"type\">Loads</span> the <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"keyword\">with</span> <span class=\"title\">the</span> <span class=\"title\">specified</span> <span class=\"title\">name</span>, <span class=\"title\">optionally</span> <span class=\"title\">linking</span> <span class=\"title\">it</span> <span class=\"title\">after</span> <span class=\"title\">loading</span>. <span class=\"title\">The</span> <span class=\"title\">following</span> <span class=\"title\">steps</span> <span class=\"title\">are</span> <span class=\"title\">performed</span></span>:</div><div class=\"line\"><span class=\"number\">1.</span> <span class=\"type\">Call</span> findLoadedClass(java.lang.<span class=\"type\">String</span>) to determine <span class=\"keyword\">if</span> the requested <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">has</span> <span class=\"title\">already</span> <span class=\"title\">been</span> <span class=\"title\">loaded</span>.</span></div><div class=\"line\"><span class=\"number\">2.</span> <span class=\"type\">If</span> the <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">has</span> <span class=\"title\">not</span> <span class=\"title\">yet</span> <span class=\"title\">been</span> <span class=\"title\">loaded</span></span>: <span class=\"type\">Invoke</span> <span class=\"keyword\">this</span> method on the parent <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">loader</span>.</span></div><div class=\"line\"><span class=\"number\">3.</span> <span class=\"type\">If</span> the <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">has</span> <span class=\"title\">still</span> <span class=\"title\">not</span> <span class=\"title\">been</span> <span class=\"title\">loaded</span></span>: <span class=\"type\">Call</span> findClass(java.lang.<span class=\"type\">String</span>) to find the <span class=\"class\"><span class=\"keyword\">class</span>.</span></div></pre></td></tr></table></figure>\n<h4 id=\"为什么要遵循双亲委派模型\"><a href=\"#为什么要遵循双亲委派模型\" class=\"headerlink\" title=\"为什么要遵循双亲委派模型?\"></a>为什么要遵循双亲委派模型?</h4><p>为了保证所加载的类的唯一性，保证相同的类只会被一个加载器所加载。也保证了一个类不会被多个加载器加载到JVM中，导致同一个类在JVM被不同的加载器加载多次。</p>\n<h4 id=\"Dalvik虚拟机的类加载器与其他Java虚拟机的不同\"><a href=\"#Dalvik虚拟机的类加载器与其他Java虚拟机的不同\" class=\"headerlink\" title=\"Dalvik虚拟机的类加载器与其他Java虚拟机的不同?\"></a>Dalvik虚拟机的类加载器与其他Java虚拟机的不同?</h4><p>一般的Java虚拟机，是自定义继承自<code>ClassLoader</code>的类加载器，然后通过<code>defineClass</code>方法从二进制流中加载Class，或者从Class文件中读取。而Dalvik虚拟机是阉割以及修改过的，无法从二进制流中加载，Dalvik只识别dex文件，因此我们能加载的只是dex文件或包含dex文件的<code>.jar</code>或<code>.apk</code>。</p>\n<h4 id=\"其他梗\"><a href=\"#其他梗\" class=\"headerlink\" title=\"其他梗\"></a>其他梗</h4><ul>\n<li>当java源码被编译为binary class时，编译器会插入一个静态常量<code>final static java.lang.Class class</code>，因为任意类我们都可以通过<code>.class</code>获得当前类的<code>java.lang.Class</code>。</li>\n<li>java中的静态对象是attach到对应的class上面的，也就是attach在该class的<code>ClassLoader</code>上面的，当<code>ClassLoader</code>被unload的时候，如果再次访问该静态对象，就是一个全新的静态对象在一个新的<code>ClassLoader</code>上了。</li>\n<li>可以通过<code>Class.getClassLoader()</code>来获得该类的<code>ClassLoader</code>。</li>\n</ul>\n<h2 id=\"II-Android-动态加载Dex的方式\"><a href=\"#II-Android-动态加载Dex的方式\" class=\"headerlink\" title=\"II. Android 动态加载Dex的方式\"></a>II. Android 动态加载Dex的方式</h2><p><img src=\"/img/android_dynamic_dex.png\" alt=\"\"></p>\n<h4 id=\"DexFile\"><a href=\"#DexFile\" class=\"headerlink\" title=\"DexFile\"></a>DexFile</h4><p>Android中的这几种类加载器实际是依赖<code>DexFile</code>的，对于<code>DexFile</code>有以下两点:</p>\n<ol>\n<li>打开的DEX文件不会直接存储在<code>DexFile</code>对象中，而是存储在对于虚拟机只读的memory-mapped上。</li>\n<li>我们无法直接调用<code>DexFile.loadClass</code>进行对dex的加载，只能通过ClassLoader进行加载。</li>\n</ol>\n<p>案例参考:</p>\n<ul>\n<li><code>PathClassLoader</code>的使用案例推荐参考: <a href=\"https://github.com/creativepsyco/secondary-dex-gradle/tree/master/app/src/main/java/com/github/creativepsyco/secondarydex/plugin\">secondary-dex-gradle/…/secondarydex/plugin/</a></li>\n<li><code>DexClassLoader</code>的使用案例推荐参考: <a href=\"http://android-developers.blogspot.hk/2011/07/custom-class-loading-in-dalvik.html\">Custom Class Loading in Dalvik</a>，如果你有网络下载dex动态打补丁的需求的话。</li>\n</ul>\n<h2 id=\"III-编译层面实现打指定独立dex\"><a href=\"#III-编译层面实现打指定独立dex\" class=\"headerlink\" title=\"III. 编译层面实现打指定独立dex\"></a>III. 编译层面实现打指定独立dex</h2><h4 id=\"Ant\"><a href=\"#Ant\" class=\"headerlink\" title=\"Ant\"></a>Ant</h4><p>可以参考<a href=\"http://android-developers.blogspot.hk/2011/07/custom-class-loading-in-dalvik.html\">这里</a>后面的<code>Build Process</code>。</p>\n<h4 id=\"Gradle\"><a href=\"#Gradle\" class=\"headerlink\" title=\"Gradle\"></a>Gradle</h4><p>在编译层面将指定的module拆分出来打包成dex放入assets中，完全可以参考这个方案: <a href=\"https://github.com/creativepsyco/secondary-dex-gradle/blob/master/app/build.gradle\">secondary-dex-gradle/app/build.gradle</a></p>\n<blockquote>\n<p>如果不理解的可以看我fork的，我添加了中文注解: <a href=\"https://github.com/Jacksgong/secondary-dex-gradle/blob/master/app/build.gradle\">Jacksgong/secondary-dex-gradle/app/build.gradle</a></p>\n</blockquote>\n<h2 id=\"IV-安全性讨论\"><a href=\"#IV-安全性讨论\" class=\"headerlink\" title=\"IV. 安全性讨论\"></a>IV. 安全性讨论</h2><h4 id=\"动态加载Dex的安全性主要存在两方面\"><a href=\"#动态加载Dex的安全性主要存在两方面\" class=\"headerlink\" title=\"动态加载Dex的安全性主要存在两方面:\"></a>动态加载Dex的安全性主要存在两方面:</h4><ol>\n<li>存储dex的文件暴露在其他应用可读写的目录下。</li>\n<li>加载外部dex的时候没有做好完整的安全性校验。</li>\n</ol>\n<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><ol>\n<li>尽量将dex放到当前应用的私有目录下，保证只有当前应用uid可以读甚至写(一般就只有<code>Context.getFileDir()</code>/ <code>Context.getDir(String, MODE_PRIVATE)</code> / <code>Context.getCacheDir()</code>)，这方面目录相关知识可以参看: <a href=\"http://blog.dreamtobe.cn/2015/11/30/android_storage_permission/\">Android中尽量不用Storage Permission</a></li>\n<li>对从服务端下载或者外部加载的dex，做校验（对文件进行哈希值校验等）。</li>\n<li>将dex文件加密，通过JNI将解密代码写在Native层，解密之后通过<code>defineClass</code>指定路径加载完成后，删除解密后文件。</li>\n</ol>\n<hr>\n<p>本文已经发布到JackBlog公众号，可请直接访问: <a href=\"https://mp.weixin.qq.com/s?__biz=MzIyMjQxMzAzOA==&amp;mid=2247483667&amp;idx=1&amp;sn=5e4cc3bd07e81efa41fbfce25f4a6bd3\">Android动态加载dex - JacksBlog</a></p>\n<hr>\n<ul>\n<li><a href=\"http://android-developers.blogspot.hk/2011/07/custom-class-loading-in-dalvik.html\">Custom Class Loading in Dalvik</a></li>\n<li><a href=\"http://stackoverflow.com/questions/18174022/custom-class-loading-in-dalvik-with-gradle-android-new-build-system\">Custom Class Loading in Dalvik with Gradle (Android New Build System)</a></li>\n<li><a href=\"http://jaq.alibaba.com/blog.htm?id=63\">外部动态加载DEX安全风险浅析</a></li>\n<li><a href=\"https://github.com/creativepsyco/secondary-dex-gradle\">creativepsyco/secondary-dex-gradle</a></li>\n<li><a href=\"http://www.blogjava.net/zh-weir/archive/2011/10/29/362294.html\">Android类动态加载技术</a></li>\n<li><a href=\"http://chenzhou123520.iteye.com/blog/1601319\">JVM学习笔记（八）：类加载器以及双亲委派模型介绍</a></li>\n<li><a href=\"http://javapapers.com/core-java/java-class-loader/\">Java Class Loader</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"HttpURLConnection、HttpClient","date":"2015-10-31T07:12:03.000Z","_content":"\n## I. HttpClient\n\n> 具体实现: `DefaultHttpClient`、`AndroidHtppClient`\n\n#### 特点:\n\nAPI数量繁多，官方升级维护较少\n\n<!-- more -->\n\n## II. HttpURLConnection\n\n#### 特点:\n\n多用途、轻量。API简单，易于使用、拓展。\n\n#### 坑点:\n\nAndroid 2.2以前: 可读的InputStream调用close时，可能导致连接池失效（通常解决方法禁用连接池功能）。\n\n#### 迭代亮点:\n\n##### Andorid 2.3\n\n- 默认请求接受gzip。\n- 后会使用SNI([Server Name Indication](https://en.wikipedia.org/wiki/Server_Name_Indication))\n- 断线重连\n\n##### Android 4.0\n\n- 响应缓存机制(`HttpResponseCache#install`):\n\n1. 都由本地提供的响应，没有必要发起网络连接的请求，都直接从本地缓存直接取得\n2. 视情况而定的缓存响应，由服务器确定(304 Not Modified代表不需要更新，就不会下载任何数据，将直接用本地缓存);\n3. 没有缓存的响应，都由服务器直接下载。\n\n## III. 选择\n\n推荐Android 2.2以前使用`HttpClient`，由于Android 2.2以前的`HttpURLConnection`存在坑点，而相比而言`HttpClient`在Android 2.2以前比较稳定。\n\n---\n\n- [Android访问网络，使用HttpURLConnection还是HttpClient？](http://blog.csdn.net/guolin_blog/article/details/12452307)\n- [Android’s HTTP Clients](http://android-developers.blogspot.com/2011/09/androids-http-clients.html)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/android_http.md","raw":"title: HttpURLConnection、HttpClient\ndate: 2015-10-31 15:12:03\npermalink: 2015/10/31/android_http\ntags:\n- Android\n- 网络\n- HttpURLConnection\n- HttpClient\n\n---\n\n## I. HttpClient\n\n> 具体实现: `DefaultHttpClient`、`AndroidHtppClient`\n\n#### 特点:\n\nAPI数量繁多，官方升级维护较少\n\n<!-- more -->\n\n## II. HttpURLConnection\n\n#### 特点:\n\n多用途、轻量。API简单，易于使用、拓展。\n\n#### 坑点:\n\nAndroid 2.2以前: 可读的InputStream调用close时，可能导致连接池失效（通常解决方法禁用连接池功能）。\n\n#### 迭代亮点:\n\n##### Andorid 2.3\n\n- 默认请求接受gzip。\n- 后会使用SNI([Server Name Indication](https://en.wikipedia.org/wiki/Server_Name_Indication))\n- 断线重连\n\n##### Android 4.0\n\n- 响应缓存机制(`HttpResponseCache#install`):\n\n1. 都由本地提供的响应，没有必要发起网络连接的请求，都直接从本地缓存直接取得\n2. 视情况而定的缓存响应，由服务器确定(304 Not Modified代表不需要更新，就不会下载任何数据，将直接用本地缓存);\n3. 没有缓存的响应，都由服务器直接下载。\n\n## III. 选择\n\n推荐Android 2.2以前使用`HttpClient`，由于Android 2.2以前的`HttpURLConnection`存在坑点，而相比而言`HttpClient`在Android 2.2以前比较稳定。\n\n---\n\n- [Android访问网络，使用HttpURLConnection还是HttpClient？](http://blog.csdn.net/guolin_blog/article/details/12452307)\n- [Android’s HTTP Clients](http://android-developers.blogspot.com/2011/09/androids-http-clients.html)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2015/10/31/android_http","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66ie001r95buwcq0e2my","content":"<h2 id=\"I-HttpClient\"><a href=\"#I-HttpClient\" class=\"headerlink\" title=\"I. HttpClient\"></a>I. HttpClient</h2><blockquote>\n<p>具体实现: <code>DefaultHttpClient</code>、<code>AndroidHtppClient</code></p>\n</blockquote>\n<h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点:\"></a>特点:</h4><p>API数量繁多，官方升级维护较少</p>\n<a id=\"more\"></a>\n<h2 id=\"II-HttpURLConnection\"><a href=\"#II-HttpURLConnection\" class=\"headerlink\" title=\"II. HttpURLConnection\"></a>II. HttpURLConnection</h2><h4 id=\"特点-1\"><a href=\"#特点-1\" class=\"headerlink\" title=\"特点:\"></a>特点:</h4><p>多用途、轻量。API简单，易于使用、拓展。</p>\n<h4 id=\"坑点\"><a href=\"#坑点\" class=\"headerlink\" title=\"坑点:\"></a>坑点:</h4><p>Android 2.2以前: 可读的InputStream调用close时，可能导致连接池失效（通常解决方法禁用连接池功能）。</p>\n<h4 id=\"迭代亮点\"><a href=\"#迭代亮点\" class=\"headerlink\" title=\"迭代亮点:\"></a>迭代亮点:</h4><h5 id=\"Andorid-2-3\"><a href=\"#Andorid-2-3\" class=\"headerlink\" title=\"Andorid 2.3\"></a>Andorid 2.3</h5><ul>\n<li>默认请求接受gzip。</li>\n<li>后会使用SNI(<a href=\"https://en.wikipedia.org/wiki/Server_Name_Indication\" target=\"_blank\" rel=\"external\">Server Name Indication</a>)</li>\n<li>断线重连</li>\n</ul>\n<h5 id=\"Android-4-0\"><a href=\"#Android-4-0\" class=\"headerlink\" title=\"Android 4.0\"></a>Android 4.0</h5><ul>\n<li>响应缓存机制(<code>HttpResponseCache#install</code>):</li>\n</ul>\n<ol>\n<li>都由本地提供的响应，没有必要发起网络连接的请求，都直接从本地缓存直接取得</li>\n<li>视情况而定的缓存响应，由服务器确定(304 Not Modified代表不需要更新，就不会下载任何数据，将直接用本地缓存);</li>\n<li>没有缓存的响应，都由服务器直接下载。</li>\n</ol>\n<h2 id=\"III-选择\"><a href=\"#III-选择\" class=\"headerlink\" title=\"III. 选择\"></a>III. 选择</h2><p>推荐Android 2.2以前使用<code>HttpClient</code>，由于Android 2.2以前的<code>HttpURLConnection</code>存在坑点，而相比而言<code>HttpClient</code>在Android 2.2以前比较稳定。</p>\n<hr>\n<ul>\n<li><a href=\"http://blog.csdn.net/guolin_blog/article/details/12452307\" target=\"_blank\" rel=\"external\">Android访问网络，使用HttpURLConnection还是HttpClient？</a></li>\n<li><a href=\"http://android-developers.blogspot.com/2011/09/androids-http-clients.html\" target=\"_blank\" rel=\"external\">Android’s HTTP Clients</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<h2 id=\"I-HttpClient\"><a href=\"#I-HttpClient\" class=\"headerlink\" title=\"I. HttpClient\"></a>I. HttpClient</h2><blockquote>\n<p>具体实现: <code>DefaultHttpClient</code>、<code>AndroidHtppClient</code></p>\n</blockquote>\n<h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点:\"></a>特点:</h4><p>API数量繁多，官方升级维护较少</p>","more":"<h2 id=\"II-HttpURLConnection\"><a href=\"#II-HttpURLConnection\" class=\"headerlink\" title=\"II. HttpURLConnection\"></a>II. HttpURLConnection</h2><h4 id=\"特点-1\"><a href=\"#特点-1\" class=\"headerlink\" title=\"特点:\"></a>特点:</h4><p>多用途、轻量。API简单，易于使用、拓展。</p>\n<h4 id=\"坑点\"><a href=\"#坑点\" class=\"headerlink\" title=\"坑点:\"></a>坑点:</h4><p>Android 2.2以前: 可读的InputStream调用close时，可能导致连接池失效（通常解决方法禁用连接池功能）。</p>\n<h4 id=\"迭代亮点\"><a href=\"#迭代亮点\" class=\"headerlink\" title=\"迭代亮点:\"></a>迭代亮点:</h4><h5 id=\"Andorid-2-3\"><a href=\"#Andorid-2-3\" class=\"headerlink\" title=\"Andorid 2.3\"></a>Andorid 2.3</h5><ul>\n<li>默认请求接受gzip。</li>\n<li>后会使用SNI(<a href=\"https://en.wikipedia.org/wiki/Server_Name_Indication\">Server Name Indication</a>)</li>\n<li>断线重连</li>\n</ul>\n<h5 id=\"Android-4-0\"><a href=\"#Android-4-0\" class=\"headerlink\" title=\"Android 4.0\"></a>Android 4.0</h5><ul>\n<li>响应缓存机制(<code>HttpResponseCache#install</code>):</li>\n</ul>\n<ol>\n<li>都由本地提供的响应，没有必要发起网络连接的请求，都直接从本地缓存直接取得</li>\n<li>视情况而定的缓存响应，由服务器确定(304 Not Modified代表不需要更新，就不会下载任何数据，将直接用本地缓存);</li>\n<li>没有缓存的响应，都由服务器直接下载。</li>\n</ol>\n<h2 id=\"III-选择\"><a href=\"#III-选择\" class=\"headerlink\" title=\"III. 选择\"></a>III. 选择</h2><p>推荐Android 2.2以前使用<code>HttpClient</code>，由于Android 2.2以前的<code>HttpURLConnection</code>存在坑点，而相比而言<code>HttpClient</code>在Android 2.2以前比较稳定。</p>\n<hr>\n<ul>\n<li><a href=\"http://blog.csdn.net/guolin_blog/article/details/12452307\">Android访问网络，使用HttpURLConnection还是HttpClient？</a></li>\n<li><a href=\"http://android-developers.blogspot.com/2011/09/androids-http-clients.html\">Android’s HTTP Clients</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"Android Handler Looper机制","date":"2016-03-11T06:36:03.000Z","_content":"\n## I. Handler Looper机制\n\n> 整理了半天，还不如画张图来的清晰\n\n<!-- more -->\n\n#### 1. Handler创建所在线程(Looper所在线程)\n\n![](/img/android_handler_looper-1.png)\n\n#### 2. Handler发消息所在线程\n\n![](/img/android_handler_looper-2.png)\n\n### 3. Handler中Message回收机制\n\nMessage中回收用的池子:\n\n> 池子大小50个Message\n\n `sPool:Message`(静态变量)、`next#message`、`sPoolSize:int`(静态变量)、`sPoolSync:Object`(静态常量)形成一个简单的线程安全的先进先出的单向链表作为Message复用的池子。每次`obtain`时，取链表头Message, 标记`flag`为0，返回;`recycle`时，放入链表头。\n\n\n> 记录参数: `Message#flag`， 基于位运算用于记录`FLAG_IN_USE`与`FLAG_ASYNCHRONOUS` (是否使用中 与 是否是是异步消息)\n\n由于对外可见的`recycle`在检测flag的时候有可能会抛crash，因此不得不跟踪flag的变化。\n\n![](/img/android_handler_looper-3.png)\n\n### 4. Handler提供功能\n\n除了常用的`send*`、`post*`、`remove*`以外还有一个`runWithScissors`:\n\n#### `runWithScissors`:\n\n 若是调用线程与Handler的Looper所在线程非同一线程，将通过该方法可以简单的实现timeout，调用以后会block，直到传入的runnable结束或者是timeout，若是timeout，返回false，否则返回true。\n\n#### `asynchronous`:\n\n> @see `MessageQueue#postSyncBarrier`、`MessageQueue#removeSyncBarrier`\n> 案例: View请求启动绘制生命周期: `ViewRootImpl#scheduleTraversals`\n\n![](/img/android_handler_looper-4.png)\n\n1. MessageQueue 从栈底到栈顶按`Message.when`降序排列(相同`Message.when`的先进栈的离栈顶更近)的后进先出的栈(`MessageQueue#enqueueMessage` `MessageQueue#next`)\n2. `barrier`的Message与普通Message的差别是target(类型是Handler)为null，只能通过`MessageQueue#postSyncBarrier`创建 `barrier` Message\n3. `barrier`的Message与普通Message以同样的规则进栈，但是却只能通过 `MessageQueue#removeSyncBarrier`出栈\n4. 每个`barrier`使用独立的token(记录在`Message#arg1`)进行区分\n5. 所有的同步消息(相对与异步消息而言，默认消息都是同步消息)如果`barrier`之后，都会被延后执行，直到调用`MessageQueue#removeSyncBarrier`通过其token将该barrier清除\n6. 当`barrier`在栈顶时，栈中的异步消息照常出栈不受影响\n\n > Handler中的对应构造函数被隐藏，但是可以通过调用`Message#setAsynchronous`指定对应的Message为asynchronous的Message。\n >值得一提的是，部署barrier(`MessageQueue#postSyncBarrier`)与清除barrier(`MessageQueue#removeSyncBarrier`)的相关方法都是对外不可见的。\n\n---\n\n> ps: 关于Handler的外界有效全局控制，我开源了一个库，支持Handler的暂停、恢复等操作: [Jacksgong/MessageHandler](https://github.com/Jacksgong/MessageHandler)\n\n---\n\n## II. 常见异常及原因\n\n```\npublic Handler() {\n    if (FIND_POTENTIAL_LEAKS) {\n        final Class<? extends Handler> klass = getClass();\n        if ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &&\n                (klass.getModifiers() & Modifier.STATIC) == 0) {\n            Log.w(TAG, \"The following Handler class should be static or leaks might occur: \" +\n                klass.getCanonicalName());\n        }\n    }\n    mLooper = Looper.myLooper();\n    if (mLooper == null) {\n        throw new RuntimeException(\n            \"Can't create handler inside thread that has not called Looper.prepare()\");\n    }\n    mQueue = mLooper.mQueue;\n    mCallback = null;\n}\n```\n### 1. 可能导致内存泄漏\n\n> `The following Handler class should be static or leaks might occur: <classCanonicalName>`\n\n#### 原因:\n\n由于`Handler`有可能会被`Looper#mQueue#mMessages#target`引用，而很有可能由于消息还未到达处理的时刻，导致引用会被长期持有，如果`Handler`是一个非静态内部类，就会持有一个外部类实例的引用，进而导致外部类很有可能出现无法及时gc的问题。\n\n#### 通用解决方法:\n\n直接静态化内部类，这样内部类`Handler`就不再持有外部类实例的引用，再在`Handler`的构造函数中以弱引用(当所指实例不存在强引用与软引用后，GC时会自动回弱引用指向的实例)传入外部类供使用即可。\n\n### 2. 所在线程没有调用`Looper.prepare()`\n\n> `Can't create handler inside thread that has not called Looper.prepare()`\n\n#### 原因:\n\n`Looper.prepare()`实际上是创建一个`Looper`传入作为所在线程的局部变量(全局由`ThreadLocal`与`Thread#localValues`来保证，简单参考`ThreadLocal#get`、`ThreadLocal#set`即可理解)，而在真正`Looper#loop`的时候，是需要已所在线程的局部变量的`Looper`为载体取得所有要处理的消息以及处理的方式的。\n\n因此创建`Handler`的同时是需要保证所在线程已经有了局部变量`Looper`的实例，才能保证`Handler`接下来真正运作。\n\n#### 通常解决方法:\n\n在创建`Handler`前，主动调用下`Looper.prepare()`\n\n> ps: 每个线程的的`Looper#prepare`相对所在线程只能被调用一次，否则会报`\"Only one Looper may be created per thread\"`(参见`Looper#prepare`)\n> ps: 之所以主线程直接创建`Handler`不会抛出类似异常，是因为在程序启动时，系统已经帮我们调用了`Looper#prepare`(参见`ActivityThread#main`)\n\n\n---\n\n本文已经发布到JackBlog公众号，可请直接访问: [Android Handler - JacksBlog](https://mp.weixin.qq.com/s?__biz=MzIyMjQxMzAzOA==&mid=2247483661&idx=1&sn=39c0e67abfb50042936f4af9ec985ed8)\n\n---\n\n- [Android异步消息处理机制完全解析，带你从源码的角度彻底理解](http://blog.csdn.net/guolin_blog/article/details/9991569)\n- [Android消息机制不完全解析（上）](http://blog.csdn.net/a220315410/article/details/9857225)\n- [Android消息机制不完全解析（下）](http://blog.csdn.net/a220315410/article/details/10444171)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/android_handler_looper.md","raw":"title: Android Handler Looper机制\ndate: 2016-03-11 14:36:03\npermalink: 2016/03/11/android_handler_looper\ntags:\n- Handler\n- Looper\n- Android\n- 消息机制\n- MessageQueue\n- Barrier\n\n---\n\n## I. Handler Looper机制\n\n> 整理了半天，还不如画张图来的清晰\n\n<!-- more -->\n\n#### 1. Handler创建所在线程(Looper所在线程)\n\n![](/img/android_handler_looper-1.png)\n\n#### 2. Handler发消息所在线程\n\n![](/img/android_handler_looper-2.png)\n\n### 3. Handler中Message回收机制\n\nMessage中回收用的池子:\n\n> 池子大小50个Message\n\n `sPool:Message`(静态变量)、`next#message`、`sPoolSize:int`(静态变量)、`sPoolSync:Object`(静态常量)形成一个简单的线程安全的先进先出的单向链表作为Message复用的池子。每次`obtain`时，取链表头Message, 标记`flag`为0，返回;`recycle`时，放入链表头。\n\n\n> 记录参数: `Message#flag`， 基于位运算用于记录`FLAG_IN_USE`与`FLAG_ASYNCHRONOUS` (是否使用中 与 是否是是异步消息)\n\n由于对外可见的`recycle`在检测flag的时候有可能会抛crash，因此不得不跟踪flag的变化。\n\n![](/img/android_handler_looper-3.png)\n\n### 4. Handler提供功能\n\n除了常用的`send*`、`post*`、`remove*`以外还有一个`runWithScissors`:\n\n#### `runWithScissors`:\n\n 若是调用线程与Handler的Looper所在线程非同一线程，将通过该方法可以简单的实现timeout，调用以后会block，直到传入的runnable结束或者是timeout，若是timeout，返回false，否则返回true。\n\n#### `asynchronous`:\n\n> @see `MessageQueue#postSyncBarrier`、`MessageQueue#removeSyncBarrier`\n> 案例: View请求启动绘制生命周期: `ViewRootImpl#scheduleTraversals`\n\n![](/img/android_handler_looper-4.png)\n\n1. MessageQueue 从栈底到栈顶按`Message.when`降序排列(相同`Message.when`的先进栈的离栈顶更近)的后进先出的栈(`MessageQueue#enqueueMessage` `MessageQueue#next`)\n2. `barrier`的Message与普通Message的差别是target(类型是Handler)为null，只能通过`MessageQueue#postSyncBarrier`创建 `barrier` Message\n3. `barrier`的Message与普通Message以同样的规则进栈，但是却只能通过 `MessageQueue#removeSyncBarrier`出栈\n4. 每个`barrier`使用独立的token(记录在`Message#arg1`)进行区分\n5. 所有的同步消息(相对与异步消息而言，默认消息都是同步消息)如果`barrier`之后，都会被延后执行，直到调用`MessageQueue#removeSyncBarrier`通过其token将该barrier清除\n6. 当`barrier`在栈顶时，栈中的异步消息照常出栈不受影响\n\n > Handler中的对应构造函数被隐藏，但是可以通过调用`Message#setAsynchronous`指定对应的Message为asynchronous的Message。\n >值得一提的是，部署barrier(`MessageQueue#postSyncBarrier`)与清除barrier(`MessageQueue#removeSyncBarrier`)的相关方法都是对外不可见的。\n\n---\n\n> ps: 关于Handler的外界有效全局控制，我开源了一个库，支持Handler的暂停、恢复等操作: [Jacksgong/MessageHandler](https://github.com/Jacksgong/MessageHandler)\n\n---\n\n## II. 常见异常及原因\n\n```\npublic Handler() {\n    if (FIND_POTENTIAL_LEAKS) {\n        final Class<? extends Handler> klass = getClass();\n        if ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &&\n                (klass.getModifiers() & Modifier.STATIC) == 0) {\n            Log.w(TAG, \"The following Handler class should be static or leaks might occur: \" +\n                klass.getCanonicalName());\n        }\n    }\n    mLooper = Looper.myLooper();\n    if (mLooper == null) {\n        throw new RuntimeException(\n            \"Can't create handler inside thread that has not called Looper.prepare()\");\n    }\n    mQueue = mLooper.mQueue;\n    mCallback = null;\n}\n```\n### 1. 可能导致内存泄漏\n\n> `The following Handler class should be static or leaks might occur: <classCanonicalName>`\n\n#### 原因:\n\n由于`Handler`有可能会被`Looper#mQueue#mMessages#target`引用，而很有可能由于消息还未到达处理的时刻，导致引用会被长期持有，如果`Handler`是一个非静态内部类，就会持有一个外部类实例的引用，进而导致外部类很有可能出现无法及时gc的问题。\n\n#### 通用解决方法:\n\n直接静态化内部类，这样内部类`Handler`就不再持有外部类实例的引用，再在`Handler`的构造函数中以弱引用(当所指实例不存在强引用与软引用后，GC时会自动回弱引用指向的实例)传入外部类供使用即可。\n\n### 2. 所在线程没有调用`Looper.prepare()`\n\n> `Can't create handler inside thread that has not called Looper.prepare()`\n\n#### 原因:\n\n`Looper.prepare()`实际上是创建一个`Looper`传入作为所在线程的局部变量(全局由`ThreadLocal`与`Thread#localValues`来保证，简单参考`ThreadLocal#get`、`ThreadLocal#set`即可理解)，而在真正`Looper#loop`的时候，是需要已所在线程的局部变量的`Looper`为载体取得所有要处理的消息以及处理的方式的。\n\n因此创建`Handler`的同时是需要保证所在线程已经有了局部变量`Looper`的实例，才能保证`Handler`接下来真正运作。\n\n#### 通常解决方法:\n\n在创建`Handler`前，主动调用下`Looper.prepare()`\n\n> ps: 每个线程的的`Looper#prepare`相对所在线程只能被调用一次，否则会报`\"Only one Looper may be created per thread\"`(参见`Looper#prepare`)\n> ps: 之所以主线程直接创建`Handler`不会抛出类似异常，是因为在程序启动时，系统已经帮我们调用了`Looper#prepare`(参见`ActivityThread#main`)\n\n\n---\n\n本文已经发布到JackBlog公众号，可请直接访问: [Android Handler - JacksBlog](https://mp.weixin.qq.com/s?__biz=MzIyMjQxMzAzOA==&mid=2247483661&idx=1&sn=39c0e67abfb50042936f4af9ec985ed8)\n\n---\n\n- [Android异步消息处理机制完全解析，带你从源码的角度彻底理解](http://blog.csdn.net/guolin_blog/article/details/9991569)\n- [Android消息机制不完全解析（上）](http://blog.csdn.net/a220315410/article/details/9857225)\n- [Android消息机制不完全解析（下）](http://blog.csdn.net/a220315410/article/details/10444171)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2016/03/11/android_handler_looper","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66if001u95budew4giox","content":"<h2 id=\"I-Handler-Looper机制\"><a href=\"#I-Handler-Looper机制\" class=\"headerlink\" title=\"I. Handler Looper机制\"></a>I. Handler Looper机制</h2><blockquote>\n<p>整理了半天，还不如画张图来的清晰</p>\n</blockquote>\n<a id=\"more\"></a>\n<h4 id=\"1-Handler创建所在线程-Looper所在线程\"><a href=\"#1-Handler创建所在线程-Looper所在线程\" class=\"headerlink\" title=\"1. Handler创建所在线程(Looper所在线程)\"></a>1. Handler创建所在线程(Looper所在线程)</h4><p><img src=\"/img/android_handler_looper-1.png\" alt=\"\"></p>\n<h4 id=\"2-Handler发消息所在线程\"><a href=\"#2-Handler发消息所在线程\" class=\"headerlink\" title=\"2. Handler发消息所在线程\"></a>2. Handler发消息所在线程</h4><p><img src=\"/img/android_handler_looper-2.png\" alt=\"\"></p>\n<h3 id=\"3-Handler中Message回收机制\"><a href=\"#3-Handler中Message回收机制\" class=\"headerlink\" title=\"3. Handler中Message回收机制\"></a>3. Handler中Message回收机制</h3><p>Message中回收用的池子:</p>\n<blockquote>\n<p>池子大小50个Message</p>\n</blockquote>\n<p> <code>sPool:Message</code>(静态变量)、<code>next#message</code>、<code>sPoolSize:int</code>(静态变量)、<code>sPoolSync:Object</code>(静态常量)形成一个简单的线程安全的先进先出的单向链表作为Message复用的池子。每次<code>obtain</code>时，取链表头Message, 标记<code>flag</code>为0，返回;<code>recycle</code>时，放入链表头。</p>\n<blockquote>\n<p>记录参数: <code>Message#flag</code>， 基于位运算用于记录<code>FLAG_IN_USE</code>与<code>FLAG_ASYNCHRONOUS</code> (是否使用中 与 是否是是异步消息)</p>\n</blockquote>\n<p>由于对外可见的<code>recycle</code>在检测flag的时候有可能会抛crash，因此不得不跟踪flag的变化。</p>\n<p><img src=\"/img/android_handler_looper-3.png\" alt=\"\"></p>\n<h3 id=\"4-Handler提供功能\"><a href=\"#4-Handler提供功能\" class=\"headerlink\" title=\"4. Handler提供功能\"></a>4. Handler提供功能</h3><p>除了常用的<code>send*</code>、<code>post*</code>、<code>remove*</code>以外还有一个<code>runWithScissors</code>:</p>\n<h4 id=\"runWithScissors\"><a href=\"#runWithScissors\" class=\"headerlink\" title=\"runWithScissors:\"></a><code>runWithScissors</code>:</h4><p> 若是调用线程与Handler的Looper所在线程非同一线程，将通过该方法可以简单的实现timeout，调用以后会block，直到传入的runnable结束或者是timeout，若是timeout，返回false，否则返回true。</p>\n<h4 id=\"asynchronous\"><a href=\"#asynchronous\" class=\"headerlink\" title=\"asynchronous:\"></a><code>asynchronous</code>:</h4><blockquote>\n<p>@see <code>MessageQueue#postSyncBarrier</code>、<code>MessageQueue#removeSyncBarrier</code><br>案例: View请求启动绘制生命周期: <code>ViewRootImpl#scheduleTraversals</code></p>\n</blockquote>\n<p><img src=\"/img/android_handler_looper-4.png\" alt=\"\"></p>\n<ol>\n<li>MessageQueue 从栈底到栈顶按<code>Message.when</code>降序排列(相同<code>Message.when</code>的先进栈的离栈顶更近)的后进先出的栈(<code>MessageQueue#enqueueMessage</code> <code>MessageQueue#next</code>)</li>\n<li><code>barrier</code>的Message与普通Message的差别是target(类型是Handler)为null，只能通过<code>MessageQueue#postSyncBarrier</code>创建 <code>barrier</code> Message</li>\n<li><code>barrier</code>的Message与普通Message以同样的规则进栈，但是却只能通过 <code>MessageQueue#removeSyncBarrier</code>出栈</li>\n<li>每个<code>barrier</code>使用独立的token(记录在<code>Message#arg1</code>)进行区分</li>\n<li>所有的同步消息(相对与异步消息而言，默认消息都是同步消息)如果<code>barrier</code>之后，都会被延后执行，直到调用<code>MessageQueue#removeSyncBarrier</code>通过其token将该barrier清除</li>\n<li><p>当<code>barrier</code>在栈顶时，栈中的异步消息照常出栈不受影响</p>\n<blockquote>\n<p>Handler中的对应构造函数被隐藏，但是可以通过调用<code>Message#setAsynchronous</code>指定对应的Message为asynchronous的Message。<br>值得一提的是，部署barrier(<code>MessageQueue#postSyncBarrier</code>)与清除barrier(<code>MessageQueue#removeSyncBarrier</code>)的相关方法都是对外不可见的。</p>\n</blockquote>\n</li>\n</ol>\n<hr>\n<blockquote>\n<p>ps: 关于Handler的外界有效全局控制，我开源了一个库，支持Handler的暂停、恢复等操作: <a href=\"https://github.com/Jacksgong/MessageHandler\" target=\"_blank\" rel=\"external\">Jacksgong/MessageHandler</a></p>\n</blockquote>\n<hr>\n<h2 id=\"II-常见异常及原因\"><a href=\"#II-常见异常及原因\" class=\"headerlink\" title=\"II. 常见异常及原因\"></a>II. 常见异常及原因</h2><figure class=\"highlight monkey\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> Handler() &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (FIND_POTENTIAL_LEAKS) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">Class</span>&lt;? <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span>&gt; <span class=\"title\">klass</span> = <span class=\"title\">getClass</span>();</span></div><div class=\"line\">        <span class=\"keyword\">if</span> ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &amp;&amp;</div><div class=\"line\">                (klass.getModifiers() &amp; Modifier.STATIC) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"built_in\">Log</span>.w(TAG, <span class=\"string\">\"The following Handler class should be static or leaks might occur: \"</span> +</div><div class=\"line\">                klass.getCanonicalName());</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    mLooper = Looper.myLooper();</div><div class=\"line\">    <span class=\"keyword\">if</span> (mLooper == <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(</div><div class=\"line\">            <span class=\"string\">\"Can't create handler inside thread that has not called Looper.prepare()\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    mQueue = mLooper.mQueue;</div><div class=\"line\">    mCallback = <span class=\"literal\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"1-可能导致内存泄漏\"><a href=\"#1-可能导致内存泄漏\" class=\"headerlink\" title=\"1. 可能导致内存泄漏\"></a>1. 可能导致内存泄漏</h3><blockquote>\n<p><code>The following Handler class should be static or leaks might occur: &lt;classCanonicalName&gt;</code></p>\n</blockquote>\n<h4 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因:\"></a>原因:</h4><p>由于<code>Handler</code>有可能会被<code>Looper#mQueue#mMessages#target</code>引用，而很有可能由于消息还未到达处理的时刻，导致引用会被长期持有，如果<code>Handler</code>是一个非静态内部类，就会持有一个外部类实例的引用，进而导致外部类很有可能出现无法及时gc的问题。</p>\n<h4 id=\"通用解决方法\"><a href=\"#通用解决方法\" class=\"headerlink\" title=\"通用解决方法:\"></a>通用解决方法:</h4><p>直接静态化内部类，这样内部类<code>Handler</code>就不再持有外部类实例的引用，再在<code>Handler</code>的构造函数中以弱引用(当所指实例不存在强引用与软引用后，GC时会自动回弱引用指向的实例)传入外部类供使用即可。</p>\n<h3 id=\"2-所在线程没有调用Looper-prepare\"><a href=\"#2-所在线程没有调用Looper-prepare\" class=\"headerlink\" title=\"2. 所在线程没有调用Looper.prepare()\"></a>2. 所在线程没有调用<code>Looper.prepare()</code></h3><blockquote>\n<p><code>Can&#39;t create handler inside thread that has not called Looper.prepare()</code></p>\n</blockquote>\n<h4 id=\"原因-1\"><a href=\"#原因-1\" class=\"headerlink\" title=\"原因:\"></a>原因:</h4><p><code>Looper.prepare()</code>实际上是创建一个<code>Looper</code>传入作为所在线程的局部变量(全局由<code>ThreadLocal</code>与<code>Thread#localValues</code>来保证，简单参考<code>ThreadLocal#get</code>、<code>ThreadLocal#set</code>即可理解)，而在真正<code>Looper#loop</code>的时候，是需要已所在线程的局部变量的<code>Looper</code>为载体取得所有要处理的消息以及处理的方式的。</p>\n<p>因此创建<code>Handler</code>的同时是需要保证所在线程已经有了局部变量<code>Looper</code>的实例，才能保证<code>Handler</code>接下来真正运作。</p>\n<h4 id=\"通常解决方法\"><a href=\"#通常解决方法\" class=\"headerlink\" title=\"通常解决方法:\"></a>通常解决方法:</h4><p>在创建<code>Handler</code>前，主动调用下<code>Looper.prepare()</code></p>\n<blockquote>\n<p>ps: 每个线程的的<code>Looper#prepare</code>相对所在线程只能被调用一次，否则会报<code>&quot;Only one Looper may be created per thread&quot;</code>(参见<code>Looper#prepare</code>)<br>ps: 之所以主线程直接创建<code>Handler</code>不会抛出类似异常，是因为在程序启动时，系统已经帮我们调用了<code>Looper#prepare</code>(参见<code>ActivityThread#main</code>)</p>\n</blockquote>\n<hr>\n<p>本文已经发布到JackBlog公众号，可请直接访问: <a href=\"https://mp.weixin.qq.com/s?__biz=MzIyMjQxMzAzOA==&amp;mid=2247483661&amp;idx=1&amp;sn=39c0e67abfb50042936f4af9ec985ed8\" target=\"_blank\" rel=\"external\">Android Handler - JacksBlog</a></p>\n<hr>\n<ul>\n<li><a href=\"http://blog.csdn.net/guolin_blog/article/details/9991569\" target=\"_blank\" rel=\"external\">Android异步消息处理机制完全解析，带你从源码的角度彻底理解</a></li>\n<li><a href=\"http://blog.csdn.net/a220315410/article/details/9857225\" target=\"_blank\" rel=\"external\">Android消息机制不完全解析（上）</a></li>\n<li><a href=\"http://blog.csdn.net/a220315410/article/details/10444171\" target=\"_blank\" rel=\"external\">Android消息机制不完全解析（下）</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<h2 id=\"I-Handler-Looper机制\"><a href=\"#I-Handler-Looper机制\" class=\"headerlink\" title=\"I. Handler Looper机制\"></a>I. Handler Looper机制</h2><blockquote>\n<p>整理了半天，还不如画张图来的清晰</p>\n</blockquote>","more":"<h4 id=\"1-Handler创建所在线程-Looper所在线程\"><a href=\"#1-Handler创建所在线程-Looper所在线程\" class=\"headerlink\" title=\"1. Handler创建所在线程(Looper所在线程)\"></a>1. Handler创建所在线程(Looper所在线程)</h4><p><img src=\"/img/android_handler_looper-1.png\" alt=\"\"></p>\n<h4 id=\"2-Handler发消息所在线程\"><a href=\"#2-Handler发消息所在线程\" class=\"headerlink\" title=\"2. Handler发消息所在线程\"></a>2. Handler发消息所在线程</h4><p><img src=\"/img/android_handler_looper-2.png\" alt=\"\"></p>\n<h3 id=\"3-Handler中Message回收机制\"><a href=\"#3-Handler中Message回收机制\" class=\"headerlink\" title=\"3. Handler中Message回收机制\"></a>3. Handler中Message回收机制</h3><p>Message中回收用的池子:</p>\n<blockquote>\n<p>池子大小50个Message</p>\n</blockquote>\n<p> <code>sPool:Message</code>(静态变量)、<code>next#message</code>、<code>sPoolSize:int</code>(静态变量)、<code>sPoolSync:Object</code>(静态常量)形成一个简单的线程安全的先进先出的单向链表作为Message复用的池子。每次<code>obtain</code>时，取链表头Message, 标记<code>flag</code>为0，返回;<code>recycle</code>时，放入链表头。</p>\n<blockquote>\n<p>记录参数: <code>Message#flag</code>， 基于位运算用于记录<code>FLAG_IN_USE</code>与<code>FLAG_ASYNCHRONOUS</code> (是否使用中 与 是否是是异步消息)</p>\n</blockquote>\n<p>由于对外可见的<code>recycle</code>在检测flag的时候有可能会抛crash，因此不得不跟踪flag的变化。</p>\n<p><img src=\"/img/android_handler_looper-3.png\" alt=\"\"></p>\n<h3 id=\"4-Handler提供功能\"><a href=\"#4-Handler提供功能\" class=\"headerlink\" title=\"4. Handler提供功能\"></a>4. Handler提供功能</h3><p>除了常用的<code>send*</code>、<code>post*</code>、<code>remove*</code>以外还有一个<code>runWithScissors</code>:</p>\n<h4 id=\"runWithScissors\"><a href=\"#runWithScissors\" class=\"headerlink\" title=\"runWithScissors:\"></a><code>runWithScissors</code>:</h4><p> 若是调用线程与Handler的Looper所在线程非同一线程，将通过该方法可以简单的实现timeout，调用以后会block，直到传入的runnable结束或者是timeout，若是timeout，返回false，否则返回true。</p>\n<h4 id=\"asynchronous\"><a href=\"#asynchronous\" class=\"headerlink\" title=\"asynchronous:\"></a><code>asynchronous</code>:</h4><blockquote>\n<p>@see <code>MessageQueue#postSyncBarrier</code>、<code>MessageQueue#removeSyncBarrier</code><br>案例: View请求启动绘制生命周期: <code>ViewRootImpl#scheduleTraversals</code></p>\n</blockquote>\n<p><img src=\"/img/android_handler_looper-4.png\" alt=\"\"></p>\n<ol>\n<li>MessageQueue 从栈底到栈顶按<code>Message.when</code>降序排列(相同<code>Message.when</code>的先进栈的离栈顶更近)的后进先出的栈(<code>MessageQueue#enqueueMessage</code> <code>MessageQueue#next</code>)</li>\n<li><code>barrier</code>的Message与普通Message的差别是target(类型是Handler)为null，只能通过<code>MessageQueue#postSyncBarrier</code>创建 <code>barrier</code> Message</li>\n<li><code>barrier</code>的Message与普通Message以同样的规则进栈，但是却只能通过 <code>MessageQueue#removeSyncBarrier</code>出栈</li>\n<li>每个<code>barrier</code>使用独立的token(记录在<code>Message#arg1</code>)进行区分</li>\n<li>所有的同步消息(相对与异步消息而言，默认消息都是同步消息)如果<code>barrier</code>之后，都会被延后执行，直到调用<code>MessageQueue#removeSyncBarrier</code>通过其token将该barrier清除</li>\n<li><p>当<code>barrier</code>在栈顶时，栈中的异步消息照常出栈不受影响</p>\n<blockquote>\n<p>Handler中的对应构造函数被隐藏，但是可以通过调用<code>Message#setAsynchronous</code>指定对应的Message为asynchronous的Message。<br>值得一提的是，部署barrier(<code>MessageQueue#postSyncBarrier</code>)与清除barrier(<code>MessageQueue#removeSyncBarrier</code>)的相关方法都是对外不可见的。</p>\n</blockquote>\n</li>\n</ol>\n<hr>\n<blockquote>\n<p>ps: 关于Handler的外界有效全局控制，我开源了一个库，支持Handler的暂停、恢复等操作: <a href=\"https://github.com/Jacksgong/MessageHandler\">Jacksgong/MessageHandler</a></p>\n</blockquote>\n<hr>\n<h2 id=\"II-常见异常及原因\"><a href=\"#II-常见异常及原因\" class=\"headerlink\" title=\"II. 常见异常及原因\"></a>II. 常见异常及原因</h2><figure class=\"highlight monkey\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> Handler() &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (FIND_POTENTIAL_LEAKS) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">Class</span>&lt;? <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span>&gt; <span class=\"title\">klass</span> = <span class=\"title\">getClass</span>();</span></div><div class=\"line\">        <span class=\"keyword\">if</span> ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &amp;&amp;</div><div class=\"line\">                (klass.getModifiers() &amp; Modifier.STATIC) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"built_in\">Log</span>.w(TAG, <span class=\"string\">\"The following Handler class should be static or leaks might occur: \"</span> +</div><div class=\"line\">                klass.getCanonicalName());</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    mLooper = Looper.myLooper();</div><div class=\"line\">    <span class=\"keyword\">if</span> (mLooper == <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(</div><div class=\"line\">            <span class=\"string\">\"Can't create handler inside thread that has not called Looper.prepare()\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    mQueue = mLooper.mQueue;</div><div class=\"line\">    mCallback = <span class=\"literal\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"1-可能导致内存泄漏\"><a href=\"#1-可能导致内存泄漏\" class=\"headerlink\" title=\"1. 可能导致内存泄漏\"></a>1. 可能导致内存泄漏</h3><blockquote>\n<p><code>The following Handler class should be static or leaks might occur: &lt;classCanonicalName&gt;</code></p>\n</blockquote>\n<h4 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因:\"></a>原因:</h4><p>由于<code>Handler</code>有可能会被<code>Looper#mQueue#mMessages#target</code>引用，而很有可能由于消息还未到达处理的时刻，导致引用会被长期持有，如果<code>Handler</code>是一个非静态内部类，就会持有一个外部类实例的引用，进而导致外部类很有可能出现无法及时gc的问题。</p>\n<h4 id=\"通用解决方法\"><a href=\"#通用解决方法\" class=\"headerlink\" title=\"通用解决方法:\"></a>通用解决方法:</h4><p>直接静态化内部类，这样内部类<code>Handler</code>就不再持有外部类实例的引用，再在<code>Handler</code>的构造函数中以弱引用(当所指实例不存在强引用与软引用后，GC时会自动回弱引用指向的实例)传入外部类供使用即可。</p>\n<h3 id=\"2-所在线程没有调用Looper-prepare\"><a href=\"#2-所在线程没有调用Looper-prepare\" class=\"headerlink\" title=\"2. 所在线程没有调用Looper.prepare()\"></a>2. 所在线程没有调用<code>Looper.prepare()</code></h3><blockquote>\n<p><code>Can&#39;t create handler inside thread that has not called Looper.prepare()</code></p>\n</blockquote>\n<h4 id=\"原因-1\"><a href=\"#原因-1\" class=\"headerlink\" title=\"原因:\"></a>原因:</h4><p><code>Looper.prepare()</code>实际上是创建一个<code>Looper</code>传入作为所在线程的局部变量(全局由<code>ThreadLocal</code>与<code>Thread#localValues</code>来保证，简单参考<code>ThreadLocal#get</code>、<code>ThreadLocal#set</code>即可理解)，而在真正<code>Looper#loop</code>的时候，是需要已所在线程的局部变量的<code>Looper</code>为载体取得所有要处理的消息以及处理的方式的。</p>\n<p>因此创建<code>Handler</code>的同时是需要保证所在线程已经有了局部变量<code>Looper</code>的实例，才能保证<code>Handler</code>接下来真正运作。</p>\n<h4 id=\"通常解决方法\"><a href=\"#通常解决方法\" class=\"headerlink\" title=\"通常解决方法:\"></a>通常解决方法:</h4><p>在创建<code>Handler</code>前，主动调用下<code>Looper.prepare()</code></p>\n<blockquote>\n<p>ps: 每个线程的的<code>Looper#prepare</code>相对所在线程只能被调用一次，否则会报<code>&quot;Only one Looper may be created per thread&quot;</code>(参见<code>Looper#prepare</code>)<br>ps: 之所以主线程直接创建<code>Handler</code>不会抛出类似异常，是因为在程序启动时，系统已经帮我们调用了<code>Looper#prepare</code>(参见<code>ActivityThread#main</code>)</p>\n</blockquote>\n<hr>\n<p>本文已经发布到JackBlog公众号，可请直接访问: <a href=\"https://mp.weixin.qq.com/s?__biz=MzIyMjQxMzAzOA==&amp;mid=2247483661&amp;idx=1&amp;sn=39c0e67abfb50042936f4af9ec985ed8\">Android Handler - JacksBlog</a></p>\n<hr>\n<ul>\n<li><a href=\"http://blog.csdn.net/guolin_blog/article/details/9991569\">Android异步消息处理机制完全解析，带你从源码的角度彻底理解</a></li>\n<li><a href=\"http://blog.csdn.net/a220315410/article/details/9857225\">Android消息机制不完全解析（上）</a></li>\n<li><a href=\"http://blog.csdn.net/a220315410/article/details/10444171\">Android消息机制不完全解析（下）</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"Android Binder IPC机制","date":"2015-11-25T15:54:03.000Z","_content":"\n> IPC方式之一。\n> 由OpenBinder演化而来。\n> 类似于COM和CORBA分布式组件架构。\n\n<!-- more -->\n\n## I. 出现原因:\n\n- C/S通信模式（除Binder外只有socket支持CS）。\n- 有更好的传输性能(1.管道和消息队列，基于存储转发，至少需要两次拷贝; 2.内存共享没有拷贝但是控制机制复杂(多进程pid校验以及多种机制协作))。\n- 安全性更好。\n\n#### 1. CS通信方式\n\n> Binder采用Client-Server(文中简称CS)方式。\n\nlinux支持通信方式: 消息队列/共享内存/信号量/socket，其中只有socket支持CS。\n\n\n#### 2. 传输性能\n\nIPC | 特征 | 拷贝次数 | 特点\n:-: | :-: | :-: | :-\n共享内存 | 控制复杂 | 0 | 极少用\nBinder | 简单通用安全|  1 | Android中常用，性能高\nSocket/管道/消息队列 | A中缓冲区 --(存储)--> 内核缓冲区 --(转发)--> B中缓冲区 | 2 | socket作为通用接口，传输效率低，开销大，一般用于跨网络的IPC/进程间低速IPC\n\n#### 3. 安全\n\n> 基于Android本身为每个应用分配了独立的UID，使用UID&PID作为进程身份标志\n\n- 传统IPC依赖上层协议确保传入UID，十分危险，Binder支持实名(自身在内核中添加，安全可靠)也支持匿名。\n- 传统IPC访问接入点(管道名/system V键值/socket ip地址/文件名)是开放的，无法建立私有通道。\n\n#### 4. 面向对象，敏捷开发\n\nBinder有意模糊了进程边界。在默认的IPC过程中，调用方进程中所在调用接口的线程会被block住等待接口的处理返回，仿佛就在同一个进程中调用接口方法。\n\n## II. 特征\n\n- 不同的应用之间可以通过Binder进行IPC(调用Stub中的相关方法)，只需要在对应的Stub中，复写`onTransact`方法，根据调用者的uid来做权限认证，返回`true`，让其调用成功，否则调用失败。\n- 几乎所有系统服务都是通过Binder进行通信: `Telephone`、`Vibrator`、`Wifi`、`Battery`、`Notification`等。\n- 几乎所有系统架构都是基于Binder进行通信: `Intent`、`Content Provider`、`Messager`、ActivityManagerServer中处理的各种生命周期(`onStart()`、`onResume()`...)。\n\n### III. 原理\n\nBinder相比一般的IPC而言，只需要一次内存拷贝即可实现数据传递，而这一特性与Binder的实现原理密不可分。\n\n\n> 同一个物理页面，一方映射到进程虚拟地址空间，一方面映射到内核虚拟地址空间，这样通过指向同一个物理页面的方式，进程和内核之间就可以减少一次内存拷贝。\n\n推荐结合老罗在[浅谈Service Manager成为Android进程间通信（IPC）机制Binder守护进程之路](http://blog.csdn.net/luoshengyang/article/details/6621566) 提到的源码一起分析。\n\n#### 1. Binder驱动程序\n\n- **所在空间**: 内核空间。\n- **基本功能**: 提供/dev/binder与用户空间交互。\n\n> 这块也可以结合ActivityManagerService在Activity启动过程中绑定Binder的流程: [ActivityManagerService](http://blog.dreamtobe.cn/2015/11/26/activitymanagerservice/)\n\n##### 设备文件\n\n> `/dev/binder`\n\n在Binder驱动程序模块初始化时创建的。\n\n##### 主入口循环对象\n\n> `bs:binder_state`\n\n句柄为0\n\n##### 文件描述符\n\n> `bs->fd`\n\n打开`/dev/binder`以后获得(对应Binder驱动程序的`binder_open`函数)。\n\n- `O_RDWR/filp`: 类型(file)。\n- `filp->private_data`: 类型(binder_proc), 会保存打开设备文件`/dev/binder`的进程的上下文信息。\n- 结构`binder_procs`: 全局哈希表(驱动程序内部使用)。\n\n##### 起始地址映射\n\n> `bs->mapped`\n\n把设备文件`/dev/binder`映射到进程空间的起始地址(对应Binder驱动程序的`binder_mmap`函数)。\n\n> 这也是Binder只需要一次拷贝的核心机制: `vma:vm_area_struct`(给进程使用的虚拟地址)与`area:vm_struct`(给内核使用的虚拟地址): 映射了同一个物理页面。\n\n- `filp->private_data->vima`: 类型(vm_area_struct), 映射进程使用的虚拟地址。\n- `filp->private_data->buffer`: 类型(area->addr), 映射要映射的物理内存在内核空间的起始位置。\n- `filp->private_data->buffer_size`: 类型(size_t), 要映射的物理内存在内核空间的长度。\n- `area`: 类型(vm_struct), 给内核使用的虚拟地址。\n- `vma`: 类型(vm_area_struct), 给进程使用的虚拟地址。\n\n\n#### 2. Service Manager\n\n- **所在空间**: 用户空间。\n- **基本功能**: 辅助, Binder机制的守护进程用于管理Server、向Client提供查询Server远程接口。\n\n##### 角色:\n\n- Binder机制的守护进程。\n- 特殊Server: 启动以后进入无穷循环充当Server，等待Client请求; 特殊之处: 句柄为0(Binder通信机制使用句柄代表远程接口)，其余Server的句柄值皆大于0(由Binder驱动程序自动分配)。\n\n##### 功能:\n\n> 需要和Server已经Client通信。\n> PS: Server、Client、ServiceManager分别在不同进程。\n\n- 管理开发者创建的各种Server。\n- 向Client提供查询Server远程接口。\n\n##### 启动执行步骤\n\n1. 打开`/dev/binder`文件: `bs->fd = open(\"/dev/binder\", O_RDWR);`\n2. 建立128K内存映射: `bs->mapped = mmap(NULL, mapsize, PROT_READ, MAP_PRIVATE, bs->fd, 0);`\n3. 通知Binder驱动程序它是守护进程: `binder_become_context_manager(bs);`\n4. 进入循环等待请求的到来: `binder_loop(bs, svcmgr_handler);`(此处句柄`svcmgr_handler = BINDER_SERVICE_MANAGER = 0()`)\n\n#### 3. Client与Server\n\n> 对于应用开发者而言，直接接触的是这两Binder架构中的组件。\n\n- **所在空间**: 用户空间。\n- **基本功能**: 应用开发人员实现。\n\n##### 通信过程中线程关系\n\n> Client - Proxies (封装调用方法，将对象转为系统可读): 提交处理给Binder内核驱动并且block住 ||| Service - Stubs(Listens): 监听Binder内核驱动并且基于接收的回调反序列化为对象。\n\n> 如果不想被block住，可以通过`IBinder.FLAG_ONEWAY`标记，将会立马完成返回空数据。\n\n##### Client 与 Service通信\n\nClient - `transact()`(block client thread by default) -> Service - `onTransact()`(这个方法在Binder线程执行执行，完成后，unblock client thread)。\n\n> 执行`onTransact()`的Binder线程池最大活动线程数量: 16\n\n![](https://sujaiantony.files.wordpress.com/2011/12/binder_commn.png)\n(图片来自:[An Android 101](https://sujaiantony.wordpress.com/2011/12/28/an-android-101-an-overview-on-binder-framework/))\n\n\n##### Service 与 Client通信\n\nService - `onTransact()` -> Client - transaction (transaction, 在binder thread)。\n\n> The client will receive the transaction in the thread waiting for the first transaction to be finished rather than a binder thread.\n\n---\n\n本文已经发布到JackBlog公众号，可请直接访问: [Android Binder IPC机制 - JacksBlog](https://mp.weixin.qq.com/s?__biz=MzIyMjQxMzAzOA==&mid=2247483670&idx=1&sn=d9124d91d37fa1ecaf131238bda3fb94)\n\n---\n\n- [Android Binder设计与实现](http://blog.csdn.net/universus/article/details/6211589)\n- [快速简单Demo](http://blog.csdn.net/singwhatiwanna/article/details/17041691)\n- [浅谈Service Manager成为Android进程间通信（IPC）机制Binder守护进程之路](http://blog.csdn.net/luoshengyang/article/details/6621566)\n- [Android进程间通信（IPC）机制Binder简要介绍和学习计划](http://blog.csdn.net/luoshengyang/article/details/6618363)\n- [An Overview of Android Binder Framework](http://codetheory.in/an-overview-of-android-binder-framework/)\n- [An Android 101 : An overview on Binder framework.](https://sujaiantony.wordpress.com/2011/12/28/an-android-101-an-overview-on-binder-framework/)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/android_multiply_process.md","raw":"title: Android Binder IPC机制\ndate: 2015-11-25 23:54:03\npermalink: 2015/11/25/android_multiply_process\ntags:\n- Android\n- 多进程\n- Binder\n- ServiceManager\n\n---\n\n> IPC方式之一。\n> 由OpenBinder演化而来。\n> 类似于COM和CORBA分布式组件架构。\n\n<!-- more -->\n\n## I. 出现原因:\n\n- C/S通信模式（除Binder外只有socket支持CS）。\n- 有更好的传输性能(1.管道和消息队列，基于存储转发，至少需要两次拷贝; 2.内存共享没有拷贝但是控制机制复杂(多进程pid校验以及多种机制协作))。\n- 安全性更好。\n\n#### 1. CS通信方式\n\n> Binder采用Client-Server(文中简称CS)方式。\n\nlinux支持通信方式: 消息队列/共享内存/信号量/socket，其中只有socket支持CS。\n\n\n#### 2. 传输性能\n\nIPC | 特征 | 拷贝次数 | 特点\n:-: | :-: | :-: | :-\n共享内存 | 控制复杂 | 0 | 极少用\nBinder | 简单通用安全|  1 | Android中常用，性能高\nSocket/管道/消息队列 | A中缓冲区 --(存储)--> 内核缓冲区 --(转发)--> B中缓冲区 | 2 | socket作为通用接口，传输效率低，开销大，一般用于跨网络的IPC/进程间低速IPC\n\n#### 3. 安全\n\n> 基于Android本身为每个应用分配了独立的UID，使用UID&PID作为进程身份标志\n\n- 传统IPC依赖上层协议确保传入UID，十分危险，Binder支持实名(自身在内核中添加，安全可靠)也支持匿名。\n- 传统IPC访问接入点(管道名/system V键值/socket ip地址/文件名)是开放的，无法建立私有通道。\n\n#### 4. 面向对象，敏捷开发\n\nBinder有意模糊了进程边界。在默认的IPC过程中，调用方进程中所在调用接口的线程会被block住等待接口的处理返回，仿佛就在同一个进程中调用接口方法。\n\n## II. 特征\n\n- 不同的应用之间可以通过Binder进行IPC(调用Stub中的相关方法)，只需要在对应的Stub中，复写`onTransact`方法，根据调用者的uid来做权限认证，返回`true`，让其调用成功，否则调用失败。\n- 几乎所有系统服务都是通过Binder进行通信: `Telephone`、`Vibrator`、`Wifi`、`Battery`、`Notification`等。\n- 几乎所有系统架构都是基于Binder进行通信: `Intent`、`Content Provider`、`Messager`、ActivityManagerServer中处理的各种生命周期(`onStart()`、`onResume()`...)。\n\n### III. 原理\n\nBinder相比一般的IPC而言，只需要一次内存拷贝即可实现数据传递，而这一特性与Binder的实现原理密不可分。\n\n\n> 同一个物理页面，一方映射到进程虚拟地址空间，一方面映射到内核虚拟地址空间，这样通过指向同一个物理页面的方式，进程和内核之间就可以减少一次内存拷贝。\n\n推荐结合老罗在[浅谈Service Manager成为Android进程间通信（IPC）机制Binder守护进程之路](http://blog.csdn.net/luoshengyang/article/details/6621566) 提到的源码一起分析。\n\n#### 1. Binder驱动程序\n\n- **所在空间**: 内核空间。\n- **基本功能**: 提供/dev/binder与用户空间交互。\n\n> 这块也可以结合ActivityManagerService在Activity启动过程中绑定Binder的流程: [ActivityManagerService](http://blog.dreamtobe.cn/2015/11/26/activitymanagerservice/)\n\n##### 设备文件\n\n> `/dev/binder`\n\n在Binder驱动程序模块初始化时创建的。\n\n##### 主入口循环对象\n\n> `bs:binder_state`\n\n句柄为0\n\n##### 文件描述符\n\n> `bs->fd`\n\n打开`/dev/binder`以后获得(对应Binder驱动程序的`binder_open`函数)。\n\n- `O_RDWR/filp`: 类型(file)。\n- `filp->private_data`: 类型(binder_proc), 会保存打开设备文件`/dev/binder`的进程的上下文信息。\n- 结构`binder_procs`: 全局哈希表(驱动程序内部使用)。\n\n##### 起始地址映射\n\n> `bs->mapped`\n\n把设备文件`/dev/binder`映射到进程空间的起始地址(对应Binder驱动程序的`binder_mmap`函数)。\n\n> 这也是Binder只需要一次拷贝的核心机制: `vma:vm_area_struct`(给进程使用的虚拟地址)与`area:vm_struct`(给内核使用的虚拟地址): 映射了同一个物理页面。\n\n- `filp->private_data->vima`: 类型(vm_area_struct), 映射进程使用的虚拟地址。\n- `filp->private_data->buffer`: 类型(area->addr), 映射要映射的物理内存在内核空间的起始位置。\n- `filp->private_data->buffer_size`: 类型(size_t), 要映射的物理内存在内核空间的长度。\n- `area`: 类型(vm_struct), 给内核使用的虚拟地址。\n- `vma`: 类型(vm_area_struct), 给进程使用的虚拟地址。\n\n\n#### 2. Service Manager\n\n- **所在空间**: 用户空间。\n- **基本功能**: 辅助, Binder机制的守护进程用于管理Server、向Client提供查询Server远程接口。\n\n##### 角色:\n\n- Binder机制的守护进程。\n- 特殊Server: 启动以后进入无穷循环充当Server，等待Client请求; 特殊之处: 句柄为0(Binder通信机制使用句柄代表远程接口)，其余Server的句柄值皆大于0(由Binder驱动程序自动分配)。\n\n##### 功能:\n\n> 需要和Server已经Client通信。\n> PS: Server、Client、ServiceManager分别在不同进程。\n\n- 管理开发者创建的各种Server。\n- 向Client提供查询Server远程接口。\n\n##### 启动执行步骤\n\n1. 打开`/dev/binder`文件: `bs->fd = open(\"/dev/binder\", O_RDWR);`\n2. 建立128K内存映射: `bs->mapped = mmap(NULL, mapsize, PROT_READ, MAP_PRIVATE, bs->fd, 0);`\n3. 通知Binder驱动程序它是守护进程: `binder_become_context_manager(bs);`\n4. 进入循环等待请求的到来: `binder_loop(bs, svcmgr_handler);`(此处句柄`svcmgr_handler = BINDER_SERVICE_MANAGER = 0()`)\n\n#### 3. Client与Server\n\n> 对于应用开发者而言，直接接触的是这两Binder架构中的组件。\n\n- **所在空间**: 用户空间。\n- **基本功能**: 应用开发人员实现。\n\n##### 通信过程中线程关系\n\n> Client - Proxies (封装调用方法，将对象转为系统可读): 提交处理给Binder内核驱动并且block住 ||| Service - Stubs(Listens): 监听Binder内核驱动并且基于接收的回调反序列化为对象。\n\n> 如果不想被block住，可以通过`IBinder.FLAG_ONEWAY`标记，将会立马完成返回空数据。\n\n##### Client 与 Service通信\n\nClient - `transact()`(block client thread by default) -> Service - `onTransact()`(这个方法在Binder线程执行执行，完成后，unblock client thread)。\n\n> 执行`onTransact()`的Binder线程池最大活动线程数量: 16\n\n![](https://sujaiantony.files.wordpress.com/2011/12/binder_commn.png)\n(图片来自:[An Android 101](https://sujaiantony.wordpress.com/2011/12/28/an-android-101-an-overview-on-binder-framework/))\n\n\n##### Service 与 Client通信\n\nService - `onTransact()` -> Client - transaction (transaction, 在binder thread)。\n\n> The client will receive the transaction in the thread waiting for the first transaction to be finished rather than a binder thread.\n\n---\n\n本文已经发布到JackBlog公众号，可请直接访问: [Android Binder IPC机制 - JacksBlog](https://mp.weixin.qq.com/s?__biz=MzIyMjQxMzAzOA==&mid=2247483670&idx=1&sn=d9124d91d37fa1ecaf131238bda3fb94)\n\n---\n\n- [Android Binder设计与实现](http://blog.csdn.net/universus/article/details/6211589)\n- [快速简单Demo](http://blog.csdn.net/singwhatiwanna/article/details/17041691)\n- [浅谈Service Manager成为Android进程间通信（IPC）机制Binder守护进程之路](http://blog.csdn.net/luoshengyang/article/details/6621566)\n- [Android进程间通信（IPC）机制Binder简要介绍和学习计划](http://blog.csdn.net/luoshengyang/article/details/6618363)\n- [An Overview of Android Binder Framework](http://codetheory.in/an-overview-of-android-binder-framework/)\n- [An Android 101 : An overview on Binder framework.](https://sujaiantony.wordpress.com/2011/12/28/an-android-101-an-overview-on-binder-framework/)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2015/11/25/android_multiply_process","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66ig001v95bufid3tnld","content":"<blockquote>\n<p>IPC方式之一。<br>由OpenBinder演化而来。<br>类似于COM和CORBA分布式组件架构。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"I-出现原因\"><a href=\"#I-出现原因\" class=\"headerlink\" title=\"I. 出现原因:\"></a>I. 出现原因:</h2><ul>\n<li>C/S通信模式（除Binder外只有socket支持CS）。</li>\n<li>有更好的传输性能(1.管道和消息队列，基于存储转发，至少需要两次拷贝; 2.内存共享没有拷贝但是控制机制复杂(多进程pid校验以及多种机制协作))。</li>\n<li>安全性更好。</li>\n</ul>\n<h4 id=\"1-CS通信方式\"><a href=\"#1-CS通信方式\" class=\"headerlink\" title=\"1. CS通信方式\"></a>1. CS通信方式</h4><blockquote>\n<p>Binder采用Client-Server(文中简称CS)方式。</p>\n</blockquote>\n<p>linux支持通信方式: 消息队列/共享内存/信号量/socket，其中只有socket支持CS。</p>\n<h4 id=\"2-传输性能\"><a href=\"#2-传输性能\" class=\"headerlink\" title=\"2. 传输性能\"></a>2. 传输性能</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">IPC</th>\n<th style=\"text-align:center\">特征</th>\n<th style=\"text-align:center\">拷贝次数</th>\n<th style=\"text-align:left\">特点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">共享内存</td>\n<td style=\"text-align:center\">控制复杂</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:left\">极少用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Binder</td>\n<td style=\"text-align:center\">简单通用安全</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:left\">Android中常用，性能高</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Socket/管道/消息队列</td>\n<td style=\"text-align:center\">A中缓冲区 –(存储)–&gt; 内核缓冲区 –(转发)–&gt; B中缓冲区</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:left\">socket作为通用接口，传输效率低，开销大，一般用于跨网络的IPC/进程间低速IPC</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"3-安全\"><a href=\"#3-安全\" class=\"headerlink\" title=\"3. 安全\"></a>3. 安全</h4><blockquote>\n<p>基于Android本身为每个应用分配了独立的UID，使用UID&amp;PID作为进程身份标志</p>\n</blockquote>\n<ul>\n<li>传统IPC依赖上层协议确保传入UID，十分危险，Binder支持实名(自身在内核中添加，安全可靠)也支持匿名。</li>\n<li>传统IPC访问接入点(管道名/system V键值/socket ip地址/文件名)是开放的，无法建立私有通道。</li>\n</ul>\n<h4 id=\"4-面向对象，敏捷开发\"><a href=\"#4-面向对象，敏捷开发\" class=\"headerlink\" title=\"4. 面向对象，敏捷开发\"></a>4. 面向对象，敏捷开发</h4><p>Binder有意模糊了进程边界。在默认的IPC过程中，调用方进程中所在调用接口的线程会被block住等待接口的处理返回，仿佛就在同一个进程中调用接口方法。</p>\n<h2 id=\"II-特征\"><a href=\"#II-特征\" class=\"headerlink\" title=\"II. 特征\"></a>II. 特征</h2><ul>\n<li>不同的应用之间可以通过Binder进行IPC(调用Stub中的相关方法)，只需要在对应的Stub中，复写<code>onTransact</code>方法，根据调用者的uid来做权限认证，返回<code>true</code>，让其调用成功，否则调用失败。</li>\n<li>几乎所有系统服务都是通过Binder进行通信: <code>Telephone</code>、<code>Vibrator</code>、<code>Wifi</code>、<code>Battery</code>、<code>Notification</code>等。</li>\n<li>几乎所有系统架构都是基于Binder进行通信: <code>Intent</code>、<code>Content Provider</code>、<code>Messager</code>、ActivityManagerServer中处理的各种生命周期(<code>onStart()</code>、<code>onResume()</code>…)。</li>\n</ul>\n<h3 id=\"III-原理\"><a href=\"#III-原理\" class=\"headerlink\" title=\"III. 原理\"></a>III. 原理</h3><p>Binder相比一般的IPC而言，只需要一次内存拷贝即可实现数据传递，而这一特性与Binder的实现原理密不可分。</p>\n<blockquote>\n<p>同一个物理页面，一方映射到进程虚拟地址空间，一方面映射到内核虚拟地址空间，这样通过指向同一个物理页面的方式，进程和内核之间就可以减少一次内存拷贝。</p>\n</blockquote>\n<p>推荐结合老罗在<a href=\"http://blog.csdn.net/luoshengyang/article/details/6621566\" target=\"_blank\" rel=\"external\">浅谈Service Manager成为Android进程间通信（IPC）机制Binder守护进程之路</a> 提到的源码一起分析。</p>\n<h4 id=\"1-Binder驱动程序\"><a href=\"#1-Binder驱动程序\" class=\"headerlink\" title=\"1. Binder驱动程序\"></a>1. Binder驱动程序</h4><ul>\n<li><strong>所在空间</strong>: 内核空间。</li>\n<li><strong>基本功能</strong>: 提供/dev/binder与用户空间交互。</li>\n</ul>\n<blockquote>\n<p>这块也可以结合ActivityManagerService在Activity启动过程中绑定Binder的流程: <a href=\"http://blog.dreamtobe.cn/2015/11/26/activitymanagerservice/\">ActivityManagerService</a></p>\n</blockquote>\n<h5 id=\"设备文件\"><a href=\"#设备文件\" class=\"headerlink\" title=\"设备文件\"></a>设备文件</h5><blockquote>\n<p><code>/dev/binder</code></p>\n</blockquote>\n<p>在Binder驱动程序模块初始化时创建的。</p>\n<h5 id=\"主入口循环对象\"><a href=\"#主入口循环对象\" class=\"headerlink\" title=\"主入口循环对象\"></a>主入口循环对象</h5><blockquote>\n<p><code>bs:binder_state</code></p>\n</blockquote>\n<p>句柄为0</p>\n<h5 id=\"文件描述符\"><a href=\"#文件描述符\" class=\"headerlink\" title=\"文件描述符\"></a>文件描述符</h5><blockquote>\n<p><code>bs-&gt;fd</code></p>\n</blockquote>\n<p>打开<code>/dev/binder</code>以后获得(对应Binder驱动程序的<code>binder_open</code>函数)。</p>\n<ul>\n<li><code>O_RDWR/filp</code>: 类型(file)。</li>\n<li><code>filp-&gt;private_data</code>: 类型(binder_proc), 会保存打开设备文件<code>/dev/binder</code>的进程的上下文信息。</li>\n<li>结构<code>binder_procs</code>: 全局哈希表(驱动程序内部使用)。</li>\n</ul>\n<h5 id=\"起始地址映射\"><a href=\"#起始地址映射\" class=\"headerlink\" title=\"起始地址映射\"></a>起始地址映射</h5><blockquote>\n<p><code>bs-&gt;mapped</code></p>\n</blockquote>\n<p>把设备文件<code>/dev/binder</code>映射到进程空间的起始地址(对应Binder驱动程序的<code>binder_mmap</code>函数)。</p>\n<blockquote>\n<p>这也是Binder只需要一次拷贝的核心机制: <code>vma:vm_area_struct</code>(给进程使用的虚拟地址)与<code>area:vm_struct</code>(给内核使用的虚拟地址): 映射了同一个物理页面。</p>\n</blockquote>\n<ul>\n<li><code>filp-&gt;private_data-&gt;vima</code>: 类型(vm_area_struct), 映射进程使用的虚拟地址。</li>\n<li><code>filp-&gt;private_data-&gt;buffer</code>: 类型(area-&gt;addr), 映射要映射的物理内存在内核空间的起始位置。</li>\n<li><code>filp-&gt;private_data-&gt;buffer_size</code>: 类型(size_t), 要映射的物理内存在内核空间的长度。</li>\n<li><code>area</code>: 类型(vm_struct), 给内核使用的虚拟地址。</li>\n<li><code>vma</code>: 类型(vm_area_struct), 给进程使用的虚拟地址。</li>\n</ul>\n<h4 id=\"2-Service-Manager\"><a href=\"#2-Service-Manager\" class=\"headerlink\" title=\"2. Service Manager\"></a>2. Service Manager</h4><ul>\n<li><strong>所在空间</strong>: 用户空间。</li>\n<li><strong>基本功能</strong>: 辅助, Binder机制的守护进程用于管理Server、向Client提供查询Server远程接口。</li>\n</ul>\n<h5 id=\"角色\"><a href=\"#角色\" class=\"headerlink\" title=\"角色:\"></a>角色:</h5><ul>\n<li>Binder机制的守护进程。</li>\n<li>特殊Server: 启动以后进入无穷循环充当Server，等待Client请求; 特殊之处: 句柄为0(Binder通信机制使用句柄代表远程接口)，其余Server的句柄值皆大于0(由Binder驱动程序自动分配)。</li>\n</ul>\n<h5 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能:\"></a>功能:</h5><blockquote>\n<p>需要和Server已经Client通信。<br>PS: Server、Client、ServiceManager分别在不同进程。</p>\n</blockquote>\n<ul>\n<li>管理开发者创建的各种Server。</li>\n<li>向Client提供查询Server远程接口。</li>\n</ul>\n<h5 id=\"启动执行步骤\"><a href=\"#启动执行步骤\" class=\"headerlink\" title=\"启动执行步骤\"></a>启动执行步骤</h5><ol>\n<li>打开<code>/dev/binder</code>文件: <code>bs-&gt;fd = open(&quot;/dev/binder&quot;, O_RDWR);</code></li>\n<li>建立128K内存映射: <code>bs-&gt;mapped = mmap(NULL, mapsize, PROT_READ, MAP_PRIVATE, bs-&gt;fd, 0);</code></li>\n<li>通知Binder驱动程序它是守护进程: <code>binder_become_context_manager(bs);</code></li>\n<li>进入循环等待请求的到来: <code>binder_loop(bs, svcmgr_handler);</code>(此处句柄<code>svcmgr_handler = BINDER_SERVICE_MANAGER = 0()</code>)</li>\n</ol>\n<h4 id=\"3-Client与Server\"><a href=\"#3-Client与Server\" class=\"headerlink\" title=\"3. Client与Server\"></a>3. Client与Server</h4><blockquote>\n<p>对于应用开发者而言，直接接触的是这两Binder架构中的组件。</p>\n</blockquote>\n<ul>\n<li><strong>所在空间</strong>: 用户空间。</li>\n<li><strong>基本功能</strong>: 应用开发人员实现。</li>\n</ul>\n<h5 id=\"通信过程中线程关系\"><a href=\"#通信过程中线程关系\" class=\"headerlink\" title=\"通信过程中线程关系\"></a>通信过程中线程关系</h5><blockquote>\n<p>Client - Proxies (封装调用方法，将对象转为系统可读): 提交处理给Binder内核驱动并且block住 ||| Service - Stubs(Listens): 监听Binder内核驱动并且基于接收的回调反序列化为对象。</p>\n<p>如果不想被block住，可以通过<code>IBinder.FLAG_ONEWAY</code>标记，将会立马完成返回空数据。</p>\n</blockquote>\n<h5 id=\"Client-与-Service通信\"><a href=\"#Client-与-Service通信\" class=\"headerlink\" title=\"Client 与 Service通信\"></a>Client 与 Service通信</h5><p>Client - <code>transact()</code>(block client thread by default) -&gt; Service - <code>onTransact()</code>(这个方法在Binder线程执行执行，完成后，unblock client thread)。</p>\n<blockquote>\n<p>执行<code>onTransact()</code>的Binder线程池最大活动线程数量: 16</p>\n</blockquote>\n<p><img src=\"https://sujaiantony.files.wordpress.com/2011/12/binder_commn.png\" alt=\"\"><br>(图片来自:<a href=\"https://sujaiantony.wordpress.com/2011/12/28/an-android-101-an-overview-on-binder-framework/\" target=\"_blank\" rel=\"external\">An Android 101</a>)</p>\n<h5 id=\"Service-与-Client通信\"><a href=\"#Service-与-Client通信\" class=\"headerlink\" title=\"Service 与 Client通信\"></a>Service 与 Client通信</h5><p>Service - <code>onTransact()</code> -&gt; Client - transaction (transaction, 在binder thread)。</p>\n<blockquote>\n<p>The client will receive the transaction in the thread waiting for the first transaction to be finished rather than a binder thread.</p>\n</blockquote>\n<hr>\n<p>本文已经发布到JackBlog公众号，可请直接访问: <a href=\"https://mp.weixin.qq.com/s?__biz=MzIyMjQxMzAzOA==&amp;mid=2247483670&amp;idx=1&amp;sn=d9124d91d37fa1ecaf131238bda3fb94\" target=\"_blank\" rel=\"external\">Android Binder IPC机制 - JacksBlog</a></p>\n<hr>\n<ul>\n<li><a href=\"http://blog.csdn.net/universus/article/details/6211589\" target=\"_blank\" rel=\"external\">Android Binder设计与实现</a></li>\n<li><a href=\"http://blog.csdn.net/singwhatiwanna/article/details/17041691\" target=\"_blank\" rel=\"external\">快速简单Demo</a></li>\n<li><a href=\"http://blog.csdn.net/luoshengyang/article/details/6621566\" target=\"_blank\" rel=\"external\">浅谈Service Manager成为Android进程间通信（IPC）机制Binder守护进程之路</a></li>\n<li><a href=\"http://blog.csdn.net/luoshengyang/article/details/6618363\" target=\"_blank\" rel=\"external\">Android进程间通信（IPC）机制Binder简要介绍和学习计划</a></li>\n<li><a href=\"http://codetheory.in/an-overview-of-android-binder-framework/\" target=\"_blank\" rel=\"external\">An Overview of Android Binder Framework</a></li>\n<li><a href=\"https://sujaiantony.wordpress.com/2011/12/28/an-android-101-an-overview-on-binder-framework/\" target=\"_blank\" rel=\"external\">An Android 101 : An overview on Binder framework.</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>IPC方式之一。<br>由OpenBinder演化而来。<br>类似于COM和CORBA分布式组件架构。</p>\n</blockquote>","more":"<h2 id=\"I-出现原因\"><a href=\"#I-出现原因\" class=\"headerlink\" title=\"I. 出现原因:\"></a>I. 出现原因:</h2><ul>\n<li>C/S通信模式（除Binder外只有socket支持CS）。</li>\n<li>有更好的传输性能(1.管道和消息队列，基于存储转发，至少需要两次拷贝; 2.内存共享没有拷贝但是控制机制复杂(多进程pid校验以及多种机制协作))。</li>\n<li>安全性更好。</li>\n</ul>\n<h4 id=\"1-CS通信方式\"><a href=\"#1-CS通信方式\" class=\"headerlink\" title=\"1. CS通信方式\"></a>1. CS通信方式</h4><blockquote>\n<p>Binder采用Client-Server(文中简称CS)方式。</p>\n</blockquote>\n<p>linux支持通信方式: 消息队列/共享内存/信号量/socket，其中只有socket支持CS。</p>\n<h4 id=\"2-传输性能\"><a href=\"#2-传输性能\" class=\"headerlink\" title=\"2. 传输性能\"></a>2. 传输性能</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">IPC</th>\n<th style=\"text-align:center\">特征</th>\n<th style=\"text-align:center\">拷贝次数</th>\n<th style=\"text-align:left\">特点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">共享内存</td>\n<td style=\"text-align:center\">控制复杂</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:left\">极少用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Binder</td>\n<td style=\"text-align:center\">简单通用安全</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:left\">Android中常用，性能高</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Socket/管道/消息队列</td>\n<td style=\"text-align:center\">A中缓冲区 –(存储)–&gt; 内核缓冲区 –(转发)–&gt; B中缓冲区</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:left\">socket作为通用接口，传输效率低，开销大，一般用于跨网络的IPC/进程间低速IPC</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"3-安全\"><a href=\"#3-安全\" class=\"headerlink\" title=\"3. 安全\"></a>3. 安全</h4><blockquote>\n<p>基于Android本身为每个应用分配了独立的UID，使用UID&amp;PID作为进程身份标志</p>\n</blockquote>\n<ul>\n<li>传统IPC依赖上层协议确保传入UID，十分危险，Binder支持实名(自身在内核中添加，安全可靠)也支持匿名。</li>\n<li>传统IPC访问接入点(管道名/system V键值/socket ip地址/文件名)是开放的，无法建立私有通道。</li>\n</ul>\n<h4 id=\"4-面向对象，敏捷开发\"><a href=\"#4-面向对象，敏捷开发\" class=\"headerlink\" title=\"4. 面向对象，敏捷开发\"></a>4. 面向对象，敏捷开发</h4><p>Binder有意模糊了进程边界。在默认的IPC过程中，调用方进程中所在调用接口的线程会被block住等待接口的处理返回，仿佛就在同一个进程中调用接口方法。</p>\n<h2 id=\"II-特征\"><a href=\"#II-特征\" class=\"headerlink\" title=\"II. 特征\"></a>II. 特征</h2><ul>\n<li>不同的应用之间可以通过Binder进行IPC(调用Stub中的相关方法)，只需要在对应的Stub中，复写<code>onTransact</code>方法，根据调用者的uid来做权限认证，返回<code>true</code>，让其调用成功，否则调用失败。</li>\n<li>几乎所有系统服务都是通过Binder进行通信: <code>Telephone</code>、<code>Vibrator</code>、<code>Wifi</code>、<code>Battery</code>、<code>Notification</code>等。</li>\n<li>几乎所有系统架构都是基于Binder进行通信: <code>Intent</code>、<code>Content Provider</code>、<code>Messager</code>、ActivityManagerServer中处理的各种生命周期(<code>onStart()</code>、<code>onResume()</code>…)。</li>\n</ul>\n<h3 id=\"III-原理\"><a href=\"#III-原理\" class=\"headerlink\" title=\"III. 原理\"></a>III. 原理</h3><p>Binder相比一般的IPC而言，只需要一次内存拷贝即可实现数据传递，而这一特性与Binder的实现原理密不可分。</p>\n<blockquote>\n<p>同一个物理页面，一方映射到进程虚拟地址空间，一方面映射到内核虚拟地址空间，这样通过指向同一个物理页面的方式，进程和内核之间就可以减少一次内存拷贝。</p>\n</blockquote>\n<p>推荐结合老罗在<a href=\"http://blog.csdn.net/luoshengyang/article/details/6621566\">浅谈Service Manager成为Android进程间通信（IPC）机制Binder守护进程之路</a> 提到的源码一起分析。</p>\n<h4 id=\"1-Binder驱动程序\"><a href=\"#1-Binder驱动程序\" class=\"headerlink\" title=\"1. Binder驱动程序\"></a>1. Binder驱动程序</h4><ul>\n<li><strong>所在空间</strong>: 内核空间。</li>\n<li><strong>基本功能</strong>: 提供/dev/binder与用户空间交互。</li>\n</ul>\n<blockquote>\n<p>这块也可以结合ActivityManagerService在Activity启动过程中绑定Binder的流程: <a href=\"http://blog.dreamtobe.cn/2015/11/26/activitymanagerservice/\">ActivityManagerService</a></p>\n</blockquote>\n<h5 id=\"设备文件\"><a href=\"#设备文件\" class=\"headerlink\" title=\"设备文件\"></a>设备文件</h5><blockquote>\n<p><code>/dev/binder</code></p>\n</blockquote>\n<p>在Binder驱动程序模块初始化时创建的。</p>\n<h5 id=\"主入口循环对象\"><a href=\"#主入口循环对象\" class=\"headerlink\" title=\"主入口循环对象\"></a>主入口循环对象</h5><blockquote>\n<p><code>bs:binder_state</code></p>\n</blockquote>\n<p>句柄为0</p>\n<h5 id=\"文件描述符\"><a href=\"#文件描述符\" class=\"headerlink\" title=\"文件描述符\"></a>文件描述符</h5><blockquote>\n<p><code>bs-&gt;fd</code></p>\n</blockquote>\n<p>打开<code>/dev/binder</code>以后获得(对应Binder驱动程序的<code>binder_open</code>函数)。</p>\n<ul>\n<li><code>O_RDWR/filp</code>: 类型(file)。</li>\n<li><code>filp-&gt;private_data</code>: 类型(binder_proc), 会保存打开设备文件<code>/dev/binder</code>的进程的上下文信息。</li>\n<li>结构<code>binder_procs</code>: 全局哈希表(驱动程序内部使用)。</li>\n</ul>\n<h5 id=\"起始地址映射\"><a href=\"#起始地址映射\" class=\"headerlink\" title=\"起始地址映射\"></a>起始地址映射</h5><blockquote>\n<p><code>bs-&gt;mapped</code></p>\n</blockquote>\n<p>把设备文件<code>/dev/binder</code>映射到进程空间的起始地址(对应Binder驱动程序的<code>binder_mmap</code>函数)。</p>\n<blockquote>\n<p>这也是Binder只需要一次拷贝的核心机制: <code>vma:vm_area_struct</code>(给进程使用的虚拟地址)与<code>area:vm_struct</code>(给内核使用的虚拟地址): 映射了同一个物理页面。</p>\n</blockquote>\n<ul>\n<li><code>filp-&gt;private_data-&gt;vima</code>: 类型(vm_area_struct), 映射进程使用的虚拟地址。</li>\n<li><code>filp-&gt;private_data-&gt;buffer</code>: 类型(area-&gt;addr), 映射要映射的物理内存在内核空间的起始位置。</li>\n<li><code>filp-&gt;private_data-&gt;buffer_size</code>: 类型(size_t), 要映射的物理内存在内核空间的长度。</li>\n<li><code>area</code>: 类型(vm_struct), 给内核使用的虚拟地址。</li>\n<li><code>vma</code>: 类型(vm_area_struct), 给进程使用的虚拟地址。</li>\n</ul>\n<h4 id=\"2-Service-Manager\"><a href=\"#2-Service-Manager\" class=\"headerlink\" title=\"2. Service Manager\"></a>2. Service Manager</h4><ul>\n<li><strong>所在空间</strong>: 用户空间。</li>\n<li><strong>基本功能</strong>: 辅助, Binder机制的守护进程用于管理Server、向Client提供查询Server远程接口。</li>\n</ul>\n<h5 id=\"角色\"><a href=\"#角色\" class=\"headerlink\" title=\"角色:\"></a>角色:</h5><ul>\n<li>Binder机制的守护进程。</li>\n<li>特殊Server: 启动以后进入无穷循环充当Server，等待Client请求; 特殊之处: 句柄为0(Binder通信机制使用句柄代表远程接口)，其余Server的句柄值皆大于0(由Binder驱动程序自动分配)。</li>\n</ul>\n<h5 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能:\"></a>功能:</h5><blockquote>\n<p>需要和Server已经Client通信。<br>PS: Server、Client、ServiceManager分别在不同进程。</p>\n</blockquote>\n<ul>\n<li>管理开发者创建的各种Server。</li>\n<li>向Client提供查询Server远程接口。</li>\n</ul>\n<h5 id=\"启动执行步骤\"><a href=\"#启动执行步骤\" class=\"headerlink\" title=\"启动执行步骤\"></a>启动执行步骤</h5><ol>\n<li>打开<code>/dev/binder</code>文件: <code>bs-&gt;fd = open(&quot;/dev/binder&quot;, O_RDWR);</code></li>\n<li>建立128K内存映射: <code>bs-&gt;mapped = mmap(NULL, mapsize, PROT_READ, MAP_PRIVATE, bs-&gt;fd, 0);</code></li>\n<li>通知Binder驱动程序它是守护进程: <code>binder_become_context_manager(bs);</code></li>\n<li>进入循环等待请求的到来: <code>binder_loop(bs, svcmgr_handler);</code>(此处句柄<code>svcmgr_handler = BINDER_SERVICE_MANAGER = 0()</code>)</li>\n</ol>\n<h4 id=\"3-Client与Server\"><a href=\"#3-Client与Server\" class=\"headerlink\" title=\"3. Client与Server\"></a>3. Client与Server</h4><blockquote>\n<p>对于应用开发者而言，直接接触的是这两Binder架构中的组件。</p>\n</blockquote>\n<ul>\n<li><strong>所在空间</strong>: 用户空间。</li>\n<li><strong>基本功能</strong>: 应用开发人员实现。</li>\n</ul>\n<h5 id=\"通信过程中线程关系\"><a href=\"#通信过程中线程关系\" class=\"headerlink\" title=\"通信过程中线程关系\"></a>通信过程中线程关系</h5><blockquote>\n<p>Client - Proxies (封装调用方法，将对象转为系统可读): 提交处理给Binder内核驱动并且block住 ||| Service - Stubs(Listens): 监听Binder内核驱动并且基于接收的回调反序列化为对象。</p>\n<p>如果不想被block住，可以通过<code>IBinder.FLAG_ONEWAY</code>标记，将会立马完成返回空数据。</p>\n</blockquote>\n<h5 id=\"Client-与-Service通信\"><a href=\"#Client-与-Service通信\" class=\"headerlink\" title=\"Client 与 Service通信\"></a>Client 与 Service通信</h5><p>Client - <code>transact()</code>(block client thread by default) -&gt; Service - <code>onTransact()</code>(这个方法在Binder线程执行执行，完成后，unblock client thread)。</p>\n<blockquote>\n<p>执行<code>onTransact()</code>的Binder线程池最大活动线程数量: 16</p>\n</blockquote>\n<p><img src=\"https://sujaiantony.files.wordpress.com/2011/12/binder_commn.png\" alt=\"\"><br>(图片来自:<a href=\"https://sujaiantony.wordpress.com/2011/12/28/an-android-101-an-overview-on-binder-framework/\">An Android 101</a>)</p>\n<h5 id=\"Service-与-Client通信\"><a href=\"#Service-与-Client通信\" class=\"headerlink\" title=\"Service 与 Client通信\"></a>Service 与 Client通信</h5><p>Service - <code>onTransact()</code> -&gt; Client - transaction (transaction, 在binder thread)。</p>\n<blockquote>\n<p>The client will receive the transaction in the thread waiting for the first transaction to be finished rather than a binder thread.</p>\n</blockquote>\n<hr>\n<p>本文已经发布到JackBlog公众号，可请直接访问: <a href=\"https://mp.weixin.qq.com/s?__biz=MzIyMjQxMzAzOA==&amp;mid=2247483670&amp;idx=1&amp;sn=d9124d91d37fa1ecaf131238bda3fb94\">Android Binder IPC机制 - JacksBlog</a></p>\n<hr>\n<ul>\n<li><a href=\"http://blog.csdn.net/universus/article/details/6211589\">Android Binder设计与实现</a></li>\n<li><a href=\"http://blog.csdn.net/singwhatiwanna/article/details/17041691\">快速简单Demo</a></li>\n<li><a href=\"http://blog.csdn.net/luoshengyang/article/details/6621566\">浅谈Service Manager成为Android进程间通信（IPC）机制Binder守护进程之路</a></li>\n<li><a href=\"http://blog.csdn.net/luoshengyang/article/details/6618363\">Android进程间通信（IPC）机制Binder简要介绍和学习计划</a></li>\n<li><a href=\"http://codetheory.in/an-overview-of-android-binder-framework/\">An Overview of Android Binder Framework</a></li>\n<li><a href=\"https://sujaiantony.wordpress.com/2011/12/28/an-android-101-an-overview-on-binder-framework/\">An Android 101 : An overview on Binder framework.</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"Android简单录音","date":"2015-10-23T03:18:03.000Z","_content":"\n## I. 通过系统自带的录音进行录音\n\n#### 存在问题\n\n- [可能无效](http://www.grokkingandroid.com/checking-intent-availability/)\n- 默认放到sdcard根目录\n\n<!-- more -->\n\n```\nIntent intent =\n      new Intent(MediaStore.Audio.Media.RECORD_SOUND_ACTION);\nif (isAvailable(getApplicationContext(), intent)) {\n   startActivityForResult(intent,\n         REQUESTCODE_RECORDING);\n}\n\npublic static boolean isAvailable(Context ctx, Intent intent) {\n   final PackageManager mgr = ctx.getPackageManager();\n   List<ResolveInfo> list =\n      mgr.queryIntentActivities(intent,\n         PackageManager.MATCH_DEFAULT_ONLY);\n   return list.size() > 0;\n}\n\nprotected void onActivityResult(int requestCode,\n      int resultCode, Intent intent) {\n   if (requestCode == REQUESTCODE_RECORDING) {\n      if (resultCode == RESULT_OK) {\n         Uri audioUri = intent.getData();\n         // make use of this MediaStore uri\n         // e.g. store it somewhere\n      }\n      else {\n         // react meaningful to problems\n      }\n   }\n   else {\n      super.onActivityResult(requestCode,\n            resultCode, intent);\n   }\n}\n```\n\n## II. 通过MediaRecorder进行自己应用内录音\n\n#### 需要注意:\n\n1. `java.lang.IllegalStateException`: `prepare()`失败或者其他一些关机步骤失败了还继续执行导致。\n2. `mediarecorder went away with unhandled events`，不用担心，这个只是告知你调用`release()`的时候还在录音或者还在队列中。\n3. `Fatal signal 11 (SIGSEGV)`: 这个是`release()`以后，还在使用这个MediaRecorder对象，或者是还没有`prepare()`过就调用了`reset()`，这个错误会直接导致应用重启。\n\n\n```\nMediaRecorder recorder = null;\n\nprivate void startRecording(File file) {\n    //为了考虑到旧的recorder对象可能出现过错误，因此直接重新创建不通过reset复用旧的\n   if (recorder != null) {\n      recorder.release();\n   }\n   // step1. Create a MediaRecorder object\n   recorder = new MediaRecorder();\n   // step2. State the source to use\n   recorder.setAudioSource(AudioSource.MIC);\n   // step3. Set the file format\n   recorder.setOutputFormat(OutputFormat.THREE_GPP);\n   // step4. Set the Encoding\n   recorder.setAudioEncoder(AudioEncoder.AMR_WB);\n   recorder.setOutputFile(file.getAbsolutePath());\n   try {\n      // step5. Prepare a file\n      recorder.prepare();\n      // step6. Start recording\n      recorder.start();\n   } catch (IOException e) {\n      Log.e(\"giftlist\", \"io problems while preparing [\" +\n            file.getAbsolutePath() + \"]: \" + e.getMessage());\n   }\n}\n\nprivate void stopRecording() {\n   if (recorder != null) {\n      recorder.stop();\n      recorder.release();\n      recorder = null;\n   }\n}\n\n@Override\nprotected void onPause() {\n   super.onPause();\n   if (recorder != null) {\n      recorder.release();\n      recorder = null;\n   }\n}\n```\n\n---\n\n- [Recording Audio using Android’s MediaRecorder Framework](http://www.grokkingandroid.com/recording-audio-using-androids-mediarecorder-framework/)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/android_record.md","raw":"title: Android简单录音\ndate: 2015-10-23 11:18:03\npermalink: 2015/10/23/android_record\ntags:\n- Record\n- MediaRecorder\n- Android\n\n---\n\n## I. 通过系统自带的录音进行录音\n\n#### 存在问题\n\n- [可能无效](http://www.grokkingandroid.com/checking-intent-availability/)\n- 默认放到sdcard根目录\n\n<!-- more -->\n\n```\nIntent intent =\n      new Intent(MediaStore.Audio.Media.RECORD_SOUND_ACTION);\nif (isAvailable(getApplicationContext(), intent)) {\n   startActivityForResult(intent,\n         REQUESTCODE_RECORDING);\n}\n\npublic static boolean isAvailable(Context ctx, Intent intent) {\n   final PackageManager mgr = ctx.getPackageManager();\n   List<ResolveInfo> list =\n      mgr.queryIntentActivities(intent,\n         PackageManager.MATCH_DEFAULT_ONLY);\n   return list.size() > 0;\n}\n\nprotected void onActivityResult(int requestCode,\n      int resultCode, Intent intent) {\n   if (requestCode == REQUESTCODE_RECORDING) {\n      if (resultCode == RESULT_OK) {\n         Uri audioUri = intent.getData();\n         // make use of this MediaStore uri\n         // e.g. store it somewhere\n      }\n      else {\n         // react meaningful to problems\n      }\n   }\n   else {\n      super.onActivityResult(requestCode,\n            resultCode, intent);\n   }\n}\n```\n\n## II. 通过MediaRecorder进行自己应用内录音\n\n#### 需要注意:\n\n1. `java.lang.IllegalStateException`: `prepare()`失败或者其他一些关机步骤失败了还继续执行导致。\n2. `mediarecorder went away with unhandled events`，不用担心，这个只是告知你调用`release()`的时候还在录音或者还在队列中。\n3. `Fatal signal 11 (SIGSEGV)`: 这个是`release()`以后，还在使用这个MediaRecorder对象，或者是还没有`prepare()`过就调用了`reset()`，这个错误会直接导致应用重启。\n\n\n```\nMediaRecorder recorder = null;\n\nprivate void startRecording(File file) {\n    //为了考虑到旧的recorder对象可能出现过错误，因此直接重新创建不通过reset复用旧的\n   if (recorder != null) {\n      recorder.release();\n   }\n   // step1. Create a MediaRecorder object\n   recorder = new MediaRecorder();\n   // step2. State the source to use\n   recorder.setAudioSource(AudioSource.MIC);\n   // step3. Set the file format\n   recorder.setOutputFormat(OutputFormat.THREE_GPP);\n   // step4. Set the Encoding\n   recorder.setAudioEncoder(AudioEncoder.AMR_WB);\n   recorder.setOutputFile(file.getAbsolutePath());\n   try {\n      // step5. Prepare a file\n      recorder.prepare();\n      // step6. Start recording\n      recorder.start();\n   } catch (IOException e) {\n      Log.e(\"giftlist\", \"io problems while preparing [\" +\n            file.getAbsolutePath() + \"]: \" + e.getMessage());\n   }\n}\n\nprivate void stopRecording() {\n   if (recorder != null) {\n      recorder.stop();\n      recorder.release();\n      recorder = null;\n   }\n}\n\n@Override\nprotected void onPause() {\n   super.onPause();\n   if (recorder != null) {\n      recorder.release();\n      recorder = null;\n   }\n}\n```\n\n---\n\n- [Recording Audio using Android’s MediaRecorder Framework](http://www.grokkingandroid.com/recording-audio-using-androids-mediarecorder-framework/)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2015/10/23/android_record","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66ig001x95bu60fqfgtz","content":"<h2 id=\"I-通过系统自带的录音进行录音\"><a href=\"#I-通过系统自带的录音进行录音\" class=\"headerlink\" title=\"I. 通过系统自带的录音进行录音\"></a>I. 通过系统自带的录音进行录音</h2><h4 id=\"存在问题\"><a href=\"#存在问题\" class=\"headerlink\" title=\"存在问题\"></a>存在问题</h4><ul>\n<li><a href=\"http://www.grokkingandroid.com/checking-intent-availability/\" target=\"_blank\" rel=\"external\">可能无效</a></li>\n<li>默认放到sdcard根目录</li>\n</ul>\n<a id=\"more\"></a>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">Intent</span> <span class=\"keyword\">intent</span> =</div><div class=\"line\">      new <span class=\"keyword\">Intent</span>(MediaStore.Audio.Media.RECORD_SOUND_ACTION);</div><div class=\"line\"><span class=\"keyword\">if</span> (isAvailable(getApplicationContext(), <span class=\"keyword\">intent</span>)) &#123;</div><div class=\"line\">   startActivityForResult(<span class=\"keyword\">intent</span>,</div><div class=\"line\">         REQUESTCODE_RECORDING);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> static boolean isAvailable(Context ctx, <span class=\"keyword\">Intent</span> <span class=\"keyword\">intent</span>) &#123;</div><div class=\"line\">   <span class=\"keyword\">final</span> PackageManager mgr = ctx.getPackageManager();</div><div class=\"line\">   List&lt;ResolveInfo&gt; list =</div><div class=\"line\">      mgr.queryIntentActivities(<span class=\"keyword\">intent</span>,</div><div class=\"line\">         PackageManager.MATCH_DEFAULT_ONLY);</div><div class=\"line\">   <span class=\"keyword\">return</span> list.<span class=\"built_in\">size</span>() &gt; <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">protected</span> void onActivityResult(<span class=\"built_in\">int</span> requestCode,</div><div class=\"line\">      <span class=\"built_in\">int</span> resultCode, <span class=\"keyword\">Intent</span> <span class=\"keyword\">intent</span>) &#123;</div><div class=\"line\">   <span class=\"keyword\">if</span> (requestCode == REQUESTCODE_RECORDING) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (resultCode == RESULT_OK) &#123;</div><div class=\"line\">         Uri audioUri = <span class=\"keyword\">intent</span>.getData();</div><div class=\"line\">         // make <span class=\"keyword\">use</span> of this MediaStore uri</div><div class=\"line\">         // e.g. store it somewhere</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">         // react meaningful to problems</div><div class=\"line\">      &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      super.onActivityResult(requestCode,</div><div class=\"line\">            resultCode, <span class=\"keyword\">intent</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"II-通过MediaRecorder进行自己应用内录音\"><a href=\"#II-通过MediaRecorder进行自己应用内录音\" class=\"headerlink\" title=\"II. 通过MediaRecorder进行自己应用内录音\"></a>II. 通过MediaRecorder进行自己应用内录音</h2><h4 id=\"需要注意\"><a href=\"#需要注意\" class=\"headerlink\" title=\"需要注意:\"></a>需要注意:</h4><ol>\n<li><code>java.lang.IllegalStateException</code>: <code>prepare()</code>失败或者其他一些关机步骤失败了还继续执行导致。</li>\n<li><code>mediarecorder went away with unhandled events</code>，不用担心，这个只是告知你调用<code>release()</code>的时候还在录音或者还在队列中。</li>\n<li><code>Fatal signal 11 (SIGSEGV)</code>: 这个是<code>release()</code>以后，还在使用这个MediaRecorder对象，或者是还没有<code>prepare()</code>过就调用了<code>reset()</code>，这个错误会直接导致应用重启。</li>\n</ol>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">MediaRecorder recorder = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">startRecording</span><span class=\"params\">(File file)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//为了考虑到旧的recorder对象可能出现过错误，因此直接重新创建不通过reset复用旧的</span></div><div class=\"line\">   <span class=\"keyword\">if</span> (recorder != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      recorder.release();</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"comment\">// step1. Create a MediaRecorder object</span></div><div class=\"line\">   recorder = <span class=\"keyword\">new</span> MediaRecorder();</div><div class=\"line\">   <span class=\"comment\">// step2. State the source to use</span></div><div class=\"line\">   recorder.setAudioSource(AudioSource.MIC);</div><div class=\"line\">   <span class=\"comment\">// step3. Set the file format</span></div><div class=\"line\">   recorder.setOutputFormat(OutputFormat.THREE_GPP);</div><div class=\"line\">   <span class=\"comment\">// step4. Set the Encoding</span></div><div class=\"line\">   recorder.setAudioEncoder(AudioEncoder.AMR_WB);</div><div class=\"line\">   recorder.setOutputFile(file.getAbsolutePath());</div><div class=\"line\">   <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// step5. Prepare a file</span></div><div class=\"line\">      recorder.prepare();</div><div class=\"line\">      <span class=\"comment\">// step6. Start recording</span></div><div class=\"line\">      recorder.start();</div><div class=\"line\">   &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">      Log.e(<span class=\"string\">\"giftlist\"</span>, <span class=\"string\">\"io problems while preparing [\"</span> +</div><div class=\"line\">            file.getAbsolutePath() + <span class=\"string\">\"]: \"</span> + e.getMessage());</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">stopRecording</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">if</span> (recorder != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      recorder.stop();</div><div class=\"line\">      recorder.release();</div><div class=\"line\">      recorder = <span class=\"keyword\">null</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onPause</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">super</span>.onPause();</div><div class=\"line\">   <span class=\"keyword\">if</span> (recorder != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      recorder.release();</div><div class=\"line\">      recorder = <span class=\"keyword\">null</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<ul>\n<li><a href=\"http://www.grokkingandroid.com/recording-audio-using-androids-mediarecorder-framework/\" target=\"_blank\" rel=\"external\">Recording Audio using Android’s MediaRecorder Framework</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<h2 id=\"I-通过系统自带的录音进行录音\"><a href=\"#I-通过系统自带的录音进行录音\" class=\"headerlink\" title=\"I. 通过系统自带的录音进行录音\"></a>I. 通过系统自带的录音进行录音</h2><h4 id=\"存在问题\"><a href=\"#存在问题\" class=\"headerlink\" title=\"存在问题\"></a>存在问题</h4><ul>\n<li><a href=\"http://www.grokkingandroid.com/checking-intent-availability/\">可能无效</a></li>\n<li>默认放到sdcard根目录</li>\n</ul>","more":"<figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">Intent</span> <span class=\"keyword\">intent</span> =</div><div class=\"line\">      new <span class=\"keyword\">Intent</span>(MediaStore.Audio.Media.RECORD_SOUND_ACTION);</div><div class=\"line\"><span class=\"keyword\">if</span> (isAvailable(getApplicationContext(), <span class=\"keyword\">intent</span>)) &#123;</div><div class=\"line\">   startActivityForResult(<span class=\"keyword\">intent</span>,</div><div class=\"line\">         REQUESTCODE_RECORDING);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> static boolean isAvailable(Context ctx, <span class=\"keyword\">Intent</span> <span class=\"keyword\">intent</span>) &#123;</div><div class=\"line\">   <span class=\"keyword\">final</span> PackageManager mgr = ctx.getPackageManager();</div><div class=\"line\">   List&lt;ResolveInfo&gt; list =</div><div class=\"line\">      mgr.queryIntentActivities(<span class=\"keyword\">intent</span>,</div><div class=\"line\">         PackageManager.MATCH_DEFAULT_ONLY);</div><div class=\"line\">   <span class=\"keyword\">return</span> list.<span class=\"built_in\">size</span>() &gt; <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">protected</span> void onActivityResult(<span class=\"built_in\">int</span> requestCode,</div><div class=\"line\">      <span class=\"built_in\">int</span> resultCode, <span class=\"keyword\">Intent</span> <span class=\"keyword\">intent</span>) &#123;</div><div class=\"line\">   <span class=\"keyword\">if</span> (requestCode == REQUESTCODE_RECORDING) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (resultCode == RESULT_OK) &#123;</div><div class=\"line\">         Uri audioUri = <span class=\"keyword\">intent</span>.getData();</div><div class=\"line\">         // make <span class=\"keyword\">use</span> of this MediaStore uri</div><div class=\"line\">         // e.g. store it somewhere</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">         // react meaningful to problems</div><div class=\"line\">      &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      super.onActivityResult(requestCode,</div><div class=\"line\">            resultCode, <span class=\"keyword\">intent</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"II-通过MediaRecorder进行自己应用内录音\"><a href=\"#II-通过MediaRecorder进行自己应用内录音\" class=\"headerlink\" title=\"II. 通过MediaRecorder进行自己应用内录音\"></a>II. 通过MediaRecorder进行自己应用内录音</h2><h4 id=\"需要注意\"><a href=\"#需要注意\" class=\"headerlink\" title=\"需要注意:\"></a>需要注意:</h4><ol>\n<li><code>java.lang.IllegalStateException</code>: <code>prepare()</code>失败或者其他一些关机步骤失败了还继续执行导致。</li>\n<li><code>mediarecorder went away with unhandled events</code>，不用担心，这个只是告知你调用<code>release()</code>的时候还在录音或者还在队列中。</li>\n<li><code>Fatal signal 11 (SIGSEGV)</code>: 这个是<code>release()</code>以后，还在使用这个MediaRecorder对象，或者是还没有<code>prepare()</code>过就调用了<code>reset()</code>，这个错误会直接导致应用重启。</li>\n</ol>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">MediaRecorder recorder = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">startRecording</span><span class=\"params\">(File file)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//为了考虑到旧的recorder对象可能出现过错误，因此直接重新创建不通过reset复用旧的</span></div><div class=\"line\">   <span class=\"keyword\">if</span> (recorder != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      recorder.release();</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"comment\">// step1. Create a MediaRecorder object</span></div><div class=\"line\">   recorder = <span class=\"keyword\">new</span> MediaRecorder();</div><div class=\"line\">   <span class=\"comment\">// step2. State the source to use</span></div><div class=\"line\">   recorder.setAudioSource(AudioSource.MIC);</div><div class=\"line\">   <span class=\"comment\">// step3. Set the file format</span></div><div class=\"line\">   recorder.setOutputFormat(OutputFormat.THREE_GPP);</div><div class=\"line\">   <span class=\"comment\">// step4. Set the Encoding</span></div><div class=\"line\">   recorder.setAudioEncoder(AudioEncoder.AMR_WB);</div><div class=\"line\">   recorder.setOutputFile(file.getAbsolutePath());</div><div class=\"line\">   <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// step5. Prepare a file</span></div><div class=\"line\">      recorder.prepare();</div><div class=\"line\">      <span class=\"comment\">// step6. Start recording</span></div><div class=\"line\">      recorder.start();</div><div class=\"line\">   &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">      Log.e(<span class=\"string\">\"giftlist\"</span>, <span class=\"string\">\"io problems while preparing [\"</span> +</div><div class=\"line\">            file.getAbsolutePath() + <span class=\"string\">\"]: \"</span> + e.getMessage());</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">stopRecording</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">if</span> (recorder != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      recorder.stop();</div><div class=\"line\">      recorder.release();</div><div class=\"line\">      recorder = <span class=\"keyword\">null</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onPause</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">super</span>.onPause();</div><div class=\"line\">   <span class=\"keyword\">if</span> (recorder != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      recorder.release();</div><div class=\"line\">      recorder = <span class=\"keyword\">null</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<ul>\n<li><a href=\"http://www.grokkingandroid.com/recording-audio-using-androids-mediarecorder-framework/\">Recording Audio using Android’s MediaRecorder Framework</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"Android优化","date":"2015-10-25T16:26:03.000Z","_content":"\n## I. 网络相关\n\n> 更多网络优化，可参考: [Android网络](http://blog.dreamtobe.cn/2015/03/28/Android网络学习笔记整理/)\n\n- http头信息带Cache-Control域 确定缓存过期时间  防止重复请求\n- 直接用IP直连，不用域名，策略性跟新本地IP列表。 -- DNS解析过程耗时在百毫秒左右，并且还有可能存在DNS劫持。\n- 图片、JS、CSS等静态资源，采用CDN（当然如果是使用7牛之类的服务就已经给你搭建布置好了）\n- 全局图片处理采用漏斗模型全局管控，所请求的图片大小最好依照业务大小提供/最大不超过屏幕分辨率需要，如果请求原图，也不要超过`GL10.GL_MAX_TEXTURE_SIZE`\n- 全局缩略图直接采用webp，在尽可能不损失图片质量的前提下，图片大小与png比缩小30% ~ 70%\n- 如果列表里的缩略图服务器处理好的小图，可以考虑直接在列表数据请求中，直接以base64在列表数据中直接带上图片（国内还比较少，海外有些这种做法，好像web端比较常见）\n- 轮询或者socket心跳采用系统`AlarmManager`提供的闹钟服务来做，保证在系统休眠的时候cpu可以得到休眠，在需要唤醒时可以唤醒（持有cpu唤醒锁）\n- 可以通过将零散的网路的请求打包进行一次操作，避免过多的无线信号引起电量消耗。\n\n<!-- more -->\n\n\n#### 1. 传输数据格式选择\n\n- 如果是需要全量数据的，考虑使用[Protobuffers](https://developers.google.com/protocol-buffers/?hl=zh-cn) (序列化反序列化性能高于json)，并且考虑使用[nano protocol buffer](https://android.googlesource.com/platform/external/protobuf/+/master/java/README.txt)。\n- 如果传输回来的数据不需要全量读取，考虑使用[Flatbuffers](https://github.com/google/flatbuffers) (序列化反序列化几乎不耗时，耗时是在读取对象时(就这一部分如果需要优化，可以参看[Flatbuffer Use Optimize](http://blog.dreamtobe.cn/2015/01/05/Flatbuffer-Use-Optimize/)\n\n#### 2. 输入流\n> 使用具有缓存策略的输入流\n\n原 | 建议替换为\n-|-\n`InputStream` | `BufferedInputStream`\n`Reader` | `BufferedReader`\n\n## II. 基础相关\n\n#### 1. 数据结构\n> 如果已知大概需要多大，就直接给初始大小，减少扩容时额外开销。\n\n- `ArrayList`: 里面就一数组，内存小，有序取值快，扩容效率低\n- `LinkedList`: 里面就一双向链表，内存大，随机插入删除快，扩容效率高。\n- `HashSet`: 里面就一个`HashMap`，用key对外存储，目的就是不允许重复元素。\n- `ConcurrentHashMap`: 线程安全，采用细分锁，锁颗粒更小，并发性能更优\n- `Collections.synchronizedMap`: 线程安全，采用当前对象作为锁，颗粒较大，并发性能较差。\n- `SparseArray`、`SparseBooleanArray`、`SparseIntArray`:  针对Key为`Int`、`Boolean`进行了优化，采用二分法查找，简单数组存储。相比`HashMap`而言，`HashMap`每添加一个数据，大约会需要申请额外的32字节的数据，因此`Sparsexxx`在内存方面的开销会小很多。\n\n#### 2. 编码习惯\n\n- 尽量简化，不要做不需要的操作。\n- 尽量避免分配内存(创建对象): 1) 如果一个方法返回一个`String`，并且这个方法的返回值始终都是被用来`append`到一个`StringBuffer`上，就改为传入`StringBuffer`直接`append`上去，避免创建一个短生命周期的临时对象；2) 如果使用的字符串是截取自某一个字符串，就直接从那个字符串上面`substring`，不要拷贝一份，因为通过`substring`虽然创建了新的`String`对象，但是共享了里面的`char`数组中的`char`对象，减少了这块对象的创建；量使用多个一维数组，其性能高于多维数组；`int`数组性能远大于`Integer`数组性能；\n- 如果你确定不需要访问类成员，让方法`static`，这样调用时可以提升15%~20%的速度，因为不需要切换对象状态。\n- 如果某个参数是常量，别忘了使用`static final`，这样可以让`Class`首次初始化时，不需要调用`<clinit>`来创建`static`方法，而是在编译时就直接将常量替换代码中使用的位置。\n- Android开发中，类内尽量避免通过`get/set`访问成员变量，虽然这在语言的开发中是一个好的习惯，但是Android虚拟机中，对方法的调用开销远大于对变量的直接访问。在没有JIT的情况下，直接的变量访问比调用方法快3倍，在JIT下，直接的变量访问更是比调用方法快7倍!\n- 当内部类需要访问外部类的私有`方法/变量`时，考虑将这些外部类的私有`方法/变量`改用包可见的方式。首先在编写代码的时候，通过内部类访问外部类的私有`方法/变量`是合法的，但是在编译的时候为了满足这个会将需要被内部类访问的私有`方法/变量`封装一层包可见的方法，实现让内部类访问这些私有的`方法/变量`，根据前面我们有提到说方法的调用开销大于变量的调用，因此这样使得性能变差，所以我们在编码的时候可以考虑直接将需要被内部类调用的外部类私有`方法/变量`，改为包可见。\n- 尽量少使用`float`。在很多现代设备中，`double`的性能与`float`的性能几乎没有差别，但是从大小上面`double`是`float`的两倍的大小。\n- 尽量考虑使用整型而非浮点数，在较好的Android设备中，浮点数比整型慢一倍。\n- 尽量不要使用除法操作，有很多处理器有乘法器，但是没有除法器，也就是说在这些设备中需要将除法分解为其他的计算方式速度会比较慢。\n- 尽量使用系统sdk中提供的方法，而非自己去实现。如`String.indexOf()`相关的API，Dalvik将会替换为内部方法；`System.arraycopy()`方法在Nexus One手机上，会比我们上层写的类似方法的执行速度快9倍。\n- 谨慎编写native，性能不一定更好，Native并不是用于使得性能更好，而是用于有些已经存在的库是使用native语言实现的，我们需要引入Android，这时才使用。1) 需要多出开销在维持Java-native的通信；2) 在native中创建的资源由于在native heap上面，因此需要主动的释放；3) 需要对不同的处理器架构进行支持，存在明显的兼容性问题需要解决。\n- 在没有JIT的设备中，面向接口编程的模式(如`Map map`)，相比直接访问对象类(如`HashMap map`)，会慢6%，但是在存在JIT的设备中，两者的速度差不多。但是内存占用方面面向接口变成会消耗更多内存，因此如果你的面向接口编程不是十分的必要的情况下可以考虑不用。\n- 在没有JIT的设备中，访问本地化变量相对与成员变量会快20%，但是在存在JIT的设备中，两者速度差不多。\n\n##### 遍历优化\n\n> 尽量使用`Iterable`而不是通过长度判断来进行遍历。\n\n```\n// 这种性能是最差的，JIT也无法对其优化。\npublic void zero() {\n    int sum = 0;\n    for (int i = 0; i < mArray.length; ++i) {\n        sum += mArray[i].mSplat;\n    }\n}\n\n// 相对zero()来说，这种写法会更快些，在存在JIT的情况下速度几乎和two()速度一样快。\npublic void one() {\n    int sum = 0;\n    // 1) 通过本地化变量，减少查询，在不存在JIT的手机下，优化较明显。\n    Foo[] localArray = mArray;\n    // 2) 获取队列长度，减少每次遍历访问变量的长度，有效优化。\n    int len = localArray.length;\n\n    for (int i = 0; i < len; ++i) {\n        sum += localArray[i].mSplat;\n    }\n}\n\n// 在无JIT的设备中，是最快的遍历方式，在存在JIT的设备中，与one()差不多快。\npublic void two() {\n    int sum = 0;\n    for (Foo a : mArray) {\n        sum += a.mSplat;\n    }\n}\n```\n\n\n## III. 数据库相关\n\n> 建多索引的原则: 哪个字段可以最快的**减少查询**结果，就把该字段放在最前面\n\n#### 无法使用索引的情况\n\n- 操作符`BETWEEN`、`LIKE`、`OR`\n- 表达式\n- `CASE WHEN`\n\n#### 不推荐\n\n- 不要设计出索引是其他索引的前缀（没有意义）\n- 更新时拒绝直接全量更新，要更新哪列就put哪列的数据\n- 如果最频繁的是更新与插入，别建很多索引 （原本表就很小就也没必要建）\n- 拒绝用大字符串创建索引\n- 避免建太多索引，查询时可能就不会选择最好的来执行\n\n#### 推荐\n\n- 多使用整型索引，效率远高于字符串索引\n- 搜索时使用SQL参数(`\"?\", parameter`)代替字符串拼接（底层有特殊优化与缓存）\n- 查询需要多少就limit多少（如判断是否含有啥，就limit 1就行了嘛）\n- 如果出现很宽的列(如blob类型)，考虑放在单独表中(在查询或者更新其他列数据时防止不必要的大数据i/o影响性能)\n\n\n## IV. JNI抉择\n\n> Android JVM相关知识，可参看: [ART、Dalvik](http://blog.dreamtobe.cn/2015/11/01/android_art_dalvik/)\n\n> Android JNI、NDK相关知识，可参看: [NDK](http://blog.dreamtobe.cn/2015/11/08/ndk/)\n\n> JNI不一定显得更快，有些会更慢。\n\n> 特点: 不用在虚拟机的框子下写代码\n\n- 可以调用更底层的高性能的代码库 -- Good\n- 如果是Dalvik，将省去了由JIT编译期转为本地代码的这个步骤。 -- Good\n- Java调用JNI的耗时较Java调用Java肯定更慢，虽然随着JDK版本的升级，差距已经越来越小(JDK1.6版本是5倍Java调用Java方法的耗时) -- Bad\n- 内存不在Java Heap，没有OOM风险，有效减少gc。 -- Good\n\n> 一些重要的参数之类，也可以考虑放在Native层，保证安全性。参考: [Android应用程序通用自动脱壳方法研究](http://blog.dreamtobe.cn/2015/07/17/wh_android_tk/)\n\n## V. 多进程抉择\n\n> 360 17个进程: [360手机卫士 Android开发 InfoQ视频 总结\n](http://blog.dreamtobe.cn/2015/03/17/360手机卫士-Android开发-InfoQ视频-总结/)，但是考虑到多进程的消耗，我们更需要关注多个组件复用同一进程。\n> 在没有做任何操作的空进程而言，其大约需要额外暂用1.4MB的内存。\n\n- 充分独立，解耦部分\n- 大内存(如临时展示大量图片的Activity)、无法解决的crash、内存泄漏等问题，考虑通过独立进程解决\n- 独立于UI进程，需要在后台长期存活的服务(参看[Android中线程、进程与组件的关系](http://blog.dreamtobe.cn/2015/04/08/android_thread_process_components/))\n- 非己方第三方库（无法保证稳定、性能等问题，并且独立组件），可考虑独立进程\n\n> 最后，多进程存在的两个问题: 1. 由于进程间通讯或者首次调起进程的消耗等，带来的cpu、i/o等的资源竞争。2. 也许对于部分同事来说，会还有可读性问题吧，毕竟多了层IPC绕了点。\n\n## VI. UI层面\n\n> 相关深入优化，可参看[Android绘制布局相关](http://blog.dreamtobe.cn/2015/10/20/android-view/)\n\n> 对于卡顿相关排查推荐参看: [Android性能优化案例研究(上)](http://www.importnew.com/3784.html)与[Android性能优化案例研究（下）](http://www.importnew.com/4065.html)\n\n- 减少不必要的不透明背景相互覆盖，减少重绘，因为GPU不得不一遍又一遍的画这些图层\n- 保证UI线程一次完整的绘制(measure、layout、draw)不超过16ms(60Hz)，否则就会出现掉帧，卡顿的现象\n- 在UI线程中频繁的调度中，尽量少的对象创建，减少gc等。\n- 分步加载（减少任务颗粒）、预加载、异步加载(区别出耗时任务，采用异步加载)\n\n\n## VII. 库推荐\n\n> 可以参考Falcon Pro作者的推荐: [Falcon Pro 3如何完成独立开发演讲分析](http://blog.dreamtobe.cn/2015/06/14/Falcon-Pro-3-如何完成独立开发演讲分析/)\n\n#### 1. 响应式编程\n\n[RxJava](https://github.com/ReactiveX/RxJava) (响应式编程，代码更加简洁，异步处理更快快捷、异常处理更加彻底、数据管道理念)\n\n相关了解可以参看: [RxJava](http://blog.dreamtobe.cn/2015/04/29/RxJava学习整理/)\n\n#### 2. 图片加载:\n- 小型快捷: [Picasso](https://github.com/square/picasso) (接口干净、支持okhttp、功能强大、稳定、高效, 可以延读: [PhotoGallery、Volley、Picasso 比较](http://blog.dreamtobe.cn/2015/04/28/PhotoGallery%E3%80%81Volley%E3%80%81Picasso-%E6%AF%94%E8%BE%83/))\n- 大项目考虑: [Fresco](http://fresco-cn.org) (2.5M，pipeline解决资源竞争、Native Heep解决OOM，的同时减少GC)\n\n#### 3. 网络底层库:\n\n[Okhttp](https://github.com/square/okhttp): 默认gzip、缓存、安全等\n\n#### 4. 网络基层:\n\n[Retrofit](https://github.com/square/retrofit): 非常好用的REST Client，结合RxJava简单API实现、类型安全，简单快捷\n\n#### 5. 数据库层:\n\n[Realm](https://realm.io): 效率极高(Falcon Pro 3的作者Joaquim用了该库以后，所有数据库操作都放到了UI线程)（基于TightDB，底层C++闭源，Java层开源，简单使用，性能远高于SQLite等）\n\n#### 6. Crash上报:\n\n[Fabric](https://fabric.io): 全面的信息(新版本还支持JNI Crash获取和上报)、稳定的数据、及时的通知、强大的反混淆(其实在混淆后有上传mapping)\n\n#### 7. 内存泄漏自动化检测\n\n[LeakCanary](https://github.com/square/leakcanary): 自动化泄漏检测与分析 ( 可以看看这个[LeakCanary使用总结](http://blog.dreamtobe.cn/2015/05/18/LeakCanary%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/)与[Leakcanary Square的一款Android/Java内存泄漏检测工具](http://blog.dreamtobe.cn/2015/05/12/Leakcanary-Square%E7%9A%84%E4%B8%80%E6%AC%BEAndroid:Java%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E6%A3%80%E6%B5%8B%E5%B7%A5%E5%85%B7/))\n\n#### 8. 其他\n\n - 代码质量: [phabricator 的arc diff](http://phabricator.org) (尽量小颗粒度的arc diff 与update review)，其实也可以看看Google是如何做的: [笔记-谷歌是如何做代码审查的](http://blog.dreamtobe.cn/2015/03/23/%5B笔记%5D谷歌是如何做代码审查的/)，还有一点的TODO要写好deadline与master\n - 编包管理: [Gitlab CI](https://about.gitlab.com/gitlab-ci/) (结合Gitlab，功能够用，方便)\n\n## VIII. 内存\n\n> 根据设备可用内存的不同，每个设备给应用限定的Heap大小是有限的，当达到对应限定值还申请空间时，就会收到`OutOfMemoryError`的异常。\n\n### 1. 内存管理\n\n> Android根据不同的进程优先级，对不同进程进行回收来满足内存的供求，可以参照这篇文章: [Android中线程、进程与组件的关系](http://blog.dreamtobe.cn/2015/04/08/android_thread_process_components/)。\n> 在后台进程的LRU队列中，除了LRU为主要的规则以外，系统也会根据杀死一个后台进程所获得的内存是否更多作为一定的参考依据，因此后台进程为了保活，尽量少的内存，尽可能的释放内存也是十分必要的。\n\n- 尽可能的缩短`Service`的存活周期（可以考虑直接使用执行完任务直接关闭自己的`IntentService`），也就是说在Service没有任何任务的时候，尽可能的将其关闭，以减少系统资源的浪费。\n- 可以通过系统服务`ActivityManager`中的`getMemoryClass()`获知当前设备允许每个应用大概可以有多少兆的内存使用(如果在`AndroidManifest`设置了`largeHeap=true`，使用`getLargeMemoryClass()`获知)，并且让应用中的内存始终低于这个值，避免OOM。\n- 相对于静态常量而言，通常`Enum`枚举需要大于两倍的内存空间来存储相同的数据。\n- Java中的每个`class`(或者匿名类)大约占用500字节。\n- 每个对象实例大约开销12~16字节的内存。\n\n#### `onTrimMemory()`回调处理\n\n> 监听`onTrimMemory()`的回调，根据不同的内存等级，做相应的释放以此让系统资源更好的利用，以及自己的进程可以更好的保活。\n\n##### 当应用还在前台\n\n- `TRIM_MEMORY_RUNNING_MODERATE`: 当前应用还在运行不会被杀，但是设备可运行的内存较低，系统正在从后台进程的LRU列表中杀死进程其他进程。\n- `TRIM_MEMORY_RUNNING_LOW`: 当前应用还在运行不会被杀，但是设备可运行内存很低了，会直接影响当前应用的性能，当前应用也需要考虑释放一些无用资源。\n- `TRIM_MEMORY_RUNNING_CRITICAL`: 当前应用还在运行中，但是系统已经杀死了后台进程LRU队列中绝大多数的进程了，当前应用需要考虑释放所有不重要的资源，否则很可能系统就会开始清理服务进程，可见进程等。也就说，如果内存依然不足以支撑，当前应用的服务也很有可能会被清理掉。\n\n##### `TRIM_MEMORY_UI_HIDDEN`\n\n当回调回来的时候，说明应用的UI对用户不可见的，此时释放UI使用的一些资源。这个不同于`onStop()`，`onStop()`的回调，有可能仅仅是当前应用中进入了另外一个`Activity`。\n\n##### 当应用处于后台\n\n- `TRIM_MEMORY_BACKGROUND`: 系统已经处于低可用内存的情况，并且当前进程处于后台进程LRU队列队头附近，因此还是比较安全的，但是系统可能已经开始从LRU队列中清理进程了，此时当前应用需要释放部分资源，以保证尽量的保活。\n- `TRIM_MEMORY_MODERATE`: 系统处于低可用内存的情况，并且当前进程处于后台进程LRU队列中间的位置，如果内存进一步紧缺，当前进程就有可能被清理掉，需要进一步释放资源。\n- `TRIM_MEMORY_COMPLETE`: 系统处于低可用内存的情况，并且当前进程处于后天进程LRU队列队首的位置，如果内存进一步紧缺，下一个清理的就是当前进程，需要释放尽可能的资源来保活当前进程。在API14之前，`onLowMemory()`就相当于这个级别的回调。\n\n### 2. 避免内存泄漏相关\n\n- 无法解决的泄漏（如系统底层引起的)移至独立进程(如2.x机器存在webview的内存泄漏)\n- 大图片资源/全屏图片资源，要不放在`assets`下，要不放在`nodpi`下，要不都带，否则缩放会带来额外耗时与内存问题\n- 4.x在`AndroidManifest`中配置`largeHeap=true`，一般dvm heep最大值可增大50%以上。但是没有特殊明确的需要，尽可能的避免这样设置，因为这样一来很可能隐藏了消耗了完全没有必要的内存的问题。\n- 在`Activity#onDestory`以后，遍历所有View，干掉所有View可能的引用(通常泄漏一个Activity，连带泄漏其上的View，然后就泄漏了大于全屏图片的内存)。\n- 万金油: 静态化内部类，使用`WeakReference`引用外部类，防止内部类长期存在，泄漏了外部类的问题。\n\n\n### 3. 图片\n\n> Android 2.3.x或更低版本的设备，是将所有的Bitmap对象存储在native heap，因此我们很难通过工具去检测其内存大小，在Android 3.0或更高版本的设备，已经调整为存储到了每个应用自身的Dalvik heap中了。\n\n- 全局统一`BitmapFactory#decode`出口，捕获此处decode oom，控制长宽（小于屏幕分辨率大小 ）\n- 如果采用RGB_8888 oom了，尝试RGB_565(相比内存小一半以上(w*h*2(bytes)))\n- 如果还考虑2.x机器的话，设置`BitmapFactory#options`的`InNativeAlloc`参数为true，此时decode的内存不会上报到dvm中，便不会oom。\n- 建议采用[lingochamp/QiniuImageLoader](https://github.com/lingochamp/QiniuImageLoader)的方式，所有图片的操作都放到云端处理，本地默认使用Webp，并且获取的每个位置的图片，尽量通过精确的大小按需获取，避免内存没必要的消耗。\n\n\n## IX. 线程\n\n- 采用全局线程池管理体系，有效避免野线程。可参照 [ThreadDebugger-demo/DemoThreadPoolCentral.java](https://github.com/Jacksgong/ThreadDebugger/blob/master/demo/src/main/java/cn/dreamtobe/threaddebugger/demo/DemoThreadPoolCentral.java)\n- 结合全局线程池管理体系，使用[ThreadDebugger](https://github.com/Jacksgong/ThreadDebugger)监控线程，避免线程泄漏的存在。\n\n## X. 编译与发布\n\n- 考虑采用DexGuard，或ProGuard结合相关资源混淆来提高安全与包大小，参考: [DexGuard、Proguard、Multi-dex](http://blog.dreamtobe.cn/2015/11/04/guard_multi_dex/)\n- 结合Gradle、Gitlab-CI 与Slack(Incoming WebHooks)，快速实现，打相关git上打相关Tag，自动编相关包通知Slack。\n- 结合Gitlab-CI与Slack(Incoming WebHooks)，快速实现，所有的push，Slack快速获知。\n- 结合Gradle中Android提供的`productFlavors`参数，定义不同的variations，快速批量打渠道包\n- 迭代过程中，包定期做多纬度扫描，如包大小、字节码大小变化、红线扫描、资源变化扫描、相同测试用例耗电量内存等等，更多的可以参考 [360手机卫士 Android开发 InfoQ视频 总结](http://blog.dreamtobe.cn/2015/03/17/360%E6%89%8B%E6%9C%BA%E5%8D%AB%E5%A3%AB-Android%E5%BC%80%E5%8F%91-InfoQ%E8%A7%86%E9%A2%91-%E6%80%BB%E7%BB%93/)\n- 迭代过程中，对关键`Activity`以及`Application`对打开的耗时进行统计，观察其变化，避免因为迭代导致某些页面非预期的打开变慢。\n\n## XI. 工具\n\n- [TraceView](https://developer.android.com/studio/profile/traceview.html)可以有效的更重一段时间内哪个方法最耗时，但是需要注意的是目前TraceView在录制过中，会关闭JIT，因此也许有些JIT的优化在TraceView过程被忽略了。\n- [Systrace](https://developer.android.com/studio/profile/systrace.html)可以有效的分析掉帧的原因。\n- [HierarchyViewer](https://developer.android.com/studio/profile/optimize-ui.html)可以有效的分析View层级以及布局每个节点`measure`、`layout`、`draw`的耗时。\n\n## XII. 其他\n\n- `final`能用就用（高效: 编译器在调用`final`方法时，会转入内嵌机制）\n- 懒预加载，如简单的`ListView`、`RecyclerView`等滑动列表控件，停留在当前页面的时候，可以考虑直接预加载下个页面所需图片\n- 智能预加载，通过权重等方式结合业务层面，分析出哪些更有可能被用户浏览使用，然后再在某个可能的时刻进行预加载。如，进入朋友圈之前通过用户行为，智能预加载部分原图。\n- 做好有损体验的准备，在一些无法避免的问题面前做好有损体验（如，非UI进程crash，可以自己解决就不要让用户感知，或者UI进程crash了，做好场景恢复）\n- 做好各项有效监控：crash(注意还有JNI的)、anr(定期扫描文件)、掉帧(绘制监控、activity生命周期监控等)、异常状态监控(本地Log根据需要不同级别打Log并选择性上报监控)等\n- 文件存储推荐放在`/sdcard/Android/data/[package name]/`里(在应用卸载时，会随即删除)(`Context#getExternalFilesDir()`)，而非`/sdcard/`根目录建文件夹（节操问题）\n- 通过gradle的`shrinkResources`与`minifyEnabled`参数可以简单快速的在编包的时候自动删除无用资源\n- 由于resources.arsc在api8以后，aapt中默认采用UTF-8编码，导致资源中大都是中文的resources.arsc相比采用UTF-16编码更大，此时，可以考虑aapt中指定使用UTF-16\n- 谷歌建议，大于10M的大型应用考虑安装到SD卡上: [App Install Location](http://developer.android.com/intl/zh-cn/guide/topics/data/install-location.html)\n- 当然运维也是一方面: [Optimize Your App](http://developer.android.com/intl/zh-cn/distribute/essentials/optimizing-your-app.html)\n- 在已知并且不需要栈数据的情况下，就没有必要需要使用异常，或创建`Throwable`生成栈快照是一项耗时的工作。\n- 需要十分明确发布环境以及测试环境，明确仅仅为了方便测试的代码以及工具在发布环境不会被带上。\n\n---\n\n- 最后一次更新时间: 2016-9-19，[本文迭代日志](https://github.com/Jacksgong/Blog/commits/master/source/_posts/android_optimize.md)。\n\n---\n\n- [应用的核心质量](http://developer.android.com/intl/zh-cn/distribute/essentials/quality/core.html)\n- [JNI调用性能测试及优化](http://wiki.jikexueyuan.com/project/jni-ndk-developer-guide/performance.html)\n- [Java学习笔记：(30)谨慎地使用本地方法](http://www.programgo.com/article/39033077030/)\n- [Android 4.4 引入的 ART 对比 Dalvik 性能提升大吗，后者会不会被取代，会不会产生兼容性问题？](http://www.zhihu.com/question/21942389)\n- [性能优化之Java(Android)代码优化](http://www.trinea.cn/android/java-android-performance/)\n- [移动端网络优化](http://www.trinea.cn/android/mobile-performance-optimization/)\n- [性能优化之Java(Android)代码优化](http://www.trinea.cn/android/java-android-performance/)\n- [JNI性能测试一—JNI调用C与Java调用java性能比较](http://blog.csdn.net/zgjxwl/article/details/6232577)\n- [微信ANDROID客户端-会话速度提升70%的背后](https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&mid=207548094&idx=1&sn=1a277620bc28349368b68ed98fbefebe)\n- [新的Andriod Gradle插件可自动移除无用资源](http://www.infoq.com/cn/news/2014/11/new-android-gradle)\n- [Android安装包相关知识汇总](https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&mid=208008519&idx=1&sn=278b7793699a654b51588319b15b3013)\n- [Android优化实践](http://gold.xitu.io/entry/55272f6be4b0da2c5deb7f36)\n- [Performance Tips](https://developer.android.com/training/articles/perf-tips.html)\n- [Managing Your App's Memory](https://developer.android.com/training/articles/memory.html#YourApp)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/android_optimize.md","raw":"title: Android优化\ndate: 2015-10-26 00:26:03\npermalink: 2015/10/26/android_optimize\ntags:\n- Android\n- 优化\n- JVM\n- 多进程\n- 典范\n\n---\n\n## I. 网络相关\n\n> 更多网络优化，可参考: [Android网络](http://blog.dreamtobe.cn/2015/03/28/Android网络学习笔记整理/)\n\n- http头信息带Cache-Control域 确定缓存过期时间  防止重复请求\n- 直接用IP直连，不用域名，策略性跟新本地IP列表。 -- DNS解析过程耗时在百毫秒左右，并且还有可能存在DNS劫持。\n- 图片、JS、CSS等静态资源，采用CDN（当然如果是使用7牛之类的服务就已经给你搭建布置好了）\n- 全局图片处理采用漏斗模型全局管控，所请求的图片大小最好依照业务大小提供/最大不超过屏幕分辨率需要，如果请求原图，也不要超过`GL10.GL_MAX_TEXTURE_SIZE`\n- 全局缩略图直接采用webp，在尽可能不损失图片质量的前提下，图片大小与png比缩小30% ~ 70%\n- 如果列表里的缩略图服务器处理好的小图，可以考虑直接在列表数据请求中，直接以base64在列表数据中直接带上图片（国内还比较少，海外有些这种做法，好像web端比较常见）\n- 轮询或者socket心跳采用系统`AlarmManager`提供的闹钟服务来做，保证在系统休眠的时候cpu可以得到休眠，在需要唤醒时可以唤醒（持有cpu唤醒锁）\n- 可以通过将零散的网路的请求打包进行一次操作，避免过多的无线信号引起电量消耗。\n\n<!-- more -->\n\n\n#### 1. 传输数据格式选择\n\n- 如果是需要全量数据的，考虑使用[Protobuffers](https://developers.google.com/protocol-buffers/?hl=zh-cn) (序列化反序列化性能高于json)，并且考虑使用[nano protocol buffer](https://android.googlesource.com/platform/external/protobuf/+/master/java/README.txt)。\n- 如果传输回来的数据不需要全量读取，考虑使用[Flatbuffers](https://github.com/google/flatbuffers) (序列化反序列化几乎不耗时，耗时是在读取对象时(就这一部分如果需要优化，可以参看[Flatbuffer Use Optimize](http://blog.dreamtobe.cn/2015/01/05/Flatbuffer-Use-Optimize/)\n\n#### 2. 输入流\n> 使用具有缓存策略的输入流\n\n原 | 建议替换为\n-|-\n`InputStream` | `BufferedInputStream`\n`Reader` | `BufferedReader`\n\n## II. 基础相关\n\n#### 1. 数据结构\n> 如果已知大概需要多大，就直接给初始大小，减少扩容时额外开销。\n\n- `ArrayList`: 里面就一数组，内存小，有序取值快，扩容效率低\n- `LinkedList`: 里面就一双向链表，内存大，随机插入删除快，扩容效率高。\n- `HashSet`: 里面就一个`HashMap`，用key对外存储，目的就是不允许重复元素。\n- `ConcurrentHashMap`: 线程安全，采用细分锁，锁颗粒更小，并发性能更优\n- `Collections.synchronizedMap`: 线程安全，采用当前对象作为锁，颗粒较大，并发性能较差。\n- `SparseArray`、`SparseBooleanArray`、`SparseIntArray`:  针对Key为`Int`、`Boolean`进行了优化，采用二分法查找，简单数组存储。相比`HashMap`而言，`HashMap`每添加一个数据，大约会需要申请额外的32字节的数据，因此`Sparsexxx`在内存方面的开销会小很多。\n\n#### 2. 编码习惯\n\n- 尽量简化，不要做不需要的操作。\n- 尽量避免分配内存(创建对象): 1) 如果一个方法返回一个`String`，并且这个方法的返回值始终都是被用来`append`到一个`StringBuffer`上，就改为传入`StringBuffer`直接`append`上去，避免创建一个短生命周期的临时对象；2) 如果使用的字符串是截取自某一个字符串，就直接从那个字符串上面`substring`，不要拷贝一份，因为通过`substring`虽然创建了新的`String`对象，但是共享了里面的`char`数组中的`char`对象，减少了这块对象的创建；量使用多个一维数组，其性能高于多维数组；`int`数组性能远大于`Integer`数组性能；\n- 如果你确定不需要访问类成员，让方法`static`，这样调用时可以提升15%~20%的速度，因为不需要切换对象状态。\n- 如果某个参数是常量，别忘了使用`static final`，这样可以让`Class`首次初始化时，不需要调用`<clinit>`来创建`static`方法，而是在编译时就直接将常量替换代码中使用的位置。\n- Android开发中，类内尽量避免通过`get/set`访问成员变量，虽然这在语言的开发中是一个好的习惯，但是Android虚拟机中，对方法的调用开销远大于对变量的直接访问。在没有JIT的情况下，直接的变量访问比调用方法快3倍，在JIT下，直接的变量访问更是比调用方法快7倍!\n- 当内部类需要访问外部类的私有`方法/变量`时，考虑将这些外部类的私有`方法/变量`改用包可见的方式。首先在编写代码的时候，通过内部类访问外部类的私有`方法/变量`是合法的，但是在编译的时候为了满足这个会将需要被内部类访问的私有`方法/变量`封装一层包可见的方法，实现让内部类访问这些私有的`方法/变量`，根据前面我们有提到说方法的调用开销大于变量的调用，因此这样使得性能变差，所以我们在编码的时候可以考虑直接将需要被内部类调用的外部类私有`方法/变量`，改为包可见。\n- 尽量少使用`float`。在很多现代设备中，`double`的性能与`float`的性能几乎没有差别，但是从大小上面`double`是`float`的两倍的大小。\n- 尽量考虑使用整型而非浮点数，在较好的Android设备中，浮点数比整型慢一倍。\n- 尽量不要使用除法操作，有很多处理器有乘法器，但是没有除法器，也就是说在这些设备中需要将除法分解为其他的计算方式速度会比较慢。\n- 尽量使用系统sdk中提供的方法，而非自己去实现。如`String.indexOf()`相关的API，Dalvik将会替换为内部方法；`System.arraycopy()`方法在Nexus One手机上，会比我们上层写的类似方法的执行速度快9倍。\n- 谨慎编写native，性能不一定更好，Native并不是用于使得性能更好，而是用于有些已经存在的库是使用native语言实现的，我们需要引入Android，这时才使用。1) 需要多出开销在维持Java-native的通信；2) 在native中创建的资源由于在native heap上面，因此需要主动的释放；3) 需要对不同的处理器架构进行支持，存在明显的兼容性问题需要解决。\n- 在没有JIT的设备中，面向接口编程的模式(如`Map map`)，相比直接访问对象类(如`HashMap map`)，会慢6%，但是在存在JIT的设备中，两者的速度差不多。但是内存占用方面面向接口变成会消耗更多内存，因此如果你的面向接口编程不是十分的必要的情况下可以考虑不用。\n- 在没有JIT的设备中，访问本地化变量相对与成员变量会快20%，但是在存在JIT的设备中，两者速度差不多。\n\n##### 遍历优化\n\n> 尽量使用`Iterable`而不是通过长度判断来进行遍历。\n\n```\n// 这种性能是最差的，JIT也无法对其优化。\npublic void zero() {\n    int sum = 0;\n    for (int i = 0; i < mArray.length; ++i) {\n        sum += mArray[i].mSplat;\n    }\n}\n\n// 相对zero()来说，这种写法会更快些，在存在JIT的情况下速度几乎和two()速度一样快。\npublic void one() {\n    int sum = 0;\n    // 1) 通过本地化变量，减少查询，在不存在JIT的手机下，优化较明显。\n    Foo[] localArray = mArray;\n    // 2) 获取队列长度，减少每次遍历访问变量的长度，有效优化。\n    int len = localArray.length;\n\n    for (int i = 0; i < len; ++i) {\n        sum += localArray[i].mSplat;\n    }\n}\n\n// 在无JIT的设备中，是最快的遍历方式，在存在JIT的设备中，与one()差不多快。\npublic void two() {\n    int sum = 0;\n    for (Foo a : mArray) {\n        sum += a.mSplat;\n    }\n}\n```\n\n\n## III. 数据库相关\n\n> 建多索引的原则: 哪个字段可以最快的**减少查询**结果，就把该字段放在最前面\n\n#### 无法使用索引的情况\n\n- 操作符`BETWEEN`、`LIKE`、`OR`\n- 表达式\n- `CASE WHEN`\n\n#### 不推荐\n\n- 不要设计出索引是其他索引的前缀（没有意义）\n- 更新时拒绝直接全量更新，要更新哪列就put哪列的数据\n- 如果最频繁的是更新与插入，别建很多索引 （原本表就很小就也没必要建）\n- 拒绝用大字符串创建索引\n- 避免建太多索引，查询时可能就不会选择最好的来执行\n\n#### 推荐\n\n- 多使用整型索引，效率远高于字符串索引\n- 搜索时使用SQL参数(`\"?\", parameter`)代替字符串拼接（底层有特殊优化与缓存）\n- 查询需要多少就limit多少（如判断是否含有啥，就limit 1就行了嘛）\n- 如果出现很宽的列(如blob类型)，考虑放在单独表中(在查询或者更新其他列数据时防止不必要的大数据i/o影响性能)\n\n\n## IV. JNI抉择\n\n> Android JVM相关知识，可参看: [ART、Dalvik](http://blog.dreamtobe.cn/2015/11/01/android_art_dalvik/)\n\n> Android JNI、NDK相关知识，可参看: [NDK](http://blog.dreamtobe.cn/2015/11/08/ndk/)\n\n> JNI不一定显得更快，有些会更慢。\n\n> 特点: 不用在虚拟机的框子下写代码\n\n- 可以调用更底层的高性能的代码库 -- Good\n- 如果是Dalvik，将省去了由JIT编译期转为本地代码的这个步骤。 -- Good\n- Java调用JNI的耗时较Java调用Java肯定更慢，虽然随着JDK版本的升级，差距已经越来越小(JDK1.6版本是5倍Java调用Java方法的耗时) -- Bad\n- 内存不在Java Heap，没有OOM风险，有效减少gc。 -- Good\n\n> 一些重要的参数之类，也可以考虑放在Native层，保证安全性。参考: [Android应用程序通用自动脱壳方法研究](http://blog.dreamtobe.cn/2015/07/17/wh_android_tk/)\n\n## V. 多进程抉择\n\n> 360 17个进程: [360手机卫士 Android开发 InfoQ视频 总结\n](http://blog.dreamtobe.cn/2015/03/17/360手机卫士-Android开发-InfoQ视频-总结/)，但是考虑到多进程的消耗，我们更需要关注多个组件复用同一进程。\n> 在没有做任何操作的空进程而言，其大约需要额外暂用1.4MB的内存。\n\n- 充分独立，解耦部分\n- 大内存(如临时展示大量图片的Activity)、无法解决的crash、内存泄漏等问题，考虑通过独立进程解决\n- 独立于UI进程，需要在后台长期存活的服务(参看[Android中线程、进程与组件的关系](http://blog.dreamtobe.cn/2015/04/08/android_thread_process_components/))\n- 非己方第三方库（无法保证稳定、性能等问题，并且独立组件），可考虑独立进程\n\n> 最后，多进程存在的两个问题: 1. 由于进程间通讯或者首次调起进程的消耗等，带来的cpu、i/o等的资源竞争。2. 也许对于部分同事来说，会还有可读性问题吧，毕竟多了层IPC绕了点。\n\n## VI. UI层面\n\n> 相关深入优化，可参看[Android绘制布局相关](http://blog.dreamtobe.cn/2015/10/20/android-view/)\n\n> 对于卡顿相关排查推荐参看: [Android性能优化案例研究(上)](http://www.importnew.com/3784.html)与[Android性能优化案例研究（下）](http://www.importnew.com/4065.html)\n\n- 减少不必要的不透明背景相互覆盖，减少重绘，因为GPU不得不一遍又一遍的画这些图层\n- 保证UI线程一次完整的绘制(measure、layout、draw)不超过16ms(60Hz)，否则就会出现掉帧，卡顿的现象\n- 在UI线程中频繁的调度中，尽量少的对象创建，减少gc等。\n- 分步加载（减少任务颗粒）、预加载、异步加载(区别出耗时任务，采用异步加载)\n\n\n## VII. 库推荐\n\n> 可以参考Falcon Pro作者的推荐: [Falcon Pro 3如何完成独立开发演讲分析](http://blog.dreamtobe.cn/2015/06/14/Falcon-Pro-3-如何完成独立开发演讲分析/)\n\n#### 1. 响应式编程\n\n[RxJava](https://github.com/ReactiveX/RxJava) (响应式编程，代码更加简洁，异步处理更快快捷、异常处理更加彻底、数据管道理念)\n\n相关了解可以参看: [RxJava](http://blog.dreamtobe.cn/2015/04/29/RxJava学习整理/)\n\n#### 2. 图片加载:\n- 小型快捷: [Picasso](https://github.com/square/picasso) (接口干净、支持okhttp、功能强大、稳定、高效, 可以延读: [PhotoGallery、Volley、Picasso 比较](http://blog.dreamtobe.cn/2015/04/28/PhotoGallery%E3%80%81Volley%E3%80%81Picasso-%E6%AF%94%E8%BE%83/))\n- 大项目考虑: [Fresco](http://fresco-cn.org) (2.5M，pipeline解决资源竞争、Native Heep解决OOM，的同时减少GC)\n\n#### 3. 网络底层库:\n\n[Okhttp](https://github.com/square/okhttp): 默认gzip、缓存、安全等\n\n#### 4. 网络基层:\n\n[Retrofit](https://github.com/square/retrofit): 非常好用的REST Client，结合RxJava简单API实现、类型安全，简单快捷\n\n#### 5. 数据库层:\n\n[Realm](https://realm.io): 效率极高(Falcon Pro 3的作者Joaquim用了该库以后，所有数据库操作都放到了UI线程)（基于TightDB，底层C++闭源，Java层开源，简单使用，性能远高于SQLite等）\n\n#### 6. Crash上报:\n\n[Fabric](https://fabric.io): 全面的信息(新版本还支持JNI Crash获取和上报)、稳定的数据、及时的通知、强大的反混淆(其实在混淆后有上传mapping)\n\n#### 7. 内存泄漏自动化检测\n\n[LeakCanary](https://github.com/square/leakcanary): 自动化泄漏检测与分析 ( 可以看看这个[LeakCanary使用总结](http://blog.dreamtobe.cn/2015/05/18/LeakCanary%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/)与[Leakcanary Square的一款Android/Java内存泄漏检测工具](http://blog.dreamtobe.cn/2015/05/12/Leakcanary-Square%E7%9A%84%E4%B8%80%E6%AC%BEAndroid:Java%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E6%A3%80%E6%B5%8B%E5%B7%A5%E5%85%B7/))\n\n#### 8. 其他\n\n - 代码质量: [phabricator 的arc diff](http://phabricator.org) (尽量小颗粒度的arc diff 与update review)，其实也可以看看Google是如何做的: [笔记-谷歌是如何做代码审查的](http://blog.dreamtobe.cn/2015/03/23/%5B笔记%5D谷歌是如何做代码审查的/)，还有一点的TODO要写好deadline与master\n - 编包管理: [Gitlab CI](https://about.gitlab.com/gitlab-ci/) (结合Gitlab，功能够用，方便)\n\n## VIII. 内存\n\n> 根据设备可用内存的不同，每个设备给应用限定的Heap大小是有限的，当达到对应限定值还申请空间时，就会收到`OutOfMemoryError`的异常。\n\n### 1. 内存管理\n\n> Android根据不同的进程优先级，对不同进程进行回收来满足内存的供求，可以参照这篇文章: [Android中线程、进程与组件的关系](http://blog.dreamtobe.cn/2015/04/08/android_thread_process_components/)。\n> 在后台进程的LRU队列中，除了LRU为主要的规则以外，系统也会根据杀死一个后台进程所获得的内存是否更多作为一定的参考依据，因此后台进程为了保活，尽量少的内存，尽可能的释放内存也是十分必要的。\n\n- 尽可能的缩短`Service`的存活周期（可以考虑直接使用执行完任务直接关闭自己的`IntentService`），也就是说在Service没有任何任务的时候，尽可能的将其关闭，以减少系统资源的浪费。\n- 可以通过系统服务`ActivityManager`中的`getMemoryClass()`获知当前设备允许每个应用大概可以有多少兆的内存使用(如果在`AndroidManifest`设置了`largeHeap=true`，使用`getLargeMemoryClass()`获知)，并且让应用中的内存始终低于这个值，避免OOM。\n- 相对于静态常量而言，通常`Enum`枚举需要大于两倍的内存空间来存储相同的数据。\n- Java中的每个`class`(或者匿名类)大约占用500字节。\n- 每个对象实例大约开销12~16字节的内存。\n\n#### `onTrimMemory()`回调处理\n\n> 监听`onTrimMemory()`的回调，根据不同的内存等级，做相应的释放以此让系统资源更好的利用，以及自己的进程可以更好的保活。\n\n##### 当应用还在前台\n\n- `TRIM_MEMORY_RUNNING_MODERATE`: 当前应用还在运行不会被杀，但是设备可运行的内存较低，系统正在从后台进程的LRU列表中杀死进程其他进程。\n- `TRIM_MEMORY_RUNNING_LOW`: 当前应用还在运行不会被杀，但是设备可运行内存很低了，会直接影响当前应用的性能，当前应用也需要考虑释放一些无用资源。\n- `TRIM_MEMORY_RUNNING_CRITICAL`: 当前应用还在运行中，但是系统已经杀死了后台进程LRU队列中绝大多数的进程了，当前应用需要考虑释放所有不重要的资源，否则很可能系统就会开始清理服务进程，可见进程等。也就说，如果内存依然不足以支撑，当前应用的服务也很有可能会被清理掉。\n\n##### `TRIM_MEMORY_UI_HIDDEN`\n\n当回调回来的时候，说明应用的UI对用户不可见的，此时释放UI使用的一些资源。这个不同于`onStop()`，`onStop()`的回调，有可能仅仅是当前应用中进入了另外一个`Activity`。\n\n##### 当应用处于后台\n\n- `TRIM_MEMORY_BACKGROUND`: 系统已经处于低可用内存的情况，并且当前进程处于后台进程LRU队列队头附近，因此还是比较安全的，但是系统可能已经开始从LRU队列中清理进程了，此时当前应用需要释放部分资源，以保证尽量的保活。\n- `TRIM_MEMORY_MODERATE`: 系统处于低可用内存的情况，并且当前进程处于后台进程LRU队列中间的位置，如果内存进一步紧缺，当前进程就有可能被清理掉，需要进一步释放资源。\n- `TRIM_MEMORY_COMPLETE`: 系统处于低可用内存的情况，并且当前进程处于后天进程LRU队列队首的位置，如果内存进一步紧缺，下一个清理的就是当前进程，需要释放尽可能的资源来保活当前进程。在API14之前，`onLowMemory()`就相当于这个级别的回调。\n\n### 2. 避免内存泄漏相关\n\n- 无法解决的泄漏（如系统底层引起的)移至独立进程(如2.x机器存在webview的内存泄漏)\n- 大图片资源/全屏图片资源，要不放在`assets`下，要不放在`nodpi`下，要不都带，否则缩放会带来额外耗时与内存问题\n- 4.x在`AndroidManifest`中配置`largeHeap=true`，一般dvm heep最大值可增大50%以上。但是没有特殊明确的需要，尽可能的避免这样设置，因为这样一来很可能隐藏了消耗了完全没有必要的内存的问题。\n- 在`Activity#onDestory`以后，遍历所有View，干掉所有View可能的引用(通常泄漏一个Activity，连带泄漏其上的View，然后就泄漏了大于全屏图片的内存)。\n- 万金油: 静态化内部类，使用`WeakReference`引用外部类，防止内部类长期存在，泄漏了外部类的问题。\n\n\n### 3. 图片\n\n> Android 2.3.x或更低版本的设备，是将所有的Bitmap对象存储在native heap，因此我们很难通过工具去检测其内存大小，在Android 3.0或更高版本的设备，已经调整为存储到了每个应用自身的Dalvik heap中了。\n\n- 全局统一`BitmapFactory#decode`出口，捕获此处decode oom，控制长宽（小于屏幕分辨率大小 ）\n- 如果采用RGB_8888 oom了，尝试RGB_565(相比内存小一半以上(w*h*2(bytes)))\n- 如果还考虑2.x机器的话，设置`BitmapFactory#options`的`InNativeAlloc`参数为true，此时decode的内存不会上报到dvm中，便不会oom。\n- 建议采用[lingochamp/QiniuImageLoader](https://github.com/lingochamp/QiniuImageLoader)的方式，所有图片的操作都放到云端处理，本地默认使用Webp，并且获取的每个位置的图片，尽量通过精确的大小按需获取，避免内存没必要的消耗。\n\n\n## IX. 线程\n\n- 采用全局线程池管理体系，有效避免野线程。可参照 [ThreadDebugger-demo/DemoThreadPoolCentral.java](https://github.com/Jacksgong/ThreadDebugger/blob/master/demo/src/main/java/cn/dreamtobe/threaddebugger/demo/DemoThreadPoolCentral.java)\n- 结合全局线程池管理体系，使用[ThreadDebugger](https://github.com/Jacksgong/ThreadDebugger)监控线程，避免线程泄漏的存在。\n\n## X. 编译与发布\n\n- 考虑采用DexGuard，或ProGuard结合相关资源混淆来提高安全与包大小，参考: [DexGuard、Proguard、Multi-dex](http://blog.dreamtobe.cn/2015/11/04/guard_multi_dex/)\n- 结合Gradle、Gitlab-CI 与Slack(Incoming WebHooks)，快速实现，打相关git上打相关Tag，自动编相关包通知Slack。\n- 结合Gitlab-CI与Slack(Incoming WebHooks)，快速实现，所有的push，Slack快速获知。\n- 结合Gradle中Android提供的`productFlavors`参数，定义不同的variations，快速批量打渠道包\n- 迭代过程中，包定期做多纬度扫描，如包大小、字节码大小变化、红线扫描、资源变化扫描、相同测试用例耗电量内存等等，更多的可以参考 [360手机卫士 Android开发 InfoQ视频 总结](http://blog.dreamtobe.cn/2015/03/17/360%E6%89%8B%E6%9C%BA%E5%8D%AB%E5%A3%AB-Android%E5%BC%80%E5%8F%91-InfoQ%E8%A7%86%E9%A2%91-%E6%80%BB%E7%BB%93/)\n- 迭代过程中，对关键`Activity`以及`Application`对打开的耗时进行统计，观察其变化，避免因为迭代导致某些页面非预期的打开变慢。\n\n## XI. 工具\n\n- [TraceView](https://developer.android.com/studio/profile/traceview.html)可以有效的更重一段时间内哪个方法最耗时，但是需要注意的是目前TraceView在录制过中，会关闭JIT，因此也许有些JIT的优化在TraceView过程被忽略了。\n- [Systrace](https://developer.android.com/studio/profile/systrace.html)可以有效的分析掉帧的原因。\n- [HierarchyViewer](https://developer.android.com/studio/profile/optimize-ui.html)可以有效的分析View层级以及布局每个节点`measure`、`layout`、`draw`的耗时。\n\n## XII. 其他\n\n- `final`能用就用（高效: 编译器在调用`final`方法时，会转入内嵌机制）\n- 懒预加载，如简单的`ListView`、`RecyclerView`等滑动列表控件，停留在当前页面的时候，可以考虑直接预加载下个页面所需图片\n- 智能预加载，通过权重等方式结合业务层面，分析出哪些更有可能被用户浏览使用，然后再在某个可能的时刻进行预加载。如，进入朋友圈之前通过用户行为，智能预加载部分原图。\n- 做好有损体验的准备，在一些无法避免的问题面前做好有损体验（如，非UI进程crash，可以自己解决就不要让用户感知，或者UI进程crash了，做好场景恢复）\n- 做好各项有效监控：crash(注意还有JNI的)、anr(定期扫描文件)、掉帧(绘制监控、activity生命周期监控等)、异常状态监控(本地Log根据需要不同级别打Log并选择性上报监控)等\n- 文件存储推荐放在`/sdcard/Android/data/[package name]/`里(在应用卸载时，会随即删除)(`Context#getExternalFilesDir()`)，而非`/sdcard/`根目录建文件夹（节操问题）\n- 通过gradle的`shrinkResources`与`minifyEnabled`参数可以简单快速的在编包的时候自动删除无用资源\n- 由于resources.arsc在api8以后，aapt中默认采用UTF-8编码，导致资源中大都是中文的resources.arsc相比采用UTF-16编码更大，此时，可以考虑aapt中指定使用UTF-16\n- 谷歌建议，大于10M的大型应用考虑安装到SD卡上: [App Install Location](http://developer.android.com/intl/zh-cn/guide/topics/data/install-location.html)\n- 当然运维也是一方面: [Optimize Your App](http://developer.android.com/intl/zh-cn/distribute/essentials/optimizing-your-app.html)\n- 在已知并且不需要栈数据的情况下，就没有必要需要使用异常，或创建`Throwable`生成栈快照是一项耗时的工作。\n- 需要十分明确发布环境以及测试环境，明确仅仅为了方便测试的代码以及工具在发布环境不会被带上。\n\n---\n\n- 最后一次更新时间: 2016-9-19，[本文迭代日志](https://github.com/Jacksgong/Blog/commits/master/source/_posts/android_optimize.md)。\n\n---\n\n- [应用的核心质量](http://developer.android.com/intl/zh-cn/distribute/essentials/quality/core.html)\n- [JNI调用性能测试及优化](http://wiki.jikexueyuan.com/project/jni-ndk-developer-guide/performance.html)\n- [Java学习笔记：(30)谨慎地使用本地方法](http://www.programgo.com/article/39033077030/)\n- [Android 4.4 引入的 ART 对比 Dalvik 性能提升大吗，后者会不会被取代，会不会产生兼容性问题？](http://www.zhihu.com/question/21942389)\n- [性能优化之Java(Android)代码优化](http://www.trinea.cn/android/java-android-performance/)\n- [移动端网络优化](http://www.trinea.cn/android/mobile-performance-optimization/)\n- [性能优化之Java(Android)代码优化](http://www.trinea.cn/android/java-android-performance/)\n- [JNI性能测试一—JNI调用C与Java调用java性能比较](http://blog.csdn.net/zgjxwl/article/details/6232577)\n- [微信ANDROID客户端-会话速度提升70%的背后](https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&mid=207548094&idx=1&sn=1a277620bc28349368b68ed98fbefebe)\n- [新的Andriod Gradle插件可自动移除无用资源](http://www.infoq.com/cn/news/2014/11/new-android-gradle)\n- [Android安装包相关知识汇总](https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&mid=208008519&idx=1&sn=278b7793699a654b51588319b15b3013)\n- [Android优化实践](http://gold.xitu.io/entry/55272f6be4b0da2c5deb7f36)\n- [Performance Tips](https://developer.android.com/training/articles/perf-tips.html)\n- [Managing Your App's Memory](https://developer.android.com/training/articles/memory.html#YourApp)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2015/10/26/android_optimize","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66ih001y95bu2x5yewla","content":"<h2 id=\"I-网络相关\"><a href=\"#I-网络相关\" class=\"headerlink\" title=\"I. 网络相关\"></a>I. 网络相关</h2><blockquote>\n<p>更多网络优化，可参考: <a href=\"http://blog.dreamtobe.cn/2015/03/28/Android网络学习笔记整理/\">Android网络</a></p>\n</blockquote>\n<ul>\n<li>http头信息带Cache-Control域 确定缓存过期时间  防止重复请求</li>\n<li>直接用IP直连，不用域名，策略性跟新本地IP列表。 – DNS解析过程耗时在百毫秒左右，并且还有可能存在DNS劫持。</li>\n<li>图片、JS、CSS等静态资源，采用CDN（当然如果是使用7牛之类的服务就已经给你搭建布置好了）</li>\n<li>全局图片处理采用漏斗模型全局管控，所请求的图片大小最好依照业务大小提供/最大不超过屏幕分辨率需要，如果请求原图，也不要超过<code>GL10.GL_MAX_TEXTURE_SIZE</code></li>\n<li>全局缩略图直接采用webp，在尽可能不损失图片质量的前提下，图片大小与png比缩小30% ~ 70%</li>\n<li>如果列表里的缩略图服务器处理好的小图，可以考虑直接在列表数据请求中，直接以base64在列表数据中直接带上图片（国内还比较少，海外有些这种做法，好像web端比较常见）</li>\n<li>轮询或者socket心跳采用系统<code>AlarmManager</code>提供的闹钟服务来做，保证在系统休眠的时候cpu可以得到休眠，在需要唤醒时可以唤醒（持有cpu唤醒锁）</li>\n<li>可以通过将零散的网路的请求打包进行一次操作，避免过多的无线信号引起电量消耗。</li>\n</ul>\n<a id=\"more\"></a>\n<h4 id=\"1-传输数据格式选择\"><a href=\"#1-传输数据格式选择\" class=\"headerlink\" title=\"1. 传输数据格式选择\"></a>1. 传输数据格式选择</h4><ul>\n<li>如果是需要全量数据的，考虑使用<a href=\"https://developers.google.com/protocol-buffers/?hl=zh-cn\" target=\"_blank\" rel=\"external\">Protobuffers</a> (序列化反序列化性能高于json)，并且考虑使用<a href=\"https://android.googlesource.com/platform/external/protobuf/+/master/java/README.txt\" target=\"_blank\" rel=\"external\">nano protocol buffer</a>。</li>\n<li>如果传输回来的数据不需要全量读取，考虑使用<a href=\"https://github.com/google/flatbuffers\" target=\"_blank\" rel=\"external\">Flatbuffers</a> (序列化反序列化几乎不耗时，耗时是在读取对象时(就这一部分如果需要优化，可以参看<a href=\"http://blog.dreamtobe.cn/2015/01/05/Flatbuffer-Use-Optimize/\">Flatbuffer Use Optimize</a></li>\n</ul>\n<h4 id=\"2-输入流\"><a href=\"#2-输入流\" class=\"headerlink\" title=\"2. 输入流\"></a>2. 输入流</h4><blockquote>\n<p>使用具有缓存策略的输入流</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>原</th>\n<th>建议替换为</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>InputStream</code></td>\n<td><code>BufferedInputStream</code></td>\n</tr>\n<tr>\n<td><code>Reader</code></td>\n<td><code>BufferedReader</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"II-基础相关\"><a href=\"#II-基础相关\" class=\"headerlink\" title=\"II. 基础相关\"></a>II. 基础相关</h2><h4 id=\"1-数据结构\"><a href=\"#1-数据结构\" class=\"headerlink\" title=\"1. 数据结构\"></a>1. 数据结构</h4><blockquote>\n<p>如果已知大概需要多大，就直接给初始大小，减少扩容时额外开销。</p>\n</blockquote>\n<ul>\n<li><code>ArrayList</code>: 里面就一数组，内存小，有序取值快，扩容效率低</li>\n<li><code>LinkedList</code>: 里面就一双向链表，内存大，随机插入删除快，扩容效率高。</li>\n<li><code>HashSet</code>: 里面就一个<code>HashMap</code>，用key对外存储，目的就是不允许重复元素。</li>\n<li><code>ConcurrentHashMap</code>: 线程安全，采用细分锁，锁颗粒更小，并发性能更优</li>\n<li><code>Collections.synchronizedMap</code>: 线程安全，采用当前对象作为锁，颗粒较大，并发性能较差。</li>\n<li><code>SparseArray</code>、<code>SparseBooleanArray</code>、<code>SparseIntArray</code>:  针对Key为<code>Int</code>、<code>Boolean</code>进行了优化，采用二分法查找，简单数组存储。相比<code>HashMap</code>而言，<code>HashMap</code>每添加一个数据，大约会需要申请额外的32字节的数据，因此<code>Sparsexxx</code>在内存方面的开销会小很多。</li>\n</ul>\n<h4 id=\"2-编码习惯\"><a href=\"#2-编码习惯\" class=\"headerlink\" title=\"2. 编码习惯\"></a>2. 编码习惯</h4><ul>\n<li>尽量简化，不要做不需要的操作。</li>\n<li>尽量避免分配内存(创建对象): 1) 如果一个方法返回一个<code>String</code>，并且这个方法的返回值始终都是被用来<code>append</code>到一个<code>StringBuffer</code>上，就改为传入<code>StringBuffer</code>直接<code>append</code>上去，避免创建一个短生命周期的临时对象；2) 如果使用的字符串是截取自某一个字符串，就直接从那个字符串上面<code>substring</code>，不要拷贝一份，因为通过<code>substring</code>虽然创建了新的<code>String</code>对象，但是共享了里面的<code>char</code>数组中的<code>char</code>对象，减少了这块对象的创建；量使用多个一维数组，其性能高于多维数组；<code>int</code>数组性能远大于<code>Integer</code>数组性能；</li>\n<li>如果你确定不需要访问类成员，让方法<code>static</code>，这样调用时可以提升15%~20%的速度，因为不需要切换对象状态。</li>\n<li>如果某个参数是常量，别忘了使用<code>static final</code>，这样可以让<code>Class</code>首次初始化时，不需要调用<code>&lt;clinit&gt;</code>来创建<code>static</code>方法，而是在编译时就直接将常量替换代码中使用的位置。</li>\n<li>Android开发中，类内尽量避免通过<code>get/set</code>访问成员变量，虽然这在语言的开发中是一个好的习惯，但是Android虚拟机中，对方法的调用开销远大于对变量的直接访问。在没有JIT的情况下，直接的变量访问比调用方法快3倍，在JIT下，直接的变量访问更是比调用方法快7倍!</li>\n<li>当内部类需要访问外部类的私有<code>方法/变量</code>时，考虑将这些外部类的私有<code>方法/变量</code>改用包可见的方式。首先在编写代码的时候，通过内部类访问外部类的私有<code>方法/变量</code>是合法的，但是在编译的时候为了满足这个会将需要被内部类访问的私有<code>方法/变量</code>封装一层包可见的方法，实现让内部类访问这些私有的<code>方法/变量</code>，根据前面我们有提到说方法的调用开销大于变量的调用，因此这样使得性能变差，所以我们在编码的时候可以考虑直接将需要被内部类调用的外部类私有<code>方法/变量</code>，改为包可见。</li>\n<li>尽量少使用<code>float</code>。在很多现代设备中，<code>double</code>的性能与<code>float</code>的性能几乎没有差别，但是从大小上面<code>double</code>是<code>float</code>的两倍的大小。</li>\n<li>尽量考虑使用整型而非浮点数，在较好的Android设备中，浮点数比整型慢一倍。</li>\n<li>尽量不要使用除法操作，有很多处理器有乘法器，但是没有除法器，也就是说在这些设备中需要将除法分解为其他的计算方式速度会比较慢。</li>\n<li>尽量使用系统sdk中提供的方法，而非自己去实现。如<code>String.indexOf()</code>相关的API，Dalvik将会替换为内部方法；<code>System.arraycopy()</code>方法在Nexus One手机上，会比我们上层写的类似方法的执行速度快9倍。</li>\n<li>谨慎编写native，性能不一定更好，Native并不是用于使得性能更好，而是用于有些已经存在的库是使用native语言实现的，我们需要引入Android，这时才使用。1) 需要多出开销在维持Java-native的通信；2) 在native中创建的资源由于在native heap上面，因此需要主动的释放；3) 需要对不同的处理器架构进行支持，存在明显的兼容性问题需要解决。</li>\n<li>在没有JIT的设备中，面向接口编程的模式(如<code>Map map</code>)，相比直接访问对象类(如<code>HashMap map</code>)，会慢6%，但是在存在JIT的设备中，两者的速度差不多。但是内存占用方面面向接口变成会消耗更多内存，因此如果你的面向接口编程不是十分的必要的情况下可以考虑不用。</li>\n<li>在没有JIT的设备中，访问本地化变量相对与成员变量会快20%，但是在存在JIT的设备中，两者速度差不多。</li>\n</ul>\n<h5 id=\"遍历优化\"><a href=\"#遍历优化\" class=\"headerlink\" title=\"遍历优化\"></a>遍历优化</h5><blockquote>\n<p>尽量使用<code>Iterable</code>而不是通过长度判断来进行遍历。</p>\n</blockquote>\n<figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 这种性能是最差的，JIT也无法对其优化。</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> zero() &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">sum</span> = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; mArray.length; ++i) &#123;</div><div class=\"line\">        <span class=\"keyword\">sum</span> += mArray[i].mSplat;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 相对zero()来说，这种写法会更快些，在存在JIT的情况下速度几乎和two()速度一样快。</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> one() &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">sum</span> = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"comment\">// 1) 通过本地化变量，减少查询，在不存在JIT的手机下，优化较明显。</span></div><div class=\"line\">    Foo[] localArray = mArray;</div><div class=\"line\">    <span class=\"comment\">// 2) 获取队列长度，减少每次遍历访问变量的长度，有效优化。</span></div><div class=\"line\">    <span class=\"keyword\">int</span> len = localArray.length;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; ++i) &#123;</div><div class=\"line\">        <span class=\"keyword\">sum</span> += localArray[i].mSplat;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 在无JIT的设备中，是最快的遍历方式，在存在JIT的设备中，与one()差不多快。</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> two() &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">sum</span> = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (Foo a : mArray) &#123;</div><div class=\"line\">        <span class=\"keyword\">sum</span> += a.mSplat;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"III-数据库相关\"><a href=\"#III-数据库相关\" class=\"headerlink\" title=\"III. 数据库相关\"></a>III. 数据库相关</h2><blockquote>\n<p>建多索引的原则: 哪个字段可以最快的<strong>减少查询</strong>结果，就把该字段放在最前面</p>\n</blockquote>\n<h4 id=\"无法使用索引的情况\"><a href=\"#无法使用索引的情况\" class=\"headerlink\" title=\"无法使用索引的情况\"></a>无法使用索引的情况</h4><ul>\n<li>操作符<code>BETWEEN</code>、<code>LIKE</code>、<code>OR</code></li>\n<li>表达式</li>\n<li><code>CASE WHEN</code></li>\n</ul>\n<h4 id=\"不推荐\"><a href=\"#不推荐\" class=\"headerlink\" title=\"不推荐\"></a>不推荐</h4><ul>\n<li>不要设计出索引是其他索引的前缀（没有意义）</li>\n<li>更新时拒绝直接全量更新，要更新哪列就put哪列的数据</li>\n<li>如果最频繁的是更新与插入，别建很多索引 （原本表就很小就也没必要建）</li>\n<li>拒绝用大字符串创建索引</li>\n<li>避免建太多索引，查询时可能就不会选择最好的来执行</li>\n</ul>\n<h4 id=\"推荐\"><a href=\"#推荐\" class=\"headerlink\" title=\"推荐\"></a>推荐</h4><ul>\n<li>多使用整型索引，效率远高于字符串索引</li>\n<li>搜索时使用SQL参数(<code>&quot;?&quot;, parameter</code>)代替字符串拼接（底层有特殊优化与缓存）</li>\n<li>查询需要多少就limit多少（如判断是否含有啥，就limit 1就行了嘛）</li>\n<li>如果出现很宽的列(如blob类型)，考虑放在单独表中(在查询或者更新其他列数据时防止不必要的大数据i/o影响性能)</li>\n</ul>\n<h2 id=\"IV-JNI抉择\"><a href=\"#IV-JNI抉择\" class=\"headerlink\" title=\"IV. JNI抉择\"></a>IV. JNI抉择</h2><blockquote>\n<p>Android JVM相关知识，可参看: <a href=\"http://blog.dreamtobe.cn/2015/11/01/android_art_dalvik/\">ART、Dalvik</a></p>\n<p>Android JNI、NDK相关知识，可参看: <a href=\"http://blog.dreamtobe.cn/2015/11/08/ndk/\">NDK</a></p>\n<p>JNI不一定显得更快，有些会更慢。</p>\n<p>特点: 不用在虚拟机的框子下写代码</p>\n</blockquote>\n<ul>\n<li>可以调用更底层的高性能的代码库 – Good</li>\n<li>如果是Dalvik，将省去了由JIT编译期转为本地代码的这个步骤。 – Good</li>\n<li>Java调用JNI的耗时较Java调用Java肯定更慢，虽然随着JDK版本的升级，差距已经越来越小(JDK1.6版本是5倍Java调用Java方法的耗时) – Bad</li>\n<li>内存不在Java Heap，没有OOM风险，有效减少gc。 – Good</li>\n</ul>\n<blockquote>\n<p>一些重要的参数之类，也可以考虑放在Native层，保证安全性。参考: <a href=\"http://blog.dreamtobe.cn/2015/07/17/wh_android_tk/\">Android应用程序通用自动脱壳方法研究</a></p>\n</blockquote>\n<h2 id=\"V-多进程抉择\"><a href=\"#V-多进程抉择\" class=\"headerlink\" title=\"V. 多进程抉择\"></a>V. 多进程抉择</h2><blockquote>\n<p>360 17个进程: <a href=\"http://blog.dreamtobe.cn/2015/03/17/360手机卫士-Android开发-InfoQ视频-总结/\">360手机卫士 Android开发 InfoQ视频 总结\n</a>，但是考虑到多进程的消耗，我们更需要关注多个组件复用同一进程。<br>在没有做任何操作的空进程而言，其大约需要额外暂用1.4MB的内存。</p>\n</blockquote>\n<ul>\n<li>充分独立，解耦部分</li>\n<li>大内存(如临时展示大量图片的Activity)、无法解决的crash、内存泄漏等问题，考虑通过独立进程解决</li>\n<li>独立于UI进程，需要在后台长期存活的服务(参看<a href=\"http://blog.dreamtobe.cn/2015/04/08/android_thread_process_components/\">Android中线程、进程与组件的关系</a>)</li>\n<li>非己方第三方库（无法保证稳定、性能等问题，并且独立组件），可考虑独立进程</li>\n</ul>\n<blockquote>\n<p>最后，多进程存在的两个问题: 1. 由于进程间通讯或者首次调起进程的消耗等，带来的cpu、i/o等的资源竞争。2. 也许对于部分同事来说，会还有可读性问题吧，毕竟多了层IPC绕了点。</p>\n</blockquote>\n<h2 id=\"VI-UI层面\"><a href=\"#VI-UI层面\" class=\"headerlink\" title=\"VI. UI层面\"></a>VI. UI层面</h2><blockquote>\n<p>相关深入优化，可参看<a href=\"http://blog.dreamtobe.cn/2015/10/20/android-view/\">Android绘制布局相关</a></p>\n<p>对于卡顿相关排查推荐参看: <a href=\"http://www.importnew.com/3784.html\" target=\"_blank\" rel=\"external\">Android性能优化案例研究(上)</a>与<a href=\"http://www.importnew.com/4065.html\" target=\"_blank\" rel=\"external\">Android性能优化案例研究（下）</a></p>\n</blockquote>\n<ul>\n<li>减少不必要的不透明背景相互覆盖，减少重绘，因为GPU不得不一遍又一遍的画这些图层</li>\n<li>保证UI线程一次完整的绘制(measure、layout、draw)不超过16ms(60Hz)，否则就会出现掉帧，卡顿的现象</li>\n<li>在UI线程中频繁的调度中，尽量少的对象创建，减少gc等。</li>\n<li>分步加载（减少任务颗粒）、预加载、异步加载(区别出耗时任务，采用异步加载)</li>\n</ul>\n<h2 id=\"VII-库推荐\"><a href=\"#VII-库推荐\" class=\"headerlink\" title=\"VII. 库推荐\"></a>VII. 库推荐</h2><blockquote>\n<p>可以参考Falcon Pro作者的推荐: <a href=\"http://blog.dreamtobe.cn/2015/06/14/Falcon-Pro-3-如何完成独立开发演讲分析/\">Falcon Pro 3如何完成独立开发演讲分析</a></p>\n</blockquote>\n<h4 id=\"1-响应式编程\"><a href=\"#1-响应式编程\" class=\"headerlink\" title=\"1. 响应式编程\"></a>1. 响应式编程</h4><p><a href=\"https://github.com/ReactiveX/RxJava\" target=\"_blank\" rel=\"external\">RxJava</a> (响应式编程，代码更加简洁，异步处理更快快捷、异常处理更加彻底、数据管道理念)</p>\n<p>相关了解可以参看: <a href=\"http://blog.dreamtobe.cn/2015/04/29/RxJava学习整理/\">RxJava</a></p>\n<h4 id=\"2-图片加载\"><a href=\"#2-图片加载\" class=\"headerlink\" title=\"2. 图片加载:\"></a>2. 图片加载:</h4><ul>\n<li>小型快捷: <a href=\"https://github.com/square/picasso\" target=\"_blank\" rel=\"external\">Picasso</a> (接口干净、支持okhttp、功能强大、稳定、高效, 可以延读: <a href=\"http://blog.dreamtobe.cn/2015/04/28/PhotoGallery%E3%80%81Volley%E3%80%81Picasso-%E6%AF%94%E8%BE%83/\">PhotoGallery、Volley、Picasso 比较</a>)</li>\n<li>大项目考虑: <a href=\"http://fresco-cn.org\" target=\"_blank\" rel=\"external\">Fresco</a> (2.5M，pipeline解决资源竞争、Native Heep解决OOM，的同时减少GC)</li>\n</ul>\n<h4 id=\"3-网络底层库\"><a href=\"#3-网络底层库\" class=\"headerlink\" title=\"3. 网络底层库:\"></a>3. 网络底层库:</h4><p><a href=\"https://github.com/square/okhttp\" target=\"_blank\" rel=\"external\">Okhttp</a>: 默认gzip、缓存、安全等</p>\n<h4 id=\"4-网络基层\"><a href=\"#4-网络基层\" class=\"headerlink\" title=\"4. 网络基层:\"></a>4. 网络基层:</h4><p><a href=\"https://github.com/square/retrofit\" target=\"_blank\" rel=\"external\">Retrofit</a>: 非常好用的REST Client，结合RxJava简单API实现、类型安全，简单快捷</p>\n<h4 id=\"5-数据库层\"><a href=\"#5-数据库层\" class=\"headerlink\" title=\"5. 数据库层:\"></a>5. 数据库层:</h4><p><a href=\"https://realm.io\" target=\"_blank\" rel=\"external\">Realm</a>: 效率极高(Falcon Pro 3的作者Joaquim用了该库以后，所有数据库操作都放到了UI线程)（基于TightDB，底层C++闭源，Java层开源，简单使用，性能远高于SQLite等）</p>\n<h4 id=\"6-Crash上报\"><a href=\"#6-Crash上报\" class=\"headerlink\" title=\"6. Crash上报:\"></a>6. Crash上报:</h4><p><a href=\"https://fabric.io\" target=\"_blank\" rel=\"external\">Fabric</a>: 全面的信息(新版本还支持JNI Crash获取和上报)、稳定的数据、及时的通知、强大的反混淆(其实在混淆后有上传mapping)</p>\n<h4 id=\"7-内存泄漏自动化检测\"><a href=\"#7-内存泄漏自动化检测\" class=\"headerlink\" title=\"7. 内存泄漏自动化检测\"></a>7. 内存泄漏自动化检测</h4><p><a href=\"https://github.com/square/leakcanary\" target=\"_blank\" rel=\"external\">LeakCanary</a>: 自动化泄漏检测与分析 ( 可以看看这个<a href=\"http://blog.dreamtobe.cn/2015/05/18/LeakCanary%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/\">LeakCanary使用总结</a>与<a href=\"http://blog.dreamtobe.cn/2015/05/12/Leakcanary-Square%E7%9A%84%E4%B8%80%E6%AC%BEAndroid:Java%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E6%A3%80%E6%B5%8B%E5%B7%A5%E5%85%B7/\">Leakcanary Square的一款Android/Java内存泄漏检测工具</a>)</p>\n<h4 id=\"8-其他\"><a href=\"#8-其他\" class=\"headerlink\" title=\"8. 其他\"></a>8. 其他</h4><ul>\n<li>代码质量: <a href=\"http://phabricator.org\" target=\"_blank\" rel=\"external\">phabricator 的arc diff</a> (尽量小颗粒度的arc diff 与update review)，其实也可以看看Google是如何做的: <a href=\"http://blog.dreamtobe.cn/2015/03/23/%5B笔记%5D谷歌是如何做代码审查的/\">笔记-谷歌是如何做代码审查的</a>，还有一点的TODO要写好deadline与master</li>\n<li>编包管理: <a href=\"https://about.gitlab.com/gitlab-ci/\" target=\"_blank\" rel=\"external\">Gitlab CI</a> (结合Gitlab，功能够用，方便)</li>\n</ul>\n<h2 id=\"VIII-内存\"><a href=\"#VIII-内存\" class=\"headerlink\" title=\"VIII. 内存\"></a>VIII. 内存</h2><blockquote>\n<p>根据设备可用内存的不同，每个设备给应用限定的Heap大小是有限的，当达到对应限定值还申请空间时，就会收到<code>OutOfMemoryError</code>的异常。</p>\n</blockquote>\n<h3 id=\"1-内存管理\"><a href=\"#1-内存管理\" class=\"headerlink\" title=\"1. 内存管理\"></a>1. 内存管理</h3><blockquote>\n<p>Android根据不同的进程优先级，对不同进程进行回收来满足内存的供求，可以参照这篇文章: <a href=\"http://blog.dreamtobe.cn/2015/04/08/android_thread_process_components/\">Android中线程、进程与组件的关系</a>。<br>在后台进程的LRU队列中，除了LRU为主要的规则以外，系统也会根据杀死一个后台进程所获得的内存是否更多作为一定的参考依据，因此后台进程为了保活，尽量少的内存，尽可能的释放内存也是十分必要的。</p>\n</blockquote>\n<ul>\n<li>尽可能的缩短<code>Service</code>的存活周期（可以考虑直接使用执行完任务直接关闭自己的<code>IntentService</code>），也就是说在Service没有任何任务的时候，尽可能的将其关闭，以减少系统资源的浪费。</li>\n<li>可以通过系统服务<code>ActivityManager</code>中的<code>getMemoryClass()</code>获知当前设备允许每个应用大概可以有多少兆的内存使用(如果在<code>AndroidManifest</code>设置了<code>largeHeap=true</code>，使用<code>getLargeMemoryClass()</code>获知)，并且让应用中的内存始终低于这个值，避免OOM。</li>\n<li>相对于静态常量而言，通常<code>Enum</code>枚举需要大于两倍的内存空间来存储相同的数据。</li>\n<li>Java中的每个<code>class</code>(或者匿名类)大约占用500字节。</li>\n<li>每个对象实例大约开销12~16字节的内存。</li>\n</ul>\n<h4 id=\"onTrimMemory-回调处理\"><a href=\"#onTrimMemory-回调处理\" class=\"headerlink\" title=\"onTrimMemory()回调处理\"></a><code>onTrimMemory()</code>回调处理</h4><blockquote>\n<p>监听<code>onTrimMemory()</code>的回调，根据不同的内存等级，做相应的释放以此让系统资源更好的利用，以及自己的进程可以更好的保活。</p>\n</blockquote>\n<h5 id=\"当应用还在前台\"><a href=\"#当应用还在前台\" class=\"headerlink\" title=\"当应用还在前台\"></a>当应用还在前台</h5><ul>\n<li><code>TRIM_MEMORY_RUNNING_MODERATE</code>: 当前应用还在运行不会被杀，但是设备可运行的内存较低，系统正在从后台进程的LRU列表中杀死进程其他进程。</li>\n<li><code>TRIM_MEMORY_RUNNING_LOW</code>: 当前应用还在运行不会被杀，但是设备可运行内存很低了，会直接影响当前应用的性能，当前应用也需要考虑释放一些无用资源。</li>\n<li><code>TRIM_MEMORY_RUNNING_CRITICAL</code>: 当前应用还在运行中，但是系统已经杀死了后台进程LRU队列中绝大多数的进程了，当前应用需要考虑释放所有不重要的资源，否则很可能系统就会开始清理服务进程，可见进程等。也就说，如果内存依然不足以支撑，当前应用的服务也很有可能会被清理掉。</li>\n</ul>\n<h5 id=\"TRIM-MEMORY-UI-HIDDEN\"><a href=\"#TRIM-MEMORY-UI-HIDDEN\" class=\"headerlink\" title=\"TRIM_MEMORY_UI_HIDDEN\"></a><code>TRIM_MEMORY_UI_HIDDEN</code></h5><p>当回调回来的时候，说明应用的UI对用户不可见的，此时释放UI使用的一些资源。这个不同于<code>onStop()</code>，<code>onStop()</code>的回调，有可能仅仅是当前应用中进入了另外一个<code>Activity</code>。</p>\n<h5 id=\"当应用处于后台\"><a href=\"#当应用处于后台\" class=\"headerlink\" title=\"当应用处于后台\"></a>当应用处于后台</h5><ul>\n<li><code>TRIM_MEMORY_BACKGROUND</code>: 系统已经处于低可用内存的情况，并且当前进程处于后台进程LRU队列队头附近，因此还是比较安全的，但是系统可能已经开始从LRU队列中清理进程了，此时当前应用需要释放部分资源，以保证尽量的保活。</li>\n<li><code>TRIM_MEMORY_MODERATE</code>: 系统处于低可用内存的情况，并且当前进程处于后台进程LRU队列中间的位置，如果内存进一步紧缺，当前进程就有可能被清理掉，需要进一步释放资源。</li>\n<li><code>TRIM_MEMORY_COMPLETE</code>: 系统处于低可用内存的情况，并且当前进程处于后天进程LRU队列队首的位置，如果内存进一步紧缺，下一个清理的就是当前进程，需要释放尽可能的资源来保活当前进程。在API14之前，<code>onLowMemory()</code>就相当于这个级别的回调。</li>\n</ul>\n<h3 id=\"2-避免内存泄漏相关\"><a href=\"#2-避免内存泄漏相关\" class=\"headerlink\" title=\"2. 避免内存泄漏相关\"></a>2. 避免内存泄漏相关</h3><ul>\n<li>无法解决的泄漏（如系统底层引起的)移至独立进程(如2.x机器存在webview的内存泄漏)</li>\n<li>大图片资源/全屏图片资源，要不放在<code>assets</code>下，要不放在<code>nodpi</code>下，要不都带，否则缩放会带来额外耗时与内存问题</li>\n<li>4.x在<code>AndroidManifest</code>中配置<code>largeHeap=true</code>，一般dvm heep最大值可增大50%以上。但是没有特殊明确的需要，尽可能的避免这样设置，因为这样一来很可能隐藏了消耗了完全没有必要的内存的问题。</li>\n<li>在<code>Activity#onDestory</code>以后，遍历所有View，干掉所有View可能的引用(通常泄漏一个Activity，连带泄漏其上的View，然后就泄漏了大于全屏图片的内存)。</li>\n<li>万金油: 静态化内部类，使用<code>WeakReference</code>引用外部类，防止内部类长期存在，泄漏了外部类的问题。</li>\n</ul>\n<h3 id=\"3-图片\"><a href=\"#3-图片\" class=\"headerlink\" title=\"3. 图片\"></a>3. 图片</h3><blockquote>\n<p>Android 2.3.x或更低版本的设备，是将所有的Bitmap对象存储在native heap，因此我们很难通过工具去检测其内存大小，在Android 3.0或更高版本的设备，已经调整为存储到了每个应用自身的Dalvik heap中了。</p>\n</blockquote>\n<ul>\n<li>全局统一<code>BitmapFactory#decode</code>出口，捕获此处decode oom，控制长宽（小于屏幕分辨率大小 ）</li>\n<li>如果采用RGB_8888 oom了，尝试RGB_565(相比内存小一半以上(w<em>h</em>2(bytes)))</li>\n<li>如果还考虑2.x机器的话，设置<code>BitmapFactory#options</code>的<code>InNativeAlloc</code>参数为true，此时decode的内存不会上报到dvm中，便不会oom。</li>\n<li>建议采用<a href=\"https://github.com/lingochamp/QiniuImageLoader\" target=\"_blank\" rel=\"external\">lingochamp/QiniuImageLoader</a>的方式，所有图片的操作都放到云端处理，本地默认使用Webp，并且获取的每个位置的图片，尽量通过精确的大小按需获取，避免内存没必要的消耗。</li>\n</ul>\n<h2 id=\"IX-线程\"><a href=\"#IX-线程\" class=\"headerlink\" title=\"IX. 线程\"></a>IX. 线程</h2><ul>\n<li>采用全局线程池管理体系，有效避免野线程。可参照 <a href=\"https://github.com/Jacksgong/ThreadDebugger/blob/master/demo/src/main/java/cn/dreamtobe/threaddebugger/demo/DemoThreadPoolCentral.java\" target=\"_blank\" rel=\"external\">ThreadDebugger-demo/DemoThreadPoolCentral.java</a></li>\n<li>结合全局线程池管理体系，使用<a href=\"https://github.com/Jacksgong/ThreadDebugger\" target=\"_blank\" rel=\"external\">ThreadDebugger</a>监控线程，避免线程泄漏的存在。</li>\n</ul>\n<h2 id=\"X-编译与发布\"><a href=\"#X-编译与发布\" class=\"headerlink\" title=\"X. 编译与发布\"></a>X. 编译与发布</h2><ul>\n<li>考虑采用DexGuard，或ProGuard结合相关资源混淆来提高安全与包大小，参考: <a href=\"http://blog.dreamtobe.cn/2015/11/04/guard_multi_dex/\">DexGuard、Proguard、Multi-dex</a></li>\n<li>结合Gradle、Gitlab-CI 与Slack(Incoming WebHooks)，快速实现，打相关git上打相关Tag，自动编相关包通知Slack。</li>\n<li>结合Gitlab-CI与Slack(Incoming WebHooks)，快速实现，所有的push，Slack快速获知。</li>\n<li>结合Gradle中Android提供的<code>productFlavors</code>参数，定义不同的variations，快速批量打渠道包</li>\n<li>迭代过程中，包定期做多纬度扫描，如包大小、字节码大小变化、红线扫描、资源变化扫描、相同测试用例耗电量内存等等，更多的可以参考 <a href=\"http://blog.dreamtobe.cn/2015/03/17/360%E6%89%8B%E6%9C%BA%E5%8D%AB%E5%A3%AB-Android%E5%BC%80%E5%8F%91-InfoQ%E8%A7%86%E9%A2%91-%E6%80%BB%E7%BB%93/\">360手机卫士 Android开发 InfoQ视频 总结</a></li>\n<li>迭代过程中，对关键<code>Activity</code>以及<code>Application</code>对打开的耗时进行统计，观察其变化，避免因为迭代导致某些页面非预期的打开变慢。</li>\n</ul>\n<h2 id=\"XI-工具\"><a href=\"#XI-工具\" class=\"headerlink\" title=\"XI. 工具\"></a>XI. 工具</h2><ul>\n<li><a href=\"https://developer.android.com/studio/profile/traceview.html\" target=\"_blank\" rel=\"external\">TraceView</a>可以有效的更重一段时间内哪个方法最耗时，但是需要注意的是目前TraceView在录制过中，会关闭JIT，因此也许有些JIT的优化在TraceView过程被忽略了。</li>\n<li><a href=\"https://developer.android.com/studio/profile/systrace.html\" target=\"_blank\" rel=\"external\">Systrace</a>可以有效的分析掉帧的原因。</li>\n<li><a href=\"https://developer.android.com/studio/profile/optimize-ui.html\" target=\"_blank\" rel=\"external\">HierarchyViewer</a>可以有效的分析View层级以及布局每个节点<code>measure</code>、<code>layout</code>、<code>draw</code>的耗时。</li>\n</ul>\n<h2 id=\"XII-其他\"><a href=\"#XII-其他\" class=\"headerlink\" title=\"XII. 其他\"></a>XII. 其他</h2><ul>\n<li><code>final</code>能用就用（高效: 编译器在调用<code>final</code>方法时，会转入内嵌机制）</li>\n<li>懒预加载，如简单的<code>ListView</code>、<code>RecyclerView</code>等滑动列表控件，停留在当前页面的时候，可以考虑直接预加载下个页面所需图片</li>\n<li>智能预加载，通过权重等方式结合业务层面，分析出哪些更有可能被用户浏览使用，然后再在某个可能的时刻进行预加载。如，进入朋友圈之前通过用户行为，智能预加载部分原图。</li>\n<li>做好有损体验的准备，在一些无法避免的问题面前做好有损体验（如，非UI进程crash，可以自己解决就不要让用户感知，或者UI进程crash了，做好场景恢复）</li>\n<li>做好各项有效监控：crash(注意还有JNI的)、anr(定期扫描文件)、掉帧(绘制监控、activity生命周期监控等)、异常状态监控(本地Log根据需要不同级别打Log并选择性上报监控)等</li>\n<li>文件存储推荐放在<code>/sdcard/Android/data/[package name]/</code>里(在应用卸载时，会随即删除)(<code>Context#getExternalFilesDir()</code>)，而非<code>/sdcard/</code>根目录建文件夹（节操问题）</li>\n<li>通过gradle的<code>shrinkResources</code>与<code>minifyEnabled</code>参数可以简单快速的在编包的时候自动删除无用资源</li>\n<li>由于resources.arsc在api8以后，aapt中默认采用UTF-8编码，导致资源中大都是中文的resources.arsc相比采用UTF-16编码更大，此时，可以考虑aapt中指定使用UTF-16</li>\n<li>谷歌建议，大于10M的大型应用考虑安装到SD卡上: <a href=\"http://developer.android.com/intl/zh-cn/guide/topics/data/install-location.html\" target=\"_blank\" rel=\"external\">App Install Location</a></li>\n<li>当然运维也是一方面: <a href=\"http://developer.android.com/intl/zh-cn/distribute/essentials/optimizing-your-app.html\" target=\"_blank\" rel=\"external\">Optimize Your App</a></li>\n<li>在已知并且不需要栈数据的情况下，就没有必要需要使用异常，或创建<code>Throwable</code>生成栈快照是一项耗时的工作。</li>\n<li>需要十分明确发布环境以及测试环境，明确仅仅为了方便测试的代码以及工具在发布环境不会被带上。</li>\n</ul>\n<hr>\n<ul>\n<li>最后一次更新时间: 2016-9-19，<a href=\"https://github.com/Jacksgong/Blog/commits/master/source/_posts/android_optimize.md\" target=\"_blank\" rel=\"external\">本文迭代日志</a>。</li>\n</ul>\n<hr>\n<ul>\n<li><a href=\"http://developer.android.com/intl/zh-cn/distribute/essentials/quality/core.html\" target=\"_blank\" rel=\"external\">应用的核心质量</a></li>\n<li><a href=\"http://wiki.jikexueyuan.com/project/jni-ndk-developer-guide/performance.html\" target=\"_blank\" rel=\"external\">JNI调用性能测试及优化</a></li>\n<li><a href=\"http://www.programgo.com/article/39033077030/\" target=\"_blank\" rel=\"external\">Java学习笔记：(30)谨慎地使用本地方法</a></li>\n<li><a href=\"http://www.zhihu.com/question/21942389\" target=\"_blank\" rel=\"external\">Android 4.4 引入的 ART 对比 Dalvik 性能提升大吗，后者会不会被取代，会不会产生兼容性问题？</a></li>\n<li><a href=\"http://www.trinea.cn/android/java-android-performance/\" target=\"_blank\" rel=\"external\">性能优化之Java(Android)代码优化</a></li>\n<li><a href=\"http://www.trinea.cn/android/mobile-performance-optimization/\" target=\"_blank\" rel=\"external\">移动端网络优化</a></li>\n<li><a href=\"http://www.trinea.cn/android/java-android-performance/\" target=\"_blank\" rel=\"external\">性能优化之Java(Android)代码优化</a></li>\n<li><a href=\"http://blog.csdn.net/zgjxwl/article/details/6232577\" target=\"_blank\" rel=\"external\">JNI性能测试一—JNI调用C与Java调用java性能比较</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;mid=207548094&amp;idx=1&amp;sn=1a277620bc28349368b68ed98fbefebe\" target=\"_blank\" rel=\"external\">微信ANDROID客户端-会话速度提升70%的背后</a></li>\n<li><a href=\"http://www.infoq.com/cn/news/2014/11/new-android-gradle\" target=\"_blank\" rel=\"external\">新的Andriod Gradle插件可自动移除无用资源</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;mid=208008519&amp;idx=1&amp;sn=278b7793699a654b51588319b15b3013\" target=\"_blank\" rel=\"external\">Android安装包相关知识汇总</a></li>\n<li><a href=\"http://gold.xitu.io/entry/55272f6be4b0da2c5deb7f36\" target=\"_blank\" rel=\"external\">Android优化实践</a></li>\n<li><a href=\"https://developer.android.com/training/articles/perf-tips.html\" target=\"_blank\" rel=\"external\">Performance Tips</a></li>\n<li><a href=\"https://developer.android.com/training/articles/memory.html#YourApp\" target=\"_blank\" rel=\"external\">Managing Your App’s Memory</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<h2 id=\"I-网络相关\"><a href=\"#I-网络相关\" class=\"headerlink\" title=\"I. 网络相关\"></a>I. 网络相关</h2><blockquote>\n<p>更多网络优化，可参考: <a href=\"http://blog.dreamtobe.cn/2015/03/28/Android网络学习笔记整理/\">Android网络</a></p>\n</blockquote>\n<ul>\n<li>http头信息带Cache-Control域 确定缓存过期时间  防止重复请求</li>\n<li>直接用IP直连，不用域名，策略性跟新本地IP列表。 – DNS解析过程耗时在百毫秒左右，并且还有可能存在DNS劫持。</li>\n<li>图片、JS、CSS等静态资源，采用CDN（当然如果是使用7牛之类的服务就已经给你搭建布置好了）</li>\n<li>全局图片处理采用漏斗模型全局管控，所请求的图片大小最好依照业务大小提供/最大不超过屏幕分辨率需要，如果请求原图，也不要超过<code>GL10.GL_MAX_TEXTURE_SIZE</code></li>\n<li>全局缩略图直接采用webp，在尽可能不损失图片质量的前提下，图片大小与png比缩小30% ~ 70%</li>\n<li>如果列表里的缩略图服务器处理好的小图，可以考虑直接在列表数据请求中，直接以base64在列表数据中直接带上图片（国内还比较少，海外有些这种做法，好像web端比较常见）</li>\n<li>轮询或者socket心跳采用系统<code>AlarmManager</code>提供的闹钟服务来做，保证在系统休眠的时候cpu可以得到休眠，在需要唤醒时可以唤醒（持有cpu唤醒锁）</li>\n<li>可以通过将零散的网路的请求打包进行一次操作，避免过多的无线信号引起电量消耗。</li>\n</ul>","more":"<h4 id=\"1-传输数据格式选择\"><a href=\"#1-传输数据格式选择\" class=\"headerlink\" title=\"1. 传输数据格式选择\"></a>1. 传输数据格式选择</h4><ul>\n<li>如果是需要全量数据的，考虑使用<a href=\"https://developers.google.com/protocol-buffers/?hl=zh-cn\">Protobuffers</a> (序列化反序列化性能高于json)，并且考虑使用<a href=\"https://android.googlesource.com/platform/external/protobuf/+/master/java/README.txt\">nano protocol buffer</a>。</li>\n<li>如果传输回来的数据不需要全量读取，考虑使用<a href=\"https://github.com/google/flatbuffers\">Flatbuffers</a> (序列化反序列化几乎不耗时，耗时是在读取对象时(就这一部分如果需要优化，可以参看<a href=\"http://blog.dreamtobe.cn/2015/01/05/Flatbuffer-Use-Optimize/\">Flatbuffer Use Optimize</a></li>\n</ul>\n<h4 id=\"2-输入流\"><a href=\"#2-输入流\" class=\"headerlink\" title=\"2. 输入流\"></a>2. 输入流</h4><blockquote>\n<p>使用具有缓存策略的输入流</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>原</th>\n<th>建议替换为</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>InputStream</code></td>\n<td><code>BufferedInputStream</code></td>\n</tr>\n<tr>\n<td><code>Reader</code></td>\n<td><code>BufferedReader</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"II-基础相关\"><a href=\"#II-基础相关\" class=\"headerlink\" title=\"II. 基础相关\"></a>II. 基础相关</h2><h4 id=\"1-数据结构\"><a href=\"#1-数据结构\" class=\"headerlink\" title=\"1. 数据结构\"></a>1. 数据结构</h4><blockquote>\n<p>如果已知大概需要多大，就直接给初始大小，减少扩容时额外开销。</p>\n</blockquote>\n<ul>\n<li><code>ArrayList</code>: 里面就一数组，内存小，有序取值快，扩容效率低</li>\n<li><code>LinkedList</code>: 里面就一双向链表，内存大，随机插入删除快，扩容效率高。</li>\n<li><code>HashSet</code>: 里面就一个<code>HashMap</code>，用key对外存储，目的就是不允许重复元素。</li>\n<li><code>ConcurrentHashMap</code>: 线程安全，采用细分锁，锁颗粒更小，并发性能更优</li>\n<li><code>Collections.synchronizedMap</code>: 线程安全，采用当前对象作为锁，颗粒较大，并发性能较差。</li>\n<li><code>SparseArray</code>、<code>SparseBooleanArray</code>、<code>SparseIntArray</code>:  针对Key为<code>Int</code>、<code>Boolean</code>进行了优化，采用二分法查找，简单数组存储。相比<code>HashMap</code>而言，<code>HashMap</code>每添加一个数据，大约会需要申请额外的32字节的数据，因此<code>Sparsexxx</code>在内存方面的开销会小很多。</li>\n</ul>\n<h4 id=\"2-编码习惯\"><a href=\"#2-编码习惯\" class=\"headerlink\" title=\"2. 编码习惯\"></a>2. 编码习惯</h4><ul>\n<li>尽量简化，不要做不需要的操作。</li>\n<li>尽量避免分配内存(创建对象): 1) 如果一个方法返回一个<code>String</code>，并且这个方法的返回值始终都是被用来<code>append</code>到一个<code>StringBuffer</code>上，就改为传入<code>StringBuffer</code>直接<code>append</code>上去，避免创建一个短生命周期的临时对象；2) 如果使用的字符串是截取自某一个字符串，就直接从那个字符串上面<code>substring</code>，不要拷贝一份，因为通过<code>substring</code>虽然创建了新的<code>String</code>对象，但是共享了里面的<code>char</code>数组中的<code>char</code>对象，减少了这块对象的创建；量使用多个一维数组，其性能高于多维数组；<code>int</code>数组性能远大于<code>Integer</code>数组性能；</li>\n<li>如果你确定不需要访问类成员，让方法<code>static</code>，这样调用时可以提升15%~20%的速度，因为不需要切换对象状态。</li>\n<li>如果某个参数是常量，别忘了使用<code>static final</code>，这样可以让<code>Class</code>首次初始化时，不需要调用<code>&lt;clinit&gt;</code>来创建<code>static</code>方法，而是在编译时就直接将常量替换代码中使用的位置。</li>\n<li>Android开发中，类内尽量避免通过<code>get/set</code>访问成员变量，虽然这在语言的开发中是一个好的习惯，但是Android虚拟机中，对方法的调用开销远大于对变量的直接访问。在没有JIT的情况下，直接的变量访问比调用方法快3倍，在JIT下，直接的变量访问更是比调用方法快7倍!</li>\n<li>当内部类需要访问外部类的私有<code>方法/变量</code>时，考虑将这些外部类的私有<code>方法/变量</code>改用包可见的方式。首先在编写代码的时候，通过内部类访问外部类的私有<code>方法/变量</code>是合法的，但是在编译的时候为了满足这个会将需要被内部类访问的私有<code>方法/变量</code>封装一层包可见的方法，实现让内部类访问这些私有的<code>方法/变量</code>，根据前面我们有提到说方法的调用开销大于变量的调用，因此这样使得性能变差，所以我们在编码的时候可以考虑直接将需要被内部类调用的外部类私有<code>方法/变量</code>，改为包可见。</li>\n<li>尽量少使用<code>float</code>。在很多现代设备中，<code>double</code>的性能与<code>float</code>的性能几乎没有差别，但是从大小上面<code>double</code>是<code>float</code>的两倍的大小。</li>\n<li>尽量考虑使用整型而非浮点数，在较好的Android设备中，浮点数比整型慢一倍。</li>\n<li>尽量不要使用除法操作，有很多处理器有乘法器，但是没有除法器，也就是说在这些设备中需要将除法分解为其他的计算方式速度会比较慢。</li>\n<li>尽量使用系统sdk中提供的方法，而非自己去实现。如<code>String.indexOf()</code>相关的API，Dalvik将会替换为内部方法；<code>System.arraycopy()</code>方法在Nexus One手机上，会比我们上层写的类似方法的执行速度快9倍。</li>\n<li>谨慎编写native，性能不一定更好，Native并不是用于使得性能更好，而是用于有些已经存在的库是使用native语言实现的，我们需要引入Android，这时才使用。1) 需要多出开销在维持Java-native的通信；2) 在native中创建的资源由于在native heap上面，因此需要主动的释放；3) 需要对不同的处理器架构进行支持，存在明显的兼容性问题需要解决。</li>\n<li>在没有JIT的设备中，面向接口编程的模式(如<code>Map map</code>)，相比直接访问对象类(如<code>HashMap map</code>)，会慢6%，但是在存在JIT的设备中，两者的速度差不多。但是内存占用方面面向接口变成会消耗更多内存，因此如果你的面向接口编程不是十分的必要的情况下可以考虑不用。</li>\n<li>在没有JIT的设备中，访问本地化变量相对与成员变量会快20%，但是在存在JIT的设备中，两者速度差不多。</li>\n</ul>\n<h5 id=\"遍历优化\"><a href=\"#遍历优化\" class=\"headerlink\" title=\"遍历优化\"></a>遍历优化</h5><blockquote>\n<p>尽量使用<code>Iterable</code>而不是通过长度判断来进行遍历。</p>\n</blockquote>\n<figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 这种性能是最差的，JIT也无法对其优化。</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> zero() &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">sum</span> = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; mArray.length; ++i) &#123;</div><div class=\"line\">        <span class=\"keyword\">sum</span> += mArray[i].mSplat;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 相对zero()来说，这种写法会更快些，在存在JIT的情况下速度几乎和two()速度一样快。</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> one() &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">sum</span> = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"comment\">// 1) 通过本地化变量，减少查询，在不存在JIT的手机下，优化较明显。</span></div><div class=\"line\">    Foo[] localArray = mArray;</div><div class=\"line\">    <span class=\"comment\">// 2) 获取队列长度，减少每次遍历访问变量的长度，有效优化。</span></div><div class=\"line\">    <span class=\"keyword\">int</span> len = localArray.length;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; ++i) &#123;</div><div class=\"line\">        <span class=\"keyword\">sum</span> += localArray[i].mSplat;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 在无JIT的设备中，是最快的遍历方式，在存在JIT的设备中，与one()差不多快。</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> two() &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">sum</span> = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (Foo a : mArray) &#123;</div><div class=\"line\">        <span class=\"keyword\">sum</span> += a.mSplat;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"III-数据库相关\"><a href=\"#III-数据库相关\" class=\"headerlink\" title=\"III. 数据库相关\"></a>III. 数据库相关</h2><blockquote>\n<p>建多索引的原则: 哪个字段可以最快的<strong>减少查询</strong>结果，就把该字段放在最前面</p>\n</blockquote>\n<h4 id=\"无法使用索引的情况\"><a href=\"#无法使用索引的情况\" class=\"headerlink\" title=\"无法使用索引的情况\"></a>无法使用索引的情况</h4><ul>\n<li>操作符<code>BETWEEN</code>、<code>LIKE</code>、<code>OR</code></li>\n<li>表达式</li>\n<li><code>CASE WHEN</code></li>\n</ul>\n<h4 id=\"不推荐\"><a href=\"#不推荐\" class=\"headerlink\" title=\"不推荐\"></a>不推荐</h4><ul>\n<li>不要设计出索引是其他索引的前缀（没有意义）</li>\n<li>更新时拒绝直接全量更新，要更新哪列就put哪列的数据</li>\n<li>如果最频繁的是更新与插入，别建很多索引 （原本表就很小就也没必要建）</li>\n<li>拒绝用大字符串创建索引</li>\n<li>避免建太多索引，查询时可能就不会选择最好的来执行</li>\n</ul>\n<h4 id=\"推荐\"><a href=\"#推荐\" class=\"headerlink\" title=\"推荐\"></a>推荐</h4><ul>\n<li>多使用整型索引，效率远高于字符串索引</li>\n<li>搜索时使用SQL参数(<code>&quot;?&quot;, parameter</code>)代替字符串拼接（底层有特殊优化与缓存）</li>\n<li>查询需要多少就limit多少（如判断是否含有啥，就limit 1就行了嘛）</li>\n<li>如果出现很宽的列(如blob类型)，考虑放在单独表中(在查询或者更新其他列数据时防止不必要的大数据i/o影响性能)</li>\n</ul>\n<h2 id=\"IV-JNI抉择\"><a href=\"#IV-JNI抉择\" class=\"headerlink\" title=\"IV. JNI抉择\"></a>IV. JNI抉择</h2><blockquote>\n<p>Android JVM相关知识，可参看: <a href=\"http://blog.dreamtobe.cn/2015/11/01/android_art_dalvik/\">ART、Dalvik</a></p>\n<p>Android JNI、NDK相关知识，可参看: <a href=\"http://blog.dreamtobe.cn/2015/11/08/ndk/\">NDK</a></p>\n<p>JNI不一定显得更快，有些会更慢。</p>\n<p>特点: 不用在虚拟机的框子下写代码</p>\n</blockquote>\n<ul>\n<li>可以调用更底层的高性能的代码库 – Good</li>\n<li>如果是Dalvik，将省去了由JIT编译期转为本地代码的这个步骤。 – Good</li>\n<li>Java调用JNI的耗时较Java调用Java肯定更慢，虽然随着JDK版本的升级，差距已经越来越小(JDK1.6版本是5倍Java调用Java方法的耗时) – Bad</li>\n<li>内存不在Java Heap，没有OOM风险，有效减少gc。 – Good</li>\n</ul>\n<blockquote>\n<p>一些重要的参数之类，也可以考虑放在Native层，保证安全性。参考: <a href=\"http://blog.dreamtobe.cn/2015/07/17/wh_android_tk/\">Android应用程序通用自动脱壳方法研究</a></p>\n</blockquote>\n<h2 id=\"V-多进程抉择\"><a href=\"#V-多进程抉择\" class=\"headerlink\" title=\"V. 多进程抉择\"></a>V. 多进程抉择</h2><blockquote>\n<p>360 17个进程: <a href=\"http://blog.dreamtobe.cn/2015/03/17/360手机卫士-Android开发-InfoQ视频-总结/\">360手机卫士 Android开发 InfoQ视频 总结\n</a>，但是考虑到多进程的消耗，我们更需要关注多个组件复用同一进程。<br>在没有做任何操作的空进程而言，其大约需要额外暂用1.4MB的内存。</p>\n</blockquote>\n<ul>\n<li>充分独立，解耦部分</li>\n<li>大内存(如临时展示大量图片的Activity)、无法解决的crash、内存泄漏等问题，考虑通过独立进程解决</li>\n<li>独立于UI进程，需要在后台长期存活的服务(参看<a href=\"http://blog.dreamtobe.cn/2015/04/08/android_thread_process_components/\">Android中线程、进程与组件的关系</a>)</li>\n<li>非己方第三方库（无法保证稳定、性能等问题，并且独立组件），可考虑独立进程</li>\n</ul>\n<blockquote>\n<p>最后，多进程存在的两个问题: 1. 由于进程间通讯或者首次调起进程的消耗等，带来的cpu、i/o等的资源竞争。2. 也许对于部分同事来说，会还有可读性问题吧，毕竟多了层IPC绕了点。</p>\n</blockquote>\n<h2 id=\"VI-UI层面\"><a href=\"#VI-UI层面\" class=\"headerlink\" title=\"VI. UI层面\"></a>VI. UI层面</h2><blockquote>\n<p>相关深入优化，可参看<a href=\"http://blog.dreamtobe.cn/2015/10/20/android-view/\">Android绘制布局相关</a></p>\n<p>对于卡顿相关排查推荐参看: <a href=\"http://www.importnew.com/3784.html\">Android性能优化案例研究(上)</a>与<a href=\"http://www.importnew.com/4065.html\">Android性能优化案例研究（下）</a></p>\n</blockquote>\n<ul>\n<li>减少不必要的不透明背景相互覆盖，减少重绘，因为GPU不得不一遍又一遍的画这些图层</li>\n<li>保证UI线程一次完整的绘制(measure、layout、draw)不超过16ms(60Hz)，否则就会出现掉帧，卡顿的现象</li>\n<li>在UI线程中频繁的调度中，尽量少的对象创建，减少gc等。</li>\n<li>分步加载（减少任务颗粒）、预加载、异步加载(区别出耗时任务，采用异步加载)</li>\n</ul>\n<h2 id=\"VII-库推荐\"><a href=\"#VII-库推荐\" class=\"headerlink\" title=\"VII. 库推荐\"></a>VII. 库推荐</h2><blockquote>\n<p>可以参考Falcon Pro作者的推荐: <a href=\"http://blog.dreamtobe.cn/2015/06/14/Falcon-Pro-3-如何完成独立开发演讲分析/\">Falcon Pro 3如何完成独立开发演讲分析</a></p>\n</blockquote>\n<h4 id=\"1-响应式编程\"><a href=\"#1-响应式编程\" class=\"headerlink\" title=\"1. 响应式编程\"></a>1. 响应式编程</h4><p><a href=\"https://github.com/ReactiveX/RxJava\">RxJava</a> (响应式编程，代码更加简洁，异步处理更快快捷、异常处理更加彻底、数据管道理念)</p>\n<p>相关了解可以参看: <a href=\"http://blog.dreamtobe.cn/2015/04/29/RxJava学习整理/\">RxJava</a></p>\n<h4 id=\"2-图片加载\"><a href=\"#2-图片加载\" class=\"headerlink\" title=\"2. 图片加载:\"></a>2. 图片加载:</h4><ul>\n<li>小型快捷: <a href=\"https://github.com/square/picasso\">Picasso</a> (接口干净、支持okhttp、功能强大、稳定、高效, 可以延读: <a href=\"http://blog.dreamtobe.cn/2015/04/28/PhotoGallery%E3%80%81Volley%E3%80%81Picasso-%E6%AF%94%E8%BE%83/\">PhotoGallery、Volley、Picasso 比较</a>)</li>\n<li>大项目考虑: <a href=\"http://fresco-cn.org\">Fresco</a> (2.5M，pipeline解决资源竞争、Native Heep解决OOM，的同时减少GC)</li>\n</ul>\n<h4 id=\"3-网络底层库\"><a href=\"#3-网络底层库\" class=\"headerlink\" title=\"3. 网络底层库:\"></a>3. 网络底层库:</h4><p><a href=\"https://github.com/square/okhttp\">Okhttp</a>: 默认gzip、缓存、安全等</p>\n<h4 id=\"4-网络基层\"><a href=\"#4-网络基层\" class=\"headerlink\" title=\"4. 网络基层:\"></a>4. 网络基层:</h4><p><a href=\"https://github.com/square/retrofit\">Retrofit</a>: 非常好用的REST Client，结合RxJava简单API实现、类型安全，简单快捷</p>\n<h4 id=\"5-数据库层\"><a href=\"#5-数据库层\" class=\"headerlink\" title=\"5. 数据库层:\"></a>5. 数据库层:</h4><p><a href=\"https://realm.io\">Realm</a>: 效率极高(Falcon Pro 3的作者Joaquim用了该库以后，所有数据库操作都放到了UI线程)（基于TightDB，底层C++闭源，Java层开源，简单使用，性能远高于SQLite等）</p>\n<h4 id=\"6-Crash上报\"><a href=\"#6-Crash上报\" class=\"headerlink\" title=\"6. Crash上报:\"></a>6. Crash上报:</h4><p><a href=\"https://fabric.io\">Fabric</a>: 全面的信息(新版本还支持JNI Crash获取和上报)、稳定的数据、及时的通知、强大的反混淆(其实在混淆后有上传mapping)</p>\n<h4 id=\"7-内存泄漏自动化检测\"><a href=\"#7-内存泄漏自动化检测\" class=\"headerlink\" title=\"7. 内存泄漏自动化检测\"></a>7. 内存泄漏自动化检测</h4><p><a href=\"https://github.com/square/leakcanary\">LeakCanary</a>: 自动化泄漏检测与分析 ( 可以看看这个<a href=\"http://blog.dreamtobe.cn/2015/05/18/LeakCanary%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/\">LeakCanary使用总结</a>与<a href=\"http://blog.dreamtobe.cn/2015/05/12/Leakcanary-Square%E7%9A%84%E4%B8%80%E6%AC%BEAndroid:Java%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E6%A3%80%E6%B5%8B%E5%B7%A5%E5%85%B7/\">Leakcanary Square的一款Android/Java内存泄漏检测工具</a>)</p>\n<h4 id=\"8-其他\"><a href=\"#8-其他\" class=\"headerlink\" title=\"8. 其他\"></a>8. 其他</h4><ul>\n<li>代码质量: <a href=\"http://phabricator.org\">phabricator 的arc diff</a> (尽量小颗粒度的arc diff 与update review)，其实也可以看看Google是如何做的: <a href=\"http://blog.dreamtobe.cn/2015/03/23/%5B笔记%5D谷歌是如何做代码审查的/\">笔记-谷歌是如何做代码审查的</a>，还有一点的TODO要写好deadline与master</li>\n<li>编包管理: <a href=\"https://about.gitlab.com/gitlab-ci/\">Gitlab CI</a> (结合Gitlab，功能够用，方便)</li>\n</ul>\n<h2 id=\"VIII-内存\"><a href=\"#VIII-内存\" class=\"headerlink\" title=\"VIII. 内存\"></a>VIII. 内存</h2><blockquote>\n<p>根据设备可用内存的不同，每个设备给应用限定的Heap大小是有限的，当达到对应限定值还申请空间时，就会收到<code>OutOfMemoryError</code>的异常。</p>\n</blockquote>\n<h3 id=\"1-内存管理\"><a href=\"#1-内存管理\" class=\"headerlink\" title=\"1. 内存管理\"></a>1. 内存管理</h3><blockquote>\n<p>Android根据不同的进程优先级，对不同进程进行回收来满足内存的供求，可以参照这篇文章: <a href=\"http://blog.dreamtobe.cn/2015/04/08/android_thread_process_components/\">Android中线程、进程与组件的关系</a>。<br>在后台进程的LRU队列中，除了LRU为主要的规则以外，系统也会根据杀死一个后台进程所获得的内存是否更多作为一定的参考依据，因此后台进程为了保活，尽量少的内存，尽可能的释放内存也是十分必要的。</p>\n</blockquote>\n<ul>\n<li>尽可能的缩短<code>Service</code>的存活周期（可以考虑直接使用执行完任务直接关闭自己的<code>IntentService</code>），也就是说在Service没有任何任务的时候，尽可能的将其关闭，以减少系统资源的浪费。</li>\n<li>可以通过系统服务<code>ActivityManager</code>中的<code>getMemoryClass()</code>获知当前设备允许每个应用大概可以有多少兆的内存使用(如果在<code>AndroidManifest</code>设置了<code>largeHeap=true</code>，使用<code>getLargeMemoryClass()</code>获知)，并且让应用中的内存始终低于这个值，避免OOM。</li>\n<li>相对于静态常量而言，通常<code>Enum</code>枚举需要大于两倍的内存空间来存储相同的数据。</li>\n<li>Java中的每个<code>class</code>(或者匿名类)大约占用500字节。</li>\n<li>每个对象实例大约开销12~16字节的内存。</li>\n</ul>\n<h4 id=\"onTrimMemory-回调处理\"><a href=\"#onTrimMemory-回调处理\" class=\"headerlink\" title=\"onTrimMemory()回调处理\"></a><code>onTrimMemory()</code>回调处理</h4><blockquote>\n<p>监听<code>onTrimMemory()</code>的回调，根据不同的内存等级，做相应的释放以此让系统资源更好的利用，以及自己的进程可以更好的保活。</p>\n</blockquote>\n<h5 id=\"当应用还在前台\"><a href=\"#当应用还在前台\" class=\"headerlink\" title=\"当应用还在前台\"></a>当应用还在前台</h5><ul>\n<li><code>TRIM_MEMORY_RUNNING_MODERATE</code>: 当前应用还在运行不会被杀，但是设备可运行的内存较低，系统正在从后台进程的LRU列表中杀死进程其他进程。</li>\n<li><code>TRIM_MEMORY_RUNNING_LOW</code>: 当前应用还在运行不会被杀，但是设备可运行内存很低了，会直接影响当前应用的性能，当前应用也需要考虑释放一些无用资源。</li>\n<li><code>TRIM_MEMORY_RUNNING_CRITICAL</code>: 当前应用还在运行中，但是系统已经杀死了后台进程LRU队列中绝大多数的进程了，当前应用需要考虑释放所有不重要的资源，否则很可能系统就会开始清理服务进程，可见进程等。也就说，如果内存依然不足以支撑，当前应用的服务也很有可能会被清理掉。</li>\n</ul>\n<h5 id=\"TRIM-MEMORY-UI-HIDDEN\"><a href=\"#TRIM-MEMORY-UI-HIDDEN\" class=\"headerlink\" title=\"TRIM_MEMORY_UI_HIDDEN\"></a><code>TRIM_MEMORY_UI_HIDDEN</code></h5><p>当回调回来的时候，说明应用的UI对用户不可见的，此时释放UI使用的一些资源。这个不同于<code>onStop()</code>，<code>onStop()</code>的回调，有可能仅仅是当前应用中进入了另外一个<code>Activity</code>。</p>\n<h5 id=\"当应用处于后台\"><a href=\"#当应用处于后台\" class=\"headerlink\" title=\"当应用处于后台\"></a>当应用处于后台</h5><ul>\n<li><code>TRIM_MEMORY_BACKGROUND</code>: 系统已经处于低可用内存的情况，并且当前进程处于后台进程LRU队列队头附近，因此还是比较安全的，但是系统可能已经开始从LRU队列中清理进程了，此时当前应用需要释放部分资源，以保证尽量的保活。</li>\n<li><code>TRIM_MEMORY_MODERATE</code>: 系统处于低可用内存的情况，并且当前进程处于后台进程LRU队列中间的位置，如果内存进一步紧缺，当前进程就有可能被清理掉，需要进一步释放资源。</li>\n<li><code>TRIM_MEMORY_COMPLETE</code>: 系统处于低可用内存的情况，并且当前进程处于后天进程LRU队列队首的位置，如果内存进一步紧缺，下一个清理的就是当前进程，需要释放尽可能的资源来保活当前进程。在API14之前，<code>onLowMemory()</code>就相当于这个级别的回调。</li>\n</ul>\n<h3 id=\"2-避免内存泄漏相关\"><a href=\"#2-避免内存泄漏相关\" class=\"headerlink\" title=\"2. 避免内存泄漏相关\"></a>2. 避免内存泄漏相关</h3><ul>\n<li>无法解决的泄漏（如系统底层引起的)移至独立进程(如2.x机器存在webview的内存泄漏)</li>\n<li>大图片资源/全屏图片资源，要不放在<code>assets</code>下，要不放在<code>nodpi</code>下，要不都带，否则缩放会带来额外耗时与内存问题</li>\n<li>4.x在<code>AndroidManifest</code>中配置<code>largeHeap=true</code>，一般dvm heep最大值可增大50%以上。但是没有特殊明确的需要，尽可能的避免这样设置，因为这样一来很可能隐藏了消耗了完全没有必要的内存的问题。</li>\n<li>在<code>Activity#onDestory</code>以后，遍历所有View，干掉所有View可能的引用(通常泄漏一个Activity，连带泄漏其上的View，然后就泄漏了大于全屏图片的内存)。</li>\n<li>万金油: 静态化内部类，使用<code>WeakReference</code>引用外部类，防止内部类长期存在，泄漏了外部类的问题。</li>\n</ul>\n<h3 id=\"3-图片\"><a href=\"#3-图片\" class=\"headerlink\" title=\"3. 图片\"></a>3. 图片</h3><blockquote>\n<p>Android 2.3.x或更低版本的设备，是将所有的Bitmap对象存储在native heap，因此我们很难通过工具去检测其内存大小，在Android 3.0或更高版本的设备，已经调整为存储到了每个应用自身的Dalvik heap中了。</p>\n</blockquote>\n<ul>\n<li>全局统一<code>BitmapFactory#decode</code>出口，捕获此处decode oom，控制长宽（小于屏幕分辨率大小 ）</li>\n<li>如果采用RGB_8888 oom了，尝试RGB_565(相比内存小一半以上(w<em>h</em>2(bytes)))</li>\n<li>如果还考虑2.x机器的话，设置<code>BitmapFactory#options</code>的<code>InNativeAlloc</code>参数为true，此时decode的内存不会上报到dvm中，便不会oom。</li>\n<li>建议采用<a href=\"https://github.com/lingochamp/QiniuImageLoader\">lingochamp/QiniuImageLoader</a>的方式，所有图片的操作都放到云端处理，本地默认使用Webp，并且获取的每个位置的图片，尽量通过精确的大小按需获取，避免内存没必要的消耗。</li>\n</ul>\n<h2 id=\"IX-线程\"><a href=\"#IX-线程\" class=\"headerlink\" title=\"IX. 线程\"></a>IX. 线程</h2><ul>\n<li>采用全局线程池管理体系，有效避免野线程。可参照 <a href=\"https://github.com/Jacksgong/ThreadDebugger/blob/master/demo/src/main/java/cn/dreamtobe/threaddebugger/demo/DemoThreadPoolCentral.java\">ThreadDebugger-demo/DemoThreadPoolCentral.java</a></li>\n<li>结合全局线程池管理体系，使用<a href=\"https://github.com/Jacksgong/ThreadDebugger\">ThreadDebugger</a>监控线程，避免线程泄漏的存在。</li>\n</ul>\n<h2 id=\"X-编译与发布\"><a href=\"#X-编译与发布\" class=\"headerlink\" title=\"X. 编译与发布\"></a>X. 编译与发布</h2><ul>\n<li>考虑采用DexGuard，或ProGuard结合相关资源混淆来提高安全与包大小，参考: <a href=\"http://blog.dreamtobe.cn/2015/11/04/guard_multi_dex/\">DexGuard、Proguard、Multi-dex</a></li>\n<li>结合Gradle、Gitlab-CI 与Slack(Incoming WebHooks)，快速实现，打相关git上打相关Tag，自动编相关包通知Slack。</li>\n<li>结合Gitlab-CI与Slack(Incoming WebHooks)，快速实现，所有的push，Slack快速获知。</li>\n<li>结合Gradle中Android提供的<code>productFlavors</code>参数，定义不同的variations，快速批量打渠道包</li>\n<li>迭代过程中，包定期做多纬度扫描，如包大小、字节码大小变化、红线扫描、资源变化扫描、相同测试用例耗电量内存等等，更多的可以参考 <a href=\"http://blog.dreamtobe.cn/2015/03/17/360%E6%89%8B%E6%9C%BA%E5%8D%AB%E5%A3%AB-Android%E5%BC%80%E5%8F%91-InfoQ%E8%A7%86%E9%A2%91-%E6%80%BB%E7%BB%93/\">360手机卫士 Android开发 InfoQ视频 总结</a></li>\n<li>迭代过程中，对关键<code>Activity</code>以及<code>Application</code>对打开的耗时进行统计，观察其变化，避免因为迭代导致某些页面非预期的打开变慢。</li>\n</ul>\n<h2 id=\"XI-工具\"><a href=\"#XI-工具\" class=\"headerlink\" title=\"XI. 工具\"></a>XI. 工具</h2><ul>\n<li><a href=\"https://developer.android.com/studio/profile/traceview.html\">TraceView</a>可以有效的更重一段时间内哪个方法最耗时，但是需要注意的是目前TraceView在录制过中，会关闭JIT，因此也许有些JIT的优化在TraceView过程被忽略了。</li>\n<li><a href=\"https://developer.android.com/studio/profile/systrace.html\">Systrace</a>可以有效的分析掉帧的原因。</li>\n<li><a href=\"https://developer.android.com/studio/profile/optimize-ui.html\">HierarchyViewer</a>可以有效的分析View层级以及布局每个节点<code>measure</code>、<code>layout</code>、<code>draw</code>的耗时。</li>\n</ul>\n<h2 id=\"XII-其他\"><a href=\"#XII-其他\" class=\"headerlink\" title=\"XII. 其他\"></a>XII. 其他</h2><ul>\n<li><code>final</code>能用就用（高效: 编译器在调用<code>final</code>方法时，会转入内嵌机制）</li>\n<li>懒预加载，如简单的<code>ListView</code>、<code>RecyclerView</code>等滑动列表控件，停留在当前页面的时候，可以考虑直接预加载下个页面所需图片</li>\n<li>智能预加载，通过权重等方式结合业务层面，分析出哪些更有可能被用户浏览使用，然后再在某个可能的时刻进行预加载。如，进入朋友圈之前通过用户行为，智能预加载部分原图。</li>\n<li>做好有损体验的准备，在一些无法避免的问题面前做好有损体验（如，非UI进程crash，可以自己解决就不要让用户感知，或者UI进程crash了，做好场景恢复）</li>\n<li>做好各项有效监控：crash(注意还有JNI的)、anr(定期扫描文件)、掉帧(绘制监控、activity生命周期监控等)、异常状态监控(本地Log根据需要不同级别打Log并选择性上报监控)等</li>\n<li>文件存储推荐放在<code>/sdcard/Android/data/[package name]/</code>里(在应用卸载时，会随即删除)(<code>Context#getExternalFilesDir()</code>)，而非<code>/sdcard/</code>根目录建文件夹（节操问题）</li>\n<li>通过gradle的<code>shrinkResources</code>与<code>minifyEnabled</code>参数可以简单快速的在编包的时候自动删除无用资源</li>\n<li>由于resources.arsc在api8以后，aapt中默认采用UTF-8编码，导致资源中大都是中文的resources.arsc相比采用UTF-16编码更大，此时，可以考虑aapt中指定使用UTF-16</li>\n<li>谷歌建议，大于10M的大型应用考虑安装到SD卡上: <a href=\"http://developer.android.com/intl/zh-cn/guide/topics/data/install-location.html\">App Install Location</a></li>\n<li>当然运维也是一方面: <a href=\"http://developer.android.com/intl/zh-cn/distribute/essentials/optimizing-your-app.html\">Optimize Your App</a></li>\n<li>在已知并且不需要栈数据的情况下，就没有必要需要使用异常，或创建<code>Throwable</code>生成栈快照是一项耗时的工作。</li>\n<li>需要十分明确发布环境以及测试环境，明确仅仅为了方便测试的代码以及工具在发布环境不会被带上。</li>\n</ul>\n<hr>\n<ul>\n<li>最后一次更新时间: 2016-9-19，<a href=\"https://github.com/Jacksgong/Blog/commits/master/source/_posts/android_optimize.md\">本文迭代日志</a>。</li>\n</ul>\n<hr>\n<ul>\n<li><a href=\"http://developer.android.com/intl/zh-cn/distribute/essentials/quality/core.html\">应用的核心质量</a></li>\n<li><a href=\"http://wiki.jikexueyuan.com/project/jni-ndk-developer-guide/performance.html\">JNI调用性能测试及优化</a></li>\n<li><a href=\"http://www.programgo.com/article/39033077030/\">Java学习笔记：(30)谨慎地使用本地方法</a></li>\n<li><a href=\"http://www.zhihu.com/question/21942389\">Android 4.4 引入的 ART 对比 Dalvik 性能提升大吗，后者会不会被取代，会不会产生兼容性问题？</a></li>\n<li><a href=\"http://www.trinea.cn/android/java-android-performance/\">性能优化之Java(Android)代码优化</a></li>\n<li><a href=\"http://www.trinea.cn/android/mobile-performance-optimization/\">移动端网络优化</a></li>\n<li><a href=\"http://www.trinea.cn/android/java-android-performance/\">性能优化之Java(Android)代码优化</a></li>\n<li><a href=\"http://blog.csdn.net/zgjxwl/article/details/6232577\">JNI性能测试一—JNI调用C与Java调用java性能比较</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;mid=207548094&amp;idx=1&amp;sn=1a277620bc28349368b68ed98fbefebe\">微信ANDROID客户端-会话速度提升70%的背后</a></li>\n<li><a href=\"http://www.infoq.com/cn/news/2014/11/new-android-gradle\">新的Andriod Gradle插件可自动移除无用资源</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;mid=208008519&amp;idx=1&amp;sn=278b7793699a654b51588319b15b3013\">Android安装包相关知识汇总</a></li>\n<li><a href=\"http://gold.xitu.io/entry/55272f6be4b0da2c5deb7f36\">Android优化实践</a></li>\n<li><a href=\"https://developer.android.com/training/articles/perf-tips.html\">Performance Tips</a></li>\n<li><a href=\"https://developer.android.com/training/articles/memory.html#YourApp\">Managing Your App’s Memory</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"Android后台调度任务与省电","date":"2016-08-15T01:07:03.000Z","_content":"\n## I. Handler:\n\n> 在进程存活的期间有效使用, Google官方推荐使用。\n> 相关机制可以参见: [Android Handler Looper机制](http://blog.dreamtobe.cn/2016/03/11/android_handler_looper/)\n\n- 简单易用。\n- 稳定高效。\n\n## II. AlarmManager:\n\n> 利用系统层级的闹钟服务(持有`Wake Lock`)。\n\n<!-- more -->\n\n#### 1. 使用场景\n\n> 在大概的时间间隔(重复)运行指定任务。\n> 在精确的时间间隔(重复)运行指定任务。\n\n- 需要精确的定时(重复)任务，如闹钟。\n- 非网络访问的，大概时间间隔的定时(重复)任务。\n- Google官方不建议网络请求相关的业务使用`AlarmManager`。\n\n#### 2. 特征\n\n- 运行在系统的闹钟服务上的，注册以后，无论是自己的应用进程或组件是否存在，都会正常运作。\n- 所有注册的闹钟服务都会在系统重启后复位，因此如果需要保证任务，就需要注册`RECEIVE_BOOT_COMPLETE`广播，确保重启后，可以重新将任务注册到闹钟服务中。\n- `AlarmManager`处理的是一个`PendingIntent`。\n- 考虑到电量损耗，建议非特殊情况使用大概时间间隔的规则，这样Android会尽量让几个任务打包在一起执行，防止频繁的唤起手机。\n\n## III. Job Scheduler:\n\n> [JobScheduler官方文档](https://developer.android.com/reference/android/app/job/JobScheduler.html)\n\n#### 1. 使用场景\n\n> 在指定特定场景下执行指定任务\n\n- Google官方建议网络请求相关业务放到`Job Scheduler`，由于其的省电的特性。\n- 一些与特定场景(`JobInfo`)绑定的任务。\n\n#### 2. 特征\n\n- `Job Scheduler`只有在`Api21`或以上的系统支持。\n- `Job Scheduler`是将多个任务打包在一个场景下执行。\n- 在系统重启以后，任务会依然保留在`Job Scheduler`当中，因此不需要监听系统启动状态重复设定。\n- 如果在一定期限内还没有满足特定执行所需情况，`Job Scheduler`会将这些任务加入队列，并且随后会进行执行。\n\n#### 3. 接口类型\n\n```java\nboolean onStartJob(JobParams params) {\n    // 开始执行\n    // 注意这个方法是在主线程执行的，如果是耗时操作请抛到独立线程中\n    // jobFinished(JobParameters params) // 在完成任务并且决定是否还需要定时执行更多任务\n    // return 是否是在独立现在还有事务要执行\n}\n\nvoid onStopJob(){\n    // 用于清理数据，在结束任务后被回调。\n}\n```\n\n## IV. GCM(FCM)\n\n> GCM Network Manager实际上在 Api 21 或以上也是使用了 Job Scheduler，在此之前的版本使用的是Google Play Service中实现Job Scheduler的功能。\n> 在[GCMNetworkManager](https://developers.google.com/android/reference/com/google/android/gms/gcm/GcmNetworkManager)中有很多利于省电的规则。\n> 在中国内地，该服务被墙，无法正常使用。\n\n#### 1. 使用场景\n\n- 实时消息推送。\n- 非实时消息推送。\n\n#### 2. 特征\n\n- 系统级别维护的长链接，十分稳定。\n\n#### 3. 接口类型\n\n- 通过 `OneoffTask.Builder()`与`PeriodicTask.Builder()`创建任务。\n- `GcmTaskService#onRunTask(TaskParams params)`是在后台线程执行的。\n\n## V. Sync Adapter\n\n> [Transferring Data Using Sync Adapters](https://developer.android.com/training/sync-adapters/index.html)\n\n![](/img/android-scheduler_syncs-adapter.png)\n\n#### 1. 使用场景\n\n> 用于同步服务端与本地设备中的数据。\n\n- 通常是用于同步较多的数据，如系统联系人信息、Dropbox等。\n\n#### 2. 特征\n\n- 省电稳定。\n- 可绑定一个账户。\n- 利于大数据同步。\n- 通过提供`ContentProvider`，可以快捷的与服务端同步的数据库。\n- 只有在存在网络的时候才触发同步。\n- 不需要依赖Google Play Service。\n- 用户可以通过设置中主动查看同步的时间，以及触发同步，或者关闭同步。\n- `Sync Adapter`在`API7`或以上就可以使用，因此在一些场景下这是`Job Scheduler`在`API21`之前比较好的替代品。\n\n#### 3. 在一定的场景下触发同步\n\n> 尽可能的打包所有需要同步的任务在一个周期中执行，以此来进行尽可能的节省手机电量。\n\n- 服务端或设备端数据发生变化。\n- 手机闲置时。\n- 一天。\n- 如果同步失败，会放到同步失败的队列中，在尽可能的时候进行同步。\n\n## VI. Doze Mode\n\n### Deep Doze Mode\n\n> `API23`中直接称其为`Doze Mode`。\n\n#### 1. 特征\n\n> **旨在**: 在用户离开设备以后，尽可能的减少手机电量的消耗。\n\n- 无论应用指定的`Target SDK`是多少，只要设备是`Android 6`或以上会启用该模式。\n- 开发人员并不需要做特殊的适配，但是会对上面提到的所有Schedule的方式(`Job Scheduler`、`AlarmManager`、`Syncs Adapter`)产生影响。\n\n> 所有任务周期通过移动窗口打包任务执行，并且间隔时间会越来越久。\n\n![](/img/android-scheduler_deep-doze.png)\n\n#### 2. 进入条件\n\n会同时满足以下情况一段时间(大约30分钟)以后生效:\n\n- 手机没有在充电\n- 屏幕被关闭\n- 手机各方状态保持稳定\n\n> 退出条件是，进入条件中任意条件状态发生变化。\n\n#### 3. 在两个处理窗口之间的手机状态\n\n1. 对所有应用拒绝网络访问。\n2. 所有`JobScheduler`、`Sync-Adapter`、`AlarmManager`的任务都会被延后到窗口中执行。\n3. 系统会拒绝所有来自应用的`Wake Lock`\n4. 停止所有Wifi以及GPS扫描\n5. 减少位置事件从设备检测WiFi热点。\n\n### Light Doze Mode\n\n> `Android 7`或以上会启用该模式。\n\n#### 1. 特征\n\n- 相比`Deep Doze Mode`，打包执行任务的频率会更高些。\n\n![](/img/android-scheduler_light-doze.png)\n\n#### 2. 进入条件\n\n会同时满足以下情况一段时间(大约几分钟)以后生效:\n\n- 手机没有在充电\n- 屏幕被关闭\n- 处于稳定状态/不稳定状态\n\n或者在`Deep Doze Mode`的情况下同时满足以下条件下生效:\n\n- 屏幕关闭\n- 手机没有在充电\n- 手机不再处于稳定状态\n\n#### 3. 退出条件\n\n- 屏幕打开\n- 手机开始充电\n- 进入`Deep Doze Mode`\n\n#### 4. 在两个处理窗口之间的手机状态\n\n- 对所有应用拒绝网络访问。\n- 所有`JobScheduler`与`Sync Adapter`的任务都会被延后到窗口中执行。\n- 不会对`AlarmManager`中的任务进行影响，但是将无网络访问（如果你的任务需要网络访问，是时候改用`JobScheduler`或`Sync Adapter`了，这样才会保证在任务窗口执行会有网络）\n\n### 中断/避开Doze\n\n> 以下所有情况，Google官方都建议不在特殊情景，不要去使用，由于中断了Doze Mode的省电规则。\n\n#### 1. AlarmManager\n\n- 在精确的时间间隔中运行的任务: `setAndAllowWhileIdle()`、`setExactAndAllowWhileIdle()`。但是在非窗口期间并不解除无网络访问的限制，并且只有10s的时间给予处理。\n- 指定闹钟事件`AlarmManager.setAlarmClock()`的事件会在闹钟结束前，令系统短暂的完全退出Doze模式，并且正常处理事件，系统为了突显该闹钟事件，将会在系统的`Status Bar`上显示物理闹钟的ICON。\n\n#### 2. FCM/GCM\n\n> (Firebase Cloud Messaging，旧版中称为Google Cloud Messaging(GCM))。\n\nFCM/GCM中高优先级的任务配置中(`\"priority\" : \"high\"`) 的消息，在Doze模式下可以正常及时到达。\n\n#### 3. 白名单\n\n> [白名单官方文档](https://developer.android.com/training/monitoring-device-state/doze-standby.html#support_for_other_use_cases)\n> [官方建议可考虑加入白名单的情况](https://developer.android.com/training/monitoring-device-state/doze-standby.html#whitelisting-cases)\n\n- 主动请求加入白名单，用户同意以后才加入白名单;\n- 用户也可以主动将应用从白名单中删除或将应用添加到白名单中;\n- 应用可以通过`isIgnoringBatteryOptimizations()`来获知是否在白名单中;\n- 白名单的应用可以访问网络与持有有效的`Wake Lock`，但是其他`Doze`的约束依然存在(如延后的`Job Scheduler`、`Syncs-Adapter`、`AlarmManager`);\n\n白名单的请求方式:\n\n- 通过[ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGS](https://developer.android.com/reference/android/provider/Settings.html#ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGS)打开电量优化页面，用户可以通过搜索来关闭应用的电量优化，以此加入白名单。\n- 先持有[REQUEST_IGNORE_BATTERY_OPTIMIZATIONS](https://developer.android.com/reference/android/Manifest.permission.html#REQUEST_IGNORE_BATTERY_OPTIMIZATIONS)权限，然后通过启动Intent[ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS](https://developer.android.com/reference/android/provider/Settings.html#ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS)直接弹出Dialog让用户关闭应用的电量优化，以此加入白名单。\n\n#### 4. 特殊情况\n\n前台服务(`Foreground Service`)将不会受到`Doze`模式影响。\n\n### Doze模式测试\n\n> Google官方提供了一些adb命令用于测试`Doze`模式，而非需要通过等待来进入`Doze`模式的。\n\n#### 1. 进入Doze模式\n\n- 准备一台系统是在`Android Nougat Developer Preview4`或以上版本的设备。\n- 将其连接连接到电脑。\n- 通过执行`adb shell dumpsys battery unplug`命令让设备进入未连接充电的模式。\n- 通过执行`adb shell dumpsys deviceidle step [light|deep]`强行进入`Doze`模式。\n\n> 退出`Doze`模式，让手机恢复正常需要复位充电模式:`adb shell dumpsys battery reset`。\n\n#### 2. 其他指令\n\n- 获取设备状态:`adb shell dumpsys deviceidle get [light|deep|force|screen|charging|network]`。\n\n在`Android Nougat Developer Preview 4`中，`Doze`模式的状态周期是:\n\n```\nLight: ACTIVE -> IDLE -> IDLE_MAINTENANCE -> OVERRIDE\nDeep: ACTIVE -> IDLE_PENDING -> SENSING -> LOCATING -> IDLE -> IDLE_MAINTENANCE\n```\n\n---\n\n本文已经发布到JackBlog公众号，可请直接访问: [Android后台调度任务与省电 - JacksBlog](http://mp.weixin.qq.com/s?__biz=MzIyMjQxMzAzOA==&mid=2247483685&idx=1&sn=7f548740be9dd4e5b8849b861cb75ec7)\n\n---\n\n- [Choosing the Right Background Scheduler in Android](https://www.bignerdranch.com/blog/choosing-the-right-background-scheduler-in-android/)\n- [Diving into Doze Mode for Developers](https://www.bignerdranch.com/blog/diving-into-doze-mode-for-developers/)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/android_scheduler_and_battery.md","raw":"title: Android后台调度任务与省电\ndate: 2016-08-15 09:07:03\npermalink: 2016/08/15/android_scheduler_and_battery\ntags:\n- Android\n- Scheduler\n- Job Scheduler\n- Syncs-Adapter\n- AlarmManager\n- Doze Mode\n\n---\n\n## I. Handler:\n\n> 在进程存活的期间有效使用, Google官方推荐使用。\n> 相关机制可以参见: [Android Handler Looper机制](http://blog.dreamtobe.cn/2016/03/11/android_handler_looper/)\n\n- 简单易用。\n- 稳定高效。\n\n## II. AlarmManager:\n\n> 利用系统层级的闹钟服务(持有`Wake Lock`)。\n\n<!-- more -->\n\n#### 1. 使用场景\n\n> 在大概的时间间隔(重复)运行指定任务。\n> 在精确的时间间隔(重复)运行指定任务。\n\n- 需要精确的定时(重复)任务，如闹钟。\n- 非网络访问的，大概时间间隔的定时(重复)任务。\n- Google官方不建议网络请求相关的业务使用`AlarmManager`。\n\n#### 2. 特征\n\n- 运行在系统的闹钟服务上的，注册以后，无论是自己的应用进程或组件是否存在，都会正常运作。\n- 所有注册的闹钟服务都会在系统重启后复位，因此如果需要保证任务，就需要注册`RECEIVE_BOOT_COMPLETE`广播，确保重启后，可以重新将任务注册到闹钟服务中。\n- `AlarmManager`处理的是一个`PendingIntent`。\n- 考虑到电量损耗，建议非特殊情况使用大概时间间隔的规则，这样Android会尽量让几个任务打包在一起执行，防止频繁的唤起手机。\n\n## III. Job Scheduler:\n\n> [JobScheduler官方文档](https://developer.android.com/reference/android/app/job/JobScheduler.html)\n\n#### 1. 使用场景\n\n> 在指定特定场景下执行指定任务\n\n- Google官方建议网络请求相关业务放到`Job Scheduler`，由于其的省电的特性。\n- 一些与特定场景(`JobInfo`)绑定的任务。\n\n#### 2. 特征\n\n- `Job Scheduler`只有在`Api21`或以上的系统支持。\n- `Job Scheduler`是将多个任务打包在一个场景下执行。\n- 在系统重启以后，任务会依然保留在`Job Scheduler`当中，因此不需要监听系统启动状态重复设定。\n- 如果在一定期限内还没有满足特定执行所需情况，`Job Scheduler`会将这些任务加入队列，并且随后会进行执行。\n\n#### 3. 接口类型\n\n```java\nboolean onStartJob(JobParams params) {\n    // 开始执行\n    // 注意这个方法是在主线程执行的，如果是耗时操作请抛到独立线程中\n    // jobFinished(JobParameters params) // 在完成任务并且决定是否还需要定时执行更多任务\n    // return 是否是在独立现在还有事务要执行\n}\n\nvoid onStopJob(){\n    // 用于清理数据，在结束任务后被回调。\n}\n```\n\n## IV. GCM(FCM)\n\n> GCM Network Manager实际上在 Api 21 或以上也是使用了 Job Scheduler，在此之前的版本使用的是Google Play Service中实现Job Scheduler的功能。\n> 在[GCMNetworkManager](https://developers.google.com/android/reference/com/google/android/gms/gcm/GcmNetworkManager)中有很多利于省电的规则。\n> 在中国内地，该服务被墙，无法正常使用。\n\n#### 1. 使用场景\n\n- 实时消息推送。\n- 非实时消息推送。\n\n#### 2. 特征\n\n- 系统级别维护的长链接，十分稳定。\n\n#### 3. 接口类型\n\n- 通过 `OneoffTask.Builder()`与`PeriodicTask.Builder()`创建任务。\n- `GcmTaskService#onRunTask(TaskParams params)`是在后台线程执行的。\n\n## V. Sync Adapter\n\n> [Transferring Data Using Sync Adapters](https://developer.android.com/training/sync-adapters/index.html)\n\n![](/img/android-scheduler_syncs-adapter.png)\n\n#### 1. 使用场景\n\n> 用于同步服务端与本地设备中的数据。\n\n- 通常是用于同步较多的数据，如系统联系人信息、Dropbox等。\n\n#### 2. 特征\n\n- 省电稳定。\n- 可绑定一个账户。\n- 利于大数据同步。\n- 通过提供`ContentProvider`，可以快捷的与服务端同步的数据库。\n- 只有在存在网络的时候才触发同步。\n- 不需要依赖Google Play Service。\n- 用户可以通过设置中主动查看同步的时间，以及触发同步，或者关闭同步。\n- `Sync Adapter`在`API7`或以上就可以使用，因此在一些场景下这是`Job Scheduler`在`API21`之前比较好的替代品。\n\n#### 3. 在一定的场景下触发同步\n\n> 尽可能的打包所有需要同步的任务在一个周期中执行，以此来进行尽可能的节省手机电量。\n\n- 服务端或设备端数据发生变化。\n- 手机闲置时。\n- 一天。\n- 如果同步失败，会放到同步失败的队列中，在尽可能的时候进行同步。\n\n## VI. Doze Mode\n\n### Deep Doze Mode\n\n> `API23`中直接称其为`Doze Mode`。\n\n#### 1. 特征\n\n> **旨在**: 在用户离开设备以后，尽可能的减少手机电量的消耗。\n\n- 无论应用指定的`Target SDK`是多少，只要设备是`Android 6`或以上会启用该模式。\n- 开发人员并不需要做特殊的适配，但是会对上面提到的所有Schedule的方式(`Job Scheduler`、`AlarmManager`、`Syncs Adapter`)产生影响。\n\n> 所有任务周期通过移动窗口打包任务执行，并且间隔时间会越来越久。\n\n![](/img/android-scheduler_deep-doze.png)\n\n#### 2. 进入条件\n\n会同时满足以下情况一段时间(大约30分钟)以后生效:\n\n- 手机没有在充电\n- 屏幕被关闭\n- 手机各方状态保持稳定\n\n> 退出条件是，进入条件中任意条件状态发生变化。\n\n#### 3. 在两个处理窗口之间的手机状态\n\n1. 对所有应用拒绝网络访问。\n2. 所有`JobScheduler`、`Sync-Adapter`、`AlarmManager`的任务都会被延后到窗口中执行。\n3. 系统会拒绝所有来自应用的`Wake Lock`\n4. 停止所有Wifi以及GPS扫描\n5. 减少位置事件从设备检测WiFi热点。\n\n### Light Doze Mode\n\n> `Android 7`或以上会启用该模式。\n\n#### 1. 特征\n\n- 相比`Deep Doze Mode`，打包执行任务的频率会更高些。\n\n![](/img/android-scheduler_light-doze.png)\n\n#### 2. 进入条件\n\n会同时满足以下情况一段时间(大约几分钟)以后生效:\n\n- 手机没有在充电\n- 屏幕被关闭\n- 处于稳定状态/不稳定状态\n\n或者在`Deep Doze Mode`的情况下同时满足以下条件下生效:\n\n- 屏幕关闭\n- 手机没有在充电\n- 手机不再处于稳定状态\n\n#### 3. 退出条件\n\n- 屏幕打开\n- 手机开始充电\n- 进入`Deep Doze Mode`\n\n#### 4. 在两个处理窗口之间的手机状态\n\n- 对所有应用拒绝网络访问。\n- 所有`JobScheduler`与`Sync Adapter`的任务都会被延后到窗口中执行。\n- 不会对`AlarmManager`中的任务进行影响，但是将无网络访问（如果你的任务需要网络访问，是时候改用`JobScheduler`或`Sync Adapter`了，这样才会保证在任务窗口执行会有网络）\n\n### 中断/避开Doze\n\n> 以下所有情况，Google官方都建议不在特殊情景，不要去使用，由于中断了Doze Mode的省电规则。\n\n#### 1. AlarmManager\n\n- 在精确的时间间隔中运行的任务: `setAndAllowWhileIdle()`、`setExactAndAllowWhileIdle()`。但是在非窗口期间并不解除无网络访问的限制，并且只有10s的时间给予处理。\n- 指定闹钟事件`AlarmManager.setAlarmClock()`的事件会在闹钟结束前，令系统短暂的完全退出Doze模式，并且正常处理事件，系统为了突显该闹钟事件，将会在系统的`Status Bar`上显示物理闹钟的ICON。\n\n#### 2. FCM/GCM\n\n> (Firebase Cloud Messaging，旧版中称为Google Cloud Messaging(GCM))。\n\nFCM/GCM中高优先级的任务配置中(`\"priority\" : \"high\"`) 的消息，在Doze模式下可以正常及时到达。\n\n#### 3. 白名单\n\n> [白名单官方文档](https://developer.android.com/training/monitoring-device-state/doze-standby.html#support_for_other_use_cases)\n> [官方建议可考虑加入白名单的情况](https://developer.android.com/training/monitoring-device-state/doze-standby.html#whitelisting-cases)\n\n- 主动请求加入白名单，用户同意以后才加入白名单;\n- 用户也可以主动将应用从白名单中删除或将应用添加到白名单中;\n- 应用可以通过`isIgnoringBatteryOptimizations()`来获知是否在白名单中;\n- 白名单的应用可以访问网络与持有有效的`Wake Lock`，但是其他`Doze`的约束依然存在(如延后的`Job Scheduler`、`Syncs-Adapter`、`AlarmManager`);\n\n白名单的请求方式:\n\n- 通过[ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGS](https://developer.android.com/reference/android/provider/Settings.html#ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGS)打开电量优化页面，用户可以通过搜索来关闭应用的电量优化，以此加入白名单。\n- 先持有[REQUEST_IGNORE_BATTERY_OPTIMIZATIONS](https://developer.android.com/reference/android/Manifest.permission.html#REQUEST_IGNORE_BATTERY_OPTIMIZATIONS)权限，然后通过启动Intent[ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS](https://developer.android.com/reference/android/provider/Settings.html#ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS)直接弹出Dialog让用户关闭应用的电量优化，以此加入白名单。\n\n#### 4. 特殊情况\n\n前台服务(`Foreground Service`)将不会受到`Doze`模式影响。\n\n### Doze模式测试\n\n> Google官方提供了一些adb命令用于测试`Doze`模式，而非需要通过等待来进入`Doze`模式的。\n\n#### 1. 进入Doze模式\n\n- 准备一台系统是在`Android Nougat Developer Preview4`或以上版本的设备。\n- 将其连接连接到电脑。\n- 通过执行`adb shell dumpsys battery unplug`命令让设备进入未连接充电的模式。\n- 通过执行`adb shell dumpsys deviceidle step [light|deep]`强行进入`Doze`模式。\n\n> 退出`Doze`模式，让手机恢复正常需要复位充电模式:`adb shell dumpsys battery reset`。\n\n#### 2. 其他指令\n\n- 获取设备状态:`adb shell dumpsys deviceidle get [light|deep|force|screen|charging|network]`。\n\n在`Android Nougat Developer Preview 4`中，`Doze`模式的状态周期是:\n\n```\nLight: ACTIVE -> IDLE -> IDLE_MAINTENANCE -> OVERRIDE\nDeep: ACTIVE -> IDLE_PENDING -> SENSING -> LOCATING -> IDLE -> IDLE_MAINTENANCE\n```\n\n---\n\n本文已经发布到JackBlog公众号，可请直接访问: [Android后台调度任务与省电 - JacksBlog](http://mp.weixin.qq.com/s?__biz=MzIyMjQxMzAzOA==&mid=2247483685&idx=1&sn=7f548740be9dd4e5b8849b861cb75ec7)\n\n---\n\n- [Choosing the Right Background Scheduler in Android](https://www.bignerdranch.com/blog/choosing-the-right-background-scheduler-in-android/)\n- [Diving into Doze Mode for Developers](https://www.bignerdranch.com/blog/diving-into-doze-mode-for-developers/)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2016/08/15/android_scheduler_and_battery","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66ih002095bu6glvaas6","content":"<h2 id=\"I-Handler\"><a href=\"#I-Handler\" class=\"headerlink\" title=\"I. Handler:\"></a>I. Handler:</h2><blockquote>\n<p>在进程存活的期间有效使用, Google官方推荐使用。<br>相关机制可以参见: <a href=\"http://blog.dreamtobe.cn/2016/03/11/android_handler_looper/\">Android Handler Looper机制</a></p>\n</blockquote>\n<ul>\n<li>简单易用。</li>\n<li>稳定高效。</li>\n</ul>\n<h2 id=\"II-AlarmManager\"><a href=\"#II-AlarmManager\" class=\"headerlink\" title=\"II. AlarmManager:\"></a>II. AlarmManager:</h2><blockquote>\n<p>利用系统层级的闹钟服务(持有<code>Wake Lock</code>)。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h4 id=\"1-使用场景\"><a href=\"#1-使用场景\" class=\"headerlink\" title=\"1. 使用场景\"></a>1. 使用场景</h4><blockquote>\n<p>在大概的时间间隔(重复)运行指定任务。<br>在精确的时间间隔(重复)运行指定任务。</p>\n</blockquote>\n<ul>\n<li>需要精确的定时(重复)任务，如闹钟。</li>\n<li>非网络访问的，大概时间间隔的定时(重复)任务。</li>\n<li>Google官方不建议网络请求相关的业务使用<code>AlarmManager</code>。</li>\n</ul>\n<h4 id=\"2-特征\"><a href=\"#2-特征\" class=\"headerlink\" title=\"2. 特征\"></a>2. 特征</h4><ul>\n<li>运行在系统的闹钟服务上的，注册以后，无论是自己的应用进程或组件是否存在，都会正常运作。</li>\n<li>所有注册的闹钟服务都会在系统重启后复位，因此如果需要保证任务，就需要注册<code>RECEIVE_BOOT_COMPLETE</code>广播，确保重启后，可以重新将任务注册到闹钟服务中。</li>\n<li><code>AlarmManager</code>处理的是一个<code>PendingIntent</code>。</li>\n<li>考虑到电量损耗，建议非特殊情况使用大概时间间隔的规则，这样Android会尽量让几个任务打包在一起执行，防止频繁的唤起手机。</li>\n</ul>\n<h2 id=\"III-Job-Scheduler\"><a href=\"#III-Job-Scheduler\" class=\"headerlink\" title=\"III. Job Scheduler:\"></a>III. Job Scheduler:</h2><blockquote>\n<p><a href=\"https://developer.android.com/reference/android/app/job/JobScheduler.html\" target=\"_blank\" rel=\"external\">JobScheduler官方文档</a></p>\n</blockquote>\n<h4 id=\"1-使用场景-1\"><a href=\"#1-使用场景-1\" class=\"headerlink\" title=\"1. 使用场景\"></a>1. 使用场景</h4><blockquote>\n<p>在指定特定场景下执行指定任务</p>\n</blockquote>\n<ul>\n<li>Google官方建议网络请求相关业务放到<code>Job Scheduler</code>，由于其的省电的特性。</li>\n<li>一些与特定场景(<code>JobInfo</code>)绑定的任务。</li>\n</ul>\n<h4 id=\"2-特征-1\"><a href=\"#2-特征-1\" class=\"headerlink\" title=\"2. 特征\"></a>2. 特征</h4><ul>\n<li><code>Job Scheduler</code>只有在<code>Api21</code>或以上的系统支持。</li>\n<li><code>Job Scheduler</code>是将多个任务打包在一个场景下执行。</li>\n<li>在系统重启以后，任务会依然保留在<code>Job Scheduler</code>当中，因此不需要监听系统启动状态重复设定。</li>\n<li>如果在一定期限内还没有满足特定执行所需情况，<code>Job Scheduler</code>会将这些任务加入队列，并且随后会进行执行。</li>\n</ul>\n<h4 id=\"3-接口类型\"><a href=\"#3-接口类型\" class=\"headerlink\" title=\"3. 接口类型\"></a>3. 接口类型</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">onStartJob</span><span class=\"params\">(JobParams params)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 开始执行</span></div><div class=\"line\">    <span class=\"comment\">// 注意这个方法是在主线程执行的，如果是耗时操作请抛到独立线程中</span></div><div class=\"line\">    <span class=\"comment\">// jobFinished(JobParameters params) // 在完成任务并且决定是否还需要定时执行更多任务</span></div><div class=\"line\">    <span class=\"comment\">// return 是否是在独立现在还有事务要执行</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onStopJob</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 用于清理数据，在结束任务后被回调。</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"IV-GCM-FCM\"><a href=\"#IV-GCM-FCM\" class=\"headerlink\" title=\"IV. GCM(FCM)\"></a>IV. GCM(FCM)</h2><blockquote>\n<p>GCM Network Manager实际上在 Api 21 或以上也是使用了 Job Scheduler，在此之前的版本使用的是Google Play Service中实现Job Scheduler的功能。<br>在<a href=\"https://developers.google.com/android/reference/com/google/android/gms/gcm/GcmNetworkManager\" target=\"_blank\" rel=\"external\">GCMNetworkManager</a>中有很多利于省电的规则。<br>在中国内地，该服务被墙，无法正常使用。</p>\n</blockquote>\n<h4 id=\"1-使用场景-2\"><a href=\"#1-使用场景-2\" class=\"headerlink\" title=\"1. 使用场景\"></a>1. 使用场景</h4><ul>\n<li>实时消息推送。</li>\n<li>非实时消息推送。</li>\n</ul>\n<h4 id=\"2-特征-2\"><a href=\"#2-特征-2\" class=\"headerlink\" title=\"2. 特征\"></a>2. 特征</h4><ul>\n<li>系统级别维护的长链接，十分稳定。</li>\n</ul>\n<h4 id=\"3-接口类型-1\"><a href=\"#3-接口类型-1\" class=\"headerlink\" title=\"3. 接口类型\"></a>3. 接口类型</h4><ul>\n<li>通过 <code>OneoffTask.Builder()</code>与<code>PeriodicTask.Builder()</code>创建任务。</li>\n<li><code>GcmTaskService#onRunTask(TaskParams params)</code>是在后台线程执行的。</li>\n</ul>\n<h2 id=\"V-Sync-Adapter\"><a href=\"#V-Sync-Adapter\" class=\"headerlink\" title=\"V. Sync Adapter\"></a>V. Sync Adapter</h2><blockquote>\n<p><a href=\"https://developer.android.com/training/sync-adapters/index.html\" target=\"_blank\" rel=\"external\">Transferring Data Using Sync Adapters</a></p>\n</blockquote>\n<p><img src=\"/img/android-scheduler_syncs-adapter.png\" alt=\"\"></p>\n<h4 id=\"1-使用场景-3\"><a href=\"#1-使用场景-3\" class=\"headerlink\" title=\"1. 使用场景\"></a>1. 使用场景</h4><blockquote>\n<p>用于同步服务端与本地设备中的数据。</p>\n</blockquote>\n<ul>\n<li>通常是用于同步较多的数据，如系统联系人信息、Dropbox等。</li>\n</ul>\n<h4 id=\"2-特征-3\"><a href=\"#2-特征-3\" class=\"headerlink\" title=\"2. 特征\"></a>2. 特征</h4><ul>\n<li>省电稳定。</li>\n<li>可绑定一个账户。</li>\n<li>利于大数据同步。</li>\n<li>通过提供<code>ContentProvider</code>，可以快捷的与服务端同步的数据库。</li>\n<li>只有在存在网络的时候才触发同步。</li>\n<li>不需要依赖Google Play Service。</li>\n<li>用户可以通过设置中主动查看同步的时间，以及触发同步，或者关闭同步。</li>\n<li><code>Sync Adapter</code>在<code>API7</code>或以上就可以使用，因此在一些场景下这是<code>Job Scheduler</code>在<code>API21</code>之前比较好的替代品。</li>\n</ul>\n<h4 id=\"3-在一定的场景下触发同步\"><a href=\"#3-在一定的场景下触发同步\" class=\"headerlink\" title=\"3. 在一定的场景下触发同步\"></a>3. 在一定的场景下触发同步</h4><blockquote>\n<p>尽可能的打包所有需要同步的任务在一个周期中执行，以此来进行尽可能的节省手机电量。</p>\n</blockquote>\n<ul>\n<li>服务端或设备端数据发生变化。</li>\n<li>手机闲置时。</li>\n<li>一天。</li>\n<li>如果同步失败，会放到同步失败的队列中，在尽可能的时候进行同步。</li>\n</ul>\n<h2 id=\"VI-Doze-Mode\"><a href=\"#VI-Doze-Mode\" class=\"headerlink\" title=\"VI. Doze Mode\"></a>VI. Doze Mode</h2><h3 id=\"Deep-Doze-Mode\"><a href=\"#Deep-Doze-Mode\" class=\"headerlink\" title=\"Deep Doze Mode\"></a>Deep Doze Mode</h3><blockquote>\n<p><code>API23</code>中直接称其为<code>Doze Mode</code>。</p>\n</blockquote>\n<h4 id=\"1-特征\"><a href=\"#1-特征\" class=\"headerlink\" title=\"1. 特征\"></a>1. 特征</h4><blockquote>\n<p><strong>旨在</strong>: 在用户离开设备以后，尽可能的减少手机电量的消耗。</p>\n</blockquote>\n<ul>\n<li>无论应用指定的<code>Target SDK</code>是多少，只要设备是<code>Android 6</code>或以上会启用该模式。</li>\n<li>开发人员并不需要做特殊的适配，但是会对上面提到的所有Schedule的方式(<code>Job Scheduler</code>、<code>AlarmManager</code>、<code>Syncs Adapter</code>)产生影响。</li>\n</ul>\n<blockquote>\n<p>所有任务周期通过移动窗口打包任务执行，并且间隔时间会越来越久。</p>\n</blockquote>\n<p><img src=\"/img/android-scheduler_deep-doze.png\" alt=\"\"></p>\n<h4 id=\"2-进入条件\"><a href=\"#2-进入条件\" class=\"headerlink\" title=\"2. 进入条件\"></a>2. 进入条件</h4><p>会同时满足以下情况一段时间(大约30分钟)以后生效:</p>\n<ul>\n<li>手机没有在充电</li>\n<li>屏幕被关闭</li>\n<li>手机各方状态保持稳定</li>\n</ul>\n<blockquote>\n<p>退出条件是，进入条件中任意条件状态发生变化。</p>\n</blockquote>\n<h4 id=\"3-在两个处理窗口之间的手机状态\"><a href=\"#3-在两个处理窗口之间的手机状态\" class=\"headerlink\" title=\"3. 在两个处理窗口之间的手机状态\"></a>3. 在两个处理窗口之间的手机状态</h4><ol>\n<li>对所有应用拒绝网络访问。</li>\n<li>所有<code>JobScheduler</code>、<code>Sync-Adapter</code>、<code>AlarmManager</code>的任务都会被延后到窗口中执行。</li>\n<li>系统会拒绝所有来自应用的<code>Wake Lock</code></li>\n<li>停止所有Wifi以及GPS扫描</li>\n<li>减少位置事件从设备检测WiFi热点。</li>\n</ol>\n<h3 id=\"Light-Doze-Mode\"><a href=\"#Light-Doze-Mode\" class=\"headerlink\" title=\"Light Doze Mode\"></a>Light Doze Mode</h3><blockquote>\n<p><code>Android 7</code>或以上会启用该模式。</p>\n</blockquote>\n<h4 id=\"1-特征-1\"><a href=\"#1-特征-1\" class=\"headerlink\" title=\"1. 特征\"></a>1. 特征</h4><ul>\n<li>相比<code>Deep Doze Mode</code>，打包执行任务的频率会更高些。</li>\n</ul>\n<p><img src=\"/img/android-scheduler_light-doze.png\" alt=\"\"></p>\n<h4 id=\"2-进入条件-1\"><a href=\"#2-进入条件-1\" class=\"headerlink\" title=\"2. 进入条件\"></a>2. 进入条件</h4><p>会同时满足以下情况一段时间(大约几分钟)以后生效:</p>\n<ul>\n<li>手机没有在充电</li>\n<li>屏幕被关闭</li>\n<li>处于稳定状态/不稳定状态</li>\n</ul>\n<p>或者在<code>Deep Doze Mode</code>的情况下同时满足以下条件下生效:</p>\n<ul>\n<li>屏幕关闭</li>\n<li>手机没有在充电</li>\n<li>手机不再处于稳定状态</li>\n</ul>\n<h4 id=\"3-退出条件\"><a href=\"#3-退出条件\" class=\"headerlink\" title=\"3. 退出条件\"></a>3. 退出条件</h4><ul>\n<li>屏幕打开</li>\n<li>手机开始充电</li>\n<li>进入<code>Deep Doze Mode</code></li>\n</ul>\n<h4 id=\"4-在两个处理窗口之间的手机状态\"><a href=\"#4-在两个处理窗口之间的手机状态\" class=\"headerlink\" title=\"4. 在两个处理窗口之间的手机状态\"></a>4. 在两个处理窗口之间的手机状态</h4><ul>\n<li>对所有应用拒绝网络访问。</li>\n<li>所有<code>JobScheduler</code>与<code>Sync Adapter</code>的任务都会被延后到窗口中执行。</li>\n<li>不会对<code>AlarmManager</code>中的任务进行影响，但是将无网络访问（如果你的任务需要网络访问，是时候改用<code>JobScheduler</code>或<code>Sync Adapter</code>了，这样才会保证在任务窗口执行会有网络）</li>\n</ul>\n<h3 id=\"中断-避开Doze\"><a href=\"#中断-避开Doze\" class=\"headerlink\" title=\"中断/避开Doze\"></a>中断/避开Doze</h3><blockquote>\n<p>以下所有情况，Google官方都建议不在特殊情景，不要去使用，由于中断了Doze Mode的省电规则。</p>\n</blockquote>\n<h4 id=\"1-AlarmManager\"><a href=\"#1-AlarmManager\" class=\"headerlink\" title=\"1. AlarmManager\"></a>1. AlarmManager</h4><ul>\n<li>在精确的时间间隔中运行的任务: <code>setAndAllowWhileIdle()</code>、<code>setExactAndAllowWhileIdle()</code>。但是在非窗口期间并不解除无网络访问的限制，并且只有10s的时间给予处理。</li>\n<li>指定闹钟事件<code>AlarmManager.setAlarmClock()</code>的事件会在闹钟结束前，令系统短暂的完全退出Doze模式，并且正常处理事件，系统为了突显该闹钟事件，将会在系统的<code>Status Bar</code>上显示物理闹钟的ICON。</li>\n</ul>\n<h4 id=\"2-FCM-GCM\"><a href=\"#2-FCM-GCM\" class=\"headerlink\" title=\"2. FCM/GCM\"></a>2. FCM/GCM</h4><blockquote>\n<p>(Firebase Cloud Messaging，旧版中称为Google Cloud Messaging(GCM))。</p>\n</blockquote>\n<p>FCM/GCM中高优先级的任务配置中(<code>&quot;priority&quot; : &quot;high&quot;</code>) 的消息，在Doze模式下可以正常及时到达。</p>\n<h4 id=\"3-白名单\"><a href=\"#3-白名单\" class=\"headerlink\" title=\"3. 白名单\"></a>3. 白名单</h4><blockquote>\n<p><a href=\"https://developer.android.com/training/monitoring-device-state/doze-standby.html#support_for_other_use_cases\" target=\"_blank\" rel=\"external\">白名单官方文档</a><br><a href=\"https://developer.android.com/training/monitoring-device-state/doze-standby.html#whitelisting-cases\" target=\"_blank\" rel=\"external\">官方建议可考虑加入白名单的情况</a></p>\n</blockquote>\n<ul>\n<li>主动请求加入白名单，用户同意以后才加入白名单;</li>\n<li>用户也可以主动将应用从白名单中删除或将应用添加到白名单中;</li>\n<li>应用可以通过<code>isIgnoringBatteryOptimizations()</code>来获知是否在白名单中;</li>\n<li>白名单的应用可以访问网络与持有有效的<code>Wake Lock</code>，但是其他<code>Doze</code>的约束依然存在(如延后的<code>Job Scheduler</code>、<code>Syncs-Adapter</code>、<code>AlarmManager</code>);</li>\n</ul>\n<p>白名单的请求方式:</p>\n<ul>\n<li>通过<a href=\"https://developer.android.com/reference/android/provider/Settings.html#ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGS\" target=\"_blank\" rel=\"external\">ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGS</a>打开电量优化页面，用户可以通过搜索来关闭应用的电量优化，以此加入白名单。</li>\n<li>先持有<a href=\"https://developer.android.com/reference/android/Manifest.permission.html#REQUEST_IGNORE_BATTERY_OPTIMIZATIONS\" target=\"_blank\" rel=\"external\">REQUEST_IGNORE_BATTERY_OPTIMIZATIONS</a>权限，然后通过启动Intent<a href=\"https://developer.android.com/reference/android/provider/Settings.html#ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS\" target=\"_blank\" rel=\"external\">ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS</a>直接弹出Dialog让用户关闭应用的电量优化，以此加入白名单。</li>\n</ul>\n<h4 id=\"4-特殊情况\"><a href=\"#4-特殊情况\" class=\"headerlink\" title=\"4. 特殊情况\"></a>4. 特殊情况</h4><p>前台服务(<code>Foreground Service</code>)将不会受到<code>Doze</code>模式影响。</p>\n<h3 id=\"Doze模式测试\"><a href=\"#Doze模式测试\" class=\"headerlink\" title=\"Doze模式测试\"></a>Doze模式测试</h3><blockquote>\n<p>Google官方提供了一些adb命令用于测试<code>Doze</code>模式，而非需要通过等待来进入<code>Doze</code>模式的。</p>\n</blockquote>\n<h4 id=\"1-进入Doze模式\"><a href=\"#1-进入Doze模式\" class=\"headerlink\" title=\"1. 进入Doze模式\"></a>1. 进入Doze模式</h4><ul>\n<li>准备一台系统是在<code>Android Nougat Developer Preview4</code>或以上版本的设备。</li>\n<li>将其连接连接到电脑。</li>\n<li>通过执行<code>adb shell dumpsys battery unplug</code>命令让设备进入未连接充电的模式。</li>\n<li>通过执行<code>adb shell dumpsys deviceidle step [light|deep]</code>强行进入<code>Doze</code>模式。</li>\n</ul>\n<blockquote>\n<p>退出<code>Doze</code>模式，让手机恢复正常需要复位充电模式:<code>adb shell dumpsys battery reset</code>。</p>\n</blockquote>\n<h4 id=\"2-其他指令\"><a href=\"#2-其他指令\" class=\"headerlink\" title=\"2. 其他指令\"></a>2. 其他指令</h4><ul>\n<li>获取设备状态:<code>adb shell dumpsys deviceidle get [light|deep|force|screen|charging|network]</code>。</li>\n</ul>\n<p>在<code>Android Nougat Developer Preview 4</code>中，<code>Doze</code>模式的状态周期是:</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Light: ACTIVE -&gt; IDLE -&gt; IDLE_MAINTENANCE -&gt; OVERRIDE</div><div class=\"line\">Deep: ACTIVE -&gt; IDLE_PENDING -&gt; SENSING -&gt; LOCATING -&gt; IDLE -&gt; IDLE_MAINTENANCE</div></pre></td></tr></table></figure>\n<hr>\n<p>本文已经发布到JackBlog公众号，可请直接访问: <a href=\"http://mp.weixin.qq.com/s?__biz=MzIyMjQxMzAzOA==&amp;mid=2247483685&amp;idx=1&amp;sn=7f548740be9dd4e5b8849b861cb75ec7\" target=\"_blank\" rel=\"external\">Android后台调度任务与省电 - JacksBlog</a></p>\n<hr>\n<ul>\n<li><a href=\"https://www.bignerdranch.com/blog/choosing-the-right-background-scheduler-in-android/\" target=\"_blank\" rel=\"external\">Choosing the Right Background Scheduler in Android</a></li>\n<li><a href=\"https://www.bignerdranch.com/blog/diving-into-doze-mode-for-developers/\" target=\"_blank\" rel=\"external\">Diving into Doze Mode for Developers</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<h2 id=\"I-Handler\"><a href=\"#I-Handler\" class=\"headerlink\" title=\"I. Handler:\"></a>I. Handler:</h2><blockquote>\n<p>在进程存活的期间有效使用, Google官方推荐使用。<br>相关机制可以参见: <a href=\"http://blog.dreamtobe.cn/2016/03/11/android_handler_looper/\">Android Handler Looper机制</a></p>\n</blockquote>\n<ul>\n<li>简单易用。</li>\n<li>稳定高效。</li>\n</ul>\n<h2 id=\"II-AlarmManager\"><a href=\"#II-AlarmManager\" class=\"headerlink\" title=\"II. AlarmManager:\"></a>II. AlarmManager:</h2><blockquote>\n<p>利用系统层级的闹钟服务(持有<code>Wake Lock</code>)。</p>\n</blockquote>","more":"<h4 id=\"1-使用场景\"><a href=\"#1-使用场景\" class=\"headerlink\" title=\"1. 使用场景\"></a>1. 使用场景</h4><blockquote>\n<p>在大概的时间间隔(重复)运行指定任务。<br>在精确的时间间隔(重复)运行指定任务。</p>\n</blockquote>\n<ul>\n<li>需要精确的定时(重复)任务，如闹钟。</li>\n<li>非网络访问的，大概时间间隔的定时(重复)任务。</li>\n<li>Google官方不建议网络请求相关的业务使用<code>AlarmManager</code>。</li>\n</ul>\n<h4 id=\"2-特征\"><a href=\"#2-特征\" class=\"headerlink\" title=\"2. 特征\"></a>2. 特征</h4><ul>\n<li>运行在系统的闹钟服务上的，注册以后，无论是自己的应用进程或组件是否存在，都会正常运作。</li>\n<li>所有注册的闹钟服务都会在系统重启后复位，因此如果需要保证任务，就需要注册<code>RECEIVE_BOOT_COMPLETE</code>广播，确保重启后，可以重新将任务注册到闹钟服务中。</li>\n<li><code>AlarmManager</code>处理的是一个<code>PendingIntent</code>。</li>\n<li>考虑到电量损耗，建议非特殊情况使用大概时间间隔的规则，这样Android会尽量让几个任务打包在一起执行，防止频繁的唤起手机。</li>\n</ul>\n<h2 id=\"III-Job-Scheduler\"><a href=\"#III-Job-Scheduler\" class=\"headerlink\" title=\"III. Job Scheduler:\"></a>III. Job Scheduler:</h2><blockquote>\n<p><a href=\"https://developer.android.com/reference/android/app/job/JobScheduler.html\">JobScheduler官方文档</a></p>\n</blockquote>\n<h4 id=\"1-使用场景-1\"><a href=\"#1-使用场景-1\" class=\"headerlink\" title=\"1. 使用场景\"></a>1. 使用场景</h4><blockquote>\n<p>在指定特定场景下执行指定任务</p>\n</blockquote>\n<ul>\n<li>Google官方建议网络请求相关业务放到<code>Job Scheduler</code>，由于其的省电的特性。</li>\n<li>一些与特定场景(<code>JobInfo</code>)绑定的任务。</li>\n</ul>\n<h4 id=\"2-特征-1\"><a href=\"#2-特征-1\" class=\"headerlink\" title=\"2. 特征\"></a>2. 特征</h4><ul>\n<li><code>Job Scheduler</code>只有在<code>Api21</code>或以上的系统支持。</li>\n<li><code>Job Scheduler</code>是将多个任务打包在一个场景下执行。</li>\n<li>在系统重启以后，任务会依然保留在<code>Job Scheduler</code>当中，因此不需要监听系统启动状态重复设定。</li>\n<li>如果在一定期限内还没有满足特定执行所需情况，<code>Job Scheduler</code>会将这些任务加入队列，并且随后会进行执行。</li>\n</ul>\n<h4 id=\"3-接口类型\"><a href=\"#3-接口类型\" class=\"headerlink\" title=\"3. 接口类型\"></a>3. 接口类型</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">onStartJob</span><span class=\"params\">(JobParams params)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 开始执行</span></div><div class=\"line\">    <span class=\"comment\">// 注意这个方法是在主线程执行的，如果是耗时操作请抛到独立线程中</span></div><div class=\"line\">    <span class=\"comment\">// jobFinished(JobParameters params) // 在完成任务并且决定是否还需要定时执行更多任务</span></div><div class=\"line\">    <span class=\"comment\">// return 是否是在独立现在还有事务要执行</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onStopJob</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 用于清理数据，在结束任务后被回调。</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"IV-GCM-FCM\"><a href=\"#IV-GCM-FCM\" class=\"headerlink\" title=\"IV. GCM(FCM)\"></a>IV. GCM(FCM)</h2><blockquote>\n<p>GCM Network Manager实际上在 Api 21 或以上也是使用了 Job Scheduler，在此之前的版本使用的是Google Play Service中实现Job Scheduler的功能。<br>在<a href=\"https://developers.google.com/android/reference/com/google/android/gms/gcm/GcmNetworkManager\">GCMNetworkManager</a>中有很多利于省电的规则。<br>在中国内地，该服务被墙，无法正常使用。</p>\n</blockquote>\n<h4 id=\"1-使用场景-2\"><a href=\"#1-使用场景-2\" class=\"headerlink\" title=\"1. 使用场景\"></a>1. 使用场景</h4><ul>\n<li>实时消息推送。</li>\n<li>非实时消息推送。</li>\n</ul>\n<h4 id=\"2-特征-2\"><a href=\"#2-特征-2\" class=\"headerlink\" title=\"2. 特征\"></a>2. 特征</h4><ul>\n<li>系统级别维护的长链接，十分稳定。</li>\n</ul>\n<h4 id=\"3-接口类型-1\"><a href=\"#3-接口类型-1\" class=\"headerlink\" title=\"3. 接口类型\"></a>3. 接口类型</h4><ul>\n<li>通过 <code>OneoffTask.Builder()</code>与<code>PeriodicTask.Builder()</code>创建任务。</li>\n<li><code>GcmTaskService#onRunTask(TaskParams params)</code>是在后台线程执行的。</li>\n</ul>\n<h2 id=\"V-Sync-Adapter\"><a href=\"#V-Sync-Adapter\" class=\"headerlink\" title=\"V. Sync Adapter\"></a>V. Sync Adapter</h2><blockquote>\n<p><a href=\"https://developer.android.com/training/sync-adapters/index.html\">Transferring Data Using Sync Adapters</a></p>\n</blockquote>\n<p><img src=\"/img/android-scheduler_syncs-adapter.png\" alt=\"\"></p>\n<h4 id=\"1-使用场景-3\"><a href=\"#1-使用场景-3\" class=\"headerlink\" title=\"1. 使用场景\"></a>1. 使用场景</h4><blockquote>\n<p>用于同步服务端与本地设备中的数据。</p>\n</blockquote>\n<ul>\n<li>通常是用于同步较多的数据，如系统联系人信息、Dropbox等。</li>\n</ul>\n<h4 id=\"2-特征-3\"><a href=\"#2-特征-3\" class=\"headerlink\" title=\"2. 特征\"></a>2. 特征</h4><ul>\n<li>省电稳定。</li>\n<li>可绑定一个账户。</li>\n<li>利于大数据同步。</li>\n<li>通过提供<code>ContentProvider</code>，可以快捷的与服务端同步的数据库。</li>\n<li>只有在存在网络的时候才触发同步。</li>\n<li>不需要依赖Google Play Service。</li>\n<li>用户可以通过设置中主动查看同步的时间，以及触发同步，或者关闭同步。</li>\n<li><code>Sync Adapter</code>在<code>API7</code>或以上就可以使用，因此在一些场景下这是<code>Job Scheduler</code>在<code>API21</code>之前比较好的替代品。</li>\n</ul>\n<h4 id=\"3-在一定的场景下触发同步\"><a href=\"#3-在一定的场景下触发同步\" class=\"headerlink\" title=\"3. 在一定的场景下触发同步\"></a>3. 在一定的场景下触发同步</h4><blockquote>\n<p>尽可能的打包所有需要同步的任务在一个周期中执行，以此来进行尽可能的节省手机电量。</p>\n</blockquote>\n<ul>\n<li>服务端或设备端数据发生变化。</li>\n<li>手机闲置时。</li>\n<li>一天。</li>\n<li>如果同步失败，会放到同步失败的队列中，在尽可能的时候进行同步。</li>\n</ul>\n<h2 id=\"VI-Doze-Mode\"><a href=\"#VI-Doze-Mode\" class=\"headerlink\" title=\"VI. Doze Mode\"></a>VI. Doze Mode</h2><h3 id=\"Deep-Doze-Mode\"><a href=\"#Deep-Doze-Mode\" class=\"headerlink\" title=\"Deep Doze Mode\"></a>Deep Doze Mode</h3><blockquote>\n<p><code>API23</code>中直接称其为<code>Doze Mode</code>。</p>\n</blockquote>\n<h4 id=\"1-特征\"><a href=\"#1-特征\" class=\"headerlink\" title=\"1. 特征\"></a>1. 特征</h4><blockquote>\n<p><strong>旨在</strong>: 在用户离开设备以后，尽可能的减少手机电量的消耗。</p>\n</blockquote>\n<ul>\n<li>无论应用指定的<code>Target SDK</code>是多少，只要设备是<code>Android 6</code>或以上会启用该模式。</li>\n<li>开发人员并不需要做特殊的适配，但是会对上面提到的所有Schedule的方式(<code>Job Scheduler</code>、<code>AlarmManager</code>、<code>Syncs Adapter</code>)产生影响。</li>\n</ul>\n<blockquote>\n<p>所有任务周期通过移动窗口打包任务执行，并且间隔时间会越来越久。</p>\n</blockquote>\n<p><img src=\"/img/android-scheduler_deep-doze.png\" alt=\"\"></p>\n<h4 id=\"2-进入条件\"><a href=\"#2-进入条件\" class=\"headerlink\" title=\"2. 进入条件\"></a>2. 进入条件</h4><p>会同时满足以下情况一段时间(大约30分钟)以后生效:</p>\n<ul>\n<li>手机没有在充电</li>\n<li>屏幕被关闭</li>\n<li>手机各方状态保持稳定</li>\n</ul>\n<blockquote>\n<p>退出条件是，进入条件中任意条件状态发生变化。</p>\n</blockquote>\n<h4 id=\"3-在两个处理窗口之间的手机状态\"><a href=\"#3-在两个处理窗口之间的手机状态\" class=\"headerlink\" title=\"3. 在两个处理窗口之间的手机状态\"></a>3. 在两个处理窗口之间的手机状态</h4><ol>\n<li>对所有应用拒绝网络访问。</li>\n<li>所有<code>JobScheduler</code>、<code>Sync-Adapter</code>、<code>AlarmManager</code>的任务都会被延后到窗口中执行。</li>\n<li>系统会拒绝所有来自应用的<code>Wake Lock</code></li>\n<li>停止所有Wifi以及GPS扫描</li>\n<li>减少位置事件从设备检测WiFi热点。</li>\n</ol>\n<h3 id=\"Light-Doze-Mode\"><a href=\"#Light-Doze-Mode\" class=\"headerlink\" title=\"Light Doze Mode\"></a>Light Doze Mode</h3><blockquote>\n<p><code>Android 7</code>或以上会启用该模式。</p>\n</blockquote>\n<h4 id=\"1-特征-1\"><a href=\"#1-特征-1\" class=\"headerlink\" title=\"1. 特征\"></a>1. 特征</h4><ul>\n<li>相比<code>Deep Doze Mode</code>，打包执行任务的频率会更高些。</li>\n</ul>\n<p><img src=\"/img/android-scheduler_light-doze.png\" alt=\"\"></p>\n<h4 id=\"2-进入条件-1\"><a href=\"#2-进入条件-1\" class=\"headerlink\" title=\"2. 进入条件\"></a>2. 进入条件</h4><p>会同时满足以下情况一段时间(大约几分钟)以后生效:</p>\n<ul>\n<li>手机没有在充电</li>\n<li>屏幕被关闭</li>\n<li>处于稳定状态/不稳定状态</li>\n</ul>\n<p>或者在<code>Deep Doze Mode</code>的情况下同时满足以下条件下生效:</p>\n<ul>\n<li>屏幕关闭</li>\n<li>手机没有在充电</li>\n<li>手机不再处于稳定状态</li>\n</ul>\n<h4 id=\"3-退出条件\"><a href=\"#3-退出条件\" class=\"headerlink\" title=\"3. 退出条件\"></a>3. 退出条件</h4><ul>\n<li>屏幕打开</li>\n<li>手机开始充电</li>\n<li>进入<code>Deep Doze Mode</code></li>\n</ul>\n<h4 id=\"4-在两个处理窗口之间的手机状态\"><a href=\"#4-在两个处理窗口之间的手机状态\" class=\"headerlink\" title=\"4. 在两个处理窗口之间的手机状态\"></a>4. 在两个处理窗口之间的手机状态</h4><ul>\n<li>对所有应用拒绝网络访问。</li>\n<li>所有<code>JobScheduler</code>与<code>Sync Adapter</code>的任务都会被延后到窗口中执行。</li>\n<li>不会对<code>AlarmManager</code>中的任务进行影响，但是将无网络访问（如果你的任务需要网络访问，是时候改用<code>JobScheduler</code>或<code>Sync Adapter</code>了，这样才会保证在任务窗口执行会有网络）</li>\n</ul>\n<h3 id=\"中断-避开Doze\"><a href=\"#中断-避开Doze\" class=\"headerlink\" title=\"中断/避开Doze\"></a>中断/避开Doze</h3><blockquote>\n<p>以下所有情况，Google官方都建议不在特殊情景，不要去使用，由于中断了Doze Mode的省电规则。</p>\n</blockquote>\n<h4 id=\"1-AlarmManager\"><a href=\"#1-AlarmManager\" class=\"headerlink\" title=\"1. AlarmManager\"></a>1. AlarmManager</h4><ul>\n<li>在精确的时间间隔中运行的任务: <code>setAndAllowWhileIdle()</code>、<code>setExactAndAllowWhileIdle()</code>。但是在非窗口期间并不解除无网络访问的限制，并且只有10s的时间给予处理。</li>\n<li>指定闹钟事件<code>AlarmManager.setAlarmClock()</code>的事件会在闹钟结束前，令系统短暂的完全退出Doze模式，并且正常处理事件，系统为了突显该闹钟事件，将会在系统的<code>Status Bar</code>上显示物理闹钟的ICON。</li>\n</ul>\n<h4 id=\"2-FCM-GCM\"><a href=\"#2-FCM-GCM\" class=\"headerlink\" title=\"2. FCM/GCM\"></a>2. FCM/GCM</h4><blockquote>\n<p>(Firebase Cloud Messaging，旧版中称为Google Cloud Messaging(GCM))。</p>\n</blockquote>\n<p>FCM/GCM中高优先级的任务配置中(<code>&quot;priority&quot; : &quot;high&quot;</code>) 的消息，在Doze模式下可以正常及时到达。</p>\n<h4 id=\"3-白名单\"><a href=\"#3-白名单\" class=\"headerlink\" title=\"3. 白名单\"></a>3. 白名单</h4><blockquote>\n<p><a href=\"https://developer.android.com/training/monitoring-device-state/doze-standby.html#support_for_other_use_cases\">白名单官方文档</a><br><a href=\"https://developer.android.com/training/monitoring-device-state/doze-standby.html#whitelisting-cases\">官方建议可考虑加入白名单的情况</a></p>\n</blockquote>\n<ul>\n<li>主动请求加入白名单，用户同意以后才加入白名单;</li>\n<li>用户也可以主动将应用从白名单中删除或将应用添加到白名单中;</li>\n<li>应用可以通过<code>isIgnoringBatteryOptimizations()</code>来获知是否在白名单中;</li>\n<li>白名单的应用可以访问网络与持有有效的<code>Wake Lock</code>，但是其他<code>Doze</code>的约束依然存在(如延后的<code>Job Scheduler</code>、<code>Syncs-Adapter</code>、<code>AlarmManager</code>);</li>\n</ul>\n<p>白名单的请求方式:</p>\n<ul>\n<li>通过<a href=\"https://developer.android.com/reference/android/provider/Settings.html#ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGS\">ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGS</a>打开电量优化页面，用户可以通过搜索来关闭应用的电量优化，以此加入白名单。</li>\n<li>先持有<a href=\"https://developer.android.com/reference/android/Manifest.permission.html#REQUEST_IGNORE_BATTERY_OPTIMIZATIONS\">REQUEST_IGNORE_BATTERY_OPTIMIZATIONS</a>权限，然后通过启动Intent<a href=\"https://developer.android.com/reference/android/provider/Settings.html#ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS\">ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS</a>直接弹出Dialog让用户关闭应用的电量优化，以此加入白名单。</li>\n</ul>\n<h4 id=\"4-特殊情况\"><a href=\"#4-特殊情况\" class=\"headerlink\" title=\"4. 特殊情况\"></a>4. 特殊情况</h4><p>前台服务(<code>Foreground Service</code>)将不会受到<code>Doze</code>模式影响。</p>\n<h3 id=\"Doze模式测试\"><a href=\"#Doze模式测试\" class=\"headerlink\" title=\"Doze模式测试\"></a>Doze模式测试</h3><blockquote>\n<p>Google官方提供了一些adb命令用于测试<code>Doze</code>模式，而非需要通过等待来进入<code>Doze</code>模式的。</p>\n</blockquote>\n<h4 id=\"1-进入Doze模式\"><a href=\"#1-进入Doze模式\" class=\"headerlink\" title=\"1. 进入Doze模式\"></a>1. 进入Doze模式</h4><ul>\n<li>准备一台系统是在<code>Android Nougat Developer Preview4</code>或以上版本的设备。</li>\n<li>将其连接连接到电脑。</li>\n<li>通过执行<code>adb shell dumpsys battery unplug</code>命令让设备进入未连接充电的模式。</li>\n<li>通过执行<code>adb shell dumpsys deviceidle step [light|deep]</code>强行进入<code>Doze</code>模式。</li>\n</ul>\n<blockquote>\n<p>退出<code>Doze</code>模式，让手机恢复正常需要复位充电模式:<code>adb shell dumpsys battery reset</code>。</p>\n</blockquote>\n<h4 id=\"2-其他指令\"><a href=\"#2-其他指令\" class=\"headerlink\" title=\"2. 其他指令\"></a>2. 其他指令</h4><ul>\n<li>获取设备状态:<code>adb shell dumpsys deviceidle get [light|deep|force|screen|charging|network]</code>。</li>\n</ul>\n<p>在<code>Android Nougat Developer Preview 4</code>中，<code>Doze</code>模式的状态周期是:</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Light: ACTIVE -&gt; IDLE -&gt; IDLE_MAINTENANCE -&gt; OVERRIDE</div><div class=\"line\">Deep: ACTIVE -&gt; IDLE_PENDING -&gt; SENSING -&gt; LOCATING -&gt; IDLE -&gt; IDLE_MAINTENANCE</div></pre></td></tr></table></figure>\n<hr>\n<p>本文已经发布到JackBlog公众号，可请直接访问: <a href=\"http://mp.weixin.qq.com/s?__biz=MzIyMjQxMzAzOA==&amp;mid=2247483685&amp;idx=1&amp;sn=7f548740be9dd4e5b8849b861cb75ec7\">Android后台调度任务与省电 - JacksBlog</a></p>\n<hr>\n<ul>\n<li><a href=\"https://www.bignerdranch.com/blog/choosing-the-right-background-scheduler-in-android/\">Choosing the Right Background Scheduler in Android</a></li>\n<li><a href=\"https://www.bignerdranch.com/blog/diving-into-doze-mode-for-developers/\">Diving into Doze Mode for Developers</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"Android中尽量不用Storage Permission","date":"2015-11-30T01:00:03.000Z","_content":"\n> 演讲主题: Forget the Storage Permission\n> 演讲者: Lan Lake(Google Android Team Developer, Facebook Developer)\n> PPT: [Forget the Storage Permission: Alternatives for sharing and collaborating](https://speakerdeck.com/ianhanniballake/forget-the-storage-permission-alternatives-for-sharing-and-collaborating#stargazers)\n> 视频: [Forget the Storage Permission: Alternatives for sharing and collaborating (Big Android BBQ 2015)](https://www.youtube.com/watch?v=C28pvd2plBA&feature=iv&src_vid=BKU-wmTAPdc&annotation_id=annotation_3791593857)\n\n<!-- more -->\n\n----\n\n#### 演讲中提到的权限是什么权限?\n\n文件读写权限\n\n#### 为什么在此时提出?\n\n1. 在Android M中更重视权限，Android M是一个运行时权限管理的模型，并且存储权限会被视为危险权限(当应用想要获取该权限时，会弹窗类似提示: 是否允许该应用访问你的所有图片与视频，并且在存储卡做任何的写操作)；\n2. 有效管理文件与文件权限谨慎使用，更有益于健康生态以及用户的数据安全规范；\n\n\n## I. 文件目录\n\n### 1. Android SDK提供的APP目录\n\n> 在应用卸载时，会清除这些目录\n\n#### 应用私有存储目录:\n\n- `Context.getFileDir()`: 真实数据、用户数据\n- `Context.getCacheDir()`: 缓存数据、网络上下载的大图片; 在地存储空间不足的时候，有可能会被清除。\n\n##### 是否需要读写权限申请\n\n< API 19 | API 19-22 | API 23+\n:-: | :-: | :-: |\n不需要 | 不需要 | 不需要\n\n#### 应用拓展存储目录:\n\n> 所有 应用可读\n> 不建议用户存储敏感数据\n> 这里的所有目录的写不需要特别的申请权限\n\n- `Context.getExternalFilesDir()`\n- `Context.getExternalCacheDir()`\n- `Context.getExternalMediaDirs()`: api 21新增，用于存储图片、视频便于媒体相册扫描\n\n> 禁止当前目录以及子目录被相册等扫描，只需要在当前目录新建空文件`.nomedia`即可\n\n##### 是否需要读写权限申请\n\n< API 19 | API 19-22 | API 23+\n:-: | :-: | :-: |\n需要 | 不需要 | 不需要\n\n> 如果需要只指定< API 19 才申请存储权限，可以使用以下方式\n\n```\n<uses-permission\n    android:name=\"android.permission.READ_EXTERNAL_STORAGE\"\n    android:maxSdkVersion=\"18\" />\n<uses-permission\n    android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"\n    android:maxSdkVersion=\"18\" />\n```\n\n### 2. Android SDK提供的公用目录\n\n- `Environment.getExternalStorageDirectory()`\n- `Environment.getExternalStoragePublicDirectory(String)`\n\n##### 是否需要申请读写权限申请\n\n< API 19 | API 19-22 | API 23+\n:-: | :-: | :-: |\n需要 | 需要 | 需要\n\n\n---\n\n## II. 文件应用间共享\n\n> 基于URI基本权限(URI-Based Permissions)\n> Intent底层架构也是依附于URI基本权限来完成的应用间调用\n\n#### 添加URI基本权限\n\n1. startActivity/startService的时候在Intent中添加Flag(接收者对于该URI的权限(如URI是一个图片，那么接收者就有了该图片的对应权限)): `Intent.FLAG_GRANT_READ_URI_PERMISSION`、`Intent.FLAG_GRANT_WRITE_URI_PERMISSION`\n2. 手动调用: `Context.grantUriPermission()`(会使当前包名下所有URI都有了对应权限)、`Context.revokeUriPermission()`(URI撤销权限对应权限)\n\n> 如果是Files URI将会时刻在文件读写权限的保护下，因此即使相互通信了，也还是需要读写权限\n\n\n### 方式\n\n#### 1. 直接写到公共目录\n\n> 不推荐\n\n发送文件的应用需要有写权限，而接受文件的需要有读权限，然后传输一个路径。\n\n#### 2. FileProvider (support.v4)\n\n> 继承自 ContentProvider，但是非常轻量，所有ContentProvider需要做的多余工作都在FileProvider中已经给我们实现好了\n\n- 发送方与接收方都不需要读写权限申请；\n- 接收方可以访问应用文件目录(`getFilesDir()`、`getCacheDir()`、`getExternal*Dir()`)中的所有文件；\n- 双方通信是基于URI基础权限，而非文件路径\n\n#### 方式一: 发送者主动发送\n\n> 该权限支持一直传递下去\n\n>  推荐方式\n\n##### 1. 发送端`FileProvider`中的定义:\n\n```\n// build.gradle\n\ndefaultConfig {\n    def filesAuthorityValue = applicationId + \".files\"\n\n    // Now we can use ${filesAuthority} in our Manifest\n    manifestPlaceholders = [filesAuthority: filesAuthorityValue]\n\n    // Now we can use BuildConfig.FILES_AUTHORITY in our code\n    buildConfigField \"String\", \"FILES_AUTHORITY\", \"\\\"${filesAuthorityValue}\\\"\"\n}\n```\n\n```\n<!-- AndroidManifest.xml -->\n<provider\n    android:name=\"android.support.v4.content.FileProvider\"\n    android:authorities\"${filesAuthority}\"\n    android:exported=\"false\"\n    android:grantUriPermissions=\"true\">\n    <meta-data\n        android:name=\"android.support.FILE_PROVIDER_PATHS\"\n        android:resource=\"@xml/file_paths\" />\n</provider>\n```\n\n```\n<!-- res/xml/file_paths.xml -->\n<!-- 这里定义了以下的路径允许FileProvider访问 -->\n\n<paths>\n    <!-- new File(getFileDir(), \"internal\") -->\n    <files-path name=\"private\" path=\"internal/\" />\n\n    <!-- new File(getCacheDir(), \"images\") -->\n    <cache-path name=\"image_cache\" path=\"images/\" />\n\n    <!-- getExternalFilesDir() -->\n    <external-path name=\"external_files\" path=\"files/\" />\n</paths>\n```\n\n##### 2. 发送端的使用\n\n```\n// Directory must be in file_paths.xml\nFile imagePath = new File(context.getFilesDir(), \"internal\");\nFile newFile = new File(imagePath, \"not_usually_accessible.jpg\")\nUri contentUri = FileProvider.getUriForFile(context,\n    BuildConfig.FILES_AUTHORITY, newFile);\n    // content://${files_authority}/private/not_usually_accessible.jpg\n\nIntent shareIntent = ShareCompat.IntentBuilder.from(activity)\n    .setType(\"image/jpeg\").setStream(contentUri).getIntent();\n// Provide read access\nshareIntent.setData(contentUri);\n// 接收者对于Data只有读的权限\nshareIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\n```\n\n##### 3. 接收端的使用\n\n```\nUri uri = ShareCompat.IntentReader.from(activity).getStream();\nBitmap bitmap = null;\ntry {\n    // Works with content://, file://, or android.resource:// URIs\n    InputStream inputStream = getContentResolver().openInputStream(uri);\n    bitmap = bitmapFactory.decodeStream(inputStream);\n} catch(FileNotfoundException e){\n    // Inform the user that things have gone horribly wrong\n}\n```\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/android_storage_permission.md","raw":"title: Android中尽量不用Storage Permission\ndate: 2015-11-30 09:00:03\npermalink: 2015/11/30/android_storage_permission\ntags:\n- FileProvider\n- URI\n- 演讲\n\n---\n\n> 演讲主题: Forget the Storage Permission\n> 演讲者: Lan Lake(Google Android Team Developer, Facebook Developer)\n> PPT: [Forget the Storage Permission: Alternatives for sharing and collaborating](https://speakerdeck.com/ianhanniballake/forget-the-storage-permission-alternatives-for-sharing-and-collaborating#stargazers)\n> 视频: [Forget the Storage Permission: Alternatives for sharing and collaborating (Big Android BBQ 2015)](https://www.youtube.com/watch?v=C28pvd2plBA&feature=iv&src_vid=BKU-wmTAPdc&annotation_id=annotation_3791593857)\n\n<!-- more -->\n\n----\n\n#### 演讲中提到的权限是什么权限?\n\n文件读写权限\n\n#### 为什么在此时提出?\n\n1. 在Android M中更重视权限，Android M是一个运行时权限管理的模型，并且存储权限会被视为危险权限(当应用想要获取该权限时，会弹窗类似提示: 是否允许该应用访问你的所有图片与视频，并且在存储卡做任何的写操作)；\n2. 有效管理文件与文件权限谨慎使用，更有益于健康生态以及用户的数据安全规范；\n\n\n## I. 文件目录\n\n### 1. Android SDK提供的APP目录\n\n> 在应用卸载时，会清除这些目录\n\n#### 应用私有存储目录:\n\n- `Context.getFileDir()`: 真实数据、用户数据\n- `Context.getCacheDir()`: 缓存数据、网络上下载的大图片; 在地存储空间不足的时候，有可能会被清除。\n\n##### 是否需要读写权限申请\n\n< API 19 | API 19-22 | API 23+\n:-: | :-: | :-: |\n不需要 | 不需要 | 不需要\n\n#### 应用拓展存储目录:\n\n> 所有 应用可读\n> 不建议用户存储敏感数据\n> 这里的所有目录的写不需要特别的申请权限\n\n- `Context.getExternalFilesDir()`\n- `Context.getExternalCacheDir()`\n- `Context.getExternalMediaDirs()`: api 21新增，用于存储图片、视频便于媒体相册扫描\n\n> 禁止当前目录以及子目录被相册等扫描，只需要在当前目录新建空文件`.nomedia`即可\n\n##### 是否需要读写权限申请\n\n< API 19 | API 19-22 | API 23+\n:-: | :-: | :-: |\n需要 | 不需要 | 不需要\n\n> 如果需要只指定< API 19 才申请存储权限，可以使用以下方式\n\n```\n<uses-permission\n    android:name=\"android.permission.READ_EXTERNAL_STORAGE\"\n    android:maxSdkVersion=\"18\" />\n<uses-permission\n    android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"\n    android:maxSdkVersion=\"18\" />\n```\n\n### 2. Android SDK提供的公用目录\n\n- `Environment.getExternalStorageDirectory()`\n- `Environment.getExternalStoragePublicDirectory(String)`\n\n##### 是否需要申请读写权限申请\n\n< API 19 | API 19-22 | API 23+\n:-: | :-: | :-: |\n需要 | 需要 | 需要\n\n\n---\n\n## II. 文件应用间共享\n\n> 基于URI基本权限(URI-Based Permissions)\n> Intent底层架构也是依附于URI基本权限来完成的应用间调用\n\n#### 添加URI基本权限\n\n1. startActivity/startService的时候在Intent中添加Flag(接收者对于该URI的权限(如URI是一个图片，那么接收者就有了该图片的对应权限)): `Intent.FLAG_GRANT_READ_URI_PERMISSION`、`Intent.FLAG_GRANT_WRITE_URI_PERMISSION`\n2. 手动调用: `Context.grantUriPermission()`(会使当前包名下所有URI都有了对应权限)、`Context.revokeUriPermission()`(URI撤销权限对应权限)\n\n> 如果是Files URI将会时刻在文件读写权限的保护下，因此即使相互通信了，也还是需要读写权限\n\n\n### 方式\n\n#### 1. 直接写到公共目录\n\n> 不推荐\n\n发送文件的应用需要有写权限，而接受文件的需要有读权限，然后传输一个路径。\n\n#### 2. FileProvider (support.v4)\n\n> 继承自 ContentProvider，但是非常轻量，所有ContentProvider需要做的多余工作都在FileProvider中已经给我们实现好了\n\n- 发送方与接收方都不需要读写权限申请；\n- 接收方可以访问应用文件目录(`getFilesDir()`、`getCacheDir()`、`getExternal*Dir()`)中的所有文件；\n- 双方通信是基于URI基础权限，而非文件路径\n\n#### 方式一: 发送者主动发送\n\n> 该权限支持一直传递下去\n\n>  推荐方式\n\n##### 1. 发送端`FileProvider`中的定义:\n\n```\n// build.gradle\n\ndefaultConfig {\n    def filesAuthorityValue = applicationId + \".files\"\n\n    // Now we can use ${filesAuthority} in our Manifest\n    manifestPlaceholders = [filesAuthority: filesAuthorityValue]\n\n    // Now we can use BuildConfig.FILES_AUTHORITY in our code\n    buildConfigField \"String\", \"FILES_AUTHORITY\", \"\\\"${filesAuthorityValue}\\\"\"\n}\n```\n\n```\n<!-- AndroidManifest.xml -->\n<provider\n    android:name=\"android.support.v4.content.FileProvider\"\n    android:authorities\"${filesAuthority}\"\n    android:exported=\"false\"\n    android:grantUriPermissions=\"true\">\n    <meta-data\n        android:name=\"android.support.FILE_PROVIDER_PATHS\"\n        android:resource=\"@xml/file_paths\" />\n</provider>\n```\n\n```\n<!-- res/xml/file_paths.xml -->\n<!-- 这里定义了以下的路径允许FileProvider访问 -->\n\n<paths>\n    <!-- new File(getFileDir(), \"internal\") -->\n    <files-path name=\"private\" path=\"internal/\" />\n\n    <!-- new File(getCacheDir(), \"images\") -->\n    <cache-path name=\"image_cache\" path=\"images/\" />\n\n    <!-- getExternalFilesDir() -->\n    <external-path name=\"external_files\" path=\"files/\" />\n</paths>\n```\n\n##### 2. 发送端的使用\n\n```\n// Directory must be in file_paths.xml\nFile imagePath = new File(context.getFilesDir(), \"internal\");\nFile newFile = new File(imagePath, \"not_usually_accessible.jpg\")\nUri contentUri = FileProvider.getUriForFile(context,\n    BuildConfig.FILES_AUTHORITY, newFile);\n    // content://${files_authority}/private/not_usually_accessible.jpg\n\nIntent shareIntent = ShareCompat.IntentBuilder.from(activity)\n    .setType(\"image/jpeg\").setStream(contentUri).getIntent();\n// Provide read access\nshareIntent.setData(contentUri);\n// 接收者对于Data只有读的权限\nshareIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\n```\n\n##### 3. 接收端的使用\n\n```\nUri uri = ShareCompat.IntentReader.from(activity).getStream();\nBitmap bitmap = null;\ntry {\n    // Works with content://, file://, or android.resource:// URIs\n    InputStream inputStream = getContentResolver().openInputStream(uri);\n    bitmap = bitmapFactory.decodeStream(inputStream);\n} catch(FileNotfoundException e){\n    // Inform the user that things have gone horribly wrong\n}\n```\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2015/11/30/android_storage_permission","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66ii002195bub29bc5xi","content":"<blockquote>\n<p>演讲主题: Forget the Storage Permission<br>演讲者: Lan Lake(Google Android Team Developer, Facebook Developer)<br>PPT: <a href=\"https://speakerdeck.com/ianhanniballake/forget-the-storage-permission-alternatives-for-sharing-and-collaborating#stargazers\" target=\"_blank\" rel=\"external\">Forget the Storage Permission: Alternatives for sharing and collaborating</a><br>视频: <a href=\"https://www.youtube.com/watch?v=C28pvd2plBA&amp;feature=iv&amp;src_vid=BKU-wmTAPdc&amp;annotation_id=annotation_3791593857\" target=\"_blank\" rel=\"external\">Forget the Storage Permission: Alternatives for sharing and collaborating (Big Android BBQ 2015)</a></p>\n</blockquote>\n<a id=\"more\"></a>\n<hr>\n<h4 id=\"演讲中提到的权限是什么权限\"><a href=\"#演讲中提到的权限是什么权限\" class=\"headerlink\" title=\"演讲中提到的权限是什么权限?\"></a>演讲中提到的权限是什么权限?</h4><p>文件读写权限</p>\n<h4 id=\"为什么在此时提出\"><a href=\"#为什么在此时提出\" class=\"headerlink\" title=\"为什么在此时提出?\"></a>为什么在此时提出?</h4><ol>\n<li>在Android M中更重视权限，Android M是一个运行时权限管理的模型，并且存储权限会被视为危险权限(当应用想要获取该权限时，会弹窗类似提示: 是否允许该应用访问你的所有图片与视频，并且在存储卡做任何的写操作)；</li>\n<li>有效管理文件与文件权限谨慎使用，更有益于健康生态以及用户的数据安全规范；</li>\n</ol>\n<h2 id=\"I-文件目录\"><a href=\"#I-文件目录\" class=\"headerlink\" title=\"I. 文件目录\"></a>I. 文件目录</h2><h3 id=\"1-Android-SDK提供的APP目录\"><a href=\"#1-Android-SDK提供的APP目录\" class=\"headerlink\" title=\"1. Android SDK提供的APP目录\"></a>1. Android SDK提供的APP目录</h3><blockquote>\n<p>在应用卸载时，会清除这些目录</p>\n</blockquote>\n<h4 id=\"应用私有存储目录\"><a href=\"#应用私有存储目录\" class=\"headerlink\" title=\"应用私有存储目录:\"></a>应用私有存储目录:</h4><ul>\n<li><code>Context.getFileDir()</code>: 真实数据、用户数据</li>\n<li><code>Context.getCacheDir()</code>: 缓存数据、网络上下载的大图片; 在地存储空间不足的时候，有可能会被清除。</li>\n</ul>\n<h5 id=\"是否需要读写权限申请\"><a href=\"#是否需要读写权限申请\" class=\"headerlink\" title=\"是否需要读写权限申请\"></a>是否需要读写权限申请</h5><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">&lt; API 19</th>\n<th style=\"text-align:center\">API 19-22</th>\n<th style=\"text-align:center\">API 23+</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">不需要</td>\n<td style=\"text-align:center\">不需要</td>\n<td style=\"text-align:center\">不需要</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"应用拓展存储目录\"><a href=\"#应用拓展存储目录\" class=\"headerlink\" title=\"应用拓展存储目录:\"></a>应用拓展存储目录:</h4><blockquote>\n<p>所有 应用可读<br>不建议用户存储敏感数据<br>这里的所有目录的写不需要特别的申请权限</p>\n</blockquote>\n<ul>\n<li><code>Context.getExternalFilesDir()</code></li>\n<li><code>Context.getExternalCacheDir()</code></li>\n<li><code>Context.getExternalMediaDirs()</code>: api 21新增，用于存储图片、视频便于媒体相册扫描</li>\n</ul>\n<blockquote>\n<p>禁止当前目录以及子目录被相册等扫描，只需要在当前目录新建空文件<code>.nomedia</code>即可</p>\n</blockquote>\n<h5 id=\"是否需要读写权限申请-1\"><a href=\"#是否需要读写权限申请-1\" class=\"headerlink\" title=\"是否需要读写权限申请\"></a>是否需要读写权限申请</h5><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">&lt; API 19</th>\n<th style=\"text-align:center\">API 19-22</th>\n<th style=\"text-align:center\">API 23+</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">需要</td>\n<td style=\"text-align:center\">不需要</td>\n<td style=\"text-align:center\">不需要</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>如果需要只指定&lt; API 19 才申请存储权限，可以使用以下方式</p>\n</blockquote>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;uses-permission</div><div class=\"line\">    android:<span class=\"built_in\">name</span>=<span class=\"string\">\"android.permission.READ_EXTERNAL_STORAGE\"</span></div><div class=\"line\">    android:maxSdkVersion=<span class=\"string\">\"18\"</span> /&gt;</div><div class=\"line\">&lt;uses-permission</div><div class=\"line\">    android:<span class=\"built_in\">name</span>=<span class=\"string\">\"android.permission.WRITE_EXTERNAL_STORAGE\"</span></div><div class=\"line\">    android:maxSdkVersion=<span class=\"string\">\"18\"</span> /&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"2-Android-SDK提供的公用目录\"><a href=\"#2-Android-SDK提供的公用目录\" class=\"headerlink\" title=\"2. Android SDK提供的公用目录\"></a>2. Android SDK提供的公用目录</h3><ul>\n<li><code>Environment.getExternalStorageDirectory()</code></li>\n<li><code>Environment.getExternalStoragePublicDirectory(String)</code></li>\n</ul>\n<h5 id=\"是否需要申请读写权限申请\"><a href=\"#是否需要申请读写权限申请\" class=\"headerlink\" title=\"是否需要申请读写权限申请\"></a>是否需要申请读写权限申请</h5><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">&lt; API 19</th>\n<th style=\"text-align:center\">API 19-22</th>\n<th style=\"text-align:center\">API 23+</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">需要</td>\n<td style=\"text-align:center\">需要</td>\n<td style=\"text-align:center\">需要</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"II-文件应用间共享\"><a href=\"#II-文件应用间共享\" class=\"headerlink\" title=\"II. 文件应用间共享\"></a>II. 文件应用间共享</h2><blockquote>\n<p>基于URI基本权限(URI-Based Permissions)<br>Intent底层架构也是依附于URI基本权限来完成的应用间调用</p>\n</blockquote>\n<h4 id=\"添加URI基本权限\"><a href=\"#添加URI基本权限\" class=\"headerlink\" title=\"添加URI基本权限\"></a>添加URI基本权限</h4><ol>\n<li>startActivity/startService的时候在Intent中添加Flag(接收者对于该URI的权限(如URI是一个图片，那么接收者就有了该图片的对应权限)): <code>Intent.FLAG_GRANT_READ_URI_PERMISSION</code>、<code>Intent.FLAG_GRANT_WRITE_URI_PERMISSION</code></li>\n<li>手动调用: <code>Context.grantUriPermission()</code>(会使当前包名下所有URI都有了对应权限)、<code>Context.revokeUriPermission()</code>(URI撤销权限对应权限)</li>\n</ol>\n<blockquote>\n<p>如果是Files URI将会时刻在文件读写权限的保护下，因此即使相互通信了，也还是需要读写权限</p>\n</blockquote>\n<h3 id=\"方式\"><a href=\"#方式\" class=\"headerlink\" title=\"方式\"></a>方式</h3><h4 id=\"1-直接写到公共目录\"><a href=\"#1-直接写到公共目录\" class=\"headerlink\" title=\"1. 直接写到公共目录\"></a>1. 直接写到公共目录</h4><blockquote>\n<p>不推荐</p>\n</blockquote>\n<p>发送文件的应用需要有写权限，而接受文件的需要有读权限，然后传输一个路径。</p>\n<h4 id=\"2-FileProvider-support-v4\"><a href=\"#2-FileProvider-support-v4\" class=\"headerlink\" title=\"2. FileProvider (support.v4)\"></a>2. FileProvider (support.v4)</h4><blockquote>\n<p>继承自 ContentProvider，但是非常轻量，所有ContentProvider需要做的多余工作都在FileProvider中已经给我们实现好了</p>\n</blockquote>\n<ul>\n<li>发送方与接收方都不需要读写权限申请；</li>\n<li>接收方可以访问应用文件目录(<code>getFilesDir()</code>、<code>getCacheDir()</code>、<code>getExternal*Dir()</code>)中的所有文件；</li>\n<li>双方通信是基于URI基础权限，而非文件路径</li>\n</ul>\n<h4 id=\"方式一-发送者主动发送\"><a href=\"#方式一-发送者主动发送\" class=\"headerlink\" title=\"方式一: 发送者主动发送\"></a>方式一: 发送者主动发送</h4><blockquote>\n<p>该权限支持一直传递下去</p>\n<p> 推荐方式</p>\n</blockquote>\n<h5 id=\"1-发送端FileProvider中的定义\"><a href=\"#1-发送端FileProvider中的定义\" class=\"headerlink\" title=\"1. 发送端FileProvider中的定义:\"></a>1. 发送端<code>FileProvider</code>中的定义:</h5><figure class=\"highlight flix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// build.gradle</span></div><div class=\"line\"></div><div class=\"line\">defaultConfig &#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">filesAuthorityValue</span> </span>= applicationId + <span class=\"string\">\".files\"</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Now we can use $&#123;filesAuthority&#125; in our Manifest</span></div><div class=\"line\">    manifestPlaceholders = [filesAuthority: filesAuthorityValue]</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Now we can use BuildConfig.FILES_AUTHORITY in our code</span></div><div class=\"line\">    buildConfigField <span class=\"string\">\"String\"</span>, <span class=\"string\">\"FILES_AUTHORITY\"</span>, <span class=\"string\">\"\\\"</span>$&#123;filesAuthorityValue&#125;\\<span class=\"string\">\"\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- AndroidManifest.xml --&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">provider</span></span></div><div class=\"line\">    <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.support.v4.content.FileProvider\"</span></div><div class=\"line\">    <span class=\"attr\">android:authorities</span>\"$<span class=\"template-variable\">&#123;filesAuthority&#125;</span><span class=\"xml\"><span class=\"tag\">\"</span></span></div><div class=\"line\">    <span class=\"attr\">android:exported</span>=<span class=\"string\">\"false\"</span></div><div class=\"line\">    <span class=\"attr\">android:grantUriPermissions</span>=<span class=\"string\">\"true\"</span>&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta-data</span></span></div><div class=\"line\">        <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.support.FILE_PROVIDER_PATHS\"</span></div><div class=\"line\">        <span class=\"attr\">android:resource</span>=<span class=\"string\">\"@xml/file_paths\"</span> /&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">provider</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- res/xml/file_paths.xml --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 这里定义了以下的路径允许FileProvider访问 --&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">paths</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- new File(getFileDir(), \"internal\") --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">files-path</span> <span class=\"attr\">name</span>=<span class=\"string\">\"private\"</span> <span class=\"attr\">path</span>=<span class=\"string\">\"internal/\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- new File(getCacheDir(), \"images\") --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">cache-path</span> <span class=\"attr\">name</span>=<span class=\"string\">\"image_cache\"</span> <span class=\"attr\">path</span>=<span class=\"string\">\"images/\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- getExternalFilesDir() --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">external-path</span> <span class=\"attr\">name</span>=<span class=\"string\">\"external_files\"</span> <span class=\"attr\">path</span>=<span class=\"string\">\"files/\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">paths</span>&gt;</span></div></pre></td></tr></table></figure>\n<h5 id=\"2-发送端的使用\"><a href=\"#2-发送端的使用\" class=\"headerlink\" title=\"2. 发送端的使用\"></a>2. 发送端的使用</h5><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Directory must be in file_paths.xml</span></div><div class=\"line\">File imagePath = <span class=\"keyword\">new</span> <span class=\"type\">File</span>(context.getFilesDir(), <span class=\"string\">\"internal\"</span>);</div><div class=\"line\">File <span class=\"keyword\">new</span><span class=\"type\">File</span> = <span class=\"keyword\">new</span> <span class=\"type\">File</span>(imagePath, <span class=\"string\">\"not_usually_accessible.jpg\"</span>)</div><div class=\"line\">Uri contentUri = FileProvider.getUriForFile(context,</div><div class=\"line\">    BuildConfig.FILES_AUTHORITY, <span class=\"keyword\">new</span><span class=\"type\">File</span>);</div><div class=\"line\">    <span class=\"comment\">// content://$&#123;files_authority&#125;/private/not_usually_accessible.jpg</span></div><div class=\"line\"></div><div class=\"line\">Intent shareIntent = ShareCompat.IntentBuilder.from(activity)</div><div class=\"line\">    .setType(<span class=\"string\">\"image/jpeg\"</span>).setStream(contentUri).getIntent();</div><div class=\"line\"><span class=\"comment\">// Provide read access</span></div><div class=\"line\">shareIntent.setData(contentUri);</div><div class=\"line\"><span class=\"comment\">// 接收者对于Data只有读的权限</span></div><div class=\"line\">shareIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);</div></pre></td></tr></table></figure>\n<h5 id=\"3-接收端的使用\"><a href=\"#3-接收端的使用\" class=\"headerlink\" title=\"3. 接收端的使用\"></a>3. 接收端的使用</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Uri uri = ShareCompat.IntentReader.<span class=\"keyword\">from</span>(activity).getStream();</div><div class=\"line\">Bitmap bitmap = <span class=\"literal\">null</span>;</div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// Works with content://, file://, or android.resource:// URIs</span></div><div class=\"line\">    InputStream inputStream = getContentResolver().openInputStream(uri);</div><div class=\"line\">    bitmap = bitmapFactory.decodeStream(inputStream);</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span>(FileNotfoundException e)&#123;</div><div class=\"line\">    <span class=\"comment\">// Inform the user that things have gone horribly wrong</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>演讲主题: Forget the Storage Permission<br>演讲者: Lan Lake(Google Android Team Developer, Facebook Developer)<br>PPT: <a href=\"https://speakerdeck.com/ianhanniballake/forget-the-storage-permission-alternatives-for-sharing-and-collaborating#stargazers\">Forget the Storage Permission: Alternatives for sharing and collaborating</a><br>视频: <a href=\"https://www.youtube.com/watch?v=C28pvd2plBA&amp;feature=iv&amp;src_vid=BKU-wmTAPdc&amp;annotation_id=annotation_3791593857\">Forget the Storage Permission: Alternatives for sharing and collaborating (Big Android BBQ 2015)</a></p>\n</blockquote>","more":"<hr>\n<h4 id=\"演讲中提到的权限是什么权限\"><a href=\"#演讲中提到的权限是什么权限\" class=\"headerlink\" title=\"演讲中提到的权限是什么权限?\"></a>演讲中提到的权限是什么权限?</h4><p>文件读写权限</p>\n<h4 id=\"为什么在此时提出\"><a href=\"#为什么在此时提出\" class=\"headerlink\" title=\"为什么在此时提出?\"></a>为什么在此时提出?</h4><ol>\n<li>在Android M中更重视权限，Android M是一个运行时权限管理的模型，并且存储权限会被视为危险权限(当应用想要获取该权限时，会弹窗类似提示: 是否允许该应用访问你的所有图片与视频，并且在存储卡做任何的写操作)；</li>\n<li>有效管理文件与文件权限谨慎使用，更有益于健康生态以及用户的数据安全规范；</li>\n</ol>\n<h2 id=\"I-文件目录\"><a href=\"#I-文件目录\" class=\"headerlink\" title=\"I. 文件目录\"></a>I. 文件目录</h2><h3 id=\"1-Android-SDK提供的APP目录\"><a href=\"#1-Android-SDK提供的APP目录\" class=\"headerlink\" title=\"1. Android SDK提供的APP目录\"></a>1. Android SDK提供的APP目录</h3><blockquote>\n<p>在应用卸载时，会清除这些目录</p>\n</blockquote>\n<h4 id=\"应用私有存储目录\"><a href=\"#应用私有存储目录\" class=\"headerlink\" title=\"应用私有存储目录:\"></a>应用私有存储目录:</h4><ul>\n<li><code>Context.getFileDir()</code>: 真实数据、用户数据</li>\n<li><code>Context.getCacheDir()</code>: 缓存数据、网络上下载的大图片; 在地存储空间不足的时候，有可能会被清除。</li>\n</ul>\n<h5 id=\"是否需要读写权限申请\"><a href=\"#是否需要读写权限申请\" class=\"headerlink\" title=\"是否需要读写权限申请\"></a>是否需要读写权限申请</h5><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">&lt; API 19</th>\n<th style=\"text-align:center\">API 19-22</th>\n<th style=\"text-align:center\">API 23+</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">不需要</td>\n<td style=\"text-align:center\">不需要</td>\n<td style=\"text-align:center\">不需要</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"应用拓展存储目录\"><a href=\"#应用拓展存储目录\" class=\"headerlink\" title=\"应用拓展存储目录:\"></a>应用拓展存储目录:</h4><blockquote>\n<p>所有 应用可读<br>不建议用户存储敏感数据<br>这里的所有目录的写不需要特别的申请权限</p>\n</blockquote>\n<ul>\n<li><code>Context.getExternalFilesDir()</code></li>\n<li><code>Context.getExternalCacheDir()</code></li>\n<li><code>Context.getExternalMediaDirs()</code>: api 21新增，用于存储图片、视频便于媒体相册扫描</li>\n</ul>\n<blockquote>\n<p>禁止当前目录以及子目录被相册等扫描，只需要在当前目录新建空文件<code>.nomedia</code>即可</p>\n</blockquote>\n<h5 id=\"是否需要读写权限申请-1\"><a href=\"#是否需要读写权限申请-1\" class=\"headerlink\" title=\"是否需要读写权限申请\"></a>是否需要读写权限申请</h5><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">&lt; API 19</th>\n<th style=\"text-align:center\">API 19-22</th>\n<th style=\"text-align:center\">API 23+</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">需要</td>\n<td style=\"text-align:center\">不需要</td>\n<td style=\"text-align:center\">不需要</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>如果需要只指定&lt; API 19 才申请存储权限，可以使用以下方式</p>\n</blockquote>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;uses-permission</div><div class=\"line\">    android:<span class=\"built_in\">name</span>=<span class=\"string\">\"android.permission.READ_EXTERNAL_STORAGE\"</span></div><div class=\"line\">    android:maxSdkVersion=<span class=\"string\">\"18\"</span> /&gt;</div><div class=\"line\">&lt;uses-permission</div><div class=\"line\">    android:<span class=\"built_in\">name</span>=<span class=\"string\">\"android.permission.WRITE_EXTERNAL_STORAGE\"</span></div><div class=\"line\">    android:maxSdkVersion=<span class=\"string\">\"18\"</span> /&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"2-Android-SDK提供的公用目录\"><a href=\"#2-Android-SDK提供的公用目录\" class=\"headerlink\" title=\"2. Android SDK提供的公用目录\"></a>2. Android SDK提供的公用目录</h3><ul>\n<li><code>Environment.getExternalStorageDirectory()</code></li>\n<li><code>Environment.getExternalStoragePublicDirectory(String)</code></li>\n</ul>\n<h5 id=\"是否需要申请读写权限申请\"><a href=\"#是否需要申请读写权限申请\" class=\"headerlink\" title=\"是否需要申请读写权限申请\"></a>是否需要申请读写权限申请</h5><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">&lt; API 19</th>\n<th style=\"text-align:center\">API 19-22</th>\n<th style=\"text-align:center\">API 23+</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">需要</td>\n<td style=\"text-align:center\">需要</td>\n<td style=\"text-align:center\">需要</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"II-文件应用间共享\"><a href=\"#II-文件应用间共享\" class=\"headerlink\" title=\"II. 文件应用间共享\"></a>II. 文件应用间共享</h2><blockquote>\n<p>基于URI基本权限(URI-Based Permissions)<br>Intent底层架构也是依附于URI基本权限来完成的应用间调用</p>\n</blockquote>\n<h4 id=\"添加URI基本权限\"><a href=\"#添加URI基本权限\" class=\"headerlink\" title=\"添加URI基本权限\"></a>添加URI基本权限</h4><ol>\n<li>startActivity/startService的时候在Intent中添加Flag(接收者对于该URI的权限(如URI是一个图片，那么接收者就有了该图片的对应权限)): <code>Intent.FLAG_GRANT_READ_URI_PERMISSION</code>、<code>Intent.FLAG_GRANT_WRITE_URI_PERMISSION</code></li>\n<li>手动调用: <code>Context.grantUriPermission()</code>(会使当前包名下所有URI都有了对应权限)、<code>Context.revokeUriPermission()</code>(URI撤销权限对应权限)</li>\n</ol>\n<blockquote>\n<p>如果是Files URI将会时刻在文件读写权限的保护下，因此即使相互通信了，也还是需要读写权限</p>\n</blockquote>\n<h3 id=\"方式\"><a href=\"#方式\" class=\"headerlink\" title=\"方式\"></a>方式</h3><h4 id=\"1-直接写到公共目录\"><a href=\"#1-直接写到公共目录\" class=\"headerlink\" title=\"1. 直接写到公共目录\"></a>1. 直接写到公共目录</h4><blockquote>\n<p>不推荐</p>\n</blockquote>\n<p>发送文件的应用需要有写权限，而接受文件的需要有读权限，然后传输一个路径。</p>\n<h4 id=\"2-FileProvider-support-v4\"><a href=\"#2-FileProvider-support-v4\" class=\"headerlink\" title=\"2. FileProvider (support.v4)\"></a>2. FileProvider (support.v4)</h4><blockquote>\n<p>继承自 ContentProvider，但是非常轻量，所有ContentProvider需要做的多余工作都在FileProvider中已经给我们实现好了</p>\n</blockquote>\n<ul>\n<li>发送方与接收方都不需要读写权限申请；</li>\n<li>接收方可以访问应用文件目录(<code>getFilesDir()</code>、<code>getCacheDir()</code>、<code>getExternal*Dir()</code>)中的所有文件；</li>\n<li>双方通信是基于URI基础权限，而非文件路径</li>\n</ul>\n<h4 id=\"方式一-发送者主动发送\"><a href=\"#方式一-发送者主动发送\" class=\"headerlink\" title=\"方式一: 发送者主动发送\"></a>方式一: 发送者主动发送</h4><blockquote>\n<p>该权限支持一直传递下去</p>\n<p> 推荐方式</p>\n</blockquote>\n<h5 id=\"1-发送端FileProvider中的定义\"><a href=\"#1-发送端FileProvider中的定义\" class=\"headerlink\" title=\"1. 发送端FileProvider中的定义:\"></a>1. 发送端<code>FileProvider</code>中的定义:</h5><figure class=\"highlight flix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// build.gradle</span></div><div class=\"line\"></div><div class=\"line\">defaultConfig &#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">filesAuthorityValue</span> </span>= applicationId + <span class=\"string\">\".files\"</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Now we can use $&#123;filesAuthority&#125; in our Manifest</span></div><div class=\"line\">    manifestPlaceholders = [filesAuthority: filesAuthorityValue]</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Now we can use BuildConfig.FILES_AUTHORITY in our code</span></div><div class=\"line\">    buildConfigField <span class=\"string\">\"String\"</span>, <span class=\"string\">\"FILES_AUTHORITY\"</span>, <span class=\"string\">\"\\\"</span>$&#123;filesAuthorityValue&#125;\\<span class=\"string\">\"\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- AndroidManifest.xml --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">provider</span></div><div class=\"line\">    <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.support.v4.content.FileProvider\"</span></div><div class=\"line\">    <span class=\"attr\">android:authorities</span>\"$</span></span><span class=\"template-variable\">&#123;filesAuthority&#125;</span><span class=\"xml\"><span class=\"tag\">\"</div><div class=\"line\">    <span class=\"attr\">android:exported</span>=<span class=\"string\">\"false\"</span></div><div class=\"line\">    <span class=\"attr\">android:grantUriPermissions</span>=<span class=\"string\">\"true\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta-data</span></div><div class=\"line\">        <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.support.FILE_PROVIDER_PATHS\"</span></div><div class=\"line\">        <span class=\"attr\">android:resource</span>=<span class=\"string\">\"@xml/file_paths\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">provider</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- res/xml/file_paths.xml --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 这里定义了以下的路径允许FileProvider访问 --&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">paths</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- new File(getFileDir(), \"internal\") --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">files-path</span> <span class=\"attr\">name</span>=<span class=\"string\">\"private\"</span> <span class=\"attr\">path</span>=<span class=\"string\">\"internal/\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- new File(getCacheDir(), \"images\") --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">cache-path</span> <span class=\"attr\">name</span>=<span class=\"string\">\"image_cache\"</span> <span class=\"attr\">path</span>=<span class=\"string\">\"images/\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- getExternalFilesDir() --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">external-path</span> <span class=\"attr\">name</span>=<span class=\"string\">\"external_files\"</span> <span class=\"attr\">path</span>=<span class=\"string\">\"files/\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">paths</span>&gt;</span></div></pre></td></tr></table></figure>\n<h5 id=\"2-发送端的使用\"><a href=\"#2-发送端的使用\" class=\"headerlink\" title=\"2. 发送端的使用\"></a>2. 发送端的使用</h5><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Directory must be in file_paths.xml</span></div><div class=\"line\">File imagePath = <span class=\"keyword\">new</span> <span class=\"type\">File</span>(context.getFilesDir(), <span class=\"string\">\"internal\"</span>);</div><div class=\"line\">File <span class=\"keyword\">new</span><span class=\"type\">File</span> = <span class=\"keyword\">new</span> <span class=\"type\">File</span>(imagePath, <span class=\"string\">\"not_usually_accessible.jpg\"</span>)</div><div class=\"line\">Uri contentUri = FileProvider.getUriForFile(context,</div><div class=\"line\">    BuildConfig.FILES_AUTHORITY, <span class=\"keyword\">new</span><span class=\"type\">File</span>);</div><div class=\"line\">    <span class=\"comment\">// content://$&#123;files_authority&#125;/private/not_usually_accessible.jpg</span></div><div class=\"line\"></div><div class=\"line\">Intent shareIntent = ShareCompat.IntentBuilder.from(activity)</div><div class=\"line\">    .setType(<span class=\"string\">\"image/jpeg\"</span>).setStream(contentUri).getIntent();</div><div class=\"line\"><span class=\"comment\">// Provide read access</span></div><div class=\"line\">shareIntent.setData(contentUri);</div><div class=\"line\"><span class=\"comment\">// 接收者对于Data只有读的权限</span></div><div class=\"line\">shareIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);</div></pre></td></tr></table></figure>\n<h5 id=\"3-接收端的使用\"><a href=\"#3-接收端的使用\" class=\"headerlink\" title=\"3. 接收端的使用\"></a>3. 接收端的使用</h5><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Uri uri = ShareCompat.IntentReader.<span class=\"keyword\">from</span>(activity).getStream();</div><div class=\"line\">Bitmap bitmap = <span class=\"literal\">null</span>;</div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// Works with content://, file://, or android.resource:// URIs</span></div><div class=\"line\">    InputStream inputStream = getContentResolver().openInputStream(uri);</div><div class=\"line\">    bitmap = bitmapFactory.decodeStream(inputStream);</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span>(FileNotfoundException e)&#123;</div><div class=\"line\">    <span class=\"comment\">// Inform the user that things have gone horribly wrong</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"Android单元测试与模拟测试","date":"2016-11-29T16:40:03.000Z","_content":"\n> 测试驱动式编程(Test-Driven-Development)在RoR中已经是非常普遍的开发模式，是一种十分可靠、优秀的编程思想，可是在Android领域中这块还没有普及，今天主要聊聊Android中的单元测试与模拟测试及其常用的一些库。\n\n<!-- more -->\n\n## I. 测试与基本规范\n\n#### 1. 为什么需要测试?\n\n- 为了稳定性，能够明确的了解是否正确的完成开发。\n- 更加易于维护，能够在修改代码后保证功能不被破坏。\n- 集成一些工具，规范开发规范，使得代码更加稳定( 如通过 phabricator differential 发diff时提交需要执行的单元测试，在开发流程上就可以保证远端代码的稳定性)。\n\n#### 2. 测什么?\n\n- 一般单元测试:\n  - 列出想要测试覆盖的异常情况，进行验证。\n  - 性能测试。\n- 模拟测试: 根据需求，测试用户真正在使用过程中，界面的反馈与显示以及一些依赖系统架构的组件的应用测试。\n\n#### 3. 需要注意\n\n- 考虑可读性，对于方法名使用表达能力强的方法名，对于测试范式可以考虑使用一种规范, 如 RSpec-style。方法名可以采用一种格式，如: `[测试的方法]_[测试的条件]_[符合预期的结果]`。\n- 不要使用逻辑流关键字(If/else、for、do/while、switch/case)，在一个测试方法中，如果需要有这些，拆分到单独的每个测试方法里。\n- 测试真正需要测试的内容，需要覆盖的情况，一般情况只考虑验证输出（如某操作后，显示什么，值是什么）。\n- 考虑耗时，Android Studio默认会输出耗时。\n- 不需要考虑测试`private`的方法，将`private`方法当做黑盒内部组件，测试对其引用的`public`方法即可；不考虑测试琐碎的代码，如`getter`或者`setter`。\n- 每个单元测试方法，应没有先后顺序；尽可能的解耦对于不同的测试方法，不应该存在Test A与Test B存在时序性的情况。\n\n#### 4. 创建测试\n\n- 选择对应的类\n- 将光标停留在类名上\n- 按下`ALT + ENTER`\n- 在弹出的弹窗中选择`Create Test`\n\n## II. Android Studio中的单元测试与模拟测试\n\n> control + shift + R (Android Studio 默认执行单元测试快捷键)。\n\n### 1. 本地单元测试\n\n> 直接在开发机上面进行运行测试。\n> 在没有依赖或者仅仅只需要简单的Android库依赖的情况下，有限考虑使用该类单元测试。\n\n`./gradlew test`\n\n通过添加以下脚本到对应module的`build.gradle`中，以便于在终端中也可以直接查看单元测试的各类测试信息:\n\n```groovy\nandroid {\n  ...\n  testOptions.unitTests.all {\n    testLogging {\n      events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'\n      outputs.upToDateWhen { false }\n      showStandardStreams = true\n    }\n  }\n}\n```\n\n#### 代码存储\n\n> 如果是对应不同的flavor或者是build type，直接在test后面加上对应后缀(如对应名为`myFlavor`的单元测试代码，应该放在`src/testMyFlavor/java`下面)。\n\n`src/test/java`\n\n#### Google官方推荐引用\n\n```groovy\ndependencies {\n    // Required -- JUnit 4 framework，用于单元测试，google官方推荐\n    testCompile 'junit:junit:4.12'\n    // Optional -- Mockito framework，用于模拟架构，google官方推荐\n    testCompile 'org.mockito:mockito-core:1.10.19'\n}\n```\n\n#### JUnit\n\n##### Annotation\n\n| Annotation | 描述\n| --- | ---\n| `@Test public void method()` | 定义所在方法为`单元测试方法`\n| `@Test (expected = Exception.class)` | 如果所在方法没有抛出`Annotation`中的`Exception.class`->失败\n| `@Test(timeout=100)` | 如果方法耗时超过`100`毫秒->失败\n| `@Test(expected=Exception.class)` | 如果方法抛了Exception.class类型的异常->通过\n| `@Before public void method()` | 这个方法在每个测试之前执行，用于准备测试环境(如: 初始化类，读输入流等)\n| `@After public void method()` | 这个方法在每个测试之后执行，用于清理测试环境数据\n| `BeforeClass public static void method()` | 这个方法在所有测试开始之前执行一次，用于做一些耗时的初始化工作(如: 连接数据库)\n| `AfterClass public static void method()` | 这个方法在所有测试结束之后执行一次，用于清理数据(如: 断开数据连接)\n| `@Ignore`或者`@Ignore(\"Why disabled\")` | 忽略当前测试方法，一般用于测试方法还没有准备好，或者太耗时之类的\n| `@FixMethodOrder(MethodSorters.NAME_ASCENDING) public class TestClass{}`  | 使得该测试方法中的所有测试都按照方法中的字母顺序测试\n| `Assume.assumeFalse(boolean condition)` | 如果满足`condition`，就不执行对应方法\n\n### 2. 模拟测试\n\n> 需要运行在Android设备或者虚拟机上的测试。\n\n> 主要用于测试: 单元(Android SDK层引用关系的相关的单元测试)、UI、应用组件集成测试(Service、Content Provider等)。\n\n`./gradlew connectedAndroidTest`\n\n#### 代码存储:\n\n`src/androidTest/java`\n\n#### Google官方推荐引用\n\n```groovy\ndependencies {\n    androidTestCompile 'com.android.support:support-annotations:23.0.1'\n    androidTestCompile 'com.android.support.test:runner:0.4.1'\n    androidTestCompile 'com.android.support.test:rules:0.4.1'\n    // Optional -- Hamcrest library\n    androidTestCompile 'org.hamcrest:hamcrest-library:1.3'\n    // Optional -- UI testing with Espresso\n    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.1'\n    // Optional -- UI testing with UI Automator\n    androidTestCompile 'com.android.support.test.uiautomator:uiautomator-v18:2.1.1'\n}\n```\n\n#### 常见的UI测试\n\n> 需要模拟Android系统环境。\n\n##### 主要三点:\n\n1. UI加载好后展示的信息是否正确。\n2. 在用户某个操作后UI信息是否展示正确。\n3. 展示正确的页面供用户操作。\n\n#### Espresso\n\n> 谷歌官方提供用于UI交互测试\n\n```java\nimport static android.support.test.espresso.Espresso.onView;\nimport static android.support.test.espresso.action.ViewActions.click;\nimport static android.support.test.espresso.assertion.ViewAssertions.matches;\nimport static android.support.test.espresso.matcher.ViewMatchers.isDisplayed;\nimport static android.support.test.espresso.matcher.ViewMatchers.withId;\n\n// 对于Id为R.id.my_view的View: 触发点击，检测是否显示\nonView(withId(R.id.my_view)).perform(click())               \n                            .check(matches(isDisplayed()));\n// 对于文本打头是\"ABC\"的View: 检测是否没有Enable\nonView(withText(startsWith(\"ABC\"))).check(matches(not(isEnabled()));\n// 按返回键\npressBack();\n// 对于Id为R.id.button的View: 检测内容是否是\"Start new activity\"\nonView(withId(R.id.button)).check(matches(withText((\"Start new activity\"))));\n// 对于Id为R.id.viewId的View: 检测内容是否不包含\"YYZZ\"\nonView(withId(R.id.viewId)).check(matches(withText(not(containsString(\"YYZZ\")))));\n// 对于Id为R.id.inputField的View: 输入\"NewText\"，然后关闭软键盘\nonView(withId(R.id.inputField)).perform(typeText(\"NewText\"), closeSoftKeyboard());\n// 对于Id为R.id.inputField的View: 清除内容\nonView(withId(R.id.inputField)).perform(clearText());\n```\n\n##### 启动一个打开`Activity`的`Intent`\n\n```java\n@RunWith(AndroidJUnit4.class)\npublic class SecondActivityTest {\n    @Rule\n    public ActivityTestRule<SecondActivity> rule =\n            new ActivityTestRule(SecondActivity.class, true,\n                                  // 这个参数为false，不让SecondActivity自动启动\n                                  // 如果为true，将会在所有@Before之前启动，在最后一个@After之后关闭\n                                  false);\n    @Test\n    public void demonstrateIntentPrep() {\n        Intent intent = new Intent();\n        intent.putExtra(\"EXTRA\", \"Test\");\n        // 启动SecondActivity并传入intent\n        rule.launchActivity(intent);\n        // 对于Id为R.id.display的View: 检测内容是否是\"Text\"\n        onView(withId(R.id.display)).check(matches(withText(\"Test\")));\n    }\n}\n```\n\n##### 异步交互\n\n建议关闭设备中\"设置->开发者选项中\"的动画，因为这些动画可能会是的Espresso在检测异步任务的时候产生混淆: 窗口动画缩放(Window animation scale)、过渡动画缩放(Transition animation scale)、动画程序时长缩放(Animator duration scale)。\n\n> 针对`AsyncTask`，在测试的时候，如触发点击事件以后抛了一个`AsyncTask`任务，在测试的时候直接`onView(withId(R.id.update)).perform(click())`，然后直接进行检测，此时的检测就是在`AsyncTask#onPostExecute`之后。\n\n```java\n// 通过实现IdlingResource，block住当非空闲的时候，当空闲时进行检测，非空闲的这段时间处理异步事情\npublic class IntentServiceIdlingResource implements IdlingResource {\n    ResourceCallback resourceCallback;\n    private Context context;\n\n    public IntentServiceIdlingResource(Context context) { this.context = context; }\n\n    @Override public String getName() { return IntentServiceIdlingResource.class.getName(); }\n\n    @Override public void registerIdleTransitionCallback( ResourceCallback resourceCallback) { this.resourceCallback = resourceCallback; }\n\n    @Override public boolean isIdleNow() {\n      // 是否是空闲\n      // 如果IntentService 没有在运行，就说明异步任务结束，IntentService特质就是启动以后处理完Intent中的事务，理解关闭自己\n        boolean idle = !isIntentServiceRunning();\n        if (idle && resourceCallback != null) {\n          // 回调告知异步任务结束\n            resourceCallback.onTransitionToIdle();\n        }\n        return idle;\n    }\n\n    private boolean isIntentServiceRunning() {\n        ActivityManager manager = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);\n        // Get all running services\n        List<ActivityManager.RunningServiceInfo> runningServices = manager.getRunningServices(Integer.MAX_VALUE);\n        // check if our is running\n        for (ActivityManager.RunningServiceInfo info : runningServices) {\n            if (MyIntentService.class.getName().equals(info.service.getClassName())) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n// 使用IntentServiceIdlingResource来测试，MyIntentService服务启动结束这个异步事务，之后的结果。\n@RunWith(AndroidJUnit4.class)\npublic class IntegrationTest {\n\n    @Rule\n    public ActivityTestRule rule = new ActivityTestRule(MainActivity.class);\n    IntentServiceIdlingResource idlingResource;\n\n    @Before\n    public void before() {\n        Instrumentation instrumentation = InstrumentationRegistry.getInstrumentation();\n        Context ctx = instrumentation.getTargetContext();\n        idlingResource = new IntentServiceIdlingResource(ctx);\n        // 注册这个异步监听\n        Espresso.registerIdlingResources(idlingResource);\n\n    }\n    @After\n    public void after() {\n        // 取消注册这个异步监听\n        Espresso.unregisterIdlingResources(idlingResource);\n\n    }\n\n    @Test\n    public void runSequence() {\n        // MainActivity中点击R.id.action_settings这个View的时候，会启动MyIntentService\n        onView(withId(R.id.action_settings)).perform(click());\n        // 这时候IntentServiceIdlingResource#isIdleNow会返回false，因为MyIntentService服务启动了\n        // 这个情况下，这里会block住.............\n        // 直到IntentServiceIdlingResource#isIdleNow返回true，并且回调了IntentServiceIdlingResource#onTransitionToIdle\n        // 这个情况下，继续执行，这时我们就可以测试异步结束以后的情况了。\n        onView(withText(\"Broadcast\")).check(matches(notNullValue()));\n    }\n}\n\n```\n\n##### 自定义匹配器\n\n```java\n// 定义\npublic static Matcher<View> withItemHint(String itemHintText) {\n  checkArgument(!(itemHintText.equals(null)));\n  return withItemHint(is(itemHintText));\n}\n\npublic static Matcher<View> withItemHint(final Matcher<String> matcherText) {\n  checkNotNull(matcherText);\n  return new BoundedMatcher<View, EditText>(EditText.class) {\n\n    @Override\n    public void describeTo(Description description) {\n      description.appendText(\"with item hint: \" + matcherText);\n    }\n\n    @Override\n    protected boolean matchesSafely(EditText editTextField) {\n      // 取出hint，然后比对下是否相同\n      return matcherText.matches(editTextField.getHint().toString());\n    }\n  };\n}\n\n// 使用\nonView(withItemHint(\"test\")).check(matches(isDisplayed()));\n```\n\n## III. 拓展工具\n\n#### 1. AssertJ Android\n\n> [square/assertj-android](https://github.com/square/assertj-android)\n> 极大的提高可读性。\n\n```java\nimport static org.assertj.core.api.Assertions.*;\n\n// 断言: view是GONE的\nassertThat(view).isGone();\n\nMyClass test = new MyClass(\"Frodo\");\nMyClass test1 = new MyClass(\"Sauron\");\nMyClass test2 = new MyClass(\"Jacks\");\n\nList<MyClass> testList = new ArrayList<>();\ntestList.add(test);\ntestList.add(test1);\n\n// 断言: test.getName()等于\"Frodo\"\nassertThat(test.getName()).isEqualTo(\"Frodo\");\n// 断言: test不等于test1并且在testList中\nassertThat(test).isNotEqualTo(test1)\n                 .isIn(testList);\n// 断言: test.getName()的字符串，是由\"Fro\"打头，以\"do\"结尾，忽略大小写会等于\"frodo\"\nassertThat(test.getName()).startsWith(\"Fro\")\n                            .endsWith(\"do\")\n                            .isEqualToIgnoringCase(\"frodo\");\n// 断言: testList有2个数据，包含test，test1，不包含test2\nassertThat(list).hasSize(2)\n                .contains(test, test1)\n                .doesNotContain(test2);\n\n// 断言: 提取testList队列中所有数据中的成员变量名为name的变量，并且包含name为\"Frodo\"与\"Sauron\"\n//      并且不包含name为\"Jacks\"\nassertThat(testList).extracting(\"name\")\n                    .contains(\"Frodo\", \"Sauron\")\n                    .doesNotContain(\"Jacks\");\n```\n\n#### 2. Hamcrest\n\n> [JavaHamcrest](https://github.com/hamcrest/JavaHamcrest)\n> 通过已有的通配方法，快速的对代码条件进行测试\n> `org.hamcrest:hamcrest-junit:(version)`\n\n```java\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.Matchers.is;\nimport static org.hamcrest.Matchers.equalTo;\n\n// 断言: a等于b\nassertThat(a, equalTo(b));\nassertThat(a, is(equalTo(b)));\nassertThat(a, is(b));\n// 断言: a不等于b\nassertThat(actual, is(not(equalTo(b))));\n\nList<Integer> list = Arrays.asList(5, 2, 4);\n// 断言: list有3个数据\nassertThat(list, hasSize(3));\n// 断言: list中有5,2,4，并且顺序也一致\nassertThat(list, contains(5, 2, 4));\n// 断言: list中包含5,2,4\nassertThat(list, containsInAnyOrder(2, 4, 5));\n// 断言: list中的每一个数据都大于1\nassertThat(list, everyItem(greaterThan(1)));\n// 断言: fellowship中包含有成员变量\"race\"，并且其值不是ORC\nassertThat(fellowship, everyItem(hasProperty(\"race\", is(not((ORC))))));\n// 断言: object1中与object2相同的成员变量都是相同的值\nassertThat(object1, samePropertyValuesAs(object2));\n\nInteger[] ints = new Integer[] { 7, 5, 12, 16 };\n// 断言: 数组中包含7,5,12,16\nassertThat(ints, arrayContaining(7, 5, 12, 16));\n\n```\n\n##### 几个主要的匹配器:\n\n| Mather | 描述\n| --- | ---\n| `allOf` | 所有都匹配\n| `anyOf` | 任意一个匹配\n| `not` | 不是\n| `equalTo` | 对象等于\n| `is` | 是\n| `hasToString` | 包含`toString`\n| `instanceOf`,`isCompatibleType` | 类的类型是否匹配\n| `notNullValue`,`nullValue` | 测试null\n| `sameInstance` | 相同实例\n| `hasEntry`,`hasKey`,`hasValue` | 测试`Map`中的`Entry`、`Key`、`Value`\n| `hasItem`,`hasItems` | 测试集合(`collection`)中包含元素\n| `hasItemInArray` | 测试数组中包含元素\n| `closeTo` | 测试浮点数是否接近指定值\n| `greaterThan`,`greaterThanOrEqualTo`,`lessThan`,`lessThanOrEqualTo` | 数据对比\n| `equalToIgnoringCase` | 忽略大小写字符串对比\n| `equalToIgnoringWhiteSpace` | 忽略空格字符串对比\n| `containsString`,`endsWith`,`startsWith`,`isEmptyString`,`isEmptyOrNullString` | 字符串匹配\n\n##### 自定义匹配器\n\n```java\n// 自定义\nimport org.hamcrest.Description;\nimport org.hamcrest.TypeSafeMatcher;\n\npublic class RegexMatcher extends TypeSafeMatcher<String> {\n    private final String regex;\n\n    public RegexMatcher(final String regex) { this.regex = regex; }\n    @Override\n    public void describeTo(final Description description) { description.appendText(\"matches regular expression=`\" + regex + \"`\"); }\n\n    @Override\n    public boolean matchesSafely(final String string) { return string.matches(regex); }\n\n\n    // 上层调用的入口\n    public static RegexMatcher matchesRegex(final String regex) {\n        return new RegexMatcher(regex);\n    }\n}\n\n// 使用\nString s = \"aaabbbaaa\";\nassertThat(s, RegexMatcher.matchesRegex(\"a*b*a\"));\n```\n#### 3. Mockito\n\n> [Mockito](https://code.google.com/archive/p/mockito/)\n> Mock对象，控制其返回值，监控其方法的调用。\n> `org.mockito:mockito-all:(version)`\n\n```java\n// import如相关类\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\n\n// 创建一个Mock的对象\n MyClass test = mock(MyClass.class);\n\n// 当调用test.getUniqueId()的时候返回43\nwhen(test.getUniqueId()).thenReturn(43);\n// 当调用test.compareTo()传入任意的Int值都返回43\nwhen(test.compareTo(anyInt())).thenReturn(43);\n// 当调用test.compareTo()传入的是Target.class类型对象时返回43\nwhen(test.compareTo(isA(Target.class))).thenReturn(43);\n// 当调用test.close()的时候，抛IOException异常\ndoThrow(new IOException()).when(test).close();\n// 当调用test.execute()的时候，什么都不做\ndoNothing().when(test).execute();\n\n// 验证是否调用了两次test.getUniqueId()\nverify(test, times(2)).getUniqueId();\n// 验证是否没有调用过test.getUniqueId()\nverify(test, never()).getUniqueId();\n// 验证是否至少调用过两次test.getUniqueId()\nverify(test, atLeast(2)).getUniqueId();\n// 验证是否最多调用过三次test.getUniqueId()\nverify(test, atMost(3)).getUniqueId();\n// 验证是否这样调用过:test.query(\"test string\")\nverify(test).query(\"test string\");\n\n\n// 通过Mockito.spy() 封装List对象并返回将其mock的spy对象\nList list = new LinkedList();\nList spy = spy(list);\n\n// 指定spy.get(0)返回\"foo\"\ndoReturn(\"foo\").when(spy).get(0);\n\nassertEquals(\"foo\", spy.get(0));\n```\n\n##### 对访问方法时，传入参数进行快照\n\n```java\nimport org.mockito.ArgumentCaptor;\nimport org.mockito.Captor;\nimport static org.junit.Assert.assertEquals;\n\n@Captor\nprivate ArgumentCaptor<Integer> captor;\n\n@Test\npublic void testCapture(){\n  MyClass test = mock(MyClass.class);\n\n  test.compareTo(3, 4);\n  verify(test).compareTo(captor.capture(), eq(4));\n\n  assertEquals(3, (int)captor.getValue());\n\n\n  // 需要特别注意，如果是可变数组(vargars)参数，如方法 test.doSomething(String... params)\n  // 此时是使用ArgumentCaptor<String>，而非ArgumentCaptor<String[]>\n  ArgumentCaptor<String> varArgs = ArgumentCaptor.forClass(String.class);\n  test.doSomething(\"param-1\", \"param-2\");\n  verify(test).doSomething(varArgs.capture());\n\n  // 这里直接使用getAllValues()而非getValue()，来获取可变数组参数的所有传入参数\n  assertThat(varArgs.getAllValues()).contains(\"param-1\", \"param-2\");\n}\n```\n\n##### 对于静态的方法的Mock:\n\n可以使用 [PowerMock](https://github.com/jayway/powermock/wiki/MockitoUsage):\n\n> `org.powermock:powermock-api-mockito:(version)` & `org.powermock:powermock-module-junit4:(version)`(For `PowerMockRunner.class`)\n\n```java\n\n@RunWith(PowerMockRunner.class)\n@PrepareForTest({StaticClass1.class, StaticClass2.class})\npublic class MyTest {\n\n  @Test\n  public void testSomething() {\n    // mock完静态类以后，默认所有的方法都不做任何事情\n    mockStatic(StaticClass1.class);\n    when(StaticClass1.getStaticMethod()).andReturn(\"anything\");\n\n    // 验证是否StaticClass1.getStaticMethod()这个方法被调用了一次\n    verifyStatic(time(1));\n    StaticClass1.getStaticMethod();\n\n    when(StaticClass1.getStaticMethod()).andReturn(\"what ever\");\n\n    // 验证是否StaticClass2.getStaticMethod()这个方法被至少调用了一次\n    verifyStatic(atLeastOnce());\n    StaticClass2.getStaticMethod();\n\n    // 通过任何参数创建File的实力，都直接返回fileInstance对象\n    whenNew(File.class).withAnyArguments().thenReturn(fileInstance);\n  }\n}\n\n```\n\n或者是封装为非静态，然后用Mockito:\n\n```java\nclass FooWraper{\n  void someMethod() {\n    Foo.someStaticMethod();\n  }\n}\n```\n\n#### 4. Robolectric\n\n> [Robolectric](http://robolectric.org/)\n> 让模拟测试直接在开发机上完成，而不需要在Android系统上。所有需要使用到系统架构库的，如(`Handler`、`HandlerThread`)都需要使用Robolectric，或者进行模拟测试。\n\n主要是解决模拟测试中耗时的缺陷，模拟测试需要安装以及跑在Android系统上，也就是需要在Android虚拟机或者设备上面，所以十分的耗时。基本上每次来来回回都需要几分钟时间。针对这类问题，业界其实已经有了一个现成的解决方案: Pivotal实验室推出的[Robolectric](http://robolectric.org/)。通过使用Robolectrict模拟Android系统核心库的`Shadow Classes`的方式，我们可以像写本地测试一样写这类测试，并且直接运行在工作环境的JVM上，十分方便。\n\n#### 5. Robotium\n\n> [RobotiumTech/robotium](https://github.com/robotiumtech/robotium)\n> (Integration Tests)模拟用户操作，事件流测试。\n\n```java\n\n@RunWith(RobolectricTestRunner.class)\n@Config(constants = BuildConfig.class)\npublic class MyActivityTest{\n\n  @Test\n  public void doSomethingTests(){\n    // 获取Application对象\n    Application application = RuntimeEnvironment.application;\n\n    // 启动WelcomeActivity\n    WelcomeActivity activity = Robolectric.setupActivity(WelcomeActivity.class);\n    // 触发activity中Id为R.id.login的View的click事件\n    activity.findViewById(R.id.login).performClick();\n\n    Intent expectedIntent = new Intent(activity, LoginActivity.class);\n    // 在activity之后，启动的Activity是否是LoginActivity\n    assertThat(shadowOf(activity).getNextStartedActivity()).isEqualTo(expectedIntent);\n  }\n}\n```\n\n通过模拟用户的操作的行为事件流进行测试，这类测试无法避免需要在虚拟机或者设备上面运行的。是一些用户操作流程与视觉显示强相关的很好的选择。\n\n#### 6. Test Butler\n\n> [linkedin/test-butler](https://github.com/linkedin/test-butler)\n> 避免设备/模拟器系统或者环境的错误，导致测试的失败。\n\n通常我们在进行UI测试的时候，会遇到由于模拟器或者设备的错误，如系统的crash、ANR、或是未预期的Wifi、CPU罢工，或者是锁屏，这些外再环境因素导致测试不过。Test-Butler引入就是避免这些环境因素导致UI测试不过。\n\n> 该库被[谷歌官方推荐过](https://www.youtube.com/watch?v=aHcmsK9jfGU)，并且收到谷歌工程师的Review。\n\n## IV. 拓展思路\n\n#### 1. Android Robots\n\n> [Instrumentation Testing Robots - Jake Wharton](https://realm.io/news/kau-jake-wharton-testing-robots/)\n\n假如我们需要测试: 发送 $42 到 \"foo@bar.com\"，然后验证是否成功。\n\n##### 通常的做法\n\n![](/img/android-test_1.png)\n\n![](/img/android-test_2.png)\n\n##### Robot思想\n\n在写真正的UI测试的时候，只需要关注要测试什么，而不需要关注需要怎么测试，换句话说就是让测试逻辑与View或Presenter解耦，而与数据产生关系。\n\n首先通过封装一个Robot去处理How的部分:\n\n![](/img/android-test_3.png)\n\n然后在写测试的时候，只关注需要测试什么:\n\n![](/img/android-test_4.png)\n\n最终的思想原理\n\n![](/img/android-test_5.png)\n\n---\n\n- 文章创建时间: 2016-5-15，[本文迭代日志](https://github.com/Jacksgong/Blog/commits/master/source/_posts/android_test.md)。\n\n---\n\n本文已经发布到JackBlog公众号，可请直接访问: [Android单元测试与模拟测试 - JacksBlog](https://mp.weixin.qq.com/s?__biz=MzIyMjQxMzAzOA==&mid=2247483680&idx=1&sn=a81f0b86696f243bf32c032fc7b09574)\n\n---\n\n- [Building Local Unit Tests](http://developer.android.com/training/testing/unit-testing/local-unit-tests.html)\n- [Testing the Android way](https://www.bignerdranch.com/blog/testing-the-android-way/)\n- [timber中的单元测试实例](https://github.com/JakeWharton/timber/blob/master/timber/src/test/java/timber/log/TimberTest.java)\n- [timber/build.gradle](https://github.com/JakeWharton/timber/blob/master/timber/build.gradle)\n- [A BDD (RSpec-like) testing library for Java](http://stackoverflow.com/questions/30675748/a-bdd-rspec-like-testing-library-for-java)\n- [Open Sourcing Test Butler](https://engineering.linkedin.com/blog/2016/08/introducing-and-open-sourcing-test-butler--reliable-android-test)\n- [Unit Testing with JUnit -Tutorial](http://www.vogella.com/tutorials/JUnit/article.html)\n- [Unit tests with Mockito - Tutorial](http://www.vogella.com/tutorials/Mockito/article.html)\n- [Using Hamcrest for testing - Tutorial](http://www.vogella.com/tutorials/Hamcrest/article.html)\n- [Testing with AssertJ assertions - Tutorial](http://www.vogella.com/tutorials/AssertJ/article.html)\n- [Android user interface testing with Espresso - Tutorial](http://www.vogella.com/tutorials/AndroidTestingEspresso/article.html)\n- [chiuki/espresso-samples](https://github.com/chiuki/espresso-samples)\n- [Mock static methods from multiple class using PowerMock](http://stackoverflow.com/questions/10327612/mock-static-methods-from-multiple-class-using-powermock)\n- [rest-assured/rest-assured](https://github.com/rest-assured/rest-assured)\n- [skyscreamer/JSONassert](https://github.com/skyscreamer/JSONassert)\n- [Mastering the Terminal side of Android development](https://medium.com/@cesarmcferreira/mastering-the-terminal-side-of-android-development-e7520466c521#.e5vt3p3vl)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/android_test.md","raw":"title: Android单元测试与模拟测试\ndate: 2016-11-30 00:40:03\npermalink: 2016/05/15/android_test\ntags:\n- 单元测试\n- 模拟测试\n- UI测试\n- 稳定性\n- Android\n\n---\n\n> 测试驱动式编程(Test-Driven-Development)在RoR中已经是非常普遍的开发模式，是一种十分可靠、优秀的编程思想，可是在Android领域中这块还没有普及，今天主要聊聊Android中的单元测试与模拟测试及其常用的一些库。\n\n<!-- more -->\n\n## I. 测试与基本规范\n\n#### 1. 为什么需要测试?\n\n- 为了稳定性，能够明确的了解是否正确的完成开发。\n- 更加易于维护，能够在修改代码后保证功能不被破坏。\n- 集成一些工具，规范开发规范，使得代码更加稳定( 如通过 phabricator differential 发diff时提交需要执行的单元测试，在开发流程上就可以保证远端代码的稳定性)。\n\n#### 2. 测什么?\n\n- 一般单元测试:\n  - 列出想要测试覆盖的异常情况，进行验证。\n  - 性能测试。\n- 模拟测试: 根据需求，测试用户真正在使用过程中，界面的反馈与显示以及一些依赖系统架构的组件的应用测试。\n\n#### 3. 需要注意\n\n- 考虑可读性，对于方法名使用表达能力强的方法名，对于测试范式可以考虑使用一种规范, 如 RSpec-style。方法名可以采用一种格式，如: `[测试的方法]_[测试的条件]_[符合预期的结果]`。\n- 不要使用逻辑流关键字(If/else、for、do/while、switch/case)，在一个测试方法中，如果需要有这些，拆分到单独的每个测试方法里。\n- 测试真正需要测试的内容，需要覆盖的情况，一般情况只考虑验证输出（如某操作后，显示什么，值是什么）。\n- 考虑耗时，Android Studio默认会输出耗时。\n- 不需要考虑测试`private`的方法，将`private`方法当做黑盒内部组件，测试对其引用的`public`方法即可；不考虑测试琐碎的代码，如`getter`或者`setter`。\n- 每个单元测试方法，应没有先后顺序；尽可能的解耦对于不同的测试方法，不应该存在Test A与Test B存在时序性的情况。\n\n#### 4. 创建测试\n\n- 选择对应的类\n- 将光标停留在类名上\n- 按下`ALT + ENTER`\n- 在弹出的弹窗中选择`Create Test`\n\n## II. Android Studio中的单元测试与模拟测试\n\n> control + shift + R (Android Studio 默认执行单元测试快捷键)。\n\n### 1. 本地单元测试\n\n> 直接在开发机上面进行运行测试。\n> 在没有依赖或者仅仅只需要简单的Android库依赖的情况下，有限考虑使用该类单元测试。\n\n`./gradlew test`\n\n通过添加以下脚本到对应module的`build.gradle`中，以便于在终端中也可以直接查看单元测试的各类测试信息:\n\n```groovy\nandroid {\n  ...\n  testOptions.unitTests.all {\n    testLogging {\n      events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'\n      outputs.upToDateWhen { false }\n      showStandardStreams = true\n    }\n  }\n}\n```\n\n#### 代码存储\n\n> 如果是对应不同的flavor或者是build type，直接在test后面加上对应后缀(如对应名为`myFlavor`的单元测试代码，应该放在`src/testMyFlavor/java`下面)。\n\n`src/test/java`\n\n#### Google官方推荐引用\n\n```groovy\ndependencies {\n    // Required -- JUnit 4 framework，用于单元测试，google官方推荐\n    testCompile 'junit:junit:4.12'\n    // Optional -- Mockito framework，用于模拟架构，google官方推荐\n    testCompile 'org.mockito:mockito-core:1.10.19'\n}\n```\n\n#### JUnit\n\n##### Annotation\n\n| Annotation | 描述\n| --- | ---\n| `@Test public void method()` | 定义所在方法为`单元测试方法`\n| `@Test (expected = Exception.class)` | 如果所在方法没有抛出`Annotation`中的`Exception.class`->失败\n| `@Test(timeout=100)` | 如果方法耗时超过`100`毫秒->失败\n| `@Test(expected=Exception.class)` | 如果方法抛了Exception.class类型的异常->通过\n| `@Before public void method()` | 这个方法在每个测试之前执行，用于准备测试环境(如: 初始化类，读输入流等)\n| `@After public void method()` | 这个方法在每个测试之后执行，用于清理测试环境数据\n| `BeforeClass public static void method()` | 这个方法在所有测试开始之前执行一次，用于做一些耗时的初始化工作(如: 连接数据库)\n| `AfterClass public static void method()` | 这个方法在所有测试结束之后执行一次，用于清理数据(如: 断开数据连接)\n| `@Ignore`或者`@Ignore(\"Why disabled\")` | 忽略当前测试方法，一般用于测试方法还没有准备好，或者太耗时之类的\n| `@FixMethodOrder(MethodSorters.NAME_ASCENDING) public class TestClass{}`  | 使得该测试方法中的所有测试都按照方法中的字母顺序测试\n| `Assume.assumeFalse(boolean condition)` | 如果满足`condition`，就不执行对应方法\n\n### 2. 模拟测试\n\n> 需要运行在Android设备或者虚拟机上的测试。\n\n> 主要用于测试: 单元(Android SDK层引用关系的相关的单元测试)、UI、应用组件集成测试(Service、Content Provider等)。\n\n`./gradlew connectedAndroidTest`\n\n#### 代码存储:\n\n`src/androidTest/java`\n\n#### Google官方推荐引用\n\n```groovy\ndependencies {\n    androidTestCompile 'com.android.support:support-annotations:23.0.1'\n    androidTestCompile 'com.android.support.test:runner:0.4.1'\n    androidTestCompile 'com.android.support.test:rules:0.4.1'\n    // Optional -- Hamcrest library\n    androidTestCompile 'org.hamcrest:hamcrest-library:1.3'\n    // Optional -- UI testing with Espresso\n    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.1'\n    // Optional -- UI testing with UI Automator\n    androidTestCompile 'com.android.support.test.uiautomator:uiautomator-v18:2.1.1'\n}\n```\n\n#### 常见的UI测试\n\n> 需要模拟Android系统环境。\n\n##### 主要三点:\n\n1. UI加载好后展示的信息是否正确。\n2. 在用户某个操作后UI信息是否展示正确。\n3. 展示正确的页面供用户操作。\n\n#### Espresso\n\n> 谷歌官方提供用于UI交互测试\n\n```java\nimport static android.support.test.espresso.Espresso.onView;\nimport static android.support.test.espresso.action.ViewActions.click;\nimport static android.support.test.espresso.assertion.ViewAssertions.matches;\nimport static android.support.test.espresso.matcher.ViewMatchers.isDisplayed;\nimport static android.support.test.espresso.matcher.ViewMatchers.withId;\n\n// 对于Id为R.id.my_view的View: 触发点击，检测是否显示\nonView(withId(R.id.my_view)).perform(click())               \n                            .check(matches(isDisplayed()));\n// 对于文本打头是\"ABC\"的View: 检测是否没有Enable\nonView(withText(startsWith(\"ABC\"))).check(matches(not(isEnabled()));\n// 按返回键\npressBack();\n// 对于Id为R.id.button的View: 检测内容是否是\"Start new activity\"\nonView(withId(R.id.button)).check(matches(withText((\"Start new activity\"))));\n// 对于Id为R.id.viewId的View: 检测内容是否不包含\"YYZZ\"\nonView(withId(R.id.viewId)).check(matches(withText(not(containsString(\"YYZZ\")))));\n// 对于Id为R.id.inputField的View: 输入\"NewText\"，然后关闭软键盘\nonView(withId(R.id.inputField)).perform(typeText(\"NewText\"), closeSoftKeyboard());\n// 对于Id为R.id.inputField的View: 清除内容\nonView(withId(R.id.inputField)).perform(clearText());\n```\n\n##### 启动一个打开`Activity`的`Intent`\n\n```java\n@RunWith(AndroidJUnit4.class)\npublic class SecondActivityTest {\n    @Rule\n    public ActivityTestRule<SecondActivity> rule =\n            new ActivityTestRule(SecondActivity.class, true,\n                                  // 这个参数为false，不让SecondActivity自动启动\n                                  // 如果为true，将会在所有@Before之前启动，在最后一个@After之后关闭\n                                  false);\n    @Test\n    public void demonstrateIntentPrep() {\n        Intent intent = new Intent();\n        intent.putExtra(\"EXTRA\", \"Test\");\n        // 启动SecondActivity并传入intent\n        rule.launchActivity(intent);\n        // 对于Id为R.id.display的View: 检测内容是否是\"Text\"\n        onView(withId(R.id.display)).check(matches(withText(\"Test\")));\n    }\n}\n```\n\n##### 异步交互\n\n建议关闭设备中\"设置->开发者选项中\"的动画，因为这些动画可能会是的Espresso在检测异步任务的时候产生混淆: 窗口动画缩放(Window animation scale)、过渡动画缩放(Transition animation scale)、动画程序时长缩放(Animator duration scale)。\n\n> 针对`AsyncTask`，在测试的时候，如触发点击事件以后抛了一个`AsyncTask`任务，在测试的时候直接`onView(withId(R.id.update)).perform(click())`，然后直接进行检测，此时的检测就是在`AsyncTask#onPostExecute`之后。\n\n```java\n// 通过实现IdlingResource，block住当非空闲的时候，当空闲时进行检测，非空闲的这段时间处理异步事情\npublic class IntentServiceIdlingResource implements IdlingResource {\n    ResourceCallback resourceCallback;\n    private Context context;\n\n    public IntentServiceIdlingResource(Context context) { this.context = context; }\n\n    @Override public String getName() { return IntentServiceIdlingResource.class.getName(); }\n\n    @Override public void registerIdleTransitionCallback( ResourceCallback resourceCallback) { this.resourceCallback = resourceCallback; }\n\n    @Override public boolean isIdleNow() {\n      // 是否是空闲\n      // 如果IntentService 没有在运行，就说明异步任务结束，IntentService特质就是启动以后处理完Intent中的事务，理解关闭自己\n        boolean idle = !isIntentServiceRunning();\n        if (idle && resourceCallback != null) {\n          // 回调告知异步任务结束\n            resourceCallback.onTransitionToIdle();\n        }\n        return idle;\n    }\n\n    private boolean isIntentServiceRunning() {\n        ActivityManager manager = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);\n        // Get all running services\n        List<ActivityManager.RunningServiceInfo> runningServices = manager.getRunningServices(Integer.MAX_VALUE);\n        // check if our is running\n        for (ActivityManager.RunningServiceInfo info : runningServices) {\n            if (MyIntentService.class.getName().equals(info.service.getClassName())) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n// 使用IntentServiceIdlingResource来测试，MyIntentService服务启动结束这个异步事务，之后的结果。\n@RunWith(AndroidJUnit4.class)\npublic class IntegrationTest {\n\n    @Rule\n    public ActivityTestRule rule = new ActivityTestRule(MainActivity.class);\n    IntentServiceIdlingResource idlingResource;\n\n    @Before\n    public void before() {\n        Instrumentation instrumentation = InstrumentationRegistry.getInstrumentation();\n        Context ctx = instrumentation.getTargetContext();\n        idlingResource = new IntentServiceIdlingResource(ctx);\n        // 注册这个异步监听\n        Espresso.registerIdlingResources(idlingResource);\n\n    }\n    @After\n    public void after() {\n        // 取消注册这个异步监听\n        Espresso.unregisterIdlingResources(idlingResource);\n\n    }\n\n    @Test\n    public void runSequence() {\n        // MainActivity中点击R.id.action_settings这个View的时候，会启动MyIntentService\n        onView(withId(R.id.action_settings)).perform(click());\n        // 这时候IntentServiceIdlingResource#isIdleNow会返回false，因为MyIntentService服务启动了\n        // 这个情况下，这里会block住.............\n        // 直到IntentServiceIdlingResource#isIdleNow返回true，并且回调了IntentServiceIdlingResource#onTransitionToIdle\n        // 这个情况下，继续执行，这时我们就可以测试异步结束以后的情况了。\n        onView(withText(\"Broadcast\")).check(matches(notNullValue()));\n    }\n}\n\n```\n\n##### 自定义匹配器\n\n```java\n// 定义\npublic static Matcher<View> withItemHint(String itemHintText) {\n  checkArgument(!(itemHintText.equals(null)));\n  return withItemHint(is(itemHintText));\n}\n\npublic static Matcher<View> withItemHint(final Matcher<String> matcherText) {\n  checkNotNull(matcherText);\n  return new BoundedMatcher<View, EditText>(EditText.class) {\n\n    @Override\n    public void describeTo(Description description) {\n      description.appendText(\"with item hint: \" + matcherText);\n    }\n\n    @Override\n    protected boolean matchesSafely(EditText editTextField) {\n      // 取出hint，然后比对下是否相同\n      return matcherText.matches(editTextField.getHint().toString());\n    }\n  };\n}\n\n// 使用\nonView(withItemHint(\"test\")).check(matches(isDisplayed()));\n```\n\n## III. 拓展工具\n\n#### 1. AssertJ Android\n\n> [square/assertj-android](https://github.com/square/assertj-android)\n> 极大的提高可读性。\n\n```java\nimport static org.assertj.core.api.Assertions.*;\n\n// 断言: view是GONE的\nassertThat(view).isGone();\n\nMyClass test = new MyClass(\"Frodo\");\nMyClass test1 = new MyClass(\"Sauron\");\nMyClass test2 = new MyClass(\"Jacks\");\n\nList<MyClass> testList = new ArrayList<>();\ntestList.add(test);\ntestList.add(test1);\n\n// 断言: test.getName()等于\"Frodo\"\nassertThat(test.getName()).isEqualTo(\"Frodo\");\n// 断言: test不等于test1并且在testList中\nassertThat(test).isNotEqualTo(test1)\n                 .isIn(testList);\n// 断言: test.getName()的字符串，是由\"Fro\"打头，以\"do\"结尾，忽略大小写会等于\"frodo\"\nassertThat(test.getName()).startsWith(\"Fro\")\n                            .endsWith(\"do\")\n                            .isEqualToIgnoringCase(\"frodo\");\n// 断言: testList有2个数据，包含test，test1，不包含test2\nassertThat(list).hasSize(2)\n                .contains(test, test1)\n                .doesNotContain(test2);\n\n// 断言: 提取testList队列中所有数据中的成员变量名为name的变量，并且包含name为\"Frodo\"与\"Sauron\"\n//      并且不包含name为\"Jacks\"\nassertThat(testList).extracting(\"name\")\n                    .contains(\"Frodo\", \"Sauron\")\n                    .doesNotContain(\"Jacks\");\n```\n\n#### 2. Hamcrest\n\n> [JavaHamcrest](https://github.com/hamcrest/JavaHamcrest)\n> 通过已有的通配方法，快速的对代码条件进行测试\n> `org.hamcrest:hamcrest-junit:(version)`\n\n```java\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.Matchers.is;\nimport static org.hamcrest.Matchers.equalTo;\n\n// 断言: a等于b\nassertThat(a, equalTo(b));\nassertThat(a, is(equalTo(b)));\nassertThat(a, is(b));\n// 断言: a不等于b\nassertThat(actual, is(not(equalTo(b))));\n\nList<Integer> list = Arrays.asList(5, 2, 4);\n// 断言: list有3个数据\nassertThat(list, hasSize(3));\n// 断言: list中有5,2,4，并且顺序也一致\nassertThat(list, contains(5, 2, 4));\n// 断言: list中包含5,2,4\nassertThat(list, containsInAnyOrder(2, 4, 5));\n// 断言: list中的每一个数据都大于1\nassertThat(list, everyItem(greaterThan(1)));\n// 断言: fellowship中包含有成员变量\"race\"，并且其值不是ORC\nassertThat(fellowship, everyItem(hasProperty(\"race\", is(not((ORC))))));\n// 断言: object1中与object2相同的成员变量都是相同的值\nassertThat(object1, samePropertyValuesAs(object2));\n\nInteger[] ints = new Integer[] { 7, 5, 12, 16 };\n// 断言: 数组中包含7,5,12,16\nassertThat(ints, arrayContaining(7, 5, 12, 16));\n\n```\n\n##### 几个主要的匹配器:\n\n| Mather | 描述\n| --- | ---\n| `allOf` | 所有都匹配\n| `anyOf` | 任意一个匹配\n| `not` | 不是\n| `equalTo` | 对象等于\n| `is` | 是\n| `hasToString` | 包含`toString`\n| `instanceOf`,`isCompatibleType` | 类的类型是否匹配\n| `notNullValue`,`nullValue` | 测试null\n| `sameInstance` | 相同实例\n| `hasEntry`,`hasKey`,`hasValue` | 测试`Map`中的`Entry`、`Key`、`Value`\n| `hasItem`,`hasItems` | 测试集合(`collection`)中包含元素\n| `hasItemInArray` | 测试数组中包含元素\n| `closeTo` | 测试浮点数是否接近指定值\n| `greaterThan`,`greaterThanOrEqualTo`,`lessThan`,`lessThanOrEqualTo` | 数据对比\n| `equalToIgnoringCase` | 忽略大小写字符串对比\n| `equalToIgnoringWhiteSpace` | 忽略空格字符串对比\n| `containsString`,`endsWith`,`startsWith`,`isEmptyString`,`isEmptyOrNullString` | 字符串匹配\n\n##### 自定义匹配器\n\n```java\n// 自定义\nimport org.hamcrest.Description;\nimport org.hamcrest.TypeSafeMatcher;\n\npublic class RegexMatcher extends TypeSafeMatcher<String> {\n    private final String regex;\n\n    public RegexMatcher(final String regex) { this.regex = regex; }\n    @Override\n    public void describeTo(final Description description) { description.appendText(\"matches regular expression=`\" + regex + \"`\"); }\n\n    @Override\n    public boolean matchesSafely(final String string) { return string.matches(regex); }\n\n\n    // 上层调用的入口\n    public static RegexMatcher matchesRegex(final String regex) {\n        return new RegexMatcher(regex);\n    }\n}\n\n// 使用\nString s = \"aaabbbaaa\";\nassertThat(s, RegexMatcher.matchesRegex(\"a*b*a\"));\n```\n#### 3. Mockito\n\n> [Mockito](https://code.google.com/archive/p/mockito/)\n> Mock对象，控制其返回值，监控其方法的调用。\n> `org.mockito:mockito-all:(version)`\n\n```java\n// import如相关类\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\n\n// 创建一个Mock的对象\n MyClass test = mock(MyClass.class);\n\n// 当调用test.getUniqueId()的时候返回43\nwhen(test.getUniqueId()).thenReturn(43);\n// 当调用test.compareTo()传入任意的Int值都返回43\nwhen(test.compareTo(anyInt())).thenReturn(43);\n// 当调用test.compareTo()传入的是Target.class类型对象时返回43\nwhen(test.compareTo(isA(Target.class))).thenReturn(43);\n// 当调用test.close()的时候，抛IOException异常\ndoThrow(new IOException()).when(test).close();\n// 当调用test.execute()的时候，什么都不做\ndoNothing().when(test).execute();\n\n// 验证是否调用了两次test.getUniqueId()\nverify(test, times(2)).getUniqueId();\n// 验证是否没有调用过test.getUniqueId()\nverify(test, never()).getUniqueId();\n// 验证是否至少调用过两次test.getUniqueId()\nverify(test, atLeast(2)).getUniqueId();\n// 验证是否最多调用过三次test.getUniqueId()\nverify(test, atMost(3)).getUniqueId();\n// 验证是否这样调用过:test.query(\"test string\")\nverify(test).query(\"test string\");\n\n\n// 通过Mockito.spy() 封装List对象并返回将其mock的spy对象\nList list = new LinkedList();\nList spy = spy(list);\n\n// 指定spy.get(0)返回\"foo\"\ndoReturn(\"foo\").when(spy).get(0);\n\nassertEquals(\"foo\", spy.get(0));\n```\n\n##### 对访问方法时，传入参数进行快照\n\n```java\nimport org.mockito.ArgumentCaptor;\nimport org.mockito.Captor;\nimport static org.junit.Assert.assertEquals;\n\n@Captor\nprivate ArgumentCaptor<Integer> captor;\n\n@Test\npublic void testCapture(){\n  MyClass test = mock(MyClass.class);\n\n  test.compareTo(3, 4);\n  verify(test).compareTo(captor.capture(), eq(4));\n\n  assertEquals(3, (int)captor.getValue());\n\n\n  // 需要特别注意，如果是可变数组(vargars)参数，如方法 test.doSomething(String... params)\n  // 此时是使用ArgumentCaptor<String>，而非ArgumentCaptor<String[]>\n  ArgumentCaptor<String> varArgs = ArgumentCaptor.forClass(String.class);\n  test.doSomething(\"param-1\", \"param-2\");\n  verify(test).doSomething(varArgs.capture());\n\n  // 这里直接使用getAllValues()而非getValue()，来获取可变数组参数的所有传入参数\n  assertThat(varArgs.getAllValues()).contains(\"param-1\", \"param-2\");\n}\n```\n\n##### 对于静态的方法的Mock:\n\n可以使用 [PowerMock](https://github.com/jayway/powermock/wiki/MockitoUsage):\n\n> `org.powermock:powermock-api-mockito:(version)` & `org.powermock:powermock-module-junit4:(version)`(For `PowerMockRunner.class`)\n\n```java\n\n@RunWith(PowerMockRunner.class)\n@PrepareForTest({StaticClass1.class, StaticClass2.class})\npublic class MyTest {\n\n  @Test\n  public void testSomething() {\n    // mock完静态类以后，默认所有的方法都不做任何事情\n    mockStatic(StaticClass1.class);\n    when(StaticClass1.getStaticMethod()).andReturn(\"anything\");\n\n    // 验证是否StaticClass1.getStaticMethod()这个方法被调用了一次\n    verifyStatic(time(1));\n    StaticClass1.getStaticMethod();\n\n    when(StaticClass1.getStaticMethod()).andReturn(\"what ever\");\n\n    // 验证是否StaticClass2.getStaticMethod()这个方法被至少调用了一次\n    verifyStatic(atLeastOnce());\n    StaticClass2.getStaticMethod();\n\n    // 通过任何参数创建File的实力，都直接返回fileInstance对象\n    whenNew(File.class).withAnyArguments().thenReturn(fileInstance);\n  }\n}\n\n```\n\n或者是封装为非静态，然后用Mockito:\n\n```java\nclass FooWraper{\n  void someMethod() {\n    Foo.someStaticMethod();\n  }\n}\n```\n\n#### 4. Robolectric\n\n> [Robolectric](http://robolectric.org/)\n> 让模拟测试直接在开发机上完成，而不需要在Android系统上。所有需要使用到系统架构库的，如(`Handler`、`HandlerThread`)都需要使用Robolectric，或者进行模拟测试。\n\n主要是解决模拟测试中耗时的缺陷，模拟测试需要安装以及跑在Android系统上，也就是需要在Android虚拟机或者设备上面，所以十分的耗时。基本上每次来来回回都需要几分钟时间。针对这类问题，业界其实已经有了一个现成的解决方案: Pivotal实验室推出的[Robolectric](http://robolectric.org/)。通过使用Robolectrict模拟Android系统核心库的`Shadow Classes`的方式，我们可以像写本地测试一样写这类测试，并且直接运行在工作环境的JVM上，十分方便。\n\n#### 5. Robotium\n\n> [RobotiumTech/robotium](https://github.com/robotiumtech/robotium)\n> (Integration Tests)模拟用户操作，事件流测试。\n\n```java\n\n@RunWith(RobolectricTestRunner.class)\n@Config(constants = BuildConfig.class)\npublic class MyActivityTest{\n\n  @Test\n  public void doSomethingTests(){\n    // 获取Application对象\n    Application application = RuntimeEnvironment.application;\n\n    // 启动WelcomeActivity\n    WelcomeActivity activity = Robolectric.setupActivity(WelcomeActivity.class);\n    // 触发activity中Id为R.id.login的View的click事件\n    activity.findViewById(R.id.login).performClick();\n\n    Intent expectedIntent = new Intent(activity, LoginActivity.class);\n    // 在activity之后，启动的Activity是否是LoginActivity\n    assertThat(shadowOf(activity).getNextStartedActivity()).isEqualTo(expectedIntent);\n  }\n}\n```\n\n通过模拟用户的操作的行为事件流进行测试，这类测试无法避免需要在虚拟机或者设备上面运行的。是一些用户操作流程与视觉显示强相关的很好的选择。\n\n#### 6. Test Butler\n\n> [linkedin/test-butler](https://github.com/linkedin/test-butler)\n> 避免设备/模拟器系统或者环境的错误，导致测试的失败。\n\n通常我们在进行UI测试的时候，会遇到由于模拟器或者设备的错误，如系统的crash、ANR、或是未预期的Wifi、CPU罢工，或者是锁屏，这些外再环境因素导致测试不过。Test-Butler引入就是避免这些环境因素导致UI测试不过。\n\n> 该库被[谷歌官方推荐过](https://www.youtube.com/watch?v=aHcmsK9jfGU)，并且收到谷歌工程师的Review。\n\n## IV. 拓展思路\n\n#### 1. Android Robots\n\n> [Instrumentation Testing Robots - Jake Wharton](https://realm.io/news/kau-jake-wharton-testing-robots/)\n\n假如我们需要测试: 发送 $42 到 \"foo@bar.com\"，然后验证是否成功。\n\n##### 通常的做法\n\n![](/img/android-test_1.png)\n\n![](/img/android-test_2.png)\n\n##### Robot思想\n\n在写真正的UI测试的时候，只需要关注要测试什么，而不需要关注需要怎么测试，换句话说就是让测试逻辑与View或Presenter解耦，而与数据产生关系。\n\n首先通过封装一个Robot去处理How的部分:\n\n![](/img/android-test_3.png)\n\n然后在写测试的时候，只关注需要测试什么:\n\n![](/img/android-test_4.png)\n\n最终的思想原理\n\n![](/img/android-test_5.png)\n\n---\n\n- 文章创建时间: 2016-5-15，[本文迭代日志](https://github.com/Jacksgong/Blog/commits/master/source/_posts/android_test.md)。\n\n---\n\n本文已经发布到JackBlog公众号，可请直接访问: [Android单元测试与模拟测试 - JacksBlog](https://mp.weixin.qq.com/s?__biz=MzIyMjQxMzAzOA==&mid=2247483680&idx=1&sn=a81f0b86696f243bf32c032fc7b09574)\n\n---\n\n- [Building Local Unit Tests](http://developer.android.com/training/testing/unit-testing/local-unit-tests.html)\n- [Testing the Android way](https://www.bignerdranch.com/blog/testing-the-android-way/)\n- [timber中的单元测试实例](https://github.com/JakeWharton/timber/blob/master/timber/src/test/java/timber/log/TimberTest.java)\n- [timber/build.gradle](https://github.com/JakeWharton/timber/blob/master/timber/build.gradle)\n- [A BDD (RSpec-like) testing library for Java](http://stackoverflow.com/questions/30675748/a-bdd-rspec-like-testing-library-for-java)\n- [Open Sourcing Test Butler](https://engineering.linkedin.com/blog/2016/08/introducing-and-open-sourcing-test-butler--reliable-android-test)\n- [Unit Testing with JUnit -Tutorial](http://www.vogella.com/tutorials/JUnit/article.html)\n- [Unit tests with Mockito - Tutorial](http://www.vogella.com/tutorials/Mockito/article.html)\n- [Using Hamcrest for testing - Tutorial](http://www.vogella.com/tutorials/Hamcrest/article.html)\n- [Testing with AssertJ assertions - Tutorial](http://www.vogella.com/tutorials/AssertJ/article.html)\n- [Android user interface testing with Espresso - Tutorial](http://www.vogella.com/tutorials/AndroidTestingEspresso/article.html)\n- [chiuki/espresso-samples](https://github.com/chiuki/espresso-samples)\n- [Mock static methods from multiple class using PowerMock](http://stackoverflow.com/questions/10327612/mock-static-methods-from-multiple-class-using-powermock)\n- [rest-assured/rest-assured](https://github.com/rest-assured/rest-assured)\n- [skyscreamer/JSONassert](https://github.com/skyscreamer/JSONassert)\n- [Mastering the Terminal side of Android development](https://medium.com/@cesarmcferreira/mastering-the-terminal-side-of-android-development-e7520466c521#.e5vt3p3vl)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2016/05/15/android_test","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66ij002395bunbmkhszk","content":"<blockquote>\n<p>测试驱动式编程(Test-Driven-Development)在RoR中已经是非常普遍的开发模式，是一种十分可靠、优秀的编程思想，可是在Android领域中这块还没有普及，今天主要聊聊Android中的单元测试与模拟测试及其常用的一些库。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"I-测试与基本规范\"><a href=\"#I-测试与基本规范\" class=\"headerlink\" title=\"I. 测试与基本规范\"></a>I. 测试与基本规范</h2><h4 id=\"1-为什么需要测试\"><a href=\"#1-为什么需要测试\" class=\"headerlink\" title=\"1. 为什么需要测试?\"></a>1. 为什么需要测试?</h4><ul>\n<li>为了稳定性，能够明确的了解是否正确的完成开发。</li>\n<li>更加易于维护，能够在修改代码后保证功能不被破坏。</li>\n<li>集成一些工具，规范开发规范，使得代码更加稳定( 如通过 phabricator differential 发diff时提交需要执行的单元测试，在开发流程上就可以保证远端代码的稳定性)。</li>\n</ul>\n<h4 id=\"2-测什么\"><a href=\"#2-测什么\" class=\"headerlink\" title=\"2. 测什么?\"></a>2. 测什么?</h4><ul>\n<li>一般单元测试:<ul>\n<li>列出想要测试覆盖的异常情况，进行验证。</li>\n<li>性能测试。</li>\n</ul>\n</li>\n<li>模拟测试: 根据需求，测试用户真正在使用过程中，界面的反馈与显示以及一些依赖系统架构的组件的应用测试。</li>\n</ul>\n<h4 id=\"3-需要注意\"><a href=\"#3-需要注意\" class=\"headerlink\" title=\"3. 需要注意\"></a>3. 需要注意</h4><ul>\n<li>考虑可读性，对于方法名使用表达能力强的方法名，对于测试范式可以考虑使用一种规范, 如 RSpec-style。方法名可以采用一种格式，如: <code>[测试的方法]_[测试的条件]_[符合预期的结果]</code>。</li>\n<li>不要使用逻辑流关键字(If/else、for、do/while、switch/case)，在一个测试方法中，如果需要有这些，拆分到单独的每个测试方法里。</li>\n<li>测试真正需要测试的内容，需要覆盖的情况，一般情况只考虑验证输出（如某操作后，显示什么，值是什么）。</li>\n<li>考虑耗时，Android Studio默认会输出耗时。</li>\n<li>不需要考虑测试<code>private</code>的方法，将<code>private</code>方法当做黑盒内部组件，测试对其引用的<code>public</code>方法即可；不考虑测试琐碎的代码，如<code>getter</code>或者<code>setter</code>。</li>\n<li>每个单元测试方法，应没有先后顺序；尽可能的解耦对于不同的测试方法，不应该存在Test A与Test B存在时序性的情况。</li>\n</ul>\n<h4 id=\"4-创建测试\"><a href=\"#4-创建测试\" class=\"headerlink\" title=\"4. 创建测试\"></a>4. 创建测试</h4><ul>\n<li>选择对应的类</li>\n<li>将光标停留在类名上</li>\n<li>按下<code>ALT + ENTER</code></li>\n<li>在弹出的弹窗中选择<code>Create Test</code></li>\n</ul>\n<h2 id=\"II-Android-Studio中的单元测试与模拟测试\"><a href=\"#II-Android-Studio中的单元测试与模拟测试\" class=\"headerlink\" title=\"II. Android Studio中的单元测试与模拟测试\"></a>II. Android Studio中的单元测试与模拟测试</h2><blockquote>\n<p>control + shift + R (Android Studio 默认执行单元测试快捷键)。</p>\n</blockquote>\n<h3 id=\"1-本地单元测试\"><a href=\"#1-本地单元测试\" class=\"headerlink\" title=\"1. 本地单元测试\"></a>1. 本地单元测试</h3><blockquote>\n<p>直接在开发机上面进行运行测试。<br>在没有依赖或者仅仅只需要简单的Android库依赖的情况下，有限考虑使用该类单元测试。</p>\n</blockquote>\n<p><code>./gradlew test</code></p>\n<p>通过添加以下脚本到对应module的<code>build.gradle</code>中，以便于在终端中也可以直接查看单元测试的各类测试信息:</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">android &#123;</div><div class=\"line\">  ...</div><div class=\"line\">  testOptions.unitTests.all &#123;</div><div class=\"line\">    testLogging &#123;</div><div class=\"line\">      events <span class=\"string\">'passed'</span>, <span class=\"string\">'skipped'</span>, <span class=\"string\">'failed'</span>, <span class=\"string\">'standardOut'</span>, <span class=\"string\">'standardError'</span></div><div class=\"line\">      outputs.upToDateWhen &#123; <span class=\"literal\">false</span> &#125;</div><div class=\"line\">      showStandardStreams = <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"代码存储\"><a href=\"#代码存储\" class=\"headerlink\" title=\"代码存储\"></a>代码存储</h4><blockquote>\n<p>如果是对应不同的flavor或者是build type，直接在test后面加上对应后缀(如对应名为<code>myFlavor</code>的单元测试代码，应该放在<code>src/testMyFlavor/java</code>下面)。</p>\n</blockquote>\n<p><code>src/test/java</code></p>\n<h4 id=\"Google官方推荐引用\"><a href=\"#Google官方推荐引用\" class=\"headerlink\" title=\"Google官方推荐引用\"></a>Google官方推荐引用</h4><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">    <span class=\"comment\">// Required -- JUnit 4 framework，用于单元测试，google官方推荐</span></div><div class=\"line\">    testCompile <span class=\"string\">'junit:junit:4.12'</span></div><div class=\"line\">    <span class=\"comment\">// Optional -- Mockito framework，用于模拟架构，google官方推荐</span></div><div class=\"line\">    testCompile <span class=\"string\">'org.mockito:mockito-core:1.10.19'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"JUnit\"><a href=\"#JUnit\" class=\"headerlink\" title=\"JUnit\"></a>JUnit</h4><h5 id=\"Annotation\"><a href=\"#Annotation\" class=\"headerlink\" title=\"Annotation\"></a>Annotation</h5><table>\n<thead>\n<tr>\n<th>Annotation</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>@Test public void method()</code></td>\n<td>定义所在方法为<code>单元测试方法</code></td>\n</tr>\n<tr>\n<td><code>@Test (expected = Exception.class)</code></td>\n<td>如果所在方法没有抛出<code>Annotation</code>中的<code>Exception.class</code>-&gt;失败</td>\n</tr>\n<tr>\n<td><code>@Test(timeout=100)</code></td>\n<td>如果方法耗时超过<code>100</code>毫秒-&gt;失败</td>\n</tr>\n<tr>\n<td><code>@Test(expected=Exception.class)</code></td>\n<td>如果方法抛了Exception.class类型的异常-&gt;通过</td>\n</tr>\n<tr>\n<td><code>@Before public void method()</code></td>\n<td>这个方法在每个测试之前执行，用于准备测试环境(如: 初始化类，读输入流等)</td>\n</tr>\n<tr>\n<td><code>@After public void method()</code></td>\n<td>这个方法在每个测试之后执行，用于清理测试环境数据</td>\n</tr>\n<tr>\n<td><code>BeforeClass public static void method()</code></td>\n<td>这个方法在所有测试开始之前执行一次，用于做一些耗时的初始化工作(如: 连接数据库)</td>\n</tr>\n<tr>\n<td><code>AfterClass public static void method()</code></td>\n<td>这个方法在所有测试结束之后执行一次，用于清理数据(如: 断开数据连接)</td>\n</tr>\n<tr>\n<td><code>@Ignore</code>或者<code>@Ignore(&quot;Why disabled&quot;)</code></td>\n<td>忽略当前测试方法，一般用于测试方法还没有准备好，或者太耗时之类的</td>\n</tr>\n<tr>\n<td><code>@FixMethodOrder(MethodSorters.NAME_ASCENDING) public class TestClass{}</code></td>\n<td>使得该测试方法中的所有测试都按照方法中的字母顺序测试</td>\n</tr>\n<tr>\n<td><code>Assume.assumeFalse(boolean condition)</code></td>\n<td>如果满足<code>condition</code>，就不执行对应方法</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"2-模拟测试\"><a href=\"#2-模拟测试\" class=\"headerlink\" title=\"2. 模拟测试\"></a>2. 模拟测试</h3><blockquote>\n<p>需要运行在Android设备或者虚拟机上的测试。</p>\n<p>主要用于测试: 单元(Android SDK层引用关系的相关的单元测试)、UI、应用组件集成测试(Service、Content Provider等)。</p>\n</blockquote>\n<p><code>./gradlew connectedAndroidTest</code></p>\n<h4 id=\"代码存储-1\"><a href=\"#代码存储-1\" class=\"headerlink\" title=\"代码存储:\"></a>代码存储:</h4><p><code>src/androidTest/java</code></p>\n<h4 id=\"Google官方推荐引用-1\"><a href=\"#Google官方推荐引用-1\" class=\"headerlink\" title=\"Google官方推荐引用\"></a>Google官方推荐引用</h4><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">    androidTestCompile <span class=\"string\">'com.android.support:support-annotations:23.0.1'</span></div><div class=\"line\">    androidTestCompile <span class=\"string\">'com.android.support.test:runner:0.4.1'</span></div><div class=\"line\">    androidTestCompile <span class=\"string\">'com.android.support.test:rules:0.4.1'</span></div><div class=\"line\">    <span class=\"comment\">// Optional -- Hamcrest library</span></div><div class=\"line\">    androidTestCompile <span class=\"string\">'org.hamcrest:hamcrest-library:1.3'</span></div><div class=\"line\">    <span class=\"comment\">// Optional -- UI testing with Espresso</span></div><div class=\"line\">    androidTestCompile <span class=\"string\">'com.android.support.test.espresso:espresso-core:2.2.1'</span></div><div class=\"line\">    <span class=\"comment\">// Optional -- UI testing with UI Automator</span></div><div class=\"line\">    androidTestCompile <span class=\"string\">'com.android.support.test.uiautomator:uiautomator-v18:2.1.1'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"常见的UI测试\"><a href=\"#常见的UI测试\" class=\"headerlink\" title=\"常见的UI测试\"></a>常见的UI测试</h4><blockquote>\n<p>需要模拟Android系统环境。</p>\n</blockquote>\n<h5 id=\"主要三点\"><a href=\"#主要三点\" class=\"headerlink\" title=\"主要三点:\"></a>主要三点:</h5><ol>\n<li>UI加载好后展示的信息是否正确。</li>\n<li>在用户某个操作后UI信息是否展示正确。</li>\n<li>展示正确的页面供用户操作。</li>\n</ol>\n<h4 id=\"Espresso\"><a href=\"#Espresso\" class=\"headerlink\" title=\"Espresso\"></a>Espresso</h4><blockquote>\n<p>谷歌官方提供用于UI交互测试</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> android.support.test.espresso.Espresso.onView;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> android.support.test.espresso.action.ViewActions.click;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> android.support.test.espresso.assertion.ViewAssertions.matches;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> android.support.test.espresso.matcher.ViewMatchers.isDisplayed;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> android.support.test.espresso.matcher.ViewMatchers.withId;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 对于Id为R.id.my_view的View: 触发点击，检测是否显示</span></div><div class=\"line\">onView(withId(R.id.my_view)).perform(click())               </div><div class=\"line\">                            .check(matches(isDisplayed()));</div><div class=\"line\"><span class=\"comment\">// 对于文本打头是\"ABC\"的View: 检测是否没有Enable</span></div><div class=\"line\">onView(withText(startsWith(<span class=\"string\">\"ABC\"</span>))).check(matches(not(isEnabled()));</div><div class=\"line\"><span class=\"comment\">// 按返回键</span></div><div class=\"line\">pressBack();</div><div class=\"line\"><span class=\"comment\">// 对于Id为R.id.button的View: 检测内容是否是\"Start new activity\"</span></div><div class=\"line\">onView(withId(R.id.button)).check(matches(withText((<span class=\"string\">\"Start new activity\"</span>))));</div><div class=\"line\"><span class=\"comment\">// 对于Id为R.id.viewId的View: 检测内容是否不包含\"YYZZ\"</span></div><div class=\"line\">onView(withId(R.id.viewId)).check(matches(withText(not(containsString(<span class=\"string\">\"YYZZ\"</span>)))));</div><div class=\"line\"><span class=\"comment\">// 对于Id为R.id.inputField的View: 输入\"NewText\"，然后关闭软键盘</span></div><div class=\"line\">onView(withId(R.id.inputField)).perform(typeText(<span class=\"string\">\"NewText\"</span>), closeSoftKeyboard());</div><div class=\"line\"><span class=\"comment\">// 对于Id为R.id.inputField的View: 清除内容</span></div><div class=\"line\">onView(withId(R.id.inputField)).perform(clearText());</div></pre></td></tr></table></figure>\n<h5 id=\"启动一个打开Activity的Intent\"><a href=\"#启动一个打开Activity的Intent\" class=\"headerlink\" title=\"启动一个打开Activity的Intent\"></a>启动一个打开<code>Activity</code>的<code>Intent</code></h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RunWith</span>(AndroidJUnit4.class)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecondActivityTest</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Rule</span></div><div class=\"line\">    <span class=\"keyword\">public</span> ActivityTestRule&lt;SecondActivity&gt; rule =</div><div class=\"line\">            <span class=\"keyword\">new</span> ActivityTestRule(SecondActivity.class, <span class=\"keyword\">true</span>,</div><div class=\"line\">                                  <span class=\"comment\">// 这个参数为false，不让SecondActivity自动启动</span></div><div class=\"line\">                                  <span class=\"comment\">// 如果为true，将会在所有@Before之前启动，在最后一个@After之后关闭</span></div><div class=\"line\">                                  <span class=\"keyword\">false</span>);</div><div class=\"line\">    <span class=\"meta\">@Test</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">demonstrateIntentPrep</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Intent intent = <span class=\"keyword\">new</span> Intent();</div><div class=\"line\">        intent.putExtra(<span class=\"string\">\"EXTRA\"</span>, <span class=\"string\">\"Test\"</span>);</div><div class=\"line\">        <span class=\"comment\">// 启动SecondActivity并传入intent</span></div><div class=\"line\">        rule.launchActivity(intent);</div><div class=\"line\">        <span class=\"comment\">// 对于Id为R.id.display的View: 检测内容是否是\"Text\"</span></div><div class=\"line\">        onView(withId(R.id.display)).check(matches(withText(<span class=\"string\">\"Test\"</span>)));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"异步交互\"><a href=\"#异步交互\" class=\"headerlink\" title=\"异步交互\"></a>异步交互</h5><p>建议关闭设备中”设置-&gt;开发者选项中”的动画，因为这些动画可能会是的Espresso在检测异步任务的时候产生混淆: 窗口动画缩放(Window animation scale)、过渡动画缩放(Transition animation scale)、动画程序时长缩放(Animator duration scale)。</p>\n<blockquote>\n<p>针对<code>AsyncTask</code>，在测试的时候，如触发点击事件以后抛了一个<code>AsyncTask</code>任务，在测试的时候直接<code>onView(withId(R.id.update)).perform(click())</code>，然后直接进行检测，此时的检测就是在<code>AsyncTask#onPostExecute</code>之后。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 通过实现IdlingResource，block住当非空闲的时候，当空闲时进行检测，非空闲的这段时间处理异步事情</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IntentServiceIdlingResource</span> <span class=\"keyword\">implements</span> <span class=\"title\">IdlingResource</span> </span>&#123;</div><div class=\"line\">    ResourceCallback resourceCallback;</div><div class=\"line\">    <span class=\"keyword\">private</span> Context context;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">IntentServiceIdlingResource</span><span class=\"params\">(Context context)</span> </span>&#123; <span class=\"keyword\">this</span>.context = context; &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> IntentServiceIdlingResource.class.getName(); &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerIdleTransitionCallback</span><span class=\"params\">( ResourceCallback resourceCallback)</span> </span>&#123; <span class=\"keyword\">this</span>.resourceCallback = resourceCallback; &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isIdleNow</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// 是否是空闲</span></div><div class=\"line\">      <span class=\"comment\">// 如果IntentService 没有在运行，就说明异步任务结束，IntentService特质就是启动以后处理完Intent中的事务，理解关闭自己</span></div><div class=\"line\">        <span class=\"keyword\">boolean</span> idle = !isIntentServiceRunning();</div><div class=\"line\">        <span class=\"keyword\">if</span> (idle &amp;&amp; resourceCallback != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">          <span class=\"comment\">// 回调告知异步任务结束</span></div><div class=\"line\">            resourceCallback.onTransitionToIdle();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> idle;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isIntentServiceRunning</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        ActivityManager manager = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);</div><div class=\"line\">        <span class=\"comment\">// Get all running services</span></div><div class=\"line\">        List&lt;ActivityManager.RunningServiceInfo&gt; runningServices = manager.getRunningServices(Integer.MAX_VALUE);</div><div class=\"line\">        <span class=\"comment\">// check if our is running</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (ActivityManager.RunningServiceInfo info : runningServices) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (MyIntentService.class.getName().equals(info.service.getClassName())) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用IntentServiceIdlingResource来测试，MyIntentService服务启动结束这个异步事务，之后的结果。</span></div><div class=\"line\"><span class=\"meta\">@RunWith</span>(AndroidJUnit4.class)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IntegrationTest</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Rule</span></div><div class=\"line\">    <span class=\"keyword\">public</span> ActivityTestRule rule = <span class=\"keyword\">new</span> ActivityTestRule(MainActivity.class);</div><div class=\"line\">    IntentServiceIdlingResource idlingResource;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Before</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Instrumentation instrumentation = InstrumentationRegistry.getInstrumentation();</div><div class=\"line\">        Context ctx = instrumentation.getTargetContext();</div><div class=\"line\">        idlingResource = <span class=\"keyword\">new</span> IntentServiceIdlingResource(ctx);</div><div class=\"line\">        <span class=\"comment\">// 注册这个异步监听</span></div><div class=\"line\">        Espresso.registerIdlingResources(idlingResource);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@After</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 取消注册这个异步监听</span></div><div class=\"line\">        Espresso.unregisterIdlingResources(idlingResource);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Test</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">runSequence</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// MainActivity中点击R.id.action_settings这个View的时候，会启动MyIntentService</span></div><div class=\"line\">        onView(withId(R.id.action_settings)).perform(click());</div><div class=\"line\">        <span class=\"comment\">// 这时候IntentServiceIdlingResource#isIdleNow会返回false，因为MyIntentService服务启动了</span></div><div class=\"line\">        <span class=\"comment\">// 这个情况下，这里会block住.............</span></div><div class=\"line\">        <span class=\"comment\">// 直到IntentServiceIdlingResource#isIdleNow返回true，并且回调了IntentServiceIdlingResource#onTransitionToIdle</span></div><div class=\"line\">        <span class=\"comment\">// 这个情况下，继续执行，这时我们就可以测试异步结束以后的情况了。</span></div><div class=\"line\">        onView(withText(<span class=\"string\">\"Broadcast\"</span>)).check(matches(notNullValue()));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"自定义匹配器\"><a href=\"#自定义匹配器\" class=\"headerlink\" title=\"自定义匹配器\"></a>自定义匹配器</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 定义</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Matcher&lt;View&gt; <span class=\"title\">withItemHint</span><span class=\"params\">(String itemHintText)</span> </span>&#123;</div><div class=\"line\">  checkArgument(!(itemHintText.equals(<span class=\"keyword\">null</span>)));</div><div class=\"line\">  <span class=\"keyword\">return</span> withItemHint(is(itemHintText));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Matcher&lt;View&gt; <span class=\"title\">withItemHint</span><span class=\"params\">(<span class=\"keyword\">final</span> Matcher&lt;String&gt; matcherText)</span> </span>&#123;</div><div class=\"line\">  checkNotNull(matcherText);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BoundedMatcher&lt;View, EditText&gt;(EditText.class) &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">describeTo</span><span class=\"params\">(Description description)</span> </span>&#123;</div><div class=\"line\">      description.appendText(<span class=\"string\">\"with item hint: \"</span> + matcherText);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">matchesSafely</span><span class=\"params\">(EditText editTextField)</span> </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// 取出hint，然后比对下是否相同</span></div><div class=\"line\">      <span class=\"keyword\">return</span> matcherText.matches(editTextField.getHint().toString());</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用</span></div><div class=\"line\">onView(withItemHint(<span class=\"string\">\"test\"</span>)).check(matches(isDisplayed()));</div></pre></td></tr></table></figure>\n<h2 id=\"III-拓展工具\"><a href=\"#III-拓展工具\" class=\"headerlink\" title=\"III. 拓展工具\"></a>III. 拓展工具</h2><h4 id=\"1-AssertJ-Android\"><a href=\"#1-AssertJ-Android\" class=\"headerlink\" title=\"1. AssertJ Android\"></a>1. AssertJ Android</h4><blockquote>\n<p><a href=\"https://github.com/square/assertj-android\" target=\"_blank\" rel=\"external\">square/assertj-android</a><br>极大的提高可读性。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.assertj.core.api.Assertions.*;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 断言: view是GONE的</span></div><div class=\"line\">assertThat(view).isGone();</div><div class=\"line\"></div><div class=\"line\">MyClass test = <span class=\"keyword\">new</span> MyClass(<span class=\"string\">\"Frodo\"</span>);</div><div class=\"line\">MyClass test1 = <span class=\"keyword\">new</span> MyClass(<span class=\"string\">\"Sauron\"</span>);</div><div class=\"line\">MyClass test2 = <span class=\"keyword\">new</span> MyClass(<span class=\"string\">\"Jacks\"</span>);</div><div class=\"line\"></div><div class=\"line\">List&lt;MyClass&gt; testList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">testList.add(test);</div><div class=\"line\">testList.add(test1);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 断言: test.getName()等于\"Frodo\"</span></div><div class=\"line\">assertThat(test.getName()).isEqualTo(<span class=\"string\">\"Frodo\"</span>);</div><div class=\"line\"><span class=\"comment\">// 断言: test不等于test1并且在testList中</span></div><div class=\"line\">assertThat(test).isNotEqualTo(test1)</div><div class=\"line\">                 .isIn(testList);</div><div class=\"line\"><span class=\"comment\">// 断言: test.getName()的字符串，是由\"Fro\"打头，以\"do\"结尾，忽略大小写会等于\"frodo\"</span></div><div class=\"line\">assertThat(test.getName()).startsWith(<span class=\"string\">\"Fro\"</span>)</div><div class=\"line\">                            .endsWith(<span class=\"string\">\"do\"</span>)</div><div class=\"line\">                            .isEqualToIgnoringCase(<span class=\"string\">\"frodo\"</span>);</div><div class=\"line\"><span class=\"comment\">// 断言: testList有2个数据，包含test，test1，不包含test2</span></div><div class=\"line\">assertThat(list).hasSize(<span class=\"number\">2</span>)</div><div class=\"line\">                .contains(test, test1)</div><div class=\"line\">                .doesNotContain(test2);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 断言: 提取testList队列中所有数据中的成员变量名为name的变量，并且包含name为\"Frodo\"与\"Sauron\"</span></div><div class=\"line\"><span class=\"comment\">//      并且不包含name为\"Jacks\"</span></div><div class=\"line\">assertThat(testList).extracting(<span class=\"string\">\"name\"</span>)</div><div class=\"line\">                    .contains(<span class=\"string\">\"Frodo\"</span>, <span class=\"string\">\"Sauron\"</span>)</div><div class=\"line\">                    .doesNotContain(<span class=\"string\">\"Jacks\"</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"2-Hamcrest\"><a href=\"#2-Hamcrest\" class=\"headerlink\" title=\"2. Hamcrest\"></a>2. Hamcrest</h4><blockquote>\n<p><a href=\"https://github.com/hamcrest/JavaHamcrest\" target=\"_blank\" rel=\"external\">JavaHamcrest</a><br>通过已有的通配方法，快速的对代码条件进行测试<br><code>org.hamcrest:hamcrest-junit:(version)</code></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.hamcrest.MatcherAssert.assertThat;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.hamcrest.Matchers.is;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.hamcrest.Matchers.equalTo;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 断言: a等于b</span></div><div class=\"line\">assertThat(a, equalTo(b));</div><div class=\"line\">assertThat(a, is(equalTo(b)));</div><div class=\"line\">assertThat(a, is(b));</div><div class=\"line\"><span class=\"comment\">// 断言: a不等于b</span></div><div class=\"line\">assertThat(actual, is(not(equalTo(b))));</div><div class=\"line\"></div><div class=\"line\">List&lt;Integer&gt; list = Arrays.asList(<span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>);</div><div class=\"line\"><span class=\"comment\">// 断言: list有3个数据</span></div><div class=\"line\">assertThat(list, hasSize(<span class=\"number\">3</span>));</div><div class=\"line\"><span class=\"comment\">// 断言: list中有5,2,4，并且顺序也一致</span></div><div class=\"line\">assertThat(list, contains(<span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>));</div><div class=\"line\"><span class=\"comment\">// 断言: list中包含5,2,4</span></div><div class=\"line\">assertThat(list, containsInAnyOrder(<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>));</div><div class=\"line\"><span class=\"comment\">// 断言: list中的每一个数据都大于1</span></div><div class=\"line\">assertThat(list, everyItem(greaterThan(<span class=\"number\">1</span>)));</div><div class=\"line\"><span class=\"comment\">// 断言: fellowship中包含有成员变量\"race\"，并且其值不是ORC</span></div><div class=\"line\">assertThat(fellowship, everyItem(hasProperty(<span class=\"string\">\"race\"</span>, is(not((ORC))))));</div><div class=\"line\"><span class=\"comment\">// 断言: object1中与object2相同的成员变量都是相同的值</span></div><div class=\"line\">assertThat(object1, samePropertyValuesAs(object2));</div><div class=\"line\"></div><div class=\"line\">Integer[] ints = <span class=\"keyword\">new</span> Integer[] &#123; <span class=\"number\">7</span>, <span class=\"number\">5</span>, <span class=\"number\">12</span>, <span class=\"number\">16</span> &#125;;</div><div class=\"line\"><span class=\"comment\">// 断言: 数组中包含7,5,12,16</span></div><div class=\"line\">assertThat(ints, arrayContaining(<span class=\"number\">7</span>, <span class=\"number\">5</span>, <span class=\"number\">12</span>, <span class=\"number\">16</span>));</div></pre></td></tr></table></figure>\n<h5 id=\"几个主要的匹配器\"><a href=\"#几个主要的匹配器\" class=\"headerlink\" title=\"几个主要的匹配器:\"></a>几个主要的匹配器:</h5><table>\n<thead>\n<tr>\n<th>Mather</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>allOf</code></td>\n<td>所有都匹配</td>\n</tr>\n<tr>\n<td><code>anyOf</code></td>\n<td>任意一个匹配</td>\n</tr>\n<tr>\n<td><code>not</code></td>\n<td>不是</td>\n</tr>\n<tr>\n<td><code>equalTo</code></td>\n<td>对象等于</td>\n</tr>\n<tr>\n<td><code>is</code></td>\n<td>是</td>\n</tr>\n<tr>\n<td><code>hasToString</code></td>\n<td>包含<code>toString</code></td>\n</tr>\n<tr>\n<td><code>instanceOf</code>,<code>isCompatibleType</code></td>\n<td>类的类型是否匹配</td>\n</tr>\n<tr>\n<td><code>notNullValue</code>,<code>nullValue</code></td>\n<td>测试null</td>\n</tr>\n<tr>\n<td><code>sameInstance</code></td>\n<td>相同实例</td>\n</tr>\n<tr>\n<td><code>hasEntry</code>,<code>hasKey</code>,<code>hasValue</code></td>\n<td>测试<code>Map</code>中的<code>Entry</code>、<code>Key</code>、<code>Value</code></td>\n</tr>\n<tr>\n<td><code>hasItem</code>,<code>hasItems</code></td>\n<td>测试集合(<code>collection</code>)中包含元素</td>\n</tr>\n<tr>\n<td><code>hasItemInArray</code></td>\n<td>测试数组中包含元素</td>\n</tr>\n<tr>\n<td><code>closeTo</code></td>\n<td>测试浮点数是否接近指定值</td>\n</tr>\n<tr>\n<td><code>greaterThan</code>,<code>greaterThanOrEqualTo</code>,<code>lessThan</code>,<code>lessThanOrEqualTo</code></td>\n<td>数据对比</td>\n</tr>\n<tr>\n<td><code>equalToIgnoringCase</code></td>\n<td>忽略大小写字符串对比</td>\n</tr>\n<tr>\n<td><code>equalToIgnoringWhiteSpace</code></td>\n<td>忽略空格字符串对比</td>\n</tr>\n<tr>\n<td><code>containsString</code>,<code>endsWith</code>,<code>startsWith</code>,<code>isEmptyString</code>,<code>isEmptyOrNullString</code></td>\n<td>字符串匹配</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"自定义匹配器-1\"><a href=\"#自定义匹配器-1\" class=\"headerlink\" title=\"自定义匹配器\"></a>自定义匹配器</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 自定义</span></div><div class=\"line\"><span class=\"keyword\">import</span> org.hamcrest.Description;</div><div class=\"line\"><span class=\"keyword\">import</span> org.hamcrest.TypeSafeMatcher;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RegexMatcher</span> <span class=\"keyword\">extends</span> <span class=\"title\">TypeSafeMatcher</span>&lt;<span class=\"title\">String</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String regex;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RegexMatcher</span><span class=\"params\">(<span class=\"keyword\">final</span> String regex)</span> </span>&#123; <span class=\"keyword\">this</span>.regex = regex; &#125;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">describeTo</span><span class=\"params\">(<span class=\"keyword\">final</span> Description description)</span> </span>&#123; description.appendText(<span class=\"string\">\"matches regular expression=`\"</span> + regex + <span class=\"string\">\"`\"</span>); &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">matchesSafely</span><span class=\"params\">(<span class=\"keyword\">final</span> String string)</span> </span>&#123; <span class=\"keyword\">return</span> string.matches(regex); &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 上层调用的入口</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> RegexMatcher <span class=\"title\">matchesRegex</span><span class=\"params\">(<span class=\"keyword\">final</span> String regex)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RegexMatcher(regex);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用</span></div><div class=\"line\">String s = <span class=\"string\">\"aaabbbaaa\"</span>;</div><div class=\"line\">assertThat(s, RegexMatcher.matchesRegex(<span class=\"string\">\"a*b*a\"</span>));</div></pre></td></tr></table></figure>\n<h4 id=\"3-Mockito\"><a href=\"#3-Mockito\" class=\"headerlink\" title=\"3. Mockito\"></a>3. Mockito</h4><blockquote>\n<p><a href=\"https://code.google.com/archive/p/mockito/\" target=\"_blank\" rel=\"external\">Mockito</a><br>Mock对象，控制其返回值，监控其方法的调用。<br><code>org.mockito:mockito-all:(version)</code></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// import如相关类</span></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.mockito.Mockito.mock;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.mockito.Mockito.verify;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 创建一个Mock的对象</span></div><div class=\"line\"> MyClass test = mock(MyClass.class);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 当调用test.getUniqueId()的时候返回43</span></div><div class=\"line\">when(test.getUniqueId()).thenReturn(<span class=\"number\">43</span>);</div><div class=\"line\"><span class=\"comment\">// 当调用test.compareTo()传入任意的Int值都返回43</span></div><div class=\"line\">when(test.compareTo(anyInt())).thenReturn(<span class=\"number\">43</span>);</div><div class=\"line\"><span class=\"comment\">// 当调用test.compareTo()传入的是Target.class类型对象时返回43</span></div><div class=\"line\">when(test.compareTo(isA(Target.class))).thenReturn(<span class=\"number\">43</span>);</div><div class=\"line\"><span class=\"comment\">// 当调用test.close()的时候，抛IOException异常</span></div><div class=\"line\">doThrow(<span class=\"keyword\">new</span> IOException()).when(test).close();</div><div class=\"line\"><span class=\"comment\">// 当调用test.execute()的时候，什么都不做</span></div><div class=\"line\">doNothing().when(test).execute();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 验证是否调用了两次test.getUniqueId()</span></div><div class=\"line\">verify(test, times(<span class=\"number\">2</span>)).getUniqueId();</div><div class=\"line\"><span class=\"comment\">// 验证是否没有调用过test.getUniqueId()</span></div><div class=\"line\">verify(test, never()).getUniqueId();</div><div class=\"line\"><span class=\"comment\">// 验证是否至少调用过两次test.getUniqueId()</span></div><div class=\"line\">verify(test, atLeast(<span class=\"number\">2</span>)).getUniqueId();</div><div class=\"line\"><span class=\"comment\">// 验证是否最多调用过三次test.getUniqueId()</span></div><div class=\"line\">verify(test, atMost(<span class=\"number\">3</span>)).getUniqueId();</div><div class=\"line\"><span class=\"comment\">// 验证是否这样调用过:test.query(\"test string\")</span></div><div class=\"line\">verify(test).query(<span class=\"string\">\"test string\"</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 通过Mockito.spy() 封装List对象并返回将其mock的spy对象</span></div><div class=\"line\">List list = <span class=\"keyword\">new</span> LinkedList();</div><div class=\"line\">List spy = spy(list);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 指定spy.get(0)返回\"foo\"</span></div><div class=\"line\">doReturn(<span class=\"string\">\"foo\"</span>).when(spy).get(<span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">assertEquals(<span class=\"string\">\"foo\"</span>, spy.get(<span class=\"number\">0</span>));</div></pre></td></tr></table></figure>\n<h5 id=\"对访问方法时，传入参数进行快照\"><a href=\"#对访问方法时，传入参数进行快照\" class=\"headerlink\" title=\"对访问方法时，传入参数进行快照\"></a>对访问方法时，传入参数进行快照</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> org.mockito.ArgumentCaptor;</div><div class=\"line\"><span class=\"keyword\">import</span> org.mockito.Captor;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.junit.Assert.assertEquals;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Captor</span></div><div class=\"line\"><span class=\"keyword\">private</span> ArgumentCaptor&lt;Integer&gt; captor;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testCapture</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  MyClass test = mock(MyClass.class);</div><div class=\"line\"></div><div class=\"line\">  test.compareTo(<span class=\"number\">3</span>, <span class=\"number\">4</span>);</div><div class=\"line\">  verify(test).compareTo(captor.capture(), eq(<span class=\"number\">4</span>));</div><div class=\"line\"></div><div class=\"line\">  assertEquals(<span class=\"number\">3</span>, (<span class=\"keyword\">int</span>)captor.getValue());</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 需要特别注意，如果是可变数组(vargars)参数，如方法 test.doSomething(String... params)</span></div><div class=\"line\">  <span class=\"comment\">// 此时是使用ArgumentCaptor&lt;String&gt;，而非ArgumentCaptor&lt;String[]&gt;</span></div><div class=\"line\">  ArgumentCaptor&lt;String&gt; varArgs = ArgumentCaptor.forClass(String.class);</div><div class=\"line\">  test.doSomething(<span class=\"string\">\"param-1\"</span>, <span class=\"string\">\"param-2\"</span>);</div><div class=\"line\">  verify(test).doSomething(varArgs.capture());</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 这里直接使用getAllValues()而非getValue()，来获取可变数组参数的所有传入参数</span></div><div class=\"line\">  assertThat(varArgs.getAllValues()).contains(<span class=\"string\">\"param-1\"</span>, <span class=\"string\">\"param-2\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"对于静态的方法的Mock\"><a href=\"#对于静态的方法的Mock\" class=\"headerlink\" title=\"对于静态的方法的Mock:\"></a>对于静态的方法的Mock:</h5><p>可以使用 <a href=\"https://github.com/jayway/powermock/wiki/MockitoUsage\" target=\"_blank\" rel=\"external\">PowerMock</a>:</p>\n<blockquote>\n<p><code>org.powermock:powermock-api-mockito:(version)</code> &amp; <code>org.powermock:powermock-module-junit4:(version)</code>(For <code>PowerMockRunner.class</code>)</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@RunWith</span>(PowerMockRunner.class)</div><div class=\"line\"><span class=\"meta\">@PrepareForTest</span>(&#123;StaticClass1.class, StaticClass2.class&#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyTest</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Test</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSomething</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// mock完静态类以后，默认所有的方法都不做任何事情</span></div><div class=\"line\">    mockStatic(StaticClass1.class);</div><div class=\"line\">    when(StaticClass1.getStaticMethod()).andReturn(<span class=\"string\">\"anything\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 验证是否StaticClass1.getStaticMethod()这个方法被调用了一次</span></div><div class=\"line\">    verifyStatic(time(<span class=\"number\">1</span>));</div><div class=\"line\">    StaticClass1.getStaticMethod();</div><div class=\"line\"></div><div class=\"line\">    when(StaticClass1.getStaticMethod()).andReturn(<span class=\"string\">\"what ever\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 验证是否StaticClass2.getStaticMethod()这个方法被至少调用了一次</span></div><div class=\"line\">    verifyStatic(atLeastOnce());</div><div class=\"line\">    StaticClass2.getStaticMethod();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 通过任何参数创建File的实力，都直接返回fileInstance对象</span></div><div class=\"line\">    whenNew(File.class).withAnyArguments().thenReturn(fileInstance);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>或者是封装为非静态，然后用Mockito:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FooWraper</span></span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">someMethod</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    Foo.someStaticMethod();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"4-Robolectric\"><a href=\"#4-Robolectric\" class=\"headerlink\" title=\"4. Robolectric\"></a>4. Robolectric</h4><blockquote>\n<p><a href=\"http://robolectric.org/\" target=\"_blank\" rel=\"external\">Robolectric</a><br>让模拟测试直接在开发机上完成，而不需要在Android系统上。所有需要使用到系统架构库的，如(<code>Handler</code>、<code>HandlerThread</code>)都需要使用Robolectric，或者进行模拟测试。</p>\n</blockquote>\n<p>主要是解决模拟测试中耗时的缺陷，模拟测试需要安装以及跑在Android系统上，也就是需要在Android虚拟机或者设备上面，所以十分的耗时。基本上每次来来回回都需要几分钟时间。针对这类问题，业界其实已经有了一个现成的解决方案: Pivotal实验室推出的<a href=\"http://robolectric.org/\" target=\"_blank\" rel=\"external\">Robolectric</a>。通过使用Robolectrict模拟Android系统核心库的<code>Shadow Classes</code>的方式，我们可以像写本地测试一样写这类测试，并且直接运行在工作环境的JVM上，十分方便。</p>\n<h4 id=\"5-Robotium\"><a href=\"#5-Robotium\" class=\"headerlink\" title=\"5. Robotium\"></a>5. Robotium</h4><blockquote>\n<p><a href=\"https://github.com/robotiumtech/robotium\" target=\"_blank\" rel=\"external\">RobotiumTech/robotium</a><br>(Integration Tests)模拟用户操作，事件流测试。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@RunWith</span>(RobolectricTestRunner.class)</div><div class=\"line\"><span class=\"meta\">@Config</span>(constants = BuildConfig.class)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyActivityTest</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Test</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomethingTests</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 获取Application对象</span></div><div class=\"line\">    Application application = RuntimeEnvironment.application;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 启动WelcomeActivity</span></div><div class=\"line\">    WelcomeActivity activity = Robolectric.setupActivity(WelcomeActivity.class);</div><div class=\"line\">    <span class=\"comment\">// 触发activity中Id为R.id.login的View的click事件</span></div><div class=\"line\">    activity.findViewById(R.id.login).performClick();</div><div class=\"line\"></div><div class=\"line\">    Intent expectedIntent = <span class=\"keyword\">new</span> Intent(activity, LoginActivity.class);</div><div class=\"line\">    <span class=\"comment\">// 在activity之后，启动的Activity是否是LoginActivity</span></div><div class=\"line\">    assertThat(shadowOf(activity).getNextStartedActivity()).isEqualTo(expectedIntent);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>通过模拟用户的操作的行为事件流进行测试，这类测试无法避免需要在虚拟机或者设备上面运行的。是一些用户操作流程与视觉显示强相关的很好的选择。</p>\n<h4 id=\"6-Test-Butler\"><a href=\"#6-Test-Butler\" class=\"headerlink\" title=\"6. Test Butler\"></a>6. Test Butler</h4><blockquote>\n<p><a href=\"https://github.com/linkedin/test-butler\" target=\"_blank\" rel=\"external\">linkedin/test-butler</a><br>避免设备/模拟器系统或者环境的错误，导致测试的失败。</p>\n</blockquote>\n<p>通常我们在进行UI测试的时候，会遇到由于模拟器或者设备的错误，如系统的crash、ANR、或是未预期的Wifi、CPU罢工，或者是锁屏，这些外再环境因素导致测试不过。Test-Butler引入就是避免这些环境因素导致UI测试不过。</p>\n<blockquote>\n<p>该库被<a href=\"https://www.youtube.com/watch?v=aHcmsK9jfGU\" target=\"_blank\" rel=\"external\">谷歌官方推荐过</a>，并且收到谷歌工程师的Review。</p>\n</blockquote>\n<h2 id=\"IV-拓展思路\"><a href=\"#IV-拓展思路\" class=\"headerlink\" title=\"IV. 拓展思路\"></a>IV. 拓展思路</h2><h4 id=\"1-Android-Robots\"><a href=\"#1-Android-Robots\" class=\"headerlink\" title=\"1. Android Robots\"></a>1. Android Robots</h4><blockquote>\n<p><a href=\"https://realm.io/news/kau-jake-wharton-testing-robots/\" target=\"_blank\" rel=\"external\">Instrumentation Testing Robots - Jake Wharton</a></p>\n</blockquote>\n<p>假如我们需要测试: 发送 $42 到 “foo@bar.com”，然后验证是否成功。</p>\n<h5 id=\"通常的做法\"><a href=\"#通常的做法\" class=\"headerlink\" title=\"通常的做法\"></a>通常的做法</h5><p><img src=\"/img/android-test_1.png\" alt=\"\"></p>\n<p><img src=\"/img/android-test_2.png\" alt=\"\"></p>\n<h5 id=\"Robot思想\"><a href=\"#Robot思想\" class=\"headerlink\" title=\"Robot思想\"></a>Robot思想</h5><p>在写真正的UI测试的时候，只需要关注要测试什么，而不需要关注需要怎么测试，换句话说就是让测试逻辑与View或Presenter解耦，而与数据产生关系。</p>\n<p>首先通过封装一个Robot去处理How的部分:</p>\n<p><img src=\"/img/android-test_3.png\" alt=\"\"></p>\n<p>然后在写测试的时候，只关注需要测试什么:</p>\n<p><img src=\"/img/android-test_4.png\" alt=\"\"></p>\n<p>最终的思想原理</p>\n<p><img src=\"/img/android-test_5.png\" alt=\"\"></p>\n<hr>\n<ul>\n<li>文章创建时间: 2016-5-15，<a href=\"https://github.com/Jacksgong/Blog/commits/master/source/_posts/android_test.md\" target=\"_blank\" rel=\"external\">本文迭代日志</a>。</li>\n</ul>\n<hr>\n<p>本文已经发布到JackBlog公众号，可请直接访问: <a href=\"https://mp.weixin.qq.com/s?__biz=MzIyMjQxMzAzOA==&amp;mid=2247483680&amp;idx=1&amp;sn=a81f0b86696f243bf32c032fc7b09574\" target=\"_blank\" rel=\"external\">Android单元测试与模拟测试 - JacksBlog</a></p>\n<hr>\n<ul>\n<li><a href=\"http://developer.android.com/training/testing/unit-testing/local-unit-tests.html\" target=\"_blank\" rel=\"external\">Building Local Unit Tests</a></li>\n<li><a href=\"https://www.bignerdranch.com/blog/testing-the-android-way/\" target=\"_blank\" rel=\"external\">Testing the Android way</a></li>\n<li><a href=\"https://github.com/JakeWharton/timber/blob/master/timber/src/test/java/timber/log/TimberTest.java\" target=\"_blank\" rel=\"external\">timber中的单元测试实例</a></li>\n<li><a href=\"https://github.com/JakeWharton/timber/blob/master/timber/build.gradle\" target=\"_blank\" rel=\"external\">timber/build.gradle</a></li>\n<li><a href=\"http://stackoverflow.com/questions/30675748/a-bdd-rspec-like-testing-library-for-java\" target=\"_blank\" rel=\"external\">A BDD (RSpec-like) testing library for Java</a></li>\n<li><a href=\"https://engineering.linkedin.com/blog/2016/08/introducing-and-open-sourcing-test-butler--reliable-android-test\" target=\"_blank\" rel=\"external\">Open Sourcing Test Butler</a></li>\n<li><a href=\"http://www.vogella.com/tutorials/JUnit/article.html\" target=\"_blank\" rel=\"external\">Unit Testing with JUnit -Tutorial</a></li>\n<li><a href=\"http://www.vogella.com/tutorials/Mockito/article.html\" target=\"_blank\" rel=\"external\">Unit tests with Mockito - Tutorial</a></li>\n<li><a href=\"http://www.vogella.com/tutorials/Hamcrest/article.html\" target=\"_blank\" rel=\"external\">Using Hamcrest for testing - Tutorial</a></li>\n<li><a href=\"http://www.vogella.com/tutorials/AssertJ/article.html\" target=\"_blank\" rel=\"external\">Testing with AssertJ assertions - Tutorial</a></li>\n<li><a href=\"http://www.vogella.com/tutorials/AndroidTestingEspresso/article.html\" target=\"_blank\" rel=\"external\">Android user interface testing with Espresso - Tutorial</a></li>\n<li><a href=\"https://github.com/chiuki/espresso-samples\" target=\"_blank\" rel=\"external\">chiuki/espresso-samples</a></li>\n<li><a href=\"http://stackoverflow.com/questions/10327612/mock-static-methods-from-multiple-class-using-powermock\" target=\"_blank\" rel=\"external\">Mock static methods from multiple class using PowerMock</a></li>\n<li><a href=\"https://github.com/rest-assured/rest-assured\" target=\"_blank\" rel=\"external\">rest-assured/rest-assured</a></li>\n<li><a href=\"https://github.com/skyscreamer/JSONassert\" target=\"_blank\" rel=\"external\">skyscreamer/JSONassert</a></li>\n<li><a href=\"https://medium.com/@cesarmcferreira/mastering-the-terminal-side-of-android-development-e7520466c521#.e5vt3p3vl\" target=\"_blank\" rel=\"external\">Mastering the Terminal side of Android development</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>测试驱动式编程(Test-Driven-Development)在RoR中已经是非常普遍的开发模式，是一种十分可靠、优秀的编程思想，可是在Android领域中这块还没有普及，今天主要聊聊Android中的单元测试与模拟测试及其常用的一些库。</p>\n</blockquote>","more":"<h2 id=\"I-测试与基本规范\"><a href=\"#I-测试与基本规范\" class=\"headerlink\" title=\"I. 测试与基本规范\"></a>I. 测试与基本规范</h2><h4 id=\"1-为什么需要测试\"><a href=\"#1-为什么需要测试\" class=\"headerlink\" title=\"1. 为什么需要测试?\"></a>1. 为什么需要测试?</h4><ul>\n<li>为了稳定性，能够明确的了解是否正确的完成开发。</li>\n<li>更加易于维护，能够在修改代码后保证功能不被破坏。</li>\n<li>集成一些工具，规范开发规范，使得代码更加稳定( 如通过 phabricator differential 发diff时提交需要执行的单元测试，在开发流程上就可以保证远端代码的稳定性)。</li>\n</ul>\n<h4 id=\"2-测什么\"><a href=\"#2-测什么\" class=\"headerlink\" title=\"2. 测什么?\"></a>2. 测什么?</h4><ul>\n<li>一般单元测试:<ul>\n<li>列出想要测试覆盖的异常情况，进行验证。</li>\n<li>性能测试。</li>\n</ul>\n</li>\n<li>模拟测试: 根据需求，测试用户真正在使用过程中，界面的反馈与显示以及一些依赖系统架构的组件的应用测试。</li>\n</ul>\n<h4 id=\"3-需要注意\"><a href=\"#3-需要注意\" class=\"headerlink\" title=\"3. 需要注意\"></a>3. 需要注意</h4><ul>\n<li>考虑可读性，对于方法名使用表达能力强的方法名，对于测试范式可以考虑使用一种规范, 如 RSpec-style。方法名可以采用一种格式，如: <code>[测试的方法]_[测试的条件]_[符合预期的结果]</code>。</li>\n<li>不要使用逻辑流关键字(If/else、for、do/while、switch/case)，在一个测试方法中，如果需要有这些，拆分到单独的每个测试方法里。</li>\n<li>测试真正需要测试的内容，需要覆盖的情况，一般情况只考虑验证输出（如某操作后，显示什么，值是什么）。</li>\n<li>考虑耗时，Android Studio默认会输出耗时。</li>\n<li>不需要考虑测试<code>private</code>的方法，将<code>private</code>方法当做黑盒内部组件，测试对其引用的<code>public</code>方法即可；不考虑测试琐碎的代码，如<code>getter</code>或者<code>setter</code>。</li>\n<li>每个单元测试方法，应没有先后顺序；尽可能的解耦对于不同的测试方法，不应该存在Test A与Test B存在时序性的情况。</li>\n</ul>\n<h4 id=\"4-创建测试\"><a href=\"#4-创建测试\" class=\"headerlink\" title=\"4. 创建测试\"></a>4. 创建测试</h4><ul>\n<li>选择对应的类</li>\n<li>将光标停留在类名上</li>\n<li>按下<code>ALT + ENTER</code></li>\n<li>在弹出的弹窗中选择<code>Create Test</code></li>\n</ul>\n<h2 id=\"II-Android-Studio中的单元测试与模拟测试\"><a href=\"#II-Android-Studio中的单元测试与模拟测试\" class=\"headerlink\" title=\"II. Android Studio中的单元测试与模拟测试\"></a>II. Android Studio中的单元测试与模拟测试</h2><blockquote>\n<p>control + shift + R (Android Studio 默认执行单元测试快捷键)。</p>\n</blockquote>\n<h3 id=\"1-本地单元测试\"><a href=\"#1-本地单元测试\" class=\"headerlink\" title=\"1. 本地单元测试\"></a>1. 本地单元测试</h3><blockquote>\n<p>直接在开发机上面进行运行测试。<br>在没有依赖或者仅仅只需要简单的Android库依赖的情况下，有限考虑使用该类单元测试。</p>\n</blockquote>\n<p><code>./gradlew test</code></p>\n<p>通过添加以下脚本到对应module的<code>build.gradle</code>中，以便于在终端中也可以直接查看单元测试的各类测试信息:</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">android &#123;</div><div class=\"line\">  ...</div><div class=\"line\">  testOptions.unitTests.all &#123;</div><div class=\"line\">    testLogging &#123;</div><div class=\"line\">      events <span class=\"string\">'passed'</span>, <span class=\"string\">'skipped'</span>, <span class=\"string\">'failed'</span>, <span class=\"string\">'standardOut'</span>, <span class=\"string\">'standardError'</span></div><div class=\"line\">      outputs.upToDateWhen &#123; <span class=\"literal\">false</span> &#125;</div><div class=\"line\">      showStandardStreams = <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"代码存储\"><a href=\"#代码存储\" class=\"headerlink\" title=\"代码存储\"></a>代码存储</h4><blockquote>\n<p>如果是对应不同的flavor或者是build type，直接在test后面加上对应后缀(如对应名为<code>myFlavor</code>的单元测试代码，应该放在<code>src/testMyFlavor/java</code>下面)。</p>\n</blockquote>\n<p><code>src/test/java</code></p>\n<h4 id=\"Google官方推荐引用\"><a href=\"#Google官方推荐引用\" class=\"headerlink\" title=\"Google官方推荐引用\"></a>Google官方推荐引用</h4><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">    <span class=\"comment\">// Required -- JUnit 4 framework，用于单元测试，google官方推荐</span></div><div class=\"line\">    testCompile <span class=\"string\">'junit:junit:4.12'</span></div><div class=\"line\">    <span class=\"comment\">// Optional -- Mockito framework，用于模拟架构，google官方推荐</span></div><div class=\"line\">    testCompile <span class=\"string\">'org.mockito:mockito-core:1.10.19'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"JUnit\"><a href=\"#JUnit\" class=\"headerlink\" title=\"JUnit\"></a>JUnit</h4><h5 id=\"Annotation\"><a href=\"#Annotation\" class=\"headerlink\" title=\"Annotation\"></a>Annotation</h5><table>\n<thead>\n<tr>\n<th>Annotation</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>@Test public void method()</code></td>\n<td>定义所在方法为<code>单元测试方法</code></td>\n</tr>\n<tr>\n<td><code>@Test (expected = Exception.class)</code></td>\n<td>如果所在方法没有抛出<code>Annotation</code>中的<code>Exception.class</code>-&gt;失败</td>\n</tr>\n<tr>\n<td><code>@Test(timeout=100)</code></td>\n<td>如果方法耗时超过<code>100</code>毫秒-&gt;失败</td>\n</tr>\n<tr>\n<td><code>@Test(expected=Exception.class)</code></td>\n<td>如果方法抛了Exception.class类型的异常-&gt;通过</td>\n</tr>\n<tr>\n<td><code>@Before public void method()</code></td>\n<td>这个方法在每个测试之前执行，用于准备测试环境(如: 初始化类，读输入流等)</td>\n</tr>\n<tr>\n<td><code>@After public void method()</code></td>\n<td>这个方法在每个测试之后执行，用于清理测试环境数据</td>\n</tr>\n<tr>\n<td><code>BeforeClass public static void method()</code></td>\n<td>这个方法在所有测试开始之前执行一次，用于做一些耗时的初始化工作(如: 连接数据库)</td>\n</tr>\n<tr>\n<td><code>AfterClass public static void method()</code></td>\n<td>这个方法在所有测试结束之后执行一次，用于清理数据(如: 断开数据连接)</td>\n</tr>\n<tr>\n<td><code>@Ignore</code>或者<code>@Ignore(&quot;Why disabled&quot;)</code></td>\n<td>忽略当前测试方法，一般用于测试方法还没有准备好，或者太耗时之类的</td>\n</tr>\n<tr>\n<td><code>@FixMethodOrder(MethodSorters.NAME_ASCENDING) public class TestClass{}</code></td>\n<td>使得该测试方法中的所有测试都按照方法中的字母顺序测试</td>\n</tr>\n<tr>\n<td><code>Assume.assumeFalse(boolean condition)</code></td>\n<td>如果满足<code>condition</code>，就不执行对应方法</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"2-模拟测试\"><a href=\"#2-模拟测试\" class=\"headerlink\" title=\"2. 模拟测试\"></a>2. 模拟测试</h3><blockquote>\n<p>需要运行在Android设备或者虚拟机上的测试。</p>\n<p>主要用于测试: 单元(Android SDK层引用关系的相关的单元测试)、UI、应用组件集成测试(Service、Content Provider等)。</p>\n</blockquote>\n<p><code>./gradlew connectedAndroidTest</code></p>\n<h4 id=\"代码存储-1\"><a href=\"#代码存储-1\" class=\"headerlink\" title=\"代码存储:\"></a>代码存储:</h4><p><code>src/androidTest/java</code></p>\n<h4 id=\"Google官方推荐引用-1\"><a href=\"#Google官方推荐引用-1\" class=\"headerlink\" title=\"Google官方推荐引用\"></a>Google官方推荐引用</h4><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">    androidTestCompile <span class=\"string\">'com.android.support:support-annotations:23.0.1'</span></div><div class=\"line\">    androidTestCompile <span class=\"string\">'com.android.support.test:runner:0.4.1'</span></div><div class=\"line\">    androidTestCompile <span class=\"string\">'com.android.support.test:rules:0.4.1'</span></div><div class=\"line\">    <span class=\"comment\">// Optional -- Hamcrest library</span></div><div class=\"line\">    androidTestCompile <span class=\"string\">'org.hamcrest:hamcrest-library:1.3'</span></div><div class=\"line\">    <span class=\"comment\">// Optional -- UI testing with Espresso</span></div><div class=\"line\">    androidTestCompile <span class=\"string\">'com.android.support.test.espresso:espresso-core:2.2.1'</span></div><div class=\"line\">    <span class=\"comment\">// Optional -- UI testing with UI Automator</span></div><div class=\"line\">    androidTestCompile <span class=\"string\">'com.android.support.test.uiautomator:uiautomator-v18:2.1.1'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"常见的UI测试\"><a href=\"#常见的UI测试\" class=\"headerlink\" title=\"常见的UI测试\"></a>常见的UI测试</h4><blockquote>\n<p>需要模拟Android系统环境。</p>\n</blockquote>\n<h5 id=\"主要三点\"><a href=\"#主要三点\" class=\"headerlink\" title=\"主要三点:\"></a>主要三点:</h5><ol>\n<li>UI加载好后展示的信息是否正确。</li>\n<li>在用户某个操作后UI信息是否展示正确。</li>\n<li>展示正确的页面供用户操作。</li>\n</ol>\n<h4 id=\"Espresso\"><a href=\"#Espresso\" class=\"headerlink\" title=\"Espresso\"></a>Espresso</h4><blockquote>\n<p>谷歌官方提供用于UI交互测试</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> android.support.test.espresso.Espresso.onView;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> android.support.test.espresso.action.ViewActions.click;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> android.support.test.espresso.assertion.ViewAssertions.matches;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> android.support.test.espresso.matcher.ViewMatchers.isDisplayed;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> android.support.test.espresso.matcher.ViewMatchers.withId;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 对于Id为R.id.my_view的View: 触发点击，检测是否显示</span></div><div class=\"line\">onView(withId(R.id.my_view)).perform(click())               </div><div class=\"line\">                            .check(matches(isDisplayed()));</div><div class=\"line\"><span class=\"comment\">// 对于文本打头是\"ABC\"的View: 检测是否没有Enable</span></div><div class=\"line\">onView(withText(startsWith(<span class=\"string\">\"ABC\"</span>))).check(matches(not(isEnabled()));</div><div class=\"line\"><span class=\"comment\">// 按返回键</span></div><div class=\"line\">pressBack();</div><div class=\"line\"><span class=\"comment\">// 对于Id为R.id.button的View: 检测内容是否是\"Start new activity\"</span></div><div class=\"line\">onView(withId(R.id.button)).check(matches(withText((<span class=\"string\">\"Start new activity\"</span>))));</div><div class=\"line\"><span class=\"comment\">// 对于Id为R.id.viewId的View: 检测内容是否不包含\"YYZZ\"</span></div><div class=\"line\">onView(withId(R.id.viewId)).check(matches(withText(not(containsString(<span class=\"string\">\"YYZZ\"</span>)))));</div><div class=\"line\"><span class=\"comment\">// 对于Id为R.id.inputField的View: 输入\"NewText\"，然后关闭软键盘</span></div><div class=\"line\">onView(withId(R.id.inputField)).perform(typeText(<span class=\"string\">\"NewText\"</span>), closeSoftKeyboard());</div><div class=\"line\"><span class=\"comment\">// 对于Id为R.id.inputField的View: 清除内容</span></div><div class=\"line\">onView(withId(R.id.inputField)).perform(clearText());</div></pre></td></tr></table></figure>\n<h5 id=\"启动一个打开Activity的Intent\"><a href=\"#启动一个打开Activity的Intent\" class=\"headerlink\" title=\"启动一个打开Activity的Intent\"></a>启动一个打开<code>Activity</code>的<code>Intent</code></h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RunWith</span>(AndroidJUnit4.class)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecondActivityTest</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Rule</span></div><div class=\"line\">    <span class=\"keyword\">public</span> ActivityTestRule&lt;SecondActivity&gt; rule =</div><div class=\"line\">            <span class=\"keyword\">new</span> ActivityTestRule(SecondActivity.class, <span class=\"keyword\">true</span>,</div><div class=\"line\">                                  <span class=\"comment\">// 这个参数为false，不让SecondActivity自动启动</span></div><div class=\"line\">                                  <span class=\"comment\">// 如果为true，将会在所有@Before之前启动，在最后一个@After之后关闭</span></div><div class=\"line\">                                  <span class=\"keyword\">false</span>);</div><div class=\"line\">    <span class=\"meta\">@Test</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">demonstrateIntentPrep</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Intent intent = <span class=\"keyword\">new</span> Intent();</div><div class=\"line\">        intent.putExtra(<span class=\"string\">\"EXTRA\"</span>, <span class=\"string\">\"Test\"</span>);</div><div class=\"line\">        <span class=\"comment\">// 启动SecondActivity并传入intent</span></div><div class=\"line\">        rule.launchActivity(intent);</div><div class=\"line\">        <span class=\"comment\">// 对于Id为R.id.display的View: 检测内容是否是\"Text\"</span></div><div class=\"line\">        onView(withId(R.id.display)).check(matches(withText(<span class=\"string\">\"Test\"</span>)));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"异步交互\"><a href=\"#异步交互\" class=\"headerlink\" title=\"异步交互\"></a>异步交互</h5><p>建议关闭设备中”设置-&gt;开发者选项中”的动画，因为这些动画可能会是的Espresso在检测异步任务的时候产生混淆: 窗口动画缩放(Window animation scale)、过渡动画缩放(Transition animation scale)、动画程序时长缩放(Animator duration scale)。</p>\n<blockquote>\n<p>针对<code>AsyncTask</code>，在测试的时候，如触发点击事件以后抛了一个<code>AsyncTask</code>任务，在测试的时候直接<code>onView(withId(R.id.update)).perform(click())</code>，然后直接进行检测，此时的检测就是在<code>AsyncTask#onPostExecute</code>之后。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 通过实现IdlingResource，block住当非空闲的时候，当空闲时进行检测，非空闲的这段时间处理异步事情</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IntentServiceIdlingResource</span> <span class=\"keyword\">implements</span> <span class=\"title\">IdlingResource</span> </span>&#123;</div><div class=\"line\">    ResourceCallback resourceCallback;</div><div class=\"line\">    <span class=\"keyword\">private</span> Context context;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">IntentServiceIdlingResource</span><span class=\"params\">(Context context)</span> </span>&#123; <span class=\"keyword\">this</span>.context = context; &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> IntentServiceIdlingResource.class.getName(); &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerIdleTransitionCallback</span><span class=\"params\">( ResourceCallback resourceCallback)</span> </span>&#123; <span class=\"keyword\">this</span>.resourceCallback = resourceCallback; &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isIdleNow</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// 是否是空闲</span></div><div class=\"line\">      <span class=\"comment\">// 如果IntentService 没有在运行，就说明异步任务结束，IntentService特质就是启动以后处理完Intent中的事务，理解关闭自己</span></div><div class=\"line\">        <span class=\"keyword\">boolean</span> idle = !isIntentServiceRunning();</div><div class=\"line\">        <span class=\"keyword\">if</span> (idle &amp;&amp; resourceCallback != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">          <span class=\"comment\">// 回调告知异步任务结束</span></div><div class=\"line\">            resourceCallback.onTransitionToIdle();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> idle;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isIntentServiceRunning</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        ActivityManager manager = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);</div><div class=\"line\">        <span class=\"comment\">// Get all running services</span></div><div class=\"line\">        List&lt;ActivityManager.RunningServiceInfo&gt; runningServices = manager.getRunningServices(Integer.MAX_VALUE);</div><div class=\"line\">        <span class=\"comment\">// check if our is running</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (ActivityManager.RunningServiceInfo info : runningServices) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (MyIntentService.class.getName().equals(info.service.getClassName())) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用IntentServiceIdlingResource来测试，MyIntentService服务启动结束这个异步事务，之后的结果。</span></div><div class=\"line\"><span class=\"meta\">@RunWith</span>(AndroidJUnit4.class)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IntegrationTest</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Rule</span></div><div class=\"line\">    <span class=\"keyword\">public</span> ActivityTestRule rule = <span class=\"keyword\">new</span> ActivityTestRule(MainActivity.class);</div><div class=\"line\">    IntentServiceIdlingResource idlingResource;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Before</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Instrumentation instrumentation = InstrumentationRegistry.getInstrumentation();</div><div class=\"line\">        Context ctx = instrumentation.getTargetContext();</div><div class=\"line\">        idlingResource = <span class=\"keyword\">new</span> IntentServiceIdlingResource(ctx);</div><div class=\"line\">        <span class=\"comment\">// 注册这个异步监听</span></div><div class=\"line\">        Espresso.registerIdlingResources(idlingResource);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@After</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 取消注册这个异步监听</span></div><div class=\"line\">        Espresso.unregisterIdlingResources(idlingResource);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Test</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">runSequence</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// MainActivity中点击R.id.action_settings这个View的时候，会启动MyIntentService</span></div><div class=\"line\">        onView(withId(R.id.action_settings)).perform(click());</div><div class=\"line\">        <span class=\"comment\">// 这时候IntentServiceIdlingResource#isIdleNow会返回false，因为MyIntentService服务启动了</span></div><div class=\"line\">        <span class=\"comment\">// 这个情况下，这里会block住.............</span></div><div class=\"line\">        <span class=\"comment\">// 直到IntentServiceIdlingResource#isIdleNow返回true，并且回调了IntentServiceIdlingResource#onTransitionToIdle</span></div><div class=\"line\">        <span class=\"comment\">// 这个情况下，继续执行，这时我们就可以测试异步结束以后的情况了。</span></div><div class=\"line\">        onView(withText(<span class=\"string\">\"Broadcast\"</span>)).check(matches(notNullValue()));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"自定义匹配器\"><a href=\"#自定义匹配器\" class=\"headerlink\" title=\"自定义匹配器\"></a>自定义匹配器</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 定义</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Matcher&lt;View&gt; <span class=\"title\">withItemHint</span><span class=\"params\">(String itemHintText)</span> </span>&#123;</div><div class=\"line\">  checkArgument(!(itemHintText.equals(<span class=\"keyword\">null</span>)));</div><div class=\"line\">  <span class=\"keyword\">return</span> withItemHint(is(itemHintText));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Matcher&lt;View&gt; <span class=\"title\">withItemHint</span><span class=\"params\">(<span class=\"keyword\">final</span> Matcher&lt;String&gt; matcherText)</span> </span>&#123;</div><div class=\"line\">  checkNotNull(matcherText);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BoundedMatcher&lt;View, EditText&gt;(EditText.class) &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">describeTo</span><span class=\"params\">(Description description)</span> </span>&#123;</div><div class=\"line\">      description.appendText(<span class=\"string\">\"with item hint: \"</span> + matcherText);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">matchesSafely</span><span class=\"params\">(EditText editTextField)</span> </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// 取出hint，然后比对下是否相同</span></div><div class=\"line\">      <span class=\"keyword\">return</span> matcherText.matches(editTextField.getHint().toString());</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用</span></div><div class=\"line\">onView(withItemHint(<span class=\"string\">\"test\"</span>)).check(matches(isDisplayed()));</div></pre></td></tr></table></figure>\n<h2 id=\"III-拓展工具\"><a href=\"#III-拓展工具\" class=\"headerlink\" title=\"III. 拓展工具\"></a>III. 拓展工具</h2><h4 id=\"1-AssertJ-Android\"><a href=\"#1-AssertJ-Android\" class=\"headerlink\" title=\"1. AssertJ Android\"></a>1. AssertJ Android</h4><blockquote>\n<p><a href=\"https://github.com/square/assertj-android\">square/assertj-android</a><br>极大的提高可读性。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.assertj.core.api.Assertions.*;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 断言: view是GONE的</span></div><div class=\"line\">assertThat(view).isGone();</div><div class=\"line\"></div><div class=\"line\">MyClass test = <span class=\"keyword\">new</span> MyClass(<span class=\"string\">\"Frodo\"</span>);</div><div class=\"line\">MyClass test1 = <span class=\"keyword\">new</span> MyClass(<span class=\"string\">\"Sauron\"</span>);</div><div class=\"line\">MyClass test2 = <span class=\"keyword\">new</span> MyClass(<span class=\"string\">\"Jacks\"</span>);</div><div class=\"line\"></div><div class=\"line\">List&lt;MyClass&gt; testList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">testList.add(test);</div><div class=\"line\">testList.add(test1);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 断言: test.getName()等于\"Frodo\"</span></div><div class=\"line\">assertThat(test.getName()).isEqualTo(<span class=\"string\">\"Frodo\"</span>);</div><div class=\"line\"><span class=\"comment\">// 断言: test不等于test1并且在testList中</span></div><div class=\"line\">assertThat(test).isNotEqualTo(test1)</div><div class=\"line\">                 .isIn(testList);</div><div class=\"line\"><span class=\"comment\">// 断言: test.getName()的字符串，是由\"Fro\"打头，以\"do\"结尾，忽略大小写会等于\"frodo\"</span></div><div class=\"line\">assertThat(test.getName()).startsWith(<span class=\"string\">\"Fro\"</span>)</div><div class=\"line\">                            .endsWith(<span class=\"string\">\"do\"</span>)</div><div class=\"line\">                            .isEqualToIgnoringCase(<span class=\"string\">\"frodo\"</span>);</div><div class=\"line\"><span class=\"comment\">// 断言: testList有2个数据，包含test，test1，不包含test2</span></div><div class=\"line\">assertThat(list).hasSize(<span class=\"number\">2</span>)</div><div class=\"line\">                .contains(test, test1)</div><div class=\"line\">                .doesNotContain(test2);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 断言: 提取testList队列中所有数据中的成员变量名为name的变量，并且包含name为\"Frodo\"与\"Sauron\"</span></div><div class=\"line\"><span class=\"comment\">//      并且不包含name为\"Jacks\"</span></div><div class=\"line\">assertThat(testList).extracting(<span class=\"string\">\"name\"</span>)</div><div class=\"line\">                    .contains(<span class=\"string\">\"Frodo\"</span>, <span class=\"string\">\"Sauron\"</span>)</div><div class=\"line\">                    .doesNotContain(<span class=\"string\">\"Jacks\"</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"2-Hamcrest\"><a href=\"#2-Hamcrest\" class=\"headerlink\" title=\"2. Hamcrest\"></a>2. Hamcrest</h4><blockquote>\n<p><a href=\"https://github.com/hamcrest/JavaHamcrest\">JavaHamcrest</a><br>通过已有的通配方法，快速的对代码条件进行测试<br><code>org.hamcrest:hamcrest-junit:(version)</code></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.hamcrest.MatcherAssert.assertThat;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.hamcrest.Matchers.is;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.hamcrest.Matchers.equalTo;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 断言: a等于b</span></div><div class=\"line\">assertThat(a, equalTo(b));</div><div class=\"line\">assertThat(a, is(equalTo(b)));</div><div class=\"line\">assertThat(a, is(b));</div><div class=\"line\"><span class=\"comment\">// 断言: a不等于b</span></div><div class=\"line\">assertThat(actual, is(not(equalTo(b))));</div><div class=\"line\"></div><div class=\"line\">List&lt;Integer&gt; list = Arrays.asList(<span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>);</div><div class=\"line\"><span class=\"comment\">// 断言: list有3个数据</span></div><div class=\"line\">assertThat(list, hasSize(<span class=\"number\">3</span>));</div><div class=\"line\"><span class=\"comment\">// 断言: list中有5,2,4，并且顺序也一致</span></div><div class=\"line\">assertThat(list, contains(<span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>));</div><div class=\"line\"><span class=\"comment\">// 断言: list中包含5,2,4</span></div><div class=\"line\">assertThat(list, containsInAnyOrder(<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>));</div><div class=\"line\"><span class=\"comment\">// 断言: list中的每一个数据都大于1</span></div><div class=\"line\">assertThat(list, everyItem(greaterThan(<span class=\"number\">1</span>)));</div><div class=\"line\"><span class=\"comment\">// 断言: fellowship中包含有成员变量\"race\"，并且其值不是ORC</span></div><div class=\"line\">assertThat(fellowship, everyItem(hasProperty(<span class=\"string\">\"race\"</span>, is(not((ORC))))));</div><div class=\"line\"><span class=\"comment\">// 断言: object1中与object2相同的成员变量都是相同的值</span></div><div class=\"line\">assertThat(object1, samePropertyValuesAs(object2));</div><div class=\"line\"></div><div class=\"line\">Integer[] ints = <span class=\"keyword\">new</span> Integer[] &#123; <span class=\"number\">7</span>, <span class=\"number\">5</span>, <span class=\"number\">12</span>, <span class=\"number\">16</span> &#125;;</div><div class=\"line\"><span class=\"comment\">// 断言: 数组中包含7,5,12,16</span></div><div class=\"line\">assertThat(ints, arrayContaining(<span class=\"number\">7</span>, <span class=\"number\">5</span>, <span class=\"number\">12</span>, <span class=\"number\">16</span>));</div></pre></td></tr></table></figure>\n<h5 id=\"几个主要的匹配器\"><a href=\"#几个主要的匹配器\" class=\"headerlink\" title=\"几个主要的匹配器:\"></a>几个主要的匹配器:</h5><table>\n<thead>\n<tr>\n<th>Mather</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>allOf</code></td>\n<td>所有都匹配</td>\n</tr>\n<tr>\n<td><code>anyOf</code></td>\n<td>任意一个匹配</td>\n</tr>\n<tr>\n<td><code>not</code></td>\n<td>不是</td>\n</tr>\n<tr>\n<td><code>equalTo</code></td>\n<td>对象等于</td>\n</tr>\n<tr>\n<td><code>is</code></td>\n<td>是</td>\n</tr>\n<tr>\n<td><code>hasToString</code></td>\n<td>包含<code>toString</code></td>\n</tr>\n<tr>\n<td><code>instanceOf</code>,<code>isCompatibleType</code></td>\n<td>类的类型是否匹配</td>\n</tr>\n<tr>\n<td><code>notNullValue</code>,<code>nullValue</code></td>\n<td>测试null</td>\n</tr>\n<tr>\n<td><code>sameInstance</code></td>\n<td>相同实例</td>\n</tr>\n<tr>\n<td><code>hasEntry</code>,<code>hasKey</code>,<code>hasValue</code></td>\n<td>测试<code>Map</code>中的<code>Entry</code>、<code>Key</code>、<code>Value</code></td>\n</tr>\n<tr>\n<td><code>hasItem</code>,<code>hasItems</code></td>\n<td>测试集合(<code>collection</code>)中包含元素</td>\n</tr>\n<tr>\n<td><code>hasItemInArray</code></td>\n<td>测试数组中包含元素</td>\n</tr>\n<tr>\n<td><code>closeTo</code></td>\n<td>测试浮点数是否接近指定值</td>\n</tr>\n<tr>\n<td><code>greaterThan</code>,<code>greaterThanOrEqualTo</code>,<code>lessThan</code>,<code>lessThanOrEqualTo</code></td>\n<td>数据对比</td>\n</tr>\n<tr>\n<td><code>equalToIgnoringCase</code></td>\n<td>忽略大小写字符串对比</td>\n</tr>\n<tr>\n<td><code>equalToIgnoringWhiteSpace</code></td>\n<td>忽略空格字符串对比</td>\n</tr>\n<tr>\n<td><code>containsString</code>,<code>endsWith</code>,<code>startsWith</code>,<code>isEmptyString</code>,<code>isEmptyOrNullString</code></td>\n<td>字符串匹配</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"自定义匹配器-1\"><a href=\"#自定义匹配器-1\" class=\"headerlink\" title=\"自定义匹配器\"></a>自定义匹配器</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 自定义</span></div><div class=\"line\"><span class=\"keyword\">import</span> org.hamcrest.Description;</div><div class=\"line\"><span class=\"keyword\">import</span> org.hamcrest.TypeSafeMatcher;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RegexMatcher</span> <span class=\"keyword\">extends</span> <span class=\"title\">TypeSafeMatcher</span>&lt;<span class=\"title\">String</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String regex;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RegexMatcher</span><span class=\"params\">(<span class=\"keyword\">final</span> String regex)</span> </span>&#123; <span class=\"keyword\">this</span>.regex = regex; &#125;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">describeTo</span><span class=\"params\">(<span class=\"keyword\">final</span> Description description)</span> </span>&#123; description.appendText(<span class=\"string\">\"matches regular expression=`\"</span> + regex + <span class=\"string\">\"`\"</span>); &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">matchesSafely</span><span class=\"params\">(<span class=\"keyword\">final</span> String string)</span> </span>&#123; <span class=\"keyword\">return</span> string.matches(regex); &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 上层调用的入口</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> RegexMatcher <span class=\"title\">matchesRegex</span><span class=\"params\">(<span class=\"keyword\">final</span> String regex)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RegexMatcher(regex);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用</span></div><div class=\"line\">String s = <span class=\"string\">\"aaabbbaaa\"</span>;</div><div class=\"line\">assertThat(s, RegexMatcher.matchesRegex(<span class=\"string\">\"a*b*a\"</span>));</div></pre></td></tr></table></figure>\n<h4 id=\"3-Mockito\"><a href=\"#3-Mockito\" class=\"headerlink\" title=\"3. Mockito\"></a>3. Mockito</h4><blockquote>\n<p><a href=\"https://code.google.com/archive/p/mockito/\">Mockito</a><br>Mock对象，控制其返回值，监控其方法的调用。<br><code>org.mockito:mockito-all:(version)</code></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// import如相关类</span></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.mockito.Mockito.mock;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.mockito.Mockito.verify;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 创建一个Mock的对象</span></div><div class=\"line\"> MyClass test = mock(MyClass.class);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 当调用test.getUniqueId()的时候返回43</span></div><div class=\"line\">when(test.getUniqueId()).thenReturn(<span class=\"number\">43</span>);</div><div class=\"line\"><span class=\"comment\">// 当调用test.compareTo()传入任意的Int值都返回43</span></div><div class=\"line\">when(test.compareTo(anyInt())).thenReturn(<span class=\"number\">43</span>);</div><div class=\"line\"><span class=\"comment\">// 当调用test.compareTo()传入的是Target.class类型对象时返回43</span></div><div class=\"line\">when(test.compareTo(isA(Target.class))).thenReturn(<span class=\"number\">43</span>);</div><div class=\"line\"><span class=\"comment\">// 当调用test.close()的时候，抛IOException异常</span></div><div class=\"line\">doThrow(<span class=\"keyword\">new</span> IOException()).when(test).close();</div><div class=\"line\"><span class=\"comment\">// 当调用test.execute()的时候，什么都不做</span></div><div class=\"line\">doNothing().when(test).execute();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 验证是否调用了两次test.getUniqueId()</span></div><div class=\"line\">verify(test, times(<span class=\"number\">2</span>)).getUniqueId();</div><div class=\"line\"><span class=\"comment\">// 验证是否没有调用过test.getUniqueId()</span></div><div class=\"line\">verify(test, never()).getUniqueId();</div><div class=\"line\"><span class=\"comment\">// 验证是否至少调用过两次test.getUniqueId()</span></div><div class=\"line\">verify(test, atLeast(<span class=\"number\">2</span>)).getUniqueId();</div><div class=\"line\"><span class=\"comment\">// 验证是否最多调用过三次test.getUniqueId()</span></div><div class=\"line\">verify(test, atMost(<span class=\"number\">3</span>)).getUniqueId();</div><div class=\"line\"><span class=\"comment\">// 验证是否这样调用过:test.query(\"test string\")</span></div><div class=\"line\">verify(test).query(<span class=\"string\">\"test string\"</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 通过Mockito.spy() 封装List对象并返回将其mock的spy对象</span></div><div class=\"line\">List list = <span class=\"keyword\">new</span> LinkedList();</div><div class=\"line\">List spy = spy(list);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 指定spy.get(0)返回\"foo\"</span></div><div class=\"line\">doReturn(<span class=\"string\">\"foo\"</span>).when(spy).get(<span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">assertEquals(<span class=\"string\">\"foo\"</span>, spy.get(<span class=\"number\">0</span>));</div></pre></td></tr></table></figure>\n<h5 id=\"对访问方法时，传入参数进行快照\"><a href=\"#对访问方法时，传入参数进行快照\" class=\"headerlink\" title=\"对访问方法时，传入参数进行快照\"></a>对访问方法时，传入参数进行快照</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> org.mockito.ArgumentCaptor;</div><div class=\"line\"><span class=\"keyword\">import</span> org.mockito.Captor;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.junit.Assert.assertEquals;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Captor</span></div><div class=\"line\"><span class=\"keyword\">private</span> ArgumentCaptor&lt;Integer&gt; captor;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testCapture</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  MyClass test = mock(MyClass.class);</div><div class=\"line\"></div><div class=\"line\">  test.compareTo(<span class=\"number\">3</span>, <span class=\"number\">4</span>);</div><div class=\"line\">  verify(test).compareTo(captor.capture(), eq(<span class=\"number\">4</span>));</div><div class=\"line\"></div><div class=\"line\">  assertEquals(<span class=\"number\">3</span>, (<span class=\"keyword\">int</span>)captor.getValue());</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 需要特别注意，如果是可变数组(vargars)参数，如方法 test.doSomething(String... params)</span></div><div class=\"line\">  <span class=\"comment\">// 此时是使用ArgumentCaptor&lt;String&gt;，而非ArgumentCaptor&lt;String[]&gt;</span></div><div class=\"line\">  ArgumentCaptor&lt;String&gt; varArgs = ArgumentCaptor.forClass(String.class);</div><div class=\"line\">  test.doSomething(<span class=\"string\">\"param-1\"</span>, <span class=\"string\">\"param-2\"</span>);</div><div class=\"line\">  verify(test).doSomething(varArgs.capture());</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 这里直接使用getAllValues()而非getValue()，来获取可变数组参数的所有传入参数</span></div><div class=\"line\">  assertThat(varArgs.getAllValues()).contains(<span class=\"string\">\"param-1\"</span>, <span class=\"string\">\"param-2\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"对于静态的方法的Mock\"><a href=\"#对于静态的方法的Mock\" class=\"headerlink\" title=\"对于静态的方法的Mock:\"></a>对于静态的方法的Mock:</h5><p>可以使用 <a href=\"https://github.com/jayway/powermock/wiki/MockitoUsage\">PowerMock</a>:</p>\n<blockquote>\n<p><code>org.powermock:powermock-api-mockito:(version)</code> &amp; <code>org.powermock:powermock-module-junit4:(version)</code>(For <code>PowerMockRunner.class</code>)</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@RunWith</span>(PowerMockRunner.class)</div><div class=\"line\"><span class=\"meta\">@PrepareForTest</span>(&#123;StaticClass1.class, StaticClass2.class&#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyTest</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Test</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSomething</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// mock完静态类以后，默认所有的方法都不做任何事情</span></div><div class=\"line\">    mockStatic(StaticClass1.class);</div><div class=\"line\">    when(StaticClass1.getStaticMethod()).andReturn(<span class=\"string\">\"anything\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 验证是否StaticClass1.getStaticMethod()这个方法被调用了一次</span></div><div class=\"line\">    verifyStatic(time(<span class=\"number\">1</span>));</div><div class=\"line\">    StaticClass1.getStaticMethod();</div><div class=\"line\"></div><div class=\"line\">    when(StaticClass1.getStaticMethod()).andReturn(<span class=\"string\">\"what ever\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 验证是否StaticClass2.getStaticMethod()这个方法被至少调用了一次</span></div><div class=\"line\">    verifyStatic(atLeastOnce());</div><div class=\"line\">    StaticClass2.getStaticMethod();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 通过任何参数创建File的实力，都直接返回fileInstance对象</span></div><div class=\"line\">    whenNew(File.class).withAnyArguments().thenReturn(fileInstance);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>或者是封装为非静态，然后用Mockito:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FooWraper</span></span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">someMethod</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    Foo.someStaticMethod();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"4-Robolectric\"><a href=\"#4-Robolectric\" class=\"headerlink\" title=\"4. Robolectric\"></a>4. Robolectric</h4><blockquote>\n<p><a href=\"http://robolectric.org/\">Robolectric</a><br>让模拟测试直接在开发机上完成，而不需要在Android系统上。所有需要使用到系统架构库的，如(<code>Handler</code>、<code>HandlerThread</code>)都需要使用Robolectric，或者进行模拟测试。</p>\n</blockquote>\n<p>主要是解决模拟测试中耗时的缺陷，模拟测试需要安装以及跑在Android系统上，也就是需要在Android虚拟机或者设备上面，所以十分的耗时。基本上每次来来回回都需要几分钟时间。针对这类问题，业界其实已经有了一个现成的解决方案: Pivotal实验室推出的<a href=\"http://robolectric.org/\">Robolectric</a>。通过使用Robolectrict模拟Android系统核心库的<code>Shadow Classes</code>的方式，我们可以像写本地测试一样写这类测试，并且直接运行在工作环境的JVM上，十分方便。</p>\n<h4 id=\"5-Robotium\"><a href=\"#5-Robotium\" class=\"headerlink\" title=\"5. Robotium\"></a>5. Robotium</h4><blockquote>\n<p><a href=\"https://github.com/robotiumtech/robotium\">RobotiumTech/robotium</a><br>(Integration Tests)模拟用户操作，事件流测试。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@RunWith</span>(RobolectricTestRunner.class)</div><div class=\"line\"><span class=\"meta\">@Config</span>(constants = BuildConfig.class)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyActivityTest</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Test</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomethingTests</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 获取Application对象</span></div><div class=\"line\">    Application application = RuntimeEnvironment.application;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 启动WelcomeActivity</span></div><div class=\"line\">    WelcomeActivity activity = Robolectric.setupActivity(WelcomeActivity.class);</div><div class=\"line\">    <span class=\"comment\">// 触发activity中Id为R.id.login的View的click事件</span></div><div class=\"line\">    activity.findViewById(R.id.login).performClick();</div><div class=\"line\"></div><div class=\"line\">    Intent expectedIntent = <span class=\"keyword\">new</span> Intent(activity, LoginActivity.class);</div><div class=\"line\">    <span class=\"comment\">// 在activity之后，启动的Activity是否是LoginActivity</span></div><div class=\"line\">    assertThat(shadowOf(activity).getNextStartedActivity()).isEqualTo(expectedIntent);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>通过模拟用户的操作的行为事件流进行测试，这类测试无法避免需要在虚拟机或者设备上面运行的。是一些用户操作流程与视觉显示强相关的很好的选择。</p>\n<h4 id=\"6-Test-Butler\"><a href=\"#6-Test-Butler\" class=\"headerlink\" title=\"6. Test Butler\"></a>6. Test Butler</h4><blockquote>\n<p><a href=\"https://github.com/linkedin/test-butler\">linkedin/test-butler</a><br>避免设备/模拟器系统或者环境的错误，导致测试的失败。</p>\n</blockquote>\n<p>通常我们在进行UI测试的时候，会遇到由于模拟器或者设备的错误，如系统的crash、ANR、或是未预期的Wifi、CPU罢工，或者是锁屏，这些外再环境因素导致测试不过。Test-Butler引入就是避免这些环境因素导致UI测试不过。</p>\n<blockquote>\n<p>该库被<a href=\"https://www.youtube.com/watch?v=aHcmsK9jfGU\">谷歌官方推荐过</a>，并且收到谷歌工程师的Review。</p>\n</blockquote>\n<h2 id=\"IV-拓展思路\"><a href=\"#IV-拓展思路\" class=\"headerlink\" title=\"IV. 拓展思路\"></a>IV. 拓展思路</h2><h4 id=\"1-Android-Robots\"><a href=\"#1-Android-Robots\" class=\"headerlink\" title=\"1. Android Robots\"></a>1. Android Robots</h4><blockquote>\n<p><a href=\"https://realm.io/news/kau-jake-wharton-testing-robots/\">Instrumentation Testing Robots - Jake Wharton</a></p>\n</blockquote>\n<p>假如我们需要测试: 发送 $42 到 “foo@bar.com”，然后验证是否成功。</p>\n<h5 id=\"通常的做法\"><a href=\"#通常的做法\" class=\"headerlink\" title=\"通常的做法\"></a>通常的做法</h5><p><img src=\"/img/android-test_1.png\" alt=\"\"></p>\n<p><img src=\"/img/android-test_2.png\" alt=\"\"></p>\n<h5 id=\"Robot思想\"><a href=\"#Robot思想\" class=\"headerlink\" title=\"Robot思想\"></a>Robot思想</h5><p>在写真正的UI测试的时候，只需要关注要测试什么，而不需要关注需要怎么测试，换句话说就是让测试逻辑与View或Presenter解耦，而与数据产生关系。</p>\n<p>首先通过封装一个Robot去处理How的部分:</p>\n<p><img src=\"/img/android-test_3.png\" alt=\"\"></p>\n<p>然后在写测试的时候，只关注需要测试什么:</p>\n<p><img src=\"/img/android-test_4.png\" alt=\"\"></p>\n<p>最终的思想原理</p>\n<p><img src=\"/img/android-test_5.png\" alt=\"\"></p>\n<hr>\n<ul>\n<li>文章创建时间: 2016-5-15，<a href=\"https://github.com/Jacksgong/Blog/commits/master/source/_posts/android_test.md\">本文迭代日志</a>。</li>\n</ul>\n<hr>\n<p>本文已经发布到JackBlog公众号，可请直接访问: <a href=\"https://mp.weixin.qq.com/s?__biz=MzIyMjQxMzAzOA==&amp;mid=2247483680&amp;idx=1&amp;sn=a81f0b86696f243bf32c032fc7b09574\">Android单元测试与模拟测试 - JacksBlog</a></p>\n<hr>\n<ul>\n<li><a href=\"http://developer.android.com/training/testing/unit-testing/local-unit-tests.html\">Building Local Unit Tests</a></li>\n<li><a href=\"https://www.bignerdranch.com/blog/testing-the-android-way/\">Testing the Android way</a></li>\n<li><a href=\"https://github.com/JakeWharton/timber/blob/master/timber/src/test/java/timber/log/TimberTest.java\">timber中的单元测试实例</a></li>\n<li><a href=\"https://github.com/JakeWharton/timber/blob/master/timber/build.gradle\">timber/build.gradle</a></li>\n<li><a href=\"http://stackoverflow.com/questions/30675748/a-bdd-rspec-like-testing-library-for-java\">A BDD (RSpec-like) testing library for Java</a></li>\n<li><a href=\"https://engineering.linkedin.com/blog/2016/08/introducing-and-open-sourcing-test-butler--reliable-android-test\">Open Sourcing Test Butler</a></li>\n<li><a href=\"http://www.vogella.com/tutorials/JUnit/article.html\">Unit Testing with JUnit -Tutorial</a></li>\n<li><a href=\"http://www.vogella.com/tutorials/Mockito/article.html\">Unit tests with Mockito - Tutorial</a></li>\n<li><a href=\"http://www.vogella.com/tutorials/Hamcrest/article.html\">Using Hamcrest for testing - Tutorial</a></li>\n<li><a href=\"http://www.vogella.com/tutorials/AssertJ/article.html\">Testing with AssertJ assertions - Tutorial</a></li>\n<li><a href=\"http://www.vogella.com/tutorials/AndroidTestingEspresso/article.html\">Android user interface testing with Espresso - Tutorial</a></li>\n<li><a href=\"https://github.com/chiuki/espresso-samples\">chiuki/espresso-samples</a></li>\n<li><a href=\"http://stackoverflow.com/questions/10327612/mock-static-methods-from-multiple-class-using-powermock\">Mock static methods from multiple class using PowerMock</a></li>\n<li><a href=\"https://github.com/rest-assured/rest-assured\">rest-assured/rest-assured</a></li>\n<li><a href=\"https://github.com/skyscreamer/JSONassert\">skyscreamer/JSONassert</a></li>\n<li><a href=\"https://medium.com/@cesarmcferreira/mastering-the-terminal-side-of-android-development-e7520466c521#.e5vt3p3vl\">Mastering the Terminal side of Android development</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"Android中线程、进程与组件的关系","date":"2015-04-08T00:35:03.000Z","_content":"\n## I. 安全\n\n#### 基本保障\n\n每个应用 - Linux 用户ID\n\n权限: 应用本身与用户可见\n\n<!--more-->\n\n#### 不同应用程序共享数据(基于这套机制)\n\n1. `AndroidManifest`中给`manifest`标签中定义相同的`android:sharedUserId`属性\n2. 以相同的签名加密\n\n**[效果]**: 运行在相同的进程中，互相共享资源\n\n## II. Dalvik、进程、应用程序关系\n\n```\nLinux进程\n    |\nDalvik虚拟机\n    |\n应用程序\n```\n\n#### Dalvik虚拟机功能(都是使用Linux底层的功能)\n\n1. 组件生命周期\n2. 堆栈管理\n3. 线程管理\n4. 安全\n5. 异常管理\n6. GC\n7. ....\n\n## III. 线程、进程与Android系统组件的关系\n\n### 系统资源回收机制\n\n#### 退出应用程序\n\n应用程序所使用的资源(进程、虚拟机、线程等)**还存在**内存中\n\n#### 应用程序资源回收时机\n\n1. 系统内存不足时\n2. 根据**进程中**运行的组件**类别**、组件的**状态** => 判断重要性，排序优先级\n\n### 进程重要性级别\n\n> 当A进程依赖(绑定)B进程的时候，那么系统会判定: B进程的进程重要性级别 至少会等于 A进程的重要性级别\n\n#### 1. 前台进程:\n\n> 正在使用的进程，满足以下任意一个条件的进程\n\n- 持有一个用户正在交互的`Activity`(`Activity#onResume()`方法已经被调用)\n- 持有一个`Service`绑定了用户正在交互的`Activity`\n- 持有一个`Service`正在运行在前台模式下(通过`Service#startForeground()`开始前台模式)\n- 持有一个`Service`正在执行它任意的生命周期回调(`onCreate()`、`onStart()`、`onDestroy()`)\n- 持有一个`BroadcastReceiver`正在执行它的`onReceive()`方法\n\n#### 2. 可见进程:\n\n> 屏幕上有显示，当不是正在使用，满足以下任意一个条件的进程\n\n- 持有一个`Activity`不在前台(`Activity#onPause()`已经被调用)，但是用户依然能够看到。(如另外一个程序启动了一个Dialog，此时上一个应用的`Activity`用户还能被用户看到，因此上一个应用就是可见进程)\n- 持有一个`Service`绑定了一个可见`Activity`。\n\n\n#### 3. 服务进程:\n\n> 运行Service的进程(只要**前台进程**和**可见进程**有足够内存，系统就不会回收)\n\n不属于`前台进程`，以及`可见进程`的，持有一个正在运行的`Service`的进程。\n\n#### 4. 后台进程:\n\n运行着不可见Activity(回调过`onStop()`(一般按了Back或Home键至少会执行到`onStop()`)的进程, 会存储在一个LRU队列中，在前三种优先级进程需要内存时，就会对最近最少使用的进程进行回收。\n\n> 由于服务进程的优先级高于后台进程，因此很多后台事件可以优先考虑放到服务中处理，避免被回收。\n\n#### 5. 空进程:\n\n未运行任何程序组件的进程，通常这种进程缓存，只是为了加速下次组件启动时不用重复启动进程。\n\n---\n\n- [Processes and Threads](https://developer.android.com/guide/components/processes-and-threads.html)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/android_thread_process_components.md","raw":"title: Android中线程、进程与组件的关系\ndate: 2015-04-08 08:35:03\npermalink: 2015/04/08/android_thread_process_components\ntags:\n- Android\n- 进程\n- 线程\n- 组件\n- 调度\n\n---\n\n## I. 安全\n\n#### 基本保障\n\n每个应用 - Linux 用户ID\n\n权限: 应用本身与用户可见\n\n<!--more-->\n\n#### 不同应用程序共享数据(基于这套机制)\n\n1. `AndroidManifest`中给`manifest`标签中定义相同的`android:sharedUserId`属性\n2. 以相同的签名加密\n\n**[效果]**: 运行在相同的进程中，互相共享资源\n\n## II. Dalvik、进程、应用程序关系\n\n```\nLinux进程\n    |\nDalvik虚拟机\n    |\n应用程序\n```\n\n#### Dalvik虚拟机功能(都是使用Linux底层的功能)\n\n1. 组件生命周期\n2. 堆栈管理\n3. 线程管理\n4. 安全\n5. 异常管理\n6. GC\n7. ....\n\n## III. 线程、进程与Android系统组件的关系\n\n### 系统资源回收机制\n\n#### 退出应用程序\n\n应用程序所使用的资源(进程、虚拟机、线程等)**还存在**内存中\n\n#### 应用程序资源回收时机\n\n1. 系统内存不足时\n2. 根据**进程中**运行的组件**类别**、组件的**状态** => 判断重要性，排序优先级\n\n### 进程重要性级别\n\n> 当A进程依赖(绑定)B进程的时候，那么系统会判定: B进程的进程重要性级别 至少会等于 A进程的重要性级别\n\n#### 1. 前台进程:\n\n> 正在使用的进程，满足以下任意一个条件的进程\n\n- 持有一个用户正在交互的`Activity`(`Activity#onResume()`方法已经被调用)\n- 持有一个`Service`绑定了用户正在交互的`Activity`\n- 持有一个`Service`正在运行在前台模式下(通过`Service#startForeground()`开始前台模式)\n- 持有一个`Service`正在执行它任意的生命周期回调(`onCreate()`、`onStart()`、`onDestroy()`)\n- 持有一个`BroadcastReceiver`正在执行它的`onReceive()`方法\n\n#### 2. 可见进程:\n\n> 屏幕上有显示，当不是正在使用，满足以下任意一个条件的进程\n\n- 持有一个`Activity`不在前台(`Activity#onPause()`已经被调用)，但是用户依然能够看到。(如另外一个程序启动了一个Dialog，此时上一个应用的`Activity`用户还能被用户看到，因此上一个应用就是可见进程)\n- 持有一个`Service`绑定了一个可见`Activity`。\n\n\n#### 3. 服务进程:\n\n> 运行Service的进程(只要**前台进程**和**可见进程**有足够内存，系统就不会回收)\n\n不属于`前台进程`，以及`可见进程`的，持有一个正在运行的`Service`的进程。\n\n#### 4. 后台进程:\n\n运行着不可见Activity(回调过`onStop()`(一般按了Back或Home键至少会执行到`onStop()`)的进程, 会存储在一个LRU队列中，在前三种优先级进程需要内存时，就会对最近最少使用的进程进行回收。\n\n> 由于服务进程的优先级高于后台进程，因此很多后台事件可以优先考虑放到服务中处理，避免被回收。\n\n#### 5. 空进程:\n\n未运行任何程序组件的进程，通常这种进程缓存，只是为了加速下次组件启动时不用重复启动进程。\n\n---\n\n- [Processes and Threads](https://developer.android.com/guide/components/processes-and-threads.html)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2015/04/08/android_thread_process_components","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66ik002595buqrers26m","content":"<h2 id=\"I-安全\"><a href=\"#I-安全\" class=\"headerlink\" title=\"I. 安全\"></a>I. 安全</h2><h4 id=\"基本保障\"><a href=\"#基本保障\" class=\"headerlink\" title=\"基本保障\"></a>基本保障</h4><p>每个应用 - Linux 用户ID</p>\n<p>权限: 应用本身与用户可见</p>\n<a id=\"more\"></a>\n<h4 id=\"不同应用程序共享数据-基于这套机制\"><a href=\"#不同应用程序共享数据-基于这套机制\" class=\"headerlink\" title=\"不同应用程序共享数据(基于这套机制)\"></a>不同应用程序共享数据(基于这套机制)</h4><ol>\n<li><code>AndroidManifest</code>中给<code>manifest</code>标签中定义相同的<code>android:sharedUserId</code>属性</li>\n<li>以相同的签名加密</li>\n</ol>\n<p><strong>[效果]</strong>: 运行在相同的进程中，互相共享资源</p>\n<h2 id=\"II-Dalvik、进程、应用程序关系\"><a href=\"#II-Dalvik、进程、应用程序关系\" class=\"headerlink\" title=\"II. Dalvik、进程、应用程序关系\"></a>II. Dalvik、进程、应用程序关系</h2><figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Linux进程</div><div class=\"line\">    <span class=\"string\">|</span></div><div class=\"line\">Dalvik虚拟机</div><div class=\"line\">    <span class=\"string\">|</span></div><div class=\"line\">应用程序</div></pre></td></tr></table></figure>\n<h4 id=\"Dalvik虚拟机功能-都是使用Linux底层的功能\"><a href=\"#Dalvik虚拟机功能-都是使用Linux底层的功能\" class=\"headerlink\" title=\"Dalvik虚拟机功能(都是使用Linux底层的功能)\"></a>Dalvik虚拟机功能(都是使用Linux底层的功能)</h4><ol>\n<li>组件生命周期</li>\n<li>堆栈管理</li>\n<li>线程管理</li>\n<li>安全</li>\n<li>异常管理</li>\n<li>GC</li>\n<li>….</li>\n</ol>\n<h2 id=\"III-线程、进程与Android系统组件的关系\"><a href=\"#III-线程、进程与Android系统组件的关系\" class=\"headerlink\" title=\"III. 线程、进程与Android系统组件的关系\"></a>III. 线程、进程与Android系统组件的关系</h2><h3 id=\"系统资源回收机制\"><a href=\"#系统资源回收机制\" class=\"headerlink\" title=\"系统资源回收机制\"></a>系统资源回收机制</h3><h4 id=\"退出应用程序\"><a href=\"#退出应用程序\" class=\"headerlink\" title=\"退出应用程序\"></a>退出应用程序</h4><p>应用程序所使用的资源(进程、虚拟机、线程等)<strong>还存在</strong>内存中</p>\n<h4 id=\"应用程序资源回收时机\"><a href=\"#应用程序资源回收时机\" class=\"headerlink\" title=\"应用程序资源回收时机\"></a>应用程序资源回收时机</h4><ol>\n<li>系统内存不足时</li>\n<li>根据<strong>进程中</strong>运行的组件<strong>类别</strong>、组件的<strong>状态</strong> =&gt; 判断重要性，排序优先级</li>\n</ol>\n<h3 id=\"进程重要性级别\"><a href=\"#进程重要性级别\" class=\"headerlink\" title=\"进程重要性级别\"></a>进程重要性级别</h3><blockquote>\n<p>当A进程依赖(绑定)B进程的时候，那么系统会判定: B进程的进程重要性级别 至少会等于 A进程的重要性级别</p>\n</blockquote>\n<h4 id=\"1-前台进程\"><a href=\"#1-前台进程\" class=\"headerlink\" title=\"1. 前台进程:\"></a>1. 前台进程:</h4><blockquote>\n<p>正在使用的进程，满足以下任意一个条件的进程</p>\n</blockquote>\n<ul>\n<li>持有一个用户正在交互的<code>Activity</code>(<code>Activity#onResume()</code>方法已经被调用)</li>\n<li>持有一个<code>Service</code>绑定了用户正在交互的<code>Activity</code></li>\n<li>持有一个<code>Service</code>正在运行在前台模式下(通过<code>Service#startForeground()</code>开始前台模式)</li>\n<li>持有一个<code>Service</code>正在执行它任意的生命周期回调(<code>onCreate()</code>、<code>onStart()</code>、<code>onDestroy()</code>)</li>\n<li>持有一个<code>BroadcastReceiver</code>正在执行它的<code>onReceive()</code>方法</li>\n</ul>\n<h4 id=\"2-可见进程\"><a href=\"#2-可见进程\" class=\"headerlink\" title=\"2. 可见进程:\"></a>2. 可见进程:</h4><blockquote>\n<p>屏幕上有显示，当不是正在使用，满足以下任意一个条件的进程</p>\n</blockquote>\n<ul>\n<li>持有一个<code>Activity</code>不在前台(<code>Activity#onPause()</code>已经被调用)，但是用户依然能够看到。(如另外一个程序启动了一个Dialog，此时上一个应用的<code>Activity</code>用户还能被用户看到，因此上一个应用就是可见进程)</li>\n<li>持有一个<code>Service</code>绑定了一个可见<code>Activity</code>。</li>\n</ul>\n<h4 id=\"3-服务进程\"><a href=\"#3-服务进程\" class=\"headerlink\" title=\"3. 服务进程:\"></a>3. 服务进程:</h4><blockquote>\n<p>运行Service的进程(只要<strong>前台进程</strong>和<strong>可见进程</strong>有足够内存，系统就不会回收)</p>\n</blockquote>\n<p>不属于<code>前台进程</code>，以及<code>可见进程</code>的，持有一个正在运行的<code>Service</code>的进程。</p>\n<h4 id=\"4-后台进程\"><a href=\"#4-后台进程\" class=\"headerlink\" title=\"4. 后台进程:\"></a>4. 后台进程:</h4><p>运行着不可见Activity(回调过<code>onStop()</code>(一般按了Back或Home键至少会执行到<code>onStop()</code>)的进程, 会存储在一个LRU队列中，在前三种优先级进程需要内存时，就会对最近最少使用的进程进行回收。</p>\n<blockquote>\n<p>由于服务进程的优先级高于后台进程，因此很多后台事件可以优先考虑放到服务中处理，避免被回收。</p>\n</blockquote>\n<h4 id=\"5-空进程\"><a href=\"#5-空进程\" class=\"headerlink\" title=\"5. 空进程:\"></a>5. 空进程:</h4><p>未运行任何程序组件的进程，通常这种进程缓存，只是为了加速下次组件启动时不用重复启动进程。</p>\n<hr>\n<ul>\n<li><a href=\"https://developer.android.com/guide/components/processes-and-threads.html\" target=\"_blank\" rel=\"external\">Processes and Threads</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<h2 id=\"I-安全\"><a href=\"#I-安全\" class=\"headerlink\" title=\"I. 安全\"></a>I. 安全</h2><h4 id=\"基本保障\"><a href=\"#基本保障\" class=\"headerlink\" title=\"基本保障\"></a>基本保障</h4><p>每个应用 - Linux 用户ID</p>\n<p>权限: 应用本身与用户可见</p>","more":"<h4 id=\"不同应用程序共享数据-基于这套机制\"><a href=\"#不同应用程序共享数据-基于这套机制\" class=\"headerlink\" title=\"不同应用程序共享数据(基于这套机制)\"></a>不同应用程序共享数据(基于这套机制)</h4><ol>\n<li><code>AndroidManifest</code>中给<code>manifest</code>标签中定义相同的<code>android:sharedUserId</code>属性</li>\n<li>以相同的签名加密</li>\n</ol>\n<p><strong>[效果]</strong>: 运行在相同的进程中，互相共享资源</p>\n<h2 id=\"II-Dalvik、进程、应用程序关系\"><a href=\"#II-Dalvik、进程、应用程序关系\" class=\"headerlink\" title=\"II. Dalvik、进程、应用程序关系\"></a>II. Dalvik、进程、应用程序关系</h2><figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Linux进程</div><div class=\"line\">    <span class=\"string\">|</span></div><div class=\"line\">Dalvik虚拟机</div><div class=\"line\">    <span class=\"string\">|</span></div><div class=\"line\">应用程序</div></pre></td></tr></table></figure>\n<h4 id=\"Dalvik虚拟机功能-都是使用Linux底层的功能\"><a href=\"#Dalvik虚拟机功能-都是使用Linux底层的功能\" class=\"headerlink\" title=\"Dalvik虚拟机功能(都是使用Linux底层的功能)\"></a>Dalvik虚拟机功能(都是使用Linux底层的功能)</h4><ol>\n<li>组件生命周期</li>\n<li>堆栈管理</li>\n<li>线程管理</li>\n<li>安全</li>\n<li>异常管理</li>\n<li>GC</li>\n<li>….</li>\n</ol>\n<h2 id=\"III-线程、进程与Android系统组件的关系\"><a href=\"#III-线程、进程与Android系统组件的关系\" class=\"headerlink\" title=\"III. 线程、进程与Android系统组件的关系\"></a>III. 线程、进程与Android系统组件的关系</h2><h3 id=\"系统资源回收机制\"><a href=\"#系统资源回收机制\" class=\"headerlink\" title=\"系统资源回收机制\"></a>系统资源回收机制</h3><h4 id=\"退出应用程序\"><a href=\"#退出应用程序\" class=\"headerlink\" title=\"退出应用程序\"></a>退出应用程序</h4><p>应用程序所使用的资源(进程、虚拟机、线程等)<strong>还存在</strong>内存中</p>\n<h4 id=\"应用程序资源回收时机\"><a href=\"#应用程序资源回收时机\" class=\"headerlink\" title=\"应用程序资源回收时机\"></a>应用程序资源回收时机</h4><ol>\n<li>系统内存不足时</li>\n<li>根据<strong>进程中</strong>运行的组件<strong>类别</strong>、组件的<strong>状态</strong> =&gt; 判断重要性，排序优先级</li>\n</ol>\n<h3 id=\"进程重要性级别\"><a href=\"#进程重要性级别\" class=\"headerlink\" title=\"进程重要性级别\"></a>进程重要性级别</h3><blockquote>\n<p>当A进程依赖(绑定)B进程的时候，那么系统会判定: B进程的进程重要性级别 至少会等于 A进程的重要性级别</p>\n</blockquote>\n<h4 id=\"1-前台进程\"><a href=\"#1-前台进程\" class=\"headerlink\" title=\"1. 前台进程:\"></a>1. 前台进程:</h4><blockquote>\n<p>正在使用的进程，满足以下任意一个条件的进程</p>\n</blockquote>\n<ul>\n<li>持有一个用户正在交互的<code>Activity</code>(<code>Activity#onResume()</code>方法已经被调用)</li>\n<li>持有一个<code>Service</code>绑定了用户正在交互的<code>Activity</code></li>\n<li>持有一个<code>Service</code>正在运行在前台模式下(通过<code>Service#startForeground()</code>开始前台模式)</li>\n<li>持有一个<code>Service</code>正在执行它任意的生命周期回调(<code>onCreate()</code>、<code>onStart()</code>、<code>onDestroy()</code>)</li>\n<li>持有一个<code>BroadcastReceiver</code>正在执行它的<code>onReceive()</code>方法</li>\n</ul>\n<h4 id=\"2-可见进程\"><a href=\"#2-可见进程\" class=\"headerlink\" title=\"2. 可见进程:\"></a>2. 可见进程:</h4><blockquote>\n<p>屏幕上有显示，当不是正在使用，满足以下任意一个条件的进程</p>\n</blockquote>\n<ul>\n<li>持有一个<code>Activity</code>不在前台(<code>Activity#onPause()</code>已经被调用)，但是用户依然能够看到。(如另外一个程序启动了一个Dialog，此时上一个应用的<code>Activity</code>用户还能被用户看到，因此上一个应用就是可见进程)</li>\n<li>持有一个<code>Service</code>绑定了一个可见<code>Activity</code>。</li>\n</ul>\n<h4 id=\"3-服务进程\"><a href=\"#3-服务进程\" class=\"headerlink\" title=\"3. 服务进程:\"></a>3. 服务进程:</h4><blockquote>\n<p>运行Service的进程(只要<strong>前台进程</strong>和<strong>可见进程</strong>有足够内存，系统就不会回收)</p>\n</blockquote>\n<p>不属于<code>前台进程</code>，以及<code>可见进程</code>的，持有一个正在运行的<code>Service</code>的进程。</p>\n<h4 id=\"4-后台进程\"><a href=\"#4-后台进程\" class=\"headerlink\" title=\"4. 后台进程:\"></a>4. 后台进程:</h4><p>运行着不可见Activity(回调过<code>onStop()</code>(一般按了Back或Home键至少会执行到<code>onStop()</code>)的进程, 会存储在一个LRU队列中，在前三种优先级进程需要内存时，就会对最近最少使用的进程进行回收。</p>\n<blockquote>\n<p>由于服务进程的优先级高于后台进程，因此很多后台事件可以优先考虑放到服务中处理，避免被回收。</p>\n</blockquote>\n<h4 id=\"5-空进程\"><a href=\"#5-空进程\" class=\"headerlink\" title=\"5. 空进程:\"></a>5. 空进程:</h4><p>未运行任何程序组件的进程，通常这种进程缓存，只是为了加速下次组件启动时不用重复启动进程。</p>\n<hr>\n<ul>\n<li><a href=\"https://developer.android.com/guide/components/processes-and-threads.html\">Processes and Threads</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"屌丝心理学 视频笔记","date":"2015-03-27T00:35:03.000Z","_content":"\n>出来混~迟早是要学的。\n\n> 整理自视频: [屌丝心理学](http://i.youku.com/u/UMTQzOTMzOTY5Mg==)\n\n## I. 超限效应\n\n注意，火候、分寸、尺度。学会自我克制\n\n马克吐温，牧师演讲（捐款-太久-偷两元钱）\n\n<!--more-->\n\n## II. 登门槛效应\n\n骆驼，风沙，骆驼（头、脖子、身子、被挤出去）。\n\n做较小的需求、再达到最大的要求。\n\n\n## III. 青蛙效应\n\n生于忧患死于安乐，不要沉迷过去\n\n## IV. 巴莱多定律\n\n28定律。\n\n重要20%，次要80%。\n\n现实社会并不是只有白和黑，不要平均地分析、处理和看待问题，学会以少博多，努力奋斗和付出。\n\n## V. 禁果效应\n\n1. 好奇心\n2. 逆反心理\n\n人追求自由的天性\n\n## VI. 海格力斯效应\n\n海格力斯，丑陋的东西，打仇恨袋，大了，越打越大，不理会就变小。\n\n要学会宽容、懂得忍让\n\n## VII. 巴纳姆效应\n\n人们常常认为，一种笼统的、一般性的描述，十分准确的揭示了自己的特点。\n\n星象、星座等都是基于这效应。\n\n越具有普遍性，越能让你对号入座，在不知不觉中，掉入平均描述的陷阱。\n\n预设被强迫成立。\n\n1. 学会面对自己，尽量不要以外在的标准，盲目的判断与衡量自己\n2. 培养一种收集信息的能力，和敏锐的判断力，抵触一些迷信的评价性的东西\n3. 明确自己的优点和缺点，聪明的人能看到他人之长，并且补己之短。\n\n\n\n## VIII. 布里丹效应\n遇到人生岔人口，看清你就大胆走。\n\n布里丹养了一头小毛驴，有一天送草料的出于对哲学家的\n\n要活在当下，不要好高骛远的痴想\n\n只选最合适的，不选最好的。\n\n把眼前的机会抓住，把手头的事情做好。\n\n制定目标要有可行性。\n\n## IX. 蔡戈尼效应\n\n爱情虐你千万遍，始终不忘是初恋\n\n一般人对已完成的极易忘怀，而对\n\n#### 两个极端\n\n1. 强迫偏执狂\n2. 热血坚持不长\n\n#### 如何避免\n\n1. 如果不值得去做，就勇敢的放弃\n2. 一点一滴的强化意志力，先从一件小事来训练自己\n3. 不要总以为有很多时间做。想到就去实现\n4. 劳逸结合（当觉得还有一个小时才能完成的时候，最好休息一下）\n\n## X. 交往定律\n\n千里有缘麻辣烫，无缘给钱都不让。\n\n1. 吸引定律\n\n\t女人的百媚娇艳，是男人掉入情网的『导火线』；男人的『蜜语甜言』，是女人乐与背叛的谎言。\n\n2. 主动定律\n\n\t男人：迅速出击；女人：缓慢渗透\n\n3. 考验定律\n\n\t男人考验女人：约会迟到；女人考验男人：逛街啥都要\n\n4. 求爱定律\n\n\t男追女如隔座山；女追男如隔张纸\n\n5. 热恋定律\n\n\t热恋的男人：再笨也有用不完的小聪明；热恋的女人：再精明也会变得很愚蠢\n\n6. 情人定律\n\n\t男人相当女人的初恋情人，女人想做男人的最后情人\n\n7. 下一个定律\n\n\t双方都会总觉得下一个会更好\n\n8. 说话定律\n\n\t男人酒后话多，女人婚后话多\n\n9. 区别定律\n\n\t男人不修边幅的时候，人们会质疑他的女朋友；女人仪容不整时，人们会同情她的那朋友\n\n10. 成功背后定律\n\n\t一个成功男人的背后，总有一个坚强的女人；一个成功女人的背后，总有一个伤她心的男人\n\n## XI. 邻近性原则\n\n在人际交往中，距离的接近程度与交往的频率有直接的关系\n\n交往几率：隔壁邻居：41%，隔一户：22%，隔三户：10%\n\n\n## XII. 吊桥效应\n\n在危桥上遇到双方，都会更加好感。\n\n人们在遇到危险导致的心跳加速，会误以为是遇到心动的双方导致的。\n\n研究表明，如果两个人见面时，精神属于非常激动的状态，那么他们很容的得到对方的喜爱。\n\n1. 坐过山车\n2. 恐怖电影\n3. 公路狂飙\n\n\n## XIII. 古烈治效应\n\n喜新厌旧\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/cock_wire_psychology.md","raw":"title: 屌丝心理学 视频笔记\ndate: 2015-03-27 08:35:03\npermalink: 2015/03/27/cock_wire_psychology\ntags:\n- 心理学\n- 屌丝\n- 理论\n- 笔记\n\n---\n\n>出来混~迟早是要学的。\n\n> 整理自视频: [屌丝心理学](http://i.youku.com/u/UMTQzOTMzOTY5Mg==)\n\n## I. 超限效应\n\n注意，火候、分寸、尺度。学会自我克制\n\n马克吐温，牧师演讲（捐款-太久-偷两元钱）\n\n<!--more-->\n\n## II. 登门槛效应\n\n骆驼，风沙，骆驼（头、脖子、身子、被挤出去）。\n\n做较小的需求、再达到最大的要求。\n\n\n## III. 青蛙效应\n\n生于忧患死于安乐，不要沉迷过去\n\n## IV. 巴莱多定律\n\n28定律。\n\n重要20%，次要80%。\n\n现实社会并不是只有白和黑，不要平均地分析、处理和看待问题，学会以少博多，努力奋斗和付出。\n\n## V. 禁果效应\n\n1. 好奇心\n2. 逆反心理\n\n人追求自由的天性\n\n## VI. 海格力斯效应\n\n海格力斯，丑陋的东西，打仇恨袋，大了，越打越大，不理会就变小。\n\n要学会宽容、懂得忍让\n\n## VII. 巴纳姆效应\n\n人们常常认为，一种笼统的、一般性的描述，十分准确的揭示了自己的特点。\n\n星象、星座等都是基于这效应。\n\n越具有普遍性，越能让你对号入座，在不知不觉中，掉入平均描述的陷阱。\n\n预设被强迫成立。\n\n1. 学会面对自己，尽量不要以外在的标准，盲目的判断与衡量自己\n2. 培养一种收集信息的能力，和敏锐的判断力，抵触一些迷信的评价性的东西\n3. 明确自己的优点和缺点，聪明的人能看到他人之长，并且补己之短。\n\n\n\n## VIII. 布里丹效应\n遇到人生岔人口，看清你就大胆走。\n\n布里丹养了一头小毛驴，有一天送草料的出于对哲学家的\n\n要活在当下，不要好高骛远的痴想\n\n只选最合适的，不选最好的。\n\n把眼前的机会抓住，把手头的事情做好。\n\n制定目标要有可行性。\n\n## IX. 蔡戈尼效应\n\n爱情虐你千万遍，始终不忘是初恋\n\n一般人对已完成的极易忘怀，而对\n\n#### 两个极端\n\n1. 强迫偏执狂\n2. 热血坚持不长\n\n#### 如何避免\n\n1. 如果不值得去做，就勇敢的放弃\n2. 一点一滴的强化意志力，先从一件小事来训练自己\n3. 不要总以为有很多时间做。想到就去实现\n4. 劳逸结合（当觉得还有一个小时才能完成的时候，最好休息一下）\n\n## X. 交往定律\n\n千里有缘麻辣烫，无缘给钱都不让。\n\n1. 吸引定律\n\n\t女人的百媚娇艳，是男人掉入情网的『导火线』；男人的『蜜语甜言』，是女人乐与背叛的谎言。\n\n2. 主动定律\n\n\t男人：迅速出击；女人：缓慢渗透\n\n3. 考验定律\n\n\t男人考验女人：约会迟到；女人考验男人：逛街啥都要\n\n4. 求爱定律\n\n\t男追女如隔座山；女追男如隔张纸\n\n5. 热恋定律\n\n\t热恋的男人：再笨也有用不完的小聪明；热恋的女人：再精明也会变得很愚蠢\n\n6. 情人定律\n\n\t男人相当女人的初恋情人，女人想做男人的最后情人\n\n7. 下一个定律\n\n\t双方都会总觉得下一个会更好\n\n8. 说话定律\n\n\t男人酒后话多，女人婚后话多\n\n9. 区别定律\n\n\t男人不修边幅的时候，人们会质疑他的女朋友；女人仪容不整时，人们会同情她的那朋友\n\n10. 成功背后定律\n\n\t一个成功男人的背后，总有一个坚强的女人；一个成功女人的背后，总有一个伤她心的男人\n\n## XI. 邻近性原则\n\n在人际交往中，距离的接近程度与交往的频率有直接的关系\n\n交往几率：隔壁邻居：41%，隔一户：22%，隔三户：10%\n\n\n## XII. 吊桥效应\n\n在危桥上遇到双方，都会更加好感。\n\n人们在遇到危险导致的心跳加速，会误以为是遇到心动的双方导致的。\n\n研究表明，如果两个人见面时，精神属于非常激动的状态，那么他们很容的得到对方的喜爱。\n\n1. 坐过山车\n2. 恐怖电影\n3. 公路狂飙\n\n\n## XIII. 古烈治效应\n\n喜新厌旧\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2015/03/27/cock_wire_psychology","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66il002895bumaroyatw","content":"<blockquote>\n<p>出来混~迟早是要学的。</p>\n<p>整理自视频: <a href=\"http://i.youku.com/u/UMTQzOTMzOTY5Mg==\" target=\"_blank\" rel=\"external\">屌丝心理学</a></p>\n</blockquote>\n<h2 id=\"I-超限效应\"><a href=\"#I-超限效应\" class=\"headerlink\" title=\"I. 超限效应\"></a>I. 超限效应</h2><p>注意，火候、分寸、尺度。学会自我克制</p>\n<p>马克吐温，牧师演讲（捐款-太久-偷两元钱）</p>\n<a id=\"more\"></a>\n<h2 id=\"II-登门槛效应\"><a href=\"#II-登门槛效应\" class=\"headerlink\" title=\"II. 登门槛效应\"></a>II. 登门槛效应</h2><p>骆驼，风沙，骆驼（头、脖子、身子、被挤出去）。</p>\n<p>做较小的需求、再达到最大的要求。</p>\n<h2 id=\"III-青蛙效应\"><a href=\"#III-青蛙效应\" class=\"headerlink\" title=\"III. 青蛙效应\"></a>III. 青蛙效应</h2><p>生于忧患死于安乐，不要沉迷过去</p>\n<h2 id=\"IV-巴莱多定律\"><a href=\"#IV-巴莱多定律\" class=\"headerlink\" title=\"IV. 巴莱多定律\"></a>IV. 巴莱多定律</h2><p>28定律。</p>\n<p>重要20%，次要80%。</p>\n<p>现实社会并不是只有白和黑，不要平均地分析、处理和看待问题，学会以少博多，努力奋斗和付出。</p>\n<h2 id=\"V-禁果效应\"><a href=\"#V-禁果效应\" class=\"headerlink\" title=\"V. 禁果效应\"></a>V. 禁果效应</h2><ol>\n<li>好奇心</li>\n<li>逆反心理</li>\n</ol>\n<p>人追求自由的天性</p>\n<h2 id=\"VI-海格力斯效应\"><a href=\"#VI-海格力斯效应\" class=\"headerlink\" title=\"VI. 海格力斯效应\"></a>VI. 海格力斯效应</h2><p>海格力斯，丑陋的东西，打仇恨袋，大了，越打越大，不理会就变小。</p>\n<p>要学会宽容、懂得忍让</p>\n<h2 id=\"VII-巴纳姆效应\"><a href=\"#VII-巴纳姆效应\" class=\"headerlink\" title=\"VII. 巴纳姆效应\"></a>VII. 巴纳姆效应</h2><p>人们常常认为，一种笼统的、一般性的描述，十分准确的揭示了自己的特点。</p>\n<p>星象、星座等都是基于这效应。</p>\n<p>越具有普遍性，越能让你对号入座，在不知不觉中，掉入平均描述的陷阱。</p>\n<p>预设被强迫成立。</p>\n<ol>\n<li>学会面对自己，尽量不要以外在的标准，盲目的判断与衡量自己</li>\n<li>培养一种收集信息的能力，和敏锐的判断力，抵触一些迷信的评价性的东西</li>\n<li>明确自己的优点和缺点，聪明的人能看到他人之长，并且补己之短。</li>\n</ol>\n<h2 id=\"VIII-布里丹效应\"><a href=\"#VIII-布里丹效应\" class=\"headerlink\" title=\"VIII. 布里丹效应\"></a>VIII. 布里丹效应</h2><p>遇到人生岔人口，看清你就大胆走。</p>\n<p>布里丹养了一头小毛驴，有一天送草料的出于对哲学家的</p>\n<p>要活在当下，不要好高骛远的痴想</p>\n<p>只选最合适的，不选最好的。</p>\n<p>把眼前的机会抓住，把手头的事情做好。</p>\n<p>制定目标要有可行性。</p>\n<h2 id=\"IX-蔡戈尼效应\"><a href=\"#IX-蔡戈尼效应\" class=\"headerlink\" title=\"IX. 蔡戈尼效应\"></a>IX. 蔡戈尼效应</h2><p>爱情虐你千万遍，始终不忘是初恋</p>\n<p>一般人对已完成的极易忘怀，而对</p>\n<h4 id=\"两个极端\"><a href=\"#两个极端\" class=\"headerlink\" title=\"两个极端\"></a>两个极端</h4><ol>\n<li>强迫偏执狂</li>\n<li>热血坚持不长</li>\n</ol>\n<h4 id=\"如何避免\"><a href=\"#如何避免\" class=\"headerlink\" title=\"如何避免\"></a>如何避免</h4><ol>\n<li>如果不值得去做，就勇敢的放弃</li>\n<li>一点一滴的强化意志力，先从一件小事来训练自己</li>\n<li>不要总以为有很多时间做。想到就去实现</li>\n<li>劳逸结合（当觉得还有一个小时才能完成的时候，最好休息一下）</li>\n</ol>\n<h2 id=\"X-交往定律\"><a href=\"#X-交往定律\" class=\"headerlink\" title=\"X. 交往定律\"></a>X. 交往定律</h2><p>千里有缘麻辣烫，无缘给钱都不让。</p>\n<ol>\n<li><p>吸引定律</p>\n<p> 女人的百媚娇艳，是男人掉入情网的『导火线』；男人的『蜜语甜言』，是女人乐与背叛的谎言。</p>\n</li>\n<li><p>主动定律</p>\n<p> 男人：迅速出击；女人：缓慢渗透</p>\n</li>\n<li><p>考验定律</p>\n<p> 男人考验女人：约会迟到；女人考验男人：逛街啥都要</p>\n</li>\n<li><p>求爱定律</p>\n<p> 男追女如隔座山；女追男如隔张纸</p>\n</li>\n<li><p>热恋定律</p>\n<p> 热恋的男人：再笨也有用不完的小聪明；热恋的女人：再精明也会变得很愚蠢</p>\n</li>\n<li><p>情人定律</p>\n<p> 男人相当女人的初恋情人，女人想做男人的最后情人</p>\n</li>\n<li><p>下一个定律</p>\n<p> 双方都会总觉得下一个会更好</p>\n</li>\n<li><p>说话定律</p>\n<p> 男人酒后话多，女人婚后话多</p>\n</li>\n<li><p>区别定律</p>\n<p> 男人不修边幅的时候，人们会质疑他的女朋友；女人仪容不整时，人们会同情她的那朋友</p>\n</li>\n<li><p>成功背后定律</p>\n<p>一个成功男人的背后，总有一个坚强的女人；一个成功女人的背后，总有一个伤她心的男人</p>\n</li>\n</ol>\n<h2 id=\"XI-邻近性原则\"><a href=\"#XI-邻近性原则\" class=\"headerlink\" title=\"XI. 邻近性原则\"></a>XI. 邻近性原则</h2><p>在人际交往中，距离的接近程度与交往的频率有直接的关系</p>\n<p>交往几率：隔壁邻居：41%，隔一户：22%，隔三户：10%</p>\n<h2 id=\"XII-吊桥效应\"><a href=\"#XII-吊桥效应\" class=\"headerlink\" title=\"XII. 吊桥效应\"></a>XII. 吊桥效应</h2><p>在危桥上遇到双方，都会更加好感。</p>\n<p>人们在遇到危险导致的心跳加速，会误以为是遇到心动的双方导致的。</p>\n<p>研究表明，如果两个人见面时，精神属于非常激动的状态，那么他们很容的得到对方的喜爱。</p>\n<ol>\n<li>坐过山车</li>\n<li>恐怖电影</li>\n<li>公路狂飙</li>\n</ol>\n<h2 id=\"XIII-古烈治效应\"><a href=\"#XIII-古烈治效应\" class=\"headerlink\" title=\"XIII. 古烈治效应\"></a>XIII. 古烈治效应</h2><p>喜新厌旧</p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>出来混~迟早是要学的。</p>\n<p>整理自视频: <a href=\"http://i.youku.com/u/UMTQzOTMzOTY5Mg==\">屌丝心理学</a></p>\n</blockquote>\n<h2 id=\"I-超限效应\"><a href=\"#I-超限效应\" class=\"headerlink\" title=\"I. 超限效应\"></a>I. 超限效应</h2><p>注意，火候、分寸、尺度。学会自我克制</p>\n<p>马克吐温，牧师演讲（捐款-太久-偷两元钱）</p>","more":"<h2 id=\"II-登门槛效应\"><a href=\"#II-登门槛效应\" class=\"headerlink\" title=\"II. 登门槛效应\"></a>II. 登门槛效应</h2><p>骆驼，风沙，骆驼（头、脖子、身子、被挤出去）。</p>\n<p>做较小的需求、再达到最大的要求。</p>\n<h2 id=\"III-青蛙效应\"><a href=\"#III-青蛙效应\" class=\"headerlink\" title=\"III. 青蛙效应\"></a>III. 青蛙效应</h2><p>生于忧患死于安乐，不要沉迷过去</p>\n<h2 id=\"IV-巴莱多定律\"><a href=\"#IV-巴莱多定律\" class=\"headerlink\" title=\"IV. 巴莱多定律\"></a>IV. 巴莱多定律</h2><p>28定律。</p>\n<p>重要20%，次要80%。</p>\n<p>现实社会并不是只有白和黑，不要平均地分析、处理和看待问题，学会以少博多，努力奋斗和付出。</p>\n<h2 id=\"V-禁果效应\"><a href=\"#V-禁果效应\" class=\"headerlink\" title=\"V. 禁果效应\"></a>V. 禁果效应</h2><ol>\n<li>好奇心</li>\n<li>逆反心理</li>\n</ol>\n<p>人追求自由的天性</p>\n<h2 id=\"VI-海格力斯效应\"><a href=\"#VI-海格力斯效应\" class=\"headerlink\" title=\"VI. 海格力斯效应\"></a>VI. 海格力斯效应</h2><p>海格力斯，丑陋的东西，打仇恨袋，大了，越打越大，不理会就变小。</p>\n<p>要学会宽容、懂得忍让</p>\n<h2 id=\"VII-巴纳姆效应\"><a href=\"#VII-巴纳姆效应\" class=\"headerlink\" title=\"VII. 巴纳姆效应\"></a>VII. 巴纳姆效应</h2><p>人们常常认为，一种笼统的、一般性的描述，十分准确的揭示了自己的特点。</p>\n<p>星象、星座等都是基于这效应。</p>\n<p>越具有普遍性，越能让你对号入座，在不知不觉中，掉入平均描述的陷阱。</p>\n<p>预设被强迫成立。</p>\n<ol>\n<li>学会面对自己，尽量不要以外在的标准，盲目的判断与衡量自己</li>\n<li>培养一种收集信息的能力，和敏锐的判断力，抵触一些迷信的评价性的东西</li>\n<li>明确自己的优点和缺点，聪明的人能看到他人之长，并且补己之短。</li>\n</ol>\n<h2 id=\"VIII-布里丹效应\"><a href=\"#VIII-布里丹效应\" class=\"headerlink\" title=\"VIII. 布里丹效应\"></a>VIII. 布里丹效应</h2><p>遇到人生岔人口，看清你就大胆走。</p>\n<p>布里丹养了一头小毛驴，有一天送草料的出于对哲学家的</p>\n<p>要活在当下，不要好高骛远的痴想</p>\n<p>只选最合适的，不选最好的。</p>\n<p>把眼前的机会抓住，把手头的事情做好。</p>\n<p>制定目标要有可行性。</p>\n<h2 id=\"IX-蔡戈尼效应\"><a href=\"#IX-蔡戈尼效应\" class=\"headerlink\" title=\"IX. 蔡戈尼效应\"></a>IX. 蔡戈尼效应</h2><p>爱情虐你千万遍，始终不忘是初恋</p>\n<p>一般人对已完成的极易忘怀，而对</p>\n<h4 id=\"两个极端\"><a href=\"#两个极端\" class=\"headerlink\" title=\"两个极端\"></a>两个极端</h4><ol>\n<li>强迫偏执狂</li>\n<li>热血坚持不长</li>\n</ol>\n<h4 id=\"如何避免\"><a href=\"#如何避免\" class=\"headerlink\" title=\"如何避免\"></a>如何避免</h4><ol>\n<li>如果不值得去做，就勇敢的放弃</li>\n<li>一点一滴的强化意志力，先从一件小事来训练自己</li>\n<li>不要总以为有很多时间做。想到就去实现</li>\n<li>劳逸结合（当觉得还有一个小时才能完成的时候，最好休息一下）</li>\n</ol>\n<h2 id=\"X-交往定律\"><a href=\"#X-交往定律\" class=\"headerlink\" title=\"X. 交往定律\"></a>X. 交往定律</h2><p>千里有缘麻辣烫，无缘给钱都不让。</p>\n<ol>\n<li><p>吸引定律</p>\n<p> 女人的百媚娇艳，是男人掉入情网的『导火线』；男人的『蜜语甜言』，是女人乐与背叛的谎言。</p>\n</li>\n<li><p>主动定律</p>\n<p> 男人：迅速出击；女人：缓慢渗透</p>\n</li>\n<li><p>考验定律</p>\n<p> 男人考验女人：约会迟到；女人考验男人：逛街啥都要</p>\n</li>\n<li><p>求爱定律</p>\n<p> 男追女如隔座山；女追男如隔张纸</p>\n</li>\n<li><p>热恋定律</p>\n<p> 热恋的男人：再笨也有用不完的小聪明；热恋的女人：再精明也会变得很愚蠢</p>\n</li>\n<li><p>情人定律</p>\n<p> 男人相当女人的初恋情人，女人想做男人的最后情人</p>\n</li>\n<li><p>下一个定律</p>\n<p> 双方都会总觉得下一个会更好</p>\n</li>\n<li><p>说话定律</p>\n<p> 男人酒后话多，女人婚后话多</p>\n</li>\n<li><p>区别定律</p>\n<p> 男人不修边幅的时候，人们会质疑他的女朋友；女人仪容不整时，人们会同情她的那朋友</p>\n</li>\n<li><p>成功背后定律</p>\n<p>一个成功男人的背后，总有一个坚强的女人；一个成功女人的背后，总有一个伤她心的男人</p>\n</li>\n</ol>\n<h2 id=\"XI-邻近性原则\"><a href=\"#XI-邻近性原则\" class=\"headerlink\" title=\"XI. 邻近性原则\"></a>XI. 邻近性原则</h2><p>在人际交往中，距离的接近程度与交往的频率有直接的关系</p>\n<p>交往几率：隔壁邻居：41%，隔一户：22%，隔三户：10%</p>\n<h2 id=\"XII-吊桥效应\"><a href=\"#XII-吊桥效应\" class=\"headerlink\" title=\"XII. 吊桥效应\"></a>XII. 吊桥效应</h2><p>在危桥上遇到双方，都会更加好感。</p>\n<p>人们在遇到危险导致的心跳加速，会误以为是遇到心动的双方导致的。</p>\n<p>研究表明，如果两个人见面时，精神属于非常激动的状态，那么他们很容的得到对方的喜爱。</p>\n<ol>\n<li>坐过山车</li>\n<li>恐怖电影</li>\n<li>公路狂飙</li>\n</ol>\n<h2 id=\"XIII-古烈治效应\"><a href=\"#XIII-古烈治效应\" class=\"headerlink\" title=\"XIII. 古烈治效应\"></a>XIII. 古烈治效应</h2><p>喜新厌旧</p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"Dalvik","date":"2014-12-25T00:35:03.000Z","_content":"\n## 什么是Dalvik?\n\n是Java虚拟机，Android L 之前Android的核心组成部分之一(Android L 后被ART取代)。\n\n<!--more-->\n\n#### 作者\n\nDan Bornstein\n\n#### 名字来源\n\n作者祖先曾经居住过的小渔村（位于冰岛）:Dalvík\n\n#### 诞生缘由\n\n- **业界猜测:** 是对Sun尝试控制和保护来自Java ME收入来源的一次反应，以及对建立OpenJDK统辖理事会迟迟未果的回答。\n\n- **官方解释:** Dalvik是对解决目前Java ME平台上分裂(与已有的JVM)的一次尝试，也是为了提供一个拥有较少限制许可证的平台。\n\n## 作用是什么?\n\n支持.dev(Dalvik Executable)运行\n\n#### .dex\n\n专为Dalvik设计的一种压缩格式（Java应用程序），适合内存和处理器速度有限的系统\n\n#### 优化\n\nDalvik经过优化，允许有限内存中同时运行多个 虚拟机 实例，并在独立进程运行防止相互影响。\n\n## 业界评价\n\n一直被用户指责为拖慢安卓系统运行速度不如IOS的根源。2014年的Google I/O大会上，在Android L 中被Google 删除，取而代之的是ART。\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/dalvik.md","raw":"title: Dalvik\ndate: 2014-12-25 08:35:03\npermalink: 2014/12/25/dalvik\ntags:\n- Dalvik\n- 虚拟机\n\n---\n\n## 什么是Dalvik?\n\n是Java虚拟机，Android L 之前Android的核心组成部分之一(Android L 后被ART取代)。\n\n<!--more-->\n\n#### 作者\n\nDan Bornstein\n\n#### 名字来源\n\n作者祖先曾经居住过的小渔村（位于冰岛）:Dalvík\n\n#### 诞生缘由\n\n- **业界猜测:** 是对Sun尝试控制和保护来自Java ME收入来源的一次反应，以及对建立OpenJDK统辖理事会迟迟未果的回答。\n\n- **官方解释:** Dalvik是对解决目前Java ME平台上分裂(与已有的JVM)的一次尝试，也是为了提供一个拥有较少限制许可证的平台。\n\n## 作用是什么?\n\n支持.dev(Dalvik Executable)运行\n\n#### .dex\n\n专为Dalvik设计的一种压缩格式（Java应用程序），适合内存和处理器速度有限的系统\n\n#### 优化\n\nDalvik经过优化，允许有限内存中同时运行多个 虚拟机 实例，并在独立进程运行防止相互影响。\n\n## 业界评价\n\n一直被用户指责为拖慢安卓系统运行速度不如IOS的根源。2014年的Google I/O大会上，在Android L 中被Google 删除，取而代之的是ART。\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2014/12/25/dalvik","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66im002a95butjqa1oyc","content":"<h2 id=\"什么是Dalvik\"><a href=\"#什么是Dalvik\" class=\"headerlink\" title=\"什么是Dalvik?\"></a>什么是Dalvik?</h2><p>是Java虚拟机，Android L 之前Android的核心组成部分之一(Android L 后被ART取代)。</p>\n<a id=\"more\"></a>\n<h4 id=\"作者\"><a href=\"#作者\" class=\"headerlink\" title=\"作者\"></a>作者</h4><p>Dan Bornstein</p>\n<h4 id=\"名字来源\"><a href=\"#名字来源\" class=\"headerlink\" title=\"名字来源\"></a>名字来源</h4><p>作者祖先曾经居住过的小渔村（位于冰岛）:Dalvík</p>\n<h4 id=\"诞生缘由\"><a href=\"#诞生缘由\" class=\"headerlink\" title=\"诞生缘由\"></a>诞生缘由</h4><ul>\n<li><p><strong>业界猜测:</strong> 是对Sun尝试控制和保护来自Java ME收入来源的一次反应，以及对建立OpenJDK统辖理事会迟迟未果的回答。</p>\n</li>\n<li><p><strong>官方解释:</strong> Dalvik是对解决目前Java ME平台上分裂(与已有的JVM)的一次尝试，也是为了提供一个拥有较少限制许可证的平台。</p>\n</li>\n</ul>\n<h2 id=\"作用是什么\"><a href=\"#作用是什么\" class=\"headerlink\" title=\"作用是什么?\"></a>作用是什么?</h2><p>支持.dev(Dalvik Executable)运行</p>\n<h4 id=\"dex\"><a href=\"#dex\" class=\"headerlink\" title=\".dex\"></a>.dex</h4><p>专为Dalvik设计的一种压缩格式（Java应用程序），适合内存和处理器速度有限的系统</p>\n<h4 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h4><p>Dalvik经过优化，允许有限内存中同时运行多个 虚拟机 实例，并在独立进程运行防止相互影响。</p>\n<h2 id=\"业界评价\"><a href=\"#业界评价\" class=\"headerlink\" title=\"业界评价\"></a>业界评价</h2><p>一直被用户指责为拖慢安卓系统运行速度不如IOS的根源。2014年的Google I/O大会上，在Android L 中被Google 删除，取而代之的是ART。</p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<h2 id=\"什么是Dalvik\"><a href=\"#什么是Dalvik\" class=\"headerlink\" title=\"什么是Dalvik?\"></a>什么是Dalvik?</h2><p>是Java虚拟机，Android L 之前Android的核心组成部分之一(Android L 后被ART取代)。</p>","more":"<h4 id=\"作者\"><a href=\"#作者\" class=\"headerlink\" title=\"作者\"></a>作者</h4><p>Dan Bornstein</p>\n<h4 id=\"名字来源\"><a href=\"#名字来源\" class=\"headerlink\" title=\"名字来源\"></a>名字来源</h4><p>作者祖先曾经居住过的小渔村（位于冰岛）:Dalvík</p>\n<h4 id=\"诞生缘由\"><a href=\"#诞生缘由\" class=\"headerlink\" title=\"诞生缘由\"></a>诞生缘由</h4><ul>\n<li><p><strong>业界猜测:</strong> 是对Sun尝试控制和保护来自Java ME收入来源的一次反应，以及对建立OpenJDK统辖理事会迟迟未果的回答。</p>\n</li>\n<li><p><strong>官方解释:</strong> Dalvik是对解决目前Java ME平台上分裂(与已有的JVM)的一次尝试，也是为了提供一个拥有较少限制许可证的平台。</p>\n</li>\n</ul>\n<h2 id=\"作用是什么\"><a href=\"#作用是什么\" class=\"headerlink\" title=\"作用是什么?\"></a>作用是什么?</h2><p>支持.dev(Dalvik Executable)运行</p>\n<h4 id=\"dex\"><a href=\"#dex\" class=\"headerlink\" title=\".dex\"></a>.dex</h4><p>专为Dalvik设计的一种压缩格式（Java应用程序），适合内存和处理器速度有限的系统</p>\n<h4 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h4><p>Dalvik经过优化，允许有限内存中同时运行多个 虚拟机 实例，并在独立进程运行防止相互影响。</p>\n<h2 id=\"业界评价\"><a href=\"#业界评价\" class=\"headerlink\" title=\"业界评价\"></a>业界评价</h2><p>一直被用户指责为拖慢安卓系统运行速度不如IOS的根源。2014年的Google I/O大会上，在Android L 中被Google 删除，取而代之的是ART。</p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"ConstraintLayout","date":"2016-08-03T00:33:03.000Z","_content":"\n> 目前`ConstraintLayout`(alpha-4)还是打包到`support library`中的，因此 属性前缀 `app:` 而非 `android:`，以后应该会放到包的命名区间。\n\n## I. 位置:\n\n### 1. 锚点\n\n> View相对与其他元件(同级别View、父节点View、guideline)是如何布局的。\n\n<!-- more -->\n\n#### 格式\n\n```\nlayout_constraint[SourceAnchor]_[TargetAnchor]=\"[TargetId]\"\n```\n\n其中`SourceAnchor`/`TargetAnchor` 可以是:\n\n- Top,Bottom,Start(Left),End(Right)\n- CenterX、CenterY\n- Baseline(只有Text-Based的View支持)\n\n### 2. Bias:\n\n- 横向比重: `layout_constraintHorizontal_bias=左方占比`\n- 纵向比重: `layout_constraintVertical_bias=上方占比`\n\n### 3. Guidelines:\n\n> 特征:\n> 1. measure大小始终是0;\n> 2.它的`visibility`始终是`View.GONE`\n\n#### 特有参数:\n\n- 到开始边缘的绝对距离: `layout_constraintGuide_begin`\n- 到结束边缘的绝对距离: `layout_constraintGuide_end`\n- 到开始边缘的占比百分数: `layout_constraintGuide_Percent`\n\n> P.S: Guideline是纵向还是横向的，由`android:orientation=\"<vertical|horizontal>\"`决定。\n\n### 4. 编辑器辅助\n\n`layout_editor_absoluteX`与`layout_editor_absoluteY`是只有在编辑器中使用，设备上运行时这些是没有效果的。参数空间是在: `http://schemas.android.com/tools`。\n\n## II. 大小\n\n\n### 1. 没有了`match_parent`\n\n**可替代** : 将`layout_width`/`layout_height`设为`0dp`: 填充满附属的锚点布局。\n\n**原因** : 但是更加灵活，可以类似以前的`layout_weight`使用。\n\n### 2. 支持长宽比\n\n`layout_constraintDimensionRatio` 提供长宽比如: `4:3`。在给了这个参数的情况下，需要提供任意一边的值(指定值或`wrap_content`)\n\n## III. 原理与性能\n\n> 添加子View到`ContraintLayout`时，所有XML中`layout_`前缀的属性都会添加到`LayoutParams`实例中。\n\n`ConstraintLayout`子View中的`LayoutParams`存储着`ConstraintWidget`，`ConstraintWidget`用于逻辑运算与分析，并且每个`ConstraintWidget`与`ConstraintLayout`中的`ConstraintWidgetContainer`相联系。\n\n![ClassHierarchy](/img/constraint-layout_classHierarchy.png)\n\n`ConstraintWidget`持有所有关于View位置与大小的信息，在measure与layout时作为数据依据。\n\n![ConstraintWidget](/img/constraint-layout_constraintWidget.png)\n\n在layout的期间，会根据`LayoutParams`中constraint的信息，为`ConstraintWidget`中每个连接的锚点定义`ConstraintAnchor`。\n\n![AnchorConnection](/img/constraint-layout_anchorConnection.png)\n\n### 1. measure\n\n![MeasureFlow](/img/constraint-layout_measureFlow.png)\n\n> 这里的\"Any Size\"View，指的是XML中给的长或宽为`0dp`的View。\n\n\"Any Size\"View，需要两次运算，首次会直接不做检查在`ConstraintLayout#internalMeasureChildren`中直接使用`WRAP_CONTENT`用于计算大小(`ViewGroup#getChildMeasureSpec`)，第二次根据其他的计算结果在`ConstraintLayout#onMeasure`中计算出真正的大小。\n\n> P.S: `Add Constraints to Equation Solver`、`Minimize Linear System`、`Update Child Bounds from solution` 都是在`ConstraintLayout#onMeasure`中在执行的`ConstraintLayout#internalMeasureChildren`。该算法计通过`LinearSystem`算出了View的bound。\n\n### 2. layout\n\n由于上面在measure时已经估算出各view的大小与位置，因此在此之后`ConstraintWidget`中已经有对应View适当的bound了。因此在`onLayout`中只需要遍历所有子View，设置他们的bound值就行，十分轻量。\n\n```java\nfor(int i = 0; i < getChildCount(); ++i) {\n  View child = this.getChildAt(i);\n  ConstraintLayout.LayoutParams params =\n      (ConstraintLayout.LayoutParams)child.getLayoutParams();\n  ConstraintWidget widget = params.widget;\n  int l = widget.getDrawX();\n  int t = widget.getDrawY();\n  int r = l + widget.getWidth();\n  int b = t + widget.getHeight();\n  child.layout(l, t, r, b);\n}\n```\n\n## IV. 性能方面\n\n由于`ConstraintLayout`有效的优化了layout与draw，并且从质上有效的减少了层级，因此相同的布局呈现上，通常情况下`ConstrantLayout`的性能都比其他的Layout性能要好。\n\n---\n\n> 文中图片全部来源: http://wiresareobsolete.com/2016/07/constraintlayout-part-2/\n\n- [ConstraintLayout, Inside and Out: Part 1](http://wiresareobsolete.com/2016/07/constraintlayout-part-1/)\n- [ConstraintLayout, Inside and Out: Part 2](http://wiresareobsolete.com/2016/07/constraintlayout-part-2/)\n- [ConstraintLayout on Android – How Ready Is It?](http://leaks.wanari.com/2016/05/31/constraintlayout-android/)\n\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/constraint-layout.md","raw":"title: ConstraintLayout\ndate: 2016-08-03 08:33:03\npermalink: 2016/08/03/constraint-layout\ntags:\n- Layout\n- Android\n- UI\n\n---\n\n> 目前`ConstraintLayout`(alpha-4)还是打包到`support library`中的，因此 属性前缀 `app:` 而非 `android:`，以后应该会放到包的命名区间。\n\n## I. 位置:\n\n### 1. 锚点\n\n> View相对与其他元件(同级别View、父节点View、guideline)是如何布局的。\n\n<!-- more -->\n\n#### 格式\n\n```\nlayout_constraint[SourceAnchor]_[TargetAnchor]=\"[TargetId]\"\n```\n\n其中`SourceAnchor`/`TargetAnchor` 可以是:\n\n- Top,Bottom,Start(Left),End(Right)\n- CenterX、CenterY\n- Baseline(只有Text-Based的View支持)\n\n### 2. Bias:\n\n- 横向比重: `layout_constraintHorizontal_bias=左方占比`\n- 纵向比重: `layout_constraintVertical_bias=上方占比`\n\n### 3. Guidelines:\n\n> 特征:\n> 1. measure大小始终是0;\n> 2.它的`visibility`始终是`View.GONE`\n\n#### 特有参数:\n\n- 到开始边缘的绝对距离: `layout_constraintGuide_begin`\n- 到结束边缘的绝对距离: `layout_constraintGuide_end`\n- 到开始边缘的占比百分数: `layout_constraintGuide_Percent`\n\n> P.S: Guideline是纵向还是横向的，由`android:orientation=\"<vertical|horizontal>\"`决定。\n\n### 4. 编辑器辅助\n\n`layout_editor_absoluteX`与`layout_editor_absoluteY`是只有在编辑器中使用，设备上运行时这些是没有效果的。参数空间是在: `http://schemas.android.com/tools`。\n\n## II. 大小\n\n\n### 1. 没有了`match_parent`\n\n**可替代** : 将`layout_width`/`layout_height`设为`0dp`: 填充满附属的锚点布局。\n\n**原因** : 但是更加灵活，可以类似以前的`layout_weight`使用。\n\n### 2. 支持长宽比\n\n`layout_constraintDimensionRatio` 提供长宽比如: `4:3`。在给了这个参数的情况下，需要提供任意一边的值(指定值或`wrap_content`)\n\n## III. 原理与性能\n\n> 添加子View到`ContraintLayout`时，所有XML中`layout_`前缀的属性都会添加到`LayoutParams`实例中。\n\n`ConstraintLayout`子View中的`LayoutParams`存储着`ConstraintWidget`，`ConstraintWidget`用于逻辑运算与分析，并且每个`ConstraintWidget`与`ConstraintLayout`中的`ConstraintWidgetContainer`相联系。\n\n![ClassHierarchy](/img/constraint-layout_classHierarchy.png)\n\n`ConstraintWidget`持有所有关于View位置与大小的信息，在measure与layout时作为数据依据。\n\n![ConstraintWidget](/img/constraint-layout_constraintWidget.png)\n\n在layout的期间，会根据`LayoutParams`中constraint的信息，为`ConstraintWidget`中每个连接的锚点定义`ConstraintAnchor`。\n\n![AnchorConnection](/img/constraint-layout_anchorConnection.png)\n\n### 1. measure\n\n![MeasureFlow](/img/constraint-layout_measureFlow.png)\n\n> 这里的\"Any Size\"View，指的是XML中给的长或宽为`0dp`的View。\n\n\"Any Size\"View，需要两次运算，首次会直接不做检查在`ConstraintLayout#internalMeasureChildren`中直接使用`WRAP_CONTENT`用于计算大小(`ViewGroup#getChildMeasureSpec`)，第二次根据其他的计算结果在`ConstraintLayout#onMeasure`中计算出真正的大小。\n\n> P.S: `Add Constraints to Equation Solver`、`Minimize Linear System`、`Update Child Bounds from solution` 都是在`ConstraintLayout#onMeasure`中在执行的`ConstraintLayout#internalMeasureChildren`。该算法计通过`LinearSystem`算出了View的bound。\n\n### 2. layout\n\n由于上面在measure时已经估算出各view的大小与位置，因此在此之后`ConstraintWidget`中已经有对应View适当的bound了。因此在`onLayout`中只需要遍历所有子View，设置他们的bound值就行，十分轻量。\n\n```java\nfor(int i = 0; i < getChildCount(); ++i) {\n  View child = this.getChildAt(i);\n  ConstraintLayout.LayoutParams params =\n      (ConstraintLayout.LayoutParams)child.getLayoutParams();\n  ConstraintWidget widget = params.widget;\n  int l = widget.getDrawX();\n  int t = widget.getDrawY();\n  int r = l + widget.getWidth();\n  int b = t + widget.getHeight();\n  child.layout(l, t, r, b);\n}\n```\n\n## IV. 性能方面\n\n由于`ConstraintLayout`有效的优化了layout与draw，并且从质上有效的减少了层级，因此相同的布局呈现上，通常情况下`ConstrantLayout`的性能都比其他的Layout性能要好。\n\n---\n\n> 文中图片全部来源: http://wiresareobsolete.com/2016/07/constraintlayout-part-2/\n\n- [ConstraintLayout, Inside and Out: Part 1](http://wiresareobsolete.com/2016/07/constraintlayout-part-1/)\n- [ConstraintLayout, Inside and Out: Part 2](http://wiresareobsolete.com/2016/07/constraintlayout-part-2/)\n- [ConstraintLayout on Android – How Ready Is It?](http://leaks.wanari.com/2016/05/31/constraintlayout-android/)\n\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2016/08/03/constraint-layout","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66io002c95buqm9fzaf2","content":"<blockquote>\n<p>目前<code>ConstraintLayout</code>(alpha-4)还是打包到<code>support library</code>中的，因此 属性前缀 <code>app:</code> 而非 <code>android:</code>，以后应该会放到包的命名区间。</p>\n</blockquote>\n<h2 id=\"I-位置\"><a href=\"#I-位置\" class=\"headerlink\" title=\"I. 位置:\"></a>I. 位置:</h2><h3 id=\"1-锚点\"><a href=\"#1-锚点\" class=\"headerlink\" title=\"1. 锚点\"></a>1. 锚点</h3><blockquote>\n<p>View相对与其他元件(同级别View、父节点View、guideline)是如何布局的。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h4 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a>格式</h4><figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">layout_constraint<span class=\"string\">[SourceAnchor]</span>_<span class=\"string\">[TargetAnchor]</span>=<span class=\"string\">\"[TargetId]\"</span></div></pre></td></tr></table></figure>\n<p>其中<code>SourceAnchor</code>/<code>TargetAnchor</code> 可以是:</p>\n<ul>\n<li>Top,Bottom,Start(Left),End(Right)</li>\n<li>CenterX、CenterY</li>\n<li>Baseline(只有Text-Based的View支持)</li>\n</ul>\n<h3 id=\"2-Bias\"><a href=\"#2-Bias\" class=\"headerlink\" title=\"2. Bias:\"></a>2. Bias:</h3><ul>\n<li>横向比重: <code>layout_constraintHorizontal_bias=左方占比</code></li>\n<li>纵向比重: <code>layout_constraintVertical_bias=上方占比</code></li>\n</ul>\n<h3 id=\"3-Guidelines\"><a href=\"#3-Guidelines\" class=\"headerlink\" title=\"3. Guidelines:\"></a>3. Guidelines:</h3><blockquote>\n<p>特征:</p>\n<ol>\n<li>measure大小始终是0;<br>2.它的<code>visibility</code>始终是<code>View.GONE</code></li>\n</ol>\n</blockquote>\n<h4 id=\"特有参数\"><a href=\"#特有参数\" class=\"headerlink\" title=\"特有参数:\"></a>特有参数:</h4><ul>\n<li>到开始边缘的绝对距离: <code>layout_constraintGuide_begin</code></li>\n<li>到结束边缘的绝对距离: <code>layout_constraintGuide_end</code></li>\n<li>到开始边缘的占比百分数: <code>layout_constraintGuide_Percent</code></li>\n</ul>\n<blockquote>\n<p>P.S: Guideline是纵向还是横向的，由<code>android:orientation=&quot;&lt;vertical|horizontal&gt;&quot;</code>决定。</p>\n</blockquote>\n<h3 id=\"4-编辑器辅助\"><a href=\"#4-编辑器辅助\" class=\"headerlink\" title=\"4. 编辑器辅助\"></a>4. 编辑器辅助</h3><p><code>layout_editor_absoluteX</code>与<code>layout_editor_absoluteY</code>是只有在编辑器中使用，设备上运行时这些是没有效果的。参数空间是在: <code>http://schemas.android.com/tools</code>。</p>\n<h2 id=\"II-大小\"><a href=\"#II-大小\" class=\"headerlink\" title=\"II. 大小\"></a>II. 大小</h2><h3 id=\"1-没有了match-parent\"><a href=\"#1-没有了match-parent\" class=\"headerlink\" title=\"1. 没有了match_parent\"></a>1. 没有了<code>match_parent</code></h3><p><strong>可替代</strong> : 将<code>layout_width</code>/<code>layout_height</code>设为<code>0dp</code>: 填充满附属的锚点布局。</p>\n<p><strong>原因</strong> : 但是更加灵活，可以类似以前的<code>layout_weight</code>使用。</p>\n<h3 id=\"2-支持长宽比\"><a href=\"#2-支持长宽比\" class=\"headerlink\" title=\"2. 支持长宽比\"></a>2. 支持长宽比</h3><p><code>layout_constraintDimensionRatio</code> 提供长宽比如: <code>4:3</code>。在给了这个参数的情况下，需要提供任意一边的值(指定值或<code>wrap_content</code>)</p>\n<h2 id=\"III-原理与性能\"><a href=\"#III-原理与性能\" class=\"headerlink\" title=\"III. 原理与性能\"></a>III. 原理与性能</h2><blockquote>\n<p>添加子View到<code>ContraintLayout</code>时，所有XML中<code>layout_</code>前缀的属性都会添加到<code>LayoutParams</code>实例中。</p>\n</blockquote>\n<p><code>ConstraintLayout</code>子View中的<code>LayoutParams</code>存储着<code>ConstraintWidget</code>，<code>ConstraintWidget</code>用于逻辑运算与分析，并且每个<code>ConstraintWidget</code>与<code>ConstraintLayout</code>中的<code>ConstraintWidgetContainer</code>相联系。</p>\n<p><img src=\"/img/constraint-layout_classHierarchy.png\" alt=\"ClassHierarchy\"></p>\n<p><code>ConstraintWidget</code>持有所有关于View位置与大小的信息，在measure与layout时作为数据依据。</p>\n<p><img src=\"/img/constraint-layout_constraintWidget.png\" alt=\"ConstraintWidget\"></p>\n<p>在layout的期间，会根据<code>LayoutParams</code>中constraint的信息，为<code>ConstraintWidget</code>中每个连接的锚点定义<code>ConstraintAnchor</code>。</p>\n<p><img src=\"/img/constraint-layout_anchorConnection.png\" alt=\"AnchorConnection\"></p>\n<h3 id=\"1-measure\"><a href=\"#1-measure\" class=\"headerlink\" title=\"1. measure\"></a>1. measure</h3><p><img src=\"/img/constraint-layout_measureFlow.png\" alt=\"MeasureFlow\"></p>\n<blockquote>\n<p>这里的”Any Size”View，指的是XML中给的长或宽为<code>0dp</code>的View。</p>\n</blockquote>\n<p>“Any Size”View，需要两次运算，首次会直接不做检查在<code>ConstraintLayout#internalMeasureChildren</code>中直接使用<code>WRAP_CONTENT</code>用于计算大小(<code>ViewGroup#getChildMeasureSpec</code>)，第二次根据其他的计算结果在<code>ConstraintLayout#onMeasure</code>中计算出真正的大小。</p>\n<blockquote>\n<p>P.S: <code>Add Constraints to Equation Solver</code>、<code>Minimize Linear System</code>、<code>Update Child Bounds from solution</code> 都是在<code>ConstraintLayout#onMeasure</code>中在执行的<code>ConstraintLayout#internalMeasureChildren</code>。该算法计通过<code>LinearSystem</code>算出了View的bound。</p>\n</blockquote>\n<h3 id=\"2-layout\"><a href=\"#2-layout\" class=\"headerlink\" title=\"2. layout\"></a>2. layout</h3><p>由于上面在measure时已经估算出各view的大小与位置，因此在此之后<code>ConstraintWidget</code>中已经有对应View适当的bound了。因此在<code>onLayout</code>中只需要遍历所有子View，设置他们的bound值就行，十分轻量。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; getChildCount(); ++i) &#123;</div><div class=\"line\">  View child = <span class=\"keyword\">this</span>.getChildAt(i);</div><div class=\"line\">  ConstraintLayout.LayoutParams params =</div><div class=\"line\">      (ConstraintLayout.LayoutParams)child.getLayoutParams();</div><div class=\"line\">  ConstraintWidget widget = params.widget;</div><div class=\"line\">  <span class=\"keyword\">int</span> l = widget.getDrawX();</div><div class=\"line\">  <span class=\"keyword\">int</span> t = widget.getDrawY();</div><div class=\"line\">  <span class=\"keyword\">int</span> r = l + widget.getWidth();</div><div class=\"line\">  <span class=\"keyword\">int</span> b = t + widget.getHeight();</div><div class=\"line\">  child.layout(l, t, r, b);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"IV-性能方面\"><a href=\"#IV-性能方面\" class=\"headerlink\" title=\"IV. 性能方面\"></a>IV. 性能方面</h2><p>由于<code>ConstraintLayout</code>有效的优化了layout与draw，并且从质上有效的减少了层级，因此相同的布局呈现上，通常情况下<code>ConstrantLayout</code>的性能都比其他的Layout性能要好。</p>\n<hr>\n<blockquote>\n<p>文中图片全部来源: <a href=\"http://wiresareobsolete.com/2016/07/constraintlayout-part-2/\" target=\"_blank\" rel=\"external\">http://wiresareobsolete.com/2016/07/constraintlayout-part-2/</a></p>\n</blockquote>\n<ul>\n<li><a href=\"http://wiresareobsolete.com/2016/07/constraintlayout-part-1/\" target=\"_blank\" rel=\"external\">ConstraintLayout, Inside and Out: Part 1</a></li>\n<li><a href=\"http://wiresareobsolete.com/2016/07/constraintlayout-part-2/\" target=\"_blank\" rel=\"external\">ConstraintLayout, Inside and Out: Part 2</a></li>\n<li><a href=\"http://leaks.wanari.com/2016/05/31/constraintlayout-android/\" target=\"_blank\" rel=\"external\">ConstraintLayout on Android – How Ready Is It?</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>目前<code>ConstraintLayout</code>(alpha-4)还是打包到<code>support library</code>中的，因此 属性前缀 <code>app:</code> 而非 <code>android:</code>，以后应该会放到包的命名区间。</p>\n</blockquote>\n<h2 id=\"I-位置\"><a href=\"#I-位置\" class=\"headerlink\" title=\"I. 位置:\"></a>I. 位置:</h2><h3 id=\"1-锚点\"><a href=\"#1-锚点\" class=\"headerlink\" title=\"1. 锚点\"></a>1. 锚点</h3><blockquote>\n<p>View相对与其他元件(同级别View、父节点View、guideline)是如何布局的。</p>\n</blockquote>","more":"<h4 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a>格式</h4><figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">layout_constraint<span class=\"string\">[SourceAnchor]</span>_<span class=\"string\">[TargetAnchor]</span>=<span class=\"string\">\"[TargetId]\"</span></div></pre></td></tr></table></figure>\n<p>其中<code>SourceAnchor</code>/<code>TargetAnchor</code> 可以是:</p>\n<ul>\n<li>Top,Bottom,Start(Left),End(Right)</li>\n<li>CenterX、CenterY</li>\n<li>Baseline(只有Text-Based的View支持)</li>\n</ul>\n<h3 id=\"2-Bias\"><a href=\"#2-Bias\" class=\"headerlink\" title=\"2. Bias:\"></a>2. Bias:</h3><ul>\n<li>横向比重: <code>layout_constraintHorizontal_bias=左方占比</code></li>\n<li>纵向比重: <code>layout_constraintVertical_bias=上方占比</code></li>\n</ul>\n<h3 id=\"3-Guidelines\"><a href=\"#3-Guidelines\" class=\"headerlink\" title=\"3. Guidelines:\"></a>3. Guidelines:</h3><blockquote>\n<p>特征:</p>\n<ol>\n<li>measure大小始终是0;<br>2.它的<code>visibility</code>始终是<code>View.GONE</code></li>\n</ol>\n</blockquote>\n<h4 id=\"特有参数\"><a href=\"#特有参数\" class=\"headerlink\" title=\"特有参数:\"></a>特有参数:</h4><ul>\n<li>到开始边缘的绝对距离: <code>layout_constraintGuide_begin</code></li>\n<li>到结束边缘的绝对距离: <code>layout_constraintGuide_end</code></li>\n<li>到开始边缘的占比百分数: <code>layout_constraintGuide_Percent</code></li>\n</ul>\n<blockquote>\n<p>P.S: Guideline是纵向还是横向的，由<code>android:orientation=&quot;&lt;vertical|horizontal&gt;&quot;</code>决定。</p>\n</blockquote>\n<h3 id=\"4-编辑器辅助\"><a href=\"#4-编辑器辅助\" class=\"headerlink\" title=\"4. 编辑器辅助\"></a>4. 编辑器辅助</h3><p><code>layout_editor_absoluteX</code>与<code>layout_editor_absoluteY</code>是只有在编辑器中使用，设备上运行时这些是没有效果的。参数空间是在: <code>http://schemas.android.com/tools</code>。</p>\n<h2 id=\"II-大小\"><a href=\"#II-大小\" class=\"headerlink\" title=\"II. 大小\"></a>II. 大小</h2><h3 id=\"1-没有了match-parent\"><a href=\"#1-没有了match-parent\" class=\"headerlink\" title=\"1. 没有了match_parent\"></a>1. 没有了<code>match_parent</code></h3><p><strong>可替代</strong> : 将<code>layout_width</code>/<code>layout_height</code>设为<code>0dp</code>: 填充满附属的锚点布局。</p>\n<p><strong>原因</strong> : 但是更加灵活，可以类似以前的<code>layout_weight</code>使用。</p>\n<h3 id=\"2-支持长宽比\"><a href=\"#2-支持长宽比\" class=\"headerlink\" title=\"2. 支持长宽比\"></a>2. 支持长宽比</h3><p><code>layout_constraintDimensionRatio</code> 提供长宽比如: <code>4:3</code>。在给了这个参数的情况下，需要提供任意一边的值(指定值或<code>wrap_content</code>)</p>\n<h2 id=\"III-原理与性能\"><a href=\"#III-原理与性能\" class=\"headerlink\" title=\"III. 原理与性能\"></a>III. 原理与性能</h2><blockquote>\n<p>添加子View到<code>ContraintLayout</code>时，所有XML中<code>layout_</code>前缀的属性都会添加到<code>LayoutParams</code>实例中。</p>\n</blockquote>\n<p><code>ConstraintLayout</code>子View中的<code>LayoutParams</code>存储着<code>ConstraintWidget</code>，<code>ConstraintWidget</code>用于逻辑运算与分析，并且每个<code>ConstraintWidget</code>与<code>ConstraintLayout</code>中的<code>ConstraintWidgetContainer</code>相联系。</p>\n<p><img src=\"/img/constraint-layout_classHierarchy.png\" alt=\"ClassHierarchy\"></p>\n<p><code>ConstraintWidget</code>持有所有关于View位置与大小的信息，在measure与layout时作为数据依据。</p>\n<p><img src=\"/img/constraint-layout_constraintWidget.png\" alt=\"ConstraintWidget\"></p>\n<p>在layout的期间，会根据<code>LayoutParams</code>中constraint的信息，为<code>ConstraintWidget</code>中每个连接的锚点定义<code>ConstraintAnchor</code>。</p>\n<p><img src=\"/img/constraint-layout_anchorConnection.png\" alt=\"AnchorConnection\"></p>\n<h3 id=\"1-measure\"><a href=\"#1-measure\" class=\"headerlink\" title=\"1. measure\"></a>1. measure</h3><p><img src=\"/img/constraint-layout_measureFlow.png\" alt=\"MeasureFlow\"></p>\n<blockquote>\n<p>这里的”Any Size”View，指的是XML中给的长或宽为<code>0dp</code>的View。</p>\n</blockquote>\n<p>“Any Size”View，需要两次运算，首次会直接不做检查在<code>ConstraintLayout#internalMeasureChildren</code>中直接使用<code>WRAP_CONTENT</code>用于计算大小(<code>ViewGroup#getChildMeasureSpec</code>)，第二次根据其他的计算结果在<code>ConstraintLayout#onMeasure</code>中计算出真正的大小。</p>\n<blockquote>\n<p>P.S: <code>Add Constraints to Equation Solver</code>、<code>Minimize Linear System</code>、<code>Update Child Bounds from solution</code> 都是在<code>ConstraintLayout#onMeasure</code>中在执行的<code>ConstraintLayout#internalMeasureChildren</code>。该算法计通过<code>LinearSystem</code>算出了View的bound。</p>\n</blockquote>\n<h3 id=\"2-layout\"><a href=\"#2-layout\" class=\"headerlink\" title=\"2. layout\"></a>2. layout</h3><p>由于上面在measure时已经估算出各view的大小与位置，因此在此之后<code>ConstraintWidget</code>中已经有对应View适当的bound了。因此在<code>onLayout</code>中只需要遍历所有子View，设置他们的bound值就行，十分轻量。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; getChildCount(); ++i) &#123;</div><div class=\"line\">  View child = <span class=\"keyword\">this</span>.getChildAt(i);</div><div class=\"line\">  ConstraintLayout.LayoutParams params =</div><div class=\"line\">      (ConstraintLayout.LayoutParams)child.getLayoutParams();</div><div class=\"line\">  ConstraintWidget widget = params.widget;</div><div class=\"line\">  <span class=\"keyword\">int</span> l = widget.getDrawX();</div><div class=\"line\">  <span class=\"keyword\">int</span> t = widget.getDrawY();</div><div class=\"line\">  <span class=\"keyword\">int</span> r = l + widget.getWidth();</div><div class=\"line\">  <span class=\"keyword\">int</span> b = t + widget.getHeight();</div><div class=\"line\">  child.layout(l, t, r, b);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"IV-性能方面\"><a href=\"#IV-性能方面\" class=\"headerlink\" title=\"IV. 性能方面\"></a>IV. 性能方面</h2><p>由于<code>ConstraintLayout</code>有效的优化了layout与draw，并且从质上有效的减少了层级，因此相同的布局呈现上，通常情况下<code>ConstrantLayout</code>的性能都比其他的Layout性能要好。</p>\n<hr>\n<blockquote>\n<p>文中图片全部来源: <a href=\"http://wiresareobsolete.com/2016/07/constraintlayout-part-2/\">http://wiresareobsolete.com/2016/07/constraintlayout-part-2/</a></p>\n</blockquote>\n<ul>\n<li><a href=\"http://wiresareobsolete.com/2016/07/constraintlayout-part-1/\">ConstraintLayout, Inside and Out: Part 1</a></li>\n<li><a href=\"http://wiresareobsolete.com/2016/07/constraintlayout-part-2/\">ConstraintLayout, Inside and Out: Part 2</a></li>\n<li><a href=\"http://leaks.wanari.com/2016/05/31/constraintlayout-android/\">ConstraintLayout on Android – How Ready Is It?</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"Android弱网通信探究","date":"2017-02-10T03:34:03.000Z","_content":"\n## I. 微信心跳机制\n\n![](/img/android-weak-network-1.png)\n\n<!-- more -->\n\n> 其中的有考虑到如何让手机更省电，因此有与Android的alarm对齐唤醒的处理(可以参见已经[开源的mars](https://github.com/Tencent/mars)的`smart_heartbeat.cc`)\n\n---\n\n- [Android微信智能心跳方案](http://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&mid=207243549&idx=1&sn=4ebe4beb8123f1b5ab58810ac8bc5994)\n- [微信终端跨平台组件 mars 系列 - 我们如约而至](https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&mid=2649286451&idx=1&sn=9711761792fe800094efde219fda3cde)\n\n---\n\n- 文章创建时间: 2016-08-16，[本文迭代日志](https://github.com/Jacksgong/Blog/commits/master/source/_posts/android_weak_network.md)。\n\n---\n\n\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/android_weak_network.md","raw":"title: Android弱网通信探究\ndate: 2017-02-10 11:34:03\npermalink: 2016/08/16/android_weak_network\ntags:\n- Android\n- 心跳\n- TCP\n- 弱网长连接\n\n---\n\n## I. 微信心跳机制\n\n![](/img/android-weak-network-1.png)\n\n<!-- more -->\n\n> 其中的有考虑到如何让手机更省电，因此有与Android的alarm对齐唤醒的处理(可以参见已经[开源的mars](https://github.com/Tencent/mars)的`smart_heartbeat.cc`)\n\n---\n\n- [Android微信智能心跳方案](http://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&mid=207243549&idx=1&sn=4ebe4beb8123f1b5ab58810ac8bc5994)\n- [微信终端跨平台组件 mars 系列 - 我们如约而至](https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&mid=2649286451&idx=1&sn=9711761792fe800094efde219fda3cde)\n\n---\n\n- 文章创建时间: 2016-08-16，[本文迭代日志](https://github.com/Jacksgong/Blog/commits/master/source/_posts/android_weak_network.md)。\n\n---\n\n\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2016/08/16/android_weak_network","published":1,"updated":"2017-02-11T07:45:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66ip002e95busbg6tc2b","content":"<h2 id=\"I-微信心跳机制\"><a href=\"#I-微信心跳机制\" class=\"headerlink\" title=\"I. 微信心跳机制\"></a>I. 微信心跳机制</h2><p><img src=\"/img/android-weak-network-1.png\" alt=\"\"></p>\n<a id=\"more\"></a>\n<blockquote>\n<p>其中的有考虑到如何让手机更省电，因此有与Android的alarm对齐唤醒的处理(可以参见已经<a href=\"https://github.com/Tencent/mars\" target=\"_blank\" rel=\"external\">开源的mars</a>的<code>smart_heartbeat.cc</code>)</p>\n</blockquote>\n<hr>\n<ul>\n<li><a href=\"http://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;mid=207243549&amp;idx=1&amp;sn=4ebe4beb8123f1b5ab58810ac8bc5994\" target=\"_blank\" rel=\"external\">Android微信智能心跳方案</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;mid=2649286451&amp;idx=1&amp;sn=9711761792fe800094efde219fda3cde\" target=\"_blank\" rel=\"external\">微信终端跨平台组件 mars 系列 - 我们如约而至</a></li>\n</ul>\n<hr>\n<ul>\n<li>文章创建时间: 2016-08-16，<a href=\"https://github.com/Jacksgong/Blog/commits/master/source/_posts/android_weak_network.md\" target=\"_blank\" rel=\"external\">本文迭代日志</a>。</li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<h2 id=\"I-微信心跳机制\"><a href=\"#I-微信心跳机制\" class=\"headerlink\" title=\"I. 微信心跳机制\"></a>I. 微信心跳机制</h2><p><img src=\"/img/android-weak-network-1.png\" alt=\"\"></p>","more":"<blockquote>\n<p>其中的有考虑到如何让手机更省电，因此有与Android的alarm对齐唤醒的处理(可以参见已经<a href=\"https://github.com/Tencent/mars\">开源的mars</a>的<code>smart_heartbeat.cc</code>)</p>\n</blockquote>\n<hr>\n<ul>\n<li><a href=\"http://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;mid=207243549&amp;idx=1&amp;sn=4ebe4beb8123f1b5ab58810ac8bc5994\">Android微信智能心跳方案</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;mid=2649286451&amp;idx=1&amp;sn=9711761792fe800094efde219fda3cde\">微信终端跨平台组件 mars 系列 - 我们如约而至</a></li>\n</ul>\n<hr>\n<ul>\n<li>文章创建时间: 2016-08-16，<a href=\"https://github.com/Jacksgong/Blog/commits/master/source/_posts/android_weak_network.md\">本文迭代日志</a>。</li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"Android 切图与标注","date":"2015-11-08T14:35:03.000Z","_content":"\n## I. 标注\n\n> 下文中提到的density是指: `DisplayMetrics#density`\n\n> 在显示器中，dpi = ppi\n> 手机的ppi: 对角线像素点个数px / 对角线英寸inch\n\n<!-- more -->\n- dpi(dot per inch): 点/英寸\n- ppi(pixel per inch): 像素/英寸\n\n> dp = px /density\n> 让设计师给标注的时候，最好是能够给160dpi屏幕上的标注，此时密度是1,px=dp\n\n- dp(Density-independent pixel): 1dp为屏幕点密度为160dpi(density=1)时像素点数: dp = px/(dpi /160 ) = px / density\n- dpi(dot per inch): dip = dp\n- sp : 一般系统没有特殊配置(用于字体)，sp = dp\n\n> 市面主要的Android手机屏幕尺寸: 5.5寸、5寸、4.7寸、3.7寸\n\n#### 适配原则\n\n![](/img/density_dpi-4.png)\n\n屏幕分辨率(px) | 宽inch * 长inch | 对角线(inch) | 宽dip * 长dip | 屏幕ppi | density | 标准densityDPI | 默认资源目录 | 常见手机\n:-: | :-: | :-: | :-: | :-: | :-: | :-: | :-: | :-: |\n240 x 320 | 2.00 x 2.67 | 3.3 | 120 x 120 | 121 | 0.75 | 120 | ldpi | -\n240 x 320 | 1.50 x 2.00 | 2.5 | 160 x 160 | 160 | 1 | 160 | mdpi| -\n340 x 480 | 1.50 x 2.00 |  2.5| 227 x 240 | 235 | 1.5 | 240 | hdpi | -\n480 x 800 | 1.90 x 3.17 | 3.7 | 253 x 252 | 252 | 1.5 | 240 | hdpi | Nexus One\n720 x 1280 | 2.3 x 4.10 | 4.7 | 313 x 312 | 312 | 2 | 320 | xhdpi | 红米2A、红米2、美图M4\n768 x 1280 | 2.42 x 4.03 | 4.7 | 317 x 317 | 317 | 2 | 320 | xhdpi | Nexus 4\n1080 x 1920 | 2.79 x 4.97 | 5.7 | 387 x 386 | 386 | 2.5 | 400 | 400dpi | 小米Note标准\n1080 x 1920 | 2.45 x 4.36 | 5 | 441 x 440 | 441 | 2.625 | 420 | 420dpi | (API 23前是属于480,xxhdpi)小米3、小米4、小米4c\n1080 x 1920 | 2.42 x 4.31 | 4.95 | 446 x 445 | 445 | 3 | 480 | xxhdpi | Nexus5\n1440 x 2560 | 2.92 x 5.20 | 5.96 | 493 x 492 | 492 | 3 | 480 | xxhdpi |  Nexus 6\n1440 x 2560 | 2.79 x 4.97 | 5.7 | 516 x 515 | 515 | 3 | 480 | xxhdpi |  小米Note顶配，Nexus 6P\n- | - | - | - | - | 4 | 640 | xxxhdpi | -\n\n\n#### Android 取资源原则\n\n如果存在匹配的就取对应文件夹资源，否则会选择default的作为160dpi进行缩放(但是也不一定，因为如ldpi与hdpi是0.5倍关系内部此时为了便于计算，就会取hdpi的进行缩放)，否则一般取最高清的资源根据density进行缩放。\n\n#### 常用工具\n\nAndroid Virtual Device Manager\n\n#### 需要注意\n\n> [Managing Launcher Icons as mipmap Resources](https://developer.android.com/intl/zh-cn/tools/projects/index.html#mipmap)\n\nmipmap用于存放应用图标(Launcher Icon)，不会受资源优化所影响，保证应用图标的高清.\n\n## II. 9patch\n\n> 俗称点9图\n> 腾讯ISUX (http://isux.tencent.com/android-ui-9-png.html)\n\n![](/img/density_dpi-1.png)\n\n- 1、2 拉伸区域\n- 3、4 内容区域\n\n#### 内容区域作用如下图\n\n> 其中的内容布局是: 垂直居中，水平靠左\n> 注意其中3、4的内容区域\n\n![](/img/density_dpi-2.png)\n\n#### 不想被拉伸\n\n> 点在透明区域即可\n\n![](/img/density_dpi-3.png)\n\n---\n\n- [Android 如何找到最匹配资源](https://developer.android.com/intl/zh-cn/guide/topics/resources/providing-resources.html#BestMatch)\n- [Icons - Style -Google design guidelines](https://www.google.com/design/spec/style/icons.html)\n- [提供资源](https://developer.android.com/intl/zh-cn/guide/topics/resources/providing-resources.html)\n- [Supporting Multiple Screens](https://developer.android.com/intl/zh-cn/guide/practices/screens_support.html)\n- [DPI、PPI、DP、PX 的详细计算方法及算法来源是什么？](http://www.zhihu.com/question/21220154)\n- [Android设计中的.9.png](http://isux.tencent.com/android-ui-9-png.html)\n- [Dashboards](https://developer.android.com/intl/zh-cn/about/dashboards/index.html)\n- [友盟指数](http://www.umindex.com/)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/density_dpi.md","raw":"title: Android 切图与标注\ndate: 2015-11-08 22:35:03\npermalink: 2015/11/08/density_dpi\ntags:\n- 9patch\n- density\n- densityDPI\n- dp\n- dpi\n- ppi\n\n---\n\n## I. 标注\n\n> 下文中提到的density是指: `DisplayMetrics#density`\n\n> 在显示器中，dpi = ppi\n> 手机的ppi: 对角线像素点个数px / 对角线英寸inch\n\n<!-- more -->\n- dpi(dot per inch): 点/英寸\n- ppi(pixel per inch): 像素/英寸\n\n> dp = px /density\n> 让设计师给标注的时候，最好是能够给160dpi屏幕上的标注，此时密度是1,px=dp\n\n- dp(Density-independent pixel): 1dp为屏幕点密度为160dpi(density=1)时像素点数: dp = px/(dpi /160 ) = px / density\n- dpi(dot per inch): dip = dp\n- sp : 一般系统没有特殊配置(用于字体)，sp = dp\n\n> 市面主要的Android手机屏幕尺寸: 5.5寸、5寸、4.7寸、3.7寸\n\n#### 适配原则\n\n![](/img/density_dpi-4.png)\n\n屏幕分辨率(px) | 宽inch * 长inch | 对角线(inch) | 宽dip * 长dip | 屏幕ppi | density | 标准densityDPI | 默认资源目录 | 常见手机\n:-: | :-: | :-: | :-: | :-: | :-: | :-: | :-: | :-: |\n240 x 320 | 2.00 x 2.67 | 3.3 | 120 x 120 | 121 | 0.75 | 120 | ldpi | -\n240 x 320 | 1.50 x 2.00 | 2.5 | 160 x 160 | 160 | 1 | 160 | mdpi| -\n340 x 480 | 1.50 x 2.00 |  2.5| 227 x 240 | 235 | 1.5 | 240 | hdpi | -\n480 x 800 | 1.90 x 3.17 | 3.7 | 253 x 252 | 252 | 1.5 | 240 | hdpi | Nexus One\n720 x 1280 | 2.3 x 4.10 | 4.7 | 313 x 312 | 312 | 2 | 320 | xhdpi | 红米2A、红米2、美图M4\n768 x 1280 | 2.42 x 4.03 | 4.7 | 317 x 317 | 317 | 2 | 320 | xhdpi | Nexus 4\n1080 x 1920 | 2.79 x 4.97 | 5.7 | 387 x 386 | 386 | 2.5 | 400 | 400dpi | 小米Note标准\n1080 x 1920 | 2.45 x 4.36 | 5 | 441 x 440 | 441 | 2.625 | 420 | 420dpi | (API 23前是属于480,xxhdpi)小米3、小米4、小米4c\n1080 x 1920 | 2.42 x 4.31 | 4.95 | 446 x 445 | 445 | 3 | 480 | xxhdpi | Nexus5\n1440 x 2560 | 2.92 x 5.20 | 5.96 | 493 x 492 | 492 | 3 | 480 | xxhdpi |  Nexus 6\n1440 x 2560 | 2.79 x 4.97 | 5.7 | 516 x 515 | 515 | 3 | 480 | xxhdpi |  小米Note顶配，Nexus 6P\n- | - | - | - | - | 4 | 640 | xxxhdpi | -\n\n\n#### Android 取资源原则\n\n如果存在匹配的就取对应文件夹资源，否则会选择default的作为160dpi进行缩放(但是也不一定，因为如ldpi与hdpi是0.5倍关系内部此时为了便于计算，就会取hdpi的进行缩放)，否则一般取最高清的资源根据density进行缩放。\n\n#### 常用工具\n\nAndroid Virtual Device Manager\n\n#### 需要注意\n\n> [Managing Launcher Icons as mipmap Resources](https://developer.android.com/intl/zh-cn/tools/projects/index.html#mipmap)\n\nmipmap用于存放应用图标(Launcher Icon)，不会受资源优化所影响，保证应用图标的高清.\n\n## II. 9patch\n\n> 俗称点9图\n> 腾讯ISUX (http://isux.tencent.com/android-ui-9-png.html)\n\n![](/img/density_dpi-1.png)\n\n- 1、2 拉伸区域\n- 3、4 内容区域\n\n#### 内容区域作用如下图\n\n> 其中的内容布局是: 垂直居中，水平靠左\n> 注意其中3、4的内容区域\n\n![](/img/density_dpi-2.png)\n\n#### 不想被拉伸\n\n> 点在透明区域即可\n\n![](/img/density_dpi-3.png)\n\n---\n\n- [Android 如何找到最匹配资源](https://developer.android.com/intl/zh-cn/guide/topics/resources/providing-resources.html#BestMatch)\n- [Icons - Style -Google design guidelines](https://www.google.com/design/spec/style/icons.html)\n- [提供资源](https://developer.android.com/intl/zh-cn/guide/topics/resources/providing-resources.html)\n- [Supporting Multiple Screens](https://developer.android.com/intl/zh-cn/guide/practices/screens_support.html)\n- [DPI、PPI、DP、PX 的详细计算方法及算法来源是什么？](http://www.zhihu.com/question/21220154)\n- [Android设计中的.9.png](http://isux.tencent.com/android-ui-9-png.html)\n- [Dashboards](https://developer.android.com/intl/zh-cn/about/dashboards/index.html)\n- [友盟指数](http://www.umindex.com/)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2015/11/08/density_dpi","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66ir002f95bumdixo0dw","content":"<h2 id=\"I-标注\"><a href=\"#I-标注\" class=\"headerlink\" title=\"I. 标注\"></a>I. 标注</h2><blockquote>\n<p>下文中提到的density是指: <code>DisplayMetrics#density</code></p>\n<p>在显示器中，dpi = ppi<br>手机的ppi: 对角线像素点个数px / 对角线英寸inch</p>\n</blockquote>\n<a id=\"more\"></a>\n<ul>\n<li>dpi(dot per inch): 点/英寸</li>\n<li>ppi(pixel per inch): 像素/英寸</li>\n</ul>\n<blockquote>\n<p>dp = px /density<br>让设计师给标注的时候，最好是能够给160dpi屏幕上的标注，此时密度是1,px=dp</p>\n</blockquote>\n<ul>\n<li>dp(Density-independent pixel): 1dp为屏幕点密度为160dpi(density=1)时像素点数: dp = px/(dpi /160 ) = px / density</li>\n<li>dpi(dot per inch): dip = dp</li>\n<li>sp : 一般系统没有特殊配置(用于字体)，sp = dp</li>\n</ul>\n<blockquote>\n<p>市面主要的Android手机屏幕尺寸: 5.5寸、5寸、4.7寸、3.7寸</p>\n</blockquote>\n<h4 id=\"适配原则\"><a href=\"#适配原则\" class=\"headerlink\" title=\"适配原则\"></a>适配原则</h4><p><img src=\"/img/density_dpi-4.png\" alt=\"\"></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">屏幕分辨率(px)</th>\n<th style=\"text-align:center\">宽inch * 长inch</th>\n<th style=\"text-align:center\">对角线(inch)</th>\n<th style=\"text-align:center\">宽dip * 长dip</th>\n<th style=\"text-align:center\">屏幕ppi</th>\n<th style=\"text-align:center\">density</th>\n<th style=\"text-align:center\">标准densityDPI</th>\n<th style=\"text-align:center\">默认资源目录</th>\n<th style=\"text-align:center\">常见手机</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">240 x 320</td>\n<td style=\"text-align:center\">2.00 x 2.67</td>\n<td style=\"text-align:center\">3.3</td>\n<td style=\"text-align:center\">120 x 120</td>\n<td style=\"text-align:center\">121</td>\n<td style=\"text-align:center\">0.75</td>\n<td style=\"text-align:center\">120</td>\n<td style=\"text-align:center\">ldpi</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">240 x 320</td>\n<td style=\"text-align:center\">1.50 x 2.00</td>\n<td style=\"text-align:center\">2.5</td>\n<td style=\"text-align:center\">160 x 160</td>\n<td style=\"text-align:center\">160</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">160</td>\n<td style=\"text-align:center\">mdpi</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">340 x 480</td>\n<td style=\"text-align:center\">1.50 x 2.00</td>\n<td style=\"text-align:center\">2.5</td>\n<td style=\"text-align:center\">227 x 240</td>\n<td style=\"text-align:center\">235</td>\n<td style=\"text-align:center\">1.5</td>\n<td style=\"text-align:center\">240</td>\n<td style=\"text-align:center\">hdpi</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">480 x 800</td>\n<td style=\"text-align:center\">1.90 x 3.17</td>\n<td style=\"text-align:center\">3.7</td>\n<td style=\"text-align:center\">253 x 252</td>\n<td style=\"text-align:center\">252</td>\n<td style=\"text-align:center\">1.5</td>\n<td style=\"text-align:center\">240</td>\n<td style=\"text-align:center\">hdpi</td>\n<td style=\"text-align:center\">Nexus One</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">720 x 1280</td>\n<td style=\"text-align:center\">2.3 x 4.10</td>\n<td style=\"text-align:center\">4.7</td>\n<td style=\"text-align:center\">313 x 312</td>\n<td style=\"text-align:center\">312</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">320</td>\n<td style=\"text-align:center\">xhdpi</td>\n<td style=\"text-align:center\">红米2A、红米2、美图M4</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">768 x 1280</td>\n<td style=\"text-align:center\">2.42 x 4.03</td>\n<td style=\"text-align:center\">4.7</td>\n<td style=\"text-align:center\">317 x 317</td>\n<td style=\"text-align:center\">317</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">320</td>\n<td style=\"text-align:center\">xhdpi</td>\n<td style=\"text-align:center\">Nexus 4</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1080 x 1920</td>\n<td style=\"text-align:center\">2.79 x 4.97</td>\n<td style=\"text-align:center\">5.7</td>\n<td style=\"text-align:center\">387 x 386</td>\n<td style=\"text-align:center\">386</td>\n<td style=\"text-align:center\">2.5</td>\n<td style=\"text-align:center\">400</td>\n<td style=\"text-align:center\">400dpi</td>\n<td style=\"text-align:center\">小米Note标准</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1080 x 1920</td>\n<td style=\"text-align:center\">2.45 x 4.36</td>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">441 x 440</td>\n<td style=\"text-align:center\">441</td>\n<td style=\"text-align:center\">2.625</td>\n<td style=\"text-align:center\">420</td>\n<td style=\"text-align:center\">420dpi</td>\n<td style=\"text-align:center\">(API 23前是属于480,xxhdpi)小米3、小米4、小米4c</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1080 x 1920</td>\n<td style=\"text-align:center\">2.42 x 4.31</td>\n<td style=\"text-align:center\">4.95</td>\n<td style=\"text-align:center\">446 x 445</td>\n<td style=\"text-align:center\">445</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">480</td>\n<td style=\"text-align:center\">xxhdpi</td>\n<td style=\"text-align:center\">Nexus5</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1440 x 2560</td>\n<td style=\"text-align:center\">2.92 x 5.20</td>\n<td style=\"text-align:center\">5.96</td>\n<td style=\"text-align:center\">493 x 492</td>\n<td style=\"text-align:center\">492</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">480</td>\n<td style=\"text-align:center\">xxhdpi</td>\n<td style=\"text-align:center\">Nexus 6</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1440 x 2560</td>\n<td style=\"text-align:center\">2.79 x 4.97</td>\n<td style=\"text-align:center\">5.7</td>\n<td style=\"text-align:center\">516 x 515</td>\n<td style=\"text-align:center\">515</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">480</td>\n<td style=\"text-align:center\">xxhdpi</td>\n<td style=\"text-align:center\">小米Note顶配，Nexus 6P</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">640</td>\n<td style=\"text-align:center\">xxxhdpi</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"Android-取资源原则\"><a href=\"#Android-取资源原则\" class=\"headerlink\" title=\"Android 取资源原则\"></a>Android 取资源原则</h4><p>如果存在匹配的就取对应文件夹资源，否则会选择default的作为160dpi进行缩放(但是也不一定，因为如ldpi与hdpi是0.5倍关系内部此时为了便于计算，就会取hdpi的进行缩放)，否则一般取最高清的资源根据density进行缩放。</p>\n<h4 id=\"常用工具\"><a href=\"#常用工具\" class=\"headerlink\" title=\"常用工具\"></a>常用工具</h4><p>Android Virtual Device Manager</p>\n<h4 id=\"需要注意\"><a href=\"#需要注意\" class=\"headerlink\" title=\"需要注意\"></a>需要注意</h4><blockquote>\n<p><a href=\"https://developer.android.com/intl/zh-cn/tools/projects/index.html#mipmap\" target=\"_blank\" rel=\"external\">Managing Launcher Icons as mipmap Resources</a></p>\n</blockquote>\n<p>mipmap用于存放应用图标(Launcher Icon)，不会受资源优化所影响，保证应用图标的高清.</p>\n<h2 id=\"II-9patch\"><a href=\"#II-9patch\" class=\"headerlink\" title=\"II. 9patch\"></a>II. 9patch</h2><blockquote>\n<p>俗称点9图<br>腾讯ISUX (<a href=\"http://isux.tencent.com/android-ui-9-png.html\" target=\"_blank\" rel=\"external\">http://isux.tencent.com/android-ui-9-png.html</a>)</p>\n</blockquote>\n<p><img src=\"/img/density_dpi-1.png\" alt=\"\"></p>\n<ul>\n<li>1、2 拉伸区域</li>\n<li>3、4 内容区域</li>\n</ul>\n<h4 id=\"内容区域作用如下图\"><a href=\"#内容区域作用如下图\" class=\"headerlink\" title=\"内容区域作用如下图\"></a>内容区域作用如下图</h4><blockquote>\n<p>其中的内容布局是: 垂直居中，水平靠左<br>注意其中3、4的内容区域</p>\n</blockquote>\n<p><img src=\"/img/density_dpi-2.png\" alt=\"\"></p>\n<h4 id=\"不想被拉伸\"><a href=\"#不想被拉伸\" class=\"headerlink\" title=\"不想被拉伸\"></a>不想被拉伸</h4><blockquote>\n<p>点在透明区域即可</p>\n</blockquote>\n<p><img src=\"/img/density_dpi-3.png\" alt=\"\"></p>\n<hr>\n<ul>\n<li><a href=\"https://developer.android.com/intl/zh-cn/guide/topics/resources/providing-resources.html#BestMatch\" target=\"_blank\" rel=\"external\">Android 如何找到最匹配资源</a></li>\n<li><a href=\"https://www.google.com/design/spec/style/icons.html\" target=\"_blank\" rel=\"external\">Icons - Style -Google design guidelines</a></li>\n<li><a href=\"https://developer.android.com/intl/zh-cn/guide/topics/resources/providing-resources.html\" target=\"_blank\" rel=\"external\">提供资源</a></li>\n<li><a href=\"https://developer.android.com/intl/zh-cn/guide/practices/screens_support.html\" target=\"_blank\" rel=\"external\">Supporting Multiple Screens</a></li>\n<li><a href=\"http://www.zhihu.com/question/21220154\" target=\"_blank\" rel=\"external\">DPI、PPI、DP、PX 的详细计算方法及算法来源是什么？</a></li>\n<li><a href=\"http://isux.tencent.com/android-ui-9-png.html\" target=\"_blank\" rel=\"external\">Android设计中的.9.png</a></li>\n<li><a href=\"https://developer.android.com/intl/zh-cn/about/dashboards/index.html\" target=\"_blank\" rel=\"external\">Dashboards</a></li>\n<li><a href=\"http://www.umindex.com/\" target=\"_blank\" rel=\"external\">友盟指数</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<h2 id=\"I-标注\"><a href=\"#I-标注\" class=\"headerlink\" title=\"I. 标注\"></a>I. 标注</h2><blockquote>\n<p>下文中提到的density是指: <code>DisplayMetrics#density</code></p>\n<p>在显示器中，dpi = ppi<br>手机的ppi: 对角线像素点个数px / 对角线英寸inch</p>\n</blockquote>","more":"<ul>\n<li>dpi(dot per inch): 点/英寸</li>\n<li>ppi(pixel per inch): 像素/英寸</li>\n</ul>\n<blockquote>\n<p>dp = px /density<br>让设计师给标注的时候，最好是能够给160dpi屏幕上的标注，此时密度是1,px=dp</p>\n</blockquote>\n<ul>\n<li>dp(Density-independent pixel): 1dp为屏幕点密度为160dpi(density=1)时像素点数: dp = px/(dpi /160 ) = px / density</li>\n<li>dpi(dot per inch): dip = dp</li>\n<li>sp : 一般系统没有特殊配置(用于字体)，sp = dp</li>\n</ul>\n<blockquote>\n<p>市面主要的Android手机屏幕尺寸: 5.5寸、5寸、4.7寸、3.7寸</p>\n</blockquote>\n<h4 id=\"适配原则\"><a href=\"#适配原则\" class=\"headerlink\" title=\"适配原则\"></a>适配原则</h4><p><img src=\"/img/density_dpi-4.png\" alt=\"\"></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">屏幕分辨率(px)</th>\n<th style=\"text-align:center\">宽inch * 长inch</th>\n<th style=\"text-align:center\">对角线(inch)</th>\n<th style=\"text-align:center\">宽dip * 长dip</th>\n<th style=\"text-align:center\">屏幕ppi</th>\n<th style=\"text-align:center\">density</th>\n<th style=\"text-align:center\">标准densityDPI</th>\n<th style=\"text-align:center\">默认资源目录</th>\n<th style=\"text-align:center\">常见手机</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">240 x 320</td>\n<td style=\"text-align:center\">2.00 x 2.67</td>\n<td style=\"text-align:center\">3.3</td>\n<td style=\"text-align:center\">120 x 120</td>\n<td style=\"text-align:center\">121</td>\n<td style=\"text-align:center\">0.75</td>\n<td style=\"text-align:center\">120</td>\n<td style=\"text-align:center\">ldpi</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">240 x 320</td>\n<td style=\"text-align:center\">1.50 x 2.00</td>\n<td style=\"text-align:center\">2.5</td>\n<td style=\"text-align:center\">160 x 160</td>\n<td style=\"text-align:center\">160</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">160</td>\n<td style=\"text-align:center\">mdpi</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">340 x 480</td>\n<td style=\"text-align:center\">1.50 x 2.00</td>\n<td style=\"text-align:center\">2.5</td>\n<td style=\"text-align:center\">227 x 240</td>\n<td style=\"text-align:center\">235</td>\n<td style=\"text-align:center\">1.5</td>\n<td style=\"text-align:center\">240</td>\n<td style=\"text-align:center\">hdpi</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">480 x 800</td>\n<td style=\"text-align:center\">1.90 x 3.17</td>\n<td style=\"text-align:center\">3.7</td>\n<td style=\"text-align:center\">253 x 252</td>\n<td style=\"text-align:center\">252</td>\n<td style=\"text-align:center\">1.5</td>\n<td style=\"text-align:center\">240</td>\n<td style=\"text-align:center\">hdpi</td>\n<td style=\"text-align:center\">Nexus One</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">720 x 1280</td>\n<td style=\"text-align:center\">2.3 x 4.10</td>\n<td style=\"text-align:center\">4.7</td>\n<td style=\"text-align:center\">313 x 312</td>\n<td style=\"text-align:center\">312</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">320</td>\n<td style=\"text-align:center\">xhdpi</td>\n<td style=\"text-align:center\">红米2A、红米2、美图M4</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">768 x 1280</td>\n<td style=\"text-align:center\">2.42 x 4.03</td>\n<td style=\"text-align:center\">4.7</td>\n<td style=\"text-align:center\">317 x 317</td>\n<td style=\"text-align:center\">317</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">320</td>\n<td style=\"text-align:center\">xhdpi</td>\n<td style=\"text-align:center\">Nexus 4</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1080 x 1920</td>\n<td style=\"text-align:center\">2.79 x 4.97</td>\n<td style=\"text-align:center\">5.7</td>\n<td style=\"text-align:center\">387 x 386</td>\n<td style=\"text-align:center\">386</td>\n<td style=\"text-align:center\">2.5</td>\n<td style=\"text-align:center\">400</td>\n<td style=\"text-align:center\">400dpi</td>\n<td style=\"text-align:center\">小米Note标准</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1080 x 1920</td>\n<td style=\"text-align:center\">2.45 x 4.36</td>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">441 x 440</td>\n<td style=\"text-align:center\">441</td>\n<td style=\"text-align:center\">2.625</td>\n<td style=\"text-align:center\">420</td>\n<td style=\"text-align:center\">420dpi</td>\n<td style=\"text-align:center\">(API 23前是属于480,xxhdpi)小米3、小米4、小米4c</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1080 x 1920</td>\n<td style=\"text-align:center\">2.42 x 4.31</td>\n<td style=\"text-align:center\">4.95</td>\n<td style=\"text-align:center\">446 x 445</td>\n<td style=\"text-align:center\">445</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">480</td>\n<td style=\"text-align:center\">xxhdpi</td>\n<td style=\"text-align:center\">Nexus5</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1440 x 2560</td>\n<td style=\"text-align:center\">2.92 x 5.20</td>\n<td style=\"text-align:center\">5.96</td>\n<td style=\"text-align:center\">493 x 492</td>\n<td style=\"text-align:center\">492</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">480</td>\n<td style=\"text-align:center\">xxhdpi</td>\n<td style=\"text-align:center\">Nexus 6</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1440 x 2560</td>\n<td style=\"text-align:center\">2.79 x 4.97</td>\n<td style=\"text-align:center\">5.7</td>\n<td style=\"text-align:center\">516 x 515</td>\n<td style=\"text-align:center\">515</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">480</td>\n<td style=\"text-align:center\">xxhdpi</td>\n<td style=\"text-align:center\">小米Note顶配，Nexus 6P</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">640</td>\n<td style=\"text-align:center\">xxxhdpi</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"Android-取资源原则\"><a href=\"#Android-取资源原则\" class=\"headerlink\" title=\"Android 取资源原则\"></a>Android 取资源原则</h4><p>如果存在匹配的就取对应文件夹资源，否则会选择default的作为160dpi进行缩放(但是也不一定，因为如ldpi与hdpi是0.5倍关系内部此时为了便于计算，就会取hdpi的进行缩放)，否则一般取最高清的资源根据density进行缩放。</p>\n<h4 id=\"常用工具\"><a href=\"#常用工具\" class=\"headerlink\" title=\"常用工具\"></a>常用工具</h4><p>Android Virtual Device Manager</p>\n<h4 id=\"需要注意\"><a href=\"#需要注意\" class=\"headerlink\" title=\"需要注意\"></a>需要注意</h4><blockquote>\n<p><a href=\"https://developer.android.com/intl/zh-cn/tools/projects/index.html#mipmap\">Managing Launcher Icons as mipmap Resources</a></p>\n</blockquote>\n<p>mipmap用于存放应用图标(Launcher Icon)，不会受资源优化所影响，保证应用图标的高清.</p>\n<h2 id=\"II-9patch\"><a href=\"#II-9patch\" class=\"headerlink\" title=\"II. 9patch\"></a>II. 9patch</h2><blockquote>\n<p>俗称点9图<br>腾讯ISUX (<a href=\"http://isux.tencent.com/android-ui-9-png.html\">http://isux.tencent.com/android-ui-9-png.html</a>)</p>\n</blockquote>\n<p><img src=\"/img/density_dpi-1.png\" alt=\"\"></p>\n<ul>\n<li>1、2 拉伸区域</li>\n<li>3、4 内容区域</li>\n</ul>\n<h4 id=\"内容区域作用如下图\"><a href=\"#内容区域作用如下图\" class=\"headerlink\" title=\"内容区域作用如下图\"></a>内容区域作用如下图</h4><blockquote>\n<p>其中的内容布局是: 垂直居中，水平靠左<br>注意其中3、4的内容区域</p>\n</blockquote>\n<p><img src=\"/img/density_dpi-2.png\" alt=\"\"></p>\n<h4 id=\"不想被拉伸\"><a href=\"#不想被拉伸\" class=\"headerlink\" title=\"不想被拉伸\"></a>不想被拉伸</h4><blockquote>\n<p>点在透明区域即可</p>\n</blockquote>\n<p><img src=\"/img/density_dpi-3.png\" alt=\"\"></p>\n<hr>\n<ul>\n<li><a href=\"https://developer.android.com/intl/zh-cn/guide/topics/resources/providing-resources.html#BestMatch\">Android 如何找到最匹配资源</a></li>\n<li><a href=\"https://www.google.com/design/spec/style/icons.html\">Icons - Style -Google design guidelines</a></li>\n<li><a href=\"https://developer.android.com/intl/zh-cn/guide/topics/resources/providing-resources.html\">提供资源</a></li>\n<li><a href=\"https://developer.android.com/intl/zh-cn/guide/practices/screens_support.html\">Supporting Multiple Screens</a></li>\n<li><a href=\"http://www.zhihu.com/question/21220154\">DPI、PPI、DP、PX 的详细计算方法及算法来源是什么？</a></li>\n<li><a href=\"http://isux.tencent.com/android-ui-9-png.html\">Android设计中的.9.png</a></li>\n<li><a href=\"https://developer.android.com/intl/zh-cn/about/dashboards/index.html\">Dashboards</a></li>\n<li><a href=\"http://www.umindex.com/\">友盟指数</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"FileDownloader","date":"2015-12-23T03:18:03.000Z","_content":"\n> 已开源 [lingochamp/FileDownloader](https://github.com/lingochamp/FileDownloader)\n\n- [中文迭代日志](https://github.com/lingochamp/FileDownloader/blob/master/CHANGELOG.md)\n- [中文说明文档](https://github.com/lingochamp/FileDownloader/blob/master/README-zh.md)\n- [Wiki](https://github.com/lingochamp/FileDownloader/wiki)\n- [问题讨论区](https://github.com/lingochamp/FileDownloader/issues)\n\n<!-- more -->\n\n---\n\n## 简述所解决问题\n\n系统提供的DownloadManager由于是考虑系统层面所有应用公用，不够灵活。\n\n## 特征\n\n- 支持 独立进程/非独立进程\n- 灵活\n- 高并发\n- 稳定\n\n## Demo\n\n![](/img/filedownloader-serial_tasks_demo.gif)\n![](/img/filedownloader-parallel_tasks_demo.gif)\n![](/img/filedownloader-tasks_manager_demo.gif)\n![](/img/filedownloader-mix_tasks_demo.gif)\n![](/img/filedownloader-avoid_drop_frames1.gif)\n","source":"_posts/file_downloader.md","raw":"title: FileDownloader\ndate: 2015-12-23 11:18:03\npermalink: 2015/12/23/file_downloader\ntags:\n- Download\n- Parallel\n- Serial\n- Project\n\n---\n\n> 已开源 [lingochamp/FileDownloader](https://github.com/lingochamp/FileDownloader)\n\n- [中文迭代日志](https://github.com/lingochamp/FileDownloader/blob/master/CHANGELOG.md)\n- [中文说明文档](https://github.com/lingochamp/FileDownloader/blob/master/README-zh.md)\n- [Wiki](https://github.com/lingochamp/FileDownloader/wiki)\n- [问题讨论区](https://github.com/lingochamp/FileDownloader/issues)\n\n<!-- more -->\n\n---\n\n## 简述所解决问题\n\n系统提供的DownloadManager由于是考虑系统层面所有应用公用，不够灵活。\n\n## 特征\n\n- 支持 独立进程/非独立进程\n- 灵活\n- 高并发\n- 稳定\n\n## Demo\n\n![](/img/filedownloader-serial_tasks_demo.gif)\n![](/img/filedownloader-parallel_tasks_demo.gif)\n![](/img/filedownloader-tasks_manager_demo.gif)\n![](/img/filedownloader-mix_tasks_demo.gif)\n![](/img/filedownloader-avoid_drop_frames1.gif)\n","slug":"2015/12/23/file_downloader","published":1,"updated":"2017-01-26T14:52:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66ir002h95buxodfqeaw","content":"<blockquote>\n<p>已开源 <a href=\"https://github.com/lingochamp/FileDownloader\" target=\"_blank\" rel=\"external\">lingochamp/FileDownloader</a></p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/lingochamp/FileDownloader/blob/master/CHANGELOG.md\" target=\"_blank\" rel=\"external\">中文迭代日志</a></li>\n<li><a href=\"https://github.com/lingochamp/FileDownloader/blob/master/README-zh.md\" target=\"_blank\" rel=\"external\">中文说明文档</a></li>\n<li><a href=\"https://github.com/lingochamp/FileDownloader/wiki\" target=\"_blank\" rel=\"external\">Wiki</a></li>\n<li><a href=\"https://github.com/lingochamp/FileDownloader/issues\" target=\"_blank\" rel=\"external\">问题讨论区</a></li>\n</ul>\n<a id=\"more\"></a>\n<hr>\n<h2 id=\"简述所解决问题\"><a href=\"#简述所解决问题\" class=\"headerlink\" title=\"简述所解决问题\"></a>简述所解决问题</h2><p>系统提供的DownloadManager由于是考虑系统层面所有应用公用，不够灵活。</p>\n<h2 id=\"特征\"><a href=\"#特征\" class=\"headerlink\" title=\"特征\"></a>特征</h2><ul>\n<li>支持 独立进程/非独立进程</li>\n<li>灵活</li>\n<li>高并发</li>\n<li>稳定</li>\n</ul>\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><p><img src=\"/img/filedownloader-serial_tasks_demo.gif\" alt=\"\"><br><img src=\"/img/filedownloader-parallel_tasks_demo.gif\" alt=\"\"><br><img src=\"/img/filedownloader-tasks_manager_demo.gif\" alt=\"\"><br><img src=\"/img/filedownloader-mix_tasks_demo.gif\" alt=\"\"><br><img src=\"/img/filedownloader-avoid_drop_frames1.gif\" alt=\"\"></p>\n","excerpt":"<blockquote>\n<p>已开源 <a href=\"https://github.com/lingochamp/FileDownloader\">lingochamp/FileDownloader</a></p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/lingochamp/FileDownloader/blob/master/CHANGELOG.md\">中文迭代日志</a></li>\n<li><a href=\"https://github.com/lingochamp/FileDownloader/blob/master/README-zh.md\">中文说明文档</a></li>\n<li><a href=\"https://github.com/lingochamp/FileDownloader/wiki\">Wiki</a></li>\n<li><a href=\"https://github.com/lingochamp/FileDownloader/issues\">问题讨论区</a></li>\n</ul>","more":"<hr>\n<h2 id=\"简述所解决问题\"><a href=\"#简述所解决问题\" class=\"headerlink\" title=\"简述所解决问题\"></a>简述所解决问题</h2><p>系统提供的DownloadManager由于是考虑系统层面所有应用公用，不够灵活。</p>\n<h2 id=\"特征\"><a href=\"#特征\" class=\"headerlink\" title=\"特征\"></a>特征</h2><ul>\n<li>支持 独立进程/非独立进程</li>\n<li>灵活</li>\n<li>高并发</li>\n<li>稳定</li>\n</ul>\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><p><img src=\"/img/filedownloader-serial_tasks_demo.gif\" alt=\"\"><br><img src=\"/img/filedownloader-parallel_tasks_demo.gif\" alt=\"\"><br><img src=\"/img/filedownloader-tasks_manager_demo.gif\" alt=\"\"><br><img src=\"/img/filedownloader-mix_tasks_demo.gif\" alt=\"\"><br><img src=\"/img/filedownloader-avoid_drop_frames1.gif\" alt=\"\"></p>"},{"title":"Android GC","date":"2015-11-30T01:00:03.000Z","_content":"\n> Dalvik的GC与ART运行时GC采用同一套机制\n\n<!-- more -->\n\n## Heap分布\n\nHeap名 | 分布 | 内容\n:-: | :-: | :-: |\nActivity Heap | 第一个应用程序fork前，未使用的部分 | 第一个应用fork开始后，无论是Zygote进程，还是应用进程，分配的对象\nZygote Heap | 第一个应用程序fork前，已经使用的部分 | Zygote进程在启动过程中加载的类、资源、对象\n\n## 资源回收:\n\n#### Dalvik虚拟机中的堆:\n\n> 匿名共享内存\n\n不直接管理，封装成mspace交给C库来管理\n\n#### Heap Bitmap\n\n描述对象有没有被引用的数据结构\n\n### Mark-Sweep算法\n\n#### 1. Mark阶段\n\n从对象的根集开始标记**被引用**的对象\n\n##### 一般算法\n\n> Stop The World\n\n除垃圾收集线程之外，其他线程都停止，否则可能导致不能正确标记每一个对象\n\n##### 并行垃圾收集算法\n\n> Concurrent GC\n> 有条件地允许程序的其他线程执行\n\n分为两个阶段:\n\n1. 只负责标记根集对象(GC开始的瞬间给，被全局变量、栈变量和寄存器等引用的对象): **Stop The World**\n2. 顺着已标记的根集对象找到其余的被引用的变量: **允许除垃圾收集线程以外的线程运行**，但是需要由Card Table(一字节CLEAN/DIRTY)记录**在该过程中被修改的对象**(非垃圾收集堆对象 对 垃圾收集堆对象 的引用 -> 由于 Dalvik虚拟机进行部分垃圾收集时，只收集Activie堆上分配的对象 -> Zygote堆上分配的对象 在 部分垃圾收集执行过程中 对 在 Active堆上分配的对象的引用)\n\n#### 2. Sweep阶段\n\n回收没有被标记的对象占用的内存\n\n\n---\n\n- [Dalvik虚拟机垃圾收集机制简要介绍和学习计划](http://blog.csdn.net/luoshengyang/article/details/41338251)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/gc.md","raw":"title: Android GC\ndate: 2015-11-30 09:00:03\npermalink: 2015/11/30/gc\ntags:\n- GC\n- Concurrent GC\n- Activity Heap\n- Zygote Heap\n- Mark-Sweep\n\n---\n\n> Dalvik的GC与ART运行时GC采用同一套机制\n\n<!-- more -->\n\n## Heap分布\n\nHeap名 | 分布 | 内容\n:-: | :-: | :-: |\nActivity Heap | 第一个应用程序fork前，未使用的部分 | 第一个应用fork开始后，无论是Zygote进程，还是应用进程，分配的对象\nZygote Heap | 第一个应用程序fork前，已经使用的部分 | Zygote进程在启动过程中加载的类、资源、对象\n\n## 资源回收:\n\n#### Dalvik虚拟机中的堆:\n\n> 匿名共享内存\n\n不直接管理，封装成mspace交给C库来管理\n\n#### Heap Bitmap\n\n描述对象有没有被引用的数据结构\n\n### Mark-Sweep算法\n\n#### 1. Mark阶段\n\n从对象的根集开始标记**被引用**的对象\n\n##### 一般算法\n\n> Stop The World\n\n除垃圾收集线程之外，其他线程都停止，否则可能导致不能正确标记每一个对象\n\n##### 并行垃圾收集算法\n\n> Concurrent GC\n> 有条件地允许程序的其他线程执行\n\n分为两个阶段:\n\n1. 只负责标记根集对象(GC开始的瞬间给，被全局变量、栈变量和寄存器等引用的对象): **Stop The World**\n2. 顺着已标记的根集对象找到其余的被引用的变量: **允许除垃圾收集线程以外的线程运行**，但是需要由Card Table(一字节CLEAN/DIRTY)记录**在该过程中被修改的对象**(非垃圾收集堆对象 对 垃圾收集堆对象 的引用 -> 由于 Dalvik虚拟机进行部分垃圾收集时，只收集Activie堆上分配的对象 -> Zygote堆上分配的对象 在 部分垃圾收集执行过程中 对 在 Active堆上分配的对象的引用)\n\n#### 2. Sweep阶段\n\n回收没有被标记的对象占用的内存\n\n\n---\n\n- [Dalvik虚拟机垃圾收集机制简要介绍和学习计划](http://blog.csdn.net/luoshengyang/article/details/41338251)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2015/11/30/gc","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66is002i95buw4jxwza3","content":"<blockquote>\n<p>Dalvik的GC与ART运行时GC采用同一套机制</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"Heap分布\"><a href=\"#Heap分布\" class=\"headerlink\" title=\"Heap分布\"></a>Heap分布</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Heap名</th>\n<th style=\"text-align:center\">分布</th>\n<th style=\"text-align:center\">内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Activity Heap</td>\n<td style=\"text-align:center\">第一个应用程序fork前，未使用的部分</td>\n<td style=\"text-align:center\">第一个应用fork开始后，无论是Zygote进程，还是应用进程，分配的对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Zygote Heap</td>\n<td style=\"text-align:center\">第一个应用程序fork前，已经使用的部分</td>\n<td style=\"text-align:center\">Zygote进程在启动过程中加载的类、资源、对象</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"资源回收\"><a href=\"#资源回收\" class=\"headerlink\" title=\"资源回收:\"></a>资源回收:</h2><h4 id=\"Dalvik虚拟机中的堆\"><a href=\"#Dalvik虚拟机中的堆\" class=\"headerlink\" title=\"Dalvik虚拟机中的堆:\"></a>Dalvik虚拟机中的堆:</h4><blockquote>\n<p>匿名共享内存</p>\n</blockquote>\n<p>不直接管理，封装成mspace交给C库来管理</p>\n<h4 id=\"Heap-Bitmap\"><a href=\"#Heap-Bitmap\" class=\"headerlink\" title=\"Heap Bitmap\"></a>Heap Bitmap</h4><p>描述对象有没有被引用的数据结构</p>\n<h3 id=\"Mark-Sweep算法\"><a href=\"#Mark-Sweep算法\" class=\"headerlink\" title=\"Mark-Sweep算法\"></a>Mark-Sweep算法</h3><h4 id=\"1-Mark阶段\"><a href=\"#1-Mark阶段\" class=\"headerlink\" title=\"1. Mark阶段\"></a>1. Mark阶段</h4><p>从对象的根集开始标记<strong>被引用</strong>的对象</p>\n<h5 id=\"一般算法\"><a href=\"#一般算法\" class=\"headerlink\" title=\"一般算法\"></a>一般算法</h5><blockquote>\n<p>Stop The World</p>\n</blockquote>\n<p>除垃圾收集线程之外，其他线程都停止，否则可能导致不能正确标记每一个对象</p>\n<h5 id=\"并行垃圾收集算法\"><a href=\"#并行垃圾收集算法\" class=\"headerlink\" title=\"并行垃圾收集算法\"></a>并行垃圾收集算法</h5><blockquote>\n<p>Concurrent GC<br>有条件地允许程序的其他线程执行</p>\n</blockquote>\n<p>分为两个阶段:</p>\n<ol>\n<li>只负责标记根集对象(GC开始的瞬间给，被全局变量、栈变量和寄存器等引用的对象): <strong>Stop The World</strong></li>\n<li>顺着已标记的根集对象找到其余的被引用的变量: <strong>允许除垃圾收集线程以外的线程运行</strong>，但是需要由Card Table(一字节CLEAN/DIRTY)记录<strong>在该过程中被修改的对象</strong>(非垃圾收集堆对象 对 垃圾收集堆对象 的引用 -&gt; 由于 Dalvik虚拟机进行部分垃圾收集时，只收集Activie堆上分配的对象 -&gt; Zygote堆上分配的对象 在 部分垃圾收集执行过程中 对 在 Active堆上分配的对象的引用)</li>\n</ol>\n<h4 id=\"2-Sweep阶段\"><a href=\"#2-Sweep阶段\" class=\"headerlink\" title=\"2. Sweep阶段\"></a>2. Sweep阶段</h4><p>回收没有被标记的对象占用的内存</p>\n<hr>\n<ul>\n<li><a href=\"http://blog.csdn.net/luoshengyang/article/details/41338251\" target=\"_blank\" rel=\"external\">Dalvik虚拟机垃圾收集机制简要介绍和学习计划</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>Dalvik的GC与ART运行时GC采用同一套机制</p>\n</blockquote>","more":"<h2 id=\"Heap分布\"><a href=\"#Heap分布\" class=\"headerlink\" title=\"Heap分布\"></a>Heap分布</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Heap名</th>\n<th style=\"text-align:center\">分布</th>\n<th style=\"text-align:center\">内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Activity Heap</td>\n<td style=\"text-align:center\">第一个应用程序fork前，未使用的部分</td>\n<td style=\"text-align:center\">第一个应用fork开始后，无论是Zygote进程，还是应用进程，分配的对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Zygote Heap</td>\n<td style=\"text-align:center\">第一个应用程序fork前，已经使用的部分</td>\n<td style=\"text-align:center\">Zygote进程在启动过程中加载的类、资源、对象</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"资源回收\"><a href=\"#资源回收\" class=\"headerlink\" title=\"资源回收:\"></a>资源回收:</h2><h4 id=\"Dalvik虚拟机中的堆\"><a href=\"#Dalvik虚拟机中的堆\" class=\"headerlink\" title=\"Dalvik虚拟机中的堆:\"></a>Dalvik虚拟机中的堆:</h4><blockquote>\n<p>匿名共享内存</p>\n</blockquote>\n<p>不直接管理，封装成mspace交给C库来管理</p>\n<h4 id=\"Heap-Bitmap\"><a href=\"#Heap-Bitmap\" class=\"headerlink\" title=\"Heap Bitmap\"></a>Heap Bitmap</h4><p>描述对象有没有被引用的数据结构</p>\n<h3 id=\"Mark-Sweep算法\"><a href=\"#Mark-Sweep算法\" class=\"headerlink\" title=\"Mark-Sweep算法\"></a>Mark-Sweep算法</h3><h4 id=\"1-Mark阶段\"><a href=\"#1-Mark阶段\" class=\"headerlink\" title=\"1. Mark阶段\"></a>1. Mark阶段</h4><p>从对象的根集开始标记<strong>被引用</strong>的对象</p>\n<h5 id=\"一般算法\"><a href=\"#一般算法\" class=\"headerlink\" title=\"一般算法\"></a>一般算法</h5><blockquote>\n<p>Stop The World</p>\n</blockquote>\n<p>除垃圾收集线程之外，其他线程都停止，否则可能导致不能正确标记每一个对象</p>\n<h5 id=\"并行垃圾收集算法\"><a href=\"#并行垃圾收集算法\" class=\"headerlink\" title=\"并行垃圾收集算法\"></a>并行垃圾收集算法</h5><blockquote>\n<p>Concurrent GC<br>有条件地允许程序的其他线程执行</p>\n</blockquote>\n<p>分为两个阶段:</p>\n<ol>\n<li>只负责标记根集对象(GC开始的瞬间给，被全局变量、栈变量和寄存器等引用的对象): <strong>Stop The World</strong></li>\n<li>顺着已标记的根集对象找到其余的被引用的变量: <strong>允许除垃圾收集线程以外的线程运行</strong>，但是需要由Card Table(一字节CLEAN/DIRTY)记录<strong>在该过程中被修改的对象</strong>(非垃圾收集堆对象 对 垃圾收集堆对象 的引用 -&gt; 由于 Dalvik虚拟机进行部分垃圾收集时，只收集Activie堆上分配的对象 -&gt; Zygote堆上分配的对象 在 部分垃圾收集执行过程中 对 在 Active堆上分配的对象的引用)</li>\n</ol>\n<h4 id=\"2-Sweep阶段\"><a href=\"#2-Sweep阶段\" class=\"headerlink\" title=\"2. Sweep阶段\"></a>2. Sweep阶段</h4><p>回收没有被标记的对象占用的内存</p>\n<hr>\n<ul>\n<li><a href=\"http://blog.csdn.net/luoshengyang/article/details/41338251\">Dalvik虚拟机垃圾收集机制简要介绍和学习计划</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"Google IO 2016","date":"2016-05-18T19:03:03.000Z","_content":"\n## Google HOME\n\n> https://home.google.com/\n\n1. 音乐、连接电视\n2. 闹钟，管理事务\n3. Google Search\n\n<!-- more -->\n\n## Allo\n\n> 这个夏天IOS、Android上线。\n\n1. 改字体\n2. 图片上编辑文字\n3. 快速建议需要回答内容，然后输出，甚至是图片。\n4. 根据语言内容，智能建议餐厅、地图、图片等。\n5. 可以和Google聊天，快速通过聊天进行任意查询。返回的内容、地图、youtube等。可以和Google玩文字游戏。一些问答。\n6. 隐私模式，私有通知、聊天内容有效期等。\n\n## Duo\n\n> 这个夏天IOS、Android上线。\n\n> 专注视频聊天。\n> WEBRTC\n> QUIC\n\n在还没有接起的时候就可以看到对方，接起以后可以双方通话。\n\n\n\n\n## Android N\n\n> https://www.android.com/versions/name-n/\n> Preview, thanks for quickly feedback.\n\n### Performance\n\n- Vulkan, gpu Api\n- Android Runtime. 75% faster app installation,  50% reduction in compiled code size.\n\n### Security\n\n- File-based encryption, media framework hardering, seamless update.\n- Googe Play Security Testing, improvement program.\n\n### Producty\n\n- Multi-tasking. 多任务切换\n- Multi-window.\n- Notifications. 在通知栏回消息。\n- More Emoji.Unicode9.\n\n## VR\n\n> Daydream\n> develop for it today.\n\n> 清晰加载\n\nVR Mode in Android N.\n\nPerformance\nLow latency\nVR System UI.\n\n我们国家也有 华为、小米适配这个阵营.\n\n- google street view.\n- youtube\n- map\n- photos\n- google play\n\n\n## Android Wear\n\nAndroid Wear 2.0\n\n## Android Studio\n\n- Faster builds,\n- Test recording\n- New Layout Design.\n\n#### Smarts.\n\n- Apk analyzer\n- Layout inspector\n- Expanded Android code analysis.\n\n#### platform Support\n\n- Ndk build, C++.\n\n## Firebase\n\n> All free.\n> firebase.google.com\n\n- Analytics\n- Cloud Messaging.\n- Notification\n- Crash Reporting\n- Remote Config\n- Dynamic Links\n\n## Instant App\n\n\n\n不用安装Apps，只需要Google play下载其中需要用到的代码，然后运行，速度非常的快。应该是需要Apk根据api简单的适配。\n","source":"_posts/google_io_2016.md","raw":"title: Google IO 2016\ndate: 2016-05-19 03:03:03\npermalink: 2016/05/19/google_io_2016\ntags:\n- Android\n- Google IO\n- Firebase\n- Allo\n- VR Mode\n- Android N\n- Instant App\n\n---\n\n## Google HOME\n\n> https://home.google.com/\n\n1. 音乐、连接电视\n2. 闹钟，管理事务\n3. Google Search\n\n<!-- more -->\n\n## Allo\n\n> 这个夏天IOS、Android上线。\n\n1. 改字体\n2. 图片上编辑文字\n3. 快速建议需要回答内容，然后输出，甚至是图片。\n4. 根据语言内容，智能建议餐厅、地图、图片等。\n5. 可以和Google聊天，快速通过聊天进行任意查询。返回的内容、地图、youtube等。可以和Google玩文字游戏。一些问答。\n6. 隐私模式，私有通知、聊天内容有效期等。\n\n## Duo\n\n> 这个夏天IOS、Android上线。\n\n> 专注视频聊天。\n> WEBRTC\n> QUIC\n\n在还没有接起的时候就可以看到对方，接起以后可以双方通话。\n\n\n\n\n## Android N\n\n> https://www.android.com/versions/name-n/\n> Preview, thanks for quickly feedback.\n\n### Performance\n\n- Vulkan, gpu Api\n- Android Runtime. 75% faster app installation,  50% reduction in compiled code size.\n\n### Security\n\n- File-based encryption, media framework hardering, seamless update.\n- Googe Play Security Testing, improvement program.\n\n### Producty\n\n- Multi-tasking. 多任务切换\n- Multi-window.\n- Notifications. 在通知栏回消息。\n- More Emoji.Unicode9.\n\n## VR\n\n> Daydream\n> develop for it today.\n\n> 清晰加载\n\nVR Mode in Android N.\n\nPerformance\nLow latency\nVR System UI.\n\n我们国家也有 华为、小米适配这个阵营.\n\n- google street view.\n- youtube\n- map\n- photos\n- google play\n\n\n## Android Wear\n\nAndroid Wear 2.0\n\n## Android Studio\n\n- Faster builds,\n- Test recording\n- New Layout Design.\n\n#### Smarts.\n\n- Apk analyzer\n- Layout inspector\n- Expanded Android code analysis.\n\n#### platform Support\n\n- Ndk build, C++.\n\n## Firebase\n\n> All free.\n> firebase.google.com\n\n- Analytics\n- Cloud Messaging.\n- Notification\n- Crash Reporting\n- Remote Config\n- Dynamic Links\n\n## Instant App\n\n\n\n不用安装Apps，只需要Google play下载其中需要用到的代码，然后运行，速度非常的快。应该是需要Apk根据api简单的适配。\n","slug":"2016/05/19/google_io_2016","published":1,"updated":"2017-01-26T14:52:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66it002k95bu5cgvublj","content":"<h2 id=\"Google-HOME\"><a href=\"#Google-HOME\" class=\"headerlink\" title=\"Google HOME\"></a>Google HOME</h2><blockquote>\n<p><a href=\"https://home.google.com/\" target=\"_blank\" rel=\"external\">https://home.google.com/</a></p>\n</blockquote>\n<ol>\n<li>音乐、连接电视</li>\n<li>闹钟，管理事务</li>\n<li>Google Search</li>\n</ol>\n<a id=\"more\"></a>\n<h2 id=\"Allo\"><a href=\"#Allo\" class=\"headerlink\" title=\"Allo\"></a>Allo</h2><blockquote>\n<p>这个夏天IOS、Android上线。</p>\n</blockquote>\n<ol>\n<li>改字体</li>\n<li>图片上编辑文字</li>\n<li>快速建议需要回答内容，然后输出，甚至是图片。</li>\n<li>根据语言内容，智能建议餐厅、地图、图片等。</li>\n<li>可以和Google聊天，快速通过聊天进行任意查询。返回的内容、地图、youtube等。可以和Google玩文字游戏。一些问答。</li>\n<li>隐私模式，私有通知、聊天内容有效期等。</li>\n</ol>\n<h2 id=\"Duo\"><a href=\"#Duo\" class=\"headerlink\" title=\"Duo\"></a>Duo</h2><blockquote>\n<p>这个夏天IOS、Android上线。</p>\n<p>专注视频聊天。<br>WEBRTC<br>QUIC</p>\n</blockquote>\n<p>在还没有接起的时候就可以看到对方，接起以后可以双方通话。</p>\n<h2 id=\"Android-N\"><a href=\"#Android-N\" class=\"headerlink\" title=\"Android N\"></a>Android N</h2><blockquote>\n<p><a href=\"https://www.android.com/versions/name-n/\" target=\"_blank\" rel=\"external\">https://www.android.com/versions/name-n/</a><br>Preview, thanks for quickly feedback.</p>\n</blockquote>\n<h3 id=\"Performance\"><a href=\"#Performance\" class=\"headerlink\" title=\"Performance\"></a>Performance</h3><ul>\n<li>Vulkan, gpu Api</li>\n<li>Android Runtime. 75% faster app installation,  50% reduction in compiled code size.</li>\n</ul>\n<h3 id=\"Security\"><a href=\"#Security\" class=\"headerlink\" title=\"Security\"></a>Security</h3><ul>\n<li>File-based encryption, media framework hardering, seamless update.</li>\n<li>Googe Play Security Testing, improvement program.</li>\n</ul>\n<h3 id=\"Producty\"><a href=\"#Producty\" class=\"headerlink\" title=\"Producty\"></a>Producty</h3><ul>\n<li>Multi-tasking. 多任务切换</li>\n<li>Multi-window.</li>\n<li>Notifications. 在通知栏回消息。</li>\n<li>More Emoji.Unicode9.</li>\n</ul>\n<h2 id=\"VR\"><a href=\"#VR\" class=\"headerlink\" title=\"VR\"></a>VR</h2><blockquote>\n<p>Daydream<br>develop for it today.</p>\n<p>清晰加载</p>\n</blockquote>\n<p>VR Mode in Android N.</p>\n<p>Performance<br>Low latency<br>VR System UI.</p>\n<p>我们国家也有 华为、小米适配这个阵营.</p>\n<ul>\n<li>google street view.</li>\n<li>youtube</li>\n<li>map</li>\n<li>photos</li>\n<li>google play</li>\n</ul>\n<h2 id=\"Android-Wear\"><a href=\"#Android-Wear\" class=\"headerlink\" title=\"Android Wear\"></a>Android Wear</h2><p>Android Wear 2.0</p>\n<h2 id=\"Android-Studio\"><a href=\"#Android-Studio\" class=\"headerlink\" title=\"Android Studio\"></a>Android Studio</h2><ul>\n<li>Faster builds,</li>\n<li>Test recording</li>\n<li>New Layout Design.</li>\n</ul>\n<h4 id=\"Smarts\"><a href=\"#Smarts\" class=\"headerlink\" title=\"Smarts.\"></a>Smarts.</h4><ul>\n<li>Apk analyzer</li>\n<li>Layout inspector</li>\n<li>Expanded Android code analysis.</li>\n</ul>\n<h4 id=\"platform-Support\"><a href=\"#platform-Support\" class=\"headerlink\" title=\"platform Support\"></a>platform Support</h4><ul>\n<li>Ndk build, C++.</li>\n</ul>\n<h2 id=\"Firebase\"><a href=\"#Firebase\" class=\"headerlink\" title=\"Firebase\"></a>Firebase</h2><blockquote>\n<p>All free.<br>firebase.google.com</p>\n</blockquote>\n<ul>\n<li>Analytics</li>\n<li>Cloud Messaging.</li>\n<li>Notification</li>\n<li>Crash Reporting</li>\n<li>Remote Config</li>\n<li>Dynamic Links</li>\n</ul>\n<h2 id=\"Instant-App\"><a href=\"#Instant-App\" class=\"headerlink\" title=\"Instant App\"></a>Instant App</h2><p>不用安装Apps，只需要Google play下载其中需要用到的代码，然后运行，速度非常的快。应该是需要Apk根据api简单的适配。</p>\n","excerpt":"<h2 id=\"Google-HOME\"><a href=\"#Google-HOME\" class=\"headerlink\" title=\"Google HOME\"></a>Google HOME</h2><blockquote>\n<p><a href=\"https://home.google.com/\">https://home.google.com/</a></p>\n</blockquote>\n<ol>\n<li>音乐、连接电视</li>\n<li>闹钟，管理事务</li>\n<li>Google Search</li>\n</ol>","more":"<h2 id=\"Allo\"><a href=\"#Allo\" class=\"headerlink\" title=\"Allo\"></a>Allo</h2><blockquote>\n<p>这个夏天IOS、Android上线。</p>\n</blockquote>\n<ol>\n<li>改字体</li>\n<li>图片上编辑文字</li>\n<li>快速建议需要回答内容，然后输出，甚至是图片。</li>\n<li>根据语言内容，智能建议餐厅、地图、图片等。</li>\n<li>可以和Google聊天，快速通过聊天进行任意查询。返回的内容、地图、youtube等。可以和Google玩文字游戏。一些问答。</li>\n<li>隐私模式，私有通知、聊天内容有效期等。</li>\n</ol>\n<h2 id=\"Duo\"><a href=\"#Duo\" class=\"headerlink\" title=\"Duo\"></a>Duo</h2><blockquote>\n<p>这个夏天IOS、Android上线。</p>\n<p>专注视频聊天。<br>WEBRTC<br>QUIC</p>\n</blockquote>\n<p>在还没有接起的时候就可以看到对方，接起以后可以双方通话。</p>\n<h2 id=\"Android-N\"><a href=\"#Android-N\" class=\"headerlink\" title=\"Android N\"></a>Android N</h2><blockquote>\n<p><a href=\"https://www.android.com/versions/name-n/\">https://www.android.com/versions/name-n/</a><br>Preview, thanks for quickly feedback.</p>\n</blockquote>\n<h3 id=\"Performance\"><a href=\"#Performance\" class=\"headerlink\" title=\"Performance\"></a>Performance</h3><ul>\n<li>Vulkan, gpu Api</li>\n<li>Android Runtime. 75% faster app installation,  50% reduction in compiled code size.</li>\n</ul>\n<h3 id=\"Security\"><a href=\"#Security\" class=\"headerlink\" title=\"Security\"></a>Security</h3><ul>\n<li>File-based encryption, media framework hardering, seamless update.</li>\n<li>Googe Play Security Testing, improvement program.</li>\n</ul>\n<h3 id=\"Producty\"><a href=\"#Producty\" class=\"headerlink\" title=\"Producty\"></a>Producty</h3><ul>\n<li>Multi-tasking. 多任务切换</li>\n<li>Multi-window.</li>\n<li>Notifications. 在通知栏回消息。</li>\n<li>More Emoji.Unicode9.</li>\n</ul>\n<h2 id=\"VR\"><a href=\"#VR\" class=\"headerlink\" title=\"VR\"></a>VR</h2><blockquote>\n<p>Daydream<br>develop for it today.</p>\n<p>清晰加载</p>\n</blockquote>\n<p>VR Mode in Android N.</p>\n<p>Performance<br>Low latency<br>VR System UI.</p>\n<p>我们国家也有 华为、小米适配这个阵营.</p>\n<ul>\n<li>google street view.</li>\n<li>youtube</li>\n<li>map</li>\n<li>photos</li>\n<li>google play</li>\n</ul>\n<h2 id=\"Android-Wear\"><a href=\"#Android-Wear\" class=\"headerlink\" title=\"Android Wear\"></a>Android Wear</h2><p>Android Wear 2.0</p>\n<h2 id=\"Android-Studio\"><a href=\"#Android-Studio\" class=\"headerlink\" title=\"Android Studio\"></a>Android Studio</h2><ul>\n<li>Faster builds,</li>\n<li>Test recording</li>\n<li>New Layout Design.</li>\n</ul>\n<h4 id=\"Smarts\"><a href=\"#Smarts\" class=\"headerlink\" title=\"Smarts.\"></a>Smarts.</h4><ul>\n<li>Apk analyzer</li>\n<li>Layout inspector</li>\n<li>Expanded Android code analysis.</li>\n</ul>\n<h4 id=\"platform-Support\"><a href=\"#platform-Support\" class=\"headerlink\" title=\"platform Support\"></a>platform Support</h4><ul>\n<li>Ndk build, C++.</li>\n</ul>\n<h2 id=\"Firebase\"><a href=\"#Firebase\" class=\"headerlink\" title=\"Firebase\"></a>Firebase</h2><blockquote>\n<p>All free.<br>firebase.google.com</p>\n</blockquote>\n<ul>\n<li>Analytics</li>\n<li>Cloud Messaging.</li>\n<li>Notification</li>\n<li>Crash Reporting</li>\n<li>Remote Config</li>\n<li>Dynamic Links</li>\n</ul>\n<h2 id=\"Instant-App\"><a href=\"#Instant-App\" class=\"headerlink\" title=\"Instant App\"></a>Instant App</h2><p>不用安装Apps，只需要Google play下载其中需要用到的代码，然后运行，速度非常的快。应该是需要Apk根据api简单的适配。</p>"},{"title":"DexGuard、Proguard、Multi-dex","date":"2015-11-04T11:26:03.000Z","_content":"\n> Proguard与DexGuard是同一团队开发的\n\n<!-- more -->\n\n## I. 区别表\n\nProguard | DexGuard | 备注\n-|-|-\n免费 | 收费 | [DexGuard GuardSquare](https://www.guardsquare.com/dexguard)\n一般代码混淆 | 代码混淆力度更大 + 资源混淆 + so加壳等 | -\n不需要multi-dex | 自带multi-dex扫描 | -\n\n\n#### 资源混淆?\n首先， 所有static final的都会直接预编译，代码中都是资源ID，资源混淆只和 **resources.arsc** (资源ID、string、路径映射等)、**资源路径**、**资源文件名** 有关。\n\n#### 资源混淆可能的坑?:\n\nResources#getIdentifier估计废了，记得白名单。\n\n#### Proguard也想要资源混淆?:\n\n试试这个: [AndResGuard](https://github.com/shwenzhang/AndResGuard)\n\n#### 为啥国内很少用DexGuard?有坑?\n\n- 付费\n- 国内文档少，而且配置起来会比Proguard复杂一些，细节多些。\n- 由于需要做非常重度的混淆，因此由自带multi-dex，更多细节问题\n- 第三方库用该混淆可能会有难以预料的坑，特别是国内的，基本上保证Proguard没有问题给出文档，Dexguard基本都没有测试过(比如以前使用这个木有关注到umeng既然有些资源采用反射取，官方也没有给明，完全是盲人摸象等)\n\n## II. Multi-dex\n\n#### 为啥有这梗\n\n> 可以先参看: [ART、Dalvik](http://blog.dreamtobe.cn/2015/11/01/android_art_dalvik/)\n\n用Dalvik虚拟机的Android手机，在安装app的时候，会有一个优化dex的过程，使用dexopt将dex优化的更加高效于运行存储为odex，但是dexopt把每个类的方法id检索的链表长度使用的short（为了效率？木有考虑到？），无论如何，就导致了如果一个dex中的方法数超过了65535就跪了，so...\n\n> 以下针对Gradle multi-dex说明\n\n#### 配置\n\nGradle:\n\n```\n...\nandroid {\n\n    ...\n    defaultConfig {\n        ...\n        // Enabling multidex support.\n        multiDexEnabled true\n    }\n    ...\n}\ndependencies {\n  compile 'com.android.support:multidex:1.0.0'\n}\n```\n\nAndroidManifest.xml:\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.example.android.multidex.myapplication\">\n    <application\n        ...\n        android:name=\"android.support.multidex.MultiDexApplication\">\n        ...\n    </application>\n</manifest>\n```\n\n#### 优化\n\n##### 问题1:\n由于multidex配置需要编译系统复杂的处理引用关系来判断哪些需要在主dex，哪些需要在次dex，因此势必会增加日常编译的耗时\n\n##### 解决方法:\n可以创建两个variations用于gradle编译，定义在`productFlavors`，一个定义最低sdk到21(由于ART不再需要运行时加载，并且其在安装时翻译的时候，会处理classes(..N).dex，因此build直接每个module一个dex不用merge不用分主次dex，每次只需要重新计算修改过的modules的dex，省去很多很多时间)，一个为发布需要的最低sdk。自己调试的时候，结合选用Debug的Type，在Build Variants中选用`devDebug`即可。\n\n```\nandroid {\n    productFlavors {\n        // Define separate dev and prod product flavors.\n        dev {\n            // dev utilizes minSDKVersion = 21 to allow the Android gradle plugin\n            // to pre-dex each module and produce an APK that can be tested on\n            // Android Lollipop without time consuming dex merging processes.\n            minSdkVersion 21\n        }\n        prod {\n            // The actual minSdkVersion for the application.\n            minSdkVersion 14\n        }\n    }\n          ...\n}\n```\n\n##### 问题2:\n\n由于Dalvik运行时加载dex，如果dex多而且大，在启动应用的时候加载其余dex的时可能会出现ANR，甚至在Android 4.0(API 14)以前的机器无法运行。\n\n##### 解决方法:\n\nGradle配置\n\n```\nandroid {\n    buildTypes{\n        release {\n            minifyEnabled true // 混淆时删除无用代码\n            shrinkResources true // 删除混淆是标注的无用资源(res/)\n            ...\n        }\n    ...\n    }\n}\n```\n\n以上两个参数，有效删除无用代码与无用资源，减小包大小。如果需要支持4.0以前的机器，做好测试工作。如果是4.0以上的机器，可以考虑再AndroidManifest中配置`largeHeap=true`，一般来说java heap可以扩容到50%以上，具体看不同机器的配置(`/system/build.prop`)。\n\n---\n\n- [[Android] Proguard And DexGuard](http://blog.csdn.net/arui319/article/details/18360147)\n- [Building Apps with Over 65K Methods](https://developer.android.com/intl/ko/tools/building/multidex.html)\n- [How to disable Dexguard?](http://stackoverflow.com/questions/27508560/how-to-disable-dexguard)\n- [“minifyEnabled” vs “shrinkResources” - what's the difference? and how to get the saved space?](http://stackoverflow.com/questions/30800804/minifyenabled-vs-shrinkresources-whats-the-difference-and-how-to-get-the)\n- [Gradle Plugin User Guide](http://tools.android.com/tech-docs/new-build-system/user-guide)\n- [PROGUARD FOR ANDROID](https://lab.getbase.com/proguard-for-android/)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/guard_multi_dex.md","raw":"title: DexGuard、Proguard、Multi-dex\ndate: 2015-11-04 19:26:03\npermalink: 2015/11/04/guard_multi_dex\ntags:\n- Android\n- Build\n- Proguard\n- Gradle\n- DexGuard\n- Multi-Dex\n\n---\n\n> Proguard与DexGuard是同一团队开发的\n\n<!-- more -->\n\n## I. 区别表\n\nProguard | DexGuard | 备注\n-|-|-\n免费 | 收费 | [DexGuard GuardSquare](https://www.guardsquare.com/dexguard)\n一般代码混淆 | 代码混淆力度更大 + 资源混淆 + so加壳等 | -\n不需要multi-dex | 自带multi-dex扫描 | -\n\n\n#### 资源混淆?\n首先， 所有static final的都会直接预编译，代码中都是资源ID，资源混淆只和 **resources.arsc** (资源ID、string、路径映射等)、**资源路径**、**资源文件名** 有关。\n\n#### 资源混淆可能的坑?:\n\nResources#getIdentifier估计废了，记得白名单。\n\n#### Proguard也想要资源混淆?:\n\n试试这个: [AndResGuard](https://github.com/shwenzhang/AndResGuard)\n\n#### 为啥国内很少用DexGuard?有坑?\n\n- 付费\n- 国内文档少，而且配置起来会比Proguard复杂一些，细节多些。\n- 由于需要做非常重度的混淆，因此由自带multi-dex，更多细节问题\n- 第三方库用该混淆可能会有难以预料的坑，特别是国内的，基本上保证Proguard没有问题给出文档，Dexguard基本都没有测试过(比如以前使用这个木有关注到umeng既然有些资源采用反射取，官方也没有给明，完全是盲人摸象等)\n\n## II. Multi-dex\n\n#### 为啥有这梗\n\n> 可以先参看: [ART、Dalvik](http://blog.dreamtobe.cn/2015/11/01/android_art_dalvik/)\n\n用Dalvik虚拟机的Android手机，在安装app的时候，会有一个优化dex的过程，使用dexopt将dex优化的更加高效于运行存储为odex，但是dexopt把每个类的方法id检索的链表长度使用的short（为了效率？木有考虑到？），无论如何，就导致了如果一个dex中的方法数超过了65535就跪了，so...\n\n> 以下针对Gradle multi-dex说明\n\n#### 配置\n\nGradle:\n\n```\n...\nandroid {\n\n    ...\n    defaultConfig {\n        ...\n        // Enabling multidex support.\n        multiDexEnabled true\n    }\n    ...\n}\ndependencies {\n  compile 'com.android.support:multidex:1.0.0'\n}\n```\n\nAndroidManifest.xml:\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.example.android.multidex.myapplication\">\n    <application\n        ...\n        android:name=\"android.support.multidex.MultiDexApplication\">\n        ...\n    </application>\n</manifest>\n```\n\n#### 优化\n\n##### 问题1:\n由于multidex配置需要编译系统复杂的处理引用关系来判断哪些需要在主dex，哪些需要在次dex，因此势必会增加日常编译的耗时\n\n##### 解决方法:\n可以创建两个variations用于gradle编译，定义在`productFlavors`，一个定义最低sdk到21(由于ART不再需要运行时加载，并且其在安装时翻译的时候，会处理classes(..N).dex，因此build直接每个module一个dex不用merge不用分主次dex，每次只需要重新计算修改过的modules的dex，省去很多很多时间)，一个为发布需要的最低sdk。自己调试的时候，结合选用Debug的Type，在Build Variants中选用`devDebug`即可。\n\n```\nandroid {\n    productFlavors {\n        // Define separate dev and prod product flavors.\n        dev {\n            // dev utilizes minSDKVersion = 21 to allow the Android gradle plugin\n            // to pre-dex each module and produce an APK that can be tested on\n            // Android Lollipop without time consuming dex merging processes.\n            minSdkVersion 21\n        }\n        prod {\n            // The actual minSdkVersion for the application.\n            minSdkVersion 14\n        }\n    }\n          ...\n}\n```\n\n##### 问题2:\n\n由于Dalvik运行时加载dex，如果dex多而且大，在启动应用的时候加载其余dex的时可能会出现ANR，甚至在Android 4.0(API 14)以前的机器无法运行。\n\n##### 解决方法:\n\nGradle配置\n\n```\nandroid {\n    buildTypes{\n        release {\n            minifyEnabled true // 混淆时删除无用代码\n            shrinkResources true // 删除混淆是标注的无用资源(res/)\n            ...\n        }\n    ...\n    }\n}\n```\n\n以上两个参数，有效删除无用代码与无用资源，减小包大小。如果需要支持4.0以前的机器，做好测试工作。如果是4.0以上的机器，可以考虑再AndroidManifest中配置`largeHeap=true`，一般来说java heap可以扩容到50%以上，具体看不同机器的配置(`/system/build.prop`)。\n\n---\n\n- [[Android] Proguard And DexGuard](http://blog.csdn.net/arui319/article/details/18360147)\n- [Building Apps with Over 65K Methods](https://developer.android.com/intl/ko/tools/building/multidex.html)\n- [How to disable Dexguard?](http://stackoverflow.com/questions/27508560/how-to-disable-dexguard)\n- [“minifyEnabled” vs “shrinkResources” - what's the difference? and how to get the saved space?](http://stackoverflow.com/questions/30800804/minifyenabled-vs-shrinkresources-whats-the-difference-and-how-to-get-the)\n- [Gradle Plugin User Guide](http://tools.android.com/tech-docs/new-build-system/user-guide)\n- [PROGUARD FOR ANDROID](https://lab.getbase.com/proguard-for-android/)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2015/11/04/guard_multi_dex","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66iu002l95bulbjiz94i","content":"<blockquote>\n<p>Proguard与DexGuard是同一团队开发的</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"I-区别表\"><a href=\"#I-区别表\" class=\"headerlink\" title=\"I. 区别表\"></a>I. 区别表</h2><table>\n<thead>\n<tr>\n<th>Proguard</th>\n<th>DexGuard</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>免费</td>\n<td>收费</td>\n<td><a href=\"https://www.guardsquare.com/dexguard\" target=\"_blank\" rel=\"external\">DexGuard GuardSquare</a></td>\n</tr>\n<tr>\n<td>一般代码混淆</td>\n<td>代码混淆力度更大 + 资源混淆 + so加壳等</td>\n<td>-</td>\n</tr>\n<tr>\n<td>不需要multi-dex</td>\n<td>自带multi-dex扫描</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"资源混淆\"><a href=\"#资源混淆\" class=\"headerlink\" title=\"资源混淆?\"></a>资源混淆?</h4><p>首先， 所有static final的都会直接预编译，代码中都是资源ID，资源混淆只和 <strong>resources.arsc</strong> (资源ID、string、路径映射等)、<strong>资源路径</strong>、<strong>资源文件名</strong> 有关。</p>\n<h4 id=\"资源混淆可能的坑\"><a href=\"#资源混淆可能的坑\" class=\"headerlink\" title=\"资源混淆可能的坑?:\"></a>资源混淆可能的坑?:</h4><p>Resources#getIdentifier估计废了，记得白名单。</p>\n<h4 id=\"Proguard也想要资源混淆\"><a href=\"#Proguard也想要资源混淆\" class=\"headerlink\" title=\"Proguard也想要资源混淆?:\"></a>Proguard也想要资源混淆?:</h4><p>试试这个: <a href=\"https://github.com/shwenzhang/AndResGuard\" target=\"_blank\" rel=\"external\">AndResGuard</a></p>\n<h4 id=\"为啥国内很少用DexGuard-有坑\"><a href=\"#为啥国内很少用DexGuard-有坑\" class=\"headerlink\" title=\"为啥国内很少用DexGuard?有坑?\"></a>为啥国内很少用DexGuard?有坑?</h4><ul>\n<li>付费</li>\n<li>国内文档少，而且配置起来会比Proguard复杂一些，细节多些。</li>\n<li>由于需要做非常重度的混淆，因此由自带multi-dex，更多细节问题</li>\n<li>第三方库用该混淆可能会有难以预料的坑，特别是国内的，基本上保证Proguard没有问题给出文档，Dexguard基本都没有测试过(比如以前使用这个木有关注到umeng既然有些资源采用反射取，官方也没有给明，完全是盲人摸象等)</li>\n</ul>\n<h2 id=\"II-Multi-dex\"><a href=\"#II-Multi-dex\" class=\"headerlink\" title=\"II. Multi-dex\"></a>II. Multi-dex</h2><h4 id=\"为啥有这梗\"><a href=\"#为啥有这梗\" class=\"headerlink\" title=\"为啥有这梗\"></a>为啥有这梗</h4><blockquote>\n<p>可以先参看: <a href=\"http://blog.dreamtobe.cn/2015/11/01/android_art_dalvik/\">ART、Dalvik</a></p>\n</blockquote>\n<p>用Dalvik虚拟机的Android手机，在安装app的时候，会有一个优化dex的过程，使用dexopt将dex优化的更加高效于运行存储为odex，但是dexopt把每个类的方法id检索的链表长度使用的short（为了效率？木有考虑到？），无论如何，就导致了如果一个dex中的方法数超过了65535就跪了，so…</p>\n<blockquote>\n<p>以下针对Gradle multi-dex说明</p>\n</blockquote>\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><p>Gradle:</p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"params\">...</span></div><div class=\"line\">android &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"params\">...</span></div><div class=\"line\">    defaultConfig &#123;</div><div class=\"line\">        <span class=\"params\">...</span></div><div class=\"line\">        <span class=\"comment\">// Enabling multidex support.</span></div><div class=\"line\">        multiDexEnabled <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"params\">...</span></div><div class=\"line\">&#125;</div><div class=\"line\">dependencies &#123;</div><div class=\"line\">  compile <span class=\"string\">'com.android.support:multidex:1.0.0'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>AndroidManifest.xml:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">package</span>=<span class=\"string\">\"com.example.android.multidex.myapplication\"</span>&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">application</span></span></div><div class=\"line\">        <span class=\"attr\">...</span></div><div class=\"line\">        <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.support.multidex.MultiDexApplication\"</span>&gt;</div><div class=\"line\">        ...</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h4><h5 id=\"问题1\"><a href=\"#问题1\" class=\"headerlink\" title=\"问题1:\"></a>问题1:</h5><p>由于multidex配置需要编译系统复杂的处理引用关系来判断哪些需要在主dex，哪些需要在次dex，因此势必会增加日常编译的耗时</p>\n<h5 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法:\"></a>解决方法:</h5><p>可以创建两个variations用于gradle编译，定义在<code>productFlavors</code>，一个定义最低sdk到21(由于ART不再需要运行时加载，并且其在安装时翻译的时候，会处理classes(..N).dex，因此build直接每个module一个dex不用merge不用分主次dex，每次只需要重新计算修改过的modules的dex，省去很多很多时间)，一个为发布需要的最低sdk。自己调试的时候，结合选用Debug的Type，在Build Variants中选用<code>devDebug</code>即可。</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\">android </span>&#123;</div><div class=\"line\">    <span class=\"class\">productFlavors </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Define separate dev and prod product flavors.</span></div><div class=\"line\">        <span class=\"class\">dev </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// dev utilizes minSDKVersion = 21 to allow the Android gradle plugin</span></div><div class=\"line\">            <span class=\"comment\">// to pre-dex each module and produce an APK that can be tested on</span></div><div class=\"line\">            <span class=\"comment\">// Android Lollipop without time consuming dex merging processes.</span></div><div class=\"line\">            minSdkVersion <span class=\"number\">21</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"class\">prod </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// The actual minSdkVersion for the application.</span></div><div class=\"line\">            minSdkVersion <span class=\"number\">14</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">          ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"问题2\"><a href=\"#问题2\" class=\"headerlink\" title=\"问题2:\"></a>问题2:</h5><p>由于Dalvik运行时加载dex，如果dex多而且大，在启动应用的时候加载其余dex的时可能会出现ANR，甚至在Android 4.0(API 14)以前的机器无法运行。</p>\n<h5 id=\"解决方法-1\"><a href=\"#解决方法-1\" class=\"headerlink\" title=\"解决方法:\"></a>解决方法:</h5><p>Gradle配置</p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">android &#123;</div><div class=\"line\">    buildTypes&#123;</div><div class=\"line\">        release &#123;</div><div class=\"line\">            minifyEnabled <span class=\"literal\">true</span> <span class=\"comment\">// 混淆时删除无用代码</span></div><div class=\"line\">            shrinkResources <span class=\"literal\">true</span> <span class=\"comment\">// 删除混淆是标注的无用资源(res/)</span></div><div class=\"line\">            <span class=\"params\">...</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    <span class=\"params\">...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上两个参数，有效删除无用代码与无用资源，减小包大小。如果需要支持4.0以前的机器，做好测试工作。如果是4.0以上的机器，可以考虑再AndroidManifest中配置<code>largeHeap=true</code>，一般来说java heap可以扩容到50%以上，具体看不同机器的配置(<code>/system/build.prop</code>)。</p>\n<hr>\n<ul>\n<li><a href=\"http://blog.csdn.net/arui319/article/details/18360147\" target=\"_blank\" rel=\"external\">[Android] Proguard And DexGuard</a></li>\n<li><a href=\"https://developer.android.com/intl/ko/tools/building/multidex.html\" target=\"_blank\" rel=\"external\">Building Apps with Over 65K Methods</a></li>\n<li><a href=\"http://stackoverflow.com/questions/27508560/how-to-disable-dexguard\" target=\"_blank\" rel=\"external\">How to disable Dexguard?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/30800804/minifyenabled-vs-shrinkresources-whats-the-difference-and-how-to-get-the\" target=\"_blank\" rel=\"external\">“minifyEnabled” vs “shrinkResources” - what’s the difference? and how to get the saved space?</a></li>\n<li><a href=\"http://tools.android.com/tech-docs/new-build-system/user-guide\" target=\"_blank\" rel=\"external\">Gradle Plugin User Guide</a></li>\n<li><a href=\"https://lab.getbase.com/proguard-for-android/\" target=\"_blank\" rel=\"external\">PROGUARD FOR ANDROID</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>Proguard与DexGuard是同一团队开发的</p>\n</blockquote>","more":"<h2 id=\"I-区别表\"><a href=\"#I-区别表\" class=\"headerlink\" title=\"I. 区别表\"></a>I. 区别表</h2><table>\n<thead>\n<tr>\n<th>Proguard</th>\n<th>DexGuard</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>免费</td>\n<td>收费</td>\n<td><a href=\"https://www.guardsquare.com/dexguard\">DexGuard GuardSquare</a></td>\n</tr>\n<tr>\n<td>一般代码混淆</td>\n<td>代码混淆力度更大 + 资源混淆 + so加壳等</td>\n<td>-</td>\n</tr>\n<tr>\n<td>不需要multi-dex</td>\n<td>自带multi-dex扫描</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"资源混淆\"><a href=\"#资源混淆\" class=\"headerlink\" title=\"资源混淆?\"></a>资源混淆?</h4><p>首先， 所有static final的都会直接预编译，代码中都是资源ID，资源混淆只和 <strong>resources.arsc</strong> (资源ID、string、路径映射等)、<strong>资源路径</strong>、<strong>资源文件名</strong> 有关。</p>\n<h4 id=\"资源混淆可能的坑\"><a href=\"#资源混淆可能的坑\" class=\"headerlink\" title=\"资源混淆可能的坑?:\"></a>资源混淆可能的坑?:</h4><p>Resources#getIdentifier估计废了，记得白名单。</p>\n<h4 id=\"Proguard也想要资源混淆\"><a href=\"#Proguard也想要资源混淆\" class=\"headerlink\" title=\"Proguard也想要资源混淆?:\"></a>Proguard也想要资源混淆?:</h4><p>试试这个: <a href=\"https://github.com/shwenzhang/AndResGuard\">AndResGuard</a></p>\n<h4 id=\"为啥国内很少用DexGuard-有坑\"><a href=\"#为啥国内很少用DexGuard-有坑\" class=\"headerlink\" title=\"为啥国内很少用DexGuard?有坑?\"></a>为啥国内很少用DexGuard?有坑?</h4><ul>\n<li>付费</li>\n<li>国内文档少，而且配置起来会比Proguard复杂一些，细节多些。</li>\n<li>由于需要做非常重度的混淆，因此由自带multi-dex，更多细节问题</li>\n<li>第三方库用该混淆可能会有难以预料的坑，特别是国内的，基本上保证Proguard没有问题给出文档，Dexguard基本都没有测试过(比如以前使用这个木有关注到umeng既然有些资源采用反射取，官方也没有给明，完全是盲人摸象等)</li>\n</ul>\n<h2 id=\"II-Multi-dex\"><a href=\"#II-Multi-dex\" class=\"headerlink\" title=\"II. Multi-dex\"></a>II. Multi-dex</h2><h4 id=\"为啥有这梗\"><a href=\"#为啥有这梗\" class=\"headerlink\" title=\"为啥有这梗\"></a>为啥有这梗</h4><blockquote>\n<p>可以先参看: <a href=\"http://blog.dreamtobe.cn/2015/11/01/android_art_dalvik/\">ART、Dalvik</a></p>\n</blockquote>\n<p>用Dalvik虚拟机的Android手机，在安装app的时候，会有一个优化dex的过程，使用dexopt将dex优化的更加高效于运行存储为odex，但是dexopt把每个类的方法id检索的链表长度使用的short（为了效率？木有考虑到？），无论如何，就导致了如果一个dex中的方法数超过了65535就跪了，so…</p>\n<blockquote>\n<p>以下针对Gradle multi-dex说明</p>\n</blockquote>\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><p>Gradle:</p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"params\">...</span></div><div class=\"line\">android &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"params\">...</span></div><div class=\"line\">    defaultConfig &#123;</div><div class=\"line\">        <span class=\"params\">...</span></div><div class=\"line\">        <span class=\"comment\">// Enabling multidex support.</span></div><div class=\"line\">        multiDexEnabled <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"params\">...</span></div><div class=\"line\">&#125;</div><div class=\"line\">dependencies &#123;</div><div class=\"line\">  compile <span class=\"string\">'com.android.support:multidex:1.0.0'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>AndroidManifest.xml:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">package</span>=<span class=\"string\">\"com.example.android.multidex.myapplication\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">application</span></div><div class=\"line\">        <span class=\"attr\">...</span></div><div class=\"line\">        <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.support.multidex.MultiDexApplication\"</span>&gt;</span></div><div class=\"line\">        ...</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h4><h5 id=\"问题1\"><a href=\"#问题1\" class=\"headerlink\" title=\"问题1:\"></a>问题1:</h5><p>由于multidex配置需要编译系统复杂的处理引用关系来判断哪些需要在主dex，哪些需要在次dex，因此势必会增加日常编译的耗时</p>\n<h5 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法:\"></a>解决方法:</h5><p>可以创建两个variations用于gradle编译，定义在<code>productFlavors</code>，一个定义最低sdk到21(由于ART不再需要运行时加载，并且其在安装时翻译的时候，会处理classes(..N).dex，因此build直接每个module一个dex不用merge不用分主次dex，每次只需要重新计算修改过的modules的dex，省去很多很多时间)，一个为发布需要的最低sdk。自己调试的时候，结合选用Debug的Type，在Build Variants中选用<code>devDebug</code>即可。</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\">android </span>&#123;</div><div class=\"line\">    <span class=\"class\">productFlavors </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Define separate dev and prod product flavors.</span></div><div class=\"line\">        <span class=\"class\">dev </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// dev utilizes minSDKVersion = 21 to allow the Android gradle plugin</span></div><div class=\"line\">            <span class=\"comment\">// to pre-dex each module and produce an APK that can be tested on</span></div><div class=\"line\">            <span class=\"comment\">// Android Lollipop without time consuming dex merging processes.</span></div><div class=\"line\">            minSdkVersion <span class=\"number\">21</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"class\">prod </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// The actual minSdkVersion for the application.</span></div><div class=\"line\">            minSdkVersion <span class=\"number\">14</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">          ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"问题2\"><a href=\"#问题2\" class=\"headerlink\" title=\"问题2:\"></a>问题2:</h5><p>由于Dalvik运行时加载dex，如果dex多而且大，在启动应用的时候加载其余dex的时可能会出现ANR，甚至在Android 4.0(API 14)以前的机器无法运行。</p>\n<h5 id=\"解决方法-1\"><a href=\"#解决方法-1\" class=\"headerlink\" title=\"解决方法:\"></a>解决方法:</h5><p>Gradle配置</p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">android &#123;</div><div class=\"line\">    buildTypes&#123;</div><div class=\"line\">        release &#123;</div><div class=\"line\">            minifyEnabled <span class=\"literal\">true</span> <span class=\"comment\">// 混淆时删除无用代码</span></div><div class=\"line\">            shrinkResources <span class=\"literal\">true</span> <span class=\"comment\">// 删除混淆是标注的无用资源(res/)</span></div><div class=\"line\">            <span class=\"params\">...</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    <span class=\"params\">...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上两个参数，有效删除无用代码与无用资源，减小包大小。如果需要支持4.0以前的机器，做好测试工作。如果是4.0以上的机器，可以考虑再AndroidManifest中配置<code>largeHeap=true</code>，一般来说java heap可以扩容到50%以上，具体看不同机器的配置(<code>/system/build.prop</code>)。</p>\n<hr>\n<ul>\n<li><a href=\"http://blog.csdn.net/arui319/article/details/18360147\">[Android] Proguard And DexGuard</a></li>\n<li><a href=\"https://developer.android.com/intl/ko/tools/building/multidex.html\">Building Apps with Over 65K Methods</a></li>\n<li><a href=\"http://stackoverflow.com/questions/27508560/how-to-disable-dexguard\">How to disable Dexguard?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/30800804/minifyenabled-vs-shrinkresources-whats-the-difference-and-how-to-get-the\">“minifyEnabled” vs “shrinkResources” - what’s the difference? and how to get the saved space?</a></li>\n<li><a href=\"http://tools.android.com/tech-docs/new-build-system/user-guide\">Gradle Plugin User Guide</a></li>\n<li><a href=\"https://lab.getbase.com/proguard-for-android/\">PROGUARD FOR ANDROID</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"gRPC","date":"2017-02-16T14:38:03.000Z","_content":"\n> 2015年2月由Google公司牵头，2016年8月对外正式发布的基于HTTP/2以及使用Proto3作为IDL与传输数据格式的通用的开源RPC架构。\n\n<!-- more -->\n\n> And Square, which has been working with Google on gRPC since the very early days, is connecting polyglot microservices within its infrastructure. - [gRPC: a true internet-scale RPC framework is now 1.0 and ready for production deployments](https://cloudplatform.googleblog.com/2016/08/gRPC-a-true-Internet-scale-RPC-framework-is-now-1-and-ready-for-production-deployments.html)\n\n## I. 特点\n\n- 低延迟、高拓展、高性能\n- 目前Google、Square等贡献代码\n- 已经在Google云服务、Netflix、CoreOS、Vendasta、Cockroachdb等上使用\n- 基于HTTP/2协议标准设计(双向流、头部压缩、多复用请求、二进制以帧为单位传输等)，节省带宽，降低TCP连接次数、节省CPU使用、电池寿命，便于负载均衡、认证、日志监控\n- 使用ProtocolBuffer3(也可以使用proto2)作为IDL(Interface Definition Language)来定义服务以及数据的格式，使用简单快速接入\n- 支持双向通信(Bidirectional Streaming): 可以通过单个gRPC建立的一个stream，使得客户端与服务端可以相互发送消息(有序)\n- 支持同步与异步的RPC\n- 目前支持: C（核心库)、C++、Ruby、NodeJS、Python、PHP、C#、Objective-C(IOS)、Java(后端服务/Android)、go\n- 处理了所有的复杂的：严格的约定、数据序列化、有效的网络通信、安全校验、访问控制、分布式等\n\n> gRPC can help make connecting, operating and debugging distributed systems as easy as making local function calls; the framework handles all the complexities normally associated with enforcing strict service contracts, data serialization, efficient network communication, authentications and access control, distributed tracing and so on - [gRPC: a true internet-scale RPC framework is now 1.0 and ready for production deployments](https://cloudplatform.googleblog.com/2016/08/gRPC-a-true-Internet-scale-RPC-framework-is-now-1-and-ready-for-production-deployments.html)\n\n\n## II. 安全校验\n\n- 支持SSL/TLS\n- 支持通过实现gRPC提供的接口来实现自己的校验机制\n\n\n## III. 支持的服务方法\n\n1. 类似本地调用方法: 客户端发送一个请求然后收到一个响应\n2. 客户端发送一个请求给服务器，并且不断从服务端返回的数据流中读取数据，直到没有数据\n3. 客户端使用stream不断写入一系列的数据并发送给服务端，当客户端完成写入以后等待服务端读取以及服务端的响应\n4. 客户端与服务端通过可读写的stream发送一系列的消息实现双向通信: 两个stream是相互独立的，因此两端可以同时或错开无序的发送与接收数据\n\n## IV. 流程\n\n#### 开发流程\n\n1. 通过proto编写接口\n2. 通过proto编译插件，生成客户端与服务端的代码\n3. 服务端实现在proto中定义的接口, gRPC负责: 解码客户端的请求，执行服务端方法，编码服务端响应\n4. 客户端会有一个本地对象(如stub)其中已经包含了实现，因此客户端只需要调用这些方法，封装请求参数，等待返回即可。\n\n\n#### 通信流程\n\n> - 客户端可以通过请求的metadata上面的deadline参数告知服务度客户端可以等待响应的时间(超过`DEADLINE_EXCEEDED`)\n> - 服务端与客户端的结束状态可能是不同的，有可能一边是正确结束了，一边却是错误结束的(如客户端发现超时了，刚好服务端那边检测没有超过时间，然后成功了)\n> - 异步的RPC方法调用允许客户端或服务端将其随时取消\n\n##### 一般RPC调用通信\n\n1. 客户端通调用方法访问服务端方法，在metadata上面带上要访问的方法名、deadline等\n2. 服务端可以直接方法初始化metadata 或 等待并接收客户端发送请求数据\n3. 服务端获执行相关操作生成响应数据、状态码，状态信息、结束的metadata等\n4. 客户端收到响应，完成调用\n\n##### 双向通信\n\n> 利用gRPC做push通道: [Question about events or push notification](https://github.com/grpc/grpc/issues/8718)\n\n1. 客户端通调用方法访问服务端方法，在metadata上面带上要访问的方法名、deadline等\n2. 服务端可以直接方法初始化metadata 或 等待并接收客户端发送请求数据\n3. 客户端与服务端可以无序的独立完成读写操作\n4. 服务端与客户端可以开始相互的发送消息\n\n具体双向通信流程\n\n- **客户端到服务端:** 带上`Call Header`, 以及optional的`Initial-Metadata`, `0`或`Payload Messages`数据\n- **服务端到客户端:** 带上optional的`Initial-Metadata`, 以及`0`或`Payload Messages`数据\n- **结束:** 带上`Status`，以及optional的`Status-Metadata` (也称为`Trailing-Metadata`)\n\n其中的数据结构\n\n- gPRC的双向stream是直接映射HTTP/2的stream，其中的每个请求的id是对应stream的id\n- `Call Header`与`Initial Metadata`使用HTTP/2的`headers`发送因此也采用HPACK压缩\n- `Payload Messages`将映射为字节流，在发送端组装为HTTP/2帧，在接收端重新组装为数据\n- `Status`与`Trailing-Metadata`是通过HTTP/2的trailing headers进行传输\n\n## V. PING帧\n\n- 在deadline之内如果发送PING没有收到响应，服务端就会于`CANCELLED`状态直接结束所有操作，如果是客户端就会以UNAVAILABLE状态结束\n- 发送PING的频率取决于网络环境，也可以自由的进行调整\n\n## VI. 案例\n\n- [官方案例](https://github.com/grpc/grpc/tree/master/examples)\n- [自动服务端负载均衡docker(使用nghttp2、registrator、consul)](https://github.com/amitripshtos/grpc-docker-lb)\n\n\n## VII. 其他\n\n### gRPC比较Thrift\n\n- gRPC基于最新的HTTP2公有协议,(Thrift采用私有协议)，gRPC更好做维护、性能优化、缓存、集群\n- gRPC采用proto3.x作为IDL，更易于配置\n- gRPC采用proto3.x作为传输数据的数据结构，序列化，反序列化速度比thrift稍好\n- gRPC目前社区逐渐活跃，\n- gRPC是非常与Google内部类似已经使用许多年的版本，但Thrift虽然在2007年就release了，但是内部很多重要的迭代Facebook拒绝贡献到开源社区中\n- Facebook到后面就都没有维护Thrift了，都丢给社区维护了，不过14年的时候自己建了一个使用C++写的fbThrift\n\n### gRPC使用反向代理\n\n#### Nginx\n\n> [gRPC-PHP](https://github.com/grpc/grpc/tree/master/src/php#use-the-grpc-php-extension-with-nginxphp-fpm)是可以的，但是其余的(如[gRPC-Java目前暂时不行](https://github.com/grpc/grpc-java/issues/2559)，但是[正在实现](https://github.com/grpc/grpc.github.io/issues/230#issuecomment-244508727))\n\n- [讨论迁移gRPC nginx - 2016.03](https://trac.nginx.org/nginx/ticket/923)\n- [How can I use nginx 1.9.5 as reverse proxy with gRPC](https://groups.google.com/forum/#!searchin/grpc-io/nginx|sort:relevance/grpc-io/gpNnAprcCxc/5Mr0xwAaCgAJ): 解释为什么grpc-php已经适配，但是grpc-java没有\n- [nginx reverse proxy -Unknown frame type 50](https://github.com/grpc/grpc/issues/4911) 最终原因是nginx没有支持http2导致\n\n#### 其他方案\n\n- [Go语言编写的gRPC的反向代理](https://github.com/mwitkow/grpc-proxy)\n- [Envoy](https://github.com/lyft/envoy/tree/master/examples/grpc-bridge)\n- 可以使用nghttpx来做gRPC的负载均衡，而非nginx: [gRPC with nghttp2](https://movinggauteng.co.za/blog/2016/08/03/grpc-with-nghttp2/)、[Load balancing gRPC servers](https://groups.google.com/forum/#!topic/grpc-io/Ye9bcx62mJk)、[nghttpx - HTTP/2 proxy - HOW-TO](https://nghttp2.org/documentation/nghttpx-howto.html)\n\n---\n\n- [gRPC reaches 1.0 - Square](https://medium.com/square-corner-blog/grpc-reaches-1-0-85728518393b#.xcevdgx5x)\n- [grpc/grpc - 开源库](https://github.com/grpc/grpc)\n- [gRPC - official website](http://www.grpc.io/)\n- [grpc-ecosystem/polyglot - 可以与任意gRPC服务端通信的客户端(Square将这个整合在它的架构中)](https://github.com/grpc-ecosystem/polyglot)\n- [gRPC相关的学习材料](https://jaigouk.com/grpc/)\n- [gRPC不同语言的性能数据](https://performance-dot-grpc-testing.appspot.com/explore?dashboard=5712453606309888)\n- [gRPC: a true internet-scale RPC framework is now 1.0 and ready for production deployments](https://cloudplatform.googleblog.com/2016/08/gRPC-a-true-Internet-scale-RPC-framework-is-now-1-and-ready-for-production-deployments.html)\n- [Allow proxy_http_version 2.0](https://trac.nginx.org/nginx/ticket/923)\n- [gRPC学习笔记](https://skyao.gitbooks.io/leaning-grpc/content/introduction/)\n- [状态码、请求头描述、响应头描述](http://www.grpc.io/docs/guides/wire.html)\n- [Is GRPC better than Thrift?](https://www.quora.com/Is-GRPC-better-than-Thrift)\n\n---\n\n> © 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/grpc.md","raw":"title: gRPC\ndate: 2017-02-16 22:38:03\ntags:\n- gRPC\n- Thrift\n- HTTP/2\n- Proto3\n\n---\n\n> 2015年2月由Google公司牵头，2016年8月对外正式发布的基于HTTP/2以及使用Proto3作为IDL与传输数据格式的通用的开源RPC架构。\n\n<!-- more -->\n\n> And Square, which has been working with Google on gRPC since the very early days, is connecting polyglot microservices within its infrastructure. - [gRPC: a true internet-scale RPC framework is now 1.0 and ready for production deployments](https://cloudplatform.googleblog.com/2016/08/gRPC-a-true-Internet-scale-RPC-framework-is-now-1-and-ready-for-production-deployments.html)\n\n## I. 特点\n\n- 低延迟、高拓展、高性能\n- 目前Google、Square等贡献代码\n- 已经在Google云服务、Netflix、CoreOS、Vendasta、Cockroachdb等上使用\n- 基于HTTP/2协议标准设计(双向流、头部压缩、多复用请求、二进制以帧为单位传输等)，节省带宽，降低TCP连接次数、节省CPU使用、电池寿命，便于负载均衡、认证、日志监控\n- 使用ProtocolBuffer3(也可以使用proto2)作为IDL(Interface Definition Language)来定义服务以及数据的格式，使用简单快速接入\n- 支持双向通信(Bidirectional Streaming): 可以通过单个gRPC建立的一个stream，使得客户端与服务端可以相互发送消息(有序)\n- 支持同步与异步的RPC\n- 目前支持: C（核心库)、C++、Ruby、NodeJS、Python、PHP、C#、Objective-C(IOS)、Java(后端服务/Android)、go\n- 处理了所有的复杂的：严格的约定、数据序列化、有效的网络通信、安全校验、访问控制、分布式等\n\n> gRPC can help make connecting, operating and debugging distributed systems as easy as making local function calls; the framework handles all the complexities normally associated with enforcing strict service contracts, data serialization, efficient network communication, authentications and access control, distributed tracing and so on - [gRPC: a true internet-scale RPC framework is now 1.0 and ready for production deployments](https://cloudplatform.googleblog.com/2016/08/gRPC-a-true-Internet-scale-RPC-framework-is-now-1-and-ready-for-production-deployments.html)\n\n\n## II. 安全校验\n\n- 支持SSL/TLS\n- 支持通过实现gRPC提供的接口来实现自己的校验机制\n\n\n## III. 支持的服务方法\n\n1. 类似本地调用方法: 客户端发送一个请求然后收到一个响应\n2. 客户端发送一个请求给服务器，并且不断从服务端返回的数据流中读取数据，直到没有数据\n3. 客户端使用stream不断写入一系列的数据并发送给服务端，当客户端完成写入以后等待服务端读取以及服务端的响应\n4. 客户端与服务端通过可读写的stream发送一系列的消息实现双向通信: 两个stream是相互独立的，因此两端可以同时或错开无序的发送与接收数据\n\n## IV. 流程\n\n#### 开发流程\n\n1. 通过proto编写接口\n2. 通过proto编译插件，生成客户端与服务端的代码\n3. 服务端实现在proto中定义的接口, gRPC负责: 解码客户端的请求，执行服务端方法，编码服务端响应\n4. 客户端会有一个本地对象(如stub)其中已经包含了实现，因此客户端只需要调用这些方法，封装请求参数，等待返回即可。\n\n\n#### 通信流程\n\n> - 客户端可以通过请求的metadata上面的deadline参数告知服务度客户端可以等待响应的时间(超过`DEADLINE_EXCEEDED`)\n> - 服务端与客户端的结束状态可能是不同的，有可能一边是正确结束了，一边却是错误结束的(如客户端发现超时了，刚好服务端那边检测没有超过时间，然后成功了)\n> - 异步的RPC方法调用允许客户端或服务端将其随时取消\n\n##### 一般RPC调用通信\n\n1. 客户端通调用方法访问服务端方法，在metadata上面带上要访问的方法名、deadline等\n2. 服务端可以直接方法初始化metadata 或 等待并接收客户端发送请求数据\n3. 服务端获执行相关操作生成响应数据、状态码，状态信息、结束的metadata等\n4. 客户端收到响应，完成调用\n\n##### 双向通信\n\n> 利用gRPC做push通道: [Question about events or push notification](https://github.com/grpc/grpc/issues/8718)\n\n1. 客户端通调用方法访问服务端方法，在metadata上面带上要访问的方法名、deadline等\n2. 服务端可以直接方法初始化metadata 或 等待并接收客户端发送请求数据\n3. 客户端与服务端可以无序的独立完成读写操作\n4. 服务端与客户端可以开始相互的发送消息\n\n具体双向通信流程\n\n- **客户端到服务端:** 带上`Call Header`, 以及optional的`Initial-Metadata`, `0`或`Payload Messages`数据\n- **服务端到客户端:** 带上optional的`Initial-Metadata`, 以及`0`或`Payload Messages`数据\n- **结束:** 带上`Status`，以及optional的`Status-Metadata` (也称为`Trailing-Metadata`)\n\n其中的数据结构\n\n- gPRC的双向stream是直接映射HTTP/2的stream，其中的每个请求的id是对应stream的id\n- `Call Header`与`Initial Metadata`使用HTTP/2的`headers`发送因此也采用HPACK压缩\n- `Payload Messages`将映射为字节流，在发送端组装为HTTP/2帧，在接收端重新组装为数据\n- `Status`与`Trailing-Metadata`是通过HTTP/2的trailing headers进行传输\n\n## V. PING帧\n\n- 在deadline之内如果发送PING没有收到响应，服务端就会于`CANCELLED`状态直接结束所有操作，如果是客户端就会以UNAVAILABLE状态结束\n- 发送PING的频率取决于网络环境，也可以自由的进行调整\n\n## VI. 案例\n\n- [官方案例](https://github.com/grpc/grpc/tree/master/examples)\n- [自动服务端负载均衡docker(使用nghttp2、registrator、consul)](https://github.com/amitripshtos/grpc-docker-lb)\n\n\n## VII. 其他\n\n### gRPC比较Thrift\n\n- gRPC基于最新的HTTP2公有协议,(Thrift采用私有协议)，gRPC更好做维护、性能优化、缓存、集群\n- gRPC采用proto3.x作为IDL，更易于配置\n- gRPC采用proto3.x作为传输数据的数据结构，序列化，反序列化速度比thrift稍好\n- gRPC目前社区逐渐活跃，\n- gRPC是非常与Google内部类似已经使用许多年的版本，但Thrift虽然在2007年就release了，但是内部很多重要的迭代Facebook拒绝贡献到开源社区中\n- Facebook到后面就都没有维护Thrift了，都丢给社区维护了，不过14年的时候自己建了一个使用C++写的fbThrift\n\n### gRPC使用反向代理\n\n#### Nginx\n\n> [gRPC-PHP](https://github.com/grpc/grpc/tree/master/src/php#use-the-grpc-php-extension-with-nginxphp-fpm)是可以的，但是其余的(如[gRPC-Java目前暂时不行](https://github.com/grpc/grpc-java/issues/2559)，但是[正在实现](https://github.com/grpc/grpc.github.io/issues/230#issuecomment-244508727))\n\n- [讨论迁移gRPC nginx - 2016.03](https://trac.nginx.org/nginx/ticket/923)\n- [How can I use nginx 1.9.5 as reverse proxy with gRPC](https://groups.google.com/forum/#!searchin/grpc-io/nginx|sort:relevance/grpc-io/gpNnAprcCxc/5Mr0xwAaCgAJ): 解释为什么grpc-php已经适配，但是grpc-java没有\n- [nginx reverse proxy -Unknown frame type 50](https://github.com/grpc/grpc/issues/4911) 最终原因是nginx没有支持http2导致\n\n#### 其他方案\n\n- [Go语言编写的gRPC的反向代理](https://github.com/mwitkow/grpc-proxy)\n- [Envoy](https://github.com/lyft/envoy/tree/master/examples/grpc-bridge)\n- 可以使用nghttpx来做gRPC的负载均衡，而非nginx: [gRPC with nghttp2](https://movinggauteng.co.za/blog/2016/08/03/grpc-with-nghttp2/)、[Load balancing gRPC servers](https://groups.google.com/forum/#!topic/grpc-io/Ye9bcx62mJk)、[nghttpx - HTTP/2 proxy - HOW-TO](https://nghttp2.org/documentation/nghttpx-howto.html)\n\n---\n\n- [gRPC reaches 1.0 - Square](https://medium.com/square-corner-blog/grpc-reaches-1-0-85728518393b#.xcevdgx5x)\n- [grpc/grpc - 开源库](https://github.com/grpc/grpc)\n- [gRPC - official website](http://www.grpc.io/)\n- [grpc-ecosystem/polyglot - 可以与任意gRPC服务端通信的客户端(Square将这个整合在它的架构中)](https://github.com/grpc-ecosystem/polyglot)\n- [gRPC相关的学习材料](https://jaigouk.com/grpc/)\n- [gRPC不同语言的性能数据](https://performance-dot-grpc-testing.appspot.com/explore?dashboard=5712453606309888)\n- [gRPC: a true internet-scale RPC framework is now 1.0 and ready for production deployments](https://cloudplatform.googleblog.com/2016/08/gRPC-a-true-Internet-scale-RPC-framework-is-now-1-and-ready-for-production-deployments.html)\n- [Allow proxy_http_version 2.0](https://trac.nginx.org/nginx/ticket/923)\n- [gRPC学习笔记](https://skyao.gitbooks.io/leaning-grpc/content/introduction/)\n- [状态码、请求头描述、响应头描述](http://www.grpc.io/docs/guides/wire.html)\n- [Is GRPC better than Thrift?](https://www.quora.com/Is-GRPC-better-than-Thrift)\n\n---\n\n> © 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"grpc","published":1,"updated":"2017-02-27T02:53:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66iv002n95bukse6pr9y","content":"<blockquote>\n<p>2015年2月由Google公司牵头，2016年8月对外正式发布的基于HTTP/2以及使用Proto3作为IDL与传输数据格式的通用的开源RPC架构。</p>\n</blockquote>\n<a id=\"more\"></a>\n<blockquote>\n<p>And Square, which has been working with Google on gRPC since the very early days, is connecting polyglot microservices within its infrastructure. - <a href=\"https://cloudplatform.googleblog.com/2016/08/gRPC-a-true-Internet-scale-RPC-framework-is-now-1-and-ready-for-production-deployments.html\" target=\"_blank\" rel=\"external\">gRPC: a true internet-scale RPC framework is now 1.0 and ready for production deployments</a></p>\n</blockquote>\n<h2 id=\"I-特点\"><a href=\"#I-特点\" class=\"headerlink\" title=\"I. 特点\"></a>I. 特点</h2><ul>\n<li>低延迟、高拓展、高性能</li>\n<li>目前Google、Square等贡献代码</li>\n<li>已经在Google云服务、Netflix、CoreOS、Vendasta、Cockroachdb等上使用</li>\n<li>基于HTTP/2协议标准设计(双向流、头部压缩、多复用请求、二进制以帧为单位传输等)，节省带宽，降低TCP连接次数、节省CPU使用、电池寿命，便于负载均衡、认证、日志监控</li>\n<li>使用ProtocolBuffer3(也可以使用proto2)作为IDL(Interface Definition Language)来定义服务以及数据的格式，使用简单快速接入</li>\n<li>支持双向通信(Bidirectional Streaming): 可以通过单个gRPC建立的一个stream，使得客户端与服务端可以相互发送消息(有序)</li>\n<li>支持同步与异步的RPC</li>\n<li>目前支持: C（核心库)、C++、Ruby、NodeJS、Python、PHP、C#、Objective-C(IOS)、Java(后端服务/Android)、go</li>\n<li>处理了所有的复杂的：严格的约定、数据序列化、有效的网络通信、安全校验、访问控制、分布式等</li>\n</ul>\n<blockquote>\n<p>gRPC can help make connecting, operating and debugging distributed systems as easy as making local function calls; the framework handles all the complexities normally associated with enforcing strict service contracts, data serialization, efficient network communication, authentications and access control, distributed tracing and so on - <a href=\"https://cloudplatform.googleblog.com/2016/08/gRPC-a-true-Internet-scale-RPC-framework-is-now-1-and-ready-for-production-deployments.html\" target=\"_blank\" rel=\"external\">gRPC: a true internet-scale RPC framework is now 1.0 and ready for production deployments</a></p>\n</blockquote>\n<h2 id=\"II-安全校验\"><a href=\"#II-安全校验\" class=\"headerlink\" title=\"II. 安全校验\"></a>II. 安全校验</h2><ul>\n<li>支持SSL/TLS</li>\n<li>支持通过实现gRPC提供的接口来实现自己的校验机制</li>\n</ul>\n<h2 id=\"III-支持的服务方法\"><a href=\"#III-支持的服务方法\" class=\"headerlink\" title=\"III. 支持的服务方法\"></a>III. 支持的服务方法</h2><ol>\n<li>类似本地调用方法: 客户端发送一个请求然后收到一个响应</li>\n<li>客户端发送一个请求给服务器，并且不断从服务端返回的数据流中读取数据，直到没有数据</li>\n<li>客户端使用stream不断写入一系列的数据并发送给服务端，当客户端完成写入以后等待服务端读取以及服务端的响应</li>\n<li>客户端与服务端通过可读写的stream发送一系列的消息实现双向通信: 两个stream是相互独立的，因此两端可以同时或错开无序的发送与接收数据</li>\n</ol>\n<h2 id=\"IV-流程\"><a href=\"#IV-流程\" class=\"headerlink\" title=\"IV. 流程\"></a>IV. 流程</h2><h4 id=\"开发流程\"><a href=\"#开发流程\" class=\"headerlink\" title=\"开发流程\"></a>开发流程</h4><ol>\n<li>通过proto编写接口</li>\n<li>通过proto编译插件，生成客户端与服务端的代码</li>\n<li>服务端实现在proto中定义的接口, gRPC负责: 解码客户端的请求，执行服务端方法，编码服务端响应</li>\n<li>客户端会有一个本地对象(如stub)其中已经包含了实现，因此客户端只需要调用这些方法，封装请求参数，等待返回即可。</li>\n</ol>\n<h4 id=\"通信流程\"><a href=\"#通信流程\" class=\"headerlink\" title=\"通信流程\"></a>通信流程</h4><blockquote>\n<ul>\n<li>客户端可以通过请求的metadata上面的deadline参数告知服务度客户端可以等待响应的时间(超过<code>DEADLINE_EXCEEDED</code>)</li>\n<li>服务端与客户端的结束状态可能是不同的，有可能一边是正确结束了，一边却是错误结束的(如客户端发现超时了，刚好服务端那边检测没有超过时间，然后成功了)</li>\n<li>异步的RPC方法调用允许客户端或服务端将其随时取消</li>\n</ul>\n</blockquote>\n<h5 id=\"一般RPC调用通信\"><a href=\"#一般RPC调用通信\" class=\"headerlink\" title=\"一般RPC调用通信\"></a>一般RPC调用通信</h5><ol>\n<li>客户端通调用方法访问服务端方法，在metadata上面带上要访问的方法名、deadline等</li>\n<li>服务端可以直接方法初始化metadata 或 等待并接收客户端发送请求数据</li>\n<li>服务端获执行相关操作生成响应数据、状态码，状态信息、结束的metadata等</li>\n<li>客户端收到响应，完成调用</li>\n</ol>\n<h5 id=\"双向通信\"><a href=\"#双向通信\" class=\"headerlink\" title=\"双向通信\"></a>双向通信</h5><blockquote>\n<p>利用gRPC做push通道: <a href=\"https://github.com/grpc/grpc/issues/8718\" target=\"_blank\" rel=\"external\">Question about events or push notification</a></p>\n</blockquote>\n<ol>\n<li>客户端通调用方法访问服务端方法，在metadata上面带上要访问的方法名、deadline等</li>\n<li>服务端可以直接方法初始化metadata 或 等待并接收客户端发送请求数据</li>\n<li>客户端与服务端可以无序的独立完成读写操作</li>\n<li>服务端与客户端可以开始相互的发送消息</li>\n</ol>\n<p>具体双向通信流程</p>\n<ul>\n<li><strong>客户端到服务端:</strong> 带上<code>Call Header</code>, 以及optional的<code>Initial-Metadata</code>, <code>0</code>或<code>Payload Messages</code>数据</li>\n<li><strong>服务端到客户端:</strong> 带上optional的<code>Initial-Metadata</code>, 以及<code>0</code>或<code>Payload Messages</code>数据</li>\n<li><strong>结束:</strong> 带上<code>Status</code>，以及optional的<code>Status-Metadata</code> (也称为<code>Trailing-Metadata</code>)</li>\n</ul>\n<p>其中的数据结构</p>\n<ul>\n<li>gPRC的双向stream是直接映射HTTP/2的stream，其中的每个请求的id是对应stream的id</li>\n<li><code>Call Header</code>与<code>Initial Metadata</code>使用HTTP/2的<code>headers</code>发送因此也采用HPACK压缩</li>\n<li><code>Payload Messages</code>将映射为字节流，在发送端组装为HTTP/2帧，在接收端重新组装为数据</li>\n<li><code>Status</code>与<code>Trailing-Metadata</code>是通过HTTP/2的trailing headers进行传输</li>\n</ul>\n<h2 id=\"V-PING帧\"><a href=\"#V-PING帧\" class=\"headerlink\" title=\"V. PING帧\"></a>V. PING帧</h2><ul>\n<li>在deadline之内如果发送PING没有收到响应，服务端就会于<code>CANCELLED</code>状态直接结束所有操作，如果是客户端就会以UNAVAILABLE状态结束</li>\n<li>发送PING的频率取决于网络环境，也可以自由的进行调整</li>\n</ul>\n<h2 id=\"VI-案例\"><a href=\"#VI-案例\" class=\"headerlink\" title=\"VI. 案例\"></a>VI. 案例</h2><ul>\n<li><a href=\"https://github.com/grpc/grpc/tree/master/examples\" target=\"_blank\" rel=\"external\">官方案例</a></li>\n<li><a href=\"https://github.com/amitripshtos/grpc-docker-lb\" target=\"_blank\" rel=\"external\">自动服务端负载均衡docker(使用nghttp2、registrator、consul)</a></li>\n</ul>\n<h2 id=\"VII-其他\"><a href=\"#VII-其他\" class=\"headerlink\" title=\"VII. 其他\"></a>VII. 其他</h2><h3 id=\"gRPC比较Thrift\"><a href=\"#gRPC比较Thrift\" class=\"headerlink\" title=\"gRPC比较Thrift\"></a>gRPC比较Thrift</h3><ul>\n<li>gRPC基于最新的HTTP2公有协议,(Thrift采用私有协议)，gRPC更好做维护、性能优化、缓存、集群</li>\n<li>gRPC采用proto3.x作为IDL，更易于配置</li>\n<li>gRPC采用proto3.x作为传输数据的数据结构，序列化，反序列化速度比thrift稍好</li>\n<li>gRPC目前社区逐渐活跃，</li>\n<li>gRPC是非常与Google内部类似已经使用许多年的版本，但Thrift虽然在2007年就release了，但是内部很多重要的迭代Facebook拒绝贡献到开源社区中</li>\n<li>Facebook到后面就都没有维护Thrift了，都丢给社区维护了，不过14年的时候自己建了一个使用C++写的fbThrift</li>\n</ul>\n<h3 id=\"gRPC使用反向代理\"><a href=\"#gRPC使用反向代理\" class=\"headerlink\" title=\"gRPC使用反向代理\"></a>gRPC使用反向代理</h3><h4 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h4><blockquote>\n<p><a href=\"https://github.com/grpc/grpc/tree/master/src/php#use-the-grpc-php-extension-with-nginxphp-fpm\" target=\"_blank\" rel=\"external\">gRPC-PHP</a>是可以的，但是其余的(如<a href=\"https://github.com/grpc/grpc-java/issues/2559\" target=\"_blank\" rel=\"external\">gRPC-Java目前暂时不行</a>，但是<a href=\"https://github.com/grpc/grpc.github.io/issues/230#issuecomment-244508727\" target=\"_blank\" rel=\"external\">正在实现</a>)</p>\n</blockquote>\n<ul>\n<li><a href=\"https://trac.nginx.org/nginx/ticket/923\" target=\"_blank\" rel=\"external\">讨论迁移gRPC nginx - 2016.03</a></li>\n<li><a href=\"https://groups.google.com/forum/#!searchin/grpc-io/nginx|sort:relevance/grpc-io/gpNnAprcCxc/5Mr0xwAaCgAJ\" target=\"_blank\" rel=\"external\">How can I use nginx 1.9.5 as reverse proxy with gRPC</a>: 解释为什么grpc-php已经适配，但是grpc-java没有</li>\n<li><a href=\"https://github.com/grpc/grpc/issues/4911\" target=\"_blank\" rel=\"external\">nginx reverse proxy -Unknown frame type 50</a> 最终原因是nginx没有支持http2导致</li>\n</ul>\n<h4 id=\"其他方案\"><a href=\"#其他方案\" class=\"headerlink\" title=\"其他方案\"></a>其他方案</h4><ul>\n<li><a href=\"https://github.com/mwitkow/grpc-proxy\" target=\"_blank\" rel=\"external\">Go语言编写的gRPC的反向代理</a></li>\n<li><a href=\"https://github.com/lyft/envoy/tree/master/examples/grpc-bridge\" target=\"_blank\" rel=\"external\">Envoy</a></li>\n<li>可以使用nghttpx来做gRPC的负载均衡，而非nginx: <a href=\"https://movinggauteng.co.za/blog/2016/08/03/grpc-with-nghttp2/\" target=\"_blank\" rel=\"external\">gRPC with nghttp2</a>、<a href=\"https://groups.google.com/forum/#!topic/grpc-io/Ye9bcx62mJk\" target=\"_blank\" rel=\"external\">Load balancing gRPC servers</a>、<a href=\"https://nghttp2.org/documentation/nghttpx-howto.html\" target=\"_blank\" rel=\"external\">nghttpx - HTTP/2 proxy - HOW-TO</a></li>\n</ul>\n<hr>\n<ul>\n<li><a href=\"https://medium.com/square-corner-blog/grpc-reaches-1-0-85728518393b#.xcevdgx5x\" target=\"_blank\" rel=\"external\">gRPC reaches 1.0 - Square</a></li>\n<li><a href=\"https://github.com/grpc/grpc\" target=\"_blank\" rel=\"external\">grpc/grpc - 开源库</a></li>\n<li><a href=\"http://www.grpc.io/\" target=\"_blank\" rel=\"external\">gRPC - official website</a></li>\n<li><a href=\"https://github.com/grpc-ecosystem/polyglot\" target=\"_blank\" rel=\"external\">grpc-ecosystem/polyglot - 可以与任意gRPC服务端通信的客户端(Square将这个整合在它的架构中)</a></li>\n<li><a href=\"https://jaigouk.com/grpc/\" target=\"_blank\" rel=\"external\">gRPC相关的学习材料</a></li>\n<li><a href=\"https://performance-dot-grpc-testing.appspot.com/explore?dashboard=5712453606309888\" target=\"_blank\" rel=\"external\">gRPC不同语言的性能数据</a></li>\n<li><a href=\"https://cloudplatform.googleblog.com/2016/08/gRPC-a-true-Internet-scale-RPC-framework-is-now-1-and-ready-for-production-deployments.html\" target=\"_blank\" rel=\"external\">gRPC: a true internet-scale RPC framework is now 1.0 and ready for production deployments</a></li>\n<li><a href=\"https://trac.nginx.org/nginx/ticket/923\" target=\"_blank\" rel=\"external\">Allow proxy_http_version 2.0</a></li>\n<li><a href=\"https://skyao.gitbooks.io/leaning-grpc/content/introduction/\" target=\"_blank\" rel=\"external\">gRPC学习笔记</a></li>\n<li><a href=\"http://www.grpc.io/docs/guides/wire.html\" target=\"_blank\" rel=\"external\">状态码、请求头描述、响应头描述</a></li>\n<li><a href=\"https://www.quora.com/Is-GRPC-better-than-Thrift\" target=\"_blank\" rel=\"external\">Is GRPC better than Thrift?</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>2015年2月由Google公司牵头，2016年8月对外正式发布的基于HTTP/2以及使用Proto3作为IDL与传输数据格式的通用的开源RPC架构。</p>\n</blockquote>","more":"<blockquote>\n<p>And Square, which has been working with Google on gRPC since the very early days, is connecting polyglot microservices within its infrastructure. - <a href=\"https://cloudplatform.googleblog.com/2016/08/gRPC-a-true-Internet-scale-RPC-framework-is-now-1-and-ready-for-production-deployments.html\">gRPC: a true internet-scale RPC framework is now 1.0 and ready for production deployments</a></p>\n</blockquote>\n<h2 id=\"I-特点\"><a href=\"#I-特点\" class=\"headerlink\" title=\"I. 特点\"></a>I. 特点</h2><ul>\n<li>低延迟、高拓展、高性能</li>\n<li>目前Google、Square等贡献代码</li>\n<li>已经在Google云服务、Netflix、CoreOS、Vendasta、Cockroachdb等上使用</li>\n<li>基于HTTP/2协议标准设计(双向流、头部压缩、多复用请求、二进制以帧为单位传输等)，节省带宽，降低TCP连接次数、节省CPU使用、电池寿命，便于负载均衡、认证、日志监控</li>\n<li>使用ProtocolBuffer3(也可以使用proto2)作为IDL(Interface Definition Language)来定义服务以及数据的格式，使用简单快速接入</li>\n<li>支持双向通信(Bidirectional Streaming): 可以通过单个gRPC建立的一个stream，使得客户端与服务端可以相互发送消息(有序)</li>\n<li>支持同步与异步的RPC</li>\n<li>目前支持: C（核心库)、C++、Ruby、NodeJS、Python、PHP、C#、Objective-C(IOS)、Java(后端服务/Android)、go</li>\n<li>处理了所有的复杂的：严格的约定、数据序列化、有效的网络通信、安全校验、访问控制、分布式等</li>\n</ul>\n<blockquote>\n<p>gRPC can help make connecting, operating and debugging distributed systems as easy as making local function calls; the framework handles all the complexities normally associated with enforcing strict service contracts, data serialization, efficient network communication, authentications and access control, distributed tracing and so on - <a href=\"https://cloudplatform.googleblog.com/2016/08/gRPC-a-true-Internet-scale-RPC-framework-is-now-1-and-ready-for-production-deployments.html\">gRPC: a true internet-scale RPC framework is now 1.0 and ready for production deployments</a></p>\n</blockquote>\n<h2 id=\"II-安全校验\"><a href=\"#II-安全校验\" class=\"headerlink\" title=\"II. 安全校验\"></a>II. 安全校验</h2><ul>\n<li>支持SSL/TLS</li>\n<li>支持通过实现gRPC提供的接口来实现自己的校验机制</li>\n</ul>\n<h2 id=\"III-支持的服务方法\"><a href=\"#III-支持的服务方法\" class=\"headerlink\" title=\"III. 支持的服务方法\"></a>III. 支持的服务方法</h2><ol>\n<li>类似本地调用方法: 客户端发送一个请求然后收到一个响应</li>\n<li>客户端发送一个请求给服务器，并且不断从服务端返回的数据流中读取数据，直到没有数据</li>\n<li>客户端使用stream不断写入一系列的数据并发送给服务端，当客户端完成写入以后等待服务端读取以及服务端的响应</li>\n<li>客户端与服务端通过可读写的stream发送一系列的消息实现双向通信: 两个stream是相互独立的，因此两端可以同时或错开无序的发送与接收数据</li>\n</ol>\n<h2 id=\"IV-流程\"><a href=\"#IV-流程\" class=\"headerlink\" title=\"IV. 流程\"></a>IV. 流程</h2><h4 id=\"开发流程\"><a href=\"#开发流程\" class=\"headerlink\" title=\"开发流程\"></a>开发流程</h4><ol>\n<li>通过proto编写接口</li>\n<li>通过proto编译插件，生成客户端与服务端的代码</li>\n<li>服务端实现在proto中定义的接口, gRPC负责: 解码客户端的请求，执行服务端方法，编码服务端响应</li>\n<li>客户端会有一个本地对象(如stub)其中已经包含了实现，因此客户端只需要调用这些方法，封装请求参数，等待返回即可。</li>\n</ol>\n<h4 id=\"通信流程\"><a href=\"#通信流程\" class=\"headerlink\" title=\"通信流程\"></a>通信流程</h4><blockquote>\n<ul>\n<li>客户端可以通过请求的metadata上面的deadline参数告知服务度客户端可以等待响应的时间(超过<code>DEADLINE_EXCEEDED</code>)</li>\n<li>服务端与客户端的结束状态可能是不同的，有可能一边是正确结束了，一边却是错误结束的(如客户端发现超时了，刚好服务端那边检测没有超过时间，然后成功了)</li>\n<li>异步的RPC方法调用允许客户端或服务端将其随时取消</li>\n</ul>\n</blockquote>\n<h5 id=\"一般RPC调用通信\"><a href=\"#一般RPC调用通信\" class=\"headerlink\" title=\"一般RPC调用通信\"></a>一般RPC调用通信</h5><ol>\n<li>客户端通调用方法访问服务端方法，在metadata上面带上要访问的方法名、deadline等</li>\n<li>服务端可以直接方法初始化metadata 或 等待并接收客户端发送请求数据</li>\n<li>服务端获执行相关操作生成响应数据、状态码，状态信息、结束的metadata等</li>\n<li>客户端收到响应，完成调用</li>\n</ol>\n<h5 id=\"双向通信\"><a href=\"#双向通信\" class=\"headerlink\" title=\"双向通信\"></a>双向通信</h5><blockquote>\n<p>利用gRPC做push通道: <a href=\"https://github.com/grpc/grpc/issues/8718\">Question about events or push notification</a></p>\n</blockquote>\n<ol>\n<li>客户端通调用方法访问服务端方法，在metadata上面带上要访问的方法名、deadline等</li>\n<li>服务端可以直接方法初始化metadata 或 等待并接收客户端发送请求数据</li>\n<li>客户端与服务端可以无序的独立完成读写操作</li>\n<li>服务端与客户端可以开始相互的发送消息</li>\n</ol>\n<p>具体双向通信流程</p>\n<ul>\n<li><strong>客户端到服务端:</strong> 带上<code>Call Header</code>, 以及optional的<code>Initial-Metadata</code>, <code>0</code>或<code>Payload Messages</code>数据</li>\n<li><strong>服务端到客户端:</strong> 带上optional的<code>Initial-Metadata</code>, 以及<code>0</code>或<code>Payload Messages</code>数据</li>\n<li><strong>结束:</strong> 带上<code>Status</code>，以及optional的<code>Status-Metadata</code> (也称为<code>Trailing-Metadata</code>)</li>\n</ul>\n<p>其中的数据结构</p>\n<ul>\n<li>gPRC的双向stream是直接映射HTTP/2的stream，其中的每个请求的id是对应stream的id</li>\n<li><code>Call Header</code>与<code>Initial Metadata</code>使用HTTP/2的<code>headers</code>发送因此也采用HPACK压缩</li>\n<li><code>Payload Messages</code>将映射为字节流，在发送端组装为HTTP/2帧，在接收端重新组装为数据</li>\n<li><code>Status</code>与<code>Trailing-Metadata</code>是通过HTTP/2的trailing headers进行传输</li>\n</ul>\n<h2 id=\"V-PING帧\"><a href=\"#V-PING帧\" class=\"headerlink\" title=\"V. PING帧\"></a>V. PING帧</h2><ul>\n<li>在deadline之内如果发送PING没有收到响应，服务端就会于<code>CANCELLED</code>状态直接结束所有操作，如果是客户端就会以UNAVAILABLE状态结束</li>\n<li>发送PING的频率取决于网络环境，也可以自由的进行调整</li>\n</ul>\n<h2 id=\"VI-案例\"><a href=\"#VI-案例\" class=\"headerlink\" title=\"VI. 案例\"></a>VI. 案例</h2><ul>\n<li><a href=\"https://github.com/grpc/grpc/tree/master/examples\">官方案例</a></li>\n<li><a href=\"https://github.com/amitripshtos/grpc-docker-lb\">自动服务端负载均衡docker(使用nghttp2、registrator、consul)</a></li>\n</ul>\n<h2 id=\"VII-其他\"><a href=\"#VII-其他\" class=\"headerlink\" title=\"VII. 其他\"></a>VII. 其他</h2><h3 id=\"gRPC比较Thrift\"><a href=\"#gRPC比较Thrift\" class=\"headerlink\" title=\"gRPC比较Thrift\"></a>gRPC比较Thrift</h3><ul>\n<li>gRPC基于最新的HTTP2公有协议,(Thrift采用私有协议)，gRPC更好做维护、性能优化、缓存、集群</li>\n<li>gRPC采用proto3.x作为IDL，更易于配置</li>\n<li>gRPC采用proto3.x作为传输数据的数据结构，序列化，反序列化速度比thrift稍好</li>\n<li>gRPC目前社区逐渐活跃，</li>\n<li>gRPC是非常与Google内部类似已经使用许多年的版本，但Thrift虽然在2007年就release了，但是内部很多重要的迭代Facebook拒绝贡献到开源社区中</li>\n<li>Facebook到后面就都没有维护Thrift了，都丢给社区维护了，不过14年的时候自己建了一个使用C++写的fbThrift</li>\n</ul>\n<h3 id=\"gRPC使用反向代理\"><a href=\"#gRPC使用反向代理\" class=\"headerlink\" title=\"gRPC使用反向代理\"></a>gRPC使用反向代理</h3><h4 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h4><blockquote>\n<p><a href=\"https://github.com/grpc/grpc/tree/master/src/php#use-the-grpc-php-extension-with-nginxphp-fpm\">gRPC-PHP</a>是可以的，但是其余的(如<a href=\"https://github.com/grpc/grpc-java/issues/2559\">gRPC-Java目前暂时不行</a>，但是<a href=\"https://github.com/grpc/grpc.github.io/issues/230#issuecomment-244508727\">正在实现</a>)</p>\n</blockquote>\n<ul>\n<li><a href=\"https://trac.nginx.org/nginx/ticket/923\">讨论迁移gRPC nginx - 2016.03</a></li>\n<li><a href=\"https://groups.google.com/forum/#!searchin/grpc-io/nginx|sort:relevance/grpc-io/gpNnAprcCxc/5Mr0xwAaCgAJ\">How can I use nginx 1.9.5 as reverse proxy with gRPC</a>: 解释为什么grpc-php已经适配，但是grpc-java没有</li>\n<li><a href=\"https://github.com/grpc/grpc/issues/4911\">nginx reverse proxy -Unknown frame type 50</a> 最终原因是nginx没有支持http2导致</li>\n</ul>\n<h4 id=\"其他方案\"><a href=\"#其他方案\" class=\"headerlink\" title=\"其他方案\"></a>其他方案</h4><ul>\n<li><a href=\"https://github.com/mwitkow/grpc-proxy\">Go语言编写的gRPC的反向代理</a></li>\n<li><a href=\"https://github.com/lyft/envoy/tree/master/examples/grpc-bridge\">Envoy</a></li>\n<li>可以使用nghttpx来做gRPC的负载均衡，而非nginx: <a href=\"https://movinggauteng.co.za/blog/2016/08/03/grpc-with-nghttp2/\">gRPC with nghttp2</a>、<a href=\"https://groups.google.com/forum/#!topic/grpc-io/Ye9bcx62mJk\">Load balancing gRPC servers</a>、<a href=\"https://nghttp2.org/documentation/nghttpx-howto.html\">nghttpx - HTTP/2 proxy - HOW-TO</a></li>\n</ul>\n<hr>\n<ul>\n<li><a href=\"https://medium.com/square-corner-blog/grpc-reaches-1-0-85728518393b#.xcevdgx5x\">gRPC reaches 1.0 - Square</a></li>\n<li><a href=\"https://github.com/grpc/grpc\">grpc/grpc - 开源库</a></li>\n<li><a href=\"http://www.grpc.io/\">gRPC - official website</a></li>\n<li><a href=\"https://github.com/grpc-ecosystem/polyglot\">grpc-ecosystem/polyglot - 可以与任意gRPC服务端通信的客户端(Square将这个整合在它的架构中)</a></li>\n<li><a href=\"https://jaigouk.com/grpc/\">gRPC相关的学习材料</a></li>\n<li><a href=\"https://performance-dot-grpc-testing.appspot.com/explore?dashboard=5712453606309888\">gRPC不同语言的性能数据</a></li>\n<li><a href=\"https://cloudplatform.googleblog.com/2016/08/gRPC-a-true-Internet-scale-RPC-framework-is-now-1-and-ready-for-production-deployments.html\">gRPC: a true internet-scale RPC framework is now 1.0 and ready for production deployments</a></li>\n<li><a href=\"https://trac.nginx.org/nginx/ticket/923\">Allow proxy_http_version 2.0</a></li>\n<li><a href=\"https://skyao.gitbooks.io/leaning-grpc/content/introduction/\">gRPC学习笔记</a></li>\n<li><a href=\"http://www.grpc.io/docs/guides/wire.html\">状态码、请求头描述、响应头描述</a></li>\n<li><a href=\"https://www.quora.com/Is-GRPC-better-than-Thrift\">Is GRPC better than Thrift?</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"Hybrid Apps","date":"2016-01-20T12:45:03.000Z","_content":"#### Native app\n\n> 主要问题: 平台局限性，迭代不够灵活，开发代价高\n\n- 平台局限性\n- 更好的兼容性与UI适配与更好的用户体验\n\n<!-- more -->\n\n#### Hybrid app\n\n> 主要问题: 用户体验\n\n- 无平台界限\n- 更小的开发代价(时间/经费/人员)\n- 迭代更加灵活\n\n---\n\n> 推荐辅助开发工具[Adobe PhoneGap](http://phonegap.com/)\n\n## 使用PhoneGap创建demo简要说明\n\n> 先安装[桌面端](http://docs.phonegap.com/getting-started/1-install-phonegap/desktop/)与[手机端](http://docs.phonegap.com/getting-started/2-install-mobile-app/)\n\n![](/img/hybrid-1.png)\n\n> 将底部的ip与端口输入手机端，点击`Connect`进行连接即可(仅可以与一个项目进行连接)。\n\n![](/img/hybrid-2.png)\n\n#### 编辑与开发\n\n> 选用适合自己的编辑器(如Atom)到对应的项目中进行编辑即可。\n\n可以参考demo中的`index.html`\n\n\n\n```\n<!-- 配置是否允许缩放，初始化的缩放比例，允许最大缩放比例，允许最小缩放比例，以及默认的宽度与高度-->\n<meta name=\"viewport\" content=\"user-scalable=no, initial-scale=1, maximum-scale=1, minimum-scale=1,\nwidth=device-width, height=device-height, target-densitydpi=device-dpi\" />\n<!-- cordova.js 来自开源的Apache Cordova项目，用于支持硬件的传感器 -->\n<script type=\"text/javascript\" src=\"cordova.js\"></script>\n```\n\n---\n\n- [创建demo应用文档](http://docs.phonegap.com/getting-started/3-create-your-app/desktop/)\n- [创建demo应用视频](https://www.youtube.com/watch?v=pggw-9b8RVY)\n- [demo中代码说明](http://docs.phonegap.com/develop/hello-world-explained/)\n\n---\n\n- [Difference Between Native vs Hybrid Android App Development](http://www.multidots.com/difference-native-vs-hybrid-android-app-development-2/)\n","source":"_posts/hybrid.md","raw":"title: Hybrid Apps\ndate: 2016-01-20 20:45:03\npermalink: 2016/01/20/hybrid\ntags:\n- platform\n- hybrid\n- phoneGap\n\n---\n#### Native app\n\n> 主要问题: 平台局限性，迭代不够灵活，开发代价高\n\n- 平台局限性\n- 更好的兼容性与UI适配与更好的用户体验\n\n<!-- more -->\n\n#### Hybrid app\n\n> 主要问题: 用户体验\n\n- 无平台界限\n- 更小的开发代价(时间/经费/人员)\n- 迭代更加灵活\n\n---\n\n> 推荐辅助开发工具[Adobe PhoneGap](http://phonegap.com/)\n\n## 使用PhoneGap创建demo简要说明\n\n> 先安装[桌面端](http://docs.phonegap.com/getting-started/1-install-phonegap/desktop/)与[手机端](http://docs.phonegap.com/getting-started/2-install-mobile-app/)\n\n![](/img/hybrid-1.png)\n\n> 将底部的ip与端口输入手机端，点击`Connect`进行连接即可(仅可以与一个项目进行连接)。\n\n![](/img/hybrid-2.png)\n\n#### 编辑与开发\n\n> 选用适合自己的编辑器(如Atom)到对应的项目中进行编辑即可。\n\n可以参考demo中的`index.html`\n\n\n\n```\n<!-- 配置是否允许缩放，初始化的缩放比例，允许最大缩放比例，允许最小缩放比例，以及默认的宽度与高度-->\n<meta name=\"viewport\" content=\"user-scalable=no, initial-scale=1, maximum-scale=1, minimum-scale=1,\nwidth=device-width, height=device-height, target-densitydpi=device-dpi\" />\n<!-- cordova.js 来自开源的Apache Cordova项目，用于支持硬件的传感器 -->\n<script type=\"text/javascript\" src=\"cordova.js\"></script>\n```\n\n---\n\n- [创建demo应用文档](http://docs.phonegap.com/getting-started/3-create-your-app/desktop/)\n- [创建demo应用视频](https://www.youtube.com/watch?v=pggw-9b8RVY)\n- [demo中代码说明](http://docs.phonegap.com/develop/hello-world-explained/)\n\n---\n\n- [Difference Between Native vs Hybrid Android App Development](http://www.multidots.com/difference-native-vs-hybrid-android-app-development-2/)\n","slug":"2016/01/20/hybrid","published":1,"updated":"2017-01-26T14:52:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66iw002p95bub8eoj5ym","content":"<h4 id=\"Native-app\"><a href=\"#Native-app\" class=\"headerlink\" title=\"Native app\"></a>Native app</h4><blockquote>\n<p>主要问题: 平台局限性，迭代不够灵活，开发代价高</p>\n</blockquote>\n<ul>\n<li>平台局限性</li>\n<li>更好的兼容性与UI适配与更好的用户体验</li>\n</ul>\n<a id=\"more\"></a>\n<h4 id=\"Hybrid-app\"><a href=\"#Hybrid-app\" class=\"headerlink\" title=\"Hybrid app\"></a>Hybrid app</h4><blockquote>\n<p>主要问题: 用户体验</p>\n</blockquote>\n<ul>\n<li>无平台界限</li>\n<li>更小的开发代价(时间/经费/人员)</li>\n<li>迭代更加灵活</li>\n</ul>\n<hr>\n<blockquote>\n<p>推荐辅助开发工具<a href=\"http://phonegap.com/\" target=\"_blank\" rel=\"external\">Adobe PhoneGap</a></p>\n</blockquote>\n<h2 id=\"使用PhoneGap创建demo简要说明\"><a href=\"#使用PhoneGap创建demo简要说明\" class=\"headerlink\" title=\"使用PhoneGap创建demo简要说明\"></a>使用PhoneGap创建demo简要说明</h2><blockquote>\n<p>先安装<a href=\"http://docs.phonegap.com/getting-started/1-install-phonegap/desktop/\" target=\"_blank\" rel=\"external\">桌面端</a>与<a href=\"http://docs.phonegap.com/getting-started/2-install-mobile-app/\" target=\"_blank\" rel=\"external\">手机端</a></p>\n</blockquote>\n<p><img src=\"/img/hybrid-1.png\" alt=\"\"></p>\n<blockquote>\n<p>将底部的ip与端口输入手机端，点击<code>Connect</code>进行连接即可(仅可以与一个项目进行连接)。</p>\n</blockquote>\n<p><img src=\"/img/hybrid-2.png\" alt=\"\"></p>\n<h4 id=\"编辑与开发\"><a href=\"#编辑与开发\" class=\"headerlink\" title=\"编辑与开发\"></a>编辑与开发</h4><blockquote>\n<p>选用适合自己的编辑器(如Atom)到对应的项目中进行编辑即可。</p>\n</blockquote>\n<p>可以参考demo中的<code>index.html</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 配置是否允许缩放，初始化的缩放比例，允许最大缩放比例，允许最小缩放比例，以及默认的宽度与高度--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"user-scalable=no, initial-scale=1, maximum-scale=1, minimum-scale=1,</span></span></div><div class=\"line\">width=device-width, height=device-height, target-densitydpi=device-dpi\" /&gt;</div><div class=\"line\"><span class=\"comment\">&lt;!-- cordova.js 来自开源的Apache Cordova项目，用于支持硬件的传感器 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"cordova.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<hr>\n<ul>\n<li><a href=\"http://docs.phonegap.com/getting-started/3-create-your-app/desktop/\" target=\"_blank\" rel=\"external\">创建demo应用文档</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=pggw-9b8RVY\" target=\"_blank\" rel=\"external\">创建demo应用视频</a></li>\n<li><a href=\"http://docs.phonegap.com/develop/hello-world-explained/\" target=\"_blank\" rel=\"external\">demo中代码说明</a></li>\n</ul>\n<hr>\n<ul>\n<li><a href=\"http://www.multidots.com/difference-native-vs-hybrid-android-app-development-2/\" target=\"_blank\" rel=\"external\">Difference Between Native vs Hybrid Android App Development</a></li>\n</ul>\n","excerpt":"<h4 id=\"Native-app\"><a href=\"#Native-app\" class=\"headerlink\" title=\"Native app\"></a>Native app</h4><blockquote>\n<p>主要问题: 平台局限性，迭代不够灵活，开发代价高</p>\n</blockquote>\n<ul>\n<li>平台局限性</li>\n<li>更好的兼容性与UI适配与更好的用户体验</li>\n</ul>","more":"<h4 id=\"Hybrid-app\"><a href=\"#Hybrid-app\" class=\"headerlink\" title=\"Hybrid app\"></a>Hybrid app</h4><blockquote>\n<p>主要问题: 用户体验</p>\n</blockquote>\n<ul>\n<li>无平台界限</li>\n<li>更小的开发代价(时间/经费/人员)</li>\n<li>迭代更加灵活</li>\n</ul>\n<hr>\n<blockquote>\n<p>推荐辅助开发工具<a href=\"http://phonegap.com/\">Adobe PhoneGap</a></p>\n</blockquote>\n<h2 id=\"使用PhoneGap创建demo简要说明\"><a href=\"#使用PhoneGap创建demo简要说明\" class=\"headerlink\" title=\"使用PhoneGap创建demo简要说明\"></a>使用PhoneGap创建demo简要说明</h2><blockquote>\n<p>先安装<a href=\"http://docs.phonegap.com/getting-started/1-install-phonegap/desktop/\">桌面端</a>与<a href=\"http://docs.phonegap.com/getting-started/2-install-mobile-app/\">手机端</a></p>\n</blockquote>\n<p><img src=\"/img/hybrid-1.png\" alt=\"\"></p>\n<blockquote>\n<p>将底部的ip与端口输入手机端，点击<code>Connect</code>进行连接即可(仅可以与一个项目进行连接)。</p>\n</blockquote>\n<p><img src=\"/img/hybrid-2.png\" alt=\"\"></p>\n<h4 id=\"编辑与开发\"><a href=\"#编辑与开发\" class=\"headerlink\" title=\"编辑与开发\"></a>编辑与开发</h4><blockquote>\n<p>选用适合自己的编辑器(如Atom)到对应的项目中进行编辑即可。</p>\n</blockquote>\n<p>可以参考demo中的<code>index.html</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 配置是否允许缩放，初始化的缩放比例，允许最大缩放比例，允许最小缩放比例，以及默认的宽度与高度--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"user-scalable=no, initial-scale=1, maximum-scale=1, minimum-scale=1,</div><div class=\"line\">width=device-width, height=device-height, target-densitydpi=device-dpi\"</span> /&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- cordova.js 来自开源的Apache Cordova项目，用于支持硬件的传感器 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"cordova.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<hr>\n<ul>\n<li><a href=\"http://docs.phonegap.com/getting-started/3-create-your-app/desktop/\">创建demo应用文档</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=pggw-9b8RVY\">创建demo应用视频</a></li>\n<li><a href=\"http://docs.phonegap.com/develop/hello-world-explained/\">demo中代码说明</a></li>\n</ul>\n<hr>\n<ul>\n<li><a href=\"http://www.multidots.com/difference-native-vs-hybrid-android-app-development-2/\">Difference Between Native vs Hybrid Android App Development</a></li>\n</ul>"},{"title":"Intellij 使用说明","date":"2015-02-25T00:35:03.000Z","_content":"\n## I. 快捷键Mark\n\n#### pop内容选择\n向下: C-N ; 向上: C-P\n\n<!--more-->\n## II. 技巧\n\n#### 善用Postfix Completion\n\n## III. 优化\n\n[https://github.com/damao/Intellij-IDEA-F2E](https://github.com/damao/Intellij-IDEA-F2E)\n\n## IV. 插件\n\n#### 1) emacsIDEAs\n\n开启: C + L\n\n以下都是在列出标签后进行:\n\n- 回车，对更外围的字符进行标签\n- Shift + 回车，对更内围的字符进行标签\n- Shift + 标签字母, 从当前光标位置选中文本到标签位置\n- Alt + 标签字母，从标签位置选中一个单词并调出全部补齐菜单\n\n## V. 快捷键\n\n#### 【常规】\n\nName | Desc\n-|-|\nCtrl+Shift + Enter| 语句完成\n“！”| 否定完成 输入表达式时按 “！”键\nCtrl+E| 最近的文件\nCtrl+Shift+E| 最近更改的文件\nShift+Click| 可以关闭文件\nCtrl+[ OR ]| 可以跑到大括号的开头与结尾\nCtrl+F12| 可以显示当前文件的结构\nCtrl+F7| 可以查询当前元素在当前文件中的引用 然后按 F3 可以选择\nCtrl+N| 可以快速打开类\nCtrl+Shift+N| 可以快速打开文件\nAlt+Q| 可以看到当前方法的声明\nCtrl+P| 可以显示参数信息\nCtrl+Shift+Insert| 可以选择剪贴板内容并插入\nAlt+Insert| 可以生成构造器/Getter/Setter等\nCtrl+Alt+V| 可以引入变量。例如：new String();  自动导入变量定义\nCtrl+Alt+T| 可以把代码包在一个块内| 例如：try/catch\nCtrl+Enter| 导入包 自动修正\nCtrl+Alt+L| 格式化代码\nCtrl+Alt+I| 将选中的代码进行自动缩进编排 这个功能在编辑 JSP 文件时也可以工作\nCtrl+Alt+O| 优化导入的类和包\nCtrl+R| 替换文本\nCtrl+F| 查找文本\nCtrl+Shift+Space| 自动补全代码\nCtrl+空格| 代码提示（与系统输入法快捷键冲突）\nCtrl+Shift+Alt+N| 查找类中的方法或变量\nAlt+Shift+C| 最近的更改\nAlt+Shift+Up/Down| 上/下移一行\nShift+F6| 重构 - 重命名\nCtrl+X| 删除行\nCtrl+D| 复制行\nCtrl+/或Ctrl+Shift+/| 注释（//或者`/**/` ）\nCtrl+J| 自动代码（例如：serr）\nCtrl+Alt+J| 用动态模板环绕\nCtrl+H| 显示类结构图（类的继承层次）\nCtrl+Q| 显示注释文档\nAlt+F1| 查找代码所在位置\nAlt+1| 快速打开或隐藏工程面板\nCtrl+Alt+left/right| 返回至上次浏览的位置\nAlt+left/right| 切换代码视图\nAlt+Up/Down| 在方法间快速移动定位\nCtrl+Shift+Up/Down| 向上/下移动语句\nF2 或 Shift+F2| 高亮错误或警告快速定位\nTab| 代码标签输入完成后, 按 Tab, 生成代码\nCtrl+Shift+F7| 高亮显示所有该文本, 按 Esc 高亮消失\nAlt+F3| 逐个往下查找相同文本| 并高亮显示\nCtrl+Up/Down| 光标中转到第一行或最后一行下\nCtrl+B/Ctrl+Click| 快速打开光标处的类或方法（跳转到定义处）\nCtrl+Alt+B| 跳转到方法实现处\nCtrl+Shift+Backspace| 跳转到上次编辑的地方\nCtrl+O| 重写方法\nCtrl+Alt+Space| 类名自动完成\nCtrl+Alt+Up/Down| 快速跳转搜索结果\nCtrl+Shift+J| 整合两行\nAlt+F8| 计算变量值\nCtrl+Shift+V| 可以将最近使用的剪贴板内容选择插入到文本\nCtrl+Alt+Shift+V| 简单粘贴\nShift+Esc| 不仅可以把焦点移到编辑器上, 而且还可以隐藏当前（或最后活动的）工具窗口\nF12| 把焦点从编辑器移到最近使用的工具窗口\nShift+F1| 要打开编辑器光标字符处使用的类或者方法 Java 文档的浏览器\nCtrl+W| 可以选择单词继而语句继而行继而函数\nCtrl+Shift+W| 取消选择光标所在词\nAlt+F7| 查找整个工程中使用地某一个类、方法或者变量的位置\nCtrl+I| 实现方法\nCtrl+Shift+U| 大小写转化\nCtrl+Y| 删除当前行\nShift+Enter| 向下插入新行\npsvm/sout| main/System.out.println(); Ctrl+J, 查看更多\nCtrl+Shift+F| 全局查找\nCtrl+F| 查找/Shift+F3, 向上查找/F3, 向下查找\nCtrl+Shift+S| 高级搜索\nCtrl+U| 转到父类\nCtrl+Alt+S| 打开设置对话框\nAlt+Shift+Inert| 开启/关闭列选择模式\nCtrl+Alt+Shift+S| 打开当前项目/模块属性\nCtrl+G| 定位行\nAlt+Home| 跳转到导航栏\nCtrl+Enter| 上插一行\nCtrl+Backspace| 按单词删除\nCtrl+\"+/-\"| 当前方法展开、折叠\nCtrl+Shift+\"+/-\"| 全部展开、折叠\n\n#### 【调试部分、编译】\nName | Desc\n- | -|\nCtrl+F2| 停止\nAlt+Shift+F9| 选择 Debug\nAlt+Shift+F10| 选择 Run\nCtrl+Shift+F9| 编译\nCtrl+Shift+F10| 运行\nCtrl+Shift+F8| 查看断点\nF8| 步过\nF7| 步入\nShift+F7| 智能步入\nShift+F8| 步出\nAlt+Shift+F8| 强制步过\nAlt+Shift+F7| 强制步入\nAlt+F9| 运行至光标处\nCtrl+Alt+F9| 强制运行至光标处\nF9| 恢复程序\nAlt+F10| 定位到断点\nCtrl+F8| 切换行断点\nCtrl+F9| 生成项目\nAlt+1| 项目\nAlt+2| 收藏\nAlt+6| TODO\nAlt+7| 结构\nCtrl+Shift+C| 复制路径\nCtrl+Alt+Shift+C| 复制引用| 必须选择类名\nCtrl+Alt+Y| 同步\nCtrl+~| 快速切换方案（界面外观、代码风格、快捷键映射等菜单）\nShift+F12| 还原默认布局\nCtrl+Shift+F12| 隐藏/恢复所有窗口\nCtrl+F4| 关闭\nCtrl+Shift+F4| 关闭活动选项卡\nCtrl+Tab| 转到下一个拆分器\nCtrl+Shift+Tab| 转到上一个拆分器\n\n#### 【重构】\n\nName | Desc\n-| -|\nCtrl+Alt+Shift+T| 弹出重构菜单\nShift+F6| 重命名\nF6| 移动\nF5| 复制\nAlt+Delete| 安全删除\nCtrl+Alt+N| 内联\n\n#### 【查找】\n\nName | Desc\n-|-|\nCtrl+F| 查找\nCtrl+R| 替换\nF3| 查找下一个\nShift+F3| 查找上一个\nCtrl+Shift+F| 在路径中查找\nCtrl+Shift+R| 在路径中替换\nCtrl+Shift+S| 搜索结构\nCtrl+Shift+M| 替换结构\nAlt+F7| 查找用法\nCtrl+Alt+F7| 显示用法\nCtrl+F7| 在文件中查找用法\nCtrl+Shift+F7| 在文件中高亮显示用法\n\n#### 【VCS】\n\nName | Desc\n-|-|\nAlt+~| VCS 操作菜单\nCtrl+K| 提交更改\nCtrl+T| 更新项目\nCtrl+Alt+Shift+D| 显示变化\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/intellij_readme.md","raw":"title: Intellij 使用说明\ndate: 2015-02-25 08:35:03\npermalink: 2015/02/25/intellij_readme\ntags:\n- Intellij\n- 使用说明\n\n---\n\n## I. 快捷键Mark\n\n#### pop内容选择\n向下: C-N ; 向上: C-P\n\n<!--more-->\n## II. 技巧\n\n#### 善用Postfix Completion\n\n## III. 优化\n\n[https://github.com/damao/Intellij-IDEA-F2E](https://github.com/damao/Intellij-IDEA-F2E)\n\n## IV. 插件\n\n#### 1) emacsIDEAs\n\n开启: C + L\n\n以下都是在列出标签后进行:\n\n- 回车，对更外围的字符进行标签\n- Shift + 回车，对更内围的字符进行标签\n- Shift + 标签字母, 从当前光标位置选中文本到标签位置\n- Alt + 标签字母，从标签位置选中一个单词并调出全部补齐菜单\n\n## V. 快捷键\n\n#### 【常规】\n\nName | Desc\n-|-|\nCtrl+Shift + Enter| 语句完成\n“！”| 否定完成 输入表达式时按 “！”键\nCtrl+E| 最近的文件\nCtrl+Shift+E| 最近更改的文件\nShift+Click| 可以关闭文件\nCtrl+[ OR ]| 可以跑到大括号的开头与结尾\nCtrl+F12| 可以显示当前文件的结构\nCtrl+F7| 可以查询当前元素在当前文件中的引用 然后按 F3 可以选择\nCtrl+N| 可以快速打开类\nCtrl+Shift+N| 可以快速打开文件\nAlt+Q| 可以看到当前方法的声明\nCtrl+P| 可以显示参数信息\nCtrl+Shift+Insert| 可以选择剪贴板内容并插入\nAlt+Insert| 可以生成构造器/Getter/Setter等\nCtrl+Alt+V| 可以引入变量。例如：new String();  自动导入变量定义\nCtrl+Alt+T| 可以把代码包在一个块内| 例如：try/catch\nCtrl+Enter| 导入包 自动修正\nCtrl+Alt+L| 格式化代码\nCtrl+Alt+I| 将选中的代码进行自动缩进编排 这个功能在编辑 JSP 文件时也可以工作\nCtrl+Alt+O| 优化导入的类和包\nCtrl+R| 替换文本\nCtrl+F| 查找文本\nCtrl+Shift+Space| 自动补全代码\nCtrl+空格| 代码提示（与系统输入法快捷键冲突）\nCtrl+Shift+Alt+N| 查找类中的方法或变量\nAlt+Shift+C| 最近的更改\nAlt+Shift+Up/Down| 上/下移一行\nShift+F6| 重构 - 重命名\nCtrl+X| 删除行\nCtrl+D| 复制行\nCtrl+/或Ctrl+Shift+/| 注释（//或者`/**/` ）\nCtrl+J| 自动代码（例如：serr）\nCtrl+Alt+J| 用动态模板环绕\nCtrl+H| 显示类结构图（类的继承层次）\nCtrl+Q| 显示注释文档\nAlt+F1| 查找代码所在位置\nAlt+1| 快速打开或隐藏工程面板\nCtrl+Alt+left/right| 返回至上次浏览的位置\nAlt+left/right| 切换代码视图\nAlt+Up/Down| 在方法间快速移动定位\nCtrl+Shift+Up/Down| 向上/下移动语句\nF2 或 Shift+F2| 高亮错误或警告快速定位\nTab| 代码标签输入完成后, 按 Tab, 生成代码\nCtrl+Shift+F7| 高亮显示所有该文本, 按 Esc 高亮消失\nAlt+F3| 逐个往下查找相同文本| 并高亮显示\nCtrl+Up/Down| 光标中转到第一行或最后一行下\nCtrl+B/Ctrl+Click| 快速打开光标处的类或方法（跳转到定义处）\nCtrl+Alt+B| 跳转到方法实现处\nCtrl+Shift+Backspace| 跳转到上次编辑的地方\nCtrl+O| 重写方法\nCtrl+Alt+Space| 类名自动完成\nCtrl+Alt+Up/Down| 快速跳转搜索结果\nCtrl+Shift+J| 整合两行\nAlt+F8| 计算变量值\nCtrl+Shift+V| 可以将最近使用的剪贴板内容选择插入到文本\nCtrl+Alt+Shift+V| 简单粘贴\nShift+Esc| 不仅可以把焦点移到编辑器上, 而且还可以隐藏当前（或最后活动的）工具窗口\nF12| 把焦点从编辑器移到最近使用的工具窗口\nShift+F1| 要打开编辑器光标字符处使用的类或者方法 Java 文档的浏览器\nCtrl+W| 可以选择单词继而语句继而行继而函数\nCtrl+Shift+W| 取消选择光标所在词\nAlt+F7| 查找整个工程中使用地某一个类、方法或者变量的位置\nCtrl+I| 实现方法\nCtrl+Shift+U| 大小写转化\nCtrl+Y| 删除当前行\nShift+Enter| 向下插入新行\npsvm/sout| main/System.out.println(); Ctrl+J, 查看更多\nCtrl+Shift+F| 全局查找\nCtrl+F| 查找/Shift+F3, 向上查找/F3, 向下查找\nCtrl+Shift+S| 高级搜索\nCtrl+U| 转到父类\nCtrl+Alt+S| 打开设置对话框\nAlt+Shift+Inert| 开启/关闭列选择模式\nCtrl+Alt+Shift+S| 打开当前项目/模块属性\nCtrl+G| 定位行\nAlt+Home| 跳转到导航栏\nCtrl+Enter| 上插一行\nCtrl+Backspace| 按单词删除\nCtrl+\"+/-\"| 当前方法展开、折叠\nCtrl+Shift+\"+/-\"| 全部展开、折叠\n\n#### 【调试部分、编译】\nName | Desc\n- | -|\nCtrl+F2| 停止\nAlt+Shift+F9| 选择 Debug\nAlt+Shift+F10| 选择 Run\nCtrl+Shift+F9| 编译\nCtrl+Shift+F10| 运行\nCtrl+Shift+F8| 查看断点\nF8| 步过\nF7| 步入\nShift+F7| 智能步入\nShift+F8| 步出\nAlt+Shift+F8| 强制步过\nAlt+Shift+F7| 强制步入\nAlt+F9| 运行至光标处\nCtrl+Alt+F9| 强制运行至光标处\nF9| 恢复程序\nAlt+F10| 定位到断点\nCtrl+F8| 切换行断点\nCtrl+F9| 生成项目\nAlt+1| 项目\nAlt+2| 收藏\nAlt+6| TODO\nAlt+7| 结构\nCtrl+Shift+C| 复制路径\nCtrl+Alt+Shift+C| 复制引用| 必须选择类名\nCtrl+Alt+Y| 同步\nCtrl+~| 快速切换方案（界面外观、代码风格、快捷键映射等菜单）\nShift+F12| 还原默认布局\nCtrl+Shift+F12| 隐藏/恢复所有窗口\nCtrl+F4| 关闭\nCtrl+Shift+F4| 关闭活动选项卡\nCtrl+Tab| 转到下一个拆分器\nCtrl+Shift+Tab| 转到上一个拆分器\n\n#### 【重构】\n\nName | Desc\n-| -|\nCtrl+Alt+Shift+T| 弹出重构菜单\nShift+F6| 重命名\nF6| 移动\nF5| 复制\nAlt+Delete| 安全删除\nCtrl+Alt+N| 内联\n\n#### 【查找】\n\nName | Desc\n-|-|\nCtrl+F| 查找\nCtrl+R| 替换\nF3| 查找下一个\nShift+F3| 查找上一个\nCtrl+Shift+F| 在路径中查找\nCtrl+Shift+R| 在路径中替换\nCtrl+Shift+S| 搜索结构\nCtrl+Shift+M| 替换结构\nAlt+F7| 查找用法\nCtrl+Alt+F7| 显示用法\nCtrl+F7| 在文件中查找用法\nCtrl+Shift+F7| 在文件中高亮显示用法\n\n#### 【VCS】\n\nName | Desc\n-|-|\nAlt+~| VCS 操作菜单\nCtrl+K| 提交更改\nCtrl+T| 更新项目\nCtrl+Alt+Shift+D| 显示变化\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2015/02/25/intellij_readme","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66iw002s95bupw1dte9q","content":"<h2 id=\"I-快捷键Mark\"><a href=\"#I-快捷键Mark\" class=\"headerlink\" title=\"I. 快捷键Mark\"></a>I. 快捷键Mark</h2><h4 id=\"pop内容选择\"><a href=\"#pop内容选择\" class=\"headerlink\" title=\"pop内容选择\"></a>pop内容选择</h4><p>向下: C-N ; 向上: C-P</p>\n<a id=\"more\"></a>\n<h2 id=\"II-技巧\"><a href=\"#II-技巧\" class=\"headerlink\" title=\"II. 技巧\"></a>II. 技巧</h2><h4 id=\"善用Postfix-Completion\"><a href=\"#善用Postfix-Completion\" class=\"headerlink\" title=\"善用Postfix Completion\"></a>善用Postfix Completion</h4><h2 id=\"III-优化\"><a href=\"#III-优化\" class=\"headerlink\" title=\"III. 优化\"></a>III. 优化</h2><p><a href=\"https://github.com/damao/Intellij-IDEA-F2E\" target=\"_blank\" rel=\"external\">https://github.com/damao/Intellij-IDEA-F2E</a></p>\n<h2 id=\"IV-插件\"><a href=\"#IV-插件\" class=\"headerlink\" title=\"IV. 插件\"></a>IV. 插件</h2><h4 id=\"1-emacsIDEAs\"><a href=\"#1-emacsIDEAs\" class=\"headerlink\" title=\"1) emacsIDEAs\"></a>1) emacsIDEAs</h4><p>开启: C + L</p>\n<p>以下都是在列出标签后进行:</p>\n<ul>\n<li>回车，对更外围的字符进行标签</li>\n<li>Shift + 回车，对更内围的字符进行标签</li>\n<li>Shift + 标签字母, 从当前光标位置选中文本到标签位置</li>\n<li>Alt + 标签字母，从标签位置选中一个单词并调出全部补齐菜单</li>\n</ul>\n<h2 id=\"V-快捷键\"><a href=\"#V-快捷键\" class=\"headerlink\" title=\"V. 快捷键\"></a>V. 快捷键</h2><h4 id=\"【常规】\"><a href=\"#【常规】\" class=\"headerlink\" title=\"【常规】\"></a>【常规】</h4><table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Desc</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Ctrl+Shift + Enter</td>\n<td>语句完成</td>\n</tr>\n<tr>\n<td>“！”</td>\n<td>否定完成 输入表达式时按 “！”键</td>\n</tr>\n<tr>\n<td>Ctrl+E</td>\n<td>最近的文件</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+E</td>\n<td>最近更改的文件</td>\n</tr>\n<tr>\n<td>Shift+Click</td>\n<td>可以关闭文件</td>\n</tr>\n<tr>\n<td>Ctrl+[ OR ]</td>\n<td>可以跑到大括号的开头与结尾</td>\n</tr>\n<tr>\n<td>Ctrl+F12</td>\n<td>可以显示当前文件的结构</td>\n</tr>\n<tr>\n<td>Ctrl+F7</td>\n<td>可以查询当前元素在当前文件中的引用 然后按 F3 可以选择</td>\n</tr>\n<tr>\n<td>Ctrl+N</td>\n<td>可以快速打开类</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+N</td>\n<td>可以快速打开文件</td>\n</tr>\n<tr>\n<td>Alt+Q</td>\n<td>可以看到当前方法的声明</td>\n</tr>\n<tr>\n<td>Ctrl+P</td>\n<td>可以显示参数信息</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+Insert</td>\n<td>可以选择剪贴板内容并插入</td>\n</tr>\n<tr>\n<td>Alt+Insert</td>\n<td>可以生成构造器/Getter/Setter等</td>\n</tr>\n<tr>\n<td>Ctrl+Alt+V</td>\n<td>可以引入变量。例如：new String();  自动导入变量定义</td>\n</tr>\n<tr>\n<td>Ctrl+Alt+T</td>\n<td>可以把代码包在一个块内</td>\n<td>例如：try/catch</td>\n</tr>\n<tr>\n<td>Ctrl+Enter</td>\n<td>导入包 自动修正</td>\n</tr>\n<tr>\n<td>Ctrl+Alt+L</td>\n<td>格式化代码</td>\n</tr>\n<tr>\n<td>Ctrl+Alt+I</td>\n<td>将选中的代码进行自动缩进编排 这个功能在编辑 JSP 文件时也可以工作</td>\n</tr>\n<tr>\n<td>Ctrl+Alt+O</td>\n<td>优化导入的类和包</td>\n</tr>\n<tr>\n<td>Ctrl+R</td>\n<td>替换文本</td>\n</tr>\n<tr>\n<td>Ctrl+F</td>\n<td>查找文本</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+Space</td>\n<td>自动补全代码</td>\n</tr>\n<tr>\n<td>Ctrl+空格</td>\n<td>代码提示（与系统输入法快捷键冲突）</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+Alt+N</td>\n<td>查找类中的方法或变量</td>\n</tr>\n<tr>\n<td>Alt+Shift+C</td>\n<td>最近的更改</td>\n</tr>\n<tr>\n<td>Alt+Shift+Up/Down</td>\n<td>上/下移一行</td>\n</tr>\n<tr>\n<td>Shift+F6</td>\n<td>重构 - 重命名</td>\n</tr>\n<tr>\n<td>Ctrl+X</td>\n<td>删除行</td>\n</tr>\n<tr>\n<td>Ctrl+D</td>\n<td>复制行</td>\n</tr>\n<tr>\n<td>Ctrl+/或Ctrl+Shift+/</td>\n<td>注释（//或者<code>/**/</code> ）</td>\n</tr>\n<tr>\n<td>Ctrl+J</td>\n<td>自动代码（例如：serr）</td>\n</tr>\n<tr>\n<td>Ctrl+Alt+J</td>\n<td>用动态模板环绕</td>\n</tr>\n<tr>\n<td>Ctrl+H</td>\n<td>显示类结构图（类的继承层次）</td>\n</tr>\n<tr>\n<td>Ctrl+Q</td>\n<td>显示注释文档</td>\n</tr>\n<tr>\n<td>Alt+F1</td>\n<td>查找代码所在位置</td>\n</tr>\n<tr>\n<td>Alt+1</td>\n<td>快速打开或隐藏工程面板</td>\n</tr>\n<tr>\n<td>Ctrl+Alt+left/right</td>\n<td>返回至上次浏览的位置</td>\n</tr>\n<tr>\n<td>Alt+left/right</td>\n<td>切换代码视图</td>\n</tr>\n<tr>\n<td>Alt+Up/Down</td>\n<td>在方法间快速移动定位</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+Up/Down</td>\n<td>向上/下移动语句</td>\n</tr>\n<tr>\n<td>F2 或 Shift+F2</td>\n<td>高亮错误或警告快速定位</td>\n</tr>\n<tr>\n<td>Tab</td>\n<td>代码标签输入完成后, 按 Tab, 生成代码</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+F7</td>\n<td>高亮显示所有该文本, 按 Esc 高亮消失</td>\n</tr>\n<tr>\n<td>Alt+F3</td>\n<td>逐个往下查找相同文本</td>\n<td>并高亮显示</td>\n</tr>\n<tr>\n<td>Ctrl+Up/Down</td>\n<td>光标中转到第一行或最后一行下</td>\n</tr>\n<tr>\n<td>Ctrl+B/Ctrl+Click</td>\n<td>快速打开光标处的类或方法（跳转到定义处）</td>\n</tr>\n<tr>\n<td>Ctrl+Alt+B</td>\n<td>跳转到方法实现处</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+Backspace</td>\n<td>跳转到上次编辑的地方</td>\n</tr>\n<tr>\n<td>Ctrl+O</td>\n<td>重写方法</td>\n</tr>\n<tr>\n<td>Ctrl+Alt+Space</td>\n<td>类名自动完成</td>\n</tr>\n<tr>\n<td>Ctrl+Alt+Up/Down</td>\n<td>快速跳转搜索结果</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+J</td>\n<td>整合两行</td>\n</tr>\n<tr>\n<td>Alt+F8</td>\n<td>计算变量值</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+V</td>\n<td>可以将最近使用的剪贴板内容选择插入到文本</td>\n</tr>\n<tr>\n<td>Ctrl+Alt+Shift+V</td>\n<td>简单粘贴</td>\n</tr>\n<tr>\n<td>Shift+Esc</td>\n<td>不仅可以把焦点移到编辑器上, 而且还可以隐藏当前（或最后活动的）工具窗口</td>\n</tr>\n<tr>\n<td>F12</td>\n<td>把焦点从编辑器移到最近使用的工具窗口</td>\n</tr>\n<tr>\n<td>Shift+F1</td>\n<td>要打开编辑器光标字符处使用的类或者方法 Java 文档的浏览器</td>\n</tr>\n<tr>\n<td>Ctrl+W</td>\n<td>可以选择单词继而语句继而行继而函数</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+W</td>\n<td>取消选择光标所在词</td>\n</tr>\n<tr>\n<td>Alt+F7</td>\n<td>查找整个工程中使用地某一个类、方法或者变量的位置</td>\n</tr>\n<tr>\n<td>Ctrl+I</td>\n<td>实现方法</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+U</td>\n<td>大小写转化</td>\n</tr>\n<tr>\n<td>Ctrl+Y</td>\n<td>删除当前行</td>\n</tr>\n<tr>\n<td>Shift+Enter</td>\n<td>向下插入新行</td>\n</tr>\n<tr>\n<td>psvm/sout</td>\n<td>main/System.out.println(); Ctrl+J, 查看更多</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+F</td>\n<td>全局查找</td>\n</tr>\n<tr>\n<td>Ctrl+F</td>\n<td>查找/Shift+F3, 向上查找/F3, 向下查找</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+S</td>\n<td>高级搜索</td>\n</tr>\n<tr>\n<td>Ctrl+U</td>\n<td>转到父类</td>\n</tr>\n<tr>\n<td>Ctrl+Alt+S</td>\n<td>打开设置对话框</td>\n</tr>\n<tr>\n<td>Alt+Shift+Inert</td>\n<td>开启/关闭列选择模式</td>\n</tr>\n<tr>\n<td>Ctrl+Alt+Shift+S</td>\n<td>打开当前项目/模块属性</td>\n</tr>\n<tr>\n<td>Ctrl+G</td>\n<td>定位行</td>\n</tr>\n<tr>\n<td>Alt+Home</td>\n<td>跳转到导航栏</td>\n</tr>\n<tr>\n<td>Ctrl+Enter</td>\n<td>上插一行</td>\n</tr>\n<tr>\n<td>Ctrl+Backspace</td>\n<td>按单词删除</td>\n</tr>\n<tr>\n<td>Ctrl+”+/-“</td>\n<td>当前方法展开、折叠</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+”+/-“</td>\n<td>全部展开、折叠</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"【调试部分、编译】\"><a href=\"#【调试部分、编译】\" class=\"headerlink\" title=\"【调试部分、编译】\"></a>【调试部分、编译】</h4><table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Desc</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Ctrl+F2</td>\n<td>停止</td>\n</tr>\n<tr>\n<td>Alt+Shift+F9</td>\n<td>选择 Debug</td>\n</tr>\n<tr>\n<td>Alt+Shift+F10</td>\n<td>选择 Run</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+F9</td>\n<td>编译</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+F10</td>\n<td>运行</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+F8</td>\n<td>查看断点</td>\n</tr>\n<tr>\n<td>F8</td>\n<td>步过</td>\n</tr>\n<tr>\n<td>F7</td>\n<td>步入</td>\n</tr>\n<tr>\n<td>Shift+F7</td>\n<td>智能步入</td>\n</tr>\n<tr>\n<td>Shift+F8</td>\n<td>步出</td>\n</tr>\n<tr>\n<td>Alt+Shift+F8</td>\n<td>强制步过</td>\n</tr>\n<tr>\n<td>Alt+Shift+F7</td>\n<td>强制步入</td>\n</tr>\n<tr>\n<td>Alt+F9</td>\n<td>运行至光标处</td>\n</tr>\n<tr>\n<td>Ctrl+Alt+F9</td>\n<td>强制运行至光标处</td>\n</tr>\n<tr>\n<td>F9</td>\n<td>恢复程序</td>\n</tr>\n<tr>\n<td>Alt+F10</td>\n<td>定位到断点</td>\n</tr>\n<tr>\n<td>Ctrl+F8</td>\n<td>切换行断点</td>\n</tr>\n<tr>\n<td>Ctrl+F9</td>\n<td>生成项目</td>\n</tr>\n<tr>\n<td>Alt+1</td>\n<td>项目</td>\n</tr>\n<tr>\n<td>Alt+2</td>\n<td>收藏</td>\n</tr>\n<tr>\n<td>Alt+6</td>\n<td>TODO</td>\n</tr>\n<tr>\n<td>Alt+7</td>\n<td>结构</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+C</td>\n<td>复制路径</td>\n</tr>\n<tr>\n<td>Ctrl+Alt+Shift+C</td>\n<td>复制引用</td>\n<td>必须选择类名</td>\n</tr>\n<tr>\n<td>Ctrl+Alt+Y</td>\n<td>同步</td>\n</tr>\n<tr>\n<td>Ctrl+~</td>\n<td>快速切换方案（界面外观、代码风格、快捷键映射等菜单）</td>\n</tr>\n<tr>\n<td>Shift+F12</td>\n<td>还原默认布局</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+F12</td>\n<td>隐藏/恢复所有窗口</td>\n</tr>\n<tr>\n<td>Ctrl+F4</td>\n<td>关闭</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+F4</td>\n<td>关闭活动选项卡</td>\n</tr>\n<tr>\n<td>Ctrl+Tab</td>\n<td>转到下一个拆分器</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+Tab</td>\n<td>转到上一个拆分器</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"【重构】\"><a href=\"#【重构】\" class=\"headerlink\" title=\"【重构】\"></a>【重构】</h4><table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Desc</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Ctrl+Alt+Shift+T</td>\n<td>弹出重构菜单</td>\n</tr>\n<tr>\n<td>Shift+F6</td>\n<td>重命名</td>\n</tr>\n<tr>\n<td>F6</td>\n<td>移动</td>\n</tr>\n<tr>\n<td>F5</td>\n<td>复制</td>\n</tr>\n<tr>\n<td>Alt+Delete</td>\n<td>安全删除</td>\n</tr>\n<tr>\n<td>Ctrl+Alt+N</td>\n<td>内联</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"【查找】\"><a href=\"#【查找】\" class=\"headerlink\" title=\"【查找】\"></a>【查找】</h4><table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Desc</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Ctrl+F</td>\n<td>查找</td>\n</tr>\n<tr>\n<td>Ctrl+R</td>\n<td>替换</td>\n</tr>\n<tr>\n<td>F3</td>\n<td>查找下一个</td>\n</tr>\n<tr>\n<td>Shift+F3</td>\n<td>查找上一个</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+F</td>\n<td>在路径中查找</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+R</td>\n<td>在路径中替换</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+S</td>\n<td>搜索结构</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+M</td>\n<td>替换结构</td>\n</tr>\n<tr>\n<td>Alt+F7</td>\n<td>查找用法</td>\n</tr>\n<tr>\n<td>Ctrl+Alt+F7</td>\n<td>显示用法</td>\n</tr>\n<tr>\n<td>Ctrl+F7</td>\n<td>在文件中查找用法</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+F7</td>\n<td>在文件中高亮显示用法</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"【VCS】\"><a href=\"#【VCS】\" class=\"headerlink\" title=\"【VCS】\"></a>【VCS】</h4><table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Desc</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Alt+~</td>\n<td>VCS 操作菜单</td>\n</tr>\n<tr>\n<td>Ctrl+K</td>\n<td>提交更改</td>\n</tr>\n<tr>\n<td>Ctrl+T</td>\n<td>更新项目</td>\n</tr>\n<tr>\n<td>Ctrl+Alt+Shift+D</td>\n<td>显示变化</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<h2 id=\"I-快捷键Mark\"><a href=\"#I-快捷键Mark\" class=\"headerlink\" title=\"I. 快捷键Mark\"></a>I. 快捷键Mark</h2><h4 id=\"pop内容选择\"><a href=\"#pop内容选择\" class=\"headerlink\" title=\"pop内容选择\"></a>pop内容选择</h4><p>向下: C-N ; 向上: C-P</p>","more":"<h2 id=\"II-技巧\"><a href=\"#II-技巧\" class=\"headerlink\" title=\"II. 技巧\"></a>II. 技巧</h2><h4 id=\"善用Postfix-Completion\"><a href=\"#善用Postfix-Completion\" class=\"headerlink\" title=\"善用Postfix Completion\"></a>善用Postfix Completion</h4><h2 id=\"III-优化\"><a href=\"#III-优化\" class=\"headerlink\" title=\"III. 优化\"></a>III. 优化</h2><p><a href=\"https://github.com/damao/Intellij-IDEA-F2E\">https://github.com/damao/Intellij-IDEA-F2E</a></p>\n<h2 id=\"IV-插件\"><a href=\"#IV-插件\" class=\"headerlink\" title=\"IV. 插件\"></a>IV. 插件</h2><h4 id=\"1-emacsIDEAs\"><a href=\"#1-emacsIDEAs\" class=\"headerlink\" title=\"1) emacsIDEAs\"></a>1) emacsIDEAs</h4><p>开启: C + L</p>\n<p>以下都是在列出标签后进行:</p>\n<ul>\n<li>回车，对更外围的字符进行标签</li>\n<li>Shift + 回车，对更内围的字符进行标签</li>\n<li>Shift + 标签字母, 从当前光标位置选中文本到标签位置</li>\n<li>Alt + 标签字母，从标签位置选中一个单词并调出全部补齐菜单</li>\n</ul>\n<h2 id=\"V-快捷键\"><a href=\"#V-快捷键\" class=\"headerlink\" title=\"V. 快捷键\"></a>V. 快捷键</h2><h4 id=\"【常规】\"><a href=\"#【常规】\" class=\"headerlink\" title=\"【常规】\"></a>【常规】</h4><table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Desc</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Ctrl+Shift + Enter</td>\n<td>语句完成</td>\n</tr>\n<tr>\n<td>“！”</td>\n<td>否定完成 输入表达式时按 “！”键</td>\n</tr>\n<tr>\n<td>Ctrl+E</td>\n<td>最近的文件</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+E</td>\n<td>最近更改的文件</td>\n</tr>\n<tr>\n<td>Shift+Click</td>\n<td>可以关闭文件</td>\n</tr>\n<tr>\n<td>Ctrl+[ OR ]</td>\n<td>可以跑到大括号的开头与结尾</td>\n</tr>\n<tr>\n<td>Ctrl+F12</td>\n<td>可以显示当前文件的结构</td>\n</tr>\n<tr>\n<td>Ctrl+F7</td>\n<td>可以查询当前元素在当前文件中的引用 然后按 F3 可以选择</td>\n</tr>\n<tr>\n<td>Ctrl+N</td>\n<td>可以快速打开类</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+N</td>\n<td>可以快速打开文件</td>\n</tr>\n<tr>\n<td>Alt+Q</td>\n<td>可以看到当前方法的声明</td>\n</tr>\n<tr>\n<td>Ctrl+P</td>\n<td>可以显示参数信息</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+Insert</td>\n<td>可以选择剪贴板内容并插入</td>\n</tr>\n<tr>\n<td>Alt+Insert</td>\n<td>可以生成构造器/Getter/Setter等</td>\n</tr>\n<tr>\n<td>Ctrl+Alt+V</td>\n<td>可以引入变量。例如：new String();  自动导入变量定义</td>\n</tr>\n<tr>\n<td>Ctrl+Alt+T</td>\n<td>可以把代码包在一个块内</td>\n<td>例如：try/catch</td>\n</tr>\n<tr>\n<td>Ctrl+Enter</td>\n<td>导入包 自动修正</td>\n</tr>\n<tr>\n<td>Ctrl+Alt+L</td>\n<td>格式化代码</td>\n</tr>\n<tr>\n<td>Ctrl+Alt+I</td>\n<td>将选中的代码进行自动缩进编排 这个功能在编辑 JSP 文件时也可以工作</td>\n</tr>\n<tr>\n<td>Ctrl+Alt+O</td>\n<td>优化导入的类和包</td>\n</tr>\n<tr>\n<td>Ctrl+R</td>\n<td>替换文本</td>\n</tr>\n<tr>\n<td>Ctrl+F</td>\n<td>查找文本</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+Space</td>\n<td>自动补全代码</td>\n</tr>\n<tr>\n<td>Ctrl+空格</td>\n<td>代码提示（与系统输入法快捷键冲突）</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+Alt+N</td>\n<td>查找类中的方法或变量</td>\n</tr>\n<tr>\n<td>Alt+Shift+C</td>\n<td>最近的更改</td>\n</tr>\n<tr>\n<td>Alt+Shift+Up/Down</td>\n<td>上/下移一行</td>\n</tr>\n<tr>\n<td>Shift+F6</td>\n<td>重构 - 重命名</td>\n</tr>\n<tr>\n<td>Ctrl+X</td>\n<td>删除行</td>\n</tr>\n<tr>\n<td>Ctrl+D</td>\n<td>复制行</td>\n</tr>\n<tr>\n<td>Ctrl+/或Ctrl+Shift+/</td>\n<td>注释（//或者<code>/**/</code> ）</td>\n</tr>\n<tr>\n<td>Ctrl+J</td>\n<td>自动代码（例如：serr）</td>\n</tr>\n<tr>\n<td>Ctrl+Alt+J</td>\n<td>用动态模板环绕</td>\n</tr>\n<tr>\n<td>Ctrl+H</td>\n<td>显示类结构图（类的继承层次）</td>\n</tr>\n<tr>\n<td>Ctrl+Q</td>\n<td>显示注释文档</td>\n</tr>\n<tr>\n<td>Alt+F1</td>\n<td>查找代码所在位置</td>\n</tr>\n<tr>\n<td>Alt+1</td>\n<td>快速打开或隐藏工程面板</td>\n</tr>\n<tr>\n<td>Ctrl+Alt+left/right</td>\n<td>返回至上次浏览的位置</td>\n</tr>\n<tr>\n<td>Alt+left/right</td>\n<td>切换代码视图</td>\n</tr>\n<tr>\n<td>Alt+Up/Down</td>\n<td>在方法间快速移动定位</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+Up/Down</td>\n<td>向上/下移动语句</td>\n</tr>\n<tr>\n<td>F2 或 Shift+F2</td>\n<td>高亮错误或警告快速定位</td>\n</tr>\n<tr>\n<td>Tab</td>\n<td>代码标签输入完成后, 按 Tab, 生成代码</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+F7</td>\n<td>高亮显示所有该文本, 按 Esc 高亮消失</td>\n</tr>\n<tr>\n<td>Alt+F3</td>\n<td>逐个往下查找相同文本</td>\n<td>并高亮显示</td>\n</tr>\n<tr>\n<td>Ctrl+Up/Down</td>\n<td>光标中转到第一行或最后一行下</td>\n</tr>\n<tr>\n<td>Ctrl+B/Ctrl+Click</td>\n<td>快速打开光标处的类或方法（跳转到定义处）</td>\n</tr>\n<tr>\n<td>Ctrl+Alt+B</td>\n<td>跳转到方法实现处</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+Backspace</td>\n<td>跳转到上次编辑的地方</td>\n</tr>\n<tr>\n<td>Ctrl+O</td>\n<td>重写方法</td>\n</tr>\n<tr>\n<td>Ctrl+Alt+Space</td>\n<td>类名自动完成</td>\n</tr>\n<tr>\n<td>Ctrl+Alt+Up/Down</td>\n<td>快速跳转搜索结果</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+J</td>\n<td>整合两行</td>\n</tr>\n<tr>\n<td>Alt+F8</td>\n<td>计算变量值</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+V</td>\n<td>可以将最近使用的剪贴板内容选择插入到文本</td>\n</tr>\n<tr>\n<td>Ctrl+Alt+Shift+V</td>\n<td>简单粘贴</td>\n</tr>\n<tr>\n<td>Shift+Esc</td>\n<td>不仅可以把焦点移到编辑器上, 而且还可以隐藏当前（或最后活动的）工具窗口</td>\n</tr>\n<tr>\n<td>F12</td>\n<td>把焦点从编辑器移到最近使用的工具窗口</td>\n</tr>\n<tr>\n<td>Shift+F1</td>\n<td>要打开编辑器光标字符处使用的类或者方法 Java 文档的浏览器</td>\n</tr>\n<tr>\n<td>Ctrl+W</td>\n<td>可以选择单词继而语句继而行继而函数</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+W</td>\n<td>取消选择光标所在词</td>\n</tr>\n<tr>\n<td>Alt+F7</td>\n<td>查找整个工程中使用地某一个类、方法或者变量的位置</td>\n</tr>\n<tr>\n<td>Ctrl+I</td>\n<td>实现方法</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+U</td>\n<td>大小写转化</td>\n</tr>\n<tr>\n<td>Ctrl+Y</td>\n<td>删除当前行</td>\n</tr>\n<tr>\n<td>Shift+Enter</td>\n<td>向下插入新行</td>\n</tr>\n<tr>\n<td>psvm/sout</td>\n<td>main/System.out.println(); Ctrl+J, 查看更多</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+F</td>\n<td>全局查找</td>\n</tr>\n<tr>\n<td>Ctrl+F</td>\n<td>查找/Shift+F3, 向上查找/F3, 向下查找</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+S</td>\n<td>高级搜索</td>\n</tr>\n<tr>\n<td>Ctrl+U</td>\n<td>转到父类</td>\n</tr>\n<tr>\n<td>Ctrl+Alt+S</td>\n<td>打开设置对话框</td>\n</tr>\n<tr>\n<td>Alt+Shift+Inert</td>\n<td>开启/关闭列选择模式</td>\n</tr>\n<tr>\n<td>Ctrl+Alt+Shift+S</td>\n<td>打开当前项目/模块属性</td>\n</tr>\n<tr>\n<td>Ctrl+G</td>\n<td>定位行</td>\n</tr>\n<tr>\n<td>Alt+Home</td>\n<td>跳转到导航栏</td>\n</tr>\n<tr>\n<td>Ctrl+Enter</td>\n<td>上插一行</td>\n</tr>\n<tr>\n<td>Ctrl+Backspace</td>\n<td>按单词删除</td>\n</tr>\n<tr>\n<td>Ctrl+”+/-“</td>\n<td>当前方法展开、折叠</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+”+/-“</td>\n<td>全部展开、折叠</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"【调试部分、编译】\"><a href=\"#【调试部分、编译】\" class=\"headerlink\" title=\"【调试部分、编译】\"></a>【调试部分、编译】</h4><table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Desc</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Ctrl+F2</td>\n<td>停止</td>\n</tr>\n<tr>\n<td>Alt+Shift+F9</td>\n<td>选择 Debug</td>\n</tr>\n<tr>\n<td>Alt+Shift+F10</td>\n<td>选择 Run</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+F9</td>\n<td>编译</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+F10</td>\n<td>运行</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+F8</td>\n<td>查看断点</td>\n</tr>\n<tr>\n<td>F8</td>\n<td>步过</td>\n</tr>\n<tr>\n<td>F7</td>\n<td>步入</td>\n</tr>\n<tr>\n<td>Shift+F7</td>\n<td>智能步入</td>\n</tr>\n<tr>\n<td>Shift+F8</td>\n<td>步出</td>\n</tr>\n<tr>\n<td>Alt+Shift+F8</td>\n<td>强制步过</td>\n</tr>\n<tr>\n<td>Alt+Shift+F7</td>\n<td>强制步入</td>\n</tr>\n<tr>\n<td>Alt+F9</td>\n<td>运行至光标处</td>\n</tr>\n<tr>\n<td>Ctrl+Alt+F9</td>\n<td>强制运行至光标处</td>\n</tr>\n<tr>\n<td>F9</td>\n<td>恢复程序</td>\n</tr>\n<tr>\n<td>Alt+F10</td>\n<td>定位到断点</td>\n</tr>\n<tr>\n<td>Ctrl+F8</td>\n<td>切换行断点</td>\n</tr>\n<tr>\n<td>Ctrl+F9</td>\n<td>生成项目</td>\n</tr>\n<tr>\n<td>Alt+1</td>\n<td>项目</td>\n</tr>\n<tr>\n<td>Alt+2</td>\n<td>收藏</td>\n</tr>\n<tr>\n<td>Alt+6</td>\n<td>TODO</td>\n</tr>\n<tr>\n<td>Alt+7</td>\n<td>结构</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+C</td>\n<td>复制路径</td>\n</tr>\n<tr>\n<td>Ctrl+Alt+Shift+C</td>\n<td>复制引用</td>\n<td>必须选择类名</td>\n</tr>\n<tr>\n<td>Ctrl+Alt+Y</td>\n<td>同步</td>\n</tr>\n<tr>\n<td>Ctrl+~</td>\n<td>快速切换方案（界面外观、代码风格、快捷键映射等菜单）</td>\n</tr>\n<tr>\n<td>Shift+F12</td>\n<td>还原默认布局</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+F12</td>\n<td>隐藏/恢复所有窗口</td>\n</tr>\n<tr>\n<td>Ctrl+F4</td>\n<td>关闭</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+F4</td>\n<td>关闭活动选项卡</td>\n</tr>\n<tr>\n<td>Ctrl+Tab</td>\n<td>转到下一个拆分器</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+Tab</td>\n<td>转到上一个拆分器</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"【重构】\"><a href=\"#【重构】\" class=\"headerlink\" title=\"【重构】\"></a>【重构】</h4><table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Desc</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Ctrl+Alt+Shift+T</td>\n<td>弹出重构菜单</td>\n</tr>\n<tr>\n<td>Shift+F6</td>\n<td>重命名</td>\n</tr>\n<tr>\n<td>F6</td>\n<td>移动</td>\n</tr>\n<tr>\n<td>F5</td>\n<td>复制</td>\n</tr>\n<tr>\n<td>Alt+Delete</td>\n<td>安全删除</td>\n</tr>\n<tr>\n<td>Ctrl+Alt+N</td>\n<td>内联</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"【查找】\"><a href=\"#【查找】\" class=\"headerlink\" title=\"【查找】\"></a>【查找】</h4><table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Desc</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Ctrl+F</td>\n<td>查找</td>\n</tr>\n<tr>\n<td>Ctrl+R</td>\n<td>替换</td>\n</tr>\n<tr>\n<td>F3</td>\n<td>查找下一个</td>\n</tr>\n<tr>\n<td>Shift+F3</td>\n<td>查找上一个</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+F</td>\n<td>在路径中查找</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+R</td>\n<td>在路径中替换</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+S</td>\n<td>搜索结构</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+M</td>\n<td>替换结构</td>\n</tr>\n<tr>\n<td>Alt+F7</td>\n<td>查找用法</td>\n</tr>\n<tr>\n<td>Ctrl+Alt+F7</td>\n<td>显示用法</td>\n</tr>\n<tr>\n<td>Ctrl+F7</td>\n<td>在文件中查找用法</td>\n</tr>\n<tr>\n<td>Ctrl+Shift+F7</td>\n<td>在文件中高亮显示用法</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"【VCS】\"><a href=\"#【VCS】\" class=\"headerlink\" title=\"【VCS】\"></a>【VCS】</h4><table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Desc</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Alt+~</td>\n<td>VCS 操作菜单</td>\n</tr>\n<tr>\n<td>Ctrl+K</td>\n<td>提交更改</td>\n</tr>\n<tr>\n<td>Ctrl+T</td>\n<td>更新项目</td>\n</tr>\n<tr>\n<td>Ctrl+Alt+Shift+D</td>\n<td>显示变化</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"Java Synchronised机制","date":"2015-11-13T13:14:03.000Z","_content":"\n> Java中锁的控制可以参看这篇文章: [Java多线程抢占](http://blog.dreamtobe.cn/2015/03/25/Java多线程抢占/)。\n\n## I. 原末\n\n#### 矛盾1:\n\n**A**: 重量级锁中的阻塞(挂起线程/恢复线程): 需要转入内核态中完成，有很大的性能影响。\n\n**B**: 锁大多数情况都是在很短的时间执行完成。\n\n**解决方案**: 引入轻量锁(通过自旋来完成锁竞争)。\n\n<!-- more -->\n\n#### 矛盾2:\n\n**A**: 轻量级锁中的自旋: 占用CPU时间，增加CPU的消耗(因此在多核处理器上优势更明显)。\n\n**B**: 如果某锁始终是被长期占用，导致自旋如果没有把握好，白白浪费CPU资源。\n\n**解决方案**: JDK5中引入默认自旋次数为10(用户可以通过`-XX:PreBlockSpin`进行修改)， JDK6中更是引入了自适应自旋（简单来说如果自旋成功概率高，就会允许等待更长的时间（如100次自旋），如果失败率很高，那很有可能就不做自旋，直接升级为重量级锁，实际场景中，HotSpot认为最佳时间应该是一个线程上下文切换的时间，而是否自旋以及自旋次数更是与对CPUs的负载、CPUs是否处于节电模式等息息相关的)。\n\n#### 矛盾3:\n\n**A**: 无论是轻量级锁还是重量级锁: 在进入与退出时都要通过CAS修改对象头中的`Mark Word`来进行加锁与释放锁。\n\n**B**: 在一些情况下总是同一线程多次获得锁，此时第二次再重新做CAS修改对象头中的`Mark Word`这样的操作，有些多余。\n\n**解决方案**: JDK6引入偏向锁(首次需要通过CAS修改对象头中的`Mark Word`，之后该线程再进入只需要比较对象头中的`Mark Word`的Thread ID是否与当前的一致，如果一致说明已经取得锁，就不用再CAS了)。\n\n#### 矛盾4:\n\n**A**: 项目中代码块中可能绝大情况下都是多线程访问。\n\n**B**: 每次都是先偏向锁然后过渡到轻量锁，而偏向锁能用到的又很少。\n\n**解决方案**: 可以使用`-XX:-UseBiasedLocking=false`禁用偏向锁。\n\n#### 矛盾5:\n\n**A**: 代码中JDK原生或其他的工具方法中带有大量的加锁。\n\n**B**: 实际过程中，很有可能很多加锁是无效的(如局部变量作为锁，由于每次都是新对象新锁，所以没有意义)。\n\n**解决方法**: 引入锁削除(虚拟机即时编译器(JIT)运行时，依据逃逸分析的数据检测到不可能存在竞争的锁，就自动将该锁消除)。\n\n#### 矛盾6:\n\n**A**: 为了让锁颗粒度更小，或者原生方法中带有锁，很有可能在一个频繁执行(如循环)中对同一对象加锁。\n\n**B**: 由于在频繁的执行中，反复的加锁和解锁，这种频繁的锁竞争带来很大的性能损耗。\n\n**解决方法**: 引入锁膨胀(会自动将锁的范围拓展到操作序列(如循环)外, 可以理解为将一些反复的锁合为一个锁放在它们外部)。\n\n\n## II. 基本原理\n\nJVM会为每个对象分配一个`monitor`，而同时只能有一个线程可以获得该对象`monitor`的所有权。在线程进入时通过`monitorenter`尝试取得对象`monitor`所有权，退出时通过`monitorexit`释放对象`monitor`所有权。\n\n> `monitorenter`与`monitorexit`在编译后对称插入代码。\n\n- `monitorenter`: 被插入到同步代码块之前。\n- `monitorexit`: 被插到同步代码块之后或异常处。\n\n\n#### 1. 相关数据存在哪里?\n\n对象头。\n\n##### 对象头结构:\n> 数组会多1字宽(32位: 4字节)来存储数组长度\n\n长度 | 内容 | 说明\n-|-|-\n1字宽 | Mark Word | 存储对象的hashCode或锁信息等\n1字宽 | Class Metadata Address | 存储对象类型数据的指针\n1字宽 | Array length | 数组长度(如果是数组对象)\n\n而对象的锁，一般只和`Mark Word`有关。\n\n#### 2. 各个锁的关系以及升级情况?\n\n> 锁升级是单向的: 无锁 -> 偏向锁 -> 轻量级锁 -> 重量级锁\n\n![](/img/java_synchronized.png)\n\n## III. 多线程下数据同步\n\n> 这类锁/关键字主要是为了维护数据在高并发情况下的一致性/稳定性。\n\n### 1. 数据库中的锁\n\n#### 共享锁(Share Lock)\n\n> 又称为读锁\n\n多个线程可并发的获得某个数据的共享锁锁，并行读取数据。在数据存在共享锁期间，不能修改数据，不能加排他锁。\n\n> 如MySQL中，在查询语句最后加上`LOCK IN SHARE MODE`。\n\n#### 排他锁(eXclusive Lock)\n\n> 又称为写锁\n\n同能只能有一个线程可以获得某个数据的排他锁。在线程获取排他锁后，该线程可对数据读写，但是其他线程不能对该数据添加任何锁。\n\n### 2. `volatile`\n\n> 如果一个共享变量被声明成`volatile`，java线程内存模型将会确保所有线程看到这个变量的值是一致的。\n\n- **基本策略**: 写操作时，会有`Lock`前缀指定，处理器会立马将修改直接写回系统内存，并且其他处理器会将该值在其上的高速缓存标为无效。\n- **可能带来的性能消耗**: 写操作实时写回内存，锁总线/锁内存。\n- **优势**: 一些场景上相比`synchronized`，执行成本更低(不会引起线程上下文切换以及调度)，使用更方便。\n\n---\n\n本文已经发布到JackBlog公众号，可请直接访问: [Java Synchronized机制与常见的多线程抢占 - JacksBlog](https://mp.weixin.qq.com/s?__biz=MzIyMjQxMzAzOA==&mid=2247483673&idx=1&sn=cc20b1149e9ffed649dd00d8737e6a08)\n\n---\n\n- [Java的多线程机制系列：(三）synchronized的同步原理](http://www.cnblogs.com/mengheng/p/3491304.html)\n- [再说 lock-free 编程](http://www.cnblogs.com/lucifer1982/archive/2009/04/08/1431992.html)\n- [聊聊并发（一）——深入分析Volatile的实现原理](http://www.infoq.com/cn/articles/ftf-java-volatile)\n- [聊聊并发（二）——Java SE1.6中的Synchronized](http://www.infoq.com/cn/articles/java-se-16-synchronized)\n- [深入JVM锁机制1-synchronized](http://blog.csdn.net/chen77716/article/details/6618779)\n- [虚拟机中的锁优化简介（适应性自旋/锁粗化/锁削除/轻量级锁/偏向锁）](http://icyfenix.iteye.com/blog/1018932)\n- [Java偏向锁实现原理(Biased Locking)](http://my.oschina.net/u/140462/blog/490897)\n- [JVM内部细节之二：偏向锁（Biased Locking）](http://www.cnblogs.com/javaminer/p/3892288.html)\n- [java锁优化](http://luojinping.com/2015/07/09/java锁优化/)\n- [Java锁Synchronized之偏向锁](http://blog.sina.com.cn/s/blog_c038e9930102v2hs.html)\n- [MySQL中的共享锁与排他锁](http://www.hollischuang.com/archives/923)\n\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/java_synchronized.md","raw":"title: Java Synchronised机制\ndate: 2015-11-13 21:14:03\npermalink: 2015/11/13/java_synchronized\ntags:\n- Android\n- JDK\n- Java\n- Synchronized\n- 同步\n- 偏向锁\n- 轻量级锁\n- 重量级锁\n- 自旋\n\n---\n\n> Java中锁的控制可以参看这篇文章: [Java多线程抢占](http://blog.dreamtobe.cn/2015/03/25/Java多线程抢占/)。\n\n## I. 原末\n\n#### 矛盾1:\n\n**A**: 重量级锁中的阻塞(挂起线程/恢复线程): 需要转入内核态中完成，有很大的性能影响。\n\n**B**: 锁大多数情况都是在很短的时间执行完成。\n\n**解决方案**: 引入轻量锁(通过自旋来完成锁竞争)。\n\n<!-- more -->\n\n#### 矛盾2:\n\n**A**: 轻量级锁中的自旋: 占用CPU时间，增加CPU的消耗(因此在多核处理器上优势更明显)。\n\n**B**: 如果某锁始终是被长期占用，导致自旋如果没有把握好，白白浪费CPU资源。\n\n**解决方案**: JDK5中引入默认自旋次数为10(用户可以通过`-XX:PreBlockSpin`进行修改)， JDK6中更是引入了自适应自旋（简单来说如果自旋成功概率高，就会允许等待更长的时间（如100次自旋），如果失败率很高，那很有可能就不做自旋，直接升级为重量级锁，实际场景中，HotSpot认为最佳时间应该是一个线程上下文切换的时间，而是否自旋以及自旋次数更是与对CPUs的负载、CPUs是否处于节电模式等息息相关的)。\n\n#### 矛盾3:\n\n**A**: 无论是轻量级锁还是重量级锁: 在进入与退出时都要通过CAS修改对象头中的`Mark Word`来进行加锁与释放锁。\n\n**B**: 在一些情况下总是同一线程多次获得锁，此时第二次再重新做CAS修改对象头中的`Mark Word`这样的操作，有些多余。\n\n**解决方案**: JDK6引入偏向锁(首次需要通过CAS修改对象头中的`Mark Word`，之后该线程再进入只需要比较对象头中的`Mark Word`的Thread ID是否与当前的一致，如果一致说明已经取得锁，就不用再CAS了)。\n\n#### 矛盾4:\n\n**A**: 项目中代码块中可能绝大情况下都是多线程访问。\n\n**B**: 每次都是先偏向锁然后过渡到轻量锁，而偏向锁能用到的又很少。\n\n**解决方案**: 可以使用`-XX:-UseBiasedLocking=false`禁用偏向锁。\n\n#### 矛盾5:\n\n**A**: 代码中JDK原生或其他的工具方法中带有大量的加锁。\n\n**B**: 实际过程中，很有可能很多加锁是无效的(如局部变量作为锁，由于每次都是新对象新锁，所以没有意义)。\n\n**解决方法**: 引入锁削除(虚拟机即时编译器(JIT)运行时，依据逃逸分析的数据检测到不可能存在竞争的锁，就自动将该锁消除)。\n\n#### 矛盾6:\n\n**A**: 为了让锁颗粒度更小，或者原生方法中带有锁，很有可能在一个频繁执行(如循环)中对同一对象加锁。\n\n**B**: 由于在频繁的执行中，反复的加锁和解锁，这种频繁的锁竞争带来很大的性能损耗。\n\n**解决方法**: 引入锁膨胀(会自动将锁的范围拓展到操作序列(如循环)外, 可以理解为将一些反复的锁合为一个锁放在它们外部)。\n\n\n## II. 基本原理\n\nJVM会为每个对象分配一个`monitor`，而同时只能有一个线程可以获得该对象`monitor`的所有权。在线程进入时通过`monitorenter`尝试取得对象`monitor`所有权，退出时通过`monitorexit`释放对象`monitor`所有权。\n\n> `monitorenter`与`monitorexit`在编译后对称插入代码。\n\n- `monitorenter`: 被插入到同步代码块之前。\n- `monitorexit`: 被插到同步代码块之后或异常处。\n\n\n#### 1. 相关数据存在哪里?\n\n对象头。\n\n##### 对象头结构:\n> 数组会多1字宽(32位: 4字节)来存储数组长度\n\n长度 | 内容 | 说明\n-|-|-\n1字宽 | Mark Word | 存储对象的hashCode或锁信息等\n1字宽 | Class Metadata Address | 存储对象类型数据的指针\n1字宽 | Array length | 数组长度(如果是数组对象)\n\n而对象的锁，一般只和`Mark Word`有关。\n\n#### 2. 各个锁的关系以及升级情况?\n\n> 锁升级是单向的: 无锁 -> 偏向锁 -> 轻量级锁 -> 重量级锁\n\n![](/img/java_synchronized.png)\n\n## III. 多线程下数据同步\n\n> 这类锁/关键字主要是为了维护数据在高并发情况下的一致性/稳定性。\n\n### 1. 数据库中的锁\n\n#### 共享锁(Share Lock)\n\n> 又称为读锁\n\n多个线程可并发的获得某个数据的共享锁锁，并行读取数据。在数据存在共享锁期间，不能修改数据，不能加排他锁。\n\n> 如MySQL中，在查询语句最后加上`LOCK IN SHARE MODE`。\n\n#### 排他锁(eXclusive Lock)\n\n> 又称为写锁\n\n同能只能有一个线程可以获得某个数据的排他锁。在线程获取排他锁后，该线程可对数据读写，但是其他线程不能对该数据添加任何锁。\n\n### 2. `volatile`\n\n> 如果一个共享变量被声明成`volatile`，java线程内存模型将会确保所有线程看到这个变量的值是一致的。\n\n- **基本策略**: 写操作时，会有`Lock`前缀指定，处理器会立马将修改直接写回系统内存，并且其他处理器会将该值在其上的高速缓存标为无效。\n- **可能带来的性能消耗**: 写操作实时写回内存，锁总线/锁内存。\n- **优势**: 一些场景上相比`synchronized`，执行成本更低(不会引起线程上下文切换以及调度)，使用更方便。\n\n---\n\n本文已经发布到JackBlog公众号，可请直接访问: [Java Synchronized机制与常见的多线程抢占 - JacksBlog](https://mp.weixin.qq.com/s?__biz=MzIyMjQxMzAzOA==&mid=2247483673&idx=1&sn=cc20b1149e9ffed649dd00d8737e6a08)\n\n---\n\n- [Java的多线程机制系列：(三）synchronized的同步原理](http://www.cnblogs.com/mengheng/p/3491304.html)\n- [再说 lock-free 编程](http://www.cnblogs.com/lucifer1982/archive/2009/04/08/1431992.html)\n- [聊聊并发（一）——深入分析Volatile的实现原理](http://www.infoq.com/cn/articles/ftf-java-volatile)\n- [聊聊并发（二）——Java SE1.6中的Synchronized](http://www.infoq.com/cn/articles/java-se-16-synchronized)\n- [深入JVM锁机制1-synchronized](http://blog.csdn.net/chen77716/article/details/6618779)\n- [虚拟机中的锁优化简介（适应性自旋/锁粗化/锁削除/轻量级锁/偏向锁）](http://icyfenix.iteye.com/blog/1018932)\n- [Java偏向锁实现原理(Biased Locking)](http://my.oschina.net/u/140462/blog/490897)\n- [JVM内部细节之二：偏向锁（Biased Locking）](http://www.cnblogs.com/javaminer/p/3892288.html)\n- [java锁优化](http://luojinping.com/2015/07/09/java锁优化/)\n- [Java锁Synchronized之偏向锁](http://blog.sina.com.cn/s/blog_c038e9930102v2hs.html)\n- [MySQL中的共享锁与排他锁](http://www.hollischuang.com/archives/923)\n\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2015/11/13/java_synchronized","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66ix002u95bunbnw3e8i","content":"<blockquote>\n<p>Java中锁的控制可以参看这篇文章: <a href=\"http://blog.dreamtobe.cn/2015/03/25/Java多线程抢占/\">Java多线程抢占</a>。</p>\n</blockquote>\n<h2 id=\"I-原末\"><a href=\"#I-原末\" class=\"headerlink\" title=\"I. 原末\"></a>I. 原末</h2><h4 id=\"矛盾1\"><a href=\"#矛盾1\" class=\"headerlink\" title=\"矛盾1:\"></a>矛盾1:</h4><p><strong>A</strong>: 重量级锁中的阻塞(挂起线程/恢复线程): 需要转入内核态中完成，有很大的性能影响。</p>\n<p><strong>B</strong>: 锁大多数情况都是在很短的时间执行完成。</p>\n<p><strong>解决方案</strong>: 引入轻量锁(通过自旋来完成锁竞争)。</p>\n<a id=\"more\"></a>\n<h4 id=\"矛盾2\"><a href=\"#矛盾2\" class=\"headerlink\" title=\"矛盾2:\"></a>矛盾2:</h4><p><strong>A</strong>: 轻量级锁中的自旋: 占用CPU时间，增加CPU的消耗(因此在多核处理器上优势更明显)。</p>\n<p><strong>B</strong>: 如果某锁始终是被长期占用，导致自旋如果没有把握好，白白浪费CPU资源。</p>\n<p><strong>解决方案</strong>: JDK5中引入默认自旋次数为10(用户可以通过<code>-XX:PreBlockSpin</code>进行修改)， JDK6中更是引入了自适应自旋（简单来说如果自旋成功概率高，就会允许等待更长的时间（如100次自旋），如果失败率很高，那很有可能就不做自旋，直接升级为重量级锁，实际场景中，HotSpot认为最佳时间应该是一个线程上下文切换的时间，而是否自旋以及自旋次数更是与对CPUs的负载、CPUs是否处于节电模式等息息相关的)。</p>\n<h4 id=\"矛盾3\"><a href=\"#矛盾3\" class=\"headerlink\" title=\"矛盾3:\"></a>矛盾3:</h4><p><strong>A</strong>: 无论是轻量级锁还是重量级锁: 在进入与退出时都要通过CAS修改对象头中的<code>Mark Word</code>来进行加锁与释放锁。</p>\n<p><strong>B</strong>: 在一些情况下总是同一线程多次获得锁，此时第二次再重新做CAS修改对象头中的<code>Mark Word</code>这样的操作，有些多余。</p>\n<p><strong>解决方案</strong>: JDK6引入偏向锁(首次需要通过CAS修改对象头中的<code>Mark Word</code>，之后该线程再进入只需要比较对象头中的<code>Mark Word</code>的Thread ID是否与当前的一致，如果一致说明已经取得锁，就不用再CAS了)。</p>\n<h4 id=\"矛盾4\"><a href=\"#矛盾4\" class=\"headerlink\" title=\"矛盾4:\"></a>矛盾4:</h4><p><strong>A</strong>: 项目中代码块中可能绝大情况下都是多线程访问。</p>\n<p><strong>B</strong>: 每次都是先偏向锁然后过渡到轻量锁，而偏向锁能用到的又很少。</p>\n<p><strong>解决方案</strong>: 可以使用<code>-XX:-UseBiasedLocking=false</code>禁用偏向锁。</p>\n<h4 id=\"矛盾5\"><a href=\"#矛盾5\" class=\"headerlink\" title=\"矛盾5:\"></a>矛盾5:</h4><p><strong>A</strong>: 代码中JDK原生或其他的工具方法中带有大量的加锁。</p>\n<p><strong>B</strong>: 实际过程中，很有可能很多加锁是无效的(如局部变量作为锁，由于每次都是新对象新锁，所以没有意义)。</p>\n<p><strong>解决方法</strong>: 引入锁削除(虚拟机即时编译器(JIT)运行时，依据逃逸分析的数据检测到不可能存在竞争的锁，就自动将该锁消除)。</p>\n<h4 id=\"矛盾6\"><a href=\"#矛盾6\" class=\"headerlink\" title=\"矛盾6:\"></a>矛盾6:</h4><p><strong>A</strong>: 为了让锁颗粒度更小，或者原生方法中带有锁，很有可能在一个频繁执行(如循环)中对同一对象加锁。</p>\n<p><strong>B</strong>: 由于在频繁的执行中，反复的加锁和解锁，这种频繁的锁竞争带来很大的性能损耗。</p>\n<p><strong>解决方法</strong>: 引入锁膨胀(会自动将锁的范围拓展到操作序列(如循环)外, 可以理解为将一些反复的锁合为一个锁放在它们外部)。</p>\n<h2 id=\"II-基本原理\"><a href=\"#II-基本原理\" class=\"headerlink\" title=\"II. 基本原理\"></a>II. 基本原理</h2><p>JVM会为每个对象分配一个<code>monitor</code>，而同时只能有一个线程可以获得该对象<code>monitor</code>的所有权。在线程进入时通过<code>monitorenter</code>尝试取得对象<code>monitor</code>所有权，退出时通过<code>monitorexit</code>释放对象<code>monitor</code>所有权。</p>\n<blockquote>\n<p><code>monitorenter</code>与<code>monitorexit</code>在编译后对称插入代码。</p>\n</blockquote>\n<ul>\n<li><code>monitorenter</code>: 被插入到同步代码块之前。</li>\n<li><code>monitorexit</code>: 被插到同步代码块之后或异常处。</li>\n</ul>\n<h4 id=\"1-相关数据存在哪里\"><a href=\"#1-相关数据存在哪里\" class=\"headerlink\" title=\"1. 相关数据存在哪里?\"></a>1. 相关数据存在哪里?</h4><p>对象头。</p>\n<h5 id=\"对象头结构\"><a href=\"#对象头结构\" class=\"headerlink\" title=\"对象头结构:\"></a>对象头结构:</h5><blockquote>\n<p>数组会多1字宽(32位: 4字节)来存储数组长度</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>长度</th>\n<th>内容</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1字宽</td>\n<td>Mark Word</td>\n<td>存储对象的hashCode或锁信息等</td>\n</tr>\n<tr>\n<td>1字宽</td>\n<td>Class Metadata Address</td>\n<td>存储对象类型数据的指针</td>\n</tr>\n<tr>\n<td>1字宽</td>\n<td>Array length</td>\n<td>数组长度(如果是数组对象)</td>\n</tr>\n</tbody>\n</table>\n<p>而对象的锁，一般只和<code>Mark Word</code>有关。</p>\n<h4 id=\"2-各个锁的关系以及升级情况\"><a href=\"#2-各个锁的关系以及升级情况\" class=\"headerlink\" title=\"2. 各个锁的关系以及升级情况?\"></a>2. 各个锁的关系以及升级情况?</h4><blockquote>\n<p>锁升级是单向的: 无锁 -&gt; 偏向锁 -&gt; 轻量级锁 -&gt; 重量级锁</p>\n</blockquote>\n<p><img src=\"/img/java_synchronized.png\" alt=\"\"></p>\n<h2 id=\"III-多线程下数据同步\"><a href=\"#III-多线程下数据同步\" class=\"headerlink\" title=\"III. 多线程下数据同步\"></a>III. 多线程下数据同步</h2><blockquote>\n<p>这类锁/关键字主要是为了维护数据在高并发情况下的一致性/稳定性。</p>\n</blockquote>\n<h3 id=\"1-数据库中的锁\"><a href=\"#1-数据库中的锁\" class=\"headerlink\" title=\"1. 数据库中的锁\"></a>1. 数据库中的锁</h3><h4 id=\"共享锁-Share-Lock\"><a href=\"#共享锁-Share-Lock\" class=\"headerlink\" title=\"共享锁(Share Lock)\"></a>共享锁(Share Lock)</h4><blockquote>\n<p>又称为读锁</p>\n</blockquote>\n<p>多个线程可并发的获得某个数据的共享锁锁，并行读取数据。在数据存在共享锁期间，不能修改数据，不能加排他锁。</p>\n<blockquote>\n<p>如MySQL中，在查询语句最后加上<code>LOCK IN SHARE MODE</code>。</p>\n</blockquote>\n<h4 id=\"排他锁-eXclusive-Lock\"><a href=\"#排他锁-eXclusive-Lock\" class=\"headerlink\" title=\"排他锁(eXclusive Lock)\"></a>排他锁(eXclusive Lock)</h4><blockquote>\n<p>又称为写锁</p>\n</blockquote>\n<p>同能只能有一个线程可以获得某个数据的排他锁。在线程获取排他锁后，该线程可对数据读写，但是其他线程不能对该数据添加任何锁。</p>\n<h3 id=\"2-volatile\"><a href=\"#2-volatile\" class=\"headerlink\" title=\"2. volatile\"></a>2. <code>volatile</code></h3><blockquote>\n<p>如果一个共享变量被声明成<code>volatile</code>，java线程内存模型将会确保所有线程看到这个变量的值是一致的。</p>\n</blockquote>\n<ul>\n<li><strong>基本策略</strong>: 写操作时，会有<code>Lock</code>前缀指定，处理器会立马将修改直接写回系统内存，并且其他处理器会将该值在其上的高速缓存标为无效。</li>\n<li><strong>可能带来的性能消耗</strong>: 写操作实时写回内存，锁总线/锁内存。</li>\n<li><strong>优势</strong>: 一些场景上相比<code>synchronized</code>，执行成本更低(不会引起线程上下文切换以及调度)，使用更方便。</li>\n</ul>\n<hr>\n<p>本文已经发布到JackBlog公众号，可请直接访问: <a href=\"https://mp.weixin.qq.com/s?__biz=MzIyMjQxMzAzOA==&amp;mid=2247483673&amp;idx=1&amp;sn=cc20b1149e9ffed649dd00d8737e6a08\" target=\"_blank\" rel=\"external\">Java Synchronized机制与常见的多线程抢占 - JacksBlog</a></p>\n<hr>\n<ul>\n<li><a href=\"http://www.cnblogs.com/mengheng/p/3491304.html\" target=\"_blank\" rel=\"external\">Java的多线程机制系列：(三）synchronized的同步原理</a></li>\n<li><a href=\"http://www.cnblogs.com/lucifer1982/archive/2009/04/08/1431992.html\" target=\"_blank\" rel=\"external\">再说 lock-free 编程</a></li>\n<li><a href=\"http://www.infoq.com/cn/articles/ftf-java-volatile\" target=\"_blank\" rel=\"external\">聊聊并发（一）——深入分析Volatile的实现原理</a></li>\n<li><a href=\"http://www.infoq.com/cn/articles/java-se-16-synchronized\" target=\"_blank\" rel=\"external\">聊聊并发（二）——Java SE1.6中的Synchronized</a></li>\n<li><a href=\"http://blog.csdn.net/chen77716/article/details/6618779\" target=\"_blank\" rel=\"external\">深入JVM锁机制1-synchronized</a></li>\n<li><a href=\"http://icyfenix.iteye.com/blog/1018932\" target=\"_blank\" rel=\"external\">虚拟机中的锁优化简介（适应性自旋/锁粗化/锁削除/轻量级锁/偏向锁）</a></li>\n<li><a href=\"http://my.oschina.net/u/140462/blog/490897\" target=\"_blank\" rel=\"external\">Java偏向锁实现原理(Biased Locking)</a></li>\n<li><a href=\"http://www.cnblogs.com/javaminer/p/3892288.html\" target=\"_blank\" rel=\"external\">JVM内部细节之二：偏向锁（Biased Locking）</a></li>\n<li><a href=\"http://luojinping.com/2015/07/09/java锁优化/\" target=\"_blank\" rel=\"external\">java锁优化</a></li>\n<li><a href=\"http://blog.sina.com.cn/s/blog_c038e9930102v2hs.html\" target=\"_blank\" rel=\"external\">Java锁Synchronized之偏向锁</a></li>\n<li><a href=\"http://www.hollischuang.com/archives/923\" target=\"_blank\" rel=\"external\">MySQL中的共享锁与排他锁</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>Java中锁的控制可以参看这篇文章: <a href=\"http://blog.dreamtobe.cn/2015/03/25/Java多线程抢占/\">Java多线程抢占</a>。</p>\n</blockquote>\n<h2 id=\"I-原末\"><a href=\"#I-原末\" class=\"headerlink\" title=\"I. 原末\"></a>I. 原末</h2><h4 id=\"矛盾1\"><a href=\"#矛盾1\" class=\"headerlink\" title=\"矛盾1:\"></a>矛盾1:</h4><p><strong>A</strong>: 重量级锁中的阻塞(挂起线程/恢复线程): 需要转入内核态中完成，有很大的性能影响。</p>\n<p><strong>B</strong>: 锁大多数情况都是在很短的时间执行完成。</p>\n<p><strong>解决方案</strong>: 引入轻量锁(通过自旋来完成锁竞争)。</p>","more":"<h4 id=\"矛盾2\"><a href=\"#矛盾2\" class=\"headerlink\" title=\"矛盾2:\"></a>矛盾2:</h4><p><strong>A</strong>: 轻量级锁中的自旋: 占用CPU时间，增加CPU的消耗(因此在多核处理器上优势更明显)。</p>\n<p><strong>B</strong>: 如果某锁始终是被长期占用，导致自旋如果没有把握好，白白浪费CPU资源。</p>\n<p><strong>解决方案</strong>: JDK5中引入默认自旋次数为10(用户可以通过<code>-XX:PreBlockSpin</code>进行修改)， JDK6中更是引入了自适应自旋（简单来说如果自旋成功概率高，就会允许等待更长的时间（如100次自旋），如果失败率很高，那很有可能就不做自旋，直接升级为重量级锁，实际场景中，HotSpot认为最佳时间应该是一个线程上下文切换的时间，而是否自旋以及自旋次数更是与对CPUs的负载、CPUs是否处于节电模式等息息相关的)。</p>\n<h4 id=\"矛盾3\"><a href=\"#矛盾3\" class=\"headerlink\" title=\"矛盾3:\"></a>矛盾3:</h4><p><strong>A</strong>: 无论是轻量级锁还是重量级锁: 在进入与退出时都要通过CAS修改对象头中的<code>Mark Word</code>来进行加锁与释放锁。</p>\n<p><strong>B</strong>: 在一些情况下总是同一线程多次获得锁，此时第二次再重新做CAS修改对象头中的<code>Mark Word</code>这样的操作，有些多余。</p>\n<p><strong>解决方案</strong>: JDK6引入偏向锁(首次需要通过CAS修改对象头中的<code>Mark Word</code>，之后该线程再进入只需要比较对象头中的<code>Mark Word</code>的Thread ID是否与当前的一致，如果一致说明已经取得锁，就不用再CAS了)。</p>\n<h4 id=\"矛盾4\"><a href=\"#矛盾4\" class=\"headerlink\" title=\"矛盾4:\"></a>矛盾4:</h4><p><strong>A</strong>: 项目中代码块中可能绝大情况下都是多线程访问。</p>\n<p><strong>B</strong>: 每次都是先偏向锁然后过渡到轻量锁，而偏向锁能用到的又很少。</p>\n<p><strong>解决方案</strong>: 可以使用<code>-XX:-UseBiasedLocking=false</code>禁用偏向锁。</p>\n<h4 id=\"矛盾5\"><a href=\"#矛盾5\" class=\"headerlink\" title=\"矛盾5:\"></a>矛盾5:</h4><p><strong>A</strong>: 代码中JDK原生或其他的工具方法中带有大量的加锁。</p>\n<p><strong>B</strong>: 实际过程中，很有可能很多加锁是无效的(如局部变量作为锁，由于每次都是新对象新锁，所以没有意义)。</p>\n<p><strong>解决方法</strong>: 引入锁削除(虚拟机即时编译器(JIT)运行时，依据逃逸分析的数据检测到不可能存在竞争的锁，就自动将该锁消除)。</p>\n<h4 id=\"矛盾6\"><a href=\"#矛盾6\" class=\"headerlink\" title=\"矛盾6:\"></a>矛盾6:</h4><p><strong>A</strong>: 为了让锁颗粒度更小，或者原生方法中带有锁，很有可能在一个频繁执行(如循环)中对同一对象加锁。</p>\n<p><strong>B</strong>: 由于在频繁的执行中，反复的加锁和解锁，这种频繁的锁竞争带来很大的性能损耗。</p>\n<p><strong>解决方法</strong>: 引入锁膨胀(会自动将锁的范围拓展到操作序列(如循环)外, 可以理解为将一些反复的锁合为一个锁放在它们外部)。</p>\n<h2 id=\"II-基本原理\"><a href=\"#II-基本原理\" class=\"headerlink\" title=\"II. 基本原理\"></a>II. 基本原理</h2><p>JVM会为每个对象分配一个<code>monitor</code>，而同时只能有一个线程可以获得该对象<code>monitor</code>的所有权。在线程进入时通过<code>monitorenter</code>尝试取得对象<code>monitor</code>所有权，退出时通过<code>monitorexit</code>释放对象<code>monitor</code>所有权。</p>\n<blockquote>\n<p><code>monitorenter</code>与<code>monitorexit</code>在编译后对称插入代码。</p>\n</blockquote>\n<ul>\n<li><code>monitorenter</code>: 被插入到同步代码块之前。</li>\n<li><code>monitorexit</code>: 被插到同步代码块之后或异常处。</li>\n</ul>\n<h4 id=\"1-相关数据存在哪里\"><a href=\"#1-相关数据存在哪里\" class=\"headerlink\" title=\"1. 相关数据存在哪里?\"></a>1. 相关数据存在哪里?</h4><p>对象头。</p>\n<h5 id=\"对象头结构\"><a href=\"#对象头结构\" class=\"headerlink\" title=\"对象头结构:\"></a>对象头结构:</h5><blockquote>\n<p>数组会多1字宽(32位: 4字节)来存储数组长度</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>长度</th>\n<th>内容</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1字宽</td>\n<td>Mark Word</td>\n<td>存储对象的hashCode或锁信息等</td>\n</tr>\n<tr>\n<td>1字宽</td>\n<td>Class Metadata Address</td>\n<td>存储对象类型数据的指针</td>\n</tr>\n<tr>\n<td>1字宽</td>\n<td>Array length</td>\n<td>数组长度(如果是数组对象)</td>\n</tr>\n</tbody>\n</table>\n<p>而对象的锁，一般只和<code>Mark Word</code>有关。</p>\n<h4 id=\"2-各个锁的关系以及升级情况\"><a href=\"#2-各个锁的关系以及升级情况\" class=\"headerlink\" title=\"2. 各个锁的关系以及升级情况?\"></a>2. 各个锁的关系以及升级情况?</h4><blockquote>\n<p>锁升级是单向的: 无锁 -&gt; 偏向锁 -&gt; 轻量级锁 -&gt; 重量级锁</p>\n</blockquote>\n<p><img src=\"/img/java_synchronized.png\" alt=\"\"></p>\n<h2 id=\"III-多线程下数据同步\"><a href=\"#III-多线程下数据同步\" class=\"headerlink\" title=\"III. 多线程下数据同步\"></a>III. 多线程下数据同步</h2><blockquote>\n<p>这类锁/关键字主要是为了维护数据在高并发情况下的一致性/稳定性。</p>\n</blockquote>\n<h3 id=\"1-数据库中的锁\"><a href=\"#1-数据库中的锁\" class=\"headerlink\" title=\"1. 数据库中的锁\"></a>1. 数据库中的锁</h3><h4 id=\"共享锁-Share-Lock\"><a href=\"#共享锁-Share-Lock\" class=\"headerlink\" title=\"共享锁(Share Lock)\"></a>共享锁(Share Lock)</h4><blockquote>\n<p>又称为读锁</p>\n</blockquote>\n<p>多个线程可并发的获得某个数据的共享锁锁，并行读取数据。在数据存在共享锁期间，不能修改数据，不能加排他锁。</p>\n<blockquote>\n<p>如MySQL中，在查询语句最后加上<code>LOCK IN SHARE MODE</code>。</p>\n</blockquote>\n<h4 id=\"排他锁-eXclusive-Lock\"><a href=\"#排他锁-eXclusive-Lock\" class=\"headerlink\" title=\"排他锁(eXclusive Lock)\"></a>排他锁(eXclusive Lock)</h4><blockquote>\n<p>又称为写锁</p>\n</blockquote>\n<p>同能只能有一个线程可以获得某个数据的排他锁。在线程获取排他锁后，该线程可对数据读写，但是其他线程不能对该数据添加任何锁。</p>\n<h3 id=\"2-volatile\"><a href=\"#2-volatile\" class=\"headerlink\" title=\"2. volatile\"></a>2. <code>volatile</code></h3><blockquote>\n<p>如果一个共享变量被声明成<code>volatile</code>，java线程内存模型将会确保所有线程看到这个变量的值是一致的。</p>\n</blockquote>\n<ul>\n<li><strong>基本策略</strong>: 写操作时，会有<code>Lock</code>前缀指定，处理器会立马将修改直接写回系统内存，并且其他处理器会将该值在其上的高速缓存标为无效。</li>\n<li><strong>可能带来的性能消耗</strong>: 写操作实时写回内存，锁总线/锁内存。</li>\n<li><strong>优势</strong>: 一些场景上相比<code>synchronized</code>，执行成本更低(不会引起线程上下文切换以及调度)，使用更方便。</li>\n</ul>\n<hr>\n<p>本文已经发布到JackBlog公众号，可请直接访问: <a href=\"https://mp.weixin.qq.com/s?__biz=MzIyMjQxMzAzOA==&amp;mid=2247483673&amp;idx=1&amp;sn=cc20b1149e9ffed649dd00d8737e6a08\">Java Synchronized机制与常见的多线程抢占 - JacksBlog</a></p>\n<hr>\n<ul>\n<li><a href=\"http://www.cnblogs.com/mengheng/p/3491304.html\">Java的多线程机制系列：(三）synchronized的同步原理</a></li>\n<li><a href=\"http://www.cnblogs.com/lucifer1982/archive/2009/04/08/1431992.html\">再说 lock-free 编程</a></li>\n<li><a href=\"http://www.infoq.com/cn/articles/ftf-java-volatile\">聊聊并发（一）——深入分析Volatile的实现原理</a></li>\n<li><a href=\"http://www.infoq.com/cn/articles/java-se-16-synchronized\">聊聊并发（二）——Java SE1.6中的Synchronized</a></li>\n<li><a href=\"http://blog.csdn.net/chen77716/article/details/6618779\">深入JVM锁机制1-synchronized</a></li>\n<li><a href=\"http://icyfenix.iteye.com/blog/1018932\">虚拟机中的锁优化简介（适应性自旋/锁粗化/锁削除/轻量级锁/偏向锁）</a></li>\n<li><a href=\"http://my.oschina.net/u/140462/blog/490897\">Java偏向锁实现原理(Biased Locking)</a></li>\n<li><a href=\"http://www.cnblogs.com/javaminer/p/3892288.html\">JVM内部细节之二：偏向锁（Biased Locking）</a></li>\n<li><a href=\"http://luojinping.com/2015/07/09/java锁优化/\">java锁优化</a></li>\n<li><a href=\"http://blog.sina.com.cn/s/blog_c038e9930102v2hs.html\">Java锁Synchronized之偏向锁</a></li>\n<li><a href=\"http://www.hollischuang.com/archives/923\">MySQL中的共享锁与排他锁</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"Android键盘面板冲突 布局闪动处理方案","date":"2015-09-01T05:35:03.000Z","_content":"\n> 已开源 [JKeyboardPanelSwitch](https://github.com/Jacksgong/JKeyboardPanelSwitch)\n\n- [版本迭代日志](https://github.com/Jacksgong/JKeyboardPanelSwitch/blob/master/CHANGELOG.md)\n- [中文说明文档](https://github.com/Jacksgong/JKeyboardPanelSwitch/blob/master/README.md)\n- [问题讨论区](https://github.com/Jacksgong/JKeyboardPanelSwitch/issues)\n\n<!-- more -->\n\n---\n\n> 起源，之前在微信工作的时候，为了给用户带来更好的基础体验，做了很多尝试，踩了很多输入法的坑，特别是动态调整键盘高度，二级页面是透明背景，魅族早期的Smart bar等, 后来逐一完善了，考虑到拥抱开源，看业界还是有很多应用存在类似问题。就有了这个repo\n\n---\n\n> 之前有写过一篇核心思想: [Switching between the panel and the keyboard in Wechat](http://blog.dreamtobe.cn/2015/02/07/Switching-between-the-panel-and-the-keyboard/)。\n\n## 简述所解决问题\n\n当键盘与面板切换的时候，由于在不同的Window上面，布局发生闪动。\n\n## 特征\n\n- 覆盖正常主题。\n- 覆盖透明主题。\n- 覆盖透明状态栏主题。\n- 覆盖`Activity`、`FragmentActivity`、`AppCompatActivity` 布局情况。\n\n## Demo\n\n![](/img/keyboard_pannel_switch-demo_snapshot.jpg)\n\n![](/img/keyboard_pannel_switch-non-fullscreen_resolved.gif)![](/img/keyboard_pannel_switch-fullscreen_resolved.gif)\n![](/img/keyboard_pannel_switch-adjust_resolved.gif)![](/img/keyboard_pannel_switch-adjust_unresolved.gif)\n","source":"_posts/keyboard-panel-switch.md","raw":"title: Android键盘面板冲突 布局闪动处理方案\ndate: 2015-09-01 13:35:03\npermalink: 2015/09/01/keyboard-panel-switch\ntags:\n- 优化\n- Android\n- 键盘\n- 面板\n- 闪动\n- 布局\n- 项目\n\n---\n\n> 已开源 [JKeyboardPanelSwitch](https://github.com/Jacksgong/JKeyboardPanelSwitch)\n\n- [版本迭代日志](https://github.com/Jacksgong/JKeyboardPanelSwitch/blob/master/CHANGELOG.md)\n- [中文说明文档](https://github.com/Jacksgong/JKeyboardPanelSwitch/blob/master/README.md)\n- [问题讨论区](https://github.com/Jacksgong/JKeyboardPanelSwitch/issues)\n\n<!-- more -->\n\n---\n\n> 起源，之前在微信工作的时候，为了给用户带来更好的基础体验，做了很多尝试，踩了很多输入法的坑，特别是动态调整键盘高度，二级页面是透明背景，魅族早期的Smart bar等, 后来逐一完善了，考虑到拥抱开源，看业界还是有很多应用存在类似问题。就有了这个repo\n\n---\n\n> 之前有写过一篇核心思想: [Switching between the panel and the keyboard in Wechat](http://blog.dreamtobe.cn/2015/02/07/Switching-between-the-panel-and-the-keyboard/)。\n\n## 简述所解决问题\n\n当键盘与面板切换的时候，由于在不同的Window上面，布局发生闪动。\n\n## 特征\n\n- 覆盖正常主题。\n- 覆盖透明主题。\n- 覆盖透明状态栏主题。\n- 覆盖`Activity`、`FragmentActivity`、`AppCompatActivity` 布局情况。\n\n## Demo\n\n![](/img/keyboard_pannel_switch-demo_snapshot.jpg)\n\n![](/img/keyboard_pannel_switch-non-fullscreen_resolved.gif)![](/img/keyboard_pannel_switch-fullscreen_resolved.gif)\n![](/img/keyboard_pannel_switch-adjust_resolved.gif)![](/img/keyboard_pannel_switch-adjust_unresolved.gif)\n","slug":"2015/09/01/keyboard-panel-switch","published":1,"updated":"2017-01-26T14:52:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66ix002w95buz2jsxi2z","content":"<blockquote>\n<p>已开源 <a href=\"https://github.com/Jacksgong/JKeyboardPanelSwitch\" target=\"_blank\" rel=\"external\">JKeyboardPanelSwitch</a></p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/Jacksgong/JKeyboardPanelSwitch/blob/master/CHANGELOG.md\" target=\"_blank\" rel=\"external\">版本迭代日志</a></li>\n<li><a href=\"https://github.com/Jacksgong/JKeyboardPanelSwitch/blob/master/README.md\" target=\"_blank\" rel=\"external\">中文说明文档</a></li>\n<li><a href=\"https://github.com/Jacksgong/JKeyboardPanelSwitch/issues\" target=\"_blank\" rel=\"external\">问题讨论区</a></li>\n</ul>\n<a id=\"more\"></a>\n<hr>\n<blockquote>\n<p>起源，之前在微信工作的时候，为了给用户带来更好的基础体验，做了很多尝试，踩了很多输入法的坑，特别是动态调整键盘高度，二级页面是透明背景，魅族早期的Smart bar等, 后来逐一完善了，考虑到拥抱开源，看业界还是有很多应用存在类似问题。就有了这个repo</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>之前有写过一篇核心思想: <a href=\"http://blog.dreamtobe.cn/2015/02/07/Switching-between-the-panel-and-the-keyboard/\">Switching between the panel and the keyboard in Wechat</a>。</p>\n</blockquote>\n<h2 id=\"简述所解决问题\"><a href=\"#简述所解决问题\" class=\"headerlink\" title=\"简述所解决问题\"></a>简述所解决问题</h2><p>当键盘与面板切换的时候，由于在不同的Window上面，布局发生闪动。</p>\n<h2 id=\"特征\"><a href=\"#特征\" class=\"headerlink\" title=\"特征\"></a>特征</h2><ul>\n<li>覆盖正常主题。</li>\n<li>覆盖透明主题。</li>\n<li>覆盖透明状态栏主题。</li>\n<li>覆盖<code>Activity</code>、<code>FragmentActivity</code>、<code>AppCompatActivity</code> 布局情况。</li>\n</ul>\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><p><img src=\"/img/keyboard_pannel_switch-demo_snapshot.jpg\" alt=\"\"></p>\n<p><img src=\"/img/keyboard_pannel_switch-non-fullscreen_resolved.gif\" alt=\"\"><img src=\"/img/keyboard_pannel_switch-fullscreen_resolved.gif\" alt=\"\"><br><img src=\"/img/keyboard_pannel_switch-adjust_resolved.gif\" alt=\"\"><img src=\"/img/keyboard_pannel_switch-adjust_unresolved.gif\" alt=\"\"></p>\n","excerpt":"<blockquote>\n<p>已开源 <a href=\"https://github.com/Jacksgong/JKeyboardPanelSwitch\">JKeyboardPanelSwitch</a></p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/Jacksgong/JKeyboardPanelSwitch/blob/master/CHANGELOG.md\">版本迭代日志</a></li>\n<li><a href=\"https://github.com/Jacksgong/JKeyboardPanelSwitch/blob/master/README.md\">中文说明文档</a></li>\n<li><a href=\"https://github.com/Jacksgong/JKeyboardPanelSwitch/issues\">问题讨论区</a></li>\n</ul>","more":"<hr>\n<blockquote>\n<p>起源，之前在微信工作的时候，为了给用户带来更好的基础体验，做了很多尝试，踩了很多输入法的坑，特别是动态调整键盘高度，二级页面是透明背景，魅族早期的Smart bar等, 后来逐一完善了，考虑到拥抱开源，看业界还是有很多应用存在类似问题。就有了这个repo</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>之前有写过一篇核心思想: <a href=\"http://blog.dreamtobe.cn/2015/02/07/Switching-between-the-panel-and-the-keyboard/\">Switching between the panel and the keyboard in Wechat</a>。</p>\n</blockquote>\n<h2 id=\"简述所解决问题\"><a href=\"#简述所解决问题\" class=\"headerlink\" title=\"简述所解决问题\"></a>简述所解决问题</h2><p>当键盘与面板切换的时候，由于在不同的Window上面，布局发生闪动。</p>\n<h2 id=\"特征\"><a href=\"#特征\" class=\"headerlink\" title=\"特征\"></a>特征</h2><ul>\n<li>覆盖正常主题。</li>\n<li>覆盖透明主题。</li>\n<li>覆盖透明状态栏主题。</li>\n<li>覆盖<code>Activity</code>、<code>FragmentActivity</code>、<code>AppCompatActivity</code> 布局情况。</li>\n</ul>\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><p><img src=\"/img/keyboard_pannel_switch-demo_snapshot.jpg\" alt=\"\"></p>\n<p><img src=\"/img/keyboard_pannel_switch-non-fullscreen_resolved.gif\" alt=\"\"><img src=\"/img/keyboard_pannel_switch-fullscreen_resolved.gif\" alt=\"\"><br><img src=\"/img/keyboard_pannel_switch-adjust_resolved.gif\" alt=\"\"><img src=\"/img/keyboard_pannel_switch-adjust_unresolved.gif\" alt=\"\"></p>"},{"title":"开源协议","date":"2016-01-02T17:48:03.000Z","_content":"\n目前一共有近60种开源协议: [Open Source Initiative](http://opensource.org/licenses/alphabetical)\n\n常见的协议:BSD、GPL、LGPL、MIT都是OSI批准的协议\n\n<!-- more -->\n\n## MIT\n\n#### 使用者权限:\n\n1. 自由使用\n2. 修改源代码\n3. 修改后开源\n4. 闭源发布\n\n#### 约束:\n\n1. 源码/闭源 都需要在发行版里包含原许可协议申明\n\n---\n\n## BSD\n\n> original BSD license、FreeBSD license、Original BSD license\n\n> 估计代码共享，但需要尊重代码作者的著作权\n\n#### 使用者权限:\n\n1. 自由使用\n2. 修改源代码\n3. 修改后开源\n4. 闭源发布\n\n#### 约束:\n\n> 修改了使用BSD协议的代码 || 以BSD协议的源代码作为基础\n\n1. 如果包含源代码，需要源代码带有`原来代码中的BSD协议`\n2. 如果都是二进制类库/软件(闭源)，需要在文档和版权声明中包含`原来代码中的BSD协议`\n3. 不可用开源代码的 `作者/机构名字`和原来`产品的名字`做市场推广\n\n---\n\n## Apache Licence 2.0\n\n> Apache License, Version 2.0、Apache License, Version 1.1、Apache License, Version 1.0\n\n> 鼓励代码共享，尊重原作者著作权\n\n> 是著名非盈利开源组织Apache采用的协议\n\n#### 使用者权限:\n\n1. 自由使用\n2. 修改源代码\n3. 修改后开源\n4. 闭源发布\n\n#### 约束:\n\n1. 如果包含源代码，需要包含Apache Licence\n2. 如果修改了代码/衍生代码，需要在被修改的文件/衍生的代码中带上`原来代码中的协议`\n3. 如果发布的产品(闭源)包含Notice，需要在Notice中带有 Apache Licence\n4. 可以在产品(闭源)的Notice中增加自己的许可，但是不可以表现为对apache licence构成更改\n\n---\n\n## LGPL\n\n> GNU Lesser General Public License\n\n> 是GPL的一个主要为类库使用设计的开源协议\n\n#### 使用者权限:\n\n1. 自由使用\n2. 修改源码\n3. 修改后开源\n4. 对于只是引用 允许 闭源发布\n\n\n#### 约束:\n\n1. 修改、衍生代码，必须也使用LGPL协议\n\n---\n\n## GPL\n\n> GNU General Public License\n\n> Linux采用GPl\n\n> 开源/免费使用和引用/修改/衍生代码的开源\n\n#### 使用者权限:\n\n1. 自由使用\n2. 修改源码\n3. 修改后开源\n\n\n#### 约束:\n\n1. 使用/引用源码或者修改过的代码/衍生代码，则该产品也必须采用GPL协议\n\n---\n\n- [五种开源授权规范的比较(BSD, Apache, GPL, LGPL, MIT)](http://inspiregate.com/internet/trends/74-comparison-of-five-kinds-of-standard-open-source-license-bsd-apache-gpl-lgpl-mit.html)\n- [【Git】认识各种开源协议及其关系](http://jasonding1354.github.io/2015/05/11/Git/%E3%80%90Git%E3%80%91%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE%E5%8F%8A%E5%85%B6%E5%85%B3%E7%B3%BB/)\n- [详细介绍 MIT 协议](http://www.oschina.net/question/12_2829)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/license.md","raw":"title: 开源协议\ndate: 2016-1-3 01:48:03\npermalink: 2016/1/3/license\ntags:\n- MIT\n- BSD\n- Apache License\n- GPL\n- LGPL\n\n---\n\n目前一共有近60种开源协议: [Open Source Initiative](http://opensource.org/licenses/alphabetical)\n\n常见的协议:BSD、GPL、LGPL、MIT都是OSI批准的协议\n\n<!-- more -->\n\n## MIT\n\n#### 使用者权限:\n\n1. 自由使用\n2. 修改源代码\n3. 修改后开源\n4. 闭源发布\n\n#### 约束:\n\n1. 源码/闭源 都需要在发行版里包含原许可协议申明\n\n---\n\n## BSD\n\n> original BSD license、FreeBSD license、Original BSD license\n\n> 估计代码共享，但需要尊重代码作者的著作权\n\n#### 使用者权限:\n\n1. 自由使用\n2. 修改源代码\n3. 修改后开源\n4. 闭源发布\n\n#### 约束:\n\n> 修改了使用BSD协议的代码 || 以BSD协议的源代码作为基础\n\n1. 如果包含源代码，需要源代码带有`原来代码中的BSD协议`\n2. 如果都是二进制类库/软件(闭源)，需要在文档和版权声明中包含`原来代码中的BSD协议`\n3. 不可用开源代码的 `作者/机构名字`和原来`产品的名字`做市场推广\n\n---\n\n## Apache Licence 2.0\n\n> Apache License, Version 2.0、Apache License, Version 1.1、Apache License, Version 1.0\n\n> 鼓励代码共享，尊重原作者著作权\n\n> 是著名非盈利开源组织Apache采用的协议\n\n#### 使用者权限:\n\n1. 自由使用\n2. 修改源代码\n3. 修改后开源\n4. 闭源发布\n\n#### 约束:\n\n1. 如果包含源代码，需要包含Apache Licence\n2. 如果修改了代码/衍生代码，需要在被修改的文件/衍生的代码中带上`原来代码中的协议`\n3. 如果发布的产品(闭源)包含Notice，需要在Notice中带有 Apache Licence\n4. 可以在产品(闭源)的Notice中增加自己的许可，但是不可以表现为对apache licence构成更改\n\n---\n\n## LGPL\n\n> GNU Lesser General Public License\n\n> 是GPL的一个主要为类库使用设计的开源协议\n\n#### 使用者权限:\n\n1. 自由使用\n2. 修改源码\n3. 修改后开源\n4. 对于只是引用 允许 闭源发布\n\n\n#### 约束:\n\n1. 修改、衍生代码，必须也使用LGPL协议\n\n---\n\n## GPL\n\n> GNU General Public License\n\n> Linux采用GPl\n\n> 开源/免费使用和引用/修改/衍生代码的开源\n\n#### 使用者权限:\n\n1. 自由使用\n2. 修改源码\n3. 修改后开源\n\n\n#### 约束:\n\n1. 使用/引用源码或者修改过的代码/衍生代码，则该产品也必须采用GPL协议\n\n---\n\n- [五种开源授权规范的比较(BSD, Apache, GPL, LGPL, MIT)](http://inspiregate.com/internet/trends/74-comparison-of-five-kinds-of-standard-open-source-license-bsd-apache-gpl-lgpl-mit.html)\n- [【Git】认识各种开源协议及其关系](http://jasonding1354.github.io/2015/05/11/Git/%E3%80%90Git%E3%80%91%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE%E5%8F%8A%E5%85%B6%E5%85%B3%E7%B3%BB/)\n- [详细介绍 MIT 协议](http://www.oschina.net/question/12_2829)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2016/1/3/license","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66iz002z95bust0zp1mw","content":"<p>目前一共有近60种开源协议: <a href=\"http://opensource.org/licenses/alphabetical\" target=\"_blank\" rel=\"external\">Open Source Initiative</a></p>\n<p>常见的协议:BSD、GPL、LGPL、MIT都是OSI批准的协议</p>\n<a id=\"more\"></a>\n<h2 id=\"MIT\"><a href=\"#MIT\" class=\"headerlink\" title=\"MIT\"></a>MIT</h2><h4 id=\"使用者权限\"><a href=\"#使用者权限\" class=\"headerlink\" title=\"使用者权限:\"></a>使用者权限:</h4><ol>\n<li>自由使用</li>\n<li>修改源代码</li>\n<li>修改后开源</li>\n<li>闭源发布</li>\n</ol>\n<h4 id=\"约束\"><a href=\"#约束\" class=\"headerlink\" title=\"约束:\"></a>约束:</h4><ol>\n<li>源码/闭源 都需要在发行版里包含原许可协议申明</li>\n</ol>\n<hr>\n<h2 id=\"BSD\"><a href=\"#BSD\" class=\"headerlink\" title=\"BSD\"></a>BSD</h2><blockquote>\n<p>original BSD license、FreeBSD license、Original BSD license</p>\n<p>估计代码共享，但需要尊重代码作者的著作权</p>\n</blockquote>\n<h4 id=\"使用者权限-1\"><a href=\"#使用者权限-1\" class=\"headerlink\" title=\"使用者权限:\"></a>使用者权限:</h4><ol>\n<li>自由使用</li>\n<li>修改源代码</li>\n<li>修改后开源</li>\n<li>闭源发布</li>\n</ol>\n<h4 id=\"约束-1\"><a href=\"#约束-1\" class=\"headerlink\" title=\"约束:\"></a>约束:</h4><blockquote>\n<p>修改了使用BSD协议的代码 || 以BSD协议的源代码作为基础</p>\n</blockquote>\n<ol>\n<li>如果包含源代码，需要源代码带有<code>原来代码中的BSD协议</code></li>\n<li>如果都是二进制类库/软件(闭源)，需要在文档和版权声明中包含<code>原来代码中的BSD协议</code></li>\n<li>不可用开源代码的 <code>作者/机构名字</code>和原来<code>产品的名字</code>做市场推广</li>\n</ol>\n<hr>\n<h2 id=\"Apache-Licence-2-0\"><a href=\"#Apache-Licence-2-0\" class=\"headerlink\" title=\"Apache Licence 2.0\"></a>Apache Licence 2.0</h2><blockquote>\n<p>Apache License, Version 2.0、Apache License, Version 1.1、Apache License, Version 1.0</p>\n<p>鼓励代码共享，尊重原作者著作权</p>\n<p>是著名非盈利开源组织Apache采用的协议</p>\n</blockquote>\n<h4 id=\"使用者权限-2\"><a href=\"#使用者权限-2\" class=\"headerlink\" title=\"使用者权限:\"></a>使用者权限:</h4><ol>\n<li>自由使用</li>\n<li>修改源代码</li>\n<li>修改后开源</li>\n<li>闭源发布</li>\n</ol>\n<h4 id=\"约束-2\"><a href=\"#约束-2\" class=\"headerlink\" title=\"约束:\"></a>约束:</h4><ol>\n<li>如果包含源代码，需要包含Apache Licence</li>\n<li>如果修改了代码/衍生代码，需要在被修改的文件/衍生的代码中带上<code>原来代码中的协议</code></li>\n<li>如果发布的产品(闭源)包含Notice，需要在Notice中带有 Apache Licence</li>\n<li>可以在产品(闭源)的Notice中增加自己的许可，但是不可以表现为对apache licence构成更改</li>\n</ol>\n<hr>\n<h2 id=\"LGPL\"><a href=\"#LGPL\" class=\"headerlink\" title=\"LGPL\"></a>LGPL</h2><blockquote>\n<p>GNU Lesser General Public License</p>\n<p>是GPL的一个主要为类库使用设计的开源协议</p>\n</blockquote>\n<h4 id=\"使用者权限-3\"><a href=\"#使用者权限-3\" class=\"headerlink\" title=\"使用者权限:\"></a>使用者权限:</h4><ol>\n<li>自由使用</li>\n<li>修改源码</li>\n<li>修改后开源</li>\n<li>对于只是引用 允许 闭源发布</li>\n</ol>\n<h4 id=\"约束-3\"><a href=\"#约束-3\" class=\"headerlink\" title=\"约束:\"></a>约束:</h4><ol>\n<li>修改、衍生代码，必须也使用LGPL协议</li>\n</ol>\n<hr>\n<h2 id=\"GPL\"><a href=\"#GPL\" class=\"headerlink\" title=\"GPL\"></a>GPL</h2><blockquote>\n<p>GNU General Public License</p>\n<p>Linux采用GPl</p>\n<p>开源/免费使用和引用/修改/衍生代码的开源</p>\n</blockquote>\n<h4 id=\"使用者权限-4\"><a href=\"#使用者权限-4\" class=\"headerlink\" title=\"使用者权限:\"></a>使用者权限:</h4><ol>\n<li>自由使用</li>\n<li>修改源码</li>\n<li>修改后开源</li>\n</ol>\n<h4 id=\"约束-4\"><a href=\"#约束-4\" class=\"headerlink\" title=\"约束:\"></a>约束:</h4><ol>\n<li>使用/引用源码或者修改过的代码/衍生代码，则该产品也必须采用GPL协议</li>\n</ol>\n<hr>\n<ul>\n<li><a href=\"http://inspiregate.com/internet/trends/74-comparison-of-five-kinds-of-standard-open-source-license-bsd-apache-gpl-lgpl-mit.html\" target=\"_blank\" rel=\"external\">五种开源授权规范的比较(BSD, Apache, GPL, LGPL, MIT)</a></li>\n<li><a href=\"http://jasonding1354.github.io/2015/05/11/Git/%E3%80%90Git%E3%80%91%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE%E5%8F%8A%E5%85%B6%E5%85%B3%E7%B3%BB/\" target=\"_blank\" rel=\"external\">【Git】认识各种开源协议及其关系</a></li>\n<li><a href=\"http://www.oschina.net/question/12_2829\" target=\"_blank\" rel=\"external\">详细介绍 MIT 协议</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<p>目前一共有近60种开源协议: <a href=\"http://opensource.org/licenses/alphabetical\">Open Source Initiative</a></p>\n<p>常见的协议:BSD、GPL、LGPL、MIT都是OSI批准的协议</p>","more":"<h2 id=\"MIT\"><a href=\"#MIT\" class=\"headerlink\" title=\"MIT\"></a>MIT</h2><h4 id=\"使用者权限\"><a href=\"#使用者权限\" class=\"headerlink\" title=\"使用者权限:\"></a>使用者权限:</h4><ol>\n<li>自由使用</li>\n<li>修改源代码</li>\n<li>修改后开源</li>\n<li>闭源发布</li>\n</ol>\n<h4 id=\"约束\"><a href=\"#约束\" class=\"headerlink\" title=\"约束:\"></a>约束:</h4><ol>\n<li>源码/闭源 都需要在发行版里包含原许可协议申明</li>\n</ol>\n<hr>\n<h2 id=\"BSD\"><a href=\"#BSD\" class=\"headerlink\" title=\"BSD\"></a>BSD</h2><blockquote>\n<p>original BSD license、FreeBSD license、Original BSD license</p>\n<p>估计代码共享，但需要尊重代码作者的著作权</p>\n</blockquote>\n<h4 id=\"使用者权限-1\"><a href=\"#使用者权限-1\" class=\"headerlink\" title=\"使用者权限:\"></a>使用者权限:</h4><ol>\n<li>自由使用</li>\n<li>修改源代码</li>\n<li>修改后开源</li>\n<li>闭源发布</li>\n</ol>\n<h4 id=\"约束-1\"><a href=\"#约束-1\" class=\"headerlink\" title=\"约束:\"></a>约束:</h4><blockquote>\n<p>修改了使用BSD协议的代码 || 以BSD协议的源代码作为基础</p>\n</blockquote>\n<ol>\n<li>如果包含源代码，需要源代码带有<code>原来代码中的BSD协议</code></li>\n<li>如果都是二进制类库/软件(闭源)，需要在文档和版权声明中包含<code>原来代码中的BSD协议</code></li>\n<li>不可用开源代码的 <code>作者/机构名字</code>和原来<code>产品的名字</code>做市场推广</li>\n</ol>\n<hr>\n<h2 id=\"Apache-Licence-2-0\"><a href=\"#Apache-Licence-2-0\" class=\"headerlink\" title=\"Apache Licence 2.0\"></a>Apache Licence 2.0</h2><blockquote>\n<p>Apache License, Version 2.0、Apache License, Version 1.1、Apache License, Version 1.0</p>\n<p>鼓励代码共享，尊重原作者著作权</p>\n<p>是著名非盈利开源组织Apache采用的协议</p>\n</blockquote>\n<h4 id=\"使用者权限-2\"><a href=\"#使用者权限-2\" class=\"headerlink\" title=\"使用者权限:\"></a>使用者权限:</h4><ol>\n<li>自由使用</li>\n<li>修改源代码</li>\n<li>修改后开源</li>\n<li>闭源发布</li>\n</ol>\n<h4 id=\"约束-2\"><a href=\"#约束-2\" class=\"headerlink\" title=\"约束:\"></a>约束:</h4><ol>\n<li>如果包含源代码，需要包含Apache Licence</li>\n<li>如果修改了代码/衍生代码，需要在被修改的文件/衍生的代码中带上<code>原来代码中的协议</code></li>\n<li>如果发布的产品(闭源)包含Notice，需要在Notice中带有 Apache Licence</li>\n<li>可以在产品(闭源)的Notice中增加自己的许可，但是不可以表现为对apache licence构成更改</li>\n</ol>\n<hr>\n<h2 id=\"LGPL\"><a href=\"#LGPL\" class=\"headerlink\" title=\"LGPL\"></a>LGPL</h2><blockquote>\n<p>GNU Lesser General Public License</p>\n<p>是GPL的一个主要为类库使用设计的开源协议</p>\n</blockquote>\n<h4 id=\"使用者权限-3\"><a href=\"#使用者权限-3\" class=\"headerlink\" title=\"使用者权限:\"></a>使用者权限:</h4><ol>\n<li>自由使用</li>\n<li>修改源码</li>\n<li>修改后开源</li>\n<li>对于只是引用 允许 闭源发布</li>\n</ol>\n<h4 id=\"约束-3\"><a href=\"#约束-3\" class=\"headerlink\" title=\"约束:\"></a>约束:</h4><ol>\n<li>修改、衍生代码，必须也使用LGPL协议</li>\n</ol>\n<hr>\n<h2 id=\"GPL\"><a href=\"#GPL\" class=\"headerlink\" title=\"GPL\"></a>GPL</h2><blockquote>\n<p>GNU General Public License</p>\n<p>Linux采用GPl</p>\n<p>开源/免费使用和引用/修改/衍生代码的开源</p>\n</blockquote>\n<h4 id=\"使用者权限-4\"><a href=\"#使用者权限-4\" class=\"headerlink\" title=\"使用者权限:\"></a>使用者权限:</h4><ol>\n<li>自由使用</li>\n<li>修改源码</li>\n<li>修改后开源</li>\n</ol>\n<h4 id=\"约束-4\"><a href=\"#约束-4\" class=\"headerlink\" title=\"约束:\"></a>约束:</h4><ol>\n<li>使用/引用源码或者修改过的代码/衍生代码，则该产品也必须采用GPL协议</li>\n</ol>\n<hr>\n<ul>\n<li><a href=\"http://inspiregate.com/internet/trends/74-comparison-of-five-kinds-of-standard-open-source-license-bsd-apache-gpl-lgpl-mit.html\">五种开源授权规范的比较(BSD, Apache, GPL, LGPL, MIT)</a></li>\n<li><a href=\"http://jasonding1354.github.io/2015/05/11/Git/%E3%80%90Git%E3%80%91%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE%E5%8F%8A%E5%85%B6%E5%85%B3%E7%B3%BB/\">【Git】认识各种开源协议及其关系</a></li>\n<li><a href=\"http://www.oschina.net/question/12_2829\">详细介绍 MIT 协议</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"英语流利说 Android 架构演进","date":"2016-05-28T17:28:03.000Z","_content":"\n> 随着业务层的复杂度不断增加，英语流利说Android的代码架构经历了一场华丽的蜕变，本文详细讲解了英语流利说Android端如何从一个中小型项目架构转为中大型项目架构的过程。\n\n<!-- more -->\n\n---\n\n本文已经发布到英语流利说技术团队公众号，可请直接访问: [英语流利说Android架构演进 - 流利说技术团队](http://mp.weixin.qq.com/s?__biz=MzI0NjIzNDkwOA==&mid=2247483673&idx=1&sn=ba9cf498ab78646f1a9c9e711f65c360)\n\n---\n\n> 今天给大家分享的是英语流利说Android端的代码架构的演进，标题挺高大上的，其实也并非多高大上的东西，整个演进过程，也是借鉴了业界很多大型应用在架构上的沉淀以及思想，可能有些东西还有点老生常谈，不过我们保证尽量都是干货。\n\n英语流利说的架构一直在迭代调整。2015年中旬启动了一次较大规模的重构，经历了简单的半个小时会议，大家一致支持，开启了英语流利说这次的架构演进之路✌✌。\n\n![](/img/lls_architecture_1.png)\n\n这是当时的Task，也是今天我们入手介绍的主要内容:\n\n![](/img/lls_architecture_2.png)\n\n## I. 英语流利说早期架构\n\n> 应该有很多小型项目，在快速迭代中也存在着这样的架构，如果你们正想往中大型项目看齐，那么可能这篇文章会是你有效的解决方案之一。\n\n![](/img/lls_architecture_3.png)\n\n英语流利说Android端早期的架构，主要以内部广播方式进行必要的解耦，随着不断的迭代，虽然基本的核心公用代码根据特性已经衍生出了A、B、C Module，但是上层业务复杂度不断增加，各模块相互耦合越发严重，虽然一直都有在架构上做一些小的调整，但都无法根治问题，以此维护性的问题便逐渐凸现。\n\n## II. 英语流利说核心架构\n\n> 这套架构的核心思想 `Plugin模式` 是借鉴了[国内公认最优秀的Android项目所采用的架构](http://www.infoq.com/cn/articles/wechat-android-app-architecture)，在保留架构核心思想的基础上，以尽量轻，尽量简单的原则做了一些减法以及调整。除了核心架构，我们也做了很多辅助架构为了支撑整套架构灵活性、轻便性。\n\n![](/img/lls_architecture_4.png)\n\n如上图，整个项目清晰的被拆分为三个层级: 基础层、功能模块层、App模块(Application层)，其中功能模块层中的各个功能模块是我们需要解耦出来的，而基础层的每个模块遵循单向依赖关系: 从距离功能模块层最近的中央控制的`center`模块、再往下的负责全局监控的`monitor`模块、公共布局相关的`ui`模块、公共网络数据相关的`net`模块、公共底层工具的`sdk`模块直到最基本的为国际化做准备的`language`模块、供引入第三方库并二次封装的`support`模块。\n\n### 1. 核心架构说明\n\n#### 整体特性\n\n> 这套架构最明显的特征就是对功能模块层中的每个模块进行了解耦，如下图，使得App模块可以轻易的取消对任何功能模块的依赖而不影响编译与使用，因此我们也将其称为`Plugin模式`。\n\n![](/img/lls_architecture_5.png)\n\n#### 核心功能思想:\n\n![](/img/lls_architecture_6.png)\n\n这套架构是就对各功能模块解耦展开的，而解耦就如A与B需要解耦，引入C，让A、B都依赖C。关系如上图，我们需要对A、B模块解耦，让A、B模块都依赖中央控制`center`模块(下文简称中控模块)，并且在中控模块中定义A、B模块需要对外开放的接口，在A、B模块中实现各自的接口，然后在App模块中通过反射将A、B模块中的实现传入中控模块，这样App模块、A模块、B模块都可以通过中控进行对各个功能模块进行访问，而当App模块没有依赖A模块时，中控模块会返回在中控模块实现的一个`EmptyAPlugin`，至此完成整个环路。\n\n### 2. 引入多进程层\n\n> 在基础层中嵌入多进程层，主要是由于在Android中内存共享每个JVM是独立的，在架构层面让所有的各自非UI进程的数据结构都是`Package Visible`，防止被非当前进程调用。\n\n![](/img/lls_architecture_7.png)\n\n> 模块命名前缀为 `lls_process` 是进程模块，并且每个模块的区分以进程为单位\n\n#### 1. 多进程的原因\n\n> 其实在后来的演进中，我们为了减少因为进程调度对手机资源(CPU、I/O)的消耗，尽可能的合并以及缩减了各类进程(保持一个常驻进程、多个以生命周期为界限的短生命周期非常驻进程)。\n> 多进程化当时有受到了[业界某大型安全应用在InfoQ上的一个关于大型移动应用开发的演讲](http://www.infoq.com/cn/presentations/from-360-development-see-big-mobile-application-development)的启发，他们谈到了在一些特定场景下的优势，以及他们从之前的6个进程演变为17个进程，从而使得应用变得更加的稳定。\n\n与其说原因，不如说是谈谈适用的场景:\n\n- 提高UI进程的稳定性以及各进程各自的稳定性。\n- 独立组件充分解耦，充分独立。\n- 为用户节约内存，更加灵活（如: 只保留一个非主进程的来满足聊天的推送）。\n- 减少引入部分第三方组件所带来的风险。\n- 更有效的做UI进程的有损体验（如: 打分进程CRASH以后，在用户使用过程中，通过重启打分进程重新录音打分的机制，尽量减少用户的体验损失）。\n- 由于独立进程在自己的JVM上面，内存方面不会对UI进程的内存分配造成直接的影响，因此在一些内存占用较多如大图预览的时候，可以一次性使用，一次性回收。\n\n#### 2. 多进程通讯架构\n\n![](/img/lls_architecture_8.png)\n\n这套架构是封装了非UI进程组件用于让非UI进程的Service快速集成并接受绑定Binder与UI进程的UIGuard组件进行IPC，如上图，基本原则就是:\n\n1. UI进程只可通过UIGuard与另外一个进程的Service进行通信。\n2. Service单向引用其所在进程的业务层，反向的信息流通过EventBus的形式流通。\n3. UIGuard被UI进程的业务层单向引用，反向的信息流也是通过EventBus的形式流通。\n4. Service业务层可通过Binder跨进程通信时对于非`oneway`的接口Block住当前线程等待接口回传的机制，再通过UIGuard转发透传Event从而实现直接向UI进程索要数据。\n\n> 其实多进程架构我们已经通过我们的开源库[lingochamp/FileDownloader](https://github.com/lingochamp/FileDownloader)对外开源，不过为了FileDownloader独立进程与非独立进程的灵活切换，因此这套架构在FileDownloader上已经迭代为另外的版本，如果感兴趣可以看看早些的commit。\n\n## III. 英语流利说常用辅助架构\n\n> 主要是对核心架构的辅助，以及一些在核心架构体系下遇到一些问题的解决。\n\n#### 1. 异步加载机制\n\n> 由于核心架构中是通过反射的机制注入每个模块的具体实现，而这块的反射耗时每次都会在百毫秒左右，这是用户每次打开应用或每次UI进程被回收以后恢复都会遇到的耗时问题，因此有了异步加载机制(当然应对类似体验问题，也有一些取巧的方法可以借鉴，比如腾讯新闻的闪屏Activity的Window的背景直接使用了一张闪屏的背景图片)。\n\n> 我们都知道系统已经有一套通过同步序列化的恢复机制，但是相比而言，在这个场景下我们更需要的是一个异步的机制，也就是下面这套架构所提供的机制。\n\n![](/img/lls_architecture_9.png)\n\n这套架构简单粗暴，但十分有效: 对`Activity`系统维系的生命周期转一层的方式，从架构方面对业务层获取到的Activity生命周期进行控制。\n\n#### 2. 拓展灵活性EventBus\n\n这个主要是为了弥补在一些情景下，核心架构中的接口显得不够灵活，比如有些操作需要在各个功能模块间透传。但是慎用该类方式，因为考虑到可维护性。由于这套架构网络已经很多衍生了，就不耽误各位时间多说了，有点类似简化的本地广播模型。主要作用是将发送端与接收端充分解耦。\n\n#### 3. 监控系统体系架构\n\n对应用的监控是维护应用稳定性与对应用性能量化不可或缺的一个重要的环节，英语流利说在核心架构搭建之初就已经设计了监控模块，主要是做以下监控:\n\n##### ANR监控\n\n主要通过系统API监控`/data/anr/traces.txt`文件的变化，进而对其进行分析。\n\n##### Crash监控\n\n我们Crash上报部分采用了支持收集native层异常的第三方库: Fabric，在此基础上我们做了以下拓展:\n\n- Crash写文件，主要结合命令系统体系使用输出最近都的crash。\n- 非UI进程的Crash不走系统默认Crash处理，走有损体验体系，对于用户不可见。\n\n##### Activity生命周期监控\n\n主要是基于 `Application.ActivityLifecycleCallbacks`，这里的监控主要是辅助以下操作:\n\n- 结合图片加载监控体系，保证在打开新页面的时候，旧页面的图片加载全部暂停。\n- 一些服务的注销。\n- `Activity`从`ContentView`开始遍历扫描，通过置空可能导致泄漏的对象来对`Activity`进行空壳化处理。\n\n##### 内存泄漏监控\n\n我们也是使用Leakcanary这个开源库，在Staging环境上进行检测。\n\n##### 一般性业务层级监控:\n\n这里涉及到一个日志选择性上报系统，主要是结合日志系统用于调试难以复现的BUG(默认是关闭的，目前支持用户在应用中主动打开与上传）这套系统受限于篇幅，以后再分享，也许我们会考虑进行开源。\n\n##### 其他监控\n\n如下载监控、DNS劫持监控等。\n\n> 在现有的核心架构体系下，监控的核心作用点都是其他模块，比如对UI模块的监控，对网络模块的监控等，但是其所在的基础层是一个自上向下的单向依赖关系，因此这里又会涉及到一个辅助组件 `MonitorPool` 下图是注册一个图片加载监控的案例。\n\n![](/img/lls_architecture_10.png)\n\n#### 4. 管理员系统体系架构\n\n> 管理体系主要是为了测试人员以及开发人员在应用测试阶段能够通过一些绿色通道开启一些对外界用户不开放的功能。\n\n这套系统主要是考虑到安全性，因此放到了编译阶段完成。\n\n![](/img/lls_architecture_11.png)\n\n## IV. 英语流利说常用支持型架构\n\n#### 1. 文件存储体系\n\n- `LLSPath`主要支持版本迭代，根据版本升级提供类似数据库一套的数据迁移策略。\n- `LLSUserPath`在`LLSPath`的基础上，提供用户切换，相关路径变更以及相关的操作。\n\n![](/img/lls_architecture_12.png)\n\n#### 2. 防DNS劫持体系\n\n采用HttpDNS，这块我们的核心思想是尽量的精简轻量并尽量维持与现有系统提供的DNS体系相同的策略，主要通过关注以下几点实现:\n\n1. 存储DNS的文件的大小，当超过阀值大小时LRU规则进行维护。\n2. 每个Host对应DNS根据不同的TTL进行维护。\n3. 当存在备选IP时，当延时最低IP连接失败以后，备选IP替换上去。\n4. 基于在请求对应Host的IP的时候，远端已经根据延时排序返回对应的IP队列，本地不再做多余的复杂存储与测试（如测速、稳定性测试存储、复杂的抉择策略等）。\n\n#### 3. 图片加载体系\n\n> 已经开源，欢迎PR: [lingochamp/QiniuImageLoader](https://github.com/lingochamp/QiniuImageLoader)\n\n在全局图片加载漏斗模型的前提下，拥有以下特点:\n\n1. 全局默认WEBP，支持指定任意格式获取图片。\n2. 所有图片操作(包括缩放、高斯模糊、CenterCrop等)都放到云端处理，因此保证客户端尽可能的减少了CPU、网络、I/O资源的消耗，特别在比较差的手机上尤为明显。\n3. 所有的图片请求，默认强制需要提供需要的尺寸规格(如，需要一个宽度为100dp的CenterCrop的图片，需要一个最大宽度不超过屏幕宽度一半的等比例缩放的图片)。\n4. 接口简单，易用。\n\n#### 4. 下载体系\n\n> 已经开源，欢迎PR: [ingochamp/FileDownloader](https://github.com/lingochamp/FileDownloader)\n\n我们的下载体系主要拥有以下特点:\n\n1. 高并发、高稳定性。\n2. 灵活配置，如配置，下载服务运行在UI进程还是运行在独立进程、配置主动确保flush到本地的间隔等。\n3. 接口简单、便于用于简单的场景也便于用于复杂的场景。\n4. 便于监控，已有很好的监控接口。\n\n-------\n\n在各类大小架构的支撑下，英语流利说的整体架构目前已经趋于稳定，但是，前方还有很多需要我们去做的，如单元测试在架构层保证规范化与常规化；如策略型需求在架构层保证可配置化；如在架构层面基于Annotation Processing封装实现快速减少重复Coding等等。无论如何，我们始终秉承，在不断发展与演进的过程中，也能不断的回馈社区。无论是源码还是架构思想本身都是在快速的贬值，唯有不断的实践、不断的迭代，不断的发展，才能使得世界更加美好。\n\n---\n\n> © 2016, 流利说技术团队(https://www.liulishuo.com/). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/lls_architecture.md","raw":"title: 英语流利说 Android 架构演进\ndate: 2016-05-29 01:28:03\npermalink: 2016/05/29/lls_architecture\ntags:\n- Android\n- 架构\n- 英语流利说\n\n---\n\n> 随着业务层的复杂度不断增加，英语流利说Android的代码架构经历了一场华丽的蜕变，本文详细讲解了英语流利说Android端如何从一个中小型项目架构转为中大型项目架构的过程。\n\n<!-- more -->\n\n---\n\n本文已经发布到英语流利说技术团队公众号，可请直接访问: [英语流利说Android架构演进 - 流利说技术团队](http://mp.weixin.qq.com/s?__biz=MzI0NjIzNDkwOA==&mid=2247483673&idx=1&sn=ba9cf498ab78646f1a9c9e711f65c360)\n\n---\n\n> 今天给大家分享的是英语流利说Android端的代码架构的演进，标题挺高大上的，其实也并非多高大上的东西，整个演进过程，也是借鉴了业界很多大型应用在架构上的沉淀以及思想，可能有些东西还有点老生常谈，不过我们保证尽量都是干货。\n\n英语流利说的架构一直在迭代调整。2015年中旬启动了一次较大规模的重构，经历了简单的半个小时会议，大家一致支持，开启了英语流利说这次的架构演进之路✌✌。\n\n![](/img/lls_architecture_1.png)\n\n这是当时的Task，也是今天我们入手介绍的主要内容:\n\n![](/img/lls_architecture_2.png)\n\n## I. 英语流利说早期架构\n\n> 应该有很多小型项目，在快速迭代中也存在着这样的架构，如果你们正想往中大型项目看齐，那么可能这篇文章会是你有效的解决方案之一。\n\n![](/img/lls_architecture_3.png)\n\n英语流利说Android端早期的架构，主要以内部广播方式进行必要的解耦，随着不断的迭代，虽然基本的核心公用代码根据特性已经衍生出了A、B、C Module，但是上层业务复杂度不断增加，各模块相互耦合越发严重，虽然一直都有在架构上做一些小的调整，但都无法根治问题，以此维护性的问题便逐渐凸现。\n\n## II. 英语流利说核心架构\n\n> 这套架构的核心思想 `Plugin模式` 是借鉴了[国内公认最优秀的Android项目所采用的架构](http://www.infoq.com/cn/articles/wechat-android-app-architecture)，在保留架构核心思想的基础上，以尽量轻，尽量简单的原则做了一些减法以及调整。除了核心架构，我们也做了很多辅助架构为了支撑整套架构灵活性、轻便性。\n\n![](/img/lls_architecture_4.png)\n\n如上图，整个项目清晰的被拆分为三个层级: 基础层、功能模块层、App模块(Application层)，其中功能模块层中的各个功能模块是我们需要解耦出来的，而基础层的每个模块遵循单向依赖关系: 从距离功能模块层最近的中央控制的`center`模块、再往下的负责全局监控的`monitor`模块、公共布局相关的`ui`模块、公共网络数据相关的`net`模块、公共底层工具的`sdk`模块直到最基本的为国际化做准备的`language`模块、供引入第三方库并二次封装的`support`模块。\n\n### 1. 核心架构说明\n\n#### 整体特性\n\n> 这套架构最明显的特征就是对功能模块层中的每个模块进行了解耦，如下图，使得App模块可以轻易的取消对任何功能模块的依赖而不影响编译与使用，因此我们也将其称为`Plugin模式`。\n\n![](/img/lls_architecture_5.png)\n\n#### 核心功能思想:\n\n![](/img/lls_architecture_6.png)\n\n这套架构是就对各功能模块解耦展开的，而解耦就如A与B需要解耦，引入C，让A、B都依赖C。关系如上图，我们需要对A、B模块解耦，让A、B模块都依赖中央控制`center`模块(下文简称中控模块)，并且在中控模块中定义A、B模块需要对外开放的接口，在A、B模块中实现各自的接口，然后在App模块中通过反射将A、B模块中的实现传入中控模块，这样App模块、A模块、B模块都可以通过中控进行对各个功能模块进行访问，而当App模块没有依赖A模块时，中控模块会返回在中控模块实现的一个`EmptyAPlugin`，至此完成整个环路。\n\n### 2. 引入多进程层\n\n> 在基础层中嵌入多进程层，主要是由于在Android中内存共享每个JVM是独立的，在架构层面让所有的各自非UI进程的数据结构都是`Package Visible`，防止被非当前进程调用。\n\n![](/img/lls_architecture_7.png)\n\n> 模块命名前缀为 `lls_process` 是进程模块，并且每个模块的区分以进程为单位\n\n#### 1. 多进程的原因\n\n> 其实在后来的演进中，我们为了减少因为进程调度对手机资源(CPU、I/O)的消耗，尽可能的合并以及缩减了各类进程(保持一个常驻进程、多个以生命周期为界限的短生命周期非常驻进程)。\n> 多进程化当时有受到了[业界某大型安全应用在InfoQ上的一个关于大型移动应用开发的演讲](http://www.infoq.com/cn/presentations/from-360-development-see-big-mobile-application-development)的启发，他们谈到了在一些特定场景下的优势，以及他们从之前的6个进程演变为17个进程，从而使得应用变得更加的稳定。\n\n与其说原因，不如说是谈谈适用的场景:\n\n- 提高UI进程的稳定性以及各进程各自的稳定性。\n- 独立组件充分解耦，充分独立。\n- 为用户节约内存，更加灵活（如: 只保留一个非主进程的来满足聊天的推送）。\n- 减少引入部分第三方组件所带来的风险。\n- 更有效的做UI进程的有损体验（如: 打分进程CRASH以后，在用户使用过程中，通过重启打分进程重新录音打分的机制，尽量减少用户的体验损失）。\n- 由于独立进程在自己的JVM上面，内存方面不会对UI进程的内存分配造成直接的影响，因此在一些内存占用较多如大图预览的时候，可以一次性使用，一次性回收。\n\n#### 2. 多进程通讯架构\n\n![](/img/lls_architecture_8.png)\n\n这套架构是封装了非UI进程组件用于让非UI进程的Service快速集成并接受绑定Binder与UI进程的UIGuard组件进行IPC，如上图，基本原则就是:\n\n1. UI进程只可通过UIGuard与另外一个进程的Service进行通信。\n2. Service单向引用其所在进程的业务层，反向的信息流通过EventBus的形式流通。\n3. UIGuard被UI进程的业务层单向引用，反向的信息流也是通过EventBus的形式流通。\n4. Service业务层可通过Binder跨进程通信时对于非`oneway`的接口Block住当前线程等待接口回传的机制，再通过UIGuard转发透传Event从而实现直接向UI进程索要数据。\n\n> 其实多进程架构我们已经通过我们的开源库[lingochamp/FileDownloader](https://github.com/lingochamp/FileDownloader)对外开源，不过为了FileDownloader独立进程与非独立进程的灵活切换，因此这套架构在FileDownloader上已经迭代为另外的版本，如果感兴趣可以看看早些的commit。\n\n## III. 英语流利说常用辅助架构\n\n> 主要是对核心架构的辅助，以及一些在核心架构体系下遇到一些问题的解决。\n\n#### 1. 异步加载机制\n\n> 由于核心架构中是通过反射的机制注入每个模块的具体实现，而这块的反射耗时每次都会在百毫秒左右，这是用户每次打开应用或每次UI进程被回收以后恢复都会遇到的耗时问题，因此有了异步加载机制(当然应对类似体验问题，也有一些取巧的方法可以借鉴，比如腾讯新闻的闪屏Activity的Window的背景直接使用了一张闪屏的背景图片)。\n\n> 我们都知道系统已经有一套通过同步序列化的恢复机制，但是相比而言，在这个场景下我们更需要的是一个异步的机制，也就是下面这套架构所提供的机制。\n\n![](/img/lls_architecture_9.png)\n\n这套架构简单粗暴，但十分有效: 对`Activity`系统维系的生命周期转一层的方式，从架构方面对业务层获取到的Activity生命周期进行控制。\n\n#### 2. 拓展灵活性EventBus\n\n这个主要是为了弥补在一些情景下，核心架构中的接口显得不够灵活，比如有些操作需要在各个功能模块间透传。但是慎用该类方式，因为考虑到可维护性。由于这套架构网络已经很多衍生了，就不耽误各位时间多说了，有点类似简化的本地广播模型。主要作用是将发送端与接收端充分解耦。\n\n#### 3. 监控系统体系架构\n\n对应用的监控是维护应用稳定性与对应用性能量化不可或缺的一个重要的环节，英语流利说在核心架构搭建之初就已经设计了监控模块，主要是做以下监控:\n\n##### ANR监控\n\n主要通过系统API监控`/data/anr/traces.txt`文件的变化，进而对其进行分析。\n\n##### Crash监控\n\n我们Crash上报部分采用了支持收集native层异常的第三方库: Fabric，在此基础上我们做了以下拓展:\n\n- Crash写文件，主要结合命令系统体系使用输出最近都的crash。\n- 非UI进程的Crash不走系统默认Crash处理，走有损体验体系，对于用户不可见。\n\n##### Activity生命周期监控\n\n主要是基于 `Application.ActivityLifecycleCallbacks`，这里的监控主要是辅助以下操作:\n\n- 结合图片加载监控体系，保证在打开新页面的时候，旧页面的图片加载全部暂停。\n- 一些服务的注销。\n- `Activity`从`ContentView`开始遍历扫描，通过置空可能导致泄漏的对象来对`Activity`进行空壳化处理。\n\n##### 内存泄漏监控\n\n我们也是使用Leakcanary这个开源库，在Staging环境上进行检测。\n\n##### 一般性业务层级监控:\n\n这里涉及到一个日志选择性上报系统，主要是结合日志系统用于调试难以复现的BUG(默认是关闭的，目前支持用户在应用中主动打开与上传）这套系统受限于篇幅，以后再分享，也许我们会考虑进行开源。\n\n##### 其他监控\n\n如下载监控、DNS劫持监控等。\n\n> 在现有的核心架构体系下，监控的核心作用点都是其他模块，比如对UI模块的监控，对网络模块的监控等，但是其所在的基础层是一个自上向下的单向依赖关系，因此这里又会涉及到一个辅助组件 `MonitorPool` 下图是注册一个图片加载监控的案例。\n\n![](/img/lls_architecture_10.png)\n\n#### 4. 管理员系统体系架构\n\n> 管理体系主要是为了测试人员以及开发人员在应用测试阶段能够通过一些绿色通道开启一些对外界用户不开放的功能。\n\n这套系统主要是考虑到安全性，因此放到了编译阶段完成。\n\n![](/img/lls_architecture_11.png)\n\n## IV. 英语流利说常用支持型架构\n\n#### 1. 文件存储体系\n\n- `LLSPath`主要支持版本迭代，根据版本升级提供类似数据库一套的数据迁移策略。\n- `LLSUserPath`在`LLSPath`的基础上，提供用户切换，相关路径变更以及相关的操作。\n\n![](/img/lls_architecture_12.png)\n\n#### 2. 防DNS劫持体系\n\n采用HttpDNS，这块我们的核心思想是尽量的精简轻量并尽量维持与现有系统提供的DNS体系相同的策略，主要通过关注以下几点实现:\n\n1. 存储DNS的文件的大小，当超过阀值大小时LRU规则进行维护。\n2. 每个Host对应DNS根据不同的TTL进行维护。\n3. 当存在备选IP时，当延时最低IP连接失败以后，备选IP替换上去。\n4. 基于在请求对应Host的IP的时候，远端已经根据延时排序返回对应的IP队列，本地不再做多余的复杂存储与测试（如测速、稳定性测试存储、复杂的抉择策略等）。\n\n#### 3. 图片加载体系\n\n> 已经开源，欢迎PR: [lingochamp/QiniuImageLoader](https://github.com/lingochamp/QiniuImageLoader)\n\n在全局图片加载漏斗模型的前提下，拥有以下特点:\n\n1. 全局默认WEBP，支持指定任意格式获取图片。\n2. 所有图片操作(包括缩放、高斯模糊、CenterCrop等)都放到云端处理，因此保证客户端尽可能的减少了CPU、网络、I/O资源的消耗，特别在比较差的手机上尤为明显。\n3. 所有的图片请求，默认强制需要提供需要的尺寸规格(如，需要一个宽度为100dp的CenterCrop的图片，需要一个最大宽度不超过屏幕宽度一半的等比例缩放的图片)。\n4. 接口简单，易用。\n\n#### 4. 下载体系\n\n> 已经开源，欢迎PR: [ingochamp/FileDownloader](https://github.com/lingochamp/FileDownloader)\n\n我们的下载体系主要拥有以下特点:\n\n1. 高并发、高稳定性。\n2. 灵活配置，如配置，下载服务运行在UI进程还是运行在独立进程、配置主动确保flush到本地的间隔等。\n3. 接口简单、便于用于简单的场景也便于用于复杂的场景。\n4. 便于监控，已有很好的监控接口。\n\n-------\n\n在各类大小架构的支撑下，英语流利说的整体架构目前已经趋于稳定，但是，前方还有很多需要我们去做的，如单元测试在架构层保证规范化与常规化；如策略型需求在架构层保证可配置化；如在架构层面基于Annotation Processing封装实现快速减少重复Coding等等。无论如何，我们始终秉承，在不断发展与演进的过程中，也能不断的回馈社区。无论是源码还是架构思想本身都是在快速的贬值，唯有不断的实践、不断的迭代，不断的发展，才能使得世界更加美好。\n\n---\n\n> © 2016, 流利说技术团队(https://www.liulishuo.com/). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2016/05/29/lls_architecture","published":1,"updated":"2017-01-26T14:52:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66j0003095bu12q4csb7","content":"<blockquote>\n<p>随着业务层的复杂度不断增加，英语流利说Android的代码架构经历了一场华丽的蜕变，本文详细讲解了英语流利说Android端如何从一个中小型项目架构转为中大型项目架构的过程。</p>\n</blockquote>\n<a id=\"more\"></a>\n<hr>\n<p>本文已经发布到英语流利说技术团队公众号，可请直接访问: <a href=\"http://mp.weixin.qq.com/s?__biz=MzI0NjIzNDkwOA==&amp;mid=2247483673&amp;idx=1&amp;sn=ba9cf498ab78646f1a9c9e711f65c360\" target=\"_blank\" rel=\"external\">英语流利说Android架构演进 - 流利说技术团队</a></p>\n<hr>\n<blockquote>\n<p>今天给大家分享的是英语流利说Android端的代码架构的演进，标题挺高大上的，其实也并非多高大上的东西，整个演进过程，也是借鉴了业界很多大型应用在架构上的沉淀以及思想，可能有些东西还有点老生常谈，不过我们保证尽量都是干货。</p>\n</blockquote>\n<p>英语流利说的架构一直在迭代调整。2015年中旬启动了一次较大规模的重构，经历了简单的半个小时会议，大家一致支持，开启了英语流利说这次的架构演进之路✌✌。</p>\n<p><img src=\"/img/lls_architecture_1.png\" alt=\"\"></p>\n<p>这是当时的Task，也是今天我们入手介绍的主要内容:</p>\n<p><img src=\"/img/lls_architecture_2.png\" alt=\"\"></p>\n<h2 id=\"I-英语流利说早期架构\"><a href=\"#I-英语流利说早期架构\" class=\"headerlink\" title=\"I. 英语流利说早期架构\"></a>I. 英语流利说早期架构</h2><blockquote>\n<p>应该有很多小型项目，在快速迭代中也存在着这样的架构，如果你们正想往中大型项目看齐，那么可能这篇文章会是你有效的解决方案之一。</p>\n</blockquote>\n<p><img src=\"/img/lls_architecture_3.png\" alt=\"\"></p>\n<p>英语流利说Android端早期的架构，主要以内部广播方式进行必要的解耦，随着不断的迭代，虽然基本的核心公用代码根据特性已经衍生出了A、B、C Module，但是上层业务复杂度不断增加，各模块相互耦合越发严重，虽然一直都有在架构上做一些小的调整，但都无法根治问题，以此维护性的问题便逐渐凸现。</p>\n<h2 id=\"II-英语流利说核心架构\"><a href=\"#II-英语流利说核心架构\" class=\"headerlink\" title=\"II. 英语流利说核心架构\"></a>II. 英语流利说核心架构</h2><blockquote>\n<p>这套架构的核心思想 <code>Plugin模式</code> 是借鉴了<a href=\"http://www.infoq.com/cn/articles/wechat-android-app-architecture\" target=\"_blank\" rel=\"external\">国内公认最优秀的Android项目所采用的架构</a>，在保留架构核心思想的基础上，以尽量轻，尽量简单的原则做了一些减法以及调整。除了核心架构，我们也做了很多辅助架构为了支撑整套架构灵活性、轻便性。</p>\n</blockquote>\n<p><img src=\"/img/lls_architecture_4.png\" alt=\"\"></p>\n<p>如上图，整个项目清晰的被拆分为三个层级: 基础层、功能模块层、App模块(Application层)，其中功能模块层中的各个功能模块是我们需要解耦出来的，而基础层的每个模块遵循单向依赖关系: 从距离功能模块层最近的中央控制的<code>center</code>模块、再往下的负责全局监控的<code>monitor</code>模块、公共布局相关的<code>ui</code>模块、公共网络数据相关的<code>net</code>模块、公共底层工具的<code>sdk</code>模块直到最基本的为国际化做准备的<code>language</code>模块、供引入第三方库并二次封装的<code>support</code>模块。</p>\n<h3 id=\"1-核心架构说明\"><a href=\"#1-核心架构说明\" class=\"headerlink\" title=\"1. 核心架构说明\"></a>1. 核心架构说明</h3><h4 id=\"整体特性\"><a href=\"#整体特性\" class=\"headerlink\" title=\"整体特性\"></a>整体特性</h4><blockquote>\n<p>这套架构最明显的特征就是对功能模块层中的每个模块进行了解耦，如下图，使得App模块可以轻易的取消对任何功能模块的依赖而不影响编译与使用，因此我们也将其称为<code>Plugin模式</code>。</p>\n</blockquote>\n<p><img src=\"/img/lls_architecture_5.png\" alt=\"\"></p>\n<h4 id=\"核心功能思想\"><a href=\"#核心功能思想\" class=\"headerlink\" title=\"核心功能思想:\"></a>核心功能思想:</h4><p><img src=\"/img/lls_architecture_6.png\" alt=\"\"></p>\n<p>这套架构是就对各功能模块解耦展开的，而解耦就如A与B需要解耦，引入C，让A、B都依赖C。关系如上图，我们需要对A、B模块解耦，让A、B模块都依赖中央控制<code>center</code>模块(下文简称中控模块)，并且在中控模块中定义A、B模块需要对外开放的接口，在A、B模块中实现各自的接口，然后在App模块中通过反射将A、B模块中的实现传入中控模块，这样App模块、A模块、B模块都可以通过中控进行对各个功能模块进行访问，而当App模块没有依赖A模块时，中控模块会返回在中控模块实现的一个<code>EmptyAPlugin</code>，至此完成整个环路。</p>\n<h3 id=\"2-引入多进程层\"><a href=\"#2-引入多进程层\" class=\"headerlink\" title=\"2. 引入多进程层\"></a>2. 引入多进程层</h3><blockquote>\n<p>在基础层中嵌入多进程层，主要是由于在Android中内存共享每个JVM是独立的，在架构层面让所有的各自非UI进程的数据结构都是<code>Package Visible</code>，防止被非当前进程调用。</p>\n</blockquote>\n<p><img src=\"/img/lls_architecture_7.png\" alt=\"\"></p>\n<blockquote>\n<p>模块命名前缀为 <code>lls_process</code> 是进程模块，并且每个模块的区分以进程为单位</p>\n</blockquote>\n<h4 id=\"1-多进程的原因\"><a href=\"#1-多进程的原因\" class=\"headerlink\" title=\"1. 多进程的原因\"></a>1. 多进程的原因</h4><blockquote>\n<p>其实在后来的演进中，我们为了减少因为进程调度对手机资源(CPU、I/O)的消耗，尽可能的合并以及缩减了各类进程(保持一个常驻进程、多个以生命周期为界限的短生命周期非常驻进程)。<br>多进程化当时有受到了<a href=\"http://www.infoq.com/cn/presentations/from-360-development-see-big-mobile-application-development\" target=\"_blank\" rel=\"external\">业界某大型安全应用在InfoQ上的一个关于大型移动应用开发的演讲</a>的启发，他们谈到了在一些特定场景下的优势，以及他们从之前的6个进程演变为17个进程，从而使得应用变得更加的稳定。</p>\n</blockquote>\n<p>与其说原因，不如说是谈谈适用的场景:</p>\n<ul>\n<li>提高UI进程的稳定性以及各进程各自的稳定性。</li>\n<li>独立组件充分解耦，充分独立。</li>\n<li>为用户节约内存，更加灵活（如: 只保留一个非主进程的来满足聊天的推送）。</li>\n<li>减少引入部分第三方组件所带来的风险。</li>\n<li>更有效的做UI进程的有损体验（如: 打分进程CRASH以后，在用户使用过程中，通过重启打分进程重新录音打分的机制，尽量减少用户的体验损失）。</li>\n<li>由于独立进程在自己的JVM上面，内存方面不会对UI进程的内存分配造成直接的影响，因此在一些内存占用较多如大图预览的时候，可以一次性使用，一次性回收。</li>\n</ul>\n<h4 id=\"2-多进程通讯架构\"><a href=\"#2-多进程通讯架构\" class=\"headerlink\" title=\"2. 多进程通讯架构\"></a>2. 多进程通讯架构</h4><p><img src=\"/img/lls_architecture_8.png\" alt=\"\"></p>\n<p>这套架构是封装了非UI进程组件用于让非UI进程的Service快速集成并接受绑定Binder与UI进程的UIGuard组件进行IPC，如上图，基本原则就是:</p>\n<ol>\n<li>UI进程只可通过UIGuard与另外一个进程的Service进行通信。</li>\n<li>Service单向引用其所在进程的业务层，反向的信息流通过EventBus的形式流通。</li>\n<li>UIGuard被UI进程的业务层单向引用，反向的信息流也是通过EventBus的形式流通。</li>\n<li>Service业务层可通过Binder跨进程通信时对于非<code>oneway</code>的接口Block住当前线程等待接口回传的机制，再通过UIGuard转发透传Event从而实现直接向UI进程索要数据。</li>\n</ol>\n<blockquote>\n<p>其实多进程架构我们已经通过我们的开源库<a href=\"https://github.com/lingochamp/FileDownloader\" target=\"_blank\" rel=\"external\">lingochamp/FileDownloader</a>对外开源，不过为了FileDownloader独立进程与非独立进程的灵活切换，因此这套架构在FileDownloader上已经迭代为另外的版本，如果感兴趣可以看看早些的commit。</p>\n</blockquote>\n<h2 id=\"III-英语流利说常用辅助架构\"><a href=\"#III-英语流利说常用辅助架构\" class=\"headerlink\" title=\"III. 英语流利说常用辅助架构\"></a>III. 英语流利说常用辅助架构</h2><blockquote>\n<p>主要是对核心架构的辅助，以及一些在核心架构体系下遇到一些问题的解决。</p>\n</blockquote>\n<h4 id=\"1-异步加载机制\"><a href=\"#1-异步加载机制\" class=\"headerlink\" title=\"1. 异步加载机制\"></a>1. 异步加载机制</h4><blockquote>\n<p>由于核心架构中是通过反射的机制注入每个模块的具体实现，而这块的反射耗时每次都会在百毫秒左右，这是用户每次打开应用或每次UI进程被回收以后恢复都会遇到的耗时问题，因此有了异步加载机制(当然应对类似体验问题，也有一些取巧的方法可以借鉴，比如腾讯新闻的闪屏Activity的Window的背景直接使用了一张闪屏的背景图片)。</p>\n<p>我们都知道系统已经有一套通过同步序列化的恢复机制，但是相比而言，在这个场景下我们更需要的是一个异步的机制，也就是下面这套架构所提供的机制。</p>\n</blockquote>\n<p><img src=\"/img/lls_architecture_9.png\" alt=\"\"></p>\n<p>这套架构简单粗暴，但十分有效: 对<code>Activity</code>系统维系的生命周期转一层的方式，从架构方面对业务层获取到的Activity生命周期进行控制。</p>\n<h4 id=\"2-拓展灵活性EventBus\"><a href=\"#2-拓展灵活性EventBus\" class=\"headerlink\" title=\"2. 拓展灵活性EventBus\"></a>2. 拓展灵活性EventBus</h4><p>这个主要是为了弥补在一些情景下，核心架构中的接口显得不够灵活，比如有些操作需要在各个功能模块间透传。但是慎用该类方式，因为考虑到可维护性。由于这套架构网络已经很多衍生了，就不耽误各位时间多说了，有点类似简化的本地广播模型。主要作用是将发送端与接收端充分解耦。</p>\n<h4 id=\"3-监控系统体系架构\"><a href=\"#3-监控系统体系架构\" class=\"headerlink\" title=\"3. 监控系统体系架构\"></a>3. 监控系统体系架构</h4><p>对应用的监控是维护应用稳定性与对应用性能量化不可或缺的一个重要的环节，英语流利说在核心架构搭建之初就已经设计了监控模块，主要是做以下监控:</p>\n<h5 id=\"ANR监控\"><a href=\"#ANR监控\" class=\"headerlink\" title=\"ANR监控\"></a>ANR监控</h5><p>主要通过系统API监控<code>/data/anr/traces.txt</code>文件的变化，进而对其进行分析。</p>\n<h5 id=\"Crash监控\"><a href=\"#Crash监控\" class=\"headerlink\" title=\"Crash监控\"></a>Crash监控</h5><p>我们Crash上报部分采用了支持收集native层异常的第三方库: Fabric，在此基础上我们做了以下拓展:</p>\n<ul>\n<li>Crash写文件，主要结合命令系统体系使用输出最近都的crash。</li>\n<li>非UI进程的Crash不走系统默认Crash处理，走有损体验体系，对于用户不可见。</li>\n</ul>\n<h5 id=\"Activity生命周期监控\"><a href=\"#Activity生命周期监控\" class=\"headerlink\" title=\"Activity生命周期监控\"></a>Activity生命周期监控</h5><p>主要是基于 <code>Application.ActivityLifecycleCallbacks</code>，这里的监控主要是辅助以下操作:</p>\n<ul>\n<li>结合图片加载监控体系，保证在打开新页面的时候，旧页面的图片加载全部暂停。</li>\n<li>一些服务的注销。</li>\n<li><code>Activity</code>从<code>ContentView</code>开始遍历扫描，通过置空可能导致泄漏的对象来对<code>Activity</code>进行空壳化处理。</li>\n</ul>\n<h5 id=\"内存泄漏监控\"><a href=\"#内存泄漏监控\" class=\"headerlink\" title=\"内存泄漏监控\"></a>内存泄漏监控</h5><p>我们也是使用Leakcanary这个开源库，在Staging环境上进行检测。</p>\n<h5 id=\"一般性业务层级监控\"><a href=\"#一般性业务层级监控\" class=\"headerlink\" title=\"一般性业务层级监控:\"></a>一般性业务层级监控:</h5><p>这里涉及到一个日志选择性上报系统，主要是结合日志系统用于调试难以复现的BUG(默认是关闭的，目前支持用户在应用中主动打开与上传）这套系统受限于篇幅，以后再分享，也许我们会考虑进行开源。</p>\n<h5 id=\"其他监控\"><a href=\"#其他监控\" class=\"headerlink\" title=\"其他监控\"></a>其他监控</h5><p>如下载监控、DNS劫持监控等。</p>\n<blockquote>\n<p>在现有的核心架构体系下，监控的核心作用点都是其他模块，比如对UI模块的监控，对网络模块的监控等，但是其所在的基础层是一个自上向下的单向依赖关系，因此这里又会涉及到一个辅助组件 <code>MonitorPool</code> 下图是注册一个图片加载监控的案例。</p>\n</blockquote>\n<p><img src=\"/img/lls_architecture_10.png\" alt=\"\"></p>\n<h4 id=\"4-管理员系统体系架构\"><a href=\"#4-管理员系统体系架构\" class=\"headerlink\" title=\"4. 管理员系统体系架构\"></a>4. 管理员系统体系架构</h4><blockquote>\n<p>管理体系主要是为了测试人员以及开发人员在应用测试阶段能够通过一些绿色通道开启一些对外界用户不开放的功能。</p>\n</blockquote>\n<p>这套系统主要是考虑到安全性，因此放到了编译阶段完成。</p>\n<p><img src=\"/img/lls_architecture_11.png\" alt=\"\"></p>\n<h2 id=\"IV-英语流利说常用支持型架构\"><a href=\"#IV-英语流利说常用支持型架构\" class=\"headerlink\" title=\"IV. 英语流利说常用支持型架构\"></a>IV. 英语流利说常用支持型架构</h2><h4 id=\"1-文件存储体系\"><a href=\"#1-文件存储体系\" class=\"headerlink\" title=\"1. 文件存储体系\"></a>1. 文件存储体系</h4><ul>\n<li><code>LLSPath</code>主要支持版本迭代，根据版本升级提供类似数据库一套的数据迁移策略。</li>\n<li><code>LLSUserPath</code>在<code>LLSPath</code>的基础上，提供用户切换，相关路径变更以及相关的操作。</li>\n</ul>\n<p><img src=\"/img/lls_architecture_12.png\" alt=\"\"></p>\n<h4 id=\"2-防DNS劫持体系\"><a href=\"#2-防DNS劫持体系\" class=\"headerlink\" title=\"2. 防DNS劫持体系\"></a>2. 防DNS劫持体系</h4><p>采用HttpDNS，这块我们的核心思想是尽量的精简轻量并尽量维持与现有系统提供的DNS体系相同的策略，主要通过关注以下几点实现:</p>\n<ol>\n<li>存储DNS的文件的大小，当超过阀值大小时LRU规则进行维护。</li>\n<li>每个Host对应DNS根据不同的TTL进行维护。</li>\n<li>当存在备选IP时，当延时最低IP连接失败以后，备选IP替换上去。</li>\n<li>基于在请求对应Host的IP的时候，远端已经根据延时排序返回对应的IP队列，本地不再做多余的复杂存储与测试（如测速、稳定性测试存储、复杂的抉择策略等）。</li>\n</ol>\n<h4 id=\"3-图片加载体系\"><a href=\"#3-图片加载体系\" class=\"headerlink\" title=\"3. 图片加载体系\"></a>3. 图片加载体系</h4><blockquote>\n<p>已经开源，欢迎PR: <a href=\"https://github.com/lingochamp/QiniuImageLoader\" target=\"_blank\" rel=\"external\">lingochamp/QiniuImageLoader</a></p>\n</blockquote>\n<p>在全局图片加载漏斗模型的前提下，拥有以下特点:</p>\n<ol>\n<li>全局默认WEBP，支持指定任意格式获取图片。</li>\n<li>所有图片操作(包括缩放、高斯模糊、CenterCrop等)都放到云端处理，因此保证客户端尽可能的减少了CPU、网络、I/O资源的消耗，特别在比较差的手机上尤为明显。</li>\n<li>所有的图片请求，默认强制需要提供需要的尺寸规格(如，需要一个宽度为100dp的CenterCrop的图片，需要一个最大宽度不超过屏幕宽度一半的等比例缩放的图片)。</li>\n<li>接口简单，易用。</li>\n</ol>\n<h4 id=\"4-下载体系\"><a href=\"#4-下载体系\" class=\"headerlink\" title=\"4. 下载体系\"></a>4. 下载体系</h4><blockquote>\n<p>已经开源，欢迎PR: <a href=\"https://github.com/lingochamp/FileDownloader\" target=\"_blank\" rel=\"external\">ingochamp/FileDownloader</a></p>\n</blockquote>\n<p>我们的下载体系主要拥有以下特点:</p>\n<ol>\n<li>高并发、高稳定性。</li>\n<li>灵活配置，如配置，下载服务运行在UI进程还是运行在独立进程、配置主动确保flush到本地的间隔等。</li>\n<li>接口简单、便于用于简单的场景也便于用于复杂的场景。</li>\n<li>便于监控，已有很好的监控接口。</li>\n</ol>\n<hr>\n<p>在各类大小架构的支撑下，英语流利说的整体架构目前已经趋于稳定，但是，前方还有很多需要我们去做的，如单元测试在架构层保证规范化与常规化；如策略型需求在架构层保证可配置化；如在架构层面基于Annotation Processing封装实现快速减少重复Coding等等。无论如何，我们始终秉承，在不断发展与演进的过程中，也能不断的回馈社区。无论是源码还是架构思想本身都是在快速的贬值，唯有不断的实践、不断的迭代，不断的发展，才能使得世界更加美好。</p>\n<hr>\n<blockquote>\n<p>© 2016, 流利说技术团队(<a href=\"https://www.liulishuo.com/\" target=\"_blank\" rel=\"external\">https://www.liulishuo.com/</a>). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>随着业务层的复杂度不断增加，英语流利说Android的代码架构经历了一场华丽的蜕变，本文详细讲解了英语流利说Android端如何从一个中小型项目架构转为中大型项目架构的过程。</p>\n</blockquote>","more":"<hr>\n<p>本文已经发布到英语流利说技术团队公众号，可请直接访问: <a href=\"http://mp.weixin.qq.com/s?__biz=MzI0NjIzNDkwOA==&amp;mid=2247483673&amp;idx=1&amp;sn=ba9cf498ab78646f1a9c9e711f65c360\">英语流利说Android架构演进 - 流利说技术团队</a></p>\n<hr>\n<blockquote>\n<p>今天给大家分享的是英语流利说Android端的代码架构的演进，标题挺高大上的，其实也并非多高大上的东西，整个演进过程，也是借鉴了业界很多大型应用在架构上的沉淀以及思想，可能有些东西还有点老生常谈，不过我们保证尽量都是干货。</p>\n</blockquote>\n<p>英语流利说的架构一直在迭代调整。2015年中旬启动了一次较大规模的重构，经历了简单的半个小时会议，大家一致支持，开启了英语流利说这次的架构演进之路✌✌。</p>\n<p><img src=\"/img/lls_architecture_1.png\" alt=\"\"></p>\n<p>这是当时的Task，也是今天我们入手介绍的主要内容:</p>\n<p><img src=\"/img/lls_architecture_2.png\" alt=\"\"></p>\n<h2 id=\"I-英语流利说早期架构\"><a href=\"#I-英语流利说早期架构\" class=\"headerlink\" title=\"I. 英语流利说早期架构\"></a>I. 英语流利说早期架构</h2><blockquote>\n<p>应该有很多小型项目，在快速迭代中也存在着这样的架构，如果你们正想往中大型项目看齐，那么可能这篇文章会是你有效的解决方案之一。</p>\n</blockquote>\n<p><img src=\"/img/lls_architecture_3.png\" alt=\"\"></p>\n<p>英语流利说Android端早期的架构，主要以内部广播方式进行必要的解耦，随着不断的迭代，虽然基本的核心公用代码根据特性已经衍生出了A、B、C Module，但是上层业务复杂度不断增加，各模块相互耦合越发严重，虽然一直都有在架构上做一些小的调整，但都无法根治问题，以此维护性的问题便逐渐凸现。</p>\n<h2 id=\"II-英语流利说核心架构\"><a href=\"#II-英语流利说核心架构\" class=\"headerlink\" title=\"II. 英语流利说核心架构\"></a>II. 英语流利说核心架构</h2><blockquote>\n<p>这套架构的核心思想 <code>Plugin模式</code> 是借鉴了<a href=\"http://www.infoq.com/cn/articles/wechat-android-app-architecture\">国内公认最优秀的Android项目所采用的架构</a>，在保留架构核心思想的基础上，以尽量轻，尽量简单的原则做了一些减法以及调整。除了核心架构，我们也做了很多辅助架构为了支撑整套架构灵活性、轻便性。</p>\n</blockquote>\n<p><img src=\"/img/lls_architecture_4.png\" alt=\"\"></p>\n<p>如上图，整个项目清晰的被拆分为三个层级: 基础层、功能模块层、App模块(Application层)，其中功能模块层中的各个功能模块是我们需要解耦出来的，而基础层的每个模块遵循单向依赖关系: 从距离功能模块层最近的中央控制的<code>center</code>模块、再往下的负责全局监控的<code>monitor</code>模块、公共布局相关的<code>ui</code>模块、公共网络数据相关的<code>net</code>模块、公共底层工具的<code>sdk</code>模块直到最基本的为国际化做准备的<code>language</code>模块、供引入第三方库并二次封装的<code>support</code>模块。</p>\n<h3 id=\"1-核心架构说明\"><a href=\"#1-核心架构说明\" class=\"headerlink\" title=\"1. 核心架构说明\"></a>1. 核心架构说明</h3><h4 id=\"整体特性\"><a href=\"#整体特性\" class=\"headerlink\" title=\"整体特性\"></a>整体特性</h4><blockquote>\n<p>这套架构最明显的特征就是对功能模块层中的每个模块进行了解耦，如下图，使得App模块可以轻易的取消对任何功能模块的依赖而不影响编译与使用，因此我们也将其称为<code>Plugin模式</code>。</p>\n</blockquote>\n<p><img src=\"/img/lls_architecture_5.png\" alt=\"\"></p>\n<h4 id=\"核心功能思想\"><a href=\"#核心功能思想\" class=\"headerlink\" title=\"核心功能思想:\"></a>核心功能思想:</h4><p><img src=\"/img/lls_architecture_6.png\" alt=\"\"></p>\n<p>这套架构是就对各功能模块解耦展开的，而解耦就如A与B需要解耦，引入C，让A、B都依赖C。关系如上图，我们需要对A、B模块解耦，让A、B模块都依赖中央控制<code>center</code>模块(下文简称中控模块)，并且在中控模块中定义A、B模块需要对外开放的接口，在A、B模块中实现各自的接口，然后在App模块中通过反射将A、B模块中的实现传入中控模块，这样App模块、A模块、B模块都可以通过中控进行对各个功能模块进行访问，而当App模块没有依赖A模块时，中控模块会返回在中控模块实现的一个<code>EmptyAPlugin</code>，至此完成整个环路。</p>\n<h3 id=\"2-引入多进程层\"><a href=\"#2-引入多进程层\" class=\"headerlink\" title=\"2. 引入多进程层\"></a>2. 引入多进程层</h3><blockquote>\n<p>在基础层中嵌入多进程层，主要是由于在Android中内存共享每个JVM是独立的，在架构层面让所有的各自非UI进程的数据结构都是<code>Package Visible</code>，防止被非当前进程调用。</p>\n</blockquote>\n<p><img src=\"/img/lls_architecture_7.png\" alt=\"\"></p>\n<blockquote>\n<p>模块命名前缀为 <code>lls_process</code> 是进程模块，并且每个模块的区分以进程为单位</p>\n</blockquote>\n<h4 id=\"1-多进程的原因\"><a href=\"#1-多进程的原因\" class=\"headerlink\" title=\"1. 多进程的原因\"></a>1. 多进程的原因</h4><blockquote>\n<p>其实在后来的演进中，我们为了减少因为进程调度对手机资源(CPU、I/O)的消耗，尽可能的合并以及缩减了各类进程(保持一个常驻进程、多个以生命周期为界限的短生命周期非常驻进程)。<br>多进程化当时有受到了<a href=\"http://www.infoq.com/cn/presentations/from-360-development-see-big-mobile-application-development\">业界某大型安全应用在InfoQ上的一个关于大型移动应用开发的演讲</a>的启发，他们谈到了在一些特定场景下的优势，以及他们从之前的6个进程演变为17个进程，从而使得应用变得更加的稳定。</p>\n</blockquote>\n<p>与其说原因，不如说是谈谈适用的场景:</p>\n<ul>\n<li>提高UI进程的稳定性以及各进程各自的稳定性。</li>\n<li>独立组件充分解耦，充分独立。</li>\n<li>为用户节约内存，更加灵活（如: 只保留一个非主进程的来满足聊天的推送）。</li>\n<li>减少引入部分第三方组件所带来的风险。</li>\n<li>更有效的做UI进程的有损体验（如: 打分进程CRASH以后，在用户使用过程中，通过重启打分进程重新录音打分的机制，尽量减少用户的体验损失）。</li>\n<li>由于独立进程在自己的JVM上面，内存方面不会对UI进程的内存分配造成直接的影响，因此在一些内存占用较多如大图预览的时候，可以一次性使用，一次性回收。</li>\n</ul>\n<h4 id=\"2-多进程通讯架构\"><a href=\"#2-多进程通讯架构\" class=\"headerlink\" title=\"2. 多进程通讯架构\"></a>2. 多进程通讯架构</h4><p><img src=\"/img/lls_architecture_8.png\" alt=\"\"></p>\n<p>这套架构是封装了非UI进程组件用于让非UI进程的Service快速集成并接受绑定Binder与UI进程的UIGuard组件进行IPC，如上图，基本原则就是:</p>\n<ol>\n<li>UI进程只可通过UIGuard与另外一个进程的Service进行通信。</li>\n<li>Service单向引用其所在进程的业务层，反向的信息流通过EventBus的形式流通。</li>\n<li>UIGuard被UI进程的业务层单向引用，反向的信息流也是通过EventBus的形式流通。</li>\n<li>Service业务层可通过Binder跨进程通信时对于非<code>oneway</code>的接口Block住当前线程等待接口回传的机制，再通过UIGuard转发透传Event从而实现直接向UI进程索要数据。</li>\n</ol>\n<blockquote>\n<p>其实多进程架构我们已经通过我们的开源库<a href=\"https://github.com/lingochamp/FileDownloader\">lingochamp/FileDownloader</a>对外开源，不过为了FileDownloader独立进程与非独立进程的灵活切换，因此这套架构在FileDownloader上已经迭代为另外的版本，如果感兴趣可以看看早些的commit。</p>\n</blockquote>\n<h2 id=\"III-英语流利说常用辅助架构\"><a href=\"#III-英语流利说常用辅助架构\" class=\"headerlink\" title=\"III. 英语流利说常用辅助架构\"></a>III. 英语流利说常用辅助架构</h2><blockquote>\n<p>主要是对核心架构的辅助，以及一些在核心架构体系下遇到一些问题的解决。</p>\n</blockquote>\n<h4 id=\"1-异步加载机制\"><a href=\"#1-异步加载机制\" class=\"headerlink\" title=\"1. 异步加载机制\"></a>1. 异步加载机制</h4><blockquote>\n<p>由于核心架构中是通过反射的机制注入每个模块的具体实现，而这块的反射耗时每次都会在百毫秒左右，这是用户每次打开应用或每次UI进程被回收以后恢复都会遇到的耗时问题，因此有了异步加载机制(当然应对类似体验问题，也有一些取巧的方法可以借鉴，比如腾讯新闻的闪屏Activity的Window的背景直接使用了一张闪屏的背景图片)。</p>\n<p>我们都知道系统已经有一套通过同步序列化的恢复机制，但是相比而言，在这个场景下我们更需要的是一个异步的机制，也就是下面这套架构所提供的机制。</p>\n</blockquote>\n<p><img src=\"/img/lls_architecture_9.png\" alt=\"\"></p>\n<p>这套架构简单粗暴，但十分有效: 对<code>Activity</code>系统维系的生命周期转一层的方式，从架构方面对业务层获取到的Activity生命周期进行控制。</p>\n<h4 id=\"2-拓展灵活性EventBus\"><a href=\"#2-拓展灵活性EventBus\" class=\"headerlink\" title=\"2. 拓展灵活性EventBus\"></a>2. 拓展灵活性EventBus</h4><p>这个主要是为了弥补在一些情景下，核心架构中的接口显得不够灵活，比如有些操作需要在各个功能模块间透传。但是慎用该类方式，因为考虑到可维护性。由于这套架构网络已经很多衍生了，就不耽误各位时间多说了，有点类似简化的本地广播模型。主要作用是将发送端与接收端充分解耦。</p>\n<h4 id=\"3-监控系统体系架构\"><a href=\"#3-监控系统体系架构\" class=\"headerlink\" title=\"3. 监控系统体系架构\"></a>3. 监控系统体系架构</h4><p>对应用的监控是维护应用稳定性与对应用性能量化不可或缺的一个重要的环节，英语流利说在核心架构搭建之初就已经设计了监控模块，主要是做以下监控:</p>\n<h5 id=\"ANR监控\"><a href=\"#ANR监控\" class=\"headerlink\" title=\"ANR监控\"></a>ANR监控</h5><p>主要通过系统API监控<code>/data/anr/traces.txt</code>文件的变化，进而对其进行分析。</p>\n<h5 id=\"Crash监控\"><a href=\"#Crash监控\" class=\"headerlink\" title=\"Crash监控\"></a>Crash监控</h5><p>我们Crash上报部分采用了支持收集native层异常的第三方库: Fabric，在此基础上我们做了以下拓展:</p>\n<ul>\n<li>Crash写文件，主要结合命令系统体系使用输出最近都的crash。</li>\n<li>非UI进程的Crash不走系统默认Crash处理，走有损体验体系，对于用户不可见。</li>\n</ul>\n<h5 id=\"Activity生命周期监控\"><a href=\"#Activity生命周期监控\" class=\"headerlink\" title=\"Activity生命周期监控\"></a>Activity生命周期监控</h5><p>主要是基于 <code>Application.ActivityLifecycleCallbacks</code>，这里的监控主要是辅助以下操作:</p>\n<ul>\n<li>结合图片加载监控体系，保证在打开新页面的时候，旧页面的图片加载全部暂停。</li>\n<li>一些服务的注销。</li>\n<li><code>Activity</code>从<code>ContentView</code>开始遍历扫描，通过置空可能导致泄漏的对象来对<code>Activity</code>进行空壳化处理。</li>\n</ul>\n<h5 id=\"内存泄漏监控\"><a href=\"#内存泄漏监控\" class=\"headerlink\" title=\"内存泄漏监控\"></a>内存泄漏监控</h5><p>我们也是使用Leakcanary这个开源库，在Staging环境上进行检测。</p>\n<h5 id=\"一般性业务层级监控\"><a href=\"#一般性业务层级监控\" class=\"headerlink\" title=\"一般性业务层级监控:\"></a>一般性业务层级监控:</h5><p>这里涉及到一个日志选择性上报系统，主要是结合日志系统用于调试难以复现的BUG(默认是关闭的，目前支持用户在应用中主动打开与上传）这套系统受限于篇幅，以后再分享，也许我们会考虑进行开源。</p>\n<h5 id=\"其他监控\"><a href=\"#其他监控\" class=\"headerlink\" title=\"其他监控\"></a>其他监控</h5><p>如下载监控、DNS劫持监控等。</p>\n<blockquote>\n<p>在现有的核心架构体系下，监控的核心作用点都是其他模块，比如对UI模块的监控，对网络模块的监控等，但是其所在的基础层是一个自上向下的单向依赖关系，因此这里又会涉及到一个辅助组件 <code>MonitorPool</code> 下图是注册一个图片加载监控的案例。</p>\n</blockquote>\n<p><img src=\"/img/lls_architecture_10.png\" alt=\"\"></p>\n<h4 id=\"4-管理员系统体系架构\"><a href=\"#4-管理员系统体系架构\" class=\"headerlink\" title=\"4. 管理员系统体系架构\"></a>4. 管理员系统体系架构</h4><blockquote>\n<p>管理体系主要是为了测试人员以及开发人员在应用测试阶段能够通过一些绿色通道开启一些对外界用户不开放的功能。</p>\n</blockquote>\n<p>这套系统主要是考虑到安全性，因此放到了编译阶段完成。</p>\n<p><img src=\"/img/lls_architecture_11.png\" alt=\"\"></p>\n<h2 id=\"IV-英语流利说常用支持型架构\"><a href=\"#IV-英语流利说常用支持型架构\" class=\"headerlink\" title=\"IV. 英语流利说常用支持型架构\"></a>IV. 英语流利说常用支持型架构</h2><h4 id=\"1-文件存储体系\"><a href=\"#1-文件存储体系\" class=\"headerlink\" title=\"1. 文件存储体系\"></a>1. 文件存储体系</h4><ul>\n<li><code>LLSPath</code>主要支持版本迭代，根据版本升级提供类似数据库一套的数据迁移策略。</li>\n<li><code>LLSUserPath</code>在<code>LLSPath</code>的基础上，提供用户切换，相关路径变更以及相关的操作。</li>\n</ul>\n<p><img src=\"/img/lls_architecture_12.png\" alt=\"\"></p>\n<h4 id=\"2-防DNS劫持体系\"><a href=\"#2-防DNS劫持体系\" class=\"headerlink\" title=\"2. 防DNS劫持体系\"></a>2. 防DNS劫持体系</h4><p>采用HttpDNS，这块我们的核心思想是尽量的精简轻量并尽量维持与现有系统提供的DNS体系相同的策略，主要通过关注以下几点实现:</p>\n<ol>\n<li>存储DNS的文件的大小，当超过阀值大小时LRU规则进行维护。</li>\n<li>每个Host对应DNS根据不同的TTL进行维护。</li>\n<li>当存在备选IP时，当延时最低IP连接失败以后，备选IP替换上去。</li>\n<li>基于在请求对应Host的IP的时候，远端已经根据延时排序返回对应的IP队列，本地不再做多余的复杂存储与测试（如测速、稳定性测试存储、复杂的抉择策略等）。</li>\n</ol>\n<h4 id=\"3-图片加载体系\"><a href=\"#3-图片加载体系\" class=\"headerlink\" title=\"3. 图片加载体系\"></a>3. 图片加载体系</h4><blockquote>\n<p>已经开源，欢迎PR: <a href=\"https://github.com/lingochamp/QiniuImageLoader\">lingochamp/QiniuImageLoader</a></p>\n</blockquote>\n<p>在全局图片加载漏斗模型的前提下，拥有以下特点:</p>\n<ol>\n<li>全局默认WEBP，支持指定任意格式获取图片。</li>\n<li>所有图片操作(包括缩放、高斯模糊、CenterCrop等)都放到云端处理，因此保证客户端尽可能的减少了CPU、网络、I/O资源的消耗，特别在比较差的手机上尤为明显。</li>\n<li>所有的图片请求，默认强制需要提供需要的尺寸规格(如，需要一个宽度为100dp的CenterCrop的图片，需要一个最大宽度不超过屏幕宽度一半的等比例缩放的图片)。</li>\n<li>接口简单，易用。</li>\n</ol>\n<h4 id=\"4-下载体系\"><a href=\"#4-下载体系\" class=\"headerlink\" title=\"4. 下载体系\"></a>4. 下载体系</h4><blockquote>\n<p>已经开源，欢迎PR: <a href=\"https://github.com/lingochamp/FileDownloader\">ingochamp/FileDownloader</a></p>\n</blockquote>\n<p>我们的下载体系主要拥有以下特点:</p>\n<ol>\n<li>高并发、高稳定性。</li>\n<li>灵活配置，如配置，下载服务运行在UI进程还是运行在独立进程、配置主动确保flush到本地的间隔等。</li>\n<li>接口简单、便于用于简单的场景也便于用于复杂的场景。</li>\n<li>便于监控，已有很好的监控接口。</li>\n</ol>\n<hr>\n<p>在各类大小架构的支撑下，英语流利说的整体架构目前已经趋于稳定，但是，前方还有很多需要我们去做的，如单元测试在架构层保证规范化与常规化；如策略型需求在架构层保证可配置化；如在架构层面基于Annotation Processing封装实现快速减少重复Coding等等。无论如何，我们始终秉承，在不断发展与演进的过程中，也能不断的回馈社区。无论是源码还是架构思想本身都是在快速的贬值，唯有不断的实践、不断的迭代，不断的发展，才能使得世界更加美好。</p>\n<hr>\n<blockquote>\n<p>© 2016, 流利说技术团队(<a href=\"https://www.liulishuo.com/\">https://www.liulishuo.com/</a>). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"Kotlin","date":"2017-02-10T03:30:03.000Z","_content":"\nKotlin是一门为JVM、Android、前端开发的一门静态语言，相比Java8，它有太多的前瞻性的功能并且非常极客。\n\n> P.S 因为其标准库有700Kb左右，所以暂时没有考虑在生产环境用，前段时间, 刚好接了支付宝几个内部组件，因此都用Kotlin写了，整体感觉很不错。\n\n<!-- more -->\n\n## I. 相比Java优势:\n\n- 增量编译，Kotlin更快些\n- 代码更精准有效，更可读\n- 完全支持与Java的协同工作\n- 更加安全，更加稳定的编写方式\n\nKotlin语言是2010年Jetbrains团队为自己的团队打造的。宗旨是希望能够更简明并且消除一些Java的缺陷。由于Jetbrains团队原本打造的一系列的IDE都已经使用了Java，因此他们设计之初就考虑到Kotlin需要能够与Java协同工作，因此Kotlin是编译为Java字节码并且就考虑了如何才能让到Java工程师快速入门Kotlin。\n\n### 根据《Effective Java》Kotlin的优化\n\n#### 1. 不再需要builder:\n\n在构造函数如果需要传入大量参数时，考虑到可读性，\"Effective Java\"在第二章中的谈到了[Builder Pattern](https://en.wikipedia.org/wiki/Builder_pattern)，以此构造与对象分离，达到更灵活、更可读。\n\n在Kotlin中，由于它支持了为方法参数指定默认参数，以及支持在传入参数时，申明所赋值的参数名:\n\n```kotlin\nclass KotlinNutritionFacts(\n        private val servingSize: Int,\n        private val servings: Int,\n        private val calories: Int = 0,\n        private val fat: Int = 0,\n        private val sodium: Int = 0,\n        private val carbohydrates: Int = 0)\n```\n\n```kotlin\nval cocaCola = KotlinNutritionFacts(240,8,\n                calories = 100,\n                sodium = 35,\n                carbohydrates = 27)\n```\n\n#### 2. 单例\n\n在\"Effective Java\"的第三章中描述了单例，使得该对象在全局只有一个实例，十分的实用。\n\n在Kotlin中，由于它支持了[Object declarations](https://kotlinlang.org/docs/reference/object-declarations.html#object-declarations)，因此可以非常简明的实现单例:\n\n```kotlin\nobject KotlinElvis {\n\n    fun leaveTheBuilding() {}\n}\n```\n\n#### 3. 不用再主动编写`equals()`、`hashCode()`\n\n在\"Effective Java\"的第十五章中建议到\"除非有非常明确的理由，否则类都尽可能的定义为不可变\"，在Java定义这么一个类是一件十分繁琐的事情，因为每一个对象都需要覆写他们的`equals()`与`hashCode()`，因此\"Effective Java\"在第8章与第9章通过了18页来篆述如何更好的完成这个。\n\n在Kotlin中，由于它默认的[data classes](https://kotlinlang.org/docs/reference/data-classes.html)就已经默认实现了`equals()`、`hashCode()`等方法:\n\n```kotlin\ndata class Person(val name: String, val age: Integer)\n```\n\n> P.S [AutoValue](https://github.com/google/auto/tree/master/value)为Java实现了类似的功能。\n\n\n#### 4. 自动化`getter`与`setter`\n\n在\"Effective Java\"的第十四章中建议到对于成员变量尽量使用方法可见(通常通过提供`getter`与`setter`实现)而非直接`public`。\n\n在Kolin中，由于所有的成员变量，默认都是[property](https://kotlinlang.org/docs/reference/properties.html)，默认的对其的访问都是自动转为对其的`getter`与`setter`的访问，十分的简明:\n\n```kotlin\nclass KotlinPerson {\n\n    var name: String? = null\n\n    var age: Int? = null\n    set(value) {\n        if (value in 0..120){\n            field = value\n        } else{\n            throw IllegalArgumentException()\n        }\n    }\n}\n\n// 访问KotlinPerson\n\nval person = KotlinPerson()\nperson.name = \"Jacks\"\nperson.age = 27\n```\n\n#### 5. `Overried`变为强制性注解\n\n在Java 1.5中引入了`Overried`关键字，但这个关键字是`option`的，在\"Effective Java\"的第三十六章中说明了一定要加上这个注解一旦是覆写方法，否则在后期维护时很可能将覆写方法当做非覆写方法从而引来各种问题。\n\n在Kotlin中，`override`变为了强制性的注解以避免类似的问题。\n\n\n### 常用语法与特性\n\n#### 1. 更加安全，更加稳定的编写方式\n\n```kotlin\nvar a: String = “abc”; // 定义个一个非null的字符串变量a\na = null; // 编译直接失败\n\nvar b: String? = “abc”; // 定义一个可为null的字符串变量b\nb = null; // 编译通过\n\nval l = b.length; // 编译失败，因为b可能为null\nl = b?.length ?: -1 // 如b为null，就返回-1\nl = b?.length; // 如b为null，就返回null\nl = b!!.length; // 如b为null，就会直接抛NPE错误\nb?.let { println(b) } // 如b为null，就不执行let后面的代码块\n\nval aInt: Int? = a as? Int // 如a不是Int类型，就回返回null\n\nval nullableList: List<Int?> = listOf(1, 2, null, 4)\nval intList: List<Int> = nullableList.filterNotNull() // 过滤出列表中所有不为null的数据，组成新的队列intList\n\n// 可以通过lateinit var(不可为val)，定义一个无需在申明时初始化的non-nullable的参数，这个参数不允许被赋值为空，并且在调用时如果没有初始化会抛异常\nlateinit var lateInitValue : String\n\n// 通过by lazy { ... } 表达式，让所定义的参数在第一次访问(get)的时候执行{...}这段代码块，并赋值\nval lazyValue: String by lazy {\n  doAnything()\n  \"build lazy value\"\n}\n\n// 通过by Delegates.observable(\"默认值\")，在每次对该参数赋值的时候，都会回调回来\n// vetoable是赋值前回调；observable是赋值后回调\nvar name: String by Delegates.observable(\"<no name>\") {\n    prop, old, new ->\n    println(\"$old -> $new\")\n}\n\n// 使用map来存储参数，通常是用于解析Json之类的键对数据结构\nclass User(val map: MutableMap<String, Any?>) {\n        val name: String by map\n        var age: Int     by map\n}\nval user = User(mapOf(\n    \"name\" to \"John Doe\",\n    \"age\"  to 25\n))\nprintln(user.name) // Prints \"John Doe\"\n\n// 定义final的变量\nval aFinalProperty : String = \"final property\"\n\n// 定义final static的变量\nclass Values {\n  companion object {\n    val FINAL_STATIC_PROPERTY : String = \"final static property\"\n  }\n}\nval something = Values.FINAL_STATIC_PROPERTY\n```\n\n#### 2. 代码更精准有效，更可读\n\n```kotlin\n// 智能cast\nif (node is Leaf) {\n    return node.symbol; //智能的将node转为Leaf类型，暴露Leaf的变量(symbol)\n}\n\n// 类似C++中的默认参数值\nclass Developer(val name: String,\n val age: Int,\n val someValue: Int = 0, // 当未传入someValue时，该参数将被赋值为0\n ) {\n}\n// 支持指明参数，可读性更强\nval anand = Developer(name = “Anand Gaurav”, age = 20);\n\n// 支持Java8的各项新特性\nval numbers = arrayListOf(-42, 17, 13, -9, 12) //创建一个List，并给定值\nval nonNegative = numbers.filter { it >= 0 } //从numbers中过滤出>=0的队列\n\n// 下面这中Java8中的Stream特性，是不是特像RxJava\nlistOf(1, 2, 3, 4) // 列出 1, 2, 3, 4\n.map { it * 10 } // 所有值乘以10 10, 20, 30, 40\n.filter { it > 20 } // 过滤出>20的值 30, 40\n.forEach { print(it) } // 打印出每个值 30, 40\n\n// 通过as Button，进行转换，可读性更强\nval button = findViewById(R.id.fab) as Button\nbutton.setOnClickListener { view -> /* your code */} // lambda表达式\n\n// 可以直接在赋值中使用表达式，甚至内嵌执行语句\nval max = if (a > b) a else b\nval max = if (a > b) {\n    print(\"Choose a\")\n    a\n} else {\n    print(\"Choose b\")\n    b\n}\n\n// 支持when的表达式\nprintln(when (language) {\n    \"EN\" -> \"Hello!\"\n    \"FR\" -> \"Salut!\"\n    else -> \"Sorry, I can't greet you in $language yet\"\n})\n\n// 支持in，表达在一定的范围内作为条件\nwhen (x) {\n    in 1..10 -> print(\"x is in the range\")\n    in validNumberArray -> print(\"x is valid\")\n    else -> print(\"none of the above\")\n}\n\n// 为Date类创建一个方法，方法名是isTuesday，执行内容是判断Date中的成员变量day是否等于2\nfun Date.isTuesday() = day == 2\n\n```\n\n## II. Kotlin Unit-test\n\n#### 1. 遇到的问题\n\n对于编程设计来说，非常好的实践就是对拓展开放，对修改关闭的\"开闭原则\"，因为在Java中，我们对继承实在是太滥用了(可以参考[架构设计基础知识整理](https://blog.dreamtobe.cn/2016/10/25/oo_architecture/)中\"使用组合而非继承\")，也正是因为想要Kotlin中使这个情况得到好转，**因此Kotlin默认对所有Class与Method都是`final`的**， 除非使用`open`主动申明。\n\n可是`final`的Class对于单元测试带来了一定的困难，因为我们在写Java的单元测试的时候，已经习惯了使用类似Mockito这样的库，去mock一些类，以达到纯粹的单元测试(参考[Android单元测试与模拟测试](https://blog.dreamtobe.cn/2016/10/28/android_test/))，正因为`final`类是不支持继承的，因此Mockito 2.1.0之前的版本对这样的类是无法mock的，虽然已经有了PowerMock，可以对静态方法进行mock，但是如果都使用PowerMock会显得很重，而且不灵活。\n\n#### 2. 解决方法\n\n##### 2.1 Javassist\n\n> 实际测试kotlin-testrunner并不work，抽空的时候再研究研究，如果已经解决了欢迎评论指点\n\n因为[Javassist](http://jboss-javassist.github.io/javassist/)这个开源库，支持在运行时修改Java字节码，因此刚好可以解决这个问题。dpreussler借助这个库写了一个[kotlin-testrunner](https://github.com/dpreussler/kotlin-testrunner)，创建一个ClassLoader，在加载指定类的时候将其`FINAL`的`modifiers`清除，并且通过`TestRunner`传入我们的ClassLoader，防止存在同一个Class在多个Loader中不唯一的问题(参考[Android 动态加载dex](https://blog.dreamtobe.cn/2015/12/07/android_dynamic_dex/))，以此解决该问题。\n\n##### 2.2 Mockito 2.1.0 或更高版本\n\nMockito 2.1.0 及之后的版本原生支持了对`final`的method与class进行mock，使用方法与之前保持一致。 -- **实测是work的**。\n\n**但是** 由于Mockito推出2.1.0时，对代码进行了大量的重构，虽然PowerMock已经在计划中通过2.0版本来对其进行适配，但是由于Mockito 2.1.0的重构，工作量还是比较大，因此还在[计划中](https://github.com/powermock/powermock/issues/706#issuecomment-264097614)。\n\n#### 3. Kotlin单元测试总结\n\n由于PowerMock还未适配Mockito v2.1.0，因此目前Kotlin中如果需要mock `static`的方法会麻烦些（可以使用通用方法: 封装一层`非static`的方法，在里面调用原本的`static`方法，然后对这个封装后的方法进行mock）。其他都比较流畅。\n\n> 可以借助[nhaarman/mockito-kotlin](https://github.com/nhaarman/mockito-kotlin)使得更好的用Kotlin写单元测试。\n\n## III. Java中实现Kotlin的特性\n\n> 无论是多出736KB的Kotlin基本库大小，还是公司不允许，**导致只能使用Java，但是又想使用一些Kotlin特性**。可以看看接下来提到的。\n\n#### 1. Data classes\n\n> Kotlin中`Data classes`特性，是在类前申明`data`，就会自动生成`equals()`、`hashCode()`、`toString()`、`copy()`方法。\n\nJava中可以通过[Lombok - @Data](https://github.com/mplushnikov/lombok-intellij-plugin)实现这些特性。\n\n#### 2. Lambda\n\n> Kotlin支持绝大多数Java8的特性，但是Android目前还不支持Java8(虽然Jack&Jill编译器支持了，但是其在混淆等各方面的还不完善)。\n\nJava7中的推荐使用[retrolambda](https://github.com/orfjackal/retrolambda)进行解决。\n\n**需要特别注意的是**: Kotlin中采用`inline`Lambda是不会增加方法数的，但是使用Retrolambda/Jacks&Jill是会增加方法数的，可以参看下图([Jake Wharton在Exploring Java Hidden Costs演说](http://jakewharton.com/exploring-java-hidden-costs/)中提到的生成的方法数对比图):\n\n![](/img/kotlin-1.png)\n\n> P.S: Java对调用方法的开销可以参照: [Android优化 - 2.编码习惯](https://blog.dreamtobe.cn/2015/10/26/android_optimize/) 中的纂述。\n\n#### 3. 数据控制与操作\n\n> Kotlin中通过Streams(类似Java8的Streams)使得对数据的操作变得简单便捷，可读性高等特性。虽然Jack&Jill也提供了Streams的特性，但是要求最小sdk版本在24(`minSdkVersion = 24`)，不用考虑其他原因，就这一条目前就很难被接受。\n\nJava7中推荐使用[Lightweight-Stream-API](https://github.com/aNNiMON/Lightweight-Stream-API)实现这些特性。\n\n#### 4. 对类拓展函数\n\n> Kotlin中支持在类外对某个已有类申明函数，十分的方便。\n\nJava中可以通过[Lombok - @ExtensionMethod](https://github.com/mplushnikov/lombok-intellij-plugin)实现这些特性。\n\n\n---\n\n- 文章创建时间: 2016-11-17，[本文迭代日志](https://github.com/Jacksgong/Blog/commits/master/source/_posts/kotlin.md)。\n\n---\n\n本文已经发布到JackBlog公众号: [Kotlin - JacksBlog](https://mp.weixin.qq.com/s?__biz=MzIyMjQxMzAzOA==&mid=2247483689&idx=1&sn=a6261038ae037d6fb54a1b66f51a1623)\n\n---\n\n- [Why You Must Try Kotlin For Android Development?](https://medium.com/@amitshekhar/why-you-must-try-kotlin-for-android-development-e14d00c8084b#.i677kd5qs)\n- [Null Safety](https://kotlinlang.org/docs/reference/null-safety.html)\n- [Advancing Android Development with Kotlin](https://realm.io/news/oredev-jake-wharton-kotlin-advancing-android-dev/)\n- [Classes and Inheritance](https://kotlinlang.org/docs/reference/classes.html)\n- [Never say final: mocking Kotlin classes in unit tests](https://medium.com/@dpreussler/never-say-final-mocking-kotlin-classes-in-unit-tests-314d275b82b1#.665w1rs47)\n- [Kotlin - lateinit VS Any? = null](http://stackoverflow.com/questions/35691123/kotlin-lateinit-vs-any-null)\n- [Delegated Properties](https://kotlinlang.org/docs/reference/delegated-properties.html)\n- [Kotlin - Property initialization using “by lazy” vs. “lateinit”](http://stackoverflow.com/questions/36623177/kotlin-property-initialization-using-by-lazy-vs-lateinit)\n- [Static data in Kotlin](http://stackoverflow.com/questions/37482378/static-data-in-kotlin#)\n- [Living(Android) without Kotlin](https://hackernoon.com/living-android-without-kotlin-db7391a2b170#.dcvfz0j06)\n- [How “Effective Java” may have influenced the design of Kotlin — Part 1](https://medium.com/@lukleDev/how-effective-java-may-have-influenced-the-design-of-kotlin-part-1-45fd64c2f974#.r7qt7y819)\n- [Android Testing with Kotlin](http://fernandocejas.com/2017/02/03/android-testing-with-kotlin/)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/kotlin.md","raw":"title: Kotlin\ndate: 2017-02-10 11:30:03\npermalink: 2016/11/30/kotlin\ntags:\n- Kotlin\n- Java\n- Programing\n- Effective Java\n\n---\n\nKotlin是一门为JVM、Android、前端开发的一门静态语言，相比Java8，它有太多的前瞻性的功能并且非常极客。\n\n> P.S 因为其标准库有700Kb左右，所以暂时没有考虑在生产环境用，前段时间, 刚好接了支付宝几个内部组件，因此都用Kotlin写了，整体感觉很不错。\n\n<!-- more -->\n\n## I. 相比Java优势:\n\n- 增量编译，Kotlin更快些\n- 代码更精准有效，更可读\n- 完全支持与Java的协同工作\n- 更加安全，更加稳定的编写方式\n\nKotlin语言是2010年Jetbrains团队为自己的团队打造的。宗旨是希望能够更简明并且消除一些Java的缺陷。由于Jetbrains团队原本打造的一系列的IDE都已经使用了Java，因此他们设计之初就考虑到Kotlin需要能够与Java协同工作，因此Kotlin是编译为Java字节码并且就考虑了如何才能让到Java工程师快速入门Kotlin。\n\n### 根据《Effective Java》Kotlin的优化\n\n#### 1. 不再需要builder:\n\n在构造函数如果需要传入大量参数时，考虑到可读性，\"Effective Java\"在第二章中的谈到了[Builder Pattern](https://en.wikipedia.org/wiki/Builder_pattern)，以此构造与对象分离，达到更灵活、更可读。\n\n在Kotlin中，由于它支持了为方法参数指定默认参数，以及支持在传入参数时，申明所赋值的参数名:\n\n```kotlin\nclass KotlinNutritionFacts(\n        private val servingSize: Int,\n        private val servings: Int,\n        private val calories: Int = 0,\n        private val fat: Int = 0,\n        private val sodium: Int = 0,\n        private val carbohydrates: Int = 0)\n```\n\n```kotlin\nval cocaCola = KotlinNutritionFacts(240,8,\n                calories = 100,\n                sodium = 35,\n                carbohydrates = 27)\n```\n\n#### 2. 单例\n\n在\"Effective Java\"的第三章中描述了单例，使得该对象在全局只有一个实例，十分的实用。\n\n在Kotlin中，由于它支持了[Object declarations](https://kotlinlang.org/docs/reference/object-declarations.html#object-declarations)，因此可以非常简明的实现单例:\n\n```kotlin\nobject KotlinElvis {\n\n    fun leaveTheBuilding() {}\n}\n```\n\n#### 3. 不用再主动编写`equals()`、`hashCode()`\n\n在\"Effective Java\"的第十五章中建议到\"除非有非常明确的理由，否则类都尽可能的定义为不可变\"，在Java定义这么一个类是一件十分繁琐的事情，因为每一个对象都需要覆写他们的`equals()`与`hashCode()`，因此\"Effective Java\"在第8章与第9章通过了18页来篆述如何更好的完成这个。\n\n在Kotlin中，由于它默认的[data classes](https://kotlinlang.org/docs/reference/data-classes.html)就已经默认实现了`equals()`、`hashCode()`等方法:\n\n```kotlin\ndata class Person(val name: String, val age: Integer)\n```\n\n> P.S [AutoValue](https://github.com/google/auto/tree/master/value)为Java实现了类似的功能。\n\n\n#### 4. 自动化`getter`与`setter`\n\n在\"Effective Java\"的第十四章中建议到对于成员变量尽量使用方法可见(通常通过提供`getter`与`setter`实现)而非直接`public`。\n\n在Kolin中，由于所有的成员变量，默认都是[property](https://kotlinlang.org/docs/reference/properties.html)，默认的对其的访问都是自动转为对其的`getter`与`setter`的访问，十分的简明:\n\n```kotlin\nclass KotlinPerson {\n\n    var name: String? = null\n\n    var age: Int? = null\n    set(value) {\n        if (value in 0..120){\n            field = value\n        } else{\n            throw IllegalArgumentException()\n        }\n    }\n}\n\n// 访问KotlinPerson\n\nval person = KotlinPerson()\nperson.name = \"Jacks\"\nperson.age = 27\n```\n\n#### 5. `Overried`变为强制性注解\n\n在Java 1.5中引入了`Overried`关键字，但这个关键字是`option`的，在\"Effective Java\"的第三十六章中说明了一定要加上这个注解一旦是覆写方法，否则在后期维护时很可能将覆写方法当做非覆写方法从而引来各种问题。\n\n在Kotlin中，`override`变为了强制性的注解以避免类似的问题。\n\n\n### 常用语法与特性\n\n#### 1. 更加安全，更加稳定的编写方式\n\n```kotlin\nvar a: String = “abc”; // 定义个一个非null的字符串变量a\na = null; // 编译直接失败\n\nvar b: String? = “abc”; // 定义一个可为null的字符串变量b\nb = null; // 编译通过\n\nval l = b.length; // 编译失败，因为b可能为null\nl = b?.length ?: -1 // 如b为null，就返回-1\nl = b?.length; // 如b为null，就返回null\nl = b!!.length; // 如b为null，就会直接抛NPE错误\nb?.let { println(b) } // 如b为null，就不执行let后面的代码块\n\nval aInt: Int? = a as? Int // 如a不是Int类型，就回返回null\n\nval nullableList: List<Int?> = listOf(1, 2, null, 4)\nval intList: List<Int> = nullableList.filterNotNull() // 过滤出列表中所有不为null的数据，组成新的队列intList\n\n// 可以通过lateinit var(不可为val)，定义一个无需在申明时初始化的non-nullable的参数，这个参数不允许被赋值为空，并且在调用时如果没有初始化会抛异常\nlateinit var lateInitValue : String\n\n// 通过by lazy { ... } 表达式，让所定义的参数在第一次访问(get)的时候执行{...}这段代码块，并赋值\nval lazyValue: String by lazy {\n  doAnything()\n  \"build lazy value\"\n}\n\n// 通过by Delegates.observable(\"默认值\")，在每次对该参数赋值的时候，都会回调回来\n// vetoable是赋值前回调；observable是赋值后回调\nvar name: String by Delegates.observable(\"<no name>\") {\n    prop, old, new ->\n    println(\"$old -> $new\")\n}\n\n// 使用map来存储参数，通常是用于解析Json之类的键对数据结构\nclass User(val map: MutableMap<String, Any?>) {\n        val name: String by map\n        var age: Int     by map\n}\nval user = User(mapOf(\n    \"name\" to \"John Doe\",\n    \"age\"  to 25\n))\nprintln(user.name) // Prints \"John Doe\"\n\n// 定义final的变量\nval aFinalProperty : String = \"final property\"\n\n// 定义final static的变量\nclass Values {\n  companion object {\n    val FINAL_STATIC_PROPERTY : String = \"final static property\"\n  }\n}\nval something = Values.FINAL_STATIC_PROPERTY\n```\n\n#### 2. 代码更精准有效，更可读\n\n```kotlin\n// 智能cast\nif (node is Leaf) {\n    return node.symbol; //智能的将node转为Leaf类型，暴露Leaf的变量(symbol)\n}\n\n// 类似C++中的默认参数值\nclass Developer(val name: String,\n val age: Int,\n val someValue: Int = 0, // 当未传入someValue时，该参数将被赋值为0\n ) {\n}\n// 支持指明参数，可读性更强\nval anand = Developer(name = “Anand Gaurav”, age = 20);\n\n// 支持Java8的各项新特性\nval numbers = arrayListOf(-42, 17, 13, -9, 12) //创建一个List，并给定值\nval nonNegative = numbers.filter { it >= 0 } //从numbers中过滤出>=0的队列\n\n// 下面这中Java8中的Stream特性，是不是特像RxJava\nlistOf(1, 2, 3, 4) // 列出 1, 2, 3, 4\n.map { it * 10 } // 所有值乘以10 10, 20, 30, 40\n.filter { it > 20 } // 过滤出>20的值 30, 40\n.forEach { print(it) } // 打印出每个值 30, 40\n\n// 通过as Button，进行转换，可读性更强\nval button = findViewById(R.id.fab) as Button\nbutton.setOnClickListener { view -> /* your code */} // lambda表达式\n\n// 可以直接在赋值中使用表达式，甚至内嵌执行语句\nval max = if (a > b) a else b\nval max = if (a > b) {\n    print(\"Choose a\")\n    a\n} else {\n    print(\"Choose b\")\n    b\n}\n\n// 支持when的表达式\nprintln(when (language) {\n    \"EN\" -> \"Hello!\"\n    \"FR\" -> \"Salut!\"\n    else -> \"Sorry, I can't greet you in $language yet\"\n})\n\n// 支持in，表达在一定的范围内作为条件\nwhen (x) {\n    in 1..10 -> print(\"x is in the range\")\n    in validNumberArray -> print(\"x is valid\")\n    else -> print(\"none of the above\")\n}\n\n// 为Date类创建一个方法，方法名是isTuesday，执行内容是判断Date中的成员变量day是否等于2\nfun Date.isTuesday() = day == 2\n\n```\n\n## II. Kotlin Unit-test\n\n#### 1. 遇到的问题\n\n对于编程设计来说，非常好的实践就是对拓展开放，对修改关闭的\"开闭原则\"，因为在Java中，我们对继承实在是太滥用了(可以参考[架构设计基础知识整理](https://blog.dreamtobe.cn/2016/10/25/oo_architecture/)中\"使用组合而非继承\")，也正是因为想要Kotlin中使这个情况得到好转，**因此Kotlin默认对所有Class与Method都是`final`的**， 除非使用`open`主动申明。\n\n可是`final`的Class对于单元测试带来了一定的困难，因为我们在写Java的单元测试的时候，已经习惯了使用类似Mockito这样的库，去mock一些类，以达到纯粹的单元测试(参考[Android单元测试与模拟测试](https://blog.dreamtobe.cn/2016/10/28/android_test/))，正因为`final`类是不支持继承的，因此Mockito 2.1.0之前的版本对这样的类是无法mock的，虽然已经有了PowerMock，可以对静态方法进行mock，但是如果都使用PowerMock会显得很重，而且不灵活。\n\n#### 2. 解决方法\n\n##### 2.1 Javassist\n\n> 实际测试kotlin-testrunner并不work，抽空的时候再研究研究，如果已经解决了欢迎评论指点\n\n因为[Javassist](http://jboss-javassist.github.io/javassist/)这个开源库，支持在运行时修改Java字节码，因此刚好可以解决这个问题。dpreussler借助这个库写了一个[kotlin-testrunner](https://github.com/dpreussler/kotlin-testrunner)，创建一个ClassLoader，在加载指定类的时候将其`FINAL`的`modifiers`清除，并且通过`TestRunner`传入我们的ClassLoader，防止存在同一个Class在多个Loader中不唯一的问题(参考[Android 动态加载dex](https://blog.dreamtobe.cn/2015/12/07/android_dynamic_dex/))，以此解决该问题。\n\n##### 2.2 Mockito 2.1.0 或更高版本\n\nMockito 2.1.0 及之后的版本原生支持了对`final`的method与class进行mock，使用方法与之前保持一致。 -- **实测是work的**。\n\n**但是** 由于Mockito推出2.1.0时，对代码进行了大量的重构，虽然PowerMock已经在计划中通过2.0版本来对其进行适配，但是由于Mockito 2.1.0的重构，工作量还是比较大，因此还在[计划中](https://github.com/powermock/powermock/issues/706#issuecomment-264097614)。\n\n#### 3. Kotlin单元测试总结\n\n由于PowerMock还未适配Mockito v2.1.0，因此目前Kotlin中如果需要mock `static`的方法会麻烦些（可以使用通用方法: 封装一层`非static`的方法，在里面调用原本的`static`方法，然后对这个封装后的方法进行mock）。其他都比较流畅。\n\n> 可以借助[nhaarman/mockito-kotlin](https://github.com/nhaarman/mockito-kotlin)使得更好的用Kotlin写单元测试。\n\n## III. Java中实现Kotlin的特性\n\n> 无论是多出736KB的Kotlin基本库大小，还是公司不允许，**导致只能使用Java，但是又想使用一些Kotlin特性**。可以看看接下来提到的。\n\n#### 1. Data classes\n\n> Kotlin中`Data classes`特性，是在类前申明`data`，就会自动生成`equals()`、`hashCode()`、`toString()`、`copy()`方法。\n\nJava中可以通过[Lombok - @Data](https://github.com/mplushnikov/lombok-intellij-plugin)实现这些特性。\n\n#### 2. Lambda\n\n> Kotlin支持绝大多数Java8的特性，但是Android目前还不支持Java8(虽然Jack&Jill编译器支持了，但是其在混淆等各方面的还不完善)。\n\nJava7中的推荐使用[retrolambda](https://github.com/orfjackal/retrolambda)进行解决。\n\n**需要特别注意的是**: Kotlin中采用`inline`Lambda是不会增加方法数的，但是使用Retrolambda/Jacks&Jill是会增加方法数的，可以参看下图([Jake Wharton在Exploring Java Hidden Costs演说](http://jakewharton.com/exploring-java-hidden-costs/)中提到的生成的方法数对比图):\n\n![](/img/kotlin-1.png)\n\n> P.S: Java对调用方法的开销可以参照: [Android优化 - 2.编码习惯](https://blog.dreamtobe.cn/2015/10/26/android_optimize/) 中的纂述。\n\n#### 3. 数据控制与操作\n\n> Kotlin中通过Streams(类似Java8的Streams)使得对数据的操作变得简单便捷，可读性高等特性。虽然Jack&Jill也提供了Streams的特性，但是要求最小sdk版本在24(`minSdkVersion = 24`)，不用考虑其他原因，就这一条目前就很难被接受。\n\nJava7中推荐使用[Lightweight-Stream-API](https://github.com/aNNiMON/Lightweight-Stream-API)实现这些特性。\n\n#### 4. 对类拓展函数\n\n> Kotlin中支持在类外对某个已有类申明函数，十分的方便。\n\nJava中可以通过[Lombok - @ExtensionMethod](https://github.com/mplushnikov/lombok-intellij-plugin)实现这些特性。\n\n\n---\n\n- 文章创建时间: 2016-11-17，[本文迭代日志](https://github.com/Jacksgong/Blog/commits/master/source/_posts/kotlin.md)。\n\n---\n\n本文已经发布到JackBlog公众号: [Kotlin - JacksBlog](https://mp.weixin.qq.com/s?__biz=MzIyMjQxMzAzOA==&mid=2247483689&idx=1&sn=a6261038ae037d6fb54a1b66f51a1623)\n\n---\n\n- [Why You Must Try Kotlin For Android Development?](https://medium.com/@amitshekhar/why-you-must-try-kotlin-for-android-development-e14d00c8084b#.i677kd5qs)\n- [Null Safety](https://kotlinlang.org/docs/reference/null-safety.html)\n- [Advancing Android Development with Kotlin](https://realm.io/news/oredev-jake-wharton-kotlin-advancing-android-dev/)\n- [Classes and Inheritance](https://kotlinlang.org/docs/reference/classes.html)\n- [Never say final: mocking Kotlin classes in unit tests](https://medium.com/@dpreussler/never-say-final-mocking-kotlin-classes-in-unit-tests-314d275b82b1#.665w1rs47)\n- [Kotlin - lateinit VS Any? = null](http://stackoverflow.com/questions/35691123/kotlin-lateinit-vs-any-null)\n- [Delegated Properties](https://kotlinlang.org/docs/reference/delegated-properties.html)\n- [Kotlin - Property initialization using “by lazy” vs. “lateinit”](http://stackoverflow.com/questions/36623177/kotlin-property-initialization-using-by-lazy-vs-lateinit)\n- [Static data in Kotlin](http://stackoverflow.com/questions/37482378/static-data-in-kotlin#)\n- [Living(Android) without Kotlin](https://hackernoon.com/living-android-without-kotlin-db7391a2b170#.dcvfz0j06)\n- [How “Effective Java” may have influenced the design of Kotlin — Part 1](https://medium.com/@lukleDev/how-effective-java-may-have-influenced-the-design-of-kotlin-part-1-45fd64c2f974#.r7qt7y819)\n- [Android Testing with Kotlin](http://fernandocejas.com/2017/02/03/android-testing-with-kotlin/)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2016/11/30/kotlin","published":1,"updated":"2017-02-11T07:45:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66j1003395buvdd8yqhp","content":"<p>Kotlin是一门为JVM、Android、前端开发的一门静态语言，相比Java8，它有太多的前瞻性的功能并且非常极客。</p>\n<blockquote>\n<p>P.S 因为其标准库有700Kb左右，所以暂时没有考虑在生产环境用，前段时间, 刚好接了支付宝几个内部组件，因此都用Kotlin写了，整体感觉很不错。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"I-相比Java优势\"><a href=\"#I-相比Java优势\" class=\"headerlink\" title=\"I. 相比Java优势:\"></a>I. 相比Java优势:</h2><ul>\n<li>增量编译，Kotlin更快些</li>\n<li>代码更精准有效，更可读</li>\n<li>完全支持与Java的协同工作</li>\n<li>更加安全，更加稳定的编写方式</li>\n</ul>\n<p>Kotlin语言是2010年Jetbrains团队为自己的团队打造的。宗旨是希望能够更简明并且消除一些Java的缺陷。由于Jetbrains团队原本打造的一系列的IDE都已经使用了Java，因此他们设计之初就考虑到Kotlin需要能够与Java协同工作，因此Kotlin是编译为Java字节码并且就考虑了如何才能让到Java工程师快速入门Kotlin。</p>\n<h3 id=\"根据《Effective-Java》Kotlin的优化\"><a href=\"#根据《Effective-Java》Kotlin的优化\" class=\"headerlink\" title=\"根据《Effective Java》Kotlin的优化\"></a>根据《Effective Java》Kotlin的优化</h3><h4 id=\"1-不再需要builder\"><a href=\"#1-不再需要builder\" class=\"headerlink\" title=\"1. 不再需要builder:\"></a>1. 不再需要builder:</h4><p>在构造函数如果需要传入大量参数时，考虑到可读性，”Effective Java”在第二章中的谈到了<a href=\"https://en.wikipedia.org/wiki/Builder_pattern\" target=\"_blank\" rel=\"external\">Builder Pattern</a>，以此构造与对象分离，达到更灵活、更可读。</p>\n<p>在Kotlin中，由于它支持了为方法参数指定默认参数，以及支持在传入参数时，申明所赋值的参数名:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KotlinNutritionFacts</span></span>(</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> servingSize: <span class=\"built_in\">Int</span>,</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> servings: <span class=\"built_in\">Int</span>,</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> calories: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span>,</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> fat: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span>,</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> sodium: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span>,</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> carbohydrates: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span>)</div></pre></td></tr></table></figure>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> cocaCola = KotlinNutritionFacts(<span class=\"number\">240</span>,<span class=\"number\">8</span>,</div><div class=\"line\">                calories = <span class=\"number\">100</span>,</div><div class=\"line\">                sodium = <span class=\"number\">35</span>,</div><div class=\"line\">                carbohydrates = <span class=\"number\">27</span>)</div></pre></td></tr></table></figure>\n<h4 id=\"2-单例\"><a href=\"#2-单例\" class=\"headerlink\" title=\"2. 单例\"></a>2. 单例</h4><p>在”Effective Java”的第三章中描述了单例，使得该对象在全局只有一个实例，十分的实用。</p>\n<p>在Kotlin中，由于它支持了<a href=\"https://kotlinlang.org/docs/reference/object-declarations.html#object-declarations\" target=\"_blank\" rel=\"external\">Object declarations</a>，因此可以非常简明的实现单例:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">object</span> KotlinElvis &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">leaveTheBuilding</span><span class=\"params\">()</span></span> &#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-不用再主动编写equals-、hashCode\"><a href=\"#3-不用再主动编写equals-、hashCode\" class=\"headerlink\" title=\"3. 不用再主动编写equals()、hashCode()\"></a>3. 不用再主动编写<code>equals()</code>、<code>hashCode()</code></h4><p>在”Effective Java”的第十五章中建议到”除非有非常明确的理由，否则类都尽可能的定义为不可变”，在Java定义这么一个类是一件十分繁琐的事情，因为每一个对象都需要覆写他们的<code>equals()</code>与<code>hashCode()</code>，因此”Effective Java”在第8章与第9章通过了18页来篆述如何更好的完成这个。</p>\n<p>在Kotlin中，由于它默认的<a href=\"https://kotlinlang.org/docs/reference/data-classes.html\" target=\"_blank\" rel=\"external\">data classes</a>就已经默认实现了<code>equals()</code>、<code>hashCode()</code>等方法:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>(<span class=\"keyword\">val</span> name: String, <span class=\"keyword\">val</span> age: Integer)</div></pre></td></tr></table></figure>\n<blockquote>\n<p>P.S <a href=\"https://github.com/google/auto/tree/master/value\" target=\"_blank\" rel=\"external\">AutoValue</a>为Java实现了类似的功能。</p>\n</blockquote>\n<h4 id=\"4-自动化getter与setter\"><a href=\"#4-自动化getter与setter\" class=\"headerlink\" title=\"4. 自动化getter与setter\"></a>4. 自动化<code>getter</code>与<code>setter</code></h4><p>在”Effective Java”的第十四章中建议到对于成员变量尽量使用方法可见(通常通过提供<code>getter</code>与<code>setter</code>实现)而非直接<code>public</code>。</p>\n<p>在Kolin中，由于所有的成员变量，默认都是<a href=\"https://kotlinlang.org/docs/reference/properties.html\" target=\"_blank\" rel=\"external\">property</a>，默认的对其的访问都是自动转为对其的<code>getter</code>与<code>setter</code>的访问，十分的简明:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KotlinPerson</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> name: String? = <span class=\"literal\">null</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> age: <span class=\"built_in\">Int</span>? = <span class=\"literal\">null</span></div><div class=\"line\">    <span class=\"keyword\">set</span>(value) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (value <span class=\"keyword\">in</span> <span class=\"number\">0.</span><span class=\"number\">.120</span>)&#123;</div><div class=\"line\">            field = value</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> IllegalArgumentException()</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 访问KotlinPerson</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">val</span> person = KotlinPerson()</div><div class=\"line\">person.name = <span class=\"string\">\"Jacks\"</span></div><div class=\"line\">person.age = <span class=\"number\">27</span></div></pre></td></tr></table></figure>\n<h4 id=\"5-Overried变为强制性注解\"><a href=\"#5-Overried变为强制性注解\" class=\"headerlink\" title=\"5. Overried变为强制性注解\"></a>5. <code>Overried</code>变为强制性注解</h4><p>在Java 1.5中引入了<code>Overried</code>关键字，但这个关键字是<code>option</code>的，在”Effective Java”的第三十六章中说明了一定要加上这个注解一旦是覆写方法，否则在后期维护时很可能将覆写方法当做非覆写方法从而引来各种问题。</p>\n<p>在Kotlin中，<code>override</code>变为了强制性的注解以避免类似的问题。</p>\n<h3 id=\"常用语法与特性\"><a href=\"#常用语法与特性\" class=\"headerlink\" title=\"常用语法与特性\"></a>常用语法与特性</h3><h4 id=\"1-更加安全，更加稳定的编写方式\"><a href=\"#1-更加安全，更加稳定的编写方式\" class=\"headerlink\" title=\"1. 更加安全，更加稳定的编写方式\"></a>1. 更加安全，更加稳定的编写方式</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a: String = “abc”; <span class=\"comment\">// 定义个一个非null的字符串变量a</span></div><div class=\"line\">a = <span class=\"literal\">null</span>; <span class=\"comment\">// 编译直接失败</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> b: String? = “abc”; <span class=\"comment\">// 定义一个可为null的字符串变量b</span></div><div class=\"line\">b = <span class=\"literal\">null</span>; <span class=\"comment\">// 编译通过</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">val</span> l = b.length; <span class=\"comment\">// 编译失败，因为b可能为null</span></div><div class=\"line\">l = b?.length ?: <span class=\"number\">-1</span> <span class=\"comment\">// 如b为null，就返回-1</span></div><div class=\"line\">l = b?.length; <span class=\"comment\">// 如b为null，就返回null</span></div><div class=\"line\">l = b!!.length; <span class=\"comment\">// 如b为null，就会直接抛NPE错误</span></div><div class=\"line\">b?.let &#123; println(b) &#125; <span class=\"comment\">// 如b为null，就不执行let后面的代码块</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">val</span> aInt: <span class=\"built_in\">Int</span>? = a <span class=\"keyword\">as</span>? <span class=\"built_in\">Int</span> <span class=\"comment\">// 如a不是Int类型，就回返回null</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">val</span> nullableList: List&lt;<span class=\"built_in\">Int</span>?&gt; = listOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"literal\">null</span>, <span class=\"number\">4</span>)</div><div class=\"line\"><span class=\"keyword\">val</span> intList: List&lt;<span class=\"built_in\">Int</span>&gt; = nullableList.filterNotNull() <span class=\"comment\">// 过滤出列表中所有不为null的数据，组成新的队列intList</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 可以通过lateinit var(不可为val)，定义一个无需在申明时初始化的non-nullable的参数，这个参数不允许被赋值为空，并且在调用时如果没有初始化会抛异常</span></div><div class=\"line\">lateinit <span class=\"keyword\">var</span> lateInitValue : String</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 通过by lazy &#123; ... &#125; 表达式，让所定义的参数在第一次访问(get)的时候执行&#123;...&#125;这段代码块，并赋值</span></div><div class=\"line\"><span class=\"keyword\">val</span> lazyValue: String <span class=\"keyword\">by</span> lazy &#123;</div><div class=\"line\">  doAnything()</div><div class=\"line\">  <span class=\"string\">\"build lazy value\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 通过by Delegates.observable(\"默认值\")，在每次对该参数赋值的时候，都会回调回来</span></div><div class=\"line\"><span class=\"comment\">// vetoable是赋值前回调；observable是赋值后回调</span></div><div class=\"line\"><span class=\"keyword\">var</span> name: String <span class=\"keyword\">by</span> Delegates.observable(<span class=\"string\">\"&lt;no name&gt;\"</span>) &#123;</div><div class=\"line\">    prop, old, new -&gt;</div><div class=\"line\">    println(<span class=\"string\">\"<span class=\"subst\">$old</span> -&gt; <span class=\"subst\">$new</span>\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用map来存储参数，通常是用于解析Json之类的键对数据结构</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span>(<span class=\"keyword\">val</span> map: MutableMap&lt;String, Any?&gt;) &#123;</div><div class=\"line\">        <span class=\"keyword\">val</span> name: String <span class=\"keyword\">by</span> map</div><div class=\"line\">        <span class=\"keyword\">var</span> age: <span class=\"built_in\">Int</span>     <span class=\"keyword\">by</span> map</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">val</span> user = User(mapOf(</div><div class=\"line\">    <span class=\"string\">\"name\"</span> to <span class=\"string\">\"John Doe\"</span>,</div><div class=\"line\">    <span class=\"string\">\"age\"</span>  to <span class=\"number\">25</span></div><div class=\"line\">))</div><div class=\"line\">println(user.name) <span class=\"comment\">// Prints \"John Doe\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 定义final的变量</span></div><div class=\"line\"><span class=\"keyword\">val</span> aFinalProperty : String = <span class=\"string\">\"final property\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 定义final static的变量</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Values</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> FINAL_STATIC_PROPERTY : String = <span class=\"string\">\"final static property\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">val</span> something = Values.FINAL_STATIC_PROPERTY</div></pre></td></tr></table></figure>\n<h4 id=\"2-代码更精准有效，更可读\"><a href=\"#2-代码更精准有效，更可读\" class=\"headerlink\" title=\"2. 代码更精准有效，更可读\"></a>2. 代码更精准有效，更可读</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 智能cast</span></div><div class=\"line\"><span class=\"keyword\">if</span> (node <span class=\"keyword\">is</span> Leaf) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> node.symbol; <span class=\"comment\">//智能的将node转为Leaf类型，暴露Leaf的变量(symbol)</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 类似C++中的默认参数值</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Developer</span></span>(<span class=\"keyword\">val</span> name: String,</div><div class=\"line\"> <span class=\"keyword\">val</span> age: <span class=\"built_in\">Int</span>,</div><div class=\"line\"> <span class=\"keyword\">val</span> someValue: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span>, <span class=\"comment\">// 当未传入someValue时，该参数将被赋值为0</span></div><div class=\"line\"> ) &#123;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 支持指明参数，可读性更强</span></div><div class=\"line\"><span class=\"keyword\">val</span> anand = Developer(name = “Anand Gaurav”, age = <span class=\"number\">20</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 支持Java8的各项新特性</span></div><div class=\"line\"><span class=\"keyword\">val</span> numbers = arrayListOf(<span class=\"number\">-42</span>, <span class=\"number\">17</span>, <span class=\"number\">13</span>, <span class=\"number\">-9</span>, <span class=\"number\">12</span>) <span class=\"comment\">//创建一个List，并给定值</span></div><div class=\"line\"><span class=\"keyword\">val</span> nonNegative = numbers.filter &#123; it &gt;= <span class=\"number\">0</span> &#125; <span class=\"comment\">//从numbers中过滤出&gt;=0的队列</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 下面这中Java8中的Stream特性，是不是特像RxJava</span></div><div class=\"line\">listOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>) <span class=\"comment\">// 列出 1, 2, 3, 4</span></div><div class=\"line\">.map &#123; it * <span class=\"number\">10</span> &#125; <span class=\"comment\">// 所有值乘以10 10, 20, 30, 40</span></div><div class=\"line\">.filter &#123; it &gt; <span class=\"number\">20</span> &#125; <span class=\"comment\">// 过滤出&gt;20的值 30, 40</span></div><div class=\"line\">.forEach &#123; print(it) &#125; <span class=\"comment\">// 打印出每个值 30, 40</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 通过as Button，进行转换，可读性更强</span></div><div class=\"line\"><span class=\"keyword\">val</span> button = findViewById(R.id.fab) <span class=\"keyword\">as</span> Button</div><div class=\"line\">button.setOnClickListener &#123; view -&gt; <span class=\"comment\">/* your code */</span>&#125; <span class=\"comment\">// lambda表达式</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 可以直接在赋值中使用表达式，甚至内嵌执行语句</span></div><div class=\"line\"><span class=\"keyword\">val</span> max = <span class=\"keyword\">if</span> (a &gt; b) a <span class=\"keyword\">else</span> b</div><div class=\"line\"><span class=\"keyword\">val</span> max = <span class=\"keyword\">if</span> (a &gt; b) &#123;</div><div class=\"line\">    print(<span class=\"string\">\"Choose a\"</span>)</div><div class=\"line\">    a</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    print(<span class=\"string\">\"Choose b\"</span>)</div><div class=\"line\">    b</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 支持when的表达式</span></div><div class=\"line\">println(<span class=\"keyword\">when</span> (language) &#123;</div><div class=\"line\">    <span class=\"string\">\"EN\"</span> -&gt; <span class=\"string\">\"Hello!\"</span></div><div class=\"line\">    <span class=\"string\">\"FR\"</span> -&gt; <span class=\"string\">\"Salut!\"</span></div><div class=\"line\">    <span class=\"keyword\">else</span> -&gt; <span class=\"string\">\"Sorry, I can't greet you in <span class=\"subst\">$language</span> yet\"</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 支持in，表达在一定的范围内作为条件</span></div><div class=\"line\"><span class=\"keyword\">when</span> (x) &#123;</div><div class=\"line\">    <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.10</span> -&gt; print(<span class=\"string\">\"x is in the range\"</span>)</div><div class=\"line\">    <span class=\"keyword\">in</span> validNumberArray -&gt; print(<span class=\"string\">\"x is valid\"</span>)</div><div class=\"line\">    <span class=\"keyword\">else</span> -&gt; print(<span class=\"string\">\"none of the above\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 为Date类创建一个方法，方法名是isTuesday，执行内容是判断Date中的成员变量day是否等于2</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> Date.<span class=\"title\">isTuesday</span><span class=\"params\">()</span></span> = day == <span class=\"number\">2</span></div></pre></td></tr></table></figure>\n<h2 id=\"II-Kotlin-Unit-test\"><a href=\"#II-Kotlin-Unit-test\" class=\"headerlink\" title=\"II. Kotlin Unit-test\"></a>II. Kotlin Unit-test</h2><h4 id=\"1-遇到的问题\"><a href=\"#1-遇到的问题\" class=\"headerlink\" title=\"1. 遇到的问题\"></a>1. 遇到的问题</h4><p>对于编程设计来说，非常好的实践就是对拓展开放，对修改关闭的”开闭原则”，因为在Java中，我们对继承实在是太滥用了(可以参考<a href=\"https://blog.dreamtobe.cn/2016/10/25/oo_architecture/\">架构设计基础知识整理</a>中”使用组合而非继承”)，也正是因为想要Kotlin中使这个情况得到好转，<strong>因此Kotlin默认对所有Class与Method都是<code>final</code>的</strong>， 除非使用<code>open</code>主动申明。</p>\n<p>可是<code>final</code>的Class对于单元测试带来了一定的困难，因为我们在写Java的单元测试的时候，已经习惯了使用类似Mockito这样的库，去mock一些类，以达到纯粹的单元测试(参考<a href=\"https://blog.dreamtobe.cn/2016/10/28/android_test/\">Android单元测试与模拟测试</a>)，正因为<code>final</code>类是不支持继承的，因此Mockito 2.1.0之前的版本对这样的类是无法mock的，虽然已经有了PowerMock，可以对静态方法进行mock，但是如果都使用PowerMock会显得很重，而且不灵活。</p>\n<h4 id=\"2-解决方法\"><a href=\"#2-解决方法\" class=\"headerlink\" title=\"2. 解决方法\"></a>2. 解决方法</h4><h5 id=\"2-1-Javassist\"><a href=\"#2-1-Javassist\" class=\"headerlink\" title=\"2.1 Javassist\"></a>2.1 Javassist</h5><blockquote>\n<p>实际测试kotlin-testrunner并不work，抽空的时候再研究研究，如果已经解决了欢迎评论指点</p>\n</blockquote>\n<p>因为<a href=\"http://jboss-javassist.github.io/javassist/\" target=\"_blank\" rel=\"external\">Javassist</a>这个开源库，支持在运行时修改Java字节码，因此刚好可以解决这个问题。dpreussler借助这个库写了一个<a href=\"https://github.com/dpreussler/kotlin-testrunner\" target=\"_blank\" rel=\"external\">kotlin-testrunner</a>，创建一个ClassLoader，在加载指定类的时候将其<code>FINAL</code>的<code>modifiers</code>清除，并且通过<code>TestRunner</code>传入我们的ClassLoader，防止存在同一个Class在多个Loader中不唯一的问题(参考<a href=\"https://blog.dreamtobe.cn/2015/12/07/android_dynamic_dex/\">Android 动态加载dex</a>)，以此解决该问题。</p>\n<h5 id=\"2-2-Mockito-2-1-0-或更高版本\"><a href=\"#2-2-Mockito-2-1-0-或更高版本\" class=\"headerlink\" title=\"2.2 Mockito 2.1.0 或更高版本\"></a>2.2 Mockito 2.1.0 或更高版本</h5><p>Mockito 2.1.0 及之后的版本原生支持了对<code>final</code>的method与class进行mock，使用方法与之前保持一致。 – <strong>实测是work的</strong>。</p>\n<p><strong>但是</strong> 由于Mockito推出2.1.0时，对代码进行了大量的重构，虽然PowerMock已经在计划中通过2.0版本来对其进行适配，但是由于Mockito 2.1.0的重构，工作量还是比较大，因此还在<a href=\"https://github.com/powermock/powermock/issues/706#issuecomment-264097614\" target=\"_blank\" rel=\"external\">计划中</a>。</p>\n<h4 id=\"3-Kotlin单元测试总结\"><a href=\"#3-Kotlin单元测试总结\" class=\"headerlink\" title=\"3. Kotlin单元测试总结\"></a>3. Kotlin单元测试总结</h4><p>由于PowerMock还未适配Mockito v2.1.0，因此目前Kotlin中如果需要mock <code>static</code>的方法会麻烦些（可以使用通用方法: 封装一层<code>非static</code>的方法，在里面调用原本的<code>static</code>方法，然后对这个封装后的方法进行mock）。其他都比较流畅。</p>\n<blockquote>\n<p>可以借助<a href=\"https://github.com/nhaarman/mockito-kotlin\" target=\"_blank\" rel=\"external\">nhaarman/mockito-kotlin</a>使得更好的用Kotlin写单元测试。</p>\n</blockquote>\n<h2 id=\"III-Java中实现Kotlin的特性\"><a href=\"#III-Java中实现Kotlin的特性\" class=\"headerlink\" title=\"III. Java中实现Kotlin的特性\"></a>III. Java中实现Kotlin的特性</h2><blockquote>\n<p>无论是多出736KB的Kotlin基本库大小，还是公司不允许，<strong>导致只能使用Java，但是又想使用一些Kotlin特性</strong>。可以看看接下来提到的。</p>\n</blockquote>\n<h4 id=\"1-Data-classes\"><a href=\"#1-Data-classes\" class=\"headerlink\" title=\"1. Data classes\"></a>1. Data classes</h4><blockquote>\n<p>Kotlin中<code>Data classes</code>特性，是在类前申明<code>data</code>，就会自动生成<code>equals()</code>、<code>hashCode()</code>、<code>toString()</code>、<code>copy()</code>方法。</p>\n</blockquote>\n<p>Java中可以通过<a href=\"https://github.com/mplushnikov/lombok-intellij-plugin\" target=\"_blank\" rel=\"external\">Lombok - @Data</a>实现这些特性。</p>\n<h4 id=\"2-Lambda\"><a href=\"#2-Lambda\" class=\"headerlink\" title=\"2. Lambda\"></a>2. Lambda</h4><blockquote>\n<p>Kotlin支持绝大多数Java8的特性，但是Android目前还不支持Java8(虽然Jack&amp;Jill编译器支持了，但是其在混淆等各方面的还不完善)。</p>\n</blockquote>\n<p>Java7中的推荐使用<a href=\"https://github.com/orfjackal/retrolambda\" target=\"_blank\" rel=\"external\">retrolambda</a>进行解决。</p>\n<p><strong>需要特别注意的是</strong>: Kotlin中采用<code>inline</code>Lambda是不会增加方法数的，但是使用Retrolambda/Jacks&amp;Jill是会增加方法数的，可以参看下图(<a href=\"http://jakewharton.com/exploring-java-hidden-costs/\" target=\"_blank\" rel=\"external\">Jake Wharton在Exploring Java Hidden Costs演说</a>中提到的生成的方法数对比图):</p>\n<p><img src=\"/img/kotlin-1.png\" alt=\"\"></p>\n<blockquote>\n<p>P.S: Java对调用方法的开销可以参照: <a href=\"https://blog.dreamtobe.cn/2015/10/26/android_optimize/\">Android优化 - 2.编码习惯</a> 中的纂述。</p>\n</blockquote>\n<h4 id=\"3-数据控制与操作\"><a href=\"#3-数据控制与操作\" class=\"headerlink\" title=\"3. 数据控制与操作\"></a>3. 数据控制与操作</h4><blockquote>\n<p>Kotlin中通过Streams(类似Java8的Streams)使得对数据的操作变得简单便捷，可读性高等特性。虽然Jack&amp;Jill也提供了Streams的特性，但是要求最小sdk版本在24(<code>minSdkVersion = 24</code>)，不用考虑其他原因，就这一条目前就很难被接受。</p>\n</blockquote>\n<p>Java7中推荐使用<a href=\"https://github.com/aNNiMON/Lightweight-Stream-API\" target=\"_blank\" rel=\"external\">Lightweight-Stream-API</a>实现这些特性。</p>\n<h4 id=\"4-对类拓展函数\"><a href=\"#4-对类拓展函数\" class=\"headerlink\" title=\"4. 对类拓展函数\"></a>4. 对类拓展函数</h4><blockquote>\n<p>Kotlin中支持在类外对某个已有类申明函数，十分的方便。</p>\n</blockquote>\n<p>Java中可以通过<a href=\"https://github.com/mplushnikov/lombok-intellij-plugin\" target=\"_blank\" rel=\"external\">Lombok - @ExtensionMethod</a>实现这些特性。</p>\n<hr>\n<ul>\n<li>文章创建时间: 2016-11-17，<a href=\"https://github.com/Jacksgong/Blog/commits/master/source/_posts/kotlin.md\" target=\"_blank\" rel=\"external\">本文迭代日志</a>。</li>\n</ul>\n<hr>\n<p>本文已经发布到JackBlog公众号: <a href=\"https://mp.weixin.qq.com/s?__biz=MzIyMjQxMzAzOA==&amp;mid=2247483689&amp;idx=1&amp;sn=a6261038ae037d6fb54a1b66f51a1623\" target=\"_blank\" rel=\"external\">Kotlin - JacksBlog</a></p>\n<hr>\n<ul>\n<li><a href=\"https://medium.com/@amitshekhar/why-you-must-try-kotlin-for-android-development-e14d00c8084b#.i677kd5qs\" target=\"_blank\" rel=\"external\">Why You Must Try Kotlin For Android Development?</a></li>\n<li><a href=\"https://kotlinlang.org/docs/reference/null-safety.html\" target=\"_blank\" rel=\"external\">Null Safety</a></li>\n<li><a href=\"https://realm.io/news/oredev-jake-wharton-kotlin-advancing-android-dev/\" target=\"_blank\" rel=\"external\">Advancing Android Development with Kotlin</a></li>\n<li><a href=\"https://kotlinlang.org/docs/reference/classes.html\" target=\"_blank\" rel=\"external\">Classes and Inheritance</a></li>\n<li><a href=\"https://medium.com/@dpreussler/never-say-final-mocking-kotlin-classes-in-unit-tests-314d275b82b1#.665w1rs47\" target=\"_blank\" rel=\"external\">Never say final: mocking Kotlin classes in unit tests</a></li>\n<li><a href=\"http://stackoverflow.com/questions/35691123/kotlin-lateinit-vs-any-null\" target=\"_blank\" rel=\"external\">Kotlin - lateinit VS Any? = null</a></li>\n<li><a href=\"https://kotlinlang.org/docs/reference/delegated-properties.html\" target=\"_blank\" rel=\"external\">Delegated Properties</a></li>\n<li><a href=\"http://stackoverflow.com/questions/36623177/kotlin-property-initialization-using-by-lazy-vs-lateinit\" target=\"_blank\" rel=\"external\">Kotlin - Property initialization using “by lazy” vs. “lateinit”</a></li>\n<li><a href=\"http://stackoverflow.com/questions/37482378/static-data-in-kotlin#\" target=\"_blank\" rel=\"external\">Static data in Kotlin</a></li>\n<li><a href=\"https://hackernoon.com/living-android-without-kotlin-db7391a2b170#.dcvfz0j06\" target=\"_blank\" rel=\"external\">Living(Android) without Kotlin</a></li>\n<li><a href=\"https://medium.com/@lukleDev/how-effective-java-may-have-influenced-the-design-of-kotlin-part-1-45fd64c2f974#.r7qt7y819\" target=\"_blank\" rel=\"external\">How “Effective Java” may have influenced the design of Kotlin — Part 1</a></li>\n<li><a href=\"http://fernandocejas.com/2017/02/03/android-testing-with-kotlin/\" target=\"_blank\" rel=\"external\">Android Testing with Kotlin</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<p>Kotlin是一门为JVM、Android、前端开发的一门静态语言，相比Java8，它有太多的前瞻性的功能并且非常极客。</p>\n<blockquote>\n<p>P.S 因为其标准库有700Kb左右，所以暂时没有考虑在生产环境用，前段时间, 刚好接了支付宝几个内部组件，因此都用Kotlin写了，整体感觉很不错。</p>\n</blockquote>","more":"<h2 id=\"I-相比Java优势\"><a href=\"#I-相比Java优势\" class=\"headerlink\" title=\"I. 相比Java优势:\"></a>I. 相比Java优势:</h2><ul>\n<li>增量编译，Kotlin更快些</li>\n<li>代码更精准有效，更可读</li>\n<li>完全支持与Java的协同工作</li>\n<li>更加安全，更加稳定的编写方式</li>\n</ul>\n<p>Kotlin语言是2010年Jetbrains团队为自己的团队打造的。宗旨是希望能够更简明并且消除一些Java的缺陷。由于Jetbrains团队原本打造的一系列的IDE都已经使用了Java，因此他们设计之初就考虑到Kotlin需要能够与Java协同工作，因此Kotlin是编译为Java字节码并且就考虑了如何才能让到Java工程师快速入门Kotlin。</p>\n<h3 id=\"根据《Effective-Java》Kotlin的优化\"><a href=\"#根据《Effective-Java》Kotlin的优化\" class=\"headerlink\" title=\"根据《Effective Java》Kotlin的优化\"></a>根据《Effective Java》Kotlin的优化</h3><h4 id=\"1-不再需要builder\"><a href=\"#1-不再需要builder\" class=\"headerlink\" title=\"1. 不再需要builder:\"></a>1. 不再需要builder:</h4><p>在构造函数如果需要传入大量参数时，考虑到可读性，”Effective Java”在第二章中的谈到了<a href=\"https://en.wikipedia.org/wiki/Builder_pattern\">Builder Pattern</a>，以此构造与对象分离，达到更灵活、更可读。</p>\n<p>在Kotlin中，由于它支持了为方法参数指定默认参数，以及支持在传入参数时，申明所赋值的参数名:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KotlinNutritionFacts</span></span>(</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> servingSize: <span class=\"built_in\">Int</span>,</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> servings: <span class=\"built_in\">Int</span>,</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> calories: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span>,</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> fat: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span>,</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> sodium: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span>,</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> carbohydrates: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span>)</div></pre></td></tr></table></figure>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> cocaCola = KotlinNutritionFacts(<span class=\"number\">240</span>,<span class=\"number\">8</span>,</div><div class=\"line\">                calories = <span class=\"number\">100</span>,</div><div class=\"line\">                sodium = <span class=\"number\">35</span>,</div><div class=\"line\">                carbohydrates = <span class=\"number\">27</span>)</div></pre></td></tr></table></figure>\n<h4 id=\"2-单例\"><a href=\"#2-单例\" class=\"headerlink\" title=\"2. 单例\"></a>2. 单例</h4><p>在”Effective Java”的第三章中描述了单例，使得该对象在全局只有一个实例，十分的实用。</p>\n<p>在Kotlin中，由于它支持了<a href=\"https://kotlinlang.org/docs/reference/object-declarations.html#object-declarations\">Object declarations</a>，因此可以非常简明的实现单例:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">object</span> KotlinElvis &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">leaveTheBuilding</span><span class=\"params\">()</span></span> &#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-不用再主动编写equals-、hashCode\"><a href=\"#3-不用再主动编写equals-、hashCode\" class=\"headerlink\" title=\"3. 不用再主动编写equals()、hashCode()\"></a>3. 不用再主动编写<code>equals()</code>、<code>hashCode()</code></h4><p>在”Effective Java”的第十五章中建议到”除非有非常明确的理由，否则类都尽可能的定义为不可变”，在Java定义这么一个类是一件十分繁琐的事情，因为每一个对象都需要覆写他们的<code>equals()</code>与<code>hashCode()</code>，因此”Effective Java”在第8章与第9章通过了18页来篆述如何更好的完成这个。</p>\n<p>在Kotlin中，由于它默认的<a href=\"https://kotlinlang.org/docs/reference/data-classes.html\">data classes</a>就已经默认实现了<code>equals()</code>、<code>hashCode()</code>等方法:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>(<span class=\"keyword\">val</span> name: String, <span class=\"keyword\">val</span> age: Integer)</div></pre></td></tr></table></figure>\n<blockquote>\n<p>P.S <a href=\"https://github.com/google/auto/tree/master/value\">AutoValue</a>为Java实现了类似的功能。</p>\n</blockquote>\n<h4 id=\"4-自动化getter与setter\"><a href=\"#4-自动化getter与setter\" class=\"headerlink\" title=\"4. 自动化getter与setter\"></a>4. 自动化<code>getter</code>与<code>setter</code></h4><p>在”Effective Java”的第十四章中建议到对于成员变量尽量使用方法可见(通常通过提供<code>getter</code>与<code>setter</code>实现)而非直接<code>public</code>。</p>\n<p>在Kolin中，由于所有的成员变量，默认都是<a href=\"https://kotlinlang.org/docs/reference/properties.html\">property</a>，默认的对其的访问都是自动转为对其的<code>getter</code>与<code>setter</code>的访问，十分的简明:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KotlinPerson</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> name: String? = <span class=\"literal\">null</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> age: <span class=\"built_in\">Int</span>? = <span class=\"literal\">null</span></div><div class=\"line\">    <span class=\"keyword\">set</span>(value) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (value <span class=\"keyword\">in</span> <span class=\"number\">0.</span><span class=\"number\">.120</span>)&#123;</div><div class=\"line\">            field = value</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> IllegalArgumentException()</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 访问KotlinPerson</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">val</span> person = KotlinPerson()</div><div class=\"line\">person.name = <span class=\"string\">\"Jacks\"</span></div><div class=\"line\">person.age = <span class=\"number\">27</span></div></pre></td></tr></table></figure>\n<h4 id=\"5-Overried变为强制性注解\"><a href=\"#5-Overried变为强制性注解\" class=\"headerlink\" title=\"5. Overried变为强制性注解\"></a>5. <code>Overried</code>变为强制性注解</h4><p>在Java 1.5中引入了<code>Overried</code>关键字，但这个关键字是<code>option</code>的，在”Effective Java”的第三十六章中说明了一定要加上这个注解一旦是覆写方法，否则在后期维护时很可能将覆写方法当做非覆写方法从而引来各种问题。</p>\n<p>在Kotlin中，<code>override</code>变为了强制性的注解以避免类似的问题。</p>\n<h3 id=\"常用语法与特性\"><a href=\"#常用语法与特性\" class=\"headerlink\" title=\"常用语法与特性\"></a>常用语法与特性</h3><h4 id=\"1-更加安全，更加稳定的编写方式\"><a href=\"#1-更加安全，更加稳定的编写方式\" class=\"headerlink\" title=\"1. 更加安全，更加稳定的编写方式\"></a>1. 更加安全，更加稳定的编写方式</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a: String = “abc”; <span class=\"comment\">// 定义个一个非null的字符串变量a</span></div><div class=\"line\">a = <span class=\"literal\">null</span>; <span class=\"comment\">// 编译直接失败</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> b: String? = “abc”; <span class=\"comment\">// 定义一个可为null的字符串变量b</span></div><div class=\"line\">b = <span class=\"literal\">null</span>; <span class=\"comment\">// 编译通过</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">val</span> l = b.length; <span class=\"comment\">// 编译失败，因为b可能为null</span></div><div class=\"line\">l = b?.length ?: <span class=\"number\">-1</span> <span class=\"comment\">// 如b为null，就返回-1</span></div><div class=\"line\">l = b?.length; <span class=\"comment\">// 如b为null，就返回null</span></div><div class=\"line\">l = b!!.length; <span class=\"comment\">// 如b为null，就会直接抛NPE错误</span></div><div class=\"line\">b?.let &#123; println(b) &#125; <span class=\"comment\">// 如b为null，就不执行let后面的代码块</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">val</span> aInt: <span class=\"built_in\">Int</span>? = a <span class=\"keyword\">as</span>? <span class=\"built_in\">Int</span> <span class=\"comment\">// 如a不是Int类型，就回返回null</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">val</span> nullableList: List&lt;<span class=\"built_in\">Int</span>?&gt; = listOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"literal\">null</span>, <span class=\"number\">4</span>)</div><div class=\"line\"><span class=\"keyword\">val</span> intList: List&lt;<span class=\"built_in\">Int</span>&gt; = nullableList.filterNotNull() <span class=\"comment\">// 过滤出列表中所有不为null的数据，组成新的队列intList</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 可以通过lateinit var(不可为val)，定义一个无需在申明时初始化的non-nullable的参数，这个参数不允许被赋值为空，并且在调用时如果没有初始化会抛异常</span></div><div class=\"line\">lateinit <span class=\"keyword\">var</span> lateInitValue : String</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 通过by lazy &#123; ... &#125; 表达式，让所定义的参数在第一次访问(get)的时候执行&#123;...&#125;这段代码块，并赋值</span></div><div class=\"line\"><span class=\"keyword\">val</span> lazyValue: String <span class=\"keyword\">by</span> lazy &#123;</div><div class=\"line\">  doAnything()</div><div class=\"line\">  <span class=\"string\">\"build lazy value\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 通过by Delegates.observable(\"默认值\")，在每次对该参数赋值的时候，都会回调回来</span></div><div class=\"line\"><span class=\"comment\">// vetoable是赋值前回调；observable是赋值后回调</span></div><div class=\"line\"><span class=\"keyword\">var</span> name: String <span class=\"keyword\">by</span> Delegates.observable(<span class=\"string\">\"&lt;no name&gt;\"</span>) &#123;</div><div class=\"line\">    prop, old, new -&gt;</div><div class=\"line\">    println(<span class=\"string\">\"<span class=\"subst\">$old</span> -&gt; <span class=\"subst\">$new</span>\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用map来存储参数，通常是用于解析Json之类的键对数据结构</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span>(<span class=\"keyword\">val</span> map: MutableMap&lt;String, Any?&gt;) &#123;</div><div class=\"line\">        <span class=\"keyword\">val</span> name: String <span class=\"keyword\">by</span> map</div><div class=\"line\">        <span class=\"keyword\">var</span> age: <span class=\"built_in\">Int</span>     <span class=\"keyword\">by</span> map</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">val</span> user = User(mapOf(</div><div class=\"line\">    <span class=\"string\">\"name\"</span> to <span class=\"string\">\"John Doe\"</span>,</div><div class=\"line\">    <span class=\"string\">\"age\"</span>  to <span class=\"number\">25</span></div><div class=\"line\">))</div><div class=\"line\">println(user.name) <span class=\"comment\">// Prints \"John Doe\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 定义final的变量</span></div><div class=\"line\"><span class=\"keyword\">val</span> aFinalProperty : String = <span class=\"string\">\"final property\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 定义final static的变量</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Values</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> FINAL_STATIC_PROPERTY : String = <span class=\"string\">\"final static property\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">val</span> something = Values.FINAL_STATIC_PROPERTY</div></pre></td></tr></table></figure>\n<h4 id=\"2-代码更精准有效，更可读\"><a href=\"#2-代码更精准有效，更可读\" class=\"headerlink\" title=\"2. 代码更精准有效，更可读\"></a>2. 代码更精准有效，更可读</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 智能cast</span></div><div class=\"line\"><span class=\"keyword\">if</span> (node <span class=\"keyword\">is</span> Leaf) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> node.symbol; <span class=\"comment\">//智能的将node转为Leaf类型，暴露Leaf的变量(symbol)</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 类似C++中的默认参数值</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Developer</span></span>(<span class=\"keyword\">val</span> name: String,</div><div class=\"line\"> <span class=\"keyword\">val</span> age: <span class=\"built_in\">Int</span>,</div><div class=\"line\"> <span class=\"keyword\">val</span> someValue: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span>, <span class=\"comment\">// 当未传入someValue时，该参数将被赋值为0</span></div><div class=\"line\"> ) &#123;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 支持指明参数，可读性更强</span></div><div class=\"line\"><span class=\"keyword\">val</span> anand = Developer(name = “Anand Gaurav”, age = <span class=\"number\">20</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 支持Java8的各项新特性</span></div><div class=\"line\"><span class=\"keyword\">val</span> numbers = arrayListOf(<span class=\"number\">-42</span>, <span class=\"number\">17</span>, <span class=\"number\">13</span>, <span class=\"number\">-9</span>, <span class=\"number\">12</span>) <span class=\"comment\">//创建一个List，并给定值</span></div><div class=\"line\"><span class=\"keyword\">val</span> nonNegative = numbers.filter &#123; it &gt;= <span class=\"number\">0</span> &#125; <span class=\"comment\">//从numbers中过滤出&gt;=0的队列</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 下面这中Java8中的Stream特性，是不是特像RxJava</span></div><div class=\"line\">listOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>) <span class=\"comment\">// 列出 1, 2, 3, 4</span></div><div class=\"line\">.map &#123; it * <span class=\"number\">10</span> &#125; <span class=\"comment\">// 所有值乘以10 10, 20, 30, 40</span></div><div class=\"line\">.filter &#123; it &gt; <span class=\"number\">20</span> &#125; <span class=\"comment\">// 过滤出&gt;20的值 30, 40</span></div><div class=\"line\">.forEach &#123; print(it) &#125; <span class=\"comment\">// 打印出每个值 30, 40</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 通过as Button，进行转换，可读性更强</span></div><div class=\"line\"><span class=\"keyword\">val</span> button = findViewById(R.id.fab) <span class=\"keyword\">as</span> Button</div><div class=\"line\">button.setOnClickListener &#123; view -&gt; <span class=\"comment\">/* your code */</span>&#125; <span class=\"comment\">// lambda表达式</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 可以直接在赋值中使用表达式，甚至内嵌执行语句</span></div><div class=\"line\"><span class=\"keyword\">val</span> max = <span class=\"keyword\">if</span> (a &gt; b) a <span class=\"keyword\">else</span> b</div><div class=\"line\"><span class=\"keyword\">val</span> max = <span class=\"keyword\">if</span> (a &gt; b) &#123;</div><div class=\"line\">    print(<span class=\"string\">\"Choose a\"</span>)</div><div class=\"line\">    a</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    print(<span class=\"string\">\"Choose b\"</span>)</div><div class=\"line\">    b</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 支持when的表达式</span></div><div class=\"line\">println(<span class=\"keyword\">when</span> (language) &#123;</div><div class=\"line\">    <span class=\"string\">\"EN\"</span> -&gt; <span class=\"string\">\"Hello!\"</span></div><div class=\"line\">    <span class=\"string\">\"FR\"</span> -&gt; <span class=\"string\">\"Salut!\"</span></div><div class=\"line\">    <span class=\"keyword\">else</span> -&gt; <span class=\"string\">\"Sorry, I can't greet you in <span class=\"subst\">$language</span> yet\"</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 支持in，表达在一定的范围内作为条件</span></div><div class=\"line\"><span class=\"keyword\">when</span> (x) &#123;</div><div class=\"line\">    <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.10</span> -&gt; print(<span class=\"string\">\"x is in the range\"</span>)</div><div class=\"line\">    <span class=\"keyword\">in</span> validNumberArray -&gt; print(<span class=\"string\">\"x is valid\"</span>)</div><div class=\"line\">    <span class=\"keyword\">else</span> -&gt; print(<span class=\"string\">\"none of the above\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 为Date类创建一个方法，方法名是isTuesday，执行内容是判断Date中的成员变量day是否等于2</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> Date.<span class=\"title\">isTuesday</span><span class=\"params\">()</span></span> = day == <span class=\"number\">2</span></div></pre></td></tr></table></figure>\n<h2 id=\"II-Kotlin-Unit-test\"><a href=\"#II-Kotlin-Unit-test\" class=\"headerlink\" title=\"II. Kotlin Unit-test\"></a>II. Kotlin Unit-test</h2><h4 id=\"1-遇到的问题\"><a href=\"#1-遇到的问题\" class=\"headerlink\" title=\"1. 遇到的问题\"></a>1. 遇到的问题</h4><p>对于编程设计来说，非常好的实践就是对拓展开放，对修改关闭的”开闭原则”，因为在Java中，我们对继承实在是太滥用了(可以参考<a href=\"https://blog.dreamtobe.cn/2016/10/25/oo_architecture/\">架构设计基础知识整理</a>中”使用组合而非继承”)，也正是因为想要Kotlin中使这个情况得到好转，<strong>因此Kotlin默认对所有Class与Method都是<code>final</code>的</strong>， 除非使用<code>open</code>主动申明。</p>\n<p>可是<code>final</code>的Class对于单元测试带来了一定的困难，因为我们在写Java的单元测试的时候，已经习惯了使用类似Mockito这样的库，去mock一些类，以达到纯粹的单元测试(参考<a href=\"https://blog.dreamtobe.cn/2016/10/28/android_test/\">Android单元测试与模拟测试</a>)，正因为<code>final</code>类是不支持继承的，因此Mockito 2.1.0之前的版本对这样的类是无法mock的，虽然已经有了PowerMock，可以对静态方法进行mock，但是如果都使用PowerMock会显得很重，而且不灵活。</p>\n<h4 id=\"2-解决方法\"><a href=\"#2-解决方法\" class=\"headerlink\" title=\"2. 解决方法\"></a>2. 解决方法</h4><h5 id=\"2-1-Javassist\"><a href=\"#2-1-Javassist\" class=\"headerlink\" title=\"2.1 Javassist\"></a>2.1 Javassist</h5><blockquote>\n<p>实际测试kotlin-testrunner并不work，抽空的时候再研究研究，如果已经解决了欢迎评论指点</p>\n</blockquote>\n<p>因为<a href=\"http://jboss-javassist.github.io/javassist/\">Javassist</a>这个开源库，支持在运行时修改Java字节码，因此刚好可以解决这个问题。dpreussler借助这个库写了一个<a href=\"https://github.com/dpreussler/kotlin-testrunner\">kotlin-testrunner</a>，创建一个ClassLoader，在加载指定类的时候将其<code>FINAL</code>的<code>modifiers</code>清除，并且通过<code>TestRunner</code>传入我们的ClassLoader，防止存在同一个Class在多个Loader中不唯一的问题(参考<a href=\"https://blog.dreamtobe.cn/2015/12/07/android_dynamic_dex/\">Android 动态加载dex</a>)，以此解决该问题。</p>\n<h5 id=\"2-2-Mockito-2-1-0-或更高版本\"><a href=\"#2-2-Mockito-2-1-0-或更高版本\" class=\"headerlink\" title=\"2.2 Mockito 2.1.0 或更高版本\"></a>2.2 Mockito 2.1.0 或更高版本</h5><p>Mockito 2.1.0 及之后的版本原生支持了对<code>final</code>的method与class进行mock，使用方法与之前保持一致。 – <strong>实测是work的</strong>。</p>\n<p><strong>但是</strong> 由于Mockito推出2.1.0时，对代码进行了大量的重构，虽然PowerMock已经在计划中通过2.0版本来对其进行适配，但是由于Mockito 2.1.0的重构，工作量还是比较大，因此还在<a href=\"https://github.com/powermock/powermock/issues/706#issuecomment-264097614\">计划中</a>。</p>\n<h4 id=\"3-Kotlin单元测试总结\"><a href=\"#3-Kotlin单元测试总结\" class=\"headerlink\" title=\"3. Kotlin单元测试总结\"></a>3. Kotlin单元测试总结</h4><p>由于PowerMock还未适配Mockito v2.1.0，因此目前Kotlin中如果需要mock <code>static</code>的方法会麻烦些（可以使用通用方法: 封装一层<code>非static</code>的方法，在里面调用原本的<code>static</code>方法，然后对这个封装后的方法进行mock）。其他都比较流畅。</p>\n<blockquote>\n<p>可以借助<a href=\"https://github.com/nhaarman/mockito-kotlin\">nhaarman/mockito-kotlin</a>使得更好的用Kotlin写单元测试。</p>\n</blockquote>\n<h2 id=\"III-Java中实现Kotlin的特性\"><a href=\"#III-Java中实现Kotlin的特性\" class=\"headerlink\" title=\"III. Java中实现Kotlin的特性\"></a>III. Java中实现Kotlin的特性</h2><blockquote>\n<p>无论是多出736KB的Kotlin基本库大小，还是公司不允许，<strong>导致只能使用Java，但是又想使用一些Kotlin特性</strong>。可以看看接下来提到的。</p>\n</blockquote>\n<h4 id=\"1-Data-classes\"><a href=\"#1-Data-classes\" class=\"headerlink\" title=\"1. Data classes\"></a>1. Data classes</h4><blockquote>\n<p>Kotlin中<code>Data classes</code>特性，是在类前申明<code>data</code>，就会自动生成<code>equals()</code>、<code>hashCode()</code>、<code>toString()</code>、<code>copy()</code>方法。</p>\n</blockquote>\n<p>Java中可以通过<a href=\"https://github.com/mplushnikov/lombok-intellij-plugin\">Lombok - @Data</a>实现这些特性。</p>\n<h4 id=\"2-Lambda\"><a href=\"#2-Lambda\" class=\"headerlink\" title=\"2. Lambda\"></a>2. Lambda</h4><blockquote>\n<p>Kotlin支持绝大多数Java8的特性，但是Android目前还不支持Java8(虽然Jack&amp;Jill编译器支持了，但是其在混淆等各方面的还不完善)。</p>\n</blockquote>\n<p>Java7中的推荐使用<a href=\"https://github.com/orfjackal/retrolambda\">retrolambda</a>进行解决。</p>\n<p><strong>需要特别注意的是</strong>: Kotlin中采用<code>inline</code>Lambda是不会增加方法数的，但是使用Retrolambda/Jacks&amp;Jill是会增加方法数的，可以参看下图(<a href=\"http://jakewharton.com/exploring-java-hidden-costs/\">Jake Wharton在Exploring Java Hidden Costs演说</a>中提到的生成的方法数对比图):</p>\n<p><img src=\"/img/kotlin-1.png\" alt=\"\"></p>\n<blockquote>\n<p>P.S: Java对调用方法的开销可以参照: <a href=\"https://blog.dreamtobe.cn/2015/10/26/android_optimize/\">Android优化 - 2.编码习惯</a> 中的纂述。</p>\n</blockquote>\n<h4 id=\"3-数据控制与操作\"><a href=\"#3-数据控制与操作\" class=\"headerlink\" title=\"3. 数据控制与操作\"></a>3. 数据控制与操作</h4><blockquote>\n<p>Kotlin中通过Streams(类似Java8的Streams)使得对数据的操作变得简单便捷，可读性高等特性。虽然Jack&amp;Jill也提供了Streams的特性，但是要求最小sdk版本在24(<code>minSdkVersion = 24</code>)，不用考虑其他原因，就这一条目前就很难被接受。</p>\n</blockquote>\n<p>Java7中推荐使用<a href=\"https://github.com/aNNiMON/Lightweight-Stream-API\">Lightweight-Stream-API</a>实现这些特性。</p>\n<h4 id=\"4-对类拓展函数\"><a href=\"#4-对类拓展函数\" class=\"headerlink\" title=\"4. 对类拓展函数\"></a>4. 对类拓展函数</h4><blockquote>\n<p>Kotlin中支持在类外对某个已有类申明函数，十分的方便。</p>\n</blockquote>\n<p>Java中可以通过<a href=\"https://github.com/mplushnikov/lombok-intellij-plugin\">Lombok - @ExtensionMethod</a>实现这些特性。</p>\n<hr>\n<ul>\n<li>文章创建时间: 2016-11-17，<a href=\"https://github.com/Jacksgong/Blog/commits/master/source/_posts/kotlin.md\">本文迭代日志</a>。</li>\n</ul>\n<hr>\n<p>本文已经发布到JackBlog公众号: <a href=\"https://mp.weixin.qq.com/s?__biz=MzIyMjQxMzAzOA==&amp;mid=2247483689&amp;idx=1&amp;sn=a6261038ae037d6fb54a1b66f51a1623\">Kotlin - JacksBlog</a></p>\n<hr>\n<ul>\n<li><a href=\"https://medium.com/@amitshekhar/why-you-must-try-kotlin-for-android-development-e14d00c8084b#.i677kd5qs\">Why You Must Try Kotlin For Android Development?</a></li>\n<li><a href=\"https://kotlinlang.org/docs/reference/null-safety.html\">Null Safety</a></li>\n<li><a href=\"https://realm.io/news/oredev-jake-wharton-kotlin-advancing-android-dev/\">Advancing Android Development with Kotlin</a></li>\n<li><a href=\"https://kotlinlang.org/docs/reference/classes.html\">Classes and Inheritance</a></li>\n<li><a href=\"https://medium.com/@dpreussler/never-say-final-mocking-kotlin-classes-in-unit-tests-314d275b82b1#.665w1rs47\">Never say final: mocking Kotlin classes in unit tests</a></li>\n<li><a href=\"http://stackoverflow.com/questions/35691123/kotlin-lateinit-vs-any-null\">Kotlin - lateinit VS Any? = null</a></li>\n<li><a href=\"https://kotlinlang.org/docs/reference/delegated-properties.html\">Delegated Properties</a></li>\n<li><a href=\"http://stackoverflow.com/questions/36623177/kotlin-property-initialization-using-by-lazy-vs-lateinit\">Kotlin - Property initialization using “by lazy” vs. “lateinit”</a></li>\n<li><a href=\"http://stackoverflow.com/questions/37482378/static-data-in-kotlin#\">Static data in Kotlin</a></li>\n<li><a href=\"https://hackernoon.com/living-android-without-kotlin-db7391a2b170#.dcvfz0j06\">Living(Android) without Kotlin</a></li>\n<li><a href=\"https://medium.com/@lukleDev/how-effective-java-may-have-influenced-the-design-of-kotlin-part-1-45fd64c2f974#.r7qt7y819\">How “Effective Java” may have influenced the design of Kotlin — Part 1</a></li>\n<li><a href=\"http://fernandocejas.com/2017/02/03/android-testing-with-kotlin/\">Android Testing with Kotlin</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"Magic Progress Widget","date":"2015-12-13T07:45:03.000Z","_content":"\n> 已开源 [lingochamp/MagicProgressWidget](https://github.com/lingochamp/MagicProgressWidget)\n\n- [版本迭代日志](https://github.com/lingochamp/MagicProgressWidget/blob/master/CHANGELOG.md)\n- [中文说明文档](https://github.com/lingochamp/MagicProgressWidget/blob/master/README.md)\n- [问题讨论区](https://github.com/lingochamp/MagicProgressWidget/issues)\n\n<!--more-->\n\n---\n\n## 简述所解决问题\n\n漂亮的自定义横向进度条与圆形进度条。\n\n## Demo\n\n![demo gif](/img/magic_progress.gif)\n","source":"_posts/magic_progress_widget.md","raw":"title: Magic Progress Widget\ndate: 2015-12-13 15:45:03\npermalink: 2015/12/13/magic_progress_widget\ntags:\n- draw\n- sweep\n- gradient\n- open source\n\n---\n\n> 已开源 [lingochamp/MagicProgressWidget](https://github.com/lingochamp/MagicProgressWidget)\n\n- [版本迭代日志](https://github.com/lingochamp/MagicProgressWidget/blob/master/CHANGELOG.md)\n- [中文说明文档](https://github.com/lingochamp/MagicProgressWidget/blob/master/README.md)\n- [问题讨论区](https://github.com/lingochamp/MagicProgressWidget/issues)\n\n<!--more-->\n\n---\n\n## 简述所解决问题\n\n漂亮的自定义横向进度条与圆形进度条。\n\n## Demo\n\n![demo gif](/img/magic_progress.gif)\n","slug":"2015/12/13/magic_progress_widget","published":1,"updated":"2017-01-26T14:52:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66j2003595bugitv0edr","content":"<blockquote>\n<p>已开源 <a href=\"https://github.com/lingochamp/MagicProgressWidget\" target=\"_blank\" rel=\"external\">lingochamp/MagicProgressWidget</a></p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/lingochamp/MagicProgressWidget/blob/master/CHANGELOG.md\" target=\"_blank\" rel=\"external\">版本迭代日志</a></li>\n<li><a href=\"https://github.com/lingochamp/MagicProgressWidget/blob/master/README.md\" target=\"_blank\" rel=\"external\">中文说明文档</a></li>\n<li><a href=\"https://github.com/lingochamp/MagicProgressWidget/issues\" target=\"_blank\" rel=\"external\">问题讨论区</a></li>\n</ul>\n<a id=\"more\"></a>\n<hr>\n<h2 id=\"简述所解决问题\"><a href=\"#简述所解决问题\" class=\"headerlink\" title=\"简述所解决问题\"></a>简述所解决问题</h2><p>漂亮的自定义横向进度条与圆形进度条。</p>\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><p><img src=\"/img/magic_progress.gif\" alt=\"demo gif\"></p>\n","excerpt":"<blockquote>\n<p>已开源 <a href=\"https://github.com/lingochamp/MagicProgressWidget\">lingochamp/MagicProgressWidget</a></p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/lingochamp/MagicProgressWidget/blob/master/CHANGELOG.md\">版本迭代日志</a></li>\n<li><a href=\"https://github.com/lingochamp/MagicProgressWidget/blob/master/README.md\">中文说明文档</a></li>\n<li><a href=\"https://github.com/lingochamp/MagicProgressWidget/issues\">问题讨论区</a></li>\n</ul>","more":"<hr>\n<h2 id=\"简述所解决问题\"><a href=\"#简述所解决问题\" class=\"headerlink\" title=\"简述所解决问题\"></a>简述所解决问题</h2><p>漂亮的自定义横向进度条与圆形进度条。</p>\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><p><img src=\"/img/magic_progress.gif\" alt=\"demo gif\"></p>"},{"title":"MessageHandler","date":"2016-01-16T09:36:03.000Z","_content":"\n> 已开源 [Jacksgong/MessageHandler](https://github.com/Jacksgong/MessageHandler)\n\n- [版本迭代日志](https://github.com/Jacksgong/MessageHandler/blob/master/CHANGELOG.md)\n- [中文说明文档](https://github.com/Jacksgong/MessageHandler/blob/master/README-zh.md)\n- [问题讨论区](https://github.com/Jacksgong/MessageHandler/issues)\n\n<!-- more -->\n\n---\n\n这个组件是一个简单小巧的Handler转发，主要是为了对外提供绑定目标Handler对象的所有消息的`暂停`、`恢复`、`废弃`、`取消所有队列中的消息`，用于整个完全解耦消息队列的全局性有效管理。\n\n---\n\n> 随着RxJava的普及，逐渐有一些文章出来，提出了EventPool/Handler这些抛事件的架构已死或不建议使用的说法，而无非就是不易于调试，不够灵活。\n\n> 个人觉得确实很多事务用RxJava可以解决。但是就解耦，全局的大架构，还是这类抛事件的更易于阅读代码更加干净，甚至更易于全局性控制。\n如Picasso，业务非常的复杂，因此内部使用了Handler抛事件的方式来促使事务流的运作。\n\n\n## 简述所解决问题\n\n系统提供的Handler用于解决跨线程抛消息，复杂的事务流固然方便，但是缺少全局性的控制，如暂停，恢复等，故有了这个基于`android.os.Handler`进行上层封装转发实现全局控制功能的组件。\n\n## Demo\n\n![][demo_gif]\n\n[license_2_svg]: https://img.shields.io/hexpm/l/plug.svg\n[bintray_svg]: https://api.bintray.com/packages/jacksgong/maven/MessageHandler/images/download.svg\n[bintray_url]: https://bintray.com/jacksgong/maven/MessageHandler/_latestVersion\n[demo_gif]: https://github.com/Jacksgong/MessageHandler/raw/master/art/demo.gif\n","source":"_posts/message_handler.md","raw":"title: MessageHandler\ndate: 2016-01-16 17:36:03\npermalink: 2016/01/16/message_handler\ntags:\n- Handler\n- Message\n- Thread safe\n- recycle\n- project\n\n---\n\n> 已开源 [Jacksgong/MessageHandler](https://github.com/Jacksgong/MessageHandler)\n\n- [版本迭代日志](https://github.com/Jacksgong/MessageHandler/blob/master/CHANGELOG.md)\n- [中文说明文档](https://github.com/Jacksgong/MessageHandler/blob/master/README-zh.md)\n- [问题讨论区](https://github.com/Jacksgong/MessageHandler/issues)\n\n<!-- more -->\n\n---\n\n这个组件是一个简单小巧的Handler转发，主要是为了对外提供绑定目标Handler对象的所有消息的`暂停`、`恢复`、`废弃`、`取消所有队列中的消息`，用于整个完全解耦消息队列的全局性有效管理。\n\n---\n\n> 随着RxJava的普及，逐渐有一些文章出来，提出了EventPool/Handler这些抛事件的架构已死或不建议使用的说法，而无非就是不易于调试，不够灵活。\n\n> 个人觉得确实很多事务用RxJava可以解决。但是就解耦，全局的大架构，还是这类抛事件的更易于阅读代码更加干净，甚至更易于全局性控制。\n如Picasso，业务非常的复杂，因此内部使用了Handler抛事件的方式来促使事务流的运作。\n\n\n## 简述所解决问题\n\n系统提供的Handler用于解决跨线程抛消息，复杂的事务流固然方便，但是缺少全局性的控制，如暂停，恢复等，故有了这个基于`android.os.Handler`进行上层封装转发实现全局控制功能的组件。\n\n## Demo\n\n![][demo_gif]\n\n[license_2_svg]: https://img.shields.io/hexpm/l/plug.svg\n[bintray_svg]: https://api.bintray.com/packages/jacksgong/maven/MessageHandler/images/download.svg\n[bintray_url]: https://bintray.com/jacksgong/maven/MessageHandler/_latestVersion\n[demo_gif]: https://github.com/Jacksgong/MessageHandler/raw/master/art/demo.gif\n","slug":"2016/01/16/message_handler","published":1,"updated":"2017-01-26T14:52:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66j3003895bubyht23vs","content":"<blockquote>\n<p>已开源 <a href=\"https://github.com/Jacksgong/MessageHandler\" target=\"_blank\" rel=\"external\">Jacksgong/MessageHandler</a></p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/Jacksgong/MessageHandler/blob/master/CHANGELOG.md\" target=\"_blank\" rel=\"external\">版本迭代日志</a></li>\n<li><a href=\"https://github.com/Jacksgong/MessageHandler/blob/master/README-zh.md\" target=\"_blank\" rel=\"external\">中文说明文档</a></li>\n<li><a href=\"https://github.com/Jacksgong/MessageHandler/issues\" target=\"_blank\" rel=\"external\">问题讨论区</a></li>\n</ul>\n<a id=\"more\"></a>\n<hr>\n<p>这个组件是一个简单小巧的Handler转发，主要是为了对外提供绑定目标Handler对象的所有消息的<code>暂停</code>、<code>恢复</code>、<code>废弃</code>、<code>取消所有队列中的消息</code>，用于整个完全解耦消息队列的全局性有效管理。</p>\n<hr>\n<blockquote>\n<p>随着RxJava的普及，逐渐有一些文章出来，提出了EventPool/Handler这些抛事件的架构已死或不建议使用的说法，而无非就是不易于调试，不够灵活。</p>\n<p>个人觉得确实很多事务用RxJava可以解决。但是就解耦，全局的大架构，还是这类抛事件的更易于阅读代码更加干净，甚至更易于全局性控制。<br>如Picasso，业务非常的复杂，因此内部使用了Handler抛事件的方式来促使事务流的运作。</p>\n</blockquote>\n<h2 id=\"简述所解决问题\"><a href=\"#简述所解决问题\" class=\"headerlink\" title=\"简述所解决问题\"></a>简述所解决问题</h2><p>系统提供的Handler用于解决跨线程抛消息，复杂的事务流固然方便，但是缺少全局性的控制，如暂停，恢复等，故有了这个基于<code>android.os.Handler</code>进行上层封装转发实现全局控制功能的组件。</p>\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><p><img src=\"https://github.com/Jacksgong/MessageHandler/raw/master/art/demo.gif\" alt=\"\"></p>\n","excerpt":"<blockquote>\n<p>已开源 <a href=\"https://github.com/Jacksgong/MessageHandler\">Jacksgong/MessageHandler</a></p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/Jacksgong/MessageHandler/blob/master/CHANGELOG.md\">版本迭代日志</a></li>\n<li><a href=\"https://github.com/Jacksgong/MessageHandler/blob/master/README-zh.md\">中文说明文档</a></li>\n<li><a href=\"https://github.com/Jacksgong/MessageHandler/issues\">问题讨论区</a></li>\n</ul>","more":"<hr>\n<p>这个组件是一个简单小巧的Handler转发，主要是为了对外提供绑定目标Handler对象的所有消息的<code>暂停</code>、<code>恢复</code>、<code>废弃</code>、<code>取消所有队列中的消息</code>，用于整个完全解耦消息队列的全局性有效管理。</p>\n<hr>\n<blockquote>\n<p>随着RxJava的普及，逐渐有一些文章出来，提出了EventPool/Handler这些抛事件的架构已死或不建议使用的说法，而无非就是不易于调试，不够灵活。</p>\n<p>个人觉得确实很多事务用RxJava可以解决。但是就解耦，全局的大架构，还是这类抛事件的更易于阅读代码更加干净，甚至更易于全局性控制。<br>如Picasso，业务非常的复杂，因此内部使用了Handler抛事件的方式来促使事务流的运作。</p>\n</blockquote>\n<h2 id=\"简述所解决问题\"><a href=\"#简述所解决问题\" class=\"headerlink\" title=\"简述所解决问题\"></a>简述所解决问题</h2><p>系统提供的Handler用于解决跨线程抛消息，复杂的事务流固然方便，但是缺少全局性的控制，如暂停，恢复等，故有了这个基于<code>android.os.Handler</code>进行上层封装转发实现全局控制功能的组件。</p>\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><p><img src=\"https://github.com/Jacksgong/MessageHandler/raw/master/art/demo.gif\" alt=\"\"></p>"},{"title":"NDK | JNI","date":"2016-12-24T15:16:03.000Z","_content":"\n## I. 初识\n\n### 1. NDK\n\n> Native Development Kit\n\n是一套让你的Android应用一部分代码可以使用像C/C++语言的工具包\n\n<!-- more -->\n#### 一般什么时候可以使用NDK\n\n> 谷歌建议真正要使用NDK的情况是在很少数情况\n\n- 需要提高执行性能（e.g. 大数据排序）\n- 需要使用c/c++实现的第三方库（如 Ffmpeg，OpenCV）\n- 需要调用更加底层的代码(如，你想调用Dalvik以外的代码)\n\n### 2. JNI\n\n> Java Native Interface\n\n是一套在Java虚拟机控制下代码执行的标准机制。使得Java可以调用c/c++的方法，或者c/c++中可以调用Java。\n\n#### JNI标准机制的实现\n\n由汇编或c/c++的代码，组装(assembled)成动态库(允许非静态绑定），由此实现Java与c/c++双向调用。\n\n#### JNI的优势\n\n相比其他类似的(Netscape Java运行接口、Microsoft的原始本地接口、COM/Java接口)相比，它的优势在于兼容性:\n\n- 对二进制兼容(c/c++的代码编译后是二进制，由于二进制是程序兼容性类型(不用改变执行文件，就可以直接在不同环境下执行)，所以c/c++编译后的代码可以在任何平台下执行)\n- 对所有用Java虚拟机的具体平台兼容\n\n## II. 基本知识\n\n> 为了更清晰，本地(虚拟机所在环境原生语言(通常是c/c++))这里都用native单词表示，而不直译\n\n\n### 参数与引用\n\n#### 1. 方法参数说明\n\n> 虚拟机需要追踪所有传递到native层的参数，使得GC不会在native层还在用这些参数引用的时候被清除了\n\n##### 需要注意\n\n1. 原始类型直接通过相互拷贝传递\n2. 对象 通过引用传递\n\n##### JNI原始类型\n\nJava类型 | Native类型 | 备注\n:-: |:-: |:-:\nboolean | jboolean | unsigned 8 bits\nbyte | jbyte | signed 8 bits\nchar | jchar | unsighned 16 bits\nshort | jshort | signed 16 bits\nint | jint | signed 32 bits\nlong | jlong | signed 64 bits\nfloat | jfloat | 32 bits\ndouble | jdouble | 64 bits\nvoid(指针/对象引用) | void | N/A\n\n##### JNI对象引用关系\n\n![](/img/ndk-1.png)\n\n##### JNI接口指针\n\n![](/img/ndk-2.png)\n\n> ps: 上图的JNI函数表就好像C++的虚方法表一样。虚拟机可以运行多张JNI函数表(如一张用于调试，另外一张用于调用)。\n\n##### 例子\n\n```\n/**\n * @param *env JNI接口指针\n * @param obj 在native方法中定义的对象引用\n * @param i 原始类型 整数型\n * @param s 对象引用 string\n */\njdouble Java_pkg_Cls_f__ILjava_lang_String_2 (JNIEnv *env, jobject obj, jint i, jstring s)\n{\n     const char *str = (*env)->GetStringUTFChars(env, s, 0);\n     (*env)->ReleaseStringUTFChars(env, s, str);\n     return 10;\n}\n```\n\n#### 2. 其他引用类型说明\n\n> JNI定义了三种引用类型 局部引用、全局引用、全局弱引用\n\n##### 局部引用:\n\n> 所有通过JNI方法返回的Java对象都是局部引用\n> 局部引用只对创建该引用所在线程可见。\n\n方法结束时释放。但是也可以调用JNI方法`DeleteLocalRef`对其马上进行释放。\n\n##### 全局引用\n\n只有在主动调用释放方法时才释放，对其释放的JNI方法: `DeleteGlobalRef`; 创建全局引用的方法: `NewGlobalRef`\n\n##### 例子\n\n```\njclass localClazz;\njclass globalClazz;\n\nlocalClazz = (*env)->FindClass(env, \"java/lang/String\");\nglobalClazz = (*env)->NewGlobalRef(env, localClazz);\n\n// 立即释放localClazz局部引用\n(*env)->DeleteLocalRef(env, localClazz);\n\n// 立即释放globalClazz全局引用\n(*env)->DeleteGlobalRef(env, globalClazz);\n\n```\n\n### 错误机制\n\n> JNI不会像Java一样检测像NullPointerException、IllegalArgumentException、ArrayIndexOutOfBoundsException、ArrayStoreException等这样的错误。\n\n##### 不报错原因\n\n1. 错误检测会导致性能下降\n2. 在大多数C库函数中，很难对错误进行处理\n\n#### 处理方式\n\n> JNI允许使用Java的异常处理\n\n处理JNI函数中对应的出错的代码(因为即使出现异常, JNI层只会返回错误码，自己并不会报异常), 然后在JNI函数中错误对象抛异常到Java层(根据返回的错误代码)。\n\n```\n// 如果是一些数组操作的异常，可以使用ArrayIndexOutOfBoundsException、ArrayStoreException\njthrowable ExceptionOccurred(JNIEnv *env);\n```\n\n### JNI的编码\n\n> 标准UTF-8主要用在C，而Java使用的是UTF-16\n> JNI 使用的是 修改过的UTF-8: [Modified UTF-8 Strings](https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/types.html#modified_utf_8_strings)\n\n\n##### 结果:\n\n被编码过的'修改过的UTF-8'字符串只包含非空ASCII字符串，其中每个字符只需一个字符就可表示。但是所有的Unicode字符串都可以被表示\n\n##### 与标准UTF-8的差别\n\n1. null字符(0)使用两个字节的格式而非一个字节进行编码，因为修改过的UTF-8不再有嵌入的null(`\\0`)\n2. 只使用标准UTF-8的一字节、两字节、三字节的格式，而四字节的将使用两个三字节来代替表示。\n\n\n### JNI函数\n\n> JNI接口不仅仅包含数据集(dataset)，也包含了它的大量方法。\n> 官方文档: [JNI Functions](http://docs.oracle.com/javase/6/docs/technotes/guides/jni/spec/functions.html)\n\n##### 例子\n\n```\n#include <jni.h>\n...\n//用于创建与销毁Java虚拟机的接口指针\nJavaVM *jvm;\n\n// 包含大多数的JNI函数的JNI接口指针\nJNIEnv *env;\n\n// 存储Java虚拟机的参数\nJavaVMInitArgs vm_args;\n\n// 存储Java虚拟机的配置选项\nJavaVMOption* options = new JavaVMOption[1];\noptions[0].optionString = \"-Djava.class.path=/usr/lib/java\";\n\n// 初始化Java虚拟机参数\nvm_args.version = JNI_VERSION_1_6;\nvm_args.nOptions = 1;\nvm_args.options = options;\nvm_args.ignoreUnrecognized = false;\n\n// 载入Java虚拟机，返回JNI接口指针给*env\nJNI_CreateJavaVM(&jvm, &env, &vm_args);\n\n// 释放 Java虚拟机配置选项\ndelete options;\n\n// 调用Java虚拟机中的Main#text方法\njclass cls = env->FindClass(\"Main\");\njmethodID mid = env->GetStaticMethodID(cls, \"test\", \"(I)V\");\nenv->CallStaticVoidMethod(cls, mid, 100);\n\n// 释放Java虚拟机\njvm->DestroyJavaVM();\n```\n\n### JNI线程\n\n> 运行在Linux(Android)上的所有线程统一由内核管理的。\n\n\n\n\n\n#### JNI中的线程附加到虚拟机中\n\n我们可以通过`AttachCurrentThread`和`AttachCurrentThreadAsDaemon`函数将线程附加到虚拟机中，以保证可以正常访问JNI接口指针(JNIEnv)(注意上文JNI接口指针那张图提到的JNI接口指针只在当前线程可见)。\n\n#### 需要注意\n\nAndroid将不会主动释放在JNI中创建的线程(GC不会对其进行主动释放)，所有一定要记得不用时，主动调用`DetachCurrentThread`方法，进行释放。\n\n### Java中调用native方法\n\n#### 需要注意\n\n- 在方法前需要保留关键字`native`\n- Google建议方法名带`native`前缀，如`nativeGetStringFromFile`\n\n##### 例子\n\n```\nnative String nativeGetStringFromFile(String path) throws IOException;\nnative void nativeWriteByteArrayToFile(String path, byte[] b) throws IOException;\n```\n\n## III. 项目结构\n\n项目结构一般如下图:\n\n![](/img/ndk-3.jpeg)\n\n##### 需要注意\n\n- 所有的native代码都存储在jni文件夹下\n- 每个子目录对应一种处理器架构\n- 如果只带有armeabi，将对armeabi-v7a默认支持（通常只带armeabi的话，armeabi-v7a架构的处理器也支持，只是多一步翻译的过程，也会因此速度会变差）\n- 假若你有多种库(so文件)，要么支持处理器架构的，同时都支持，要么同时都不支持。例子: 如果a.so一个带了mips的，b.so的没有带，则在mips处理器架构的手机上，执行到需要b.so的地方，发现在mips中找不到b.so，就会crash。\n\n##### 针对简单的Android项目, 创建native项目:\n\n1. 创建jni文件夹，用于存储native源代码\n2. 创建`Andorid.mk`文件，用于构建项目\n3. 创建`Application.mk`文件（非必须），用于存储编译配置相关，能够灵活的配置编译。\n\n#### 1. `Android.mk`\n\n> 构建native项目的MAKEFILE文件\n> 官方介绍: [Android.mk](https://developer.android.com/intl/zh-cn/ndk/guides/android_mk.html)\n\n用于打包代码到\n静态库(statistic libraries)拷贝到项目的libs目录下，生成 共享库与独立可执行文件\n\n##### 例子\n\n```\n# 通过函数调用my-dir返回当前目录文件所在路径\nLOCAL_PATH :=$(call my-dir)\n\n# 清理所有除LOCAL_PATH以外的变量，由于所有文件的编译都是在同一个全局的GNU MAKE中执行的，所以这些变量都是全局的\ninclude$(CLEAR_VARS)\n\n# 所输出模块的名称，这里定义的是NDKBegining，\n# 编译完成后会在libs目录下创建libNDKBeginin库(Android给这加了前缀lib，但是要注意在java代码中申明时不用带这个前缀)\nLOCAL_MODULE    := NDKBegining\n\n# 列出需要被编译的源码文件\nLOCAL_SRC_FILES := ndkBegining.c \\\n                ndkBegining2.c\n\n# 将要输出的模块类型\ninclude$(BUILD_SHARED_LIBRARY)\n```\n\n##### 自定义变量\n\n可以在`Android.mk`中定义自定义变量，但是必须使用规范前缀: `LOCAL_`、`PRIVATE_`、`NDK_`、`APP_`、`MY_`(Google推荐)。\n\n```\n# 定义了自定义变量$(MY_SOURCE)\nMY_SOURCE := MYNDKfile.c\n\n# 将$(MY_SOURCE)变量连接起来到$(LOCAL_SRC_FILES)\nLOCAL_SRC_FILES += $(MY_SOURCE)\n```\n\n#### 2. `Application.mk`\n\n>  用于定义多种变量使得编译更加灵活的MAKEFILE文件\n> 官方文档: [Application.mk](https://developer.android.com/intl/zh-cn/ndk/guides/application_mk.html)\n\n```\n# (可选变量)\n# 指定是debug或是release\n# debug: 用于调试，将生成未被优化的二进制机器码\n# release: 将生成优化后的二进制机器码，默认是release，但是默认值会受manifest<application>中的android:debuggable影响\nAPP_OPTIM := release\n\n# 定义另外的Android.mk的路径\n# APP_BUILD_SCRI :=\n\n# (最重要的变量之一)，用于罗列目标编译的处理器架构。默认是armeabi\n# NDK 7或以上版本，直接指定APP_ABI := all就可以覆盖所有的架构，不用一一枚举\nAPP_ABI := armeabi armeabi-v7a x86 mips\n\n# 目标平台名称\nAPP_PLATFORM := android-9\n\n# 申明需要使用的C++标准库(Android默认只提供了精简的`libstdc++`)\nAPP_STL := stlport_shared\n\n# GCC编译器版本\n# NDK_TOOLCHAIN_VERSION := 4.9\n```\n\n##### APP_ABI\n\n架构 | 参数名\n- | -\nFPU指令集基于ARMv7 | armeabi-v7a\nARMV8 AArch64 | arm64-v8a\nIA-32 | x86\nIntel64 | x86_64\nMIPS32 | mips\nMIPS64(r6) | mips64\n\n##### APP_STL\n\n> 更多可以参考这里: [C++ Library Support](https://developer.android.com/intl/zh-cn/ndk/guides/cpp-support.html#runtimes)\n\n```\n# static STLport library\nAPP_STL := stlport_static\n\n# shared STLport library\nAPP_STL := stlport_shared\n\n#default C++ runtime library\nAPP_STL := system\n```\n\n#### 3. `NDK-BUILDS`\n\n> 基于GNU MAKE的封装\n> 官方文档: [ndk-build](http://developer.android.com/intl/zh-cn/ndk/guides/ndk-build.html)\n\n```\n# 清除之前生成的二进制文件\nclean\n\n# 强制进行debug构建(如果是要release构建: NDK_DEBUG=0)，如果没有指定，将会受到Manifest.xm中的android:debuggable影响(Google不建议使用android:debuggable参数，如果使用的是NDK版本大于8)\nNDK_DEBUG=1\n\n# 用于调试的时候，显示NDK内部的log信息\nNDK_LOG=1\n\n# 强制指定使用32位(如果系统支持，默认将会使用64位)\nNDK_HOST_32BIT=1\n\n# 编译的时候使用一个特殊的Application.mk的路径\nNDK_APPLICATION_MK=<file>\n\n```\n\n##### NDK_HOST_32BIT\n\n> [64-Bit and 32-Bit Toolchains](http://developer.android.com/intl/zh-cn/ndk/guides/ndk-build.html#6432)\n\n---\n\n#### 推荐书籍:\n\nCinar O. – Pro Android C++ with the NDK – 2012.\n\n## IV. JNI实践\n\n\n> - [Sample: hello-jni](https://developer.android.com/ndk/samples/sample_hellojni.html#ap)\n> - [Create Hello-JNI with Android Studio](https://codelabs.developers.google.com/codelabs/android-studio-jni/index.html#0)\n\n### 1. 简单的JNI\n\n> - [Sample: hello-jni](https://developer.android.com/ndk/samples/sample_hellojni.html#ap)\n> - [Create Hello-JNI with Android Studio](https://codelabs.developers.google.com/codelabs/android-studio-jni/index.html#0)\n\n#### 案例\n\n直接参照: https://github.com/Jacksgong/android-ndk#i-sample-try-hello-jni\n\n### 2. 引用已有库拓展\n\n> - [Using Prebuilt Libraries](https://developer.android.com/ndk/guides/prebuilts.html)\n> - [Android NDK with multiple pre-built libraries](http://labs.hyperandroid.com/android-ndk-with-multiple-pre-built-libraries)\n\n这里提到的引用已有库，是指引用已有的Shared libraries(`.so`)，或是引用已有的Static libraries(`.a`)。\n\n#### 相关知识\n\n##### Shared libraries\n\n> are `.so`(or in Windows `.dll`, or in OS X `.dylib`).\n\n**存储运行时引用它**。在Android中，我们只能通过`System.loadLibrary(\"..\")`加载它，因此别妄想将多个`.so`合成为一个`.so`了。\n\n##### Static libraries\n\n> are `.a`(or in Windows .lib).\n\n**可以直接在编译期link它**。在Android中，我们可以直接在`Android.mk`中配置，在编译期直接拷贝其代码，与我们的代码合成一个`.so`。\n\n#### 案例\n\n直接参照: https://github.com/Jacksgong/android-ndk#ii-reference-prebuilt-libraries-hello-libs\n\n---\n\n- 文章创建时间: 2015-11-08，[本文迭代日志](https://github.com/Jacksgong/Blog/commits/master/source/_posts/ndk.md)。\n\n---\n- [Building Your Project](http://developer.android.com/intl/zh-cn/ndk/guides/build.html)\n- [Introduction to Android NDK](http://elekslabs.com/2013/12/introduction-into-android-ndk.html)\n- [Chapter 5: The Invocation API](https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/invocation.html)\n- [Android NDK介绍（上）](http://www.importnew.com/8038.html)\n- [Android NDK介绍（下）](http://www.importnew.com/8052.html)\n- [NDK Application.mk使用手册](http://www.oschina.net/question/565065_93983)\n- [Working Around JNI UTF-8 Strings](http://banachowski.com/deprogramming/2012/02/working-around-jni-utf-8-strings/)\n- [Java Fundamentals Tutorial: Java Native Interface (JNI)](https://newcircle.com/bookshelf/java_fundamentals_tutorial/_java_native_interface_jni)\n- [JNI Functions](http://docs.oracle.com/javase/6/docs/technotes/guides/jni/spec/functions.html)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/ndk.md","raw":"title: NDK | JNI\ndate: 2016-12-24 23:16:03\npermalink: 2016/11/08/ndk\ntags:\n- ndk\n- jni\n- Android\n- C\n- C++\n\n---\n\n## I. 初识\n\n### 1. NDK\n\n> Native Development Kit\n\n是一套让你的Android应用一部分代码可以使用像C/C++语言的工具包\n\n<!-- more -->\n#### 一般什么时候可以使用NDK\n\n> 谷歌建议真正要使用NDK的情况是在很少数情况\n\n- 需要提高执行性能（e.g. 大数据排序）\n- 需要使用c/c++实现的第三方库（如 Ffmpeg，OpenCV）\n- 需要调用更加底层的代码(如，你想调用Dalvik以外的代码)\n\n### 2. JNI\n\n> Java Native Interface\n\n是一套在Java虚拟机控制下代码执行的标准机制。使得Java可以调用c/c++的方法，或者c/c++中可以调用Java。\n\n#### JNI标准机制的实现\n\n由汇编或c/c++的代码，组装(assembled)成动态库(允许非静态绑定），由此实现Java与c/c++双向调用。\n\n#### JNI的优势\n\n相比其他类似的(Netscape Java运行接口、Microsoft的原始本地接口、COM/Java接口)相比，它的优势在于兼容性:\n\n- 对二进制兼容(c/c++的代码编译后是二进制，由于二进制是程序兼容性类型(不用改变执行文件，就可以直接在不同环境下执行)，所以c/c++编译后的代码可以在任何平台下执行)\n- 对所有用Java虚拟机的具体平台兼容\n\n## II. 基本知识\n\n> 为了更清晰，本地(虚拟机所在环境原生语言(通常是c/c++))这里都用native单词表示，而不直译\n\n\n### 参数与引用\n\n#### 1. 方法参数说明\n\n> 虚拟机需要追踪所有传递到native层的参数，使得GC不会在native层还在用这些参数引用的时候被清除了\n\n##### 需要注意\n\n1. 原始类型直接通过相互拷贝传递\n2. 对象 通过引用传递\n\n##### JNI原始类型\n\nJava类型 | Native类型 | 备注\n:-: |:-: |:-:\nboolean | jboolean | unsigned 8 bits\nbyte | jbyte | signed 8 bits\nchar | jchar | unsighned 16 bits\nshort | jshort | signed 16 bits\nint | jint | signed 32 bits\nlong | jlong | signed 64 bits\nfloat | jfloat | 32 bits\ndouble | jdouble | 64 bits\nvoid(指针/对象引用) | void | N/A\n\n##### JNI对象引用关系\n\n![](/img/ndk-1.png)\n\n##### JNI接口指针\n\n![](/img/ndk-2.png)\n\n> ps: 上图的JNI函数表就好像C++的虚方法表一样。虚拟机可以运行多张JNI函数表(如一张用于调试，另外一张用于调用)。\n\n##### 例子\n\n```\n/**\n * @param *env JNI接口指针\n * @param obj 在native方法中定义的对象引用\n * @param i 原始类型 整数型\n * @param s 对象引用 string\n */\njdouble Java_pkg_Cls_f__ILjava_lang_String_2 (JNIEnv *env, jobject obj, jint i, jstring s)\n{\n     const char *str = (*env)->GetStringUTFChars(env, s, 0);\n     (*env)->ReleaseStringUTFChars(env, s, str);\n     return 10;\n}\n```\n\n#### 2. 其他引用类型说明\n\n> JNI定义了三种引用类型 局部引用、全局引用、全局弱引用\n\n##### 局部引用:\n\n> 所有通过JNI方法返回的Java对象都是局部引用\n> 局部引用只对创建该引用所在线程可见。\n\n方法结束时释放。但是也可以调用JNI方法`DeleteLocalRef`对其马上进行释放。\n\n##### 全局引用\n\n只有在主动调用释放方法时才释放，对其释放的JNI方法: `DeleteGlobalRef`; 创建全局引用的方法: `NewGlobalRef`\n\n##### 例子\n\n```\njclass localClazz;\njclass globalClazz;\n\nlocalClazz = (*env)->FindClass(env, \"java/lang/String\");\nglobalClazz = (*env)->NewGlobalRef(env, localClazz);\n\n// 立即释放localClazz局部引用\n(*env)->DeleteLocalRef(env, localClazz);\n\n// 立即释放globalClazz全局引用\n(*env)->DeleteGlobalRef(env, globalClazz);\n\n```\n\n### 错误机制\n\n> JNI不会像Java一样检测像NullPointerException、IllegalArgumentException、ArrayIndexOutOfBoundsException、ArrayStoreException等这样的错误。\n\n##### 不报错原因\n\n1. 错误检测会导致性能下降\n2. 在大多数C库函数中，很难对错误进行处理\n\n#### 处理方式\n\n> JNI允许使用Java的异常处理\n\n处理JNI函数中对应的出错的代码(因为即使出现异常, JNI层只会返回错误码，自己并不会报异常), 然后在JNI函数中错误对象抛异常到Java层(根据返回的错误代码)。\n\n```\n// 如果是一些数组操作的异常，可以使用ArrayIndexOutOfBoundsException、ArrayStoreException\njthrowable ExceptionOccurred(JNIEnv *env);\n```\n\n### JNI的编码\n\n> 标准UTF-8主要用在C，而Java使用的是UTF-16\n> JNI 使用的是 修改过的UTF-8: [Modified UTF-8 Strings](https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/types.html#modified_utf_8_strings)\n\n\n##### 结果:\n\n被编码过的'修改过的UTF-8'字符串只包含非空ASCII字符串，其中每个字符只需一个字符就可表示。但是所有的Unicode字符串都可以被表示\n\n##### 与标准UTF-8的差别\n\n1. null字符(0)使用两个字节的格式而非一个字节进行编码，因为修改过的UTF-8不再有嵌入的null(`\\0`)\n2. 只使用标准UTF-8的一字节、两字节、三字节的格式，而四字节的将使用两个三字节来代替表示。\n\n\n### JNI函数\n\n> JNI接口不仅仅包含数据集(dataset)，也包含了它的大量方法。\n> 官方文档: [JNI Functions](http://docs.oracle.com/javase/6/docs/technotes/guides/jni/spec/functions.html)\n\n##### 例子\n\n```\n#include <jni.h>\n...\n//用于创建与销毁Java虚拟机的接口指针\nJavaVM *jvm;\n\n// 包含大多数的JNI函数的JNI接口指针\nJNIEnv *env;\n\n// 存储Java虚拟机的参数\nJavaVMInitArgs vm_args;\n\n// 存储Java虚拟机的配置选项\nJavaVMOption* options = new JavaVMOption[1];\noptions[0].optionString = \"-Djava.class.path=/usr/lib/java\";\n\n// 初始化Java虚拟机参数\nvm_args.version = JNI_VERSION_1_6;\nvm_args.nOptions = 1;\nvm_args.options = options;\nvm_args.ignoreUnrecognized = false;\n\n// 载入Java虚拟机，返回JNI接口指针给*env\nJNI_CreateJavaVM(&jvm, &env, &vm_args);\n\n// 释放 Java虚拟机配置选项\ndelete options;\n\n// 调用Java虚拟机中的Main#text方法\njclass cls = env->FindClass(\"Main\");\njmethodID mid = env->GetStaticMethodID(cls, \"test\", \"(I)V\");\nenv->CallStaticVoidMethod(cls, mid, 100);\n\n// 释放Java虚拟机\njvm->DestroyJavaVM();\n```\n\n### JNI线程\n\n> 运行在Linux(Android)上的所有线程统一由内核管理的。\n\n\n\n\n\n#### JNI中的线程附加到虚拟机中\n\n我们可以通过`AttachCurrentThread`和`AttachCurrentThreadAsDaemon`函数将线程附加到虚拟机中，以保证可以正常访问JNI接口指针(JNIEnv)(注意上文JNI接口指针那张图提到的JNI接口指针只在当前线程可见)。\n\n#### 需要注意\n\nAndroid将不会主动释放在JNI中创建的线程(GC不会对其进行主动释放)，所有一定要记得不用时，主动调用`DetachCurrentThread`方法，进行释放。\n\n### Java中调用native方法\n\n#### 需要注意\n\n- 在方法前需要保留关键字`native`\n- Google建议方法名带`native`前缀，如`nativeGetStringFromFile`\n\n##### 例子\n\n```\nnative String nativeGetStringFromFile(String path) throws IOException;\nnative void nativeWriteByteArrayToFile(String path, byte[] b) throws IOException;\n```\n\n## III. 项目结构\n\n项目结构一般如下图:\n\n![](/img/ndk-3.jpeg)\n\n##### 需要注意\n\n- 所有的native代码都存储在jni文件夹下\n- 每个子目录对应一种处理器架构\n- 如果只带有armeabi，将对armeabi-v7a默认支持（通常只带armeabi的话，armeabi-v7a架构的处理器也支持，只是多一步翻译的过程，也会因此速度会变差）\n- 假若你有多种库(so文件)，要么支持处理器架构的，同时都支持，要么同时都不支持。例子: 如果a.so一个带了mips的，b.so的没有带，则在mips处理器架构的手机上，执行到需要b.so的地方，发现在mips中找不到b.so，就会crash。\n\n##### 针对简单的Android项目, 创建native项目:\n\n1. 创建jni文件夹，用于存储native源代码\n2. 创建`Andorid.mk`文件，用于构建项目\n3. 创建`Application.mk`文件（非必须），用于存储编译配置相关，能够灵活的配置编译。\n\n#### 1. `Android.mk`\n\n> 构建native项目的MAKEFILE文件\n> 官方介绍: [Android.mk](https://developer.android.com/intl/zh-cn/ndk/guides/android_mk.html)\n\n用于打包代码到\n静态库(statistic libraries)拷贝到项目的libs目录下，生成 共享库与独立可执行文件\n\n##### 例子\n\n```\n# 通过函数调用my-dir返回当前目录文件所在路径\nLOCAL_PATH :=$(call my-dir)\n\n# 清理所有除LOCAL_PATH以外的变量，由于所有文件的编译都是在同一个全局的GNU MAKE中执行的，所以这些变量都是全局的\ninclude$(CLEAR_VARS)\n\n# 所输出模块的名称，这里定义的是NDKBegining，\n# 编译完成后会在libs目录下创建libNDKBeginin库(Android给这加了前缀lib，但是要注意在java代码中申明时不用带这个前缀)\nLOCAL_MODULE    := NDKBegining\n\n# 列出需要被编译的源码文件\nLOCAL_SRC_FILES := ndkBegining.c \\\n                ndkBegining2.c\n\n# 将要输出的模块类型\ninclude$(BUILD_SHARED_LIBRARY)\n```\n\n##### 自定义变量\n\n可以在`Android.mk`中定义自定义变量，但是必须使用规范前缀: `LOCAL_`、`PRIVATE_`、`NDK_`、`APP_`、`MY_`(Google推荐)。\n\n```\n# 定义了自定义变量$(MY_SOURCE)\nMY_SOURCE := MYNDKfile.c\n\n# 将$(MY_SOURCE)变量连接起来到$(LOCAL_SRC_FILES)\nLOCAL_SRC_FILES += $(MY_SOURCE)\n```\n\n#### 2. `Application.mk`\n\n>  用于定义多种变量使得编译更加灵活的MAKEFILE文件\n> 官方文档: [Application.mk](https://developer.android.com/intl/zh-cn/ndk/guides/application_mk.html)\n\n```\n# (可选变量)\n# 指定是debug或是release\n# debug: 用于调试，将生成未被优化的二进制机器码\n# release: 将生成优化后的二进制机器码，默认是release，但是默认值会受manifest<application>中的android:debuggable影响\nAPP_OPTIM := release\n\n# 定义另外的Android.mk的路径\n# APP_BUILD_SCRI :=\n\n# (最重要的变量之一)，用于罗列目标编译的处理器架构。默认是armeabi\n# NDK 7或以上版本，直接指定APP_ABI := all就可以覆盖所有的架构，不用一一枚举\nAPP_ABI := armeabi armeabi-v7a x86 mips\n\n# 目标平台名称\nAPP_PLATFORM := android-9\n\n# 申明需要使用的C++标准库(Android默认只提供了精简的`libstdc++`)\nAPP_STL := stlport_shared\n\n# GCC编译器版本\n# NDK_TOOLCHAIN_VERSION := 4.9\n```\n\n##### APP_ABI\n\n架构 | 参数名\n- | -\nFPU指令集基于ARMv7 | armeabi-v7a\nARMV8 AArch64 | arm64-v8a\nIA-32 | x86\nIntel64 | x86_64\nMIPS32 | mips\nMIPS64(r6) | mips64\n\n##### APP_STL\n\n> 更多可以参考这里: [C++ Library Support](https://developer.android.com/intl/zh-cn/ndk/guides/cpp-support.html#runtimes)\n\n```\n# static STLport library\nAPP_STL := stlport_static\n\n# shared STLport library\nAPP_STL := stlport_shared\n\n#default C++ runtime library\nAPP_STL := system\n```\n\n#### 3. `NDK-BUILDS`\n\n> 基于GNU MAKE的封装\n> 官方文档: [ndk-build](http://developer.android.com/intl/zh-cn/ndk/guides/ndk-build.html)\n\n```\n# 清除之前生成的二进制文件\nclean\n\n# 强制进行debug构建(如果是要release构建: NDK_DEBUG=0)，如果没有指定，将会受到Manifest.xm中的android:debuggable影响(Google不建议使用android:debuggable参数，如果使用的是NDK版本大于8)\nNDK_DEBUG=1\n\n# 用于调试的时候，显示NDK内部的log信息\nNDK_LOG=1\n\n# 强制指定使用32位(如果系统支持，默认将会使用64位)\nNDK_HOST_32BIT=1\n\n# 编译的时候使用一个特殊的Application.mk的路径\nNDK_APPLICATION_MK=<file>\n\n```\n\n##### NDK_HOST_32BIT\n\n> [64-Bit and 32-Bit Toolchains](http://developer.android.com/intl/zh-cn/ndk/guides/ndk-build.html#6432)\n\n---\n\n#### 推荐书籍:\n\nCinar O. – Pro Android C++ with the NDK – 2012.\n\n## IV. JNI实践\n\n\n> - [Sample: hello-jni](https://developer.android.com/ndk/samples/sample_hellojni.html#ap)\n> - [Create Hello-JNI with Android Studio](https://codelabs.developers.google.com/codelabs/android-studio-jni/index.html#0)\n\n### 1. 简单的JNI\n\n> - [Sample: hello-jni](https://developer.android.com/ndk/samples/sample_hellojni.html#ap)\n> - [Create Hello-JNI with Android Studio](https://codelabs.developers.google.com/codelabs/android-studio-jni/index.html#0)\n\n#### 案例\n\n直接参照: https://github.com/Jacksgong/android-ndk#i-sample-try-hello-jni\n\n### 2. 引用已有库拓展\n\n> - [Using Prebuilt Libraries](https://developer.android.com/ndk/guides/prebuilts.html)\n> - [Android NDK with multiple pre-built libraries](http://labs.hyperandroid.com/android-ndk-with-multiple-pre-built-libraries)\n\n这里提到的引用已有库，是指引用已有的Shared libraries(`.so`)，或是引用已有的Static libraries(`.a`)。\n\n#### 相关知识\n\n##### Shared libraries\n\n> are `.so`(or in Windows `.dll`, or in OS X `.dylib`).\n\n**存储运行时引用它**。在Android中，我们只能通过`System.loadLibrary(\"..\")`加载它，因此别妄想将多个`.so`合成为一个`.so`了。\n\n##### Static libraries\n\n> are `.a`(or in Windows .lib).\n\n**可以直接在编译期link它**。在Android中，我们可以直接在`Android.mk`中配置，在编译期直接拷贝其代码，与我们的代码合成一个`.so`。\n\n#### 案例\n\n直接参照: https://github.com/Jacksgong/android-ndk#ii-reference-prebuilt-libraries-hello-libs\n\n---\n\n- 文章创建时间: 2015-11-08，[本文迭代日志](https://github.com/Jacksgong/Blog/commits/master/source/_posts/ndk.md)。\n\n---\n- [Building Your Project](http://developer.android.com/intl/zh-cn/ndk/guides/build.html)\n- [Introduction to Android NDK](http://elekslabs.com/2013/12/introduction-into-android-ndk.html)\n- [Chapter 5: The Invocation API](https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/invocation.html)\n- [Android NDK介绍（上）](http://www.importnew.com/8038.html)\n- [Android NDK介绍（下）](http://www.importnew.com/8052.html)\n- [NDK Application.mk使用手册](http://www.oschina.net/question/565065_93983)\n- [Working Around JNI UTF-8 Strings](http://banachowski.com/deprogramming/2012/02/working-around-jni-utf-8-strings/)\n- [Java Fundamentals Tutorial: Java Native Interface (JNI)](https://newcircle.com/bookshelf/java_fundamentals_tutorial/_java_native_interface_jni)\n- [JNI Functions](http://docs.oracle.com/javase/6/docs/technotes/guides/jni/spec/functions.html)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2016/11/08/ndk","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66j6003995bu1tun2kr0","content":"<h2 id=\"I-初识\"><a href=\"#I-初识\" class=\"headerlink\" title=\"I. 初识\"></a>I. 初识</h2><h3 id=\"1-NDK\"><a href=\"#1-NDK\" class=\"headerlink\" title=\"1. NDK\"></a>1. NDK</h3><blockquote>\n<p>Native Development Kit</p>\n</blockquote>\n<p>是一套让你的Android应用一部分代码可以使用像C/C++语言的工具包</p>\n<a id=\"more\"></a>\n<h4 id=\"一般什么时候可以使用NDK\"><a href=\"#一般什么时候可以使用NDK\" class=\"headerlink\" title=\"一般什么时候可以使用NDK\"></a>一般什么时候可以使用NDK</h4><blockquote>\n<p>谷歌建议真正要使用NDK的情况是在很少数情况</p>\n</blockquote>\n<ul>\n<li>需要提高执行性能（e.g. 大数据排序）</li>\n<li>需要使用c/c++实现的第三方库（如 Ffmpeg，OpenCV）</li>\n<li>需要调用更加底层的代码(如，你想调用Dalvik以外的代码)</li>\n</ul>\n<h3 id=\"2-JNI\"><a href=\"#2-JNI\" class=\"headerlink\" title=\"2. JNI\"></a>2. JNI</h3><blockquote>\n<p>Java Native Interface</p>\n</blockquote>\n<p>是一套在Java虚拟机控制下代码执行的标准机制。使得Java可以调用c/c++的方法，或者c/c++中可以调用Java。</p>\n<h4 id=\"JNI标准机制的实现\"><a href=\"#JNI标准机制的实现\" class=\"headerlink\" title=\"JNI标准机制的实现\"></a>JNI标准机制的实现</h4><p>由汇编或c/c++的代码，组装(assembled)成动态库(允许非静态绑定），由此实现Java与c/c++双向调用。</p>\n<h4 id=\"JNI的优势\"><a href=\"#JNI的优势\" class=\"headerlink\" title=\"JNI的优势\"></a>JNI的优势</h4><p>相比其他类似的(Netscape Java运行接口、Microsoft的原始本地接口、COM/Java接口)相比，它的优势在于兼容性:</p>\n<ul>\n<li>对二进制兼容(c/c++的代码编译后是二进制，由于二进制是程序兼容性类型(不用改变执行文件，就可以直接在不同环境下执行)，所以c/c++编译后的代码可以在任何平台下执行)</li>\n<li>对所有用Java虚拟机的具体平台兼容</li>\n</ul>\n<h2 id=\"II-基本知识\"><a href=\"#II-基本知识\" class=\"headerlink\" title=\"II. 基本知识\"></a>II. 基本知识</h2><blockquote>\n<p>为了更清晰，本地(虚拟机所在环境原生语言(通常是c/c++))这里都用native单词表示，而不直译</p>\n</blockquote>\n<h3 id=\"参数与引用\"><a href=\"#参数与引用\" class=\"headerlink\" title=\"参数与引用\"></a>参数与引用</h3><h4 id=\"1-方法参数说明\"><a href=\"#1-方法参数说明\" class=\"headerlink\" title=\"1. 方法参数说明\"></a>1. 方法参数说明</h4><blockquote>\n<p>虚拟机需要追踪所有传递到native层的参数，使得GC不会在native层还在用这些参数引用的时候被清除了</p>\n</blockquote>\n<h5 id=\"需要注意\"><a href=\"#需要注意\" class=\"headerlink\" title=\"需要注意\"></a>需要注意</h5><ol>\n<li>原始类型直接通过相互拷贝传递</li>\n<li>对象 通过引用传递</li>\n</ol>\n<h5 id=\"JNI原始类型\"><a href=\"#JNI原始类型\" class=\"headerlink\" title=\"JNI原始类型\"></a>JNI原始类型</h5><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Java类型</th>\n<th style=\"text-align:center\">Native类型</th>\n<th style=\"text-align:center\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:center\">jboolean</td>\n<td style=\"text-align:center\">unsigned 8 bits</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">byte</td>\n<td style=\"text-align:center\">jbyte</td>\n<td style=\"text-align:center\">signed 8 bits</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">char</td>\n<td style=\"text-align:center\">jchar</td>\n<td style=\"text-align:center\">unsighned 16 bits</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">short</td>\n<td style=\"text-align:center\">jshort</td>\n<td style=\"text-align:center\">signed 16 bits</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:center\">jint</td>\n<td style=\"text-align:center\">signed 32 bits</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">long</td>\n<td style=\"text-align:center\">jlong</td>\n<td style=\"text-align:center\">signed 64 bits</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">float</td>\n<td style=\"text-align:center\">jfloat</td>\n<td style=\"text-align:center\">32 bits</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">double</td>\n<td style=\"text-align:center\">jdouble</td>\n<td style=\"text-align:center\">64 bits</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">void(指针/对象引用)</td>\n<td style=\"text-align:center\">void</td>\n<td style=\"text-align:center\">N/A</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"JNI对象引用关系\"><a href=\"#JNI对象引用关系\" class=\"headerlink\" title=\"JNI对象引用关系\"></a>JNI对象引用关系</h5><p><img src=\"/img/ndk-1.png\" alt=\"\"></p>\n<h5 id=\"JNI接口指针\"><a href=\"#JNI接口指针\" class=\"headerlink\" title=\"JNI接口指针\"></a>JNI接口指针</h5><p><img src=\"/img/ndk-2.png\" alt=\"\"></p>\n<blockquote>\n<p>ps: 上图的JNI函数表就好像C++的虚方法表一样。虚拟机可以运行多张JNI函数表(如一张用于调试，另外一张用于调用)。</p>\n</blockquote>\n<h5 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h5><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @param *env JNI接口指针</div><div class=\"line\"> * @param obj 在native方法中定义的对象引用</div><div class=\"line\"> * @param i 原始类型 整数型</div><div class=\"line\"> * @param s 对象引用 string</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">jdouble </span><span class=\"keyword\">Java_pkg_Cls_f__ILjava_lang_String_2 </span>(<span class=\"keyword\">JNIEnv </span>*env, <span class=\"keyword\">jobject </span>obj, <span class=\"keyword\">jint </span>i, <span class=\"keyword\">jstring </span>s)</div><div class=\"line\">&#123;</div><div class=\"line\">     const char *str = (*env)-&gt;GetStringUTFChars(env, s, <span class=\"number\">0</span>)<span class=\"comment\">;</span></div><div class=\"line\">     (*env)-&gt;ReleaseStringUTFChars(env, s, str)<span class=\"comment\">;</span></div><div class=\"line\">     return <span class=\"number\">10</span><span class=\"comment\">;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"2-其他引用类型说明\"><a href=\"#2-其他引用类型说明\" class=\"headerlink\" title=\"2. 其他引用类型说明\"></a>2. 其他引用类型说明</h4><blockquote>\n<p>JNI定义了三种引用类型 局部引用、全局引用、全局弱引用</p>\n</blockquote>\n<h5 id=\"局部引用\"><a href=\"#局部引用\" class=\"headerlink\" title=\"局部引用:\"></a>局部引用:</h5><blockquote>\n<p>所有通过JNI方法返回的Java对象都是局部引用<br>局部引用只对创建该引用所在线程可见。</p>\n</blockquote>\n<p>方法结束时释放。但是也可以调用JNI方法<code>DeleteLocalRef</code>对其马上进行释放。</p>\n<h5 id=\"全局引用\"><a href=\"#全局引用\" class=\"headerlink\" title=\"全局引用\"></a>全局引用</h5><p>只有在主动调用释放方法时才释放，对其释放的JNI方法: <code>DeleteGlobalRef</code>; 创建全局引用的方法: <code>NewGlobalRef</code></p>\n<h5 id=\"例子-1\"><a href=\"#例子-1\" class=\"headerlink\" title=\"例子\"></a>例子</h5><figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">jclass localClazz;</div><div class=\"line\">jclass globalClazz;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">localClazz</span> = <span class=\"params\">(*env)</span>-&gt;</span>FindClass(env, <span class=\"string\">\"java/lang/String\"</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"title\">globalClazz</span> = <span class=\"params\">(*env)</span>-&gt;</span>NewGlobalRef(env, localClazz);</div><div class=\"line\"></div><div class=\"line\"><span class=\"regexp\">// 立即释放localClazz局部引用</span></div><div class=\"line\">(*env)-&gt;DeleteLocalRef(env, localClazz);</div><div class=\"line\"></div><div class=\"line\">// 立即释放globalClazz全局引用</div><div class=\"line\"><span class=\"function\"><span class=\"params\">(*env)</span>-&gt;</span>DeleteGlobalRef(env, globalClazz);</div></pre></td></tr></table></figure>\n<h3 id=\"错误机制\"><a href=\"#错误机制\" class=\"headerlink\" title=\"错误机制\"></a>错误机制</h3><blockquote>\n<p>JNI不会像Java一样检测像NullPointerException、IllegalArgumentException、ArrayIndexOutOfBoundsException、ArrayStoreException等这样的错误。</p>\n</blockquote>\n<h5 id=\"不报错原因\"><a href=\"#不报错原因\" class=\"headerlink\" title=\"不报错原因\"></a>不报错原因</h5><ol>\n<li>错误检测会导致性能下降</li>\n<li>在大多数C库函数中，很难对错误进行处理</li>\n</ol>\n<h4 id=\"处理方式\"><a href=\"#处理方式\" class=\"headerlink\" title=\"处理方式\"></a>处理方式</h4><blockquote>\n<p>JNI允许使用Java的异常处理</p>\n</blockquote>\n<p>处理JNI函数中对应的出错的代码(因为即使出现异常, JNI层只会返回错误码，自己并不会报异常), 然后在JNI函数中错误对象抛异常到Java层(根据返回的错误代码)。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 如果是一些数组操作的异常，可以使用ArrayIndexOutOfBoundsException、ArrayStoreException</span></div><div class=\"line\"><span class=\"function\">jthrowable <span class=\"title\">ExceptionOccurred</span><span class=\"params\">(JNIEnv *env)</span></span>;</div></pre></td></tr></table></figure>\n<h3 id=\"JNI的编码\"><a href=\"#JNI的编码\" class=\"headerlink\" title=\"JNI的编码\"></a>JNI的编码</h3><blockquote>\n<p>标准UTF-8主要用在C，而Java使用的是UTF-16<br>JNI 使用的是 修改过的UTF-8: <a href=\"https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/types.html#modified_utf_8_strings\" target=\"_blank\" rel=\"external\">Modified UTF-8 Strings</a></p>\n</blockquote>\n<h5 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果:\"></a>结果:</h5><p>被编码过的’修改过的UTF-8’字符串只包含非空ASCII字符串，其中每个字符只需一个字符就可表示。但是所有的Unicode字符串都可以被表示</p>\n<h5 id=\"与标准UTF-8的差别\"><a href=\"#与标准UTF-8的差别\" class=\"headerlink\" title=\"与标准UTF-8的差别\"></a>与标准UTF-8的差别</h5><ol>\n<li>null字符(0)使用两个字节的格式而非一个字节进行编码，因为修改过的UTF-8不再有嵌入的null(<code>\\0</code>)</li>\n<li>只使用标准UTF-8的一字节、两字节、三字节的格式，而四字节的将使用两个三字节来代替表示。</li>\n</ol>\n<h3 id=\"JNI函数\"><a href=\"#JNI函数\" class=\"headerlink\" title=\"JNI函数\"></a>JNI函数</h3><blockquote>\n<p>JNI接口不仅仅包含数据集(dataset)，也包含了它的大量方法。<br>官方文档: <a href=\"http://docs.oracle.com/javase/6/docs/technotes/guides/jni/spec/functions.html\" target=\"_blank\" rel=\"external\">JNI Functions</a></p>\n</blockquote>\n<h5 id=\"例子-2\"><a href=\"#例子-2\" class=\"headerlink\" title=\"例子\"></a>例子</h5><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">#<span class=\"keyword\">include</span> &lt;jni.h&gt;</div><div class=\"line\">...</div><div class=\"line\"><span class=\"comment\">//用于创建与销毁Java虚拟机的接口指针</span></div><div class=\"line\">JavaVM *jvm;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 包含大多数的JNI函数的JNI接口指针</span></div><div class=\"line\">JNIEnv *env;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 存储Java虚拟机的参数</span></div><div class=\"line\">JavaVMInitArgs vm_args;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 存储Java虚拟机的配置选项</span></div><div class=\"line\">JavaVMOption* <span class=\"keyword\">options</span> = <span class=\"keyword\">new</span> JavaVMOption[<span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">options</span>[<span class=\"number\">0</span>].optionString = <span class=\"string\">\"-Djava.class.path=/usr/lib/java\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 初始化Java虚拟机参数</span></div><div class=\"line\">vm_args.version = JNI_VERSION_1_6;</div><div class=\"line\">vm_args.nOptions = <span class=\"number\">1</span>;</div><div class=\"line\">vm_args.<span class=\"keyword\">options</span> = <span class=\"keyword\">options</span>;</div><div class=\"line\">vm_args.ignoreUnrecognized = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 载入Java虚拟机，返回JNI接口指针给*env</span></div><div class=\"line\">JNI_CreateJavaVM(&amp;jvm, &amp;env, &amp;vm_args);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 释放 Java虚拟机配置选项</span></div><div class=\"line\"><span class=\"keyword\">delete</span> <span class=\"keyword\">options</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 调用Java虚拟机中的Main#text方法</span></div><div class=\"line\">jclass cls = env-&gt;FindClass(<span class=\"string\">\"Main\"</span>);</div><div class=\"line\">jmethodID mid = env-&gt;GetStaticMethodID(cls, <span class=\"string\">\"test\"</span>, <span class=\"string\">\"(I)V\"</span>);</div><div class=\"line\">env-&gt;CallStaticVoidMethod(cls, mid, <span class=\"number\">100</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 释放Java虚拟机</span></div><div class=\"line\">jvm-&gt;DestroyJavaVM();</div></pre></td></tr></table></figure>\n<h3 id=\"JNI线程\"><a href=\"#JNI线程\" class=\"headerlink\" title=\"JNI线程\"></a>JNI线程</h3><blockquote>\n<p>运行在Linux(Android)上的所有线程统一由内核管理的。</p>\n</blockquote>\n<h4 id=\"JNI中的线程附加到虚拟机中\"><a href=\"#JNI中的线程附加到虚拟机中\" class=\"headerlink\" title=\"JNI中的线程附加到虚拟机中\"></a>JNI中的线程附加到虚拟机中</h4><p>我们可以通过<code>AttachCurrentThread</code>和<code>AttachCurrentThreadAsDaemon</code>函数将线程附加到虚拟机中，以保证可以正常访问JNI接口指针(JNIEnv)(注意上文JNI接口指针那张图提到的JNI接口指针只在当前线程可见)。</p>\n<h4 id=\"需要注意-1\"><a href=\"#需要注意-1\" class=\"headerlink\" title=\"需要注意\"></a>需要注意</h4><p>Android将不会主动释放在JNI中创建的线程(GC不会对其进行主动释放)，所有一定要记得不用时，主动调用<code>DetachCurrentThread</code>方法，进行释放。</p>\n<h3 id=\"Java中调用native方法\"><a href=\"#Java中调用native方法\" class=\"headerlink\" title=\"Java中调用native方法\"></a>Java中调用native方法</h3><h4 id=\"需要注意-2\"><a href=\"#需要注意-2\" class=\"headerlink\" title=\"需要注意\"></a>需要注意</h4><ul>\n<li>在方法前需要保留关键字<code>native</code></li>\n<li>Google建议方法名带<code>native</code>前缀，如<code>nativeGetStringFromFile</code></li>\n</ul>\n<h5 id=\"例子-3\"><a href=\"#例子-3\" class=\"headerlink\" title=\"例子\"></a>例子</h5><figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">native</span> <span class=\"keyword\">String</span> nativeGetStringFromFile(<span class=\"keyword\">String</span> path) <span class=\"keyword\">throws</span> IOException;</div><div class=\"line\"><span class=\"keyword\">native</span> <span class=\"keyword\">void</span> nativeWriteByteArrayToFile(<span class=\"keyword\">String</span> path, <span class=\"built_in\">byte</span>[] b) <span class=\"keyword\">throws</span> IOException;</div></pre></td></tr></table></figure>\n<h2 id=\"III-项目结构\"><a href=\"#III-项目结构\" class=\"headerlink\" title=\"III. 项目结构\"></a>III. 项目结构</h2><p>项目结构一般如下图:</p>\n<p><img src=\"/img/ndk-3.jpeg\" alt=\"\"></p>\n<h5 id=\"需要注意-3\"><a href=\"#需要注意-3\" class=\"headerlink\" title=\"需要注意\"></a>需要注意</h5><ul>\n<li>所有的native代码都存储在jni文件夹下</li>\n<li>每个子目录对应一种处理器架构</li>\n<li>如果只带有armeabi，将对armeabi-v7a默认支持（通常只带armeabi的话，armeabi-v7a架构的处理器也支持，只是多一步翻译的过程，也会因此速度会变差）</li>\n<li>假若你有多种库(so文件)，要么支持处理器架构的，同时都支持，要么同时都不支持。例子: 如果a.so一个带了mips的，b.so的没有带，则在mips处理器架构的手机上，执行到需要b.so的地方，发现在mips中找不到b.so，就会crash。</li>\n</ul>\n<h5 id=\"针对简单的Android项目-创建native项目\"><a href=\"#针对简单的Android项目-创建native项目\" class=\"headerlink\" title=\"针对简单的Android项目, 创建native项目:\"></a>针对简单的Android项目, 创建native项目:</h5><ol>\n<li>创建jni文件夹，用于存储native源代码</li>\n<li>创建<code>Andorid.mk</code>文件，用于构建项目</li>\n<li>创建<code>Application.mk</code>文件（非必须），用于存储编译配置相关，能够灵活的配置编译。</li>\n</ol>\n<h4 id=\"1-Android-mk\"><a href=\"#1-Android-mk\" class=\"headerlink\" title=\"1. Android.mk\"></a>1. <code>Android.mk</code></h4><blockquote>\n<p>构建native项目的MAKEFILE文件<br>官方介绍: <a href=\"https://developer.android.com/intl/zh-cn/ndk/guides/android_mk.html\" target=\"_blank\" rel=\"external\">Android.mk</a></p>\n</blockquote>\n<p>用于打包代码到<br>静态库(statistic libraries)拷贝到项目的libs目录下，生成 共享库与独立可执行文件</p>\n<h5 id=\"例子-4\"><a href=\"#例子-4\" class=\"headerlink\" title=\"例子\"></a>例子</h5><figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"># 通过函数调用my-dir返回当前目录文件所在路径</span></div><div class=\"line\">LOCAL_PATH :=$(call my-dir)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 清理所有除LOCAL_PATH以外的变量，由于所有文件的编译都是在同一个全局的GNU MAKE中执行的，所以这些变量都是全局的</span></div><div class=\"line\">include$(CLEAR_VARS)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 所输出模块的名称，这里定义的是NDKBegining，</span></div><div class=\"line\"><span class=\"meta\"># 编译完成后会在libs目录下创建libNDKBeginin库(Android给这加了前缀lib，但是要注意在java代码中申明时不用带这个前缀)</span></div><div class=\"line\">LOCAL_MODULE    := NDKBegining</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 列出需要被编译的源码文件</span></div><div class=\"line\">LOCAL_SRC_FILES := ndkBegining.c \\</div><div class=\"line\">                ndkBegining2.c</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 将要输出的模块类型</span></div><div class=\"line\">include$(BUILD_SHARED_LIBRARY)</div></pre></td></tr></table></figure>\n<h5 id=\"自定义变量\"><a href=\"#自定义变量\" class=\"headerlink\" title=\"自定义变量\"></a>自定义变量</h5><p>可以在<code>Android.mk</code>中定义自定义变量，但是必须使用规范前缀: <code>LOCAL_</code>、<code>PRIVATE_</code>、<code>NDK_</code>、<code>APP_</code>、<code>MY_</code>(Google推荐)。</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 定义了自定义变量$(MY_SOURCE)</span></div><div class=\"line\">MY_SOURCE := MYNDKfile.c</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 将$(MY_SOURCE)变量连接起来到$(LOCAL_SRC_FILES)</span></div><div class=\"line\">LOCAL_SRC_FILES += <span class=\"variable\">$(MY_SOURCE)</span></div></pre></td></tr></table></figure>\n<h4 id=\"2-Application-mk\"><a href=\"#2-Application-mk\" class=\"headerlink\" title=\"2. Application.mk\"></a>2. <code>Application.mk</code></h4><blockquote>\n<p> 用于定义多种变量使得编译更加灵活的MAKEFILE文件<br>官方文档: <a href=\"https://developer.android.com/intl/zh-cn/ndk/guides/application_mk.html\" target=\"_blank\" rel=\"external\">Application.mk</a></p>\n</blockquote>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"># (可选变量)</span></div><div class=\"line\"><span class=\"meta\"># 指定是debug或是release</span></div><div class=\"line\"><span class=\"meta\"># debug: 用于调试，将生成未被优化的二进制机器码</span></div><div class=\"line\"><span class=\"meta\"># release: 将生成优化后的二进制机器码，默认是release，但是默认值会受manifest&lt;application&gt;中的android:debuggable影响</span></div><div class=\"line\">APP_OPTIM := release</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 定义另外的Android.mk的路径</span></div><div class=\"line\"><span class=\"meta\"># APP_BUILD_SCRI :=</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># (最重要的变量之一)，用于罗列目标编译的处理器架构。默认是armeabi</span></div><div class=\"line\"><span class=\"meta\"># NDK 7或以上版本，直接指定APP_ABI := all就可以覆盖所有的架构，不用一一枚举</span></div><div class=\"line\">APP_ABI := armeabi armeabi-v7a x86 mips</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 目标平台名称</span></div><div class=\"line\">APP_PLATFORM := android<span class=\"number\">-9</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 申明需要使用的C++标准库(Android默认只提供了精简的`libstdc++`)</span></div><div class=\"line\">APP_STL := stlport_shared</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># GCC编译器版本</span></div><div class=\"line\"><span class=\"meta\"># NDK_TOOLCHAIN_VERSION := 4.9</span></div></pre></td></tr></table></figure>\n<h5 id=\"APP-ABI\"><a href=\"#APP-ABI\" class=\"headerlink\" title=\"APP_ABI\"></a>APP_ABI</h5><table>\n<thead>\n<tr>\n<th>架构</th>\n<th>参数名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FPU指令集基于ARMv7</td>\n<td>armeabi-v7a</td>\n</tr>\n<tr>\n<td>ARMV8 AArch64</td>\n<td>arm64-v8a</td>\n</tr>\n<tr>\n<td>IA-32</td>\n<td>x86</td>\n</tr>\n<tr>\n<td>Intel64</td>\n<td>x86_64</td>\n</tr>\n<tr>\n<td>MIPS32</td>\n<td>mips</td>\n</tr>\n<tr>\n<td>MIPS64(r6)</td>\n<td>mips64</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"APP-STL\"><a href=\"#APP-STL\" class=\"headerlink\" title=\"APP_STL\"></a>APP_STL</h5><blockquote>\n<p>更多可以参考这里: <a href=\"https://developer.android.com/intl/zh-cn/ndk/guides/cpp-support.html#runtimes\" target=\"_blank\" rel=\"external\">C++ Library Support</a></p>\n</blockquote>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># static STLport library</span></div><div class=\"line\">APP_STL := stlport_static</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># shared STLport library</span></div><div class=\"line\">APP_STL := stlport_shared</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#default C++ runtime library</span></div><div class=\"line\">APP_STL := system</div></pre></td></tr></table></figure>\n<h4 id=\"3-NDK-BUILDS\"><a href=\"#3-NDK-BUILDS\" class=\"headerlink\" title=\"3. NDK-BUILDS\"></a>3. <code>NDK-BUILDS</code></h4><blockquote>\n<p>基于GNU MAKE的封装<br>官方文档: <a href=\"http://developer.android.com/intl/zh-cn/ndk/guides/ndk-build.html\" target=\"_blank\" rel=\"external\">ndk-build</a></p>\n</blockquote>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"># 清除之前生成的二进制文件</span></div><div class=\"line\">clean</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 强制进行debug构建(如果是要release构建: NDK_DEBUG=0)，如果没有指定，将会受到Manifest.xm中的android:debuggable影响(Google不建议使用android:debuggable参数，如果使用的是NDK版本大于8)</span></div><div class=\"line\">NDK_DEBUG=<span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 用于调试的时候，显示NDK内部的log信息</span></div><div class=\"line\">NDK_LOG=<span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 强制指定使用32位(如果系统支持，默认将会使用64位)</span></div><div class=\"line\">NDK_HOST_32BIT=<span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 编译的时候使用一个特殊的Application.mk的路径</span></div><div class=\"line\">NDK_APPLICATION_MK=&lt;file&gt;</div></pre></td></tr></table></figure>\n<h5 id=\"NDK-HOST-32BIT\"><a href=\"#NDK-HOST-32BIT\" class=\"headerlink\" title=\"NDK_HOST_32BIT\"></a>NDK_HOST_32BIT</h5><blockquote>\n<p><a href=\"http://developer.android.com/intl/zh-cn/ndk/guides/ndk-build.html#6432\" target=\"_blank\" rel=\"external\">64-Bit and 32-Bit Toolchains</a></p>\n</blockquote>\n<hr>\n<h4 id=\"推荐书籍\"><a href=\"#推荐书籍\" class=\"headerlink\" title=\"推荐书籍:\"></a>推荐书籍:</h4><p>Cinar O. – Pro Android C++ with the NDK – 2012.</p>\n<h2 id=\"IV-JNI实践\"><a href=\"#IV-JNI实践\" class=\"headerlink\" title=\"IV. JNI实践\"></a>IV. JNI实践</h2><blockquote>\n<ul>\n<li><a href=\"https://developer.android.com/ndk/samples/sample_hellojni.html#ap\" target=\"_blank\" rel=\"external\">Sample: hello-jni</a></li>\n<li><a href=\"https://codelabs.developers.google.com/codelabs/android-studio-jni/index.html#0\" target=\"_blank\" rel=\"external\">Create Hello-JNI with Android Studio</a></li>\n</ul>\n</blockquote>\n<h3 id=\"1-简单的JNI\"><a href=\"#1-简单的JNI\" class=\"headerlink\" title=\"1. 简单的JNI\"></a>1. 简单的JNI</h3><blockquote>\n<ul>\n<li><a href=\"https://developer.android.com/ndk/samples/sample_hellojni.html#ap\" target=\"_blank\" rel=\"external\">Sample: hello-jni</a></li>\n<li><a href=\"https://codelabs.developers.google.com/codelabs/android-studio-jni/index.html#0\" target=\"_blank\" rel=\"external\">Create Hello-JNI with Android Studio</a></li>\n</ul>\n</blockquote>\n<h4 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h4><p>直接参照: <a href=\"https://github.com/Jacksgong/android-ndk#i-sample-try-hello-jni\" target=\"_blank\" rel=\"external\">https://github.com/Jacksgong/android-ndk#i-sample-try-hello-jni</a></p>\n<h3 id=\"2-引用已有库拓展\"><a href=\"#2-引用已有库拓展\" class=\"headerlink\" title=\"2. 引用已有库拓展\"></a>2. 引用已有库拓展</h3><blockquote>\n<ul>\n<li><a href=\"https://developer.android.com/ndk/guides/prebuilts.html\" target=\"_blank\" rel=\"external\">Using Prebuilt Libraries</a></li>\n<li><a href=\"http://labs.hyperandroid.com/android-ndk-with-multiple-pre-built-libraries\" target=\"_blank\" rel=\"external\">Android NDK with multiple pre-built libraries</a></li>\n</ul>\n</blockquote>\n<p>这里提到的引用已有库，是指引用已有的Shared libraries(<code>.so</code>)，或是引用已有的Static libraries(<code>.a</code>)。</p>\n<h4 id=\"相关知识\"><a href=\"#相关知识\" class=\"headerlink\" title=\"相关知识\"></a>相关知识</h4><h5 id=\"Shared-libraries\"><a href=\"#Shared-libraries\" class=\"headerlink\" title=\"Shared libraries\"></a>Shared libraries</h5><blockquote>\n<p>are <code>.so</code>(or in Windows <code>.dll</code>, or in OS X <code>.dylib</code>).</p>\n</blockquote>\n<p><strong>存储运行时引用它</strong>。在Android中，我们只能通过<code>System.loadLibrary(&quot;..&quot;)</code>加载它，因此别妄想将多个<code>.so</code>合成为一个<code>.so</code>了。</p>\n<h5 id=\"Static-libraries\"><a href=\"#Static-libraries\" class=\"headerlink\" title=\"Static libraries\"></a>Static libraries</h5><blockquote>\n<p>are <code>.a</code>(or in Windows .lib).</p>\n</blockquote>\n<p><strong>可以直接在编译期link它</strong>。在Android中，我们可以直接在<code>Android.mk</code>中配置，在编译期直接拷贝其代码，与我们的代码合成一个<code>.so</code>。</p>\n<h4 id=\"案例-1\"><a href=\"#案例-1\" class=\"headerlink\" title=\"案例\"></a>案例</h4><p>直接参照: <a href=\"https://github.com/Jacksgong/android-ndk#ii-reference-prebuilt-libraries-hello-libs\" target=\"_blank\" rel=\"external\">https://github.com/Jacksgong/android-ndk#ii-reference-prebuilt-libraries-hello-libs</a></p>\n<hr>\n<ul>\n<li>文章创建时间: 2015-11-08，<a href=\"https://github.com/Jacksgong/Blog/commits/master/source/_posts/ndk.md\" target=\"_blank\" rel=\"external\">本文迭代日志</a>。</li>\n</ul>\n<hr>\n<ul>\n<li><a href=\"http://developer.android.com/intl/zh-cn/ndk/guides/build.html\" target=\"_blank\" rel=\"external\">Building Your Project</a></li>\n<li><a href=\"http://elekslabs.com/2013/12/introduction-into-android-ndk.html\" target=\"_blank\" rel=\"external\">Introduction to Android NDK</a></li>\n<li><a href=\"https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/invocation.html\" target=\"_blank\" rel=\"external\">Chapter 5: The Invocation API</a></li>\n<li><a href=\"http://www.importnew.com/8038.html\" target=\"_blank\" rel=\"external\">Android NDK介绍（上）</a></li>\n<li><a href=\"http://www.importnew.com/8052.html\" target=\"_blank\" rel=\"external\">Android NDK介绍（下）</a></li>\n<li><a href=\"http://www.oschina.net/question/565065_93983\" target=\"_blank\" rel=\"external\">NDK Application.mk使用手册</a></li>\n<li><a href=\"http://banachowski.com/deprogramming/2012/02/working-around-jni-utf-8-strings/\" target=\"_blank\" rel=\"external\">Working Around JNI UTF-8 Strings</a></li>\n<li><a href=\"https://newcircle.com/bookshelf/java_fundamentals_tutorial/_java_native_interface_jni\" target=\"_blank\" rel=\"external\">Java Fundamentals Tutorial: Java Native Interface (JNI)</a></li>\n<li><a href=\"http://docs.oracle.com/javase/6/docs/technotes/guides/jni/spec/functions.html\" target=\"_blank\" rel=\"external\">JNI Functions</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<h2 id=\"I-初识\"><a href=\"#I-初识\" class=\"headerlink\" title=\"I. 初识\"></a>I. 初识</h2><h3 id=\"1-NDK\"><a href=\"#1-NDK\" class=\"headerlink\" title=\"1. NDK\"></a>1. NDK</h3><blockquote>\n<p>Native Development Kit</p>\n</blockquote>\n<p>是一套让你的Android应用一部分代码可以使用像C/C++语言的工具包</p>","more":"<h4 id=\"一般什么时候可以使用NDK\"><a href=\"#一般什么时候可以使用NDK\" class=\"headerlink\" title=\"一般什么时候可以使用NDK\"></a>一般什么时候可以使用NDK</h4><blockquote>\n<p>谷歌建议真正要使用NDK的情况是在很少数情况</p>\n</blockquote>\n<ul>\n<li>需要提高执行性能（e.g. 大数据排序）</li>\n<li>需要使用c/c++实现的第三方库（如 Ffmpeg，OpenCV）</li>\n<li>需要调用更加底层的代码(如，你想调用Dalvik以外的代码)</li>\n</ul>\n<h3 id=\"2-JNI\"><a href=\"#2-JNI\" class=\"headerlink\" title=\"2. JNI\"></a>2. JNI</h3><blockquote>\n<p>Java Native Interface</p>\n</blockquote>\n<p>是一套在Java虚拟机控制下代码执行的标准机制。使得Java可以调用c/c++的方法，或者c/c++中可以调用Java。</p>\n<h4 id=\"JNI标准机制的实现\"><a href=\"#JNI标准机制的实现\" class=\"headerlink\" title=\"JNI标准机制的实现\"></a>JNI标准机制的实现</h4><p>由汇编或c/c++的代码，组装(assembled)成动态库(允许非静态绑定），由此实现Java与c/c++双向调用。</p>\n<h4 id=\"JNI的优势\"><a href=\"#JNI的优势\" class=\"headerlink\" title=\"JNI的优势\"></a>JNI的优势</h4><p>相比其他类似的(Netscape Java运行接口、Microsoft的原始本地接口、COM/Java接口)相比，它的优势在于兼容性:</p>\n<ul>\n<li>对二进制兼容(c/c++的代码编译后是二进制，由于二进制是程序兼容性类型(不用改变执行文件，就可以直接在不同环境下执行)，所以c/c++编译后的代码可以在任何平台下执行)</li>\n<li>对所有用Java虚拟机的具体平台兼容</li>\n</ul>\n<h2 id=\"II-基本知识\"><a href=\"#II-基本知识\" class=\"headerlink\" title=\"II. 基本知识\"></a>II. 基本知识</h2><blockquote>\n<p>为了更清晰，本地(虚拟机所在环境原生语言(通常是c/c++))这里都用native单词表示，而不直译</p>\n</blockquote>\n<h3 id=\"参数与引用\"><a href=\"#参数与引用\" class=\"headerlink\" title=\"参数与引用\"></a>参数与引用</h3><h4 id=\"1-方法参数说明\"><a href=\"#1-方法参数说明\" class=\"headerlink\" title=\"1. 方法参数说明\"></a>1. 方法参数说明</h4><blockquote>\n<p>虚拟机需要追踪所有传递到native层的参数，使得GC不会在native层还在用这些参数引用的时候被清除了</p>\n</blockquote>\n<h5 id=\"需要注意\"><a href=\"#需要注意\" class=\"headerlink\" title=\"需要注意\"></a>需要注意</h5><ol>\n<li>原始类型直接通过相互拷贝传递</li>\n<li>对象 通过引用传递</li>\n</ol>\n<h5 id=\"JNI原始类型\"><a href=\"#JNI原始类型\" class=\"headerlink\" title=\"JNI原始类型\"></a>JNI原始类型</h5><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Java类型</th>\n<th style=\"text-align:center\">Native类型</th>\n<th style=\"text-align:center\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:center\">jboolean</td>\n<td style=\"text-align:center\">unsigned 8 bits</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">byte</td>\n<td style=\"text-align:center\">jbyte</td>\n<td style=\"text-align:center\">signed 8 bits</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">char</td>\n<td style=\"text-align:center\">jchar</td>\n<td style=\"text-align:center\">unsighned 16 bits</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">short</td>\n<td style=\"text-align:center\">jshort</td>\n<td style=\"text-align:center\">signed 16 bits</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:center\">jint</td>\n<td style=\"text-align:center\">signed 32 bits</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">long</td>\n<td style=\"text-align:center\">jlong</td>\n<td style=\"text-align:center\">signed 64 bits</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">float</td>\n<td style=\"text-align:center\">jfloat</td>\n<td style=\"text-align:center\">32 bits</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">double</td>\n<td style=\"text-align:center\">jdouble</td>\n<td style=\"text-align:center\">64 bits</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">void(指针/对象引用)</td>\n<td style=\"text-align:center\">void</td>\n<td style=\"text-align:center\">N/A</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"JNI对象引用关系\"><a href=\"#JNI对象引用关系\" class=\"headerlink\" title=\"JNI对象引用关系\"></a>JNI对象引用关系</h5><p><img src=\"/img/ndk-1.png\" alt=\"\"></p>\n<h5 id=\"JNI接口指针\"><a href=\"#JNI接口指针\" class=\"headerlink\" title=\"JNI接口指针\"></a>JNI接口指针</h5><p><img src=\"/img/ndk-2.png\" alt=\"\"></p>\n<blockquote>\n<p>ps: 上图的JNI函数表就好像C++的虚方法表一样。虚拟机可以运行多张JNI函数表(如一张用于调试，另外一张用于调用)。</p>\n</blockquote>\n<h5 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h5><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * @param *env JNI接口指针</div><div class=\"line\"> * @param obj 在native方法中定义的对象引用</div><div class=\"line\"> * @param i 原始类型 整数型</div><div class=\"line\"> * @param s 对象引用 string</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">jdouble </span><span class=\"keyword\">Java_pkg_Cls_f__ILjava_lang_String_2 </span>(<span class=\"keyword\">JNIEnv </span>*env, <span class=\"keyword\">jobject </span>obj, <span class=\"keyword\">jint </span>i, <span class=\"keyword\">jstring </span>s)</div><div class=\"line\">&#123;</div><div class=\"line\">     const char *str = (*env)-&gt;GetStringUTFChars(env, s, <span class=\"number\">0</span>)<span class=\"comment\">;</span></div><div class=\"line\">     (*env)-&gt;ReleaseStringUTFChars(env, s, str)<span class=\"comment\">;</span></div><div class=\"line\">     return <span class=\"number\">10</span><span class=\"comment\">;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"2-其他引用类型说明\"><a href=\"#2-其他引用类型说明\" class=\"headerlink\" title=\"2. 其他引用类型说明\"></a>2. 其他引用类型说明</h4><blockquote>\n<p>JNI定义了三种引用类型 局部引用、全局引用、全局弱引用</p>\n</blockquote>\n<h5 id=\"局部引用\"><a href=\"#局部引用\" class=\"headerlink\" title=\"局部引用:\"></a>局部引用:</h5><blockquote>\n<p>所有通过JNI方法返回的Java对象都是局部引用<br>局部引用只对创建该引用所在线程可见。</p>\n</blockquote>\n<p>方法结束时释放。但是也可以调用JNI方法<code>DeleteLocalRef</code>对其马上进行释放。</p>\n<h5 id=\"全局引用\"><a href=\"#全局引用\" class=\"headerlink\" title=\"全局引用\"></a>全局引用</h5><p>只有在主动调用释放方法时才释放，对其释放的JNI方法: <code>DeleteGlobalRef</code>; 创建全局引用的方法: <code>NewGlobalRef</code></p>\n<h5 id=\"例子-1\"><a href=\"#例子-1\" class=\"headerlink\" title=\"例子\"></a>例子</h5><figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">jclass localClazz;</div><div class=\"line\">jclass globalClazz;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">localClazz</span> = <span class=\"params\">(*env)</span>-&gt;</span>FindClass(env, <span class=\"string\">\"java/lang/String\"</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"title\">globalClazz</span> = <span class=\"params\">(*env)</span>-&gt;</span>NewGlobalRef(env, localClazz);</div><div class=\"line\"></div><div class=\"line\"><span class=\"regexp\">// 立即释放localClazz局部引用</div><div class=\"line\">(*env)-&gt;DeleteLocalRef(env, localClazz);</div><div class=\"line\"></div><div class=\"line\">//</span> 立即释放globalClazz全局引用</div><div class=\"line\"><span class=\"function\"><span class=\"params\">(*env)</span>-&gt;</span>DeleteGlobalRef(env, globalClazz);</div></pre></td></tr></table></figure>\n<h3 id=\"错误机制\"><a href=\"#错误机制\" class=\"headerlink\" title=\"错误机制\"></a>错误机制</h3><blockquote>\n<p>JNI不会像Java一样检测像NullPointerException、IllegalArgumentException、ArrayIndexOutOfBoundsException、ArrayStoreException等这样的错误。</p>\n</blockquote>\n<h5 id=\"不报错原因\"><a href=\"#不报错原因\" class=\"headerlink\" title=\"不报错原因\"></a>不报错原因</h5><ol>\n<li>错误检测会导致性能下降</li>\n<li>在大多数C库函数中，很难对错误进行处理</li>\n</ol>\n<h4 id=\"处理方式\"><a href=\"#处理方式\" class=\"headerlink\" title=\"处理方式\"></a>处理方式</h4><blockquote>\n<p>JNI允许使用Java的异常处理</p>\n</blockquote>\n<p>处理JNI函数中对应的出错的代码(因为即使出现异常, JNI层只会返回错误码，自己并不会报异常), 然后在JNI函数中错误对象抛异常到Java层(根据返回的错误代码)。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 如果是一些数组操作的异常，可以使用ArrayIndexOutOfBoundsException、ArrayStoreException</span></div><div class=\"line\"><span class=\"function\">jthrowable <span class=\"title\">ExceptionOccurred</span><span class=\"params\">(JNIEnv *env)</span></span>;</div></pre></td></tr></table></figure>\n<h3 id=\"JNI的编码\"><a href=\"#JNI的编码\" class=\"headerlink\" title=\"JNI的编码\"></a>JNI的编码</h3><blockquote>\n<p>标准UTF-8主要用在C，而Java使用的是UTF-16<br>JNI 使用的是 修改过的UTF-8: <a href=\"https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/types.html#modified_utf_8_strings\">Modified UTF-8 Strings</a></p>\n</blockquote>\n<h5 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果:\"></a>结果:</h5><p>被编码过的’修改过的UTF-8’字符串只包含非空ASCII字符串，其中每个字符只需一个字符就可表示。但是所有的Unicode字符串都可以被表示</p>\n<h5 id=\"与标准UTF-8的差别\"><a href=\"#与标准UTF-8的差别\" class=\"headerlink\" title=\"与标准UTF-8的差别\"></a>与标准UTF-8的差别</h5><ol>\n<li>null字符(0)使用两个字节的格式而非一个字节进行编码，因为修改过的UTF-8不再有嵌入的null(<code>\\0</code>)</li>\n<li>只使用标准UTF-8的一字节、两字节、三字节的格式，而四字节的将使用两个三字节来代替表示。</li>\n</ol>\n<h3 id=\"JNI函数\"><a href=\"#JNI函数\" class=\"headerlink\" title=\"JNI函数\"></a>JNI函数</h3><blockquote>\n<p>JNI接口不仅仅包含数据集(dataset)，也包含了它的大量方法。<br>官方文档: <a href=\"http://docs.oracle.com/javase/6/docs/technotes/guides/jni/spec/functions.html\">JNI Functions</a></p>\n</blockquote>\n<h5 id=\"例子-2\"><a href=\"#例子-2\" class=\"headerlink\" title=\"例子\"></a>例子</h5><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">#<span class=\"keyword\">include</span> &lt;jni.h&gt;</div><div class=\"line\">...</div><div class=\"line\"><span class=\"comment\">//用于创建与销毁Java虚拟机的接口指针</span></div><div class=\"line\">JavaVM *jvm;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 包含大多数的JNI函数的JNI接口指针</span></div><div class=\"line\">JNIEnv *env;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 存储Java虚拟机的参数</span></div><div class=\"line\">JavaVMInitArgs vm_args;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 存储Java虚拟机的配置选项</span></div><div class=\"line\">JavaVMOption* <span class=\"keyword\">options</span> = <span class=\"keyword\">new</span> JavaVMOption[<span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">options</span>[<span class=\"number\">0</span>].optionString = <span class=\"string\">\"-Djava.class.path=/usr/lib/java\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 初始化Java虚拟机参数</span></div><div class=\"line\">vm_args.version = JNI_VERSION_1_6;</div><div class=\"line\">vm_args.nOptions = <span class=\"number\">1</span>;</div><div class=\"line\">vm_args.<span class=\"keyword\">options</span> = <span class=\"keyword\">options</span>;</div><div class=\"line\">vm_args.ignoreUnrecognized = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 载入Java虚拟机，返回JNI接口指针给*env</span></div><div class=\"line\">JNI_CreateJavaVM(&amp;jvm, &amp;env, &amp;vm_args);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 释放 Java虚拟机配置选项</span></div><div class=\"line\"><span class=\"keyword\">delete</span> <span class=\"keyword\">options</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 调用Java虚拟机中的Main#text方法</span></div><div class=\"line\">jclass cls = env-&gt;FindClass(<span class=\"string\">\"Main\"</span>);</div><div class=\"line\">jmethodID mid = env-&gt;GetStaticMethodID(cls, <span class=\"string\">\"test\"</span>, <span class=\"string\">\"(I)V\"</span>);</div><div class=\"line\">env-&gt;CallStaticVoidMethod(cls, mid, <span class=\"number\">100</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 释放Java虚拟机</span></div><div class=\"line\">jvm-&gt;DestroyJavaVM();</div></pre></td></tr></table></figure>\n<h3 id=\"JNI线程\"><a href=\"#JNI线程\" class=\"headerlink\" title=\"JNI线程\"></a>JNI线程</h3><blockquote>\n<p>运行在Linux(Android)上的所有线程统一由内核管理的。</p>\n</blockquote>\n<h4 id=\"JNI中的线程附加到虚拟机中\"><a href=\"#JNI中的线程附加到虚拟机中\" class=\"headerlink\" title=\"JNI中的线程附加到虚拟机中\"></a>JNI中的线程附加到虚拟机中</h4><p>我们可以通过<code>AttachCurrentThread</code>和<code>AttachCurrentThreadAsDaemon</code>函数将线程附加到虚拟机中，以保证可以正常访问JNI接口指针(JNIEnv)(注意上文JNI接口指针那张图提到的JNI接口指针只在当前线程可见)。</p>\n<h4 id=\"需要注意-1\"><a href=\"#需要注意-1\" class=\"headerlink\" title=\"需要注意\"></a>需要注意</h4><p>Android将不会主动释放在JNI中创建的线程(GC不会对其进行主动释放)，所有一定要记得不用时，主动调用<code>DetachCurrentThread</code>方法，进行释放。</p>\n<h3 id=\"Java中调用native方法\"><a href=\"#Java中调用native方法\" class=\"headerlink\" title=\"Java中调用native方法\"></a>Java中调用native方法</h3><h4 id=\"需要注意-2\"><a href=\"#需要注意-2\" class=\"headerlink\" title=\"需要注意\"></a>需要注意</h4><ul>\n<li>在方法前需要保留关键字<code>native</code></li>\n<li>Google建议方法名带<code>native</code>前缀，如<code>nativeGetStringFromFile</code></li>\n</ul>\n<h5 id=\"例子-3\"><a href=\"#例子-3\" class=\"headerlink\" title=\"例子\"></a>例子</h5><figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">native</span> <span class=\"keyword\">String</span> nativeGetStringFromFile(<span class=\"keyword\">String</span> path) <span class=\"keyword\">throws</span> IOException;</div><div class=\"line\"><span class=\"keyword\">native</span> <span class=\"keyword\">void</span> nativeWriteByteArrayToFile(<span class=\"keyword\">String</span> path, <span class=\"built_in\">byte</span>[] b) <span class=\"keyword\">throws</span> IOException;</div></pre></td></tr></table></figure>\n<h2 id=\"III-项目结构\"><a href=\"#III-项目结构\" class=\"headerlink\" title=\"III. 项目结构\"></a>III. 项目结构</h2><p>项目结构一般如下图:</p>\n<p><img src=\"/img/ndk-3.jpeg\" alt=\"\"></p>\n<h5 id=\"需要注意-3\"><a href=\"#需要注意-3\" class=\"headerlink\" title=\"需要注意\"></a>需要注意</h5><ul>\n<li>所有的native代码都存储在jni文件夹下</li>\n<li>每个子目录对应一种处理器架构</li>\n<li>如果只带有armeabi，将对armeabi-v7a默认支持（通常只带armeabi的话，armeabi-v7a架构的处理器也支持，只是多一步翻译的过程，也会因此速度会变差）</li>\n<li>假若你有多种库(so文件)，要么支持处理器架构的，同时都支持，要么同时都不支持。例子: 如果a.so一个带了mips的，b.so的没有带，则在mips处理器架构的手机上，执行到需要b.so的地方，发现在mips中找不到b.so，就会crash。</li>\n</ul>\n<h5 id=\"针对简单的Android项目-创建native项目\"><a href=\"#针对简单的Android项目-创建native项目\" class=\"headerlink\" title=\"针对简单的Android项目, 创建native项目:\"></a>针对简单的Android项目, 创建native项目:</h5><ol>\n<li>创建jni文件夹，用于存储native源代码</li>\n<li>创建<code>Andorid.mk</code>文件，用于构建项目</li>\n<li>创建<code>Application.mk</code>文件（非必须），用于存储编译配置相关，能够灵活的配置编译。</li>\n</ol>\n<h4 id=\"1-Android-mk\"><a href=\"#1-Android-mk\" class=\"headerlink\" title=\"1. Android.mk\"></a>1. <code>Android.mk</code></h4><blockquote>\n<p>构建native项目的MAKEFILE文件<br>官方介绍: <a href=\"https://developer.android.com/intl/zh-cn/ndk/guides/android_mk.html\">Android.mk</a></p>\n</blockquote>\n<p>用于打包代码到<br>静态库(statistic libraries)拷贝到项目的libs目录下，生成 共享库与独立可执行文件</p>\n<h5 id=\"例子-4\"><a href=\"#例子-4\" class=\"headerlink\" title=\"例子\"></a>例子</h5><figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"># 通过函数调用my-dir返回当前目录文件所在路径</span></div><div class=\"line\">LOCAL_PATH :=$(call my-dir)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 清理所有除LOCAL_PATH以外的变量，由于所有文件的编译都是在同一个全局的GNU MAKE中执行的，所以这些变量都是全局的</span></div><div class=\"line\">include$(CLEAR_VARS)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 所输出模块的名称，这里定义的是NDKBegining，</span></div><div class=\"line\"><span class=\"meta\"># 编译完成后会在libs目录下创建libNDKBeginin库(Android给这加了前缀lib，但是要注意在java代码中申明时不用带这个前缀)</span></div><div class=\"line\">LOCAL_MODULE    := NDKBegining</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 列出需要被编译的源码文件</span></div><div class=\"line\">LOCAL_SRC_FILES := ndkBegining.c \\</div><div class=\"line\">                ndkBegining2.c</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 将要输出的模块类型</span></div><div class=\"line\">include$(BUILD_SHARED_LIBRARY)</div></pre></td></tr></table></figure>\n<h5 id=\"自定义变量\"><a href=\"#自定义变量\" class=\"headerlink\" title=\"自定义变量\"></a>自定义变量</h5><p>可以在<code>Android.mk</code>中定义自定义变量，但是必须使用规范前缀: <code>LOCAL_</code>、<code>PRIVATE_</code>、<code>NDK_</code>、<code>APP_</code>、<code>MY_</code>(Google推荐)。</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 定义了自定义变量$(MY_SOURCE)</span></div><div class=\"line\">MY_SOURCE := MYNDKfile.c</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 将$(MY_SOURCE)变量连接起来到$(LOCAL_SRC_FILES)</span></div><div class=\"line\">LOCAL_SRC_FILES += <span class=\"variable\">$(MY_SOURCE)</span></div></pre></td></tr></table></figure>\n<h4 id=\"2-Application-mk\"><a href=\"#2-Application-mk\" class=\"headerlink\" title=\"2. Application.mk\"></a>2. <code>Application.mk</code></h4><blockquote>\n<p> 用于定义多种变量使得编译更加灵活的MAKEFILE文件<br>官方文档: <a href=\"https://developer.android.com/intl/zh-cn/ndk/guides/application_mk.html\">Application.mk</a></p>\n</blockquote>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"># (可选变量)</span></div><div class=\"line\"><span class=\"meta\"># 指定是debug或是release</span></div><div class=\"line\"><span class=\"meta\"># debug: 用于调试，将生成未被优化的二进制机器码</span></div><div class=\"line\"><span class=\"meta\"># release: 将生成优化后的二进制机器码，默认是release，但是默认值会受manifest&lt;application&gt;中的android:debuggable影响</span></div><div class=\"line\">APP_OPTIM := release</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 定义另外的Android.mk的路径</span></div><div class=\"line\"><span class=\"meta\"># APP_BUILD_SCRI :=</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># (最重要的变量之一)，用于罗列目标编译的处理器架构。默认是armeabi</span></div><div class=\"line\"><span class=\"meta\"># NDK 7或以上版本，直接指定APP_ABI := all就可以覆盖所有的架构，不用一一枚举</span></div><div class=\"line\">APP_ABI := armeabi armeabi-v7a x86 mips</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 目标平台名称</span></div><div class=\"line\">APP_PLATFORM := android<span class=\"number\">-9</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 申明需要使用的C++标准库(Android默认只提供了精简的`libstdc++`)</span></div><div class=\"line\">APP_STL := stlport_shared</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># GCC编译器版本</span></div><div class=\"line\"><span class=\"meta\"># NDK_TOOLCHAIN_VERSION := 4.9</span></div></pre></td></tr></table></figure>\n<h5 id=\"APP-ABI\"><a href=\"#APP-ABI\" class=\"headerlink\" title=\"APP_ABI\"></a>APP_ABI</h5><table>\n<thead>\n<tr>\n<th>架构</th>\n<th>参数名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FPU指令集基于ARMv7</td>\n<td>armeabi-v7a</td>\n</tr>\n<tr>\n<td>ARMV8 AArch64</td>\n<td>arm64-v8a</td>\n</tr>\n<tr>\n<td>IA-32</td>\n<td>x86</td>\n</tr>\n<tr>\n<td>Intel64</td>\n<td>x86_64</td>\n</tr>\n<tr>\n<td>MIPS32</td>\n<td>mips</td>\n</tr>\n<tr>\n<td>MIPS64(r6)</td>\n<td>mips64</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"APP-STL\"><a href=\"#APP-STL\" class=\"headerlink\" title=\"APP_STL\"></a>APP_STL</h5><blockquote>\n<p>更多可以参考这里: <a href=\"https://developer.android.com/intl/zh-cn/ndk/guides/cpp-support.html#runtimes\">C++ Library Support</a></p>\n</blockquote>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># static STLport library</span></div><div class=\"line\">APP_STL := stlport_static</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># shared STLport library</span></div><div class=\"line\">APP_STL := stlport_shared</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#default C++ runtime library</span></div><div class=\"line\">APP_STL := system</div></pre></td></tr></table></figure>\n<h4 id=\"3-NDK-BUILDS\"><a href=\"#3-NDK-BUILDS\" class=\"headerlink\" title=\"3. NDK-BUILDS\"></a>3. <code>NDK-BUILDS</code></h4><blockquote>\n<p>基于GNU MAKE的封装<br>官方文档: <a href=\"http://developer.android.com/intl/zh-cn/ndk/guides/ndk-build.html\">ndk-build</a></p>\n</blockquote>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"># 清除之前生成的二进制文件</span></div><div class=\"line\">clean</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 强制进行debug构建(如果是要release构建: NDK_DEBUG=0)，如果没有指定，将会受到Manifest.xm中的android:debuggable影响(Google不建议使用android:debuggable参数，如果使用的是NDK版本大于8)</span></div><div class=\"line\">NDK_DEBUG=<span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 用于调试的时候，显示NDK内部的log信息</span></div><div class=\"line\">NDK_LOG=<span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 强制指定使用32位(如果系统支持，默认将会使用64位)</span></div><div class=\"line\">NDK_HOST_32BIT=<span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 编译的时候使用一个特殊的Application.mk的路径</span></div><div class=\"line\">NDK_APPLICATION_MK=&lt;file&gt;</div></pre></td></tr></table></figure>\n<h5 id=\"NDK-HOST-32BIT\"><a href=\"#NDK-HOST-32BIT\" class=\"headerlink\" title=\"NDK_HOST_32BIT\"></a>NDK_HOST_32BIT</h5><blockquote>\n<p><a href=\"http://developer.android.com/intl/zh-cn/ndk/guides/ndk-build.html#6432\">64-Bit and 32-Bit Toolchains</a></p>\n</blockquote>\n<hr>\n<h4 id=\"推荐书籍\"><a href=\"#推荐书籍\" class=\"headerlink\" title=\"推荐书籍:\"></a>推荐书籍:</h4><p>Cinar O. – Pro Android C++ with the NDK – 2012.</p>\n<h2 id=\"IV-JNI实践\"><a href=\"#IV-JNI实践\" class=\"headerlink\" title=\"IV. JNI实践\"></a>IV. JNI实践</h2><blockquote>\n<ul>\n<li><a href=\"https://developer.android.com/ndk/samples/sample_hellojni.html#ap\">Sample: hello-jni</a></li>\n<li><a href=\"https://codelabs.developers.google.com/codelabs/android-studio-jni/index.html#0\">Create Hello-JNI with Android Studio</a></li>\n</ul>\n</blockquote>\n<h3 id=\"1-简单的JNI\"><a href=\"#1-简单的JNI\" class=\"headerlink\" title=\"1. 简单的JNI\"></a>1. 简单的JNI</h3><blockquote>\n<ul>\n<li><a href=\"https://developer.android.com/ndk/samples/sample_hellojni.html#ap\">Sample: hello-jni</a></li>\n<li><a href=\"https://codelabs.developers.google.com/codelabs/android-studio-jni/index.html#0\">Create Hello-JNI with Android Studio</a></li>\n</ul>\n</blockquote>\n<h4 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h4><p>直接参照: <a href=\"https://github.com/Jacksgong/android-ndk#i-sample-try-hello-jni\">https://github.com/Jacksgong/android-ndk#i-sample-try-hello-jni</a></p>\n<h3 id=\"2-引用已有库拓展\"><a href=\"#2-引用已有库拓展\" class=\"headerlink\" title=\"2. 引用已有库拓展\"></a>2. 引用已有库拓展</h3><blockquote>\n<ul>\n<li><a href=\"https://developer.android.com/ndk/guides/prebuilts.html\">Using Prebuilt Libraries</a></li>\n<li><a href=\"http://labs.hyperandroid.com/android-ndk-with-multiple-pre-built-libraries\">Android NDK with multiple pre-built libraries</a></li>\n</ul>\n</blockquote>\n<p>这里提到的引用已有库，是指引用已有的Shared libraries(<code>.so</code>)，或是引用已有的Static libraries(<code>.a</code>)。</p>\n<h4 id=\"相关知识\"><a href=\"#相关知识\" class=\"headerlink\" title=\"相关知识\"></a>相关知识</h4><h5 id=\"Shared-libraries\"><a href=\"#Shared-libraries\" class=\"headerlink\" title=\"Shared libraries\"></a>Shared libraries</h5><blockquote>\n<p>are <code>.so</code>(or in Windows <code>.dll</code>, or in OS X <code>.dylib</code>).</p>\n</blockquote>\n<p><strong>存储运行时引用它</strong>。在Android中，我们只能通过<code>System.loadLibrary(&quot;..&quot;)</code>加载它，因此别妄想将多个<code>.so</code>合成为一个<code>.so</code>了。</p>\n<h5 id=\"Static-libraries\"><a href=\"#Static-libraries\" class=\"headerlink\" title=\"Static libraries\"></a>Static libraries</h5><blockquote>\n<p>are <code>.a</code>(or in Windows .lib).</p>\n</blockquote>\n<p><strong>可以直接在编译期link它</strong>。在Android中，我们可以直接在<code>Android.mk</code>中配置，在编译期直接拷贝其代码，与我们的代码合成一个<code>.so</code>。</p>\n<h4 id=\"案例-1\"><a href=\"#案例-1\" class=\"headerlink\" title=\"案例\"></a>案例</h4><p>直接参照: <a href=\"https://github.com/Jacksgong/android-ndk#ii-reference-prebuilt-libraries-hello-libs\">https://github.com/Jacksgong/android-ndk#ii-reference-prebuilt-libraries-hello-libs</a></p>\n<hr>\n<ul>\n<li>文章创建时间: 2015-11-08，<a href=\"https://github.com/Jacksgong/Blog/commits/master/source/_posts/ndk.md\">本文迭代日志</a>。</li>\n</ul>\n<hr>\n<ul>\n<li><a href=\"http://developer.android.com/intl/zh-cn/ndk/guides/build.html\">Building Your Project</a></li>\n<li><a href=\"http://elekslabs.com/2013/12/introduction-into-android-ndk.html\">Introduction to Android NDK</a></li>\n<li><a href=\"https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/invocation.html\">Chapter 5: The Invocation API</a></li>\n<li><a href=\"http://www.importnew.com/8038.html\">Android NDK介绍（上）</a></li>\n<li><a href=\"http://www.importnew.com/8052.html\">Android NDK介绍（下）</a></li>\n<li><a href=\"http://www.oschina.net/question/565065_93983\">NDK Application.mk使用手册</a></li>\n<li><a href=\"http://banachowski.com/deprogramming/2012/02/working-around-jni-utf-8-strings/\">Working Around JNI UTF-8 Strings</a></li>\n<li><a href=\"https://newcircle.com/bookshelf/java_fundamentals_tutorial/_java_native_interface_jni\">Java Fundamentals Tutorial: Java Native Interface (JNI)</a></li>\n<li><a href=\"http://docs.oracle.com/javase/6/docs/technotes/guides/jni/spec/functions.html\">JNI Functions</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"Newifi Y1 刷Openwrt 自配Shadowsocks高稳定翻墙","date":"2016-04-23T16:22:03.000Z","_content":"\n> 之前我用的是 TP-LINK WR720N v3，也[刷了OpenWrt进行翻墙](http://blog.dreamtobe.cn/2015/09/06/wr720n-v3-openwrt-shadowsocks/)，上段时间同事一直给我推荐 Lenovo的 Newifi，各项硬件都不错，于是就入手了，网上查了下，简单的刷了个基于Openwrt的Pandorabox，结果发现相同的节点，看YouTuBe连720p都卡成了翔，还不如我之前WR720N来得稳定，严重影响工作效率，于是就倒腾起来，决定还是刷官网的OpenWrt。刷完官网的OpenWrt以及配置以后，速度飕飕的，又回到了YouTuBe流畅1080p的时代，而且各方面感觉相比之前使用TP-LINK WR720N v3，会来的更快些。\n\n<!-- more -->\n\n![](/img/newifi-1.png)\n\n---\n\n## I. 刷入官网OpenWrt\n\n> Newifi Y1 OpenWrt 官方Wiki: https://wiki.openwrt.org/toh/lenovo/lenovo_y1_v1\n\n1. 下载Newifi Y1 系统镜像 ： http://downloads.openwrt.org/chaos_calmer/15.05/ramips/mt7620/openwrt-15.05-ramips-mt7620-Lenovo-y1-squashfs-sysupgrade.bin\n2. 拔掉路由去电源。\n3. 将路由器连接电脑，并且电脑端新建一个连接，设置IP `192.168.1.1` 以及掩码 `255.255.255.0`，网关 `192.168.1.1`。\n4. 长按复位键的同时连接电源，看到路由器上面有两个LED等在闪说明进入了刷机模式。\n5. 选择下载的镜像刷入。\n\n## II. 基本配置\n\n#### 1. 安装5G网络\n\n安装一个包就可以了，登录终端以后执行以下命令:\n\n```\nopkg update && opkg -y install kmod-mt76\n```\n\n#### 2. 镜像源配置\n\n> 留意是: `chaos_calmer`，并且是 `ramips` 架构。\n\n可选择源:\n\n- https://openwrt.mirrors.ustc.edu.cn/chaos_calmer/15.05/ramips/mt7620/\n- http://ba.mirror.garr.it/mirrors/openwrt/chaos_calmer/15.05/ramips/mt7620/\n- http://downloads.openwrt.org/chaos_calmer/15.05/ramips/mt7620/\n\n## III. 安装ChinaDNS、Shadowsocks与相关组件包\n\n> 由于不同于以前用的WR720N的情况，mt7620的官方源中并没有相关组件包，因此都需要自己下载配置。\n> 自行下载的可以下载下来通过`scp`传到路由器，然后再执行`opkg install 本地ipk文件路径`进行安装。\n\n首先一些基本的组件包官方源是有的直接安装:\n\n```\nopkg update\nopkg install libpolarssl\nopkg install resolveip\n```\n\n#### 1. 安装ChinaDNS以及其luci\n\n> https://github.com/aa65535/openwrt-chinadns\n\n- ChinaDNS(我当时选用`1.3.2-d3e75dd`(当时最新版本)): https://sourceforge.net/projects/openwrt-dist/files/chinadns/\n- ChinaDNS-luci(我当时选用`1.4.0-1_all`(当时最新版本): https://sourceforge.net/projects/openwrt-dist/files/luci-app/chinadns/\n\n#### 2. 安装Shadowsocks以及其luci\n\n> https://github.com/shadowsocks/openwrt-shadowsocks\n\n- 下载安装openssl: http://jaist.dl.sourceforge.net/project/openwrt-dist/depends-libs/ramips/libopenssl_1.0.1i-1_ramips_24kec.ipk\n- 到[这里](https://sourceforge.net/projects/openwrt-dist/files/shadowsocks-libev/):\n选用最新版本的目录进入(但是我选择的是`2.4.6-98cf545`)，然后进入`ramips`目录，下载并安装 `shadowsocks-libdev-spec_xxxx_ramips`(针对 OpenWrt 的优化版本)。\n- shadowsocks-luci (选用最新版本下载安装(我当时选用的是1.4.0)): https://sourceforge.net/projects/openwrt-dist/files/luci-app/shadowsocks-spec/\n\n## IV. 配置\n\n基本的配置与 [TP-LINK WR720N v3刷OpenWrt完美翻墙](http://blog.dreamtobe.cn/2015/09/06/wr720n-v3-openwrt-shadowsocks/)中的(`VI. 配置shadowsocks和chinadns`)一致，配置完以后，**再进行以下最后的配置即可**。\n\n#### 1.手动在Global Setting中选中Server\n\n> 在 Shadowsocks 配置中 需要手动在Global Setting 中选中其中一个Server，方可运行。\n\n![](/img/newifi-2.png)\n\n#### 2. 手动指定过滤的IP列表\n\n> 在 Shadowsocks 配置中 需要手动在 Access Control->Interfaces-WAN 中手动选择 Bypassed IP List。\n\n![](/img/newifi-3.png)\n\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/newifi_openwrt.md","raw":"title: Newifi Y1 刷Openwrt 自配Shadowsocks高稳定翻墙\ndate: 2016-04-24 00:22:03\npermalink: 2016/04/24/newifi_openwrt\ntags:\n- 翻墙\n- OpenWrt\n- ShadowSocks\n- Newifi\n\n---\n\n> 之前我用的是 TP-LINK WR720N v3，也[刷了OpenWrt进行翻墙](http://blog.dreamtobe.cn/2015/09/06/wr720n-v3-openwrt-shadowsocks/)，上段时间同事一直给我推荐 Lenovo的 Newifi，各项硬件都不错，于是就入手了，网上查了下，简单的刷了个基于Openwrt的Pandorabox，结果发现相同的节点，看YouTuBe连720p都卡成了翔，还不如我之前WR720N来得稳定，严重影响工作效率，于是就倒腾起来，决定还是刷官网的OpenWrt。刷完官网的OpenWrt以及配置以后，速度飕飕的，又回到了YouTuBe流畅1080p的时代，而且各方面感觉相比之前使用TP-LINK WR720N v3，会来的更快些。\n\n<!-- more -->\n\n![](/img/newifi-1.png)\n\n---\n\n## I. 刷入官网OpenWrt\n\n> Newifi Y1 OpenWrt 官方Wiki: https://wiki.openwrt.org/toh/lenovo/lenovo_y1_v1\n\n1. 下载Newifi Y1 系统镜像 ： http://downloads.openwrt.org/chaos_calmer/15.05/ramips/mt7620/openwrt-15.05-ramips-mt7620-Lenovo-y1-squashfs-sysupgrade.bin\n2. 拔掉路由去电源。\n3. 将路由器连接电脑，并且电脑端新建一个连接，设置IP `192.168.1.1` 以及掩码 `255.255.255.0`，网关 `192.168.1.1`。\n4. 长按复位键的同时连接电源，看到路由器上面有两个LED等在闪说明进入了刷机模式。\n5. 选择下载的镜像刷入。\n\n## II. 基本配置\n\n#### 1. 安装5G网络\n\n安装一个包就可以了，登录终端以后执行以下命令:\n\n```\nopkg update && opkg -y install kmod-mt76\n```\n\n#### 2. 镜像源配置\n\n> 留意是: `chaos_calmer`，并且是 `ramips` 架构。\n\n可选择源:\n\n- https://openwrt.mirrors.ustc.edu.cn/chaos_calmer/15.05/ramips/mt7620/\n- http://ba.mirror.garr.it/mirrors/openwrt/chaos_calmer/15.05/ramips/mt7620/\n- http://downloads.openwrt.org/chaos_calmer/15.05/ramips/mt7620/\n\n## III. 安装ChinaDNS、Shadowsocks与相关组件包\n\n> 由于不同于以前用的WR720N的情况，mt7620的官方源中并没有相关组件包，因此都需要自己下载配置。\n> 自行下载的可以下载下来通过`scp`传到路由器，然后再执行`opkg install 本地ipk文件路径`进行安装。\n\n首先一些基本的组件包官方源是有的直接安装:\n\n```\nopkg update\nopkg install libpolarssl\nopkg install resolveip\n```\n\n#### 1. 安装ChinaDNS以及其luci\n\n> https://github.com/aa65535/openwrt-chinadns\n\n- ChinaDNS(我当时选用`1.3.2-d3e75dd`(当时最新版本)): https://sourceforge.net/projects/openwrt-dist/files/chinadns/\n- ChinaDNS-luci(我当时选用`1.4.0-1_all`(当时最新版本): https://sourceforge.net/projects/openwrt-dist/files/luci-app/chinadns/\n\n#### 2. 安装Shadowsocks以及其luci\n\n> https://github.com/shadowsocks/openwrt-shadowsocks\n\n- 下载安装openssl: http://jaist.dl.sourceforge.net/project/openwrt-dist/depends-libs/ramips/libopenssl_1.0.1i-1_ramips_24kec.ipk\n- 到[这里](https://sourceforge.net/projects/openwrt-dist/files/shadowsocks-libev/):\n选用最新版本的目录进入(但是我选择的是`2.4.6-98cf545`)，然后进入`ramips`目录，下载并安装 `shadowsocks-libdev-spec_xxxx_ramips`(针对 OpenWrt 的优化版本)。\n- shadowsocks-luci (选用最新版本下载安装(我当时选用的是1.4.0)): https://sourceforge.net/projects/openwrt-dist/files/luci-app/shadowsocks-spec/\n\n## IV. 配置\n\n基本的配置与 [TP-LINK WR720N v3刷OpenWrt完美翻墙](http://blog.dreamtobe.cn/2015/09/06/wr720n-v3-openwrt-shadowsocks/)中的(`VI. 配置shadowsocks和chinadns`)一致，配置完以后，**再进行以下最后的配置即可**。\n\n#### 1.手动在Global Setting中选中Server\n\n> 在 Shadowsocks 配置中 需要手动在Global Setting 中选中其中一个Server，方可运行。\n\n![](/img/newifi-2.png)\n\n#### 2. 手动指定过滤的IP列表\n\n> 在 Shadowsocks 配置中 需要手动在 Access Control->Interfaces-WAN 中手动选择 Bypassed IP List。\n\n![](/img/newifi-3.png)\n\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2016/04/24/newifi_openwrt","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66j7003b95buv8br3dnm","content":"<blockquote>\n<p>之前我用的是 TP-LINK WR720N v3，也<a href=\"http://blog.dreamtobe.cn/2015/09/06/wr720n-v3-openwrt-shadowsocks/\">刷了OpenWrt进行翻墙</a>，上段时间同事一直给我推荐 Lenovo的 Newifi，各项硬件都不错，于是就入手了，网上查了下，简单的刷了个基于Openwrt的Pandorabox，结果发现相同的节点，看YouTuBe连720p都卡成了翔，还不如我之前WR720N来得稳定，严重影响工作效率，于是就倒腾起来，决定还是刷官网的OpenWrt。刷完官网的OpenWrt以及配置以后，速度飕飕的，又回到了YouTuBe流畅1080p的时代，而且各方面感觉相比之前使用TP-LINK WR720N v3，会来的更快些。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p><img src=\"/img/newifi-1.png\" alt=\"\"></p>\n<hr>\n<h2 id=\"I-刷入官网OpenWrt\"><a href=\"#I-刷入官网OpenWrt\" class=\"headerlink\" title=\"I. 刷入官网OpenWrt\"></a>I. 刷入官网OpenWrt</h2><blockquote>\n<p>Newifi Y1 OpenWrt 官方Wiki: <a href=\"https://wiki.openwrt.org/toh/lenovo/lenovo_y1_v1\" target=\"_blank\" rel=\"external\">https://wiki.openwrt.org/toh/lenovo/lenovo_y1_v1</a></p>\n</blockquote>\n<ol>\n<li>下载Newifi Y1 系统镜像 ： <a href=\"http://downloads.openwrt.org/chaos_calmer/15.05/ramips/mt7620/openwrt-15.05-ramips-mt7620-Lenovo-y1-squashfs-sysupgrade.bin\" target=\"_blank\" rel=\"external\">http://downloads.openwrt.org/chaos_calmer/15.05/ramips/mt7620/openwrt-15.05-ramips-mt7620-Lenovo-y1-squashfs-sysupgrade.bin</a></li>\n<li>拔掉路由去电源。</li>\n<li>将路由器连接电脑，并且电脑端新建一个连接，设置IP <code>192.168.1.1</code> 以及掩码 <code>255.255.255.0</code>，网关 <code>192.168.1.1</code>。</li>\n<li>长按复位键的同时连接电源，看到路由器上面有两个LED等在闪说明进入了刷机模式。</li>\n<li>选择下载的镜像刷入。</li>\n</ol>\n<h2 id=\"II-基本配置\"><a href=\"#II-基本配置\" class=\"headerlink\" title=\"II. 基本配置\"></a>II. 基本配置</h2><h4 id=\"1-安装5G网络\"><a href=\"#1-安装5G网络\" class=\"headerlink\" title=\"1. 安装5G网络\"></a>1. 安装5G网络</h4><p>安装一个包就可以了，登录终端以后执行以下命令:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">opkg <span class=\"keyword\">update</span> &amp;&amp; opkg -y <span class=\"keyword\">install</span> kmod-mt76</div></pre></td></tr></table></figure>\n<h4 id=\"2-镜像源配置\"><a href=\"#2-镜像源配置\" class=\"headerlink\" title=\"2. 镜像源配置\"></a>2. 镜像源配置</h4><blockquote>\n<p>留意是: <code>chaos_calmer</code>，并且是 <code>ramips</code> 架构。</p>\n</blockquote>\n<p>可选择源:</p>\n<ul>\n<li><a href=\"https://openwrt.mirrors.ustc.edu.cn/chaos_calmer/15.05/ramips/mt7620/\" target=\"_blank\" rel=\"external\">https://openwrt.mirrors.ustc.edu.cn/chaos_calmer/15.05/ramips/mt7620/</a></li>\n<li><a href=\"http://ba.mirror.garr.it/mirrors/openwrt/chaos_calmer/15.05/ramips/mt7620/\" target=\"_blank\" rel=\"external\">http://ba.mirror.garr.it/mirrors/openwrt/chaos_calmer/15.05/ramips/mt7620/</a></li>\n<li><a href=\"http://downloads.openwrt.org/chaos_calmer/15.05/ramips/mt7620/\" target=\"_blank\" rel=\"external\">http://downloads.openwrt.org/chaos_calmer/15.05/ramips/mt7620/</a></li>\n</ul>\n<h2 id=\"III-安装ChinaDNS、Shadowsocks与相关组件包\"><a href=\"#III-安装ChinaDNS、Shadowsocks与相关组件包\" class=\"headerlink\" title=\"III. 安装ChinaDNS、Shadowsocks与相关组件包\"></a>III. 安装ChinaDNS、Shadowsocks与相关组件包</h2><blockquote>\n<p>由于不同于以前用的WR720N的情况，mt7620的官方源中并没有相关组件包，因此都需要自己下载配置。<br>自行下载的可以下载下来通过<code>scp</code>传到路由器，然后再执行<code>opkg install 本地ipk文件路径</code>进行安装。</p>\n</blockquote>\n<p>首先一些基本的组件包官方源是有的直接安装:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">opkg <span class=\"keyword\">update</span></div><div class=\"line\">opkg <span class=\"keyword\">install</span> libpolarssl</div><div class=\"line\">opkg <span class=\"keyword\">install</span> resolveip</div></pre></td></tr></table></figure>\n<h4 id=\"1-安装ChinaDNS以及其luci\"><a href=\"#1-安装ChinaDNS以及其luci\" class=\"headerlink\" title=\"1. 安装ChinaDNS以及其luci\"></a>1. 安装ChinaDNS以及其luci</h4><blockquote>\n<p><a href=\"https://github.com/aa65535/openwrt-chinadns\" target=\"_blank\" rel=\"external\">https://github.com/aa65535/openwrt-chinadns</a></p>\n</blockquote>\n<ul>\n<li>ChinaDNS(我当时选用<code>1.3.2-d3e75dd</code>(当时最新版本)): <a href=\"https://sourceforge.net/projects/openwrt-dist/files/chinadns/\" target=\"_blank\" rel=\"external\">https://sourceforge.net/projects/openwrt-dist/files/chinadns/</a></li>\n<li>ChinaDNS-luci(我当时选用<code>1.4.0-1_all</code>(当时最新版本): <a href=\"https://sourceforge.net/projects/openwrt-dist/files/luci-app/chinadns/\" target=\"_blank\" rel=\"external\">https://sourceforge.net/projects/openwrt-dist/files/luci-app/chinadns/</a></li>\n</ul>\n<h4 id=\"2-安装Shadowsocks以及其luci\"><a href=\"#2-安装Shadowsocks以及其luci\" class=\"headerlink\" title=\"2. 安装Shadowsocks以及其luci\"></a>2. 安装Shadowsocks以及其luci</h4><blockquote>\n<p><a href=\"https://github.com/shadowsocks/openwrt-shadowsocks\" target=\"_blank\" rel=\"external\">https://github.com/shadowsocks/openwrt-shadowsocks</a></p>\n</blockquote>\n<ul>\n<li>下载安装openssl: <a href=\"http://jaist.dl.sourceforge.net/project/openwrt-dist/depends-libs/ramips/libopenssl_1.0.1i-1_ramips_24kec.ipk\" target=\"_blank\" rel=\"external\">http://jaist.dl.sourceforge.net/project/openwrt-dist/depends-libs/ramips/libopenssl_1.0.1i-1_ramips_24kec.ipk</a></li>\n<li>到<a href=\"https://sourceforge.net/projects/openwrt-dist/files/shadowsocks-libev/\" target=\"_blank\" rel=\"external\">这里</a>:<br>选用最新版本的目录进入(但是我选择的是<code>2.4.6-98cf545</code>)，然后进入<code>ramips</code>目录，下载并安装 <code>shadowsocks-libdev-spec_xxxx_ramips</code>(针对 OpenWrt 的优化版本)。</li>\n<li>shadowsocks-luci (选用最新版本下载安装(我当时选用的是1.4.0)): <a href=\"https://sourceforge.net/projects/openwrt-dist/files/luci-app/shadowsocks-spec/\" target=\"_blank\" rel=\"external\">https://sourceforge.net/projects/openwrt-dist/files/luci-app/shadowsocks-spec/</a></li>\n</ul>\n<h2 id=\"IV-配置\"><a href=\"#IV-配置\" class=\"headerlink\" title=\"IV. 配置\"></a>IV. 配置</h2><p>基本的配置与 <a href=\"http://blog.dreamtobe.cn/2015/09/06/wr720n-v3-openwrt-shadowsocks/\">TP-LINK WR720N v3刷OpenWrt完美翻墙</a>中的(<code>VI. 配置shadowsocks和chinadns</code>)一致，配置完以后，<strong>再进行以下最后的配置即可</strong>。</p>\n<h4 id=\"1-手动在Global-Setting中选中Server\"><a href=\"#1-手动在Global-Setting中选中Server\" class=\"headerlink\" title=\"1.手动在Global Setting中选中Server\"></a>1.手动在Global Setting中选中Server</h4><blockquote>\n<p>在 Shadowsocks 配置中 需要手动在Global Setting 中选中其中一个Server，方可运行。</p>\n</blockquote>\n<p><img src=\"/img/newifi-2.png\" alt=\"\"></p>\n<h4 id=\"2-手动指定过滤的IP列表\"><a href=\"#2-手动指定过滤的IP列表\" class=\"headerlink\" title=\"2. 手动指定过滤的IP列表\"></a>2. 手动指定过滤的IP列表</h4><blockquote>\n<p>在 Shadowsocks 配置中 需要手动在 Access Control-&gt;Interfaces-WAN 中手动选择 Bypassed IP List。</p>\n</blockquote>\n<p><img src=\"/img/newifi-3.png\" alt=\"\"></p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>之前我用的是 TP-LINK WR720N v3，也<a href=\"http://blog.dreamtobe.cn/2015/09/06/wr720n-v3-openwrt-shadowsocks/\">刷了OpenWrt进行翻墙</a>，上段时间同事一直给我推荐 Lenovo的 Newifi，各项硬件都不错，于是就入手了，网上查了下，简单的刷了个基于Openwrt的Pandorabox，结果发现相同的节点，看YouTuBe连720p都卡成了翔，还不如我之前WR720N来得稳定，严重影响工作效率，于是就倒腾起来，决定还是刷官网的OpenWrt。刷完官网的OpenWrt以及配置以后，速度飕飕的，又回到了YouTuBe流畅1080p的时代，而且各方面感觉相比之前使用TP-LINK WR720N v3，会来的更快些。</p>\n</blockquote>","more":"<p><img src=\"/img/newifi-1.png\" alt=\"\"></p>\n<hr>\n<h2 id=\"I-刷入官网OpenWrt\"><a href=\"#I-刷入官网OpenWrt\" class=\"headerlink\" title=\"I. 刷入官网OpenWrt\"></a>I. 刷入官网OpenWrt</h2><blockquote>\n<p>Newifi Y1 OpenWrt 官方Wiki: <a href=\"https://wiki.openwrt.org/toh/lenovo/lenovo_y1_v1\">https://wiki.openwrt.org/toh/lenovo/lenovo_y1_v1</a></p>\n</blockquote>\n<ol>\n<li>下载Newifi Y1 系统镜像 ： <a href=\"http://downloads.openwrt.org/chaos_calmer/15.05/ramips/mt7620/openwrt-15.05-ramips-mt7620-Lenovo-y1-squashfs-sysupgrade.bin\">http://downloads.openwrt.org/chaos_calmer/15.05/ramips/mt7620/openwrt-15.05-ramips-mt7620-Lenovo-y1-squashfs-sysupgrade.bin</a></li>\n<li>拔掉路由去电源。</li>\n<li>将路由器连接电脑，并且电脑端新建一个连接，设置IP <code>192.168.1.1</code> 以及掩码 <code>255.255.255.0</code>，网关 <code>192.168.1.1</code>。</li>\n<li>长按复位键的同时连接电源，看到路由器上面有两个LED等在闪说明进入了刷机模式。</li>\n<li>选择下载的镜像刷入。</li>\n</ol>\n<h2 id=\"II-基本配置\"><a href=\"#II-基本配置\" class=\"headerlink\" title=\"II. 基本配置\"></a>II. 基本配置</h2><h4 id=\"1-安装5G网络\"><a href=\"#1-安装5G网络\" class=\"headerlink\" title=\"1. 安装5G网络\"></a>1. 安装5G网络</h4><p>安装一个包就可以了，登录终端以后执行以下命令:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">opkg <span class=\"keyword\">update</span> &amp;&amp; opkg -y <span class=\"keyword\">install</span> kmod-mt76</div></pre></td></tr></table></figure>\n<h4 id=\"2-镜像源配置\"><a href=\"#2-镜像源配置\" class=\"headerlink\" title=\"2. 镜像源配置\"></a>2. 镜像源配置</h4><blockquote>\n<p>留意是: <code>chaos_calmer</code>，并且是 <code>ramips</code> 架构。</p>\n</blockquote>\n<p>可选择源:</p>\n<ul>\n<li><a href=\"https://openwrt.mirrors.ustc.edu.cn/chaos_calmer/15.05/ramips/mt7620/\">https://openwrt.mirrors.ustc.edu.cn/chaos_calmer/15.05/ramips/mt7620/</a></li>\n<li><a href=\"http://ba.mirror.garr.it/mirrors/openwrt/chaos_calmer/15.05/ramips/mt7620/\">http://ba.mirror.garr.it/mirrors/openwrt/chaos_calmer/15.05/ramips/mt7620/</a></li>\n<li><a href=\"http://downloads.openwrt.org/chaos_calmer/15.05/ramips/mt7620/\">http://downloads.openwrt.org/chaos_calmer/15.05/ramips/mt7620/</a></li>\n</ul>\n<h2 id=\"III-安装ChinaDNS、Shadowsocks与相关组件包\"><a href=\"#III-安装ChinaDNS、Shadowsocks与相关组件包\" class=\"headerlink\" title=\"III. 安装ChinaDNS、Shadowsocks与相关组件包\"></a>III. 安装ChinaDNS、Shadowsocks与相关组件包</h2><blockquote>\n<p>由于不同于以前用的WR720N的情况，mt7620的官方源中并没有相关组件包，因此都需要自己下载配置。<br>自行下载的可以下载下来通过<code>scp</code>传到路由器，然后再执行<code>opkg install 本地ipk文件路径</code>进行安装。</p>\n</blockquote>\n<p>首先一些基本的组件包官方源是有的直接安装:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">opkg <span class=\"keyword\">update</span></div><div class=\"line\">opkg <span class=\"keyword\">install</span> libpolarssl</div><div class=\"line\">opkg <span class=\"keyword\">install</span> resolveip</div></pre></td></tr></table></figure>\n<h4 id=\"1-安装ChinaDNS以及其luci\"><a href=\"#1-安装ChinaDNS以及其luci\" class=\"headerlink\" title=\"1. 安装ChinaDNS以及其luci\"></a>1. 安装ChinaDNS以及其luci</h4><blockquote>\n<p><a href=\"https://github.com/aa65535/openwrt-chinadns\">https://github.com/aa65535/openwrt-chinadns</a></p>\n</blockquote>\n<ul>\n<li>ChinaDNS(我当时选用<code>1.3.2-d3e75dd</code>(当时最新版本)): <a href=\"https://sourceforge.net/projects/openwrt-dist/files/chinadns/\">https://sourceforge.net/projects/openwrt-dist/files/chinadns/</a></li>\n<li>ChinaDNS-luci(我当时选用<code>1.4.0-1_all</code>(当时最新版本): <a href=\"https://sourceforge.net/projects/openwrt-dist/files/luci-app/chinadns/\">https://sourceforge.net/projects/openwrt-dist/files/luci-app/chinadns/</a></li>\n</ul>\n<h4 id=\"2-安装Shadowsocks以及其luci\"><a href=\"#2-安装Shadowsocks以及其luci\" class=\"headerlink\" title=\"2. 安装Shadowsocks以及其luci\"></a>2. 安装Shadowsocks以及其luci</h4><blockquote>\n<p><a href=\"https://github.com/shadowsocks/openwrt-shadowsocks\">https://github.com/shadowsocks/openwrt-shadowsocks</a></p>\n</blockquote>\n<ul>\n<li>下载安装openssl: <a href=\"http://jaist.dl.sourceforge.net/project/openwrt-dist/depends-libs/ramips/libopenssl_1.0.1i-1_ramips_24kec.ipk\">http://jaist.dl.sourceforge.net/project/openwrt-dist/depends-libs/ramips/libopenssl_1.0.1i-1_ramips_24kec.ipk</a></li>\n<li>到<a href=\"https://sourceforge.net/projects/openwrt-dist/files/shadowsocks-libev/\">这里</a>:<br>选用最新版本的目录进入(但是我选择的是<code>2.4.6-98cf545</code>)，然后进入<code>ramips</code>目录，下载并安装 <code>shadowsocks-libdev-spec_xxxx_ramips</code>(针对 OpenWrt 的优化版本)。</li>\n<li>shadowsocks-luci (选用最新版本下载安装(我当时选用的是1.4.0)): <a href=\"https://sourceforge.net/projects/openwrt-dist/files/luci-app/shadowsocks-spec/\">https://sourceforge.net/projects/openwrt-dist/files/luci-app/shadowsocks-spec/</a></li>\n</ul>\n<h2 id=\"IV-配置\"><a href=\"#IV-配置\" class=\"headerlink\" title=\"IV. 配置\"></a>IV. 配置</h2><p>基本的配置与 <a href=\"http://blog.dreamtobe.cn/2015/09/06/wr720n-v3-openwrt-shadowsocks/\">TP-LINK WR720N v3刷OpenWrt完美翻墙</a>中的(<code>VI. 配置shadowsocks和chinadns</code>)一致，配置完以后，<strong>再进行以下最后的配置即可</strong>。</p>\n<h4 id=\"1-手动在Global-Setting中选中Server\"><a href=\"#1-手动在Global-Setting中选中Server\" class=\"headerlink\" title=\"1.手动在Global Setting中选中Server\"></a>1.手动在Global Setting中选中Server</h4><blockquote>\n<p>在 Shadowsocks 配置中 需要手动在Global Setting 中选中其中一个Server，方可运行。</p>\n</blockquote>\n<p><img src=\"/img/newifi-2.png\" alt=\"\"></p>\n<h4 id=\"2-手动指定过滤的IP列表\"><a href=\"#2-手动指定过滤的IP列表\" class=\"headerlink\" title=\"2. 手动指定过滤的IP列表\"></a>2. 手动指定过滤的IP列表</h4><blockquote>\n<p>在 Shadowsocks 配置中 需要手动在 Access Control-&gt;Interfaces-WAN 中手动选择 Bypassed IP List。</p>\n</blockquote>\n<p><img src=\"/img/newifi-3.png\" alt=\"\"></p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"微信Mars与其策略","date":"2017-02-08T11:42:03.000Z","_content":"\n> 前几年在微信工作时，参加一些内部会议当时也有做了相关简要整理: [Android网络](http://blog.dreamtobe.cn/2015/03/28/Android网络学习笔记整理/)，前端时间也有总结了[微信的心跳机制](https://blog.dreamtobe.cn/2016/08/16/android_weak_network/)，今天主要是对已开源的Mars进行窥探。\n\n> Mars是微信[已经开源](https://github.com/Tencent/mars)的小数据传输的解决方案。\n\n<!-- more -->\n\n具体部分可以参考官方图片:\n\n![](/img/mars-1.png)\n\n- Commn: 网络组件\n- **STN:** 信令网络（小数据传输），Mars的主要部分\n- SDT: 网络争端组件\n- CDN: 数据网络（大数据传输）(**由于耦合腾讯CDN服务，因此没有开源**)\n- XLOG: 日志组件\n- 终端质量平台\n\n\n## I. STN模块\n\n> 要求: 高可用、高性能、低负载、容灾性\n> 架构: 稳定、简化\n\n![](/img/mars-2.png)\n\n### 1. 对比\n\n> 相比 IOS AFNetworking、Android Retrofit, OkHttp\n\n- 跨平台\n- Socket层(大多数其他的库都是http层)，是为了更深入的优化\n- 更适用于小数据传输，信令网络\n\n### 2. 特点:\n\n- **包含两种通道:** 长连接(性能要求要的请求），短连接（普通一来一回的请求），对于上层业务而言只需要关注业务。\n- **更适合做移动互联网组件:** 前后台、活跃态、休眠、省电、省流量。DNS防劫持，负载，容灾。\n- **更多:** 数据监控(网络情况)，参数配置。\n\n\n### 3. 连接策略\n\n![](/img/mars-3.png)\n\n\n#### 3.1 建立连接:\n\n##### 连接超时情景\n\n- **连不通:** 无论如何都差不多\n- **被劫持/服务器故障:** 希望更快的返回，以便于更换ip端口快速查找可用资源。\n- **弱网络，基站繁忙、连接信号弱，丢包率高:** 希望超时更长些，延时高，丢包率高，等长一点，重试多些（由于换IP/端口无用）\n\n##### 连接超时考量点\n\n可用性，网络敏感性，用户体验（< 1min）\n\n##### 连接超时间隔策略:\n\n- **Linux与Android:** 指数递增(0,2,4,8,16)\n![](/img/mars-4.png)\n\n- **IOS:** 优化后的指数递增(1,1,1,1,1,2,4,8,16)\n![](/img/mars-5.png)\n- **STN:** 策略权衡相对适用于微信(可能有些应用需要更高的敏感性): 10s\n![](/img/mars-6.png)\n\nSTN连接超时间隔10s的原因:\n\n1. 占用重试频率比较高的间隔\n2. 10s之后，Android需要经过5s才能发起下一次重试（需要相对长无效的等待时间）\n\n##### STN连接效率策略\n\n> 快速找到有效可用的ip/端口资源\n\n常见策略:\n\n- **串行连接:** 资源占用少、无服务器负载问题、超时选择困难、最慢可用选择\n- **并发连接:** 网络资源竞争（复杂度、性能消耗）、服务器负责（成倍增加）、最快可用（提高效率）\n\nSTN策略:\n\n- **STN复合连接:** 更快的找到可用并不增加服务器负载\n![](/img/mars-7.png)\n\n##### 建立连接其他优化\n\n![](/img/mars-8.png)\n\n#### 3.2 维持连接\n\n##### 优化探究\n\n- 链路层: 需要在不可靠的物理设备的基础上，实现节点与节点间可靠的信息传输，一般使用混合自动重传请求(HARQ(Hybrid Automatic Repeat reQuest) = FEC(前馈式错误修正) +  ARQ(自动重传请求))，其能够使得前一个失败的尝试中存下有用资讯供之后的解码使用，这个需要手机与RNC都支持.\n- 传输层(TCP层）: 需要基于不可靠的链路做端与端之间每个TCP数据包的可靠传输，是通过超时和重传做到的，在发送数据时设定一个定时器，定时器溢出时还没有收到ACK，则重传该数据。\n\n作为应用层:\n\n- 更应该为用户体验考虑(尽可能提高成功率)\n- 保障弱网络下的可用性\n- 具有网络敏感性，快速的发现新链路\n\n##### 读写超时间隔策略\n\n> TCP确认失败: Android系统16min, IOS系统1min~3.5min\n\n- **UNIX的指数退避[^1]:** [1,3,6,12,24,48,64,64...]\n![](/img/mars-9.png)\n- **Android:** (OPPO手机数据，前部分更积极) [0.25,0.5,1,2,4,8,16,32,64,64,64...]\n![](/img/mars-10.png)\n- **IOS:** (前部分更积极，后部分也很积极) [1,1,1,2,4.5,9,13.5,26,26...]\n\nSTN读写超时(多级超时方案)(应用层读写超设计):\n\n- **目标:** 高性能(体验与尽可能的提高成功率)、可用性(弱网)、敏感性(网络敏感性，快速发现新链路)\n- **做法:** 将原有连接断掉，重新选择IP与端口\n- **作用:** 减少无效的等待时间(因为重传间隔越来越大，断连重连，使TCP层保持积极重连间隔)，增加重试次数；切换链路，在较大波动/严重拥塞，通过更换连接（IP&端口）获得更好的性能。\n\nSTN读写超时具体多级超时方案:\n\n**总读写超时:** 请求发出去到完整的服务器回包收完为止。= `发包大小/最低网速(主观 评估值)` + `服务器约定最大耗时(主观)` + `最大回包大小(由于无法事先获知回包大小(微信最大回包128KB))/最低网速(主观 评估值)` + `并发数 * 常量`\n\n由于**总读写超时**太主观，并且是一个差网络下、完整的完成单次信令交互的时间估值，因此会显得过长，特别在网络波动或拥塞时，显示无法敏感的发现问题并重试，遂更具步骤进行拆分:\n\n- **首包超时:** 当发送数据大于MSS时，数据会被分段传输，分段到达接收端后重新组合发，因此这里将首个数据分段到达超时定义为首包超时 = `发包大小/最低网速(主观 评估值)` + `服务器约定最大耗时(主观)` + `并发数 * 常量`\n- **包包超时:** 两个数据分段之间的超时时间，这个时候因为服务端已经处理完成，不需要再计算等待耗时、请求传输耗时、服务器处理耗时 = `发包大小/网速(客观 准确值)` + `并发数 * 常量`\n- **动态超时:** 分析网络状态，当趋于稳定的时候就减少首包超时，此时如果网络波动时我们预期它能够快速恢复，所以尽快超时然后进行重试，从而改善用户体验\n![](/img/mars-11.png)\n\n## II. XLog\n\n> 高性能跨平台日志模块\n\n### 1. 所解决的问题\n\n> 性能 + 可靠性 + 安全\n\n- **避免频繁GC:** 由于Native的实现，有效避免了频繁写文件造成的频繁的GC\n- **避免频繁IO与加密:** 达到一定数量日志了再压缩，压缩完再加密\n- **避免丢日志:** 将日志写入mmap中，避免程序被系统杀死不会有事件通知\n- **避免IO的耗时:** 通过写mmap来达到写文件，其性能与直接操作内存相当\n- **避免日志泄露:** 在写入mmap之前就已经对每行日志进行压缩加密，并且采逐行压缩\n- **避免CPU短暂飙高:** 采用多条日志流式压缩（日志行数累计到一定大小作为一个压缩单元进行压缩），压缩算法性能较高，由于每个单元的日志并不多，可以把压缩时间分散在整个分散周期内，CPU曲线更平滑。\n\n### 2. mmap\n\n#### 2.1 写文件\n\n> 写文件，系统是不会直接把数据写入磁盘，而是**先把数据写入到系统缓存(dirty page)，再根据策略将dirty page写入磁盘**\n\ndirty page写入磁盘策略:\n\n- **定时写回**(相关变量在: `/proc/sys/vm/dirty_writeback_centisecs`、`/proc/sys/vm/dirty_expire_centisecs`)\n- **dirty page的大小超过一定比例**(调用write时检测，比例变量存储在`/proc/sys/vm/dirty_background_ratio`、`/proc/sys/vm/dirty_ratio`)\n- **内存不足**\n\n程序 -> 磁盘: `用户空间内存` -> `内核空间缓存` -> `硬盘` ，因此涉及用户空间与内核空间频繁切换。应用层不可控，出现瓶颈。\n\n#### 2.2 引入mmap的原因:\n\n**综合频繁写文件会带来的瓶颈**以及**写入内存缓存带来的丢日志的问题**(还有共享内存在Android 4.0以后便不再有权限使用)，更好的解决方案mmap\n\n#### 2.3 什么是mmap?\n\n> 逻辑内存对磁盘文件进行映射（不再有拷贝）\n\nmmap带来的益处显而易见，`操作内存` = `操作文件`, 从而避免了 用户空间与内核空间频繁的切换，也正因为如此，我们只需要将日志写入mmap，就不会应用当前进程(/虚拟机)被杀导致日志丢失的问题。\n\n![](/img/mars-12.png)\n\n#### 2.4 XLog中将mmap回写文件的策略:\n\n- 内存不足\n- 进程 crash\n- 调用 msync 或者 munmap\n- 不设置 MAP_NOSYNC 情况下 30s-60s(仅限FreeBSD)\n\n### 3. 压缩算法\n\n> 该压缩方法只包含了LZ77中的**短语式压缩**，因为进一步的压缩(如自定义字典/huffman表)无法带来显著的效果，而只要提供控制好压缩单元的长度，仅仅**短语式压缩**就能带来`83.7%`的压缩率。\n> XLog 采用该算法，对根据策略累计了一定长度的日志进行压缩\n\n通过记录( 距离可复用字符串位置距离，复用字符串长度 ) 来代替可被压缩的字符串进行压缩:\n\n![](/img/mars-13.png)\n\n- 最终没压缩的字符依然是ascci编码，因此最终的压缩结果都是一堆整数。\n- 滑动历史缓存窗口: 一般是32kb，因此只需要一定大小的压缩单元就可以达到很好的压缩率，**并非**大小越大的单元压缩率越大。\n- 采用分单元流式压缩，而非整个app生命周期内一起压缩，虽然耗时慢了许多但是由于耗时极小因此可以忽略，并且带来了很多好处：1. 个别的压缩错误影响面缩小到对应的单元； 2. 压缩时间分散在各个单元压缩时，因此CPU曲线更平滑\n\n---\n\n- [微信Mars：客户端跨平台组件的开发经验](https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&mid=2649286414&idx=1&sn=98d90d31c638f6b8bca2e3a2a7f0042a)\n- [微信Mars——移动互联网下的高质量网络连接探索](http://www.infoq.com/cn/presentations/wechat-mars-high-quality-network-connection)\n- [微信终端跨平台组件 mars 系列（一） - 高性能日志模块xlog](http://mp.weixin.qq.com/s/cnhuEodJGIbdodh0IxNeXQ)\n- [混合自动重传请求](http://www.mscbsc.com/cidian/word9m7)\n- [微信终端跨平台组件 mars 系列(二) - 信令传输超时设计](https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&mid=2649286449&idx=1&sn=aa2877e8506762253f291eb6d3e80a51)\n\n---\n\n> © 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n\n[^1]: Unix中的\"指数退避\"的间隔是取决于**RTT**，而RTT本身由于受网络路由、流量等影响，有极为复杂的测量算法(平滑算法、Karn算法、Jacbson算法)，并且这个重传超时间隔(RTO)。\n","source":"_posts/mars.md","raw":"title: 微信Mars与其策略\ndate: 2017-02-08 19:42:03\ntags:\n- STN\n- Mars\n- 网络\n- XLog\n- RTT\n\n---\n\n> 前几年在微信工作时，参加一些内部会议当时也有做了相关简要整理: [Android网络](http://blog.dreamtobe.cn/2015/03/28/Android网络学习笔记整理/)，前端时间也有总结了[微信的心跳机制](https://blog.dreamtobe.cn/2016/08/16/android_weak_network/)，今天主要是对已开源的Mars进行窥探。\n\n> Mars是微信[已经开源](https://github.com/Tencent/mars)的小数据传输的解决方案。\n\n<!-- more -->\n\n具体部分可以参考官方图片:\n\n![](/img/mars-1.png)\n\n- Commn: 网络组件\n- **STN:** 信令网络（小数据传输），Mars的主要部分\n- SDT: 网络争端组件\n- CDN: 数据网络（大数据传输）(**由于耦合腾讯CDN服务，因此没有开源**)\n- XLOG: 日志组件\n- 终端质量平台\n\n\n## I. STN模块\n\n> 要求: 高可用、高性能、低负载、容灾性\n> 架构: 稳定、简化\n\n![](/img/mars-2.png)\n\n### 1. 对比\n\n> 相比 IOS AFNetworking、Android Retrofit, OkHttp\n\n- 跨平台\n- Socket层(大多数其他的库都是http层)，是为了更深入的优化\n- 更适用于小数据传输，信令网络\n\n### 2. 特点:\n\n- **包含两种通道:** 长连接(性能要求要的请求），短连接（普通一来一回的请求），对于上层业务而言只需要关注业务。\n- **更适合做移动互联网组件:** 前后台、活跃态、休眠、省电、省流量。DNS防劫持，负载，容灾。\n- **更多:** 数据监控(网络情况)，参数配置。\n\n\n### 3. 连接策略\n\n![](/img/mars-3.png)\n\n\n#### 3.1 建立连接:\n\n##### 连接超时情景\n\n- **连不通:** 无论如何都差不多\n- **被劫持/服务器故障:** 希望更快的返回，以便于更换ip端口快速查找可用资源。\n- **弱网络，基站繁忙、连接信号弱，丢包率高:** 希望超时更长些，延时高，丢包率高，等长一点，重试多些（由于换IP/端口无用）\n\n##### 连接超时考量点\n\n可用性，网络敏感性，用户体验（< 1min）\n\n##### 连接超时间隔策略:\n\n- **Linux与Android:** 指数递增(0,2,4,8,16)\n![](/img/mars-4.png)\n\n- **IOS:** 优化后的指数递增(1,1,1,1,1,2,4,8,16)\n![](/img/mars-5.png)\n- **STN:** 策略权衡相对适用于微信(可能有些应用需要更高的敏感性): 10s\n![](/img/mars-6.png)\n\nSTN连接超时间隔10s的原因:\n\n1. 占用重试频率比较高的间隔\n2. 10s之后，Android需要经过5s才能发起下一次重试（需要相对长无效的等待时间）\n\n##### STN连接效率策略\n\n> 快速找到有效可用的ip/端口资源\n\n常见策略:\n\n- **串行连接:** 资源占用少、无服务器负载问题、超时选择困难、最慢可用选择\n- **并发连接:** 网络资源竞争（复杂度、性能消耗）、服务器负责（成倍增加）、最快可用（提高效率）\n\nSTN策略:\n\n- **STN复合连接:** 更快的找到可用并不增加服务器负载\n![](/img/mars-7.png)\n\n##### 建立连接其他优化\n\n![](/img/mars-8.png)\n\n#### 3.2 维持连接\n\n##### 优化探究\n\n- 链路层: 需要在不可靠的物理设备的基础上，实现节点与节点间可靠的信息传输，一般使用混合自动重传请求(HARQ(Hybrid Automatic Repeat reQuest) = FEC(前馈式错误修正) +  ARQ(自动重传请求))，其能够使得前一个失败的尝试中存下有用资讯供之后的解码使用，这个需要手机与RNC都支持.\n- 传输层(TCP层）: 需要基于不可靠的链路做端与端之间每个TCP数据包的可靠传输，是通过超时和重传做到的，在发送数据时设定一个定时器，定时器溢出时还没有收到ACK，则重传该数据。\n\n作为应用层:\n\n- 更应该为用户体验考虑(尽可能提高成功率)\n- 保障弱网络下的可用性\n- 具有网络敏感性，快速的发现新链路\n\n##### 读写超时间隔策略\n\n> TCP确认失败: Android系统16min, IOS系统1min~3.5min\n\n- **UNIX的指数退避[^1]:** [1,3,6,12,24,48,64,64...]\n![](/img/mars-9.png)\n- **Android:** (OPPO手机数据，前部分更积极) [0.25,0.5,1,2,4,8,16,32,64,64,64...]\n![](/img/mars-10.png)\n- **IOS:** (前部分更积极，后部分也很积极) [1,1,1,2,4.5,9,13.5,26,26...]\n\nSTN读写超时(多级超时方案)(应用层读写超设计):\n\n- **目标:** 高性能(体验与尽可能的提高成功率)、可用性(弱网)、敏感性(网络敏感性，快速发现新链路)\n- **做法:** 将原有连接断掉，重新选择IP与端口\n- **作用:** 减少无效的等待时间(因为重传间隔越来越大，断连重连，使TCP层保持积极重连间隔)，增加重试次数；切换链路，在较大波动/严重拥塞，通过更换连接（IP&端口）获得更好的性能。\n\nSTN读写超时具体多级超时方案:\n\n**总读写超时:** 请求发出去到完整的服务器回包收完为止。= `发包大小/最低网速(主观 评估值)` + `服务器约定最大耗时(主观)` + `最大回包大小(由于无法事先获知回包大小(微信最大回包128KB))/最低网速(主观 评估值)` + `并发数 * 常量`\n\n由于**总读写超时**太主观，并且是一个差网络下、完整的完成单次信令交互的时间估值，因此会显得过长，特别在网络波动或拥塞时，显示无法敏感的发现问题并重试，遂更具步骤进行拆分:\n\n- **首包超时:** 当发送数据大于MSS时，数据会被分段传输，分段到达接收端后重新组合发，因此这里将首个数据分段到达超时定义为首包超时 = `发包大小/最低网速(主观 评估值)` + `服务器约定最大耗时(主观)` + `并发数 * 常量`\n- **包包超时:** 两个数据分段之间的超时时间，这个时候因为服务端已经处理完成，不需要再计算等待耗时、请求传输耗时、服务器处理耗时 = `发包大小/网速(客观 准确值)` + `并发数 * 常量`\n- **动态超时:** 分析网络状态，当趋于稳定的时候就减少首包超时，此时如果网络波动时我们预期它能够快速恢复，所以尽快超时然后进行重试，从而改善用户体验\n![](/img/mars-11.png)\n\n## II. XLog\n\n> 高性能跨平台日志模块\n\n### 1. 所解决的问题\n\n> 性能 + 可靠性 + 安全\n\n- **避免频繁GC:** 由于Native的实现，有效避免了频繁写文件造成的频繁的GC\n- **避免频繁IO与加密:** 达到一定数量日志了再压缩，压缩完再加密\n- **避免丢日志:** 将日志写入mmap中，避免程序被系统杀死不会有事件通知\n- **避免IO的耗时:** 通过写mmap来达到写文件，其性能与直接操作内存相当\n- **避免日志泄露:** 在写入mmap之前就已经对每行日志进行压缩加密，并且采逐行压缩\n- **避免CPU短暂飙高:** 采用多条日志流式压缩（日志行数累计到一定大小作为一个压缩单元进行压缩），压缩算法性能较高，由于每个单元的日志并不多，可以把压缩时间分散在整个分散周期内，CPU曲线更平滑。\n\n### 2. mmap\n\n#### 2.1 写文件\n\n> 写文件，系统是不会直接把数据写入磁盘，而是**先把数据写入到系统缓存(dirty page)，再根据策略将dirty page写入磁盘**\n\ndirty page写入磁盘策略:\n\n- **定时写回**(相关变量在: `/proc/sys/vm/dirty_writeback_centisecs`、`/proc/sys/vm/dirty_expire_centisecs`)\n- **dirty page的大小超过一定比例**(调用write时检测，比例变量存储在`/proc/sys/vm/dirty_background_ratio`、`/proc/sys/vm/dirty_ratio`)\n- **内存不足**\n\n程序 -> 磁盘: `用户空间内存` -> `内核空间缓存` -> `硬盘` ，因此涉及用户空间与内核空间频繁切换。应用层不可控，出现瓶颈。\n\n#### 2.2 引入mmap的原因:\n\n**综合频繁写文件会带来的瓶颈**以及**写入内存缓存带来的丢日志的问题**(还有共享内存在Android 4.0以后便不再有权限使用)，更好的解决方案mmap\n\n#### 2.3 什么是mmap?\n\n> 逻辑内存对磁盘文件进行映射（不再有拷贝）\n\nmmap带来的益处显而易见，`操作内存` = `操作文件`, 从而避免了 用户空间与内核空间频繁的切换，也正因为如此，我们只需要将日志写入mmap，就不会应用当前进程(/虚拟机)被杀导致日志丢失的问题。\n\n![](/img/mars-12.png)\n\n#### 2.4 XLog中将mmap回写文件的策略:\n\n- 内存不足\n- 进程 crash\n- 调用 msync 或者 munmap\n- 不设置 MAP_NOSYNC 情况下 30s-60s(仅限FreeBSD)\n\n### 3. 压缩算法\n\n> 该压缩方法只包含了LZ77中的**短语式压缩**，因为进一步的压缩(如自定义字典/huffman表)无法带来显著的效果，而只要提供控制好压缩单元的长度，仅仅**短语式压缩**就能带来`83.7%`的压缩率。\n> XLog 采用该算法，对根据策略累计了一定长度的日志进行压缩\n\n通过记录( 距离可复用字符串位置距离，复用字符串长度 ) 来代替可被压缩的字符串进行压缩:\n\n![](/img/mars-13.png)\n\n- 最终没压缩的字符依然是ascci编码，因此最终的压缩结果都是一堆整数。\n- 滑动历史缓存窗口: 一般是32kb，因此只需要一定大小的压缩单元就可以达到很好的压缩率，**并非**大小越大的单元压缩率越大。\n- 采用分单元流式压缩，而非整个app生命周期内一起压缩，虽然耗时慢了许多但是由于耗时极小因此可以忽略，并且带来了很多好处：1. 个别的压缩错误影响面缩小到对应的单元； 2. 压缩时间分散在各个单元压缩时，因此CPU曲线更平滑\n\n---\n\n- [微信Mars：客户端跨平台组件的开发经验](https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&mid=2649286414&idx=1&sn=98d90d31c638f6b8bca2e3a2a7f0042a)\n- [微信Mars——移动互联网下的高质量网络连接探索](http://www.infoq.com/cn/presentations/wechat-mars-high-quality-network-connection)\n- [微信终端跨平台组件 mars 系列（一） - 高性能日志模块xlog](http://mp.weixin.qq.com/s/cnhuEodJGIbdodh0IxNeXQ)\n- [混合自动重传请求](http://www.mscbsc.com/cidian/word9m7)\n- [微信终端跨平台组件 mars 系列(二) - 信令传输超时设计](https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&mid=2649286449&idx=1&sn=aa2877e8506762253f291eb6d3e80a51)\n\n---\n\n> © 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n\n[^1]: Unix中的\"指数退避\"的间隔是取决于**RTT**，而RTT本身由于受网络路由、流量等影响，有极为复杂的测量算法(平滑算法、Karn算法、Jacbson算法)，并且这个重传超时间隔(RTO)。\n","slug":"mars","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66j8003d95buyn09s0hk","content":"<blockquote>\n<p>前几年在微信工作时，参加一些内部会议当时也有做了相关简要整理: <a href=\"http://blog.dreamtobe.cn/2015/03/28/Android网络学习笔记整理/\">Android网络</a>，前端时间也有总结了<a href=\"https://blog.dreamtobe.cn/2016/08/16/android_weak_network/\">微信的心跳机制</a>，今天主要是对已开源的Mars进行窥探。</p>\n<p>Mars是微信<a href=\"https://github.com/Tencent/mars\" target=\"_blank\" rel=\"external\">已经开源</a>的小数据传输的解决方案。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>具体部分可以参考官方图片:</p>\n<p><img src=\"/img/mars-1.png\" alt=\"\"></p>\n<ul>\n<li>Commn: 网络组件</li>\n<li><strong>STN:</strong> 信令网络（小数据传输），Mars的主要部分</li>\n<li>SDT: 网络争端组件</li>\n<li>CDN: 数据网络（大数据传输）(<strong>由于耦合腾讯CDN服务，因此没有开源</strong>)</li>\n<li>XLOG: 日志组件</li>\n<li>终端质量平台</li>\n</ul>\n<h2 id=\"I-STN模块\"><a href=\"#I-STN模块\" class=\"headerlink\" title=\"I. STN模块\"></a>I. STN模块</h2><blockquote>\n<p>要求: 高可用、高性能、低负载、容灾性<br>架构: 稳定、简化</p>\n</blockquote>\n<p><img src=\"/img/mars-2.png\" alt=\"\"></p>\n<h3 id=\"1-对比\"><a href=\"#1-对比\" class=\"headerlink\" title=\"1. 对比\"></a>1. 对比</h3><blockquote>\n<p>相比 IOS AFNetworking、Android Retrofit, OkHttp</p>\n</blockquote>\n<ul>\n<li>跨平台</li>\n<li>Socket层(大多数其他的库都是http层)，是为了更深入的优化</li>\n<li>更适用于小数据传输，信令网络</li>\n</ul>\n<h3 id=\"2-特点\"><a href=\"#2-特点\" class=\"headerlink\" title=\"2. 特点:\"></a>2. 特点:</h3><ul>\n<li><strong>包含两种通道:</strong> 长连接(性能要求要的请求），短连接（普通一来一回的请求），对于上层业务而言只需要关注业务。</li>\n<li><strong>更适合做移动互联网组件:</strong> 前后台、活跃态、休眠、省电、省流量。DNS防劫持，负载，容灾。</li>\n<li><strong>更多:</strong> 数据监控(网络情况)，参数配置。</li>\n</ul>\n<h3 id=\"3-连接策略\"><a href=\"#3-连接策略\" class=\"headerlink\" title=\"3. 连接策略\"></a>3. 连接策略</h3><p><img src=\"/img/mars-3.png\" alt=\"\"></p>\n<h4 id=\"3-1-建立连接\"><a href=\"#3-1-建立连接\" class=\"headerlink\" title=\"3.1 建立连接:\"></a>3.1 建立连接:</h4><h5 id=\"连接超时情景\"><a href=\"#连接超时情景\" class=\"headerlink\" title=\"连接超时情景\"></a>连接超时情景</h5><ul>\n<li><strong>连不通:</strong> 无论如何都差不多</li>\n<li><strong>被劫持/服务器故障:</strong> 希望更快的返回，以便于更换ip端口快速查找可用资源。</li>\n<li><strong>弱网络，基站繁忙、连接信号弱，丢包率高:</strong> 希望超时更长些，延时高，丢包率高，等长一点，重试多些（由于换IP/端口无用）</li>\n</ul>\n<h5 id=\"连接超时考量点\"><a href=\"#连接超时考量点\" class=\"headerlink\" title=\"连接超时考量点\"></a>连接超时考量点</h5><p>可用性，网络敏感性，用户体验（&lt; 1min）</p>\n<h5 id=\"连接超时间隔策略\"><a href=\"#连接超时间隔策略\" class=\"headerlink\" title=\"连接超时间隔策略:\"></a>连接超时间隔策略:</h5><ul>\n<li><p><strong>Linux与Android:</strong> 指数递增(0,2,4,8,16)<br><img src=\"/img/mars-4.png\" alt=\"\"></p>\n</li>\n<li><p><strong>IOS:</strong> 优化后的指数递增(1,1,1,1,1,2,4,8,16)<br><img src=\"/img/mars-5.png\" alt=\"\"></p>\n</li>\n<li><strong>STN:</strong> 策略权衡相对适用于微信(可能有些应用需要更高的敏感性): 10s<br><img src=\"/img/mars-6.png\" alt=\"\"></li>\n</ul>\n<p>STN连接超时间隔10s的原因:</p>\n<ol>\n<li>占用重试频率比较高的间隔</li>\n<li>10s之后，Android需要经过5s才能发起下一次重试（需要相对长无效的等待时间）</li>\n</ol>\n<h5 id=\"STN连接效率策略\"><a href=\"#STN连接效率策略\" class=\"headerlink\" title=\"STN连接效率策略\"></a>STN连接效率策略</h5><blockquote>\n<p>快速找到有效可用的ip/端口资源</p>\n</blockquote>\n<p>常见策略:</p>\n<ul>\n<li><strong>串行连接:</strong> 资源占用少、无服务器负载问题、超时选择困难、最慢可用选择</li>\n<li><strong>并发连接:</strong> 网络资源竞争（复杂度、性能消耗）、服务器负责（成倍增加）、最快可用（提高效率）</li>\n</ul>\n<p>STN策略:</p>\n<ul>\n<li><strong>STN复合连接:</strong> 更快的找到可用并不增加服务器负载<br><img src=\"/img/mars-7.png\" alt=\"\"></li>\n</ul>\n<h5 id=\"建立连接其他优化\"><a href=\"#建立连接其他优化\" class=\"headerlink\" title=\"建立连接其他优化\"></a>建立连接其他优化</h5><p><img src=\"/img/mars-8.png\" alt=\"\"></p>\n<h4 id=\"3-2-维持连接\"><a href=\"#3-2-维持连接\" class=\"headerlink\" title=\"3.2 维持连接\"></a>3.2 维持连接</h4><h5 id=\"优化探究\"><a href=\"#优化探究\" class=\"headerlink\" title=\"优化探究\"></a>优化探究</h5><ul>\n<li>链路层: 需要在不可靠的物理设备的基础上，实现节点与节点间可靠的信息传输，一般使用混合自动重传请求(HARQ(Hybrid Automatic Repeat reQuest) = FEC(前馈式错误修正) +  ARQ(自动重传请求))，其能够使得前一个失败的尝试中存下有用资讯供之后的解码使用，这个需要手机与RNC都支持.</li>\n<li>传输层(TCP层）: 需要基于不可靠的链路做端与端之间每个TCP数据包的可靠传输，是通过超时和重传做到的，在发送数据时设定一个定时器，定时器溢出时还没有收到ACK，则重传该数据。</li>\n</ul>\n<p>作为应用层:</p>\n<ul>\n<li>更应该为用户体验考虑(尽可能提高成功率)</li>\n<li>保障弱网络下的可用性</li>\n<li>具有网络敏感性，快速的发现新链路</li>\n</ul>\n<h5 id=\"读写超时间隔策略\"><a href=\"#读写超时间隔策略\" class=\"headerlink\" title=\"读写超时间隔策略\"></a>读写超时间隔策略</h5><blockquote>\n<p>TCP确认失败: Android系统16min, IOS系统1min~3.5min</p>\n</blockquote>\n<ul>\n<li><strong>UNIX的指数退避<a href=\"Unix中的&quot;指数退避&quot;的间隔是取决于**RTT**，而RTT本身由于受网络路由、流量等影响，有极为复杂的测量算法(平滑算法、Karn算法、Jacbson算法)，并且这个重传超时间隔(RTO)。\">^1</a>:</strong> [1,3,6,12,24,48,64,64…]<br><img src=\"/img/mars-9.png\" alt=\"\"></li>\n<li><strong>Android:</strong> (OPPO手机数据，前部分更积极) [0.25,0.5,1,2,4,8,16,32,64,64,64…]<br><img src=\"/img/mars-10.png\" alt=\"\"></li>\n<li><strong>IOS:</strong> (前部分更积极，后部分也很积极) [1,1,1,2,4.5,9,13.5,26,26…]</li>\n</ul>\n<p>STN读写超时(多级超时方案)(应用层读写超设计):</p>\n<ul>\n<li><strong>目标:</strong> 高性能(体验与尽可能的提高成功率)、可用性(弱网)、敏感性(网络敏感性，快速发现新链路)</li>\n<li><strong>做法:</strong> 将原有连接断掉，重新选择IP与端口</li>\n<li><strong>作用:</strong> 减少无效的等待时间(因为重传间隔越来越大，断连重连，使TCP层保持积极重连间隔)，增加重试次数；切换链路，在较大波动/严重拥塞，通过更换连接（IP&amp;端口）获得更好的性能。</li>\n</ul>\n<p>STN读写超时具体多级超时方案:</p>\n<p><strong>总读写超时:</strong> 请求发出去到完整的服务器回包收完为止。= <code>发包大小/最低网速(主观 评估值)</code> + <code>服务器约定最大耗时(主观)</code> + <code>最大回包大小(由于无法事先获知回包大小(微信最大回包128KB))/最低网速(主观 评估值)</code> + <code>并发数 * 常量</code></p>\n<p>由于<strong>总读写超时</strong>太主观，并且是一个差网络下、完整的完成单次信令交互的时间估值，因此会显得过长，特别在网络波动或拥塞时，显示无法敏感的发现问题并重试，遂更具步骤进行拆分:</p>\n<ul>\n<li><strong>首包超时:</strong> 当发送数据大于MSS时，数据会被分段传输，分段到达接收端后重新组合发，因此这里将首个数据分段到达超时定义为首包超时 = <code>发包大小/最低网速(主观 评估值)</code> + <code>服务器约定最大耗时(主观)</code> + <code>并发数 * 常量</code></li>\n<li><strong>包包超时:</strong> 两个数据分段之间的超时时间，这个时候因为服务端已经处理完成，不需要再计算等待耗时、请求传输耗时、服务器处理耗时 = <code>发包大小/网速(客观 准确值)</code> + <code>并发数 * 常量</code></li>\n<li><strong>动态超时:</strong> 分析网络状态，当趋于稳定的时候就减少首包超时，此时如果网络波动时我们预期它能够快速恢复，所以尽快超时然后进行重试，从而改善用户体验<br><img src=\"/img/mars-11.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"II-XLog\"><a href=\"#II-XLog\" class=\"headerlink\" title=\"II. XLog\"></a>II. XLog</h2><blockquote>\n<p>高性能跨平台日志模块</p>\n</blockquote>\n<h3 id=\"1-所解决的问题\"><a href=\"#1-所解决的问题\" class=\"headerlink\" title=\"1. 所解决的问题\"></a>1. 所解决的问题</h3><blockquote>\n<p>性能 + 可靠性 + 安全</p>\n</blockquote>\n<ul>\n<li><strong>避免频繁GC:</strong> 由于Native的实现，有效避免了频繁写文件造成的频繁的GC</li>\n<li><strong>避免频繁IO与加密:</strong> 达到一定数量日志了再压缩，压缩完再加密</li>\n<li><strong>避免丢日志:</strong> 将日志写入mmap中，避免程序被系统杀死不会有事件通知</li>\n<li><strong>避免IO的耗时:</strong> 通过写mmap来达到写文件，其性能与直接操作内存相当</li>\n<li><strong>避免日志泄露:</strong> 在写入mmap之前就已经对每行日志进行压缩加密，并且采逐行压缩</li>\n<li><strong>避免CPU短暂飙高:</strong> 采用多条日志流式压缩（日志行数累计到一定大小作为一个压缩单元进行压缩），压缩算法性能较高，由于每个单元的日志并不多，可以把压缩时间分散在整个分散周期内，CPU曲线更平滑。</li>\n</ul>\n<h3 id=\"2-mmap\"><a href=\"#2-mmap\" class=\"headerlink\" title=\"2. mmap\"></a>2. mmap</h3><h4 id=\"2-1-写文件\"><a href=\"#2-1-写文件\" class=\"headerlink\" title=\"2.1 写文件\"></a>2.1 写文件</h4><blockquote>\n<p>写文件，系统是不会直接把数据写入磁盘，而是<strong>先把数据写入到系统缓存(dirty page)，再根据策略将dirty page写入磁盘</strong></p>\n</blockquote>\n<p>dirty page写入磁盘策略:</p>\n<ul>\n<li><strong>定时写回</strong>(相关变量在: <code>/proc/sys/vm/dirty_writeback_centisecs</code>、<code>/proc/sys/vm/dirty_expire_centisecs</code>)</li>\n<li><strong>dirty page的大小超过一定比例</strong>(调用write时检测，比例变量存储在<code>/proc/sys/vm/dirty_background_ratio</code>、<code>/proc/sys/vm/dirty_ratio</code>)</li>\n<li><strong>内存不足</strong></li>\n</ul>\n<p>程序 -&gt; 磁盘: <code>用户空间内存</code> -&gt; <code>内核空间缓存</code> -&gt; <code>硬盘</code> ，因此涉及用户空间与内核空间频繁切换。应用层不可控，出现瓶颈。</p>\n<h4 id=\"2-2-引入mmap的原因\"><a href=\"#2-2-引入mmap的原因\" class=\"headerlink\" title=\"2.2 引入mmap的原因:\"></a>2.2 引入mmap的原因:</h4><p><strong>综合频繁写文件会带来的瓶颈</strong>以及<strong>写入内存缓存带来的丢日志的问题</strong>(还有共享内存在Android 4.0以后便不再有权限使用)，更好的解决方案mmap</p>\n<h4 id=\"2-3-什么是mmap\"><a href=\"#2-3-什么是mmap\" class=\"headerlink\" title=\"2.3 什么是mmap?\"></a>2.3 什么是mmap?</h4><blockquote>\n<p>逻辑内存对磁盘文件进行映射（不再有拷贝）</p>\n</blockquote>\n<p>mmap带来的益处显而易见，<code>操作内存</code> = <code>操作文件</code>, 从而避免了 用户空间与内核空间频繁的切换，也正因为如此，我们只需要将日志写入mmap，就不会应用当前进程(/虚拟机)被杀导致日志丢失的问题。</p>\n<p><img src=\"/img/mars-12.png\" alt=\"\"></p>\n<h4 id=\"2-4-XLog中将mmap回写文件的策略\"><a href=\"#2-4-XLog中将mmap回写文件的策略\" class=\"headerlink\" title=\"2.4 XLog中将mmap回写文件的策略:\"></a>2.4 XLog中将mmap回写文件的策略:</h4><ul>\n<li>内存不足</li>\n<li>进程 crash</li>\n<li>调用 msync 或者 munmap</li>\n<li>不设置 MAP_NOSYNC 情况下 30s-60s(仅限FreeBSD)</li>\n</ul>\n<h3 id=\"3-压缩算法\"><a href=\"#3-压缩算法\" class=\"headerlink\" title=\"3. 压缩算法\"></a>3. 压缩算法</h3><blockquote>\n<p>该压缩方法只包含了LZ77中的<strong>短语式压缩</strong>，因为进一步的压缩(如自定义字典/huffman表)无法带来显著的效果，而只要提供控制好压缩单元的长度，仅仅<strong>短语式压缩</strong>就能带来<code>83.7%</code>的压缩率。<br>XLog 采用该算法，对根据策略累计了一定长度的日志进行压缩</p>\n</blockquote>\n<p>通过记录( 距离可复用字符串位置距离，复用字符串长度 ) 来代替可被压缩的字符串进行压缩:</p>\n<p><img src=\"/img/mars-13.png\" alt=\"\"></p>\n<ul>\n<li>最终没压缩的字符依然是ascci编码，因此最终的压缩结果都是一堆整数。</li>\n<li>滑动历史缓存窗口: 一般是32kb，因此只需要一定大小的压缩单元就可以达到很好的压缩率，<strong>并非</strong>大小越大的单元压缩率越大。</li>\n<li>采用分单元流式压缩，而非整个app生命周期内一起压缩，虽然耗时慢了许多但是由于耗时极小因此可以忽略，并且带来了很多好处：1. 个别的压缩错误影响面缩小到对应的单元； 2. 压缩时间分散在各个单元压缩时，因此CPU曲线更平滑</li>\n</ul>\n<hr>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;mid=2649286414&amp;idx=1&amp;sn=98d90d31c638f6b8bca2e3a2a7f0042a\" target=\"_blank\" rel=\"external\">微信Mars：客户端跨平台组件的开发经验</a></li>\n<li><a href=\"http://www.infoq.com/cn/presentations/wechat-mars-high-quality-network-connection\" target=\"_blank\" rel=\"external\">微信Mars——移动互联网下的高质量网络连接探索</a></li>\n<li><a href=\"http://mp.weixin.qq.com/s/cnhuEodJGIbdodh0IxNeXQ\" target=\"_blank\" rel=\"external\">微信终端跨平台组件 mars 系列（一） - 高性能日志模块xlog</a></li>\n<li><a href=\"http://www.mscbsc.com/cidian/word9m7\" target=\"_blank\" rel=\"external\">混合自动重传请求</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;mid=2649286449&amp;idx=1&amp;sn=aa2877e8506762253f291eb6d3e80a51\" target=\"_blank\" rel=\"external\">微信终端跨平台组件 mars 系列(二) - 信令传输超时设计</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>前几年在微信工作时，参加一些内部会议当时也有做了相关简要整理: <a href=\"http://blog.dreamtobe.cn/2015/03/28/Android网络学习笔记整理/\">Android网络</a>，前端时间也有总结了<a href=\"https://blog.dreamtobe.cn/2016/08/16/android_weak_network/\">微信的心跳机制</a>，今天主要是对已开源的Mars进行窥探。</p>\n<p>Mars是微信<a href=\"https://github.com/Tencent/mars\">已经开源</a>的小数据传输的解决方案。</p>\n</blockquote>","more":"<p>具体部分可以参考官方图片:</p>\n<p><img src=\"/img/mars-1.png\" alt=\"\"></p>\n<ul>\n<li>Commn: 网络组件</li>\n<li><strong>STN:</strong> 信令网络（小数据传输），Mars的主要部分</li>\n<li>SDT: 网络争端组件</li>\n<li>CDN: 数据网络（大数据传输）(<strong>由于耦合腾讯CDN服务，因此没有开源</strong>)</li>\n<li>XLOG: 日志组件</li>\n<li>终端质量平台</li>\n</ul>\n<h2 id=\"I-STN模块\"><a href=\"#I-STN模块\" class=\"headerlink\" title=\"I. STN模块\"></a>I. STN模块</h2><blockquote>\n<p>要求: 高可用、高性能、低负载、容灾性<br>架构: 稳定、简化</p>\n</blockquote>\n<p><img src=\"/img/mars-2.png\" alt=\"\"></p>\n<h3 id=\"1-对比\"><a href=\"#1-对比\" class=\"headerlink\" title=\"1. 对比\"></a>1. 对比</h3><blockquote>\n<p>相比 IOS AFNetworking、Android Retrofit, OkHttp</p>\n</blockquote>\n<ul>\n<li>跨平台</li>\n<li>Socket层(大多数其他的库都是http层)，是为了更深入的优化</li>\n<li>更适用于小数据传输，信令网络</li>\n</ul>\n<h3 id=\"2-特点\"><a href=\"#2-特点\" class=\"headerlink\" title=\"2. 特点:\"></a>2. 特点:</h3><ul>\n<li><strong>包含两种通道:</strong> 长连接(性能要求要的请求），短连接（普通一来一回的请求），对于上层业务而言只需要关注业务。</li>\n<li><strong>更适合做移动互联网组件:</strong> 前后台、活跃态、休眠、省电、省流量。DNS防劫持，负载，容灾。</li>\n<li><strong>更多:</strong> 数据监控(网络情况)，参数配置。</li>\n</ul>\n<h3 id=\"3-连接策略\"><a href=\"#3-连接策略\" class=\"headerlink\" title=\"3. 连接策略\"></a>3. 连接策略</h3><p><img src=\"/img/mars-3.png\" alt=\"\"></p>\n<h4 id=\"3-1-建立连接\"><a href=\"#3-1-建立连接\" class=\"headerlink\" title=\"3.1 建立连接:\"></a>3.1 建立连接:</h4><h5 id=\"连接超时情景\"><a href=\"#连接超时情景\" class=\"headerlink\" title=\"连接超时情景\"></a>连接超时情景</h5><ul>\n<li><strong>连不通:</strong> 无论如何都差不多</li>\n<li><strong>被劫持/服务器故障:</strong> 希望更快的返回，以便于更换ip端口快速查找可用资源。</li>\n<li><strong>弱网络，基站繁忙、连接信号弱，丢包率高:</strong> 希望超时更长些，延时高，丢包率高，等长一点，重试多些（由于换IP/端口无用）</li>\n</ul>\n<h5 id=\"连接超时考量点\"><a href=\"#连接超时考量点\" class=\"headerlink\" title=\"连接超时考量点\"></a>连接超时考量点</h5><p>可用性，网络敏感性，用户体验（&lt; 1min）</p>\n<h5 id=\"连接超时间隔策略\"><a href=\"#连接超时间隔策略\" class=\"headerlink\" title=\"连接超时间隔策略:\"></a>连接超时间隔策略:</h5><ul>\n<li><p><strong>Linux与Android:</strong> 指数递增(0,2,4,8,16)<br><img src=\"/img/mars-4.png\" alt=\"\"></p>\n</li>\n<li><p><strong>IOS:</strong> 优化后的指数递增(1,1,1,1,1,2,4,8,16)<br><img src=\"/img/mars-5.png\" alt=\"\"></p>\n</li>\n<li><strong>STN:</strong> 策略权衡相对适用于微信(可能有些应用需要更高的敏感性): 10s<br><img src=\"/img/mars-6.png\" alt=\"\"></li>\n</ul>\n<p>STN连接超时间隔10s的原因:</p>\n<ol>\n<li>占用重试频率比较高的间隔</li>\n<li>10s之后，Android需要经过5s才能发起下一次重试（需要相对长无效的等待时间）</li>\n</ol>\n<h5 id=\"STN连接效率策略\"><a href=\"#STN连接效率策略\" class=\"headerlink\" title=\"STN连接效率策略\"></a>STN连接效率策略</h5><blockquote>\n<p>快速找到有效可用的ip/端口资源</p>\n</blockquote>\n<p>常见策略:</p>\n<ul>\n<li><strong>串行连接:</strong> 资源占用少、无服务器负载问题、超时选择困难、最慢可用选择</li>\n<li><strong>并发连接:</strong> 网络资源竞争（复杂度、性能消耗）、服务器负责（成倍增加）、最快可用（提高效率）</li>\n</ul>\n<p>STN策略:</p>\n<ul>\n<li><strong>STN复合连接:</strong> 更快的找到可用并不增加服务器负载<br><img src=\"/img/mars-7.png\" alt=\"\"></li>\n</ul>\n<h5 id=\"建立连接其他优化\"><a href=\"#建立连接其他优化\" class=\"headerlink\" title=\"建立连接其他优化\"></a>建立连接其他优化</h5><p><img src=\"/img/mars-8.png\" alt=\"\"></p>\n<h4 id=\"3-2-维持连接\"><a href=\"#3-2-维持连接\" class=\"headerlink\" title=\"3.2 维持连接\"></a>3.2 维持连接</h4><h5 id=\"优化探究\"><a href=\"#优化探究\" class=\"headerlink\" title=\"优化探究\"></a>优化探究</h5><ul>\n<li>链路层: 需要在不可靠的物理设备的基础上，实现节点与节点间可靠的信息传输，一般使用混合自动重传请求(HARQ(Hybrid Automatic Repeat reQuest) = FEC(前馈式错误修正) +  ARQ(自动重传请求))，其能够使得前一个失败的尝试中存下有用资讯供之后的解码使用，这个需要手机与RNC都支持.</li>\n<li>传输层(TCP层）: 需要基于不可靠的链路做端与端之间每个TCP数据包的可靠传输，是通过超时和重传做到的，在发送数据时设定一个定时器，定时器溢出时还没有收到ACK，则重传该数据。</li>\n</ul>\n<p>作为应用层:</p>\n<ul>\n<li>更应该为用户体验考虑(尽可能提高成功率)</li>\n<li>保障弱网络下的可用性</li>\n<li>具有网络敏感性，快速的发现新链路</li>\n</ul>\n<h5 id=\"读写超时间隔策略\"><a href=\"#读写超时间隔策略\" class=\"headerlink\" title=\"读写超时间隔策略\"></a>读写超时间隔策略</h5><blockquote>\n<p>TCP确认失败: Android系统16min, IOS系统1min~3.5min</p>\n</blockquote>\n<ul>\n<li><strong>UNIX的指数退避<a href=\"Unix中的&quot;指数退避&quot;的间隔是取决于**RTT**，而RTT本身由于受网络路由、流量等影响，有极为复杂的测量算法(平滑算法、Karn算法、Jacbson算法)，并且这个重传超时间隔(RTO)。\">^1</a>:</strong> [1,3,6,12,24,48,64,64…]<br><img src=\"/img/mars-9.png\" alt=\"\"></li>\n<li><strong>Android:</strong> (OPPO手机数据，前部分更积极) [0.25,0.5,1,2,4,8,16,32,64,64,64…]<br><img src=\"/img/mars-10.png\" alt=\"\"></li>\n<li><strong>IOS:</strong> (前部分更积极，后部分也很积极) [1,1,1,2,4.5,9,13.5,26,26…]</li>\n</ul>\n<p>STN读写超时(多级超时方案)(应用层读写超设计):</p>\n<ul>\n<li><strong>目标:</strong> 高性能(体验与尽可能的提高成功率)、可用性(弱网)、敏感性(网络敏感性，快速发现新链路)</li>\n<li><strong>做法:</strong> 将原有连接断掉，重新选择IP与端口</li>\n<li><strong>作用:</strong> 减少无效的等待时间(因为重传间隔越来越大，断连重连，使TCP层保持积极重连间隔)，增加重试次数；切换链路，在较大波动/严重拥塞，通过更换连接（IP&amp;端口）获得更好的性能。</li>\n</ul>\n<p>STN读写超时具体多级超时方案:</p>\n<p><strong>总读写超时:</strong> 请求发出去到完整的服务器回包收完为止。= <code>发包大小/最低网速(主观 评估值)</code> + <code>服务器约定最大耗时(主观)</code> + <code>最大回包大小(由于无法事先获知回包大小(微信最大回包128KB))/最低网速(主观 评估值)</code> + <code>并发数 * 常量</code></p>\n<p>由于<strong>总读写超时</strong>太主观，并且是一个差网络下、完整的完成单次信令交互的时间估值，因此会显得过长，特别在网络波动或拥塞时，显示无法敏感的发现问题并重试，遂更具步骤进行拆分:</p>\n<ul>\n<li><strong>首包超时:</strong> 当发送数据大于MSS时，数据会被分段传输，分段到达接收端后重新组合发，因此这里将首个数据分段到达超时定义为首包超时 = <code>发包大小/最低网速(主观 评估值)</code> + <code>服务器约定最大耗时(主观)</code> + <code>并发数 * 常量</code></li>\n<li><strong>包包超时:</strong> 两个数据分段之间的超时时间，这个时候因为服务端已经处理完成，不需要再计算等待耗时、请求传输耗时、服务器处理耗时 = <code>发包大小/网速(客观 准确值)</code> + <code>并发数 * 常量</code></li>\n<li><strong>动态超时:</strong> 分析网络状态，当趋于稳定的时候就减少首包超时，此时如果网络波动时我们预期它能够快速恢复，所以尽快超时然后进行重试，从而改善用户体验<br><img src=\"/img/mars-11.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"II-XLog\"><a href=\"#II-XLog\" class=\"headerlink\" title=\"II. XLog\"></a>II. XLog</h2><blockquote>\n<p>高性能跨平台日志模块</p>\n</blockquote>\n<h3 id=\"1-所解决的问题\"><a href=\"#1-所解决的问题\" class=\"headerlink\" title=\"1. 所解决的问题\"></a>1. 所解决的问题</h3><blockquote>\n<p>性能 + 可靠性 + 安全</p>\n</blockquote>\n<ul>\n<li><strong>避免频繁GC:</strong> 由于Native的实现，有效避免了频繁写文件造成的频繁的GC</li>\n<li><strong>避免频繁IO与加密:</strong> 达到一定数量日志了再压缩，压缩完再加密</li>\n<li><strong>避免丢日志:</strong> 将日志写入mmap中，避免程序被系统杀死不会有事件通知</li>\n<li><strong>避免IO的耗时:</strong> 通过写mmap来达到写文件，其性能与直接操作内存相当</li>\n<li><strong>避免日志泄露:</strong> 在写入mmap之前就已经对每行日志进行压缩加密，并且采逐行压缩</li>\n<li><strong>避免CPU短暂飙高:</strong> 采用多条日志流式压缩（日志行数累计到一定大小作为一个压缩单元进行压缩），压缩算法性能较高，由于每个单元的日志并不多，可以把压缩时间分散在整个分散周期内，CPU曲线更平滑。</li>\n</ul>\n<h3 id=\"2-mmap\"><a href=\"#2-mmap\" class=\"headerlink\" title=\"2. mmap\"></a>2. mmap</h3><h4 id=\"2-1-写文件\"><a href=\"#2-1-写文件\" class=\"headerlink\" title=\"2.1 写文件\"></a>2.1 写文件</h4><blockquote>\n<p>写文件，系统是不会直接把数据写入磁盘，而是<strong>先把数据写入到系统缓存(dirty page)，再根据策略将dirty page写入磁盘</strong></p>\n</blockquote>\n<p>dirty page写入磁盘策略:</p>\n<ul>\n<li><strong>定时写回</strong>(相关变量在: <code>/proc/sys/vm/dirty_writeback_centisecs</code>、<code>/proc/sys/vm/dirty_expire_centisecs</code>)</li>\n<li><strong>dirty page的大小超过一定比例</strong>(调用write时检测，比例变量存储在<code>/proc/sys/vm/dirty_background_ratio</code>、<code>/proc/sys/vm/dirty_ratio</code>)</li>\n<li><strong>内存不足</strong></li>\n</ul>\n<p>程序 -&gt; 磁盘: <code>用户空间内存</code> -&gt; <code>内核空间缓存</code> -&gt; <code>硬盘</code> ，因此涉及用户空间与内核空间频繁切换。应用层不可控，出现瓶颈。</p>\n<h4 id=\"2-2-引入mmap的原因\"><a href=\"#2-2-引入mmap的原因\" class=\"headerlink\" title=\"2.2 引入mmap的原因:\"></a>2.2 引入mmap的原因:</h4><p><strong>综合频繁写文件会带来的瓶颈</strong>以及<strong>写入内存缓存带来的丢日志的问题</strong>(还有共享内存在Android 4.0以后便不再有权限使用)，更好的解决方案mmap</p>\n<h4 id=\"2-3-什么是mmap\"><a href=\"#2-3-什么是mmap\" class=\"headerlink\" title=\"2.3 什么是mmap?\"></a>2.3 什么是mmap?</h4><blockquote>\n<p>逻辑内存对磁盘文件进行映射（不再有拷贝）</p>\n</blockquote>\n<p>mmap带来的益处显而易见，<code>操作内存</code> = <code>操作文件</code>, 从而避免了 用户空间与内核空间频繁的切换，也正因为如此，我们只需要将日志写入mmap，就不会应用当前进程(/虚拟机)被杀导致日志丢失的问题。</p>\n<p><img src=\"/img/mars-12.png\" alt=\"\"></p>\n<h4 id=\"2-4-XLog中将mmap回写文件的策略\"><a href=\"#2-4-XLog中将mmap回写文件的策略\" class=\"headerlink\" title=\"2.4 XLog中将mmap回写文件的策略:\"></a>2.4 XLog中将mmap回写文件的策略:</h4><ul>\n<li>内存不足</li>\n<li>进程 crash</li>\n<li>调用 msync 或者 munmap</li>\n<li>不设置 MAP_NOSYNC 情况下 30s-60s(仅限FreeBSD)</li>\n</ul>\n<h3 id=\"3-压缩算法\"><a href=\"#3-压缩算法\" class=\"headerlink\" title=\"3. 压缩算法\"></a>3. 压缩算法</h3><blockquote>\n<p>该压缩方法只包含了LZ77中的<strong>短语式压缩</strong>，因为进一步的压缩(如自定义字典/huffman表)无法带来显著的效果，而只要提供控制好压缩单元的长度，仅仅<strong>短语式压缩</strong>就能带来<code>83.7%</code>的压缩率。<br>XLog 采用该算法，对根据策略累计了一定长度的日志进行压缩</p>\n</blockquote>\n<p>通过记录( 距离可复用字符串位置距离，复用字符串长度 ) 来代替可被压缩的字符串进行压缩:</p>\n<p><img src=\"/img/mars-13.png\" alt=\"\"></p>\n<ul>\n<li>最终没压缩的字符依然是ascci编码，因此最终的压缩结果都是一堆整数。</li>\n<li>滑动历史缓存窗口: 一般是32kb，因此只需要一定大小的压缩单元就可以达到很好的压缩率，<strong>并非</strong>大小越大的单元压缩率越大。</li>\n<li>采用分单元流式压缩，而非整个app生命周期内一起压缩，虽然耗时慢了许多但是由于耗时极小因此可以忽略，并且带来了很多好处：1. 个别的压缩错误影响面缩小到对应的单元； 2. 压缩时间分散在各个单元压缩时，因此CPU曲线更平滑</li>\n</ul>\n<hr>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;mid=2649286414&amp;idx=1&amp;sn=98d90d31c638f6b8bca2e3a2a7f0042a\">微信Mars：客户端跨平台组件的开发经验</a></li>\n<li><a href=\"http://www.infoq.com/cn/presentations/wechat-mars-high-quality-network-connection\">微信Mars——移动互联网下的高质量网络连接探索</a></li>\n<li><a href=\"http://mp.weixin.qq.com/s/cnhuEodJGIbdodh0IxNeXQ\">微信终端跨平台组件 mars 系列（一） - 高性能日志模块xlog</a></li>\n<li><a href=\"http://www.mscbsc.com/cidian/word9m7\">混合自动重传请求</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;mid=2649286449&amp;idx=1&amp;sn=aa2877e8506762253f291eb6d3e80a51\">微信终端跨平台组件 mars 系列(二) - 信令传输超时设计</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"Notification最佳实践","date":"2016-10-25T07:06:03.000Z","_content":"\n## I. 原则\n\n### 1. 别干扰你的用户\n\n```\n// 之所以用NotifcationCompat，因为这个可以直接兼容到API4\nnew NotificationCompat.Builder(this)\n    .setSmallIcon(...)\n    .setContentTitle(senderName)\n    .setContentText(msgText)\n    .setCategory(\n        // CATEGORY_ALARM(alarms or timers), REMINDER(user requested reminder),EVENT,MESSAGE,CALL,EMAIL,SOCIAL,RECOMMENDATION(TV?)\n    )\n    .build();\n```\n\n<!-- more -->\n\n### 2. 尊重你的用户\n\n![](/img/notification_best_practise-1.png)\n\n```\n// MAX(time-critical tasks, incoming calls, turn-by-turn directions)\n// HIGH(important communications, chats, texts, important emails)\n// LOW(not time sensitive, social broadcasts)\n// MIN(contextual or background infomation, recommendations wechther), not show when locked screen\n// setPriority\nNotificationCompat.PRIORITY_\n```\n\n#### 同id的notification, 声音、振动、ticker 仅第一次\n```java\nNotificationCompat.Builder builder =\n    new NotificationCompat.Builder(c)\n        // Set this flag if you would only like the sound, vibrate and ticker to be played if the notification is not already showing.\n        .setOnlyAlertOnce(true)\n        .setProgress(100, 50, false);\n```\n\n#### notification一段时间后自动干掉\n\n> 好吧。只是用了alarm service\n\n```\nctxt.getSystemService(Context.ALARM_SERVICE)\n    .set(AlarmManager.ELAPSED_REALTIME,\n        SystemClock.elapsedRealtime() + ONE_HOUR,\n        makeCancelAllPendingIntent(ctxt));\n```\n\n#### Peak显示\n\n条件: PRIORITY_HIGH && (sound || vibration)\n\n### 3. 授权你的用户便于设置\n\n> 长按通知以后进入自定义设置页面\n\n```\n<activity android:name=\"SettingsActivity\"\n        android:label=\"@string/app_name\">\n    <intent-filter>\n        <action android:name=\"android.intent.action.MAIN\" />\n        <category android:name=\n            \"android.intent.category.DEFAULT\" />\n        <category android:anme=\n            \"android.intent.category.NOTIFICATION_PREFERENCES\" />\n    </intent-filter>\n</activity>\n```\n\n作者顺便推广了一把通过`PreferenceFragment`与`Preference xml`很简单就实现一个设置页面.\n\n#### 添加尽可能的交互在Notification上\n\n```\nnew NotificationCompat.Builder(this)\n    .setSamllIcon(...)\n    .setContentTitle(title)\n    .setContentText(text)\n    .addAction(R.drawable.ic_answer,\n        getString(R.string.call_answer),\n        answerPendingIntent)\n    .addAction(R.drawable.ic_ignore,\n        getString(R.string.call_ignore),\n        ignorePendingIntent)\n    .build();\n```\n\n![](/img/notification_best_practise-2.png)\n\n```\nnew Notification.Builder(this)\n    .setSmallIcon(...)\n    .setContentTitle(title)\n    .setContentText(text)\n    // started in Jelly Bean\n    .setStyle(\n        new Notification.BigPictureStyle()\n        .bigPicture(photoBitmap))\n    .build();\n\n    // rich text?\n    .setStyle(\n        new Notification.BigTextStyle()\n            .bigText(longText))\n    .build();\n```\n\n多端同步，如果一端的notification被干掉，同步到其他端也将其干掉。\n\n\n#### onGoing Notification\n\n> 用户无法划掉\n\n- startForeground()\n- incoming calls\n- prefer snooze-and-repost pattern\n\n需要给用户可以划掉/干掉的机会\n\n如：音乐播放器在播放的时候无法划掉，在暂停/停止的时候，允许用户划掉(改优先级)(Google Music目前的做法)\n如: SSH/VPN连接在连接上的时候无法划掉，但是提供Action断开链接就自动干掉\n\n### 4. 取悦你的用户\n\n两种用户:\n\n- 从来都不开声音，要不只开振动\n- 始终都开通知声音，并且喜欢去设置声音类型针对不同的应用\n\n#### 设置通知声音\n\n```\n<RingtonePreference\n    android:persistent=\"true\"\n    android:key=\"sms_sound\"\n    android:denpendency=\"sms_enable\"\n    android:ringtoneType=\"notification\"\n    android:title=\"@string/sms_sound\" />\n```\n\n```\nSharedPreferences prefs = PreferenceManager\n    .getDefaultSharedPreferences(context);\nString url = prefs.getString(SOUND, null);\nif(uri != null){\n    builder.setSound(Uri.parse(uri));\n}\n```\n\n### 5. Connect them to the people they love\n\n系统提供指定联系人（星标） ，其余联系人不打扰的模式，因此我们可以在不请求获取联系人权限的情况下通过以下的方式进行对通知绑定\n\n```\nnew Notification.Builder(this)\n    .setSmallIcon(...)\n    .setLargeIcon(...)\n    .setContentTilte(senderName)\n    .setContentText(msgText)\n    .addAction(...)\n    // email\n    .addPerson(Uri.fromParts(\"mailto\",\n        \"igzhenjie@gmail.com\", null)\n        .toString())\n    .build();\n\n    // tel\n    .addPerson(Uri.fromParts(\"tel\",\n        \"1(617) 555-1212\", null)\n        .toString())\n```\n\n## II. 技巧\n\n### 1. 直接回复\n\n在Notification的Action上面直接回复消息\n\n![](/img/notification_best_practise-direct-reply.png)\n\n```java\nprivate static final String KEY_TEXT_REPLY = \"key_text_reply\";\n\n// 1. 创建一个RemoteInput来处理这个输入Action\nString replyLabel = getString(R.string.reply_label);\nRemoteInput remoteInput = new RemoteInput.Builder(KEY_TEXT_REPLY)\n        .setLabel(replyLabel) // 设置默认显示的hint\n        .build();\n\n// 2. 添加RemoteInput到Notification上，并且使其生效\nNotificationCompat.Action action =\n    // 由于在Android M或更低版本的设备不支持直接回复，因此在这些设备上这里的pendingIntent的Action必须是Activity\n    // 在Android N或者更高版本的设备支持直接回复，因此在这些设备上这里的pendingIntent的Action应该是Service或者是BroadcastReceiver用于处理消息\n    new NotificationCompat.Action.Builder(R.drawable.reply, replyLabel, pendingIntent)\n        .addRemoteInput(remoteInput)\n        .setAllowGeneratedReplies(true) //允许在Android Wear 2.0上生成Smart Reply\n        .build();\n\n// 3. 获取在Notification上输入的信息\nprivate CharSequence getMessageText(Intent intent) {\n    Bundle remoteInput = RemoteInput.getResultsFromIntent(intent);\n    if (remoteInput != null) {\n        return remoteInput.getCharSequence(KEY_TEXT_REPLY);\n    }\n    return null;\n }\n\n// 4. 在处理完输入内容（如已经发送出去），之后必须使用创建相同的id与tag(如果有设置的话)的Notification对象，\n//并调用notify()方法, 以刷新Notification上的事件，告知用于输入的内容已经完成处理。\nnotification.notify();\n```\n\n### 2. 使用`MessagingStyle`\n\n在一个Notification上显示多条消息。\n\n![](/img/notification_best_practise-message-style.png)\n\n```java\n// 这里的\"You\"是设置我的消息的时候，显示的昵称。这个昵称会以特殊的颜色显示，通常是\n//结合Notification上的直接回复组件使用的，比如回复还没有完成处理之前，这条消息就会以You发送\n//的样式显示在Notification上\nbuilder.setStyle(new NotificationCompat.MessagingStyle(\"You\")\n    //.setConversationTitle(\"Team lunch\") // 可以考虑设置一个标题，这个标题会以BigTextStyle的风格显示在Notification上\n    .addMessage(\"Hi\", timestampMillis1, \"Adrian\") // Adrian 在timestampMillis1的时候发过来一条消息\n    .addMessage(\"Ready fro lunch?\", timestampMillis2, \"Adrian\")\n    .addMessage(\"Sure!\", timestampMillis3, null) // 我 在timestampMillis3的时候回了一条消息\n    .addMessage(\"I'll meet you downstairs\", timestampMillis4, null));\n```\n\n需要注意的是，在Android N之前的设备，对`MessagingStyle`是不兼容的，因此如果使用`MessagingStyle`，需要对Android N之前的设备进行单独处理。\n\n### 3. Bundled Notification\n\n将多个相同性质的Notification打包成一个Notification，并且在用户需要的时候可以展开看到每个单独的Notification。\n\n![](/img/notification_best_practise-bundled.png)\n\n- Group中的Notification个数没有限制。\n- 对于某一个独立的Notification，只需要通过`setGroup()`方法就可以将其打包到Group Message中。\n- 通过`setGroupSummary(true)`指定折叠起来的时候所显示的Notification，在Android M或更低版本的设备上默认只显示这个Notification。\n\n## III. 其他\n\n- 当Target Api指向25的时候，默认情况下Notification上面的Notification更新时间会被隐藏，如果需要显示，需要显式的调用`setShowWhen(true)`。\n- 在Android N的设备上，如果同一个应用Notification的个数大于等于4个并且没有Group，就会自动将其Bundled。\n\n---\n\n- 文章创建时间: 2016-1-9，[本文迭代日志](https://github.com/Jacksgong/Blog/commits/master/source/_posts/notification_best_practise.md)。\n\n---\n\n- [Respecting User Attention: Notification Best Practices (Android Dev Summit 2015)](https://www.youtube.com/watch?v=WzRSpZpw2wg)\n- [Notification-Showcase-Example](https://goo.gl/NfwEiY)\n- [Notifications in Android N](http://android-developers.blogspot.com/2016/06/notifications-in-android-n.html#directreply?utm_campaign=android_series_notificationsblogpost_062116&utm_source=anddev&utm_medium=yt-desc)\n- [NotificationCompat.MessagingStyle](https://developer.android.com/reference/android/support/v4/app/NotificationCompat.MessagingStyle.html#NotificationCompat.MessagingStyle(java.lang.CharSequence))\n- [Nougat-Messaging Style Notifications](https://blog.stylingandroid.com/nougat-messaging-style-notifications/)\n- [Nougat-Direct Replay](https://blog.stylingandroid.com/nougat-direct-reply/)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/notification_best_practise.md","raw":"title: Notification最佳实践\ndate: 2016-10-25 15:06:03\npermalink: 2016/01/09/notification_best_practise\ntags:\n- Notification\n- 最佳实践\n- MessagingStyle\n- Bundled Notification\n- Direct Reply\n\n---\n\n## I. 原则\n\n### 1. 别干扰你的用户\n\n```\n// 之所以用NotifcationCompat，因为这个可以直接兼容到API4\nnew NotificationCompat.Builder(this)\n    .setSmallIcon(...)\n    .setContentTitle(senderName)\n    .setContentText(msgText)\n    .setCategory(\n        // CATEGORY_ALARM(alarms or timers), REMINDER(user requested reminder),EVENT,MESSAGE,CALL,EMAIL,SOCIAL,RECOMMENDATION(TV?)\n    )\n    .build();\n```\n\n<!-- more -->\n\n### 2. 尊重你的用户\n\n![](/img/notification_best_practise-1.png)\n\n```\n// MAX(time-critical tasks, incoming calls, turn-by-turn directions)\n// HIGH(important communications, chats, texts, important emails)\n// LOW(not time sensitive, social broadcasts)\n// MIN(contextual or background infomation, recommendations wechther), not show when locked screen\n// setPriority\nNotificationCompat.PRIORITY_\n```\n\n#### 同id的notification, 声音、振动、ticker 仅第一次\n```java\nNotificationCompat.Builder builder =\n    new NotificationCompat.Builder(c)\n        // Set this flag if you would only like the sound, vibrate and ticker to be played if the notification is not already showing.\n        .setOnlyAlertOnce(true)\n        .setProgress(100, 50, false);\n```\n\n#### notification一段时间后自动干掉\n\n> 好吧。只是用了alarm service\n\n```\nctxt.getSystemService(Context.ALARM_SERVICE)\n    .set(AlarmManager.ELAPSED_REALTIME,\n        SystemClock.elapsedRealtime() + ONE_HOUR,\n        makeCancelAllPendingIntent(ctxt));\n```\n\n#### Peak显示\n\n条件: PRIORITY_HIGH && (sound || vibration)\n\n### 3. 授权你的用户便于设置\n\n> 长按通知以后进入自定义设置页面\n\n```\n<activity android:name=\"SettingsActivity\"\n        android:label=\"@string/app_name\">\n    <intent-filter>\n        <action android:name=\"android.intent.action.MAIN\" />\n        <category android:name=\n            \"android.intent.category.DEFAULT\" />\n        <category android:anme=\n            \"android.intent.category.NOTIFICATION_PREFERENCES\" />\n    </intent-filter>\n</activity>\n```\n\n作者顺便推广了一把通过`PreferenceFragment`与`Preference xml`很简单就实现一个设置页面.\n\n#### 添加尽可能的交互在Notification上\n\n```\nnew NotificationCompat.Builder(this)\n    .setSamllIcon(...)\n    .setContentTitle(title)\n    .setContentText(text)\n    .addAction(R.drawable.ic_answer,\n        getString(R.string.call_answer),\n        answerPendingIntent)\n    .addAction(R.drawable.ic_ignore,\n        getString(R.string.call_ignore),\n        ignorePendingIntent)\n    .build();\n```\n\n![](/img/notification_best_practise-2.png)\n\n```\nnew Notification.Builder(this)\n    .setSmallIcon(...)\n    .setContentTitle(title)\n    .setContentText(text)\n    // started in Jelly Bean\n    .setStyle(\n        new Notification.BigPictureStyle()\n        .bigPicture(photoBitmap))\n    .build();\n\n    // rich text?\n    .setStyle(\n        new Notification.BigTextStyle()\n            .bigText(longText))\n    .build();\n```\n\n多端同步，如果一端的notification被干掉，同步到其他端也将其干掉。\n\n\n#### onGoing Notification\n\n> 用户无法划掉\n\n- startForeground()\n- incoming calls\n- prefer snooze-and-repost pattern\n\n需要给用户可以划掉/干掉的机会\n\n如：音乐播放器在播放的时候无法划掉，在暂停/停止的时候，允许用户划掉(改优先级)(Google Music目前的做法)\n如: SSH/VPN连接在连接上的时候无法划掉，但是提供Action断开链接就自动干掉\n\n### 4. 取悦你的用户\n\n两种用户:\n\n- 从来都不开声音，要不只开振动\n- 始终都开通知声音，并且喜欢去设置声音类型针对不同的应用\n\n#### 设置通知声音\n\n```\n<RingtonePreference\n    android:persistent=\"true\"\n    android:key=\"sms_sound\"\n    android:denpendency=\"sms_enable\"\n    android:ringtoneType=\"notification\"\n    android:title=\"@string/sms_sound\" />\n```\n\n```\nSharedPreferences prefs = PreferenceManager\n    .getDefaultSharedPreferences(context);\nString url = prefs.getString(SOUND, null);\nif(uri != null){\n    builder.setSound(Uri.parse(uri));\n}\n```\n\n### 5. Connect them to the people they love\n\n系统提供指定联系人（星标） ，其余联系人不打扰的模式，因此我们可以在不请求获取联系人权限的情况下通过以下的方式进行对通知绑定\n\n```\nnew Notification.Builder(this)\n    .setSmallIcon(...)\n    .setLargeIcon(...)\n    .setContentTilte(senderName)\n    .setContentText(msgText)\n    .addAction(...)\n    // email\n    .addPerson(Uri.fromParts(\"mailto\",\n        \"igzhenjie@gmail.com\", null)\n        .toString())\n    .build();\n\n    // tel\n    .addPerson(Uri.fromParts(\"tel\",\n        \"1(617) 555-1212\", null)\n        .toString())\n```\n\n## II. 技巧\n\n### 1. 直接回复\n\n在Notification的Action上面直接回复消息\n\n![](/img/notification_best_practise-direct-reply.png)\n\n```java\nprivate static final String KEY_TEXT_REPLY = \"key_text_reply\";\n\n// 1. 创建一个RemoteInput来处理这个输入Action\nString replyLabel = getString(R.string.reply_label);\nRemoteInput remoteInput = new RemoteInput.Builder(KEY_TEXT_REPLY)\n        .setLabel(replyLabel) // 设置默认显示的hint\n        .build();\n\n// 2. 添加RemoteInput到Notification上，并且使其生效\nNotificationCompat.Action action =\n    // 由于在Android M或更低版本的设备不支持直接回复，因此在这些设备上这里的pendingIntent的Action必须是Activity\n    // 在Android N或者更高版本的设备支持直接回复，因此在这些设备上这里的pendingIntent的Action应该是Service或者是BroadcastReceiver用于处理消息\n    new NotificationCompat.Action.Builder(R.drawable.reply, replyLabel, pendingIntent)\n        .addRemoteInput(remoteInput)\n        .setAllowGeneratedReplies(true) //允许在Android Wear 2.0上生成Smart Reply\n        .build();\n\n// 3. 获取在Notification上输入的信息\nprivate CharSequence getMessageText(Intent intent) {\n    Bundle remoteInput = RemoteInput.getResultsFromIntent(intent);\n    if (remoteInput != null) {\n        return remoteInput.getCharSequence(KEY_TEXT_REPLY);\n    }\n    return null;\n }\n\n// 4. 在处理完输入内容（如已经发送出去），之后必须使用创建相同的id与tag(如果有设置的话)的Notification对象，\n//并调用notify()方法, 以刷新Notification上的事件，告知用于输入的内容已经完成处理。\nnotification.notify();\n```\n\n### 2. 使用`MessagingStyle`\n\n在一个Notification上显示多条消息。\n\n![](/img/notification_best_practise-message-style.png)\n\n```java\n// 这里的\"You\"是设置我的消息的时候，显示的昵称。这个昵称会以特殊的颜色显示，通常是\n//结合Notification上的直接回复组件使用的，比如回复还没有完成处理之前，这条消息就会以You发送\n//的样式显示在Notification上\nbuilder.setStyle(new NotificationCompat.MessagingStyle(\"You\")\n    //.setConversationTitle(\"Team lunch\") // 可以考虑设置一个标题，这个标题会以BigTextStyle的风格显示在Notification上\n    .addMessage(\"Hi\", timestampMillis1, \"Adrian\") // Adrian 在timestampMillis1的时候发过来一条消息\n    .addMessage(\"Ready fro lunch?\", timestampMillis2, \"Adrian\")\n    .addMessage(\"Sure!\", timestampMillis3, null) // 我 在timestampMillis3的时候回了一条消息\n    .addMessage(\"I'll meet you downstairs\", timestampMillis4, null));\n```\n\n需要注意的是，在Android N之前的设备，对`MessagingStyle`是不兼容的，因此如果使用`MessagingStyle`，需要对Android N之前的设备进行单独处理。\n\n### 3. Bundled Notification\n\n将多个相同性质的Notification打包成一个Notification，并且在用户需要的时候可以展开看到每个单独的Notification。\n\n![](/img/notification_best_practise-bundled.png)\n\n- Group中的Notification个数没有限制。\n- 对于某一个独立的Notification，只需要通过`setGroup()`方法就可以将其打包到Group Message中。\n- 通过`setGroupSummary(true)`指定折叠起来的时候所显示的Notification，在Android M或更低版本的设备上默认只显示这个Notification。\n\n## III. 其他\n\n- 当Target Api指向25的时候，默认情况下Notification上面的Notification更新时间会被隐藏，如果需要显示，需要显式的调用`setShowWhen(true)`。\n- 在Android N的设备上，如果同一个应用Notification的个数大于等于4个并且没有Group，就会自动将其Bundled。\n\n---\n\n- 文章创建时间: 2016-1-9，[本文迭代日志](https://github.com/Jacksgong/Blog/commits/master/source/_posts/notification_best_practise.md)。\n\n---\n\n- [Respecting User Attention: Notification Best Practices (Android Dev Summit 2015)](https://www.youtube.com/watch?v=WzRSpZpw2wg)\n- [Notification-Showcase-Example](https://goo.gl/NfwEiY)\n- [Notifications in Android N](http://android-developers.blogspot.com/2016/06/notifications-in-android-n.html#directreply?utm_campaign=android_series_notificationsblogpost_062116&utm_source=anddev&utm_medium=yt-desc)\n- [NotificationCompat.MessagingStyle](https://developer.android.com/reference/android/support/v4/app/NotificationCompat.MessagingStyle.html#NotificationCompat.MessagingStyle(java.lang.CharSequence))\n- [Nougat-Messaging Style Notifications](https://blog.stylingandroid.com/nougat-messaging-style-notifications/)\n- [Nougat-Direct Replay](https://blog.stylingandroid.com/nougat-direct-reply/)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2016/01/09/notification_best_practise","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66j9003g95bu68iabou6","content":"<h2 id=\"I-原则\"><a href=\"#I-原则\" class=\"headerlink\" title=\"I. 原则\"></a>I. 原则</h2><h3 id=\"1-别干扰你的用户\"><a href=\"#1-别干扰你的用户\" class=\"headerlink\" title=\"1. 别干扰你的用户\"></a>1. 别干扰你的用户</h3><figure class=\"highlight pony\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 之所以用NotifcationCompat，因为这个可以直接兼容到API4</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">new</span> <span class=\"title\">NotificationCompat</span>.<span class=\"title\">Builder</span>(this)</span></div><div class=\"line\">    .<span class=\"title\">setSmallIcon</span>(...)</div><div class=\"line\">    .<span class=\"title\">setContentTitle</span>(senderName)</div><div class=\"line\">    .<span class=\"title\">setContentText</span>(msgText)</div><div class=\"line\">    .<span class=\"title\">setCategory</span>(</div><div class=\"line\">        // <span class=\"type\">CATEGORY_ALARM</span>(alarms or timers), <span class=\"title\">REMINDER</span>(user requested reminder),<span class=\"title\">EVENT</span>,<span class=\"title\">MESSAGE</span>,<span class=\"title\">CALL</span>,<span class=\"title\">EMAIL</span>,<span class=\"title\">SOCIAL</span>,<span class=\"title\">RECOMMENDATION</span>(<span class=\"type\">TV</span>?)</div><div class=\"line\">    )</div><div class=\"line\">    .<span class=\"title\">build</span>();</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"2-尊重你的用户\"><a href=\"#2-尊重你的用户\" class=\"headerlink\" title=\"2. 尊重你的用户\"></a>2. 尊重你的用户</h3><p><img src=\"/img/notification_best_practise-1.png\" alt=\"\"></p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">// <span class=\"built_in\">MAX</span>(<span class=\"built_in\">time</span>-critical tasks, incoming calls, turn-by-turn directions)</div><div class=\"line\">// HIGH(important communications, chats, texts, important emails)</div><div class=\"line\">// LOW(<span class=\"built_in\">not</span> <span class=\"built_in\">time</span> sensitive, social broadcasts)</div><div class=\"line\">// <span class=\"built_in\">MIN</span>(contextual <span class=\"built_in\">or</span> background infomation, recommendations wechther), <span class=\"built_in\">not</span> show when locked screen</div><div class=\"line\">// setPriority</div><div class=\"line\">NotificationCompat.PRIORITY_</div></pre></td></tr></table></figure>\n<h4 id=\"同id的notification-声音、振动、ticker-仅第一次\"><a href=\"#同id的notification-声音、振动、ticker-仅第一次\" class=\"headerlink\" title=\"同id的notification, 声音、振动、ticker 仅第一次\"></a>同id的notification, 声音、振动、ticker 仅第一次</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">NotificationCompat.Builder builder =</div><div class=\"line\">    <span class=\"keyword\">new</span> NotificationCompat.Builder(c)</div><div class=\"line\">        <span class=\"comment\">// Set this flag if you would only like the sound, vibrate and ticker to be played if the notification is not already showing.</span></div><div class=\"line\">        .setOnlyAlertOnce(<span class=\"keyword\">true</span>)</div><div class=\"line\">        .setProgress(<span class=\"number\">100</span>, <span class=\"number\">50</span>, <span class=\"keyword\">false</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"notification一段时间后自动干掉\"><a href=\"#notification一段时间后自动干掉\" class=\"headerlink\" title=\"notification一段时间后自动干掉\"></a>notification一段时间后自动干掉</h4><blockquote>\n<p>好吧。只是用了alarm service</p>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">ctxt</span><span class=\"selector-class\">.getSystemService</span>(<span class=\"selector-tag\">Context</span><span class=\"selector-class\">.ALARM_SERVICE</span>)</div><div class=\"line\">    <span class=\"selector-class\">.set</span>(<span class=\"selector-tag\">AlarmManager</span><span class=\"selector-class\">.ELAPSED_REALTIME</span>,</div><div class=\"line\">        <span class=\"selector-tag\">SystemClock</span><span class=\"selector-class\">.elapsedRealtime</span>() + <span class=\"selector-tag\">ONE_HOUR</span>,</div><div class=\"line\">        <span class=\"selector-tag\">makeCancelAllPendingIntent</span>(<span class=\"selector-tag\">ctxt</span>));</div></pre></td></tr></table></figure>\n<h4 id=\"Peak显示\"><a href=\"#Peak显示\" class=\"headerlink\" title=\"Peak显示\"></a>Peak显示</h4><p>条件: PRIORITY_HIGH &amp;&amp; (sound || vibration)</p>\n<h3 id=\"3-授权你的用户便于设置\"><a href=\"#3-授权你的用户便于设置\" class=\"headerlink\" title=\"3. 授权你的用户便于设置\"></a>3. 授权你的用户便于设置</h3><blockquote>\n<p>长按通知以后进入自定义设置页面</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"SettingsActivity\"</span></span></div><div class=\"line\">        <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/app_name\"</span>&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.MAIN\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=</span></div><div class=\"line\">            <span class=\"string\">\"android.intent.category.DEFAULT\"</span> /&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:anme</span>=</span></div><div class=\"line\">            <span class=\"string\">\"android.intent.category.NOTIFICATION_PREFERENCES\"</span> /&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>作者顺便推广了一把通过<code>PreferenceFragment</code>与<code>Preference xml</code>很简单就实现一个设置页面.</p>\n<h4 id=\"添加尽可能的交互在Notification上\"><a href=\"#添加尽可能的交互在Notification上\" class=\"headerlink\" title=\"添加尽可能的交互在Notification上\"></a>添加尽可能的交互在Notification上</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">new</span> <span class=\"selector-tag\">NotificationCompat</span><span class=\"selector-class\">.Builder</span>(<span class=\"selector-tag\">this</span>)</div><div class=\"line\">    <span class=\"selector-class\">.setSamllIcon</span>(...)</div><div class=\"line\">    <span class=\"selector-class\">.setContentTitle</span>(<span class=\"selector-tag\">title</span>)</div><div class=\"line\">    <span class=\"selector-class\">.setContentText</span>(<span class=\"selector-tag\">text</span>)</div><div class=\"line\">    <span class=\"selector-class\">.addAction</span>(<span class=\"selector-tag\">R</span><span class=\"selector-class\">.drawable</span><span class=\"selector-class\">.ic_answer</span>,</div><div class=\"line\">        <span class=\"selector-tag\">getString</span>(<span class=\"selector-tag\">R</span><span class=\"selector-class\">.string</span><span class=\"selector-class\">.call_answer</span>),</div><div class=\"line\">        <span class=\"selector-tag\">answerPendingIntent</span>)</div><div class=\"line\">    <span class=\"selector-class\">.addAction</span>(<span class=\"selector-tag\">R</span><span class=\"selector-class\">.drawable</span><span class=\"selector-class\">.ic_ignore</span>,</div><div class=\"line\">        <span class=\"selector-tag\">getString</span>(<span class=\"selector-tag\">R</span><span class=\"selector-class\">.string</span><span class=\"selector-class\">.call_ignore</span>),</div><div class=\"line\">        <span class=\"selector-tag\">ignorePendingIntent</span>)</div><div class=\"line\">    <span class=\"selector-class\">.build</span>();</div></pre></td></tr></table></figure>\n<p><img src=\"/img/notification_best_practise-2.png\" alt=\"\"></p>\n<figure class=\"highlight pony\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">new</span> <span class=\"title\">Notification</span>.<span class=\"title\">Builder</span>(this)</span></div><div class=\"line\">    .<span class=\"title\">setSmallIcon</span>(...)</div><div class=\"line\">    .<span class=\"title\">setContentTitle</span>(title)</div><div class=\"line\">    .<span class=\"title\">setContentText</span>(text)</div><div class=\"line\">    <span class=\"comment\">// started in Jelly Bean</span></div><div class=\"line\">    .<span class=\"title\">setStyle</span>(</div><div class=\"line\">        new <span class=\"type\">Notification</span>.<span class=\"type\">BigPictureStyle</span>()</div><div class=\"line\">        .<span class=\"title\">bigPicture</span>(photoBitmap))</div><div class=\"line\">    .<span class=\"title\">build</span>();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// rich text?</span></div><div class=\"line\">    .<span class=\"title\">setStyle</span>(</div><div class=\"line\">        new <span class=\"type\">Notification</span>.<span class=\"type\">BigTextStyle</span>()</div><div class=\"line\">            .<span class=\"title\">bigText</span>(longText))</div><div class=\"line\">    .<span class=\"title\">build</span>();</div></pre></td></tr></table></figure>\n<p>多端同步，如果一端的notification被干掉，同步到其他端也将其干掉。</p>\n<h4 id=\"onGoing-Notification\"><a href=\"#onGoing-Notification\" class=\"headerlink\" title=\"onGoing Notification\"></a>onGoing Notification</h4><blockquote>\n<p>用户无法划掉</p>\n</blockquote>\n<ul>\n<li>startForeground()</li>\n<li>incoming calls</li>\n<li>prefer snooze-and-repost pattern</li>\n</ul>\n<p>需要给用户可以划掉/干掉的机会</p>\n<p>如：音乐播放器在播放的时候无法划掉，在暂停/停止的时候，允许用户划掉(改优先级)(Google Music目前的做法)<br>如: SSH/VPN连接在连接上的时候无法划掉，但是提供Action断开链接就自动干掉</p>\n<h3 id=\"4-取悦你的用户\"><a href=\"#4-取悦你的用户\" class=\"headerlink\" title=\"4. 取悦你的用户\"></a>4. 取悦你的用户</h3><p>两种用户:</p>\n<ul>\n<li>从来都不开声音，要不只开振动</li>\n<li>始终都开通知声音，并且喜欢去设置声音类型针对不同的应用</li>\n</ul>\n<h4 id=\"设置通知声音\"><a href=\"#设置通知声音\" class=\"headerlink\" title=\"设置通知声音\"></a>设置通知声音</h4><figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;RingtonePreference</div><div class=\"line\">    android:persistent=<span class=\"string\">\"true\"</span></div><div class=\"line\">    android:<span class=\"built_in\">key</span>=<span class=\"string\">\"sms_sound\"</span></div><div class=\"line\">    android:denpendency=<span class=\"string\">\"sms_enable\"</span></div><div class=\"line\">    android:ringtoneType=<span class=\"string\">\"notification\"</span></div><div class=\"line\">    android:<span class=\"built_in\">title</span>=<span class=\"string\">\"@string/sms_sound\"</span> /&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SharedPreferences </span><span class=\"keyword\">prefs </span>= <span class=\"keyword\">PreferenceManager</span></div><div class=\"line\">    .getDefaultSharedPreferences(<span class=\"built_in\">context</span>)<span class=\"comment\">;</span></div><div class=\"line\">String url = <span class=\"keyword\">prefs.getString(SOUND, </span>null)<span class=\"comment\">;</span></div><div class=\"line\">if(uri != null)&#123;</div><div class=\"line\">    <span class=\"keyword\">builder.setSound(Uri.parse(uri));</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"5-Connect-them-to-the-people-they-love\"><a href=\"#5-Connect-them-to-the-people-they-love\" class=\"headerlink\" title=\"5. Connect them to the people they love\"></a>5. Connect them to the people they love</h3><p>系统提供指定联系人（星标） ，其余联系人不打扰的模式，因此我们可以在不请求获取联系人权限的情况下通过以下的方式进行对通知绑定</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">new</span> <span class=\"selector-tag\">Notification</span><span class=\"selector-class\">.Builder</span>(this)</div><div class=\"line\">    <span class=\"selector-class\">.setSmallIcon</span>(...)</div><div class=\"line\">    <span class=\"selector-class\">.setLargeIcon</span>(...)</div><div class=\"line\">    <span class=\"selector-class\">.setContentTilte</span>(senderName)</div><div class=\"line\">    <span class=\"selector-class\">.setContentText</span>(msgText)</div><div class=\"line\">    <span class=\"selector-class\">.addAction</span>(...)</div><div class=\"line\">    <span class=\"comment\">// email</span></div><div class=\"line\">    <span class=\"selector-class\">.addPerson</span>(Uri.fromParts(<span class=\"string\">\"mailto\"</span>,</div><div class=\"line\">        <span class=\"string\">\"igzhenjie@gmail.com\"</span>, null)</div><div class=\"line\">        .toString())</div><div class=\"line\">    <span class=\"selector-class\">.build</span>();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// tel</span></div><div class=\"line\">    <span class=\"selector-class\">.addPerson</span>(Uri.fromParts(<span class=\"string\">\"tel\"</span>,</div><div class=\"line\">        <span class=\"string\">\"1(617) 555-1212\"</span>, null)</div><div class=\"line\">        .toString())</div></pre></td></tr></table></figure>\n<h2 id=\"II-技巧\"><a href=\"#II-技巧\" class=\"headerlink\" title=\"II. 技巧\"></a>II. 技巧</h2><h3 id=\"1-直接回复\"><a href=\"#1-直接回复\" class=\"headerlink\" title=\"1. 直接回复\"></a>1. 直接回复</h3><p>在Notification的Action上面直接回复消息</p>\n<p><img src=\"/img/notification_best_practise-direct-reply.png\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String KEY_TEXT_REPLY = <span class=\"string\">\"key_text_reply\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 1. 创建一个RemoteInput来处理这个输入Action</span></div><div class=\"line\">String replyLabel = getString(R.string.reply_label);</div><div class=\"line\">RemoteInput remoteInput = <span class=\"keyword\">new</span> RemoteInput.Builder(KEY_TEXT_REPLY)</div><div class=\"line\">        .setLabel(replyLabel) <span class=\"comment\">// 设置默认显示的hint</span></div><div class=\"line\">        .build();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 2. 添加RemoteInput到Notification上，并且使其生效</span></div><div class=\"line\">NotificationCompat.Action action =</div><div class=\"line\">    <span class=\"comment\">// 由于在Android M或更低版本的设备不支持直接回复，因此在这些设备上这里的pendingIntent的Action必须是Activity</span></div><div class=\"line\">    <span class=\"comment\">// 在Android N或者更高版本的设备支持直接回复，因此在这些设备上这里的pendingIntent的Action应该是Service或者是BroadcastReceiver用于处理消息</span></div><div class=\"line\">    <span class=\"keyword\">new</span> NotificationCompat.Action.Builder(R.drawable.reply, replyLabel, pendingIntent)</div><div class=\"line\">        .addRemoteInput(remoteInput)</div><div class=\"line\">        .setAllowGeneratedReplies(<span class=\"keyword\">true</span>) <span class=\"comment\">//允许在Android Wear 2.0上生成Smart Reply</span></div><div class=\"line\">        .build();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 3. 获取在Notification上输入的信息</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> CharSequence <span class=\"title\">getMessageText</span><span class=\"params\">(Intent intent)</span> </span>&#123;</div><div class=\"line\">    Bundle remoteInput = RemoteInput.getResultsFromIntent(intent);</div><div class=\"line\">    <span class=\"keyword\">if</span> (remoteInput != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> remoteInput.getCharSequence(KEY_TEXT_REPLY);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 4. 在处理完输入内容（如已经发送出去），之后必须使用创建相同的id与tag(如果有设置的话)的Notification对象，</span></div><div class=\"line\"><span class=\"comment\">//并调用notify()方法, 以刷新Notification上的事件，告知用于输入的内容已经完成处理。</span></div><div class=\"line\">notification.notify();</div></pre></td></tr></table></figure>\n<h3 id=\"2-使用MessagingStyle\"><a href=\"#2-使用MessagingStyle\" class=\"headerlink\" title=\"2. 使用MessagingStyle\"></a>2. 使用<code>MessagingStyle</code></h3><p>在一个Notification上显示多条消息。</p>\n<p><img src=\"/img/notification_best_practise-message-style.png\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 这里的\"You\"是设置我的消息的时候，显示的昵称。这个昵称会以特殊的颜色显示，通常是</span></div><div class=\"line\"><span class=\"comment\">//结合Notification上的直接回复组件使用的，比如回复还没有完成处理之前，这条消息就会以You发送</span></div><div class=\"line\"><span class=\"comment\">//的样式显示在Notification上</span></div><div class=\"line\">builder.setStyle(<span class=\"keyword\">new</span> NotificationCompat.MessagingStyle(<span class=\"string\">\"You\"</span>)</div><div class=\"line\">    <span class=\"comment\">//.setConversationTitle(\"Team lunch\") // 可以考虑设置一个标题，这个标题会以BigTextStyle的风格显示在Notification上</span></div><div class=\"line\">    .addMessage(<span class=\"string\">\"Hi\"</span>, timestampMillis1, <span class=\"string\">\"Adrian\"</span>) <span class=\"comment\">// Adrian 在timestampMillis1的时候发过来一条消息</span></div><div class=\"line\">    .addMessage(<span class=\"string\">\"Ready fro lunch?\"</span>, timestampMillis2, <span class=\"string\">\"Adrian\"</span>)</div><div class=\"line\">    .addMessage(<span class=\"string\">\"Sure!\"</span>, timestampMillis3, <span class=\"keyword\">null</span>) <span class=\"comment\">// 我 在timestampMillis3的时候回了一条消息</span></div><div class=\"line\">    .addMessage(<span class=\"string\">\"I'll meet you downstairs\"</span>, timestampMillis4, <span class=\"keyword\">null</span>));</div></pre></td></tr></table></figure>\n<p>需要注意的是，在Android N之前的设备，对<code>MessagingStyle</code>是不兼容的，因此如果使用<code>MessagingStyle</code>，需要对Android N之前的设备进行单独处理。</p>\n<h3 id=\"3-Bundled-Notification\"><a href=\"#3-Bundled-Notification\" class=\"headerlink\" title=\"3. Bundled Notification\"></a>3. Bundled Notification</h3><p>将多个相同性质的Notification打包成一个Notification，并且在用户需要的时候可以展开看到每个单独的Notification。</p>\n<p><img src=\"/img/notification_best_practise-bundled.png\" alt=\"\"></p>\n<ul>\n<li>Group中的Notification个数没有限制。</li>\n<li>对于某一个独立的Notification，只需要通过<code>setGroup()</code>方法就可以将其打包到Group Message中。</li>\n<li>通过<code>setGroupSummary(true)</code>指定折叠起来的时候所显示的Notification，在Android M或更低版本的设备上默认只显示这个Notification。</li>\n</ul>\n<h2 id=\"III-其他\"><a href=\"#III-其他\" class=\"headerlink\" title=\"III. 其他\"></a>III. 其他</h2><ul>\n<li>当Target Api指向25的时候，默认情况下Notification上面的Notification更新时间会被隐藏，如果需要显示，需要显式的调用<code>setShowWhen(true)</code>。</li>\n<li>在Android N的设备上，如果同一个应用Notification的个数大于等于4个并且没有Group，就会自动将其Bundled。</li>\n</ul>\n<hr>\n<ul>\n<li>文章创建时间: 2016-1-9，<a href=\"https://github.com/Jacksgong/Blog/commits/master/source/_posts/notification_best_practise.md\" target=\"_blank\" rel=\"external\">本文迭代日志</a>。</li>\n</ul>\n<hr>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=WzRSpZpw2wg\" target=\"_blank\" rel=\"external\">Respecting User Attention: Notification Best Practices (Android Dev Summit 2015)</a></li>\n<li><a href=\"https://goo.gl/NfwEiY\" target=\"_blank\" rel=\"external\">Notification-Showcase-Example</a></li>\n<li><a href=\"http://android-developers.blogspot.com/2016/06/notifications-in-android-n.html#directreply?utm_campaign=android_series_notificationsblogpost_062116&amp;utm_source=anddev&amp;utm_medium=yt-desc\" target=\"_blank\" rel=\"external\">Notifications in Android N</a></li>\n<li><a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.MessagingStyle.html#NotificationCompat.MessagingStyle(java.lang.CharSequence\" target=\"_blank\" rel=\"external\">NotificationCompat.MessagingStyle</a>)</li>\n<li><a href=\"https://blog.stylingandroid.com/nougat-messaging-style-notifications/\" target=\"_blank\" rel=\"external\">Nougat-Messaging Style Notifications</a></li>\n<li><a href=\"https://blog.stylingandroid.com/nougat-direct-reply/\" target=\"_blank\" rel=\"external\">Nougat-Direct Replay</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<h2 id=\"I-原则\"><a href=\"#I-原则\" class=\"headerlink\" title=\"I. 原则\"></a>I. 原则</h2><h3 id=\"1-别干扰你的用户\"><a href=\"#1-别干扰你的用户\" class=\"headerlink\" title=\"1. 别干扰你的用户\"></a>1. 别干扰你的用户</h3><figure class=\"highlight pony\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 之所以用NotifcationCompat，因为这个可以直接兼容到API4</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">new</span> <span class=\"title\">NotificationCompat</span>.<span class=\"title\">Builder</span>(this)</div><div class=\"line\">    .<span class=\"title\">setSmallIcon</span>(...)</div><div class=\"line\">    .<span class=\"title\">setContentTitle</span>(senderName)</div><div class=\"line\">    .<span class=\"title\">setContentText</span>(msgText)</div><div class=\"line\">    .<span class=\"title\">setCategory</span>(</div><div class=\"line\">        // <span class=\"type\">CATEGORY_ALARM</span>(alarms or timers), <span class=\"title\">REMINDER</span>(user requested reminder),<span class=\"title\">EVENT</span>,<span class=\"title\">MESSAGE</span>,<span class=\"title\">CALL</span>,<span class=\"title\">EMAIL</span>,<span class=\"title\">SOCIAL</span>,<span class=\"title\">RECOMMENDATION</span>(<span class=\"type\">TV</span>?)</div><div class=\"line\">    )</div><div class=\"line\">    .<span class=\"title\">build</span>();</span></div></pre></td></tr></table></figure>","more":"<h3 id=\"2-尊重你的用户\"><a href=\"#2-尊重你的用户\" class=\"headerlink\" title=\"2. 尊重你的用户\"></a>2. 尊重你的用户</h3><p><img src=\"/img/notification_best_practise-1.png\" alt=\"\"></p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">// <span class=\"built_in\">MAX</span>(<span class=\"built_in\">time</span>-critical tasks, incoming calls, turn-by-turn directions)</div><div class=\"line\">// HIGH(important communications, chats, texts, important emails)</div><div class=\"line\">// LOW(<span class=\"built_in\">not</span> <span class=\"built_in\">time</span> sensitive, social broadcasts)</div><div class=\"line\">// <span class=\"built_in\">MIN</span>(contextual <span class=\"built_in\">or</span> background infomation, recommendations wechther), <span class=\"built_in\">not</span> show when locked screen</div><div class=\"line\">// setPriority</div><div class=\"line\">NotificationCompat.PRIORITY_</div></pre></td></tr></table></figure>\n<h4 id=\"同id的notification-声音、振动、ticker-仅第一次\"><a href=\"#同id的notification-声音、振动、ticker-仅第一次\" class=\"headerlink\" title=\"同id的notification, 声音、振动、ticker 仅第一次\"></a>同id的notification, 声音、振动、ticker 仅第一次</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">NotificationCompat.Builder builder =</div><div class=\"line\">    <span class=\"keyword\">new</span> NotificationCompat.Builder(c)</div><div class=\"line\">        <span class=\"comment\">// Set this flag if you would only like the sound, vibrate and ticker to be played if the notification is not already showing.</span></div><div class=\"line\">        .setOnlyAlertOnce(<span class=\"keyword\">true</span>)</div><div class=\"line\">        .setProgress(<span class=\"number\">100</span>, <span class=\"number\">50</span>, <span class=\"keyword\">false</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"notification一段时间后自动干掉\"><a href=\"#notification一段时间后自动干掉\" class=\"headerlink\" title=\"notification一段时间后自动干掉\"></a>notification一段时间后自动干掉</h4><blockquote>\n<p>好吧。只是用了alarm service</p>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">ctxt</span><span class=\"selector-class\">.getSystemService</span>(<span class=\"selector-tag\">Context</span><span class=\"selector-class\">.ALARM_SERVICE</span>)</div><div class=\"line\">    <span class=\"selector-class\">.set</span>(<span class=\"selector-tag\">AlarmManager</span><span class=\"selector-class\">.ELAPSED_REALTIME</span>,</div><div class=\"line\">        <span class=\"selector-tag\">SystemClock</span><span class=\"selector-class\">.elapsedRealtime</span>() + <span class=\"selector-tag\">ONE_HOUR</span>,</div><div class=\"line\">        <span class=\"selector-tag\">makeCancelAllPendingIntent</span>(<span class=\"selector-tag\">ctxt</span>));</div></pre></td></tr></table></figure>\n<h4 id=\"Peak显示\"><a href=\"#Peak显示\" class=\"headerlink\" title=\"Peak显示\"></a>Peak显示</h4><p>条件: PRIORITY_HIGH &amp;&amp; (sound || vibration)</p>\n<h3 id=\"3-授权你的用户便于设置\"><a href=\"#3-授权你的用户便于设置\" class=\"headerlink\" title=\"3. 授权你的用户便于设置\"></a>3. 授权你的用户便于设置</h3><blockquote>\n<p>长按通知以后进入自定义设置页面</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"SettingsActivity\"</span></div><div class=\"line\">        <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/app_name\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.MAIN\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=</div><div class=\"line\">            <span class=\"string\">\"android.intent.category.DEFAULT\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:anme</span>=</div><div class=\"line\">            <span class=\"string\">\"android.intent.category.NOTIFICATION_PREFERENCES\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>作者顺便推广了一把通过<code>PreferenceFragment</code>与<code>Preference xml</code>很简单就实现一个设置页面.</p>\n<h4 id=\"添加尽可能的交互在Notification上\"><a href=\"#添加尽可能的交互在Notification上\" class=\"headerlink\" title=\"添加尽可能的交互在Notification上\"></a>添加尽可能的交互在Notification上</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">new</span> <span class=\"selector-tag\">NotificationCompat</span><span class=\"selector-class\">.Builder</span>(<span class=\"selector-tag\">this</span>)</div><div class=\"line\">    <span class=\"selector-class\">.setSamllIcon</span>(...)</div><div class=\"line\">    <span class=\"selector-class\">.setContentTitle</span>(<span class=\"selector-tag\">title</span>)</div><div class=\"line\">    <span class=\"selector-class\">.setContentText</span>(<span class=\"selector-tag\">text</span>)</div><div class=\"line\">    <span class=\"selector-class\">.addAction</span>(<span class=\"selector-tag\">R</span><span class=\"selector-class\">.drawable</span><span class=\"selector-class\">.ic_answer</span>,</div><div class=\"line\">        <span class=\"selector-tag\">getString</span>(<span class=\"selector-tag\">R</span><span class=\"selector-class\">.string</span><span class=\"selector-class\">.call_answer</span>),</div><div class=\"line\">        <span class=\"selector-tag\">answerPendingIntent</span>)</div><div class=\"line\">    <span class=\"selector-class\">.addAction</span>(<span class=\"selector-tag\">R</span><span class=\"selector-class\">.drawable</span><span class=\"selector-class\">.ic_ignore</span>,</div><div class=\"line\">        <span class=\"selector-tag\">getString</span>(<span class=\"selector-tag\">R</span><span class=\"selector-class\">.string</span><span class=\"selector-class\">.call_ignore</span>),</div><div class=\"line\">        <span class=\"selector-tag\">ignorePendingIntent</span>)</div><div class=\"line\">    <span class=\"selector-class\">.build</span>();</div></pre></td></tr></table></figure>\n<p><img src=\"/img/notification_best_practise-2.png\" alt=\"\"></p>\n<figure class=\"highlight pony\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">new</span> <span class=\"title\">Notification</span>.<span class=\"title\">Builder</span>(this)</div><div class=\"line\">    .<span class=\"title\">setSmallIcon</span>(...)</div><div class=\"line\">    .<span class=\"title\">setContentTitle</span>(title)</div><div class=\"line\">    .<span class=\"title\">setContentText</span>(text)</div><div class=\"line\">    <span class=\"comment\">// started in Jelly Bean</span></div><div class=\"line\">    .<span class=\"title\">setStyle</span>(</div><div class=\"line\">        new <span class=\"type\">Notification</span>.<span class=\"type\">BigPictureStyle</span>()</div><div class=\"line\">        .<span class=\"title\">bigPicture</span>(photoBitmap))</div><div class=\"line\">    .<span class=\"title\">build</span>();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// rich text?</span></div><div class=\"line\">    .<span class=\"title\">setStyle</span>(</div><div class=\"line\">        new <span class=\"type\">Notification</span>.<span class=\"type\">BigTextStyle</span>()</div><div class=\"line\">            .<span class=\"title\">bigText</span>(longText))</div><div class=\"line\">    .<span class=\"title\">build</span>();</span></div></pre></td></tr></table></figure>\n<p>多端同步，如果一端的notification被干掉，同步到其他端也将其干掉。</p>\n<h4 id=\"onGoing-Notification\"><a href=\"#onGoing-Notification\" class=\"headerlink\" title=\"onGoing Notification\"></a>onGoing Notification</h4><blockquote>\n<p>用户无法划掉</p>\n</blockquote>\n<ul>\n<li>startForeground()</li>\n<li>incoming calls</li>\n<li>prefer snooze-and-repost pattern</li>\n</ul>\n<p>需要给用户可以划掉/干掉的机会</p>\n<p>如：音乐播放器在播放的时候无法划掉，在暂停/停止的时候，允许用户划掉(改优先级)(Google Music目前的做法)<br>如: SSH/VPN连接在连接上的时候无法划掉，但是提供Action断开链接就自动干掉</p>\n<h3 id=\"4-取悦你的用户\"><a href=\"#4-取悦你的用户\" class=\"headerlink\" title=\"4. 取悦你的用户\"></a>4. 取悦你的用户</h3><p>两种用户:</p>\n<ul>\n<li>从来都不开声音，要不只开振动</li>\n<li>始终都开通知声音，并且喜欢去设置声音类型针对不同的应用</li>\n</ul>\n<h4 id=\"设置通知声音\"><a href=\"#设置通知声音\" class=\"headerlink\" title=\"设置通知声音\"></a>设置通知声音</h4><figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;RingtonePreference</div><div class=\"line\">    android:persistent=<span class=\"string\">\"true\"</span></div><div class=\"line\">    android:<span class=\"built_in\">key</span>=<span class=\"string\">\"sms_sound\"</span></div><div class=\"line\">    android:denpendency=<span class=\"string\">\"sms_enable\"</span></div><div class=\"line\">    android:ringtoneType=<span class=\"string\">\"notification\"</span></div><div class=\"line\">    android:<span class=\"built_in\">title</span>=<span class=\"string\">\"@string/sms_sound\"</span> /&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SharedPreferences </span><span class=\"keyword\">prefs </span>= <span class=\"keyword\">PreferenceManager</div><div class=\"line\"></span>    .getDefaultSharedPreferences(<span class=\"built_in\">context</span>)<span class=\"comment\">;</span></div><div class=\"line\">String url = <span class=\"keyword\">prefs.getString(SOUND, </span>null)<span class=\"comment\">;</span></div><div class=\"line\">if(uri != null)&#123;</div><div class=\"line\">    <span class=\"keyword\">builder.setSound(Uri.parse(uri));</div><div class=\"line\"></span>&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"5-Connect-them-to-the-people-they-love\"><a href=\"#5-Connect-them-to-the-people-they-love\" class=\"headerlink\" title=\"5. Connect them to the people they love\"></a>5. Connect them to the people they love</h3><p>系统提供指定联系人（星标） ，其余联系人不打扰的模式，因此我们可以在不请求获取联系人权限的情况下通过以下的方式进行对通知绑定</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">new</span> <span class=\"selector-tag\">Notification</span><span class=\"selector-class\">.Builder</span>(this)</div><div class=\"line\">    <span class=\"selector-class\">.setSmallIcon</span>(...)</div><div class=\"line\">    <span class=\"selector-class\">.setLargeIcon</span>(...)</div><div class=\"line\">    <span class=\"selector-class\">.setContentTilte</span>(senderName)</div><div class=\"line\">    <span class=\"selector-class\">.setContentText</span>(msgText)</div><div class=\"line\">    <span class=\"selector-class\">.addAction</span>(...)</div><div class=\"line\">    <span class=\"comment\">// email</span></div><div class=\"line\">    <span class=\"selector-class\">.addPerson</span>(Uri.fromParts(<span class=\"string\">\"mailto\"</span>,</div><div class=\"line\">        <span class=\"string\">\"igzhenjie@gmail.com\"</span>, null)</div><div class=\"line\">        .toString())</div><div class=\"line\">    <span class=\"selector-class\">.build</span>();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// tel</span></div><div class=\"line\">    <span class=\"selector-class\">.addPerson</span>(Uri.fromParts(<span class=\"string\">\"tel\"</span>,</div><div class=\"line\">        <span class=\"string\">\"1(617) 555-1212\"</span>, null)</div><div class=\"line\">        .toString())</div></pre></td></tr></table></figure>\n<h2 id=\"II-技巧\"><a href=\"#II-技巧\" class=\"headerlink\" title=\"II. 技巧\"></a>II. 技巧</h2><h3 id=\"1-直接回复\"><a href=\"#1-直接回复\" class=\"headerlink\" title=\"1. 直接回复\"></a>1. 直接回复</h3><p>在Notification的Action上面直接回复消息</p>\n<p><img src=\"/img/notification_best_practise-direct-reply.png\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String KEY_TEXT_REPLY = <span class=\"string\">\"key_text_reply\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 1. 创建一个RemoteInput来处理这个输入Action</span></div><div class=\"line\">String replyLabel = getString(R.string.reply_label);</div><div class=\"line\">RemoteInput remoteInput = <span class=\"keyword\">new</span> RemoteInput.Builder(KEY_TEXT_REPLY)</div><div class=\"line\">        .setLabel(replyLabel) <span class=\"comment\">// 设置默认显示的hint</span></div><div class=\"line\">        .build();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 2. 添加RemoteInput到Notification上，并且使其生效</span></div><div class=\"line\">NotificationCompat.Action action =</div><div class=\"line\">    <span class=\"comment\">// 由于在Android M或更低版本的设备不支持直接回复，因此在这些设备上这里的pendingIntent的Action必须是Activity</span></div><div class=\"line\">    <span class=\"comment\">// 在Android N或者更高版本的设备支持直接回复，因此在这些设备上这里的pendingIntent的Action应该是Service或者是BroadcastReceiver用于处理消息</span></div><div class=\"line\">    <span class=\"keyword\">new</span> NotificationCompat.Action.Builder(R.drawable.reply, replyLabel, pendingIntent)</div><div class=\"line\">        .addRemoteInput(remoteInput)</div><div class=\"line\">        .setAllowGeneratedReplies(<span class=\"keyword\">true</span>) <span class=\"comment\">//允许在Android Wear 2.0上生成Smart Reply</span></div><div class=\"line\">        .build();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 3. 获取在Notification上输入的信息</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> CharSequence <span class=\"title\">getMessageText</span><span class=\"params\">(Intent intent)</span> </span>&#123;</div><div class=\"line\">    Bundle remoteInput = RemoteInput.getResultsFromIntent(intent);</div><div class=\"line\">    <span class=\"keyword\">if</span> (remoteInput != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> remoteInput.getCharSequence(KEY_TEXT_REPLY);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 4. 在处理完输入内容（如已经发送出去），之后必须使用创建相同的id与tag(如果有设置的话)的Notification对象，</span></div><div class=\"line\"><span class=\"comment\">//并调用notify()方法, 以刷新Notification上的事件，告知用于输入的内容已经完成处理。</span></div><div class=\"line\">notification.notify();</div></pre></td></tr></table></figure>\n<h3 id=\"2-使用MessagingStyle\"><a href=\"#2-使用MessagingStyle\" class=\"headerlink\" title=\"2. 使用MessagingStyle\"></a>2. 使用<code>MessagingStyle</code></h3><p>在一个Notification上显示多条消息。</p>\n<p><img src=\"/img/notification_best_practise-message-style.png\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 这里的\"You\"是设置我的消息的时候，显示的昵称。这个昵称会以特殊的颜色显示，通常是</span></div><div class=\"line\"><span class=\"comment\">//结合Notification上的直接回复组件使用的，比如回复还没有完成处理之前，这条消息就会以You发送</span></div><div class=\"line\"><span class=\"comment\">//的样式显示在Notification上</span></div><div class=\"line\">builder.setStyle(<span class=\"keyword\">new</span> NotificationCompat.MessagingStyle(<span class=\"string\">\"You\"</span>)</div><div class=\"line\">    <span class=\"comment\">//.setConversationTitle(\"Team lunch\") // 可以考虑设置一个标题，这个标题会以BigTextStyle的风格显示在Notification上</span></div><div class=\"line\">    .addMessage(<span class=\"string\">\"Hi\"</span>, timestampMillis1, <span class=\"string\">\"Adrian\"</span>) <span class=\"comment\">// Adrian 在timestampMillis1的时候发过来一条消息</span></div><div class=\"line\">    .addMessage(<span class=\"string\">\"Ready fro lunch?\"</span>, timestampMillis2, <span class=\"string\">\"Adrian\"</span>)</div><div class=\"line\">    .addMessage(<span class=\"string\">\"Sure!\"</span>, timestampMillis3, <span class=\"keyword\">null</span>) <span class=\"comment\">// 我 在timestampMillis3的时候回了一条消息</span></div><div class=\"line\">    .addMessage(<span class=\"string\">\"I'll meet you downstairs\"</span>, timestampMillis4, <span class=\"keyword\">null</span>));</div></pre></td></tr></table></figure>\n<p>需要注意的是，在Android N之前的设备，对<code>MessagingStyle</code>是不兼容的，因此如果使用<code>MessagingStyle</code>，需要对Android N之前的设备进行单独处理。</p>\n<h3 id=\"3-Bundled-Notification\"><a href=\"#3-Bundled-Notification\" class=\"headerlink\" title=\"3. Bundled Notification\"></a>3. Bundled Notification</h3><p>将多个相同性质的Notification打包成一个Notification，并且在用户需要的时候可以展开看到每个单独的Notification。</p>\n<p><img src=\"/img/notification_best_practise-bundled.png\" alt=\"\"></p>\n<ul>\n<li>Group中的Notification个数没有限制。</li>\n<li>对于某一个独立的Notification，只需要通过<code>setGroup()</code>方法就可以将其打包到Group Message中。</li>\n<li>通过<code>setGroupSummary(true)</code>指定折叠起来的时候所显示的Notification，在Android M或更低版本的设备上默认只显示这个Notification。</li>\n</ul>\n<h2 id=\"III-其他\"><a href=\"#III-其他\" class=\"headerlink\" title=\"III. 其他\"></a>III. 其他</h2><ul>\n<li>当Target Api指向25的时候，默认情况下Notification上面的Notification更新时间会被隐藏，如果需要显示，需要显式的调用<code>setShowWhen(true)</code>。</li>\n<li>在Android N的设备上，如果同一个应用Notification的个数大于等于4个并且没有Group，就会自动将其Bundled。</li>\n</ul>\n<hr>\n<ul>\n<li>文章创建时间: 2016-1-9，<a href=\"https://github.com/Jacksgong/Blog/commits/master/source/_posts/notification_best_practise.md\">本文迭代日志</a>。</li>\n</ul>\n<hr>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=WzRSpZpw2wg\">Respecting User Attention: Notification Best Practices (Android Dev Summit 2015)</a></li>\n<li><a href=\"https://goo.gl/NfwEiY\">Notification-Showcase-Example</a></li>\n<li><a href=\"http://android-developers.blogspot.com/2016/06/notifications-in-android-n.html#directreply?utm_campaign=android_series_notificationsblogpost_062116&amp;utm_source=anddev&amp;utm_medium=yt-desc\">Notifications in Android N</a></li>\n<li><a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.MessagingStyle.html#NotificationCompat.MessagingStyle(java.lang.CharSequence\">NotificationCompat.MessagingStyle</a>)</li>\n<li><a href=\"https://blog.stylingandroid.com/nougat-messaging-style-notifications/\">Nougat-Messaging Style Notifications</a></li>\n<li><a href=\"https://blog.stylingandroid.com/nougat-direct-reply/\">Nougat-Direct Replay</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"常见网络协议优化与区分","date":"2017-02-16T06:09:03.000Z","_content":"\n## I. 协议优化演进\n\n### 1. 带宽与拥塞\n\n#### 现状\n\n目前的网络基建越来越好，因此带宽的已经不再是瓶颈， 但是由于相关协议(如TCP)的拥塞窗口(CWND, congestion window)控制，很多时候并没有将带宽有效的利用，因此更有效的利用带宽是一个优化方向，特别针对视频、游戏等领域。\n\n#### 应对\n\n- **QUIC:** 基于UDP，QUIC可以支持无序的递交，因此通常单个丢包最多只会影响1个请求stream，并且QUIC中一定程度上拆分拥塞窗口来更好的适配多个多路复用的连接，来尽可能的利用带宽，目前已经在Youtube以及一些Google通用库(如字体库)上应用\n- **HTTP:** 通过同时建立多个连接通道，由于每个通道有单独的拥塞窗口保证一个丢包最多只拥塞一个连接通道\n- **BBR:** Google推出的全新的阻塞策略方案，从根本上解决该问题，通过交替测量带宽和激进的估算算法尽可能的占满带宽与降低延迟（此方式极大的提高了带宽利用率），目前已经在Youtube上应用\n\n<!-- more -->\n\n#### 存在该缺陷的协议\n\n- **TCP:** 由于采用\"加性增，乘性减\"的拥塞控制算法，错误的将网络中的错误丢包也认为是拥塞丢包，导致拥塞窗口被收敛的很小，带宽无法有效利用\n- **SPDY:** 由于SPDY基于TCP，因此存在TCP相同的缺陷问题，并且虽然SPDY采用了多路复用，也做个各类优化，但是由于一个TCP连接只有一个拥塞窗口，因此一个请求stream丢包，就会导致整个通道被阻塞\n\n### 2. 握手的N-RTT的开销\n\n#### 现状\n\n目前TCP与SSL/TLS(1.0,1.1,1.2)，每次建连需要TCP三次握手+安全握手需要: `4~5-RRT`，导致建连效率低下，Google、Facebook、Tencent(Wechat)等公司推出了各类优化策略。\n\n#### 应对\n\n- **TLS1.3:** 安全握手提出了0-RTT草案\n- **QUIC:** 通过实现自己的安全模块，整个握手过程(TCP + TLS)采用全新的0-RTT方案，并计划当完成时适配到TLS1.3中\n- **Proxygen:** Facebook基于QUIC的0-RTT协议进行优化，保证安全握手最多只有1-RTT，并运用在TCP中 ，并将贡献各类优化成果给TLS1.3\n- **mmtls:** Wechat基于TLS1.3草案中的0-RTT，进行优化推出自己的mmtls，其对于长连接保障安全握手1-RTT，对于短连接安全握手尽可能使用0-RTT\n\n#### 存在该缺陷的协议\n\n- **SSL、TLS1.3之前版本:**  在TLS1.2中，需要2~1-RTT(全握手需要2-RTT)\n\n### 3. 冗余数据\n\n#### 现状\n\n通常的一般的Http请求，每次请求header基本上没什么变化；在一些情况下多个页面使用相同静态资源(js、logo等)，却每次都重复下载。\n\n#### 应对\n\n- **SPDY:** 采用[DEFLATE](http://zh.wikipedia.org/wiki/DEFLATE)对请求头/响应头进行压缩\n- **HTTP/2:**采用[HPACK](http://http2.github.io/http2-spec/compression.html)算法对请求头/响应头进行压缩，并且通讯双方各自cache一份header fields表，避免了重复header的传输\n- **QUIC:** 目前版本采用[HPACK](http://http2.github.io/http2-spec/compression.html)算法对请求头/响应头进行压缩\n- **HTTP/1.1、HTTP/2:** 支持`Cache-Control`用于控制资源有效时间,支持`Last-Modified`来控制资源是否可复用\n- **Facebook geek方案:**  将`expiration time`全部设置为1年，所有的资源请求链接，都采用概念性的连接(在请求链接后加上资源名的md5，再做mapping)(只要资源不变化链接就不变化)，保证已下载资源能被有效利用的同时，避免重复检测资源有效性\n- **浏览器优化:** Facebook联系Chrome与Firefox，针对复用资源可复用检测频率进行调整(如firefox支持在`cache-control`中的`immutable`关键字表示资源不可变不用重复检测)\n\n#### 存在该缺陷的协议\n\n- **HTTP/1:** 请求头未做压缩，不支持`Cache-Control`与`Last-Modified`因此存在冗余资源重复下载问题\n- **HTTP/1.1:** 请求头未做压缩\n\n### 4. 预准备\n\n- **Taobao:** DNS-Prefetch、Preconnect、Prefetch、Flush HTML early、PreRender\n- **SPDY、HTTP/2、QUIC:**: 允许服务端主动推服务端认为客户端需要的静态资源\n\n### 5. 负载均衡、超时策略优化与其他\n\n- **负载均衡:** 收益较小的长连接，带来服务端没必要的性能开销\n- **超时策略:** 策略性的调整建连与维连时的超时重连的频率、时间、IP/端口，来应对弱网状况，何时快速放弃节约资源(无网状态)，何时找到可用资源快速恢复连接(被劫持、服务器某端口/IP故障、基站繁忙、连接信号弱、丢包率高)\n- **策略性阻塞:** 根据网络情况、请求数目动态调整连接数来保证吞吐量与稳定性（如SPDY、HTTP/2、QUIC中的多路复用）\n- **DNS:** 结合TTL有效管理本地DNS缓存的有效时间、以及缓存大小来减少DNS查询的阻塞，以及可以通过HTTPDNS优化DNS请求的线路以及来避免DNS被篡改等问题(如果使用okhttp3，可以指定DNS，并且可以为请求设定缓存大小与时间，可以很轻易的实现自己的HTTPDNS)\n\n## II. 常见协议区分\n\n### 1. TCP\n\n目前应用最广泛的可靠的、有序的、自带问题校验修复([error-checked](https://en.wikipedia.org/wiki/Error_detection_and_correction))、传输协议，通常情况下发送端与接收端通过TCP协议来保障数据的可靠到达，中间层通过IP协议来路由数据的传递。\n\n<center>![image_1b8j1od7f11rspea7gi1stssbq9.png-104.2kB][1]</center>\n\n- **建连:** 通过三次握手，保障连接已可靠连接\n- **超时重试:** 通过连接超时重试、读写超时重试机制，来保障连接的稳定性\n- **拥塞控制:** 通过\"加性增，乘性减\"算法，来保障尽量少的报文传输尽量多的数据的同时，减少丢包重传的概率\n- **校验和:** 通过对TCP/IP头进行\"校验和\"检查，来保障传输数据与地址信息的可靠\n- **有序性:** 通过\"序列号\"来鉴别每个字节数据，保证接收端能够有序的重建传输数据，以及校验数据完整性\n- **应答机制:** 每次接收端会发送Acks(Acknowledgements)给发送端告知数据以被接收\n- **断连:** 通过四次挥手，保障连接已可靠断开\n\n### 3. HTTP\n\n#### `HTTP1.1` vs `HTTP1.0`\n\n- **更灵活缓存处理:** 引入Etag(Entity tag)等目前常用的缓存相关策略\n- **优化带宽使用:** 引入`range`头域，支持206(Partial Content)，用于数据断点续传。\n- **错误机制更完善:** 引入24个错误状态码，如409(Conflict)请求资源与当前状态冲突； 410(Gone)资源在服务器上被永久删除\n- **Host头处理:** 请求头中必须带上`host`，否则会报400 Bad Request，为了支持一台服务器上有多台虚拟主机，因此通常一个IP对应了多个域名。\n- **长连接:** 默认`Connection: keep-alive`，以复用已建连通道，不像`http1.0`每个请求都需要重新创建\n\n### 4. HTTPS\n\n1994年由**网景**提出，并应用在网景导航者浏览器中。最新的HTTPS协议在2000年5月公布的`RFC 2818`正式确定。\n\nHTTPS协议是基于TLS(Transport Layer Security)/SSL(Secure Sockets Layer)对数据进行加密校验，保障了网络通信中的数据安全。\n\n在当前大陆的网络环境而言，是有效避免运营商劫持的手段。\n\n<center>![image_1b8ji5se91a1kvn431umcc2vk9.png-44.3kB][2]</center>\n\n- **SSL与TLS:** 早期HTTPS是通过SSL对数据验证加密，后SSL逐渐演变为现在的TLS，所以大多数为了有效的支持加密，都同时支持了SSL与STL\n- **TLS提高了SSL:** 虽然最早的TLS1.0与SSL3.0非常类似，但是TLS采用HMAC(keyed-Hashing for Message Authentication Code)算法对数据验证相比SSL的MAC(Message Authentication Code)算法会更难破解，并且在其他方面也有一些小的改进\n- **请求端口:** 443\n\n\n### 5. SPDY\n\n> 读音speedy\n\n是谷歌开发为了加快网页加载速度的网络协议。\n\nSPDY兼容性: http://caniuse.com/#feat=spdy\n\n<center>![image_1b8jj8l511lag13eslpm1al918krm.png-23.8kB][3]</center>\n\n- **采用多路复用(multiplexing):** 多个请求stream共享一个tcp连接， 降低延时、提高带宽利用率\n- **请求优先级:** 允许给每个请求设置优先级，使得重要的请求得到优先响应\n- **TLS/SSL的加密传输:** 强制要求使用TLS/SSL提高数据安全可靠性\n- **压缩`请求头/响应头`:** 通过DEFLATE或gzip算法进行对`请求头/响应头`进行压缩\n- **支持Server Push:** 允许服务端主动的推送资源(js、css)给客户端，当分析获知客户端将会需要时，以此利用起空闲带宽\n- **支持Server Hints:** 允许服务端可以在客户端还没有发现将需要哪些资源的时候，主动通知客户端，以便于客户端实现准备好相关资源的缓存\n\n### 6. HTTP/2\n\n> HTTP/2基于SPDY设计\n\n<center>![image_1b90ik3e01di41tgr16hc12ks19uvp.png-129.5kB][4]</center>\n<center>![image_1b8jku3ol1rbveu4es1tp8rk61j.png-125kB][5]</center>\n\n#### HTTP/2 vs SPDY\n\n- **SSL/TLS:** SPDY强制使用SSL/TLS，HTTP/2非强制(但是部分浏览器(如Chrome)不允许，所以目前如果使用HTTP/2最好都配置SSL/TLS)\n- **消息头压缩算法:** HTTP/2消息头压缩算法采用[HPACK](http://http2.github.io/http2-spec/compression.html)，SPDY采用[DEFLATE](http://zh.wikipedia.org/wiki/DEFLATE)，一般情况下HPACK的压缩率会高于DEFLATE\n- **传输格式:** HTTP/2传输采用二进制而非文本，因此HTTP/2中的基本单位是帧, 文本形式众多很难权衡健壮、性能与复杂度，二进制弥补了这个缺陷，并且是无序的帧，最终根据头帧重新组装\n- **继承与优化:** HTTP/2继承并优化了SPDY的多路复用与Server Push\n\n### 7. QUIC\n\n> 发音`quick`\n\n> QUIC 参考了HTTP/2与SPDY，可靠的，多路复用的基于UDP的网络协议，内置安全加密模块，低延迟、运行在用户空间、开源的新一代网络协议。Google计划在完成后将其服务于所有的Google服务。\n\n> Google在2013年10月第一次在IETF展示QUIC, 2016年7月启动工作群,\n\n可靠的，多路复用的基于UDP的网络协议，内置安全加密模块，低延迟、运行在用户空间、开源的新一代网络协议。Google计划在完成后将其服务于所有的Google服务。\n\n<center>![][6]</center>\n<center>![][7]</center>\n\n- **减少建连延迟:** 从未访问过服务的情况下1-RTT，其他的可以立马开始传输数据(0-RTT)\n- **拥塞控制:** 提升TCP Cubic拥塞控制\n- **HOL阻塞:** 消除多路复用中的HOL阻塞(head-of-line blocking)\n- **更少的帧消耗:** Quic数据包包含更少的帧，因此更多的数据包可以携带数据\n- **提升丢包重试:** 丢包重试时使用新的序列号以及采用重新加密\n- **安全加密:** 内置的加密模块(支持SNI，因此支持一个IP部署多个证书)，并且是默认打开的，相比TLS更高效的向前加密 - 完成以后，将计划适配到TLS 1.3中\n- **端口:** 使用443端口来处理UDP协议数据 - [Port 80/443 UDP Traffic to Google?](https://community.spiceworks.com/topic/601177-port-80-443-udp-traffic-to-google)\n- **其他:** 更好的FEC(Forward error correction)机制、与Connection migration机制\n\n---\n\n- [从tcp原理角度理解Broken pipe和Connection Reset by Peer的区别](http://lovestblog.cn/blog/2014/05/20/tcp-broken-pipe/)\n- [淘宝HTTPS探索](http://velocity.oreilly.com.cn/2015/ppts/lizhenyu.pdf)\n- [HTTP,HTTP/2,SPDY,HTTPS你应该知道的一些事](http://www.alloyteam.com/2016/07/httphttp2-0spdyhttps-reading-this-is-enough/)\n- [QUIC Geek FAQ](https://docs.google.com/document/d/1lmL9EF6qKrk7gbazY8bIdvq3Pno2Xj_l_YShP40GLQE)\n- [google/bbr](https://github.com/google/bbr)\n- [滑动窗口和拥塞窗口简述](http://www.cnblogs.com/mydomain/archive/2013/04/18/3027668.html)\n- [BBR算法原理 - 李博杰](https://www.zhihu.com/question/53559433)\n- [QUIC - Next generation multiplexed transport over UDP](https://www.nanog.org/sites/default/files/meetings/NANOG64/1051/20150603_Rogan_Quic_Next_Generation_v1.pdf)\n- [Building Zero protocol for fast, secure mobile connections](https://code.facebook.com/posts/608854979307125/building-zero-protocol-for-fast-secure-mobile-connections/)\n- [基于TLS1.3的微信安全通信协议mmtls介绍](https://github.com/WeMobileDev/article/blob/master/%E5%9F%BA%E4%BA%8ETLS1.3%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%AE%89%E5%85%A8%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AEmmtls%E4%BB%8B%E7%BB%8D.md)\n- [QUIC Wire Layout Specification](https://docs.google.com/document/d/1WJvyZflAO2pq77yOLbp9NsGjC1CHetAXV8I0fQe-B_U/edit)\n- [SPDY - Wiki](https://en.wikipedia.org/wiki/SPDY)\n- [This browser tweak saved 60% of requests to Facebook](https://code.facebook.com/posts/557147474482256/this-browser-tweak-saved-60-of-requests-to-facebook/)\n- [HTTP2学习(四)—HTTP2的新特性](http://jiaolonghuang.github.io/2015/08/16/http2/)\n- [Server Push and Server Hints](https://www.chromium.org/spdy/link-headers-and-server-hint)\n- [What is TLS/SSL?](https://technet.microsoft.com/en-us/library/cc784450(v=ws.10).aspx)\n- [QUIC - Google-peering](http://peering.google.com/#/learn-more/quic)\n- [QUIC教材](https://www.chromium.org/quic)\n- [QUIC视频介绍](https://www.youtube.com/watch?v=hQZ-0mXFmk8)\n\n---\n\n- 文章创建时间: 2017-02-12，[本文迭代日志](https://github.com/Jacksgong/Blog/commits/master/source/_posts/network_basic.md)。\n\n---\n\n> © 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n\n  [1]: /img/network_basic-1.png\n  [2]: /img/network_basic-2.png\n  [3]: /img/network_basic-3.png\n  [4]: /img/network_basic-4.png\n  [5]: /img/network_basic-5.png\n  [6]: /img/network_basic-6.png\n  [7]: /img/network_basic-7.png\n","source":"_posts/network_basic.md","raw":"title: 常见网络协议优化与区分\ndate: 2017-02-16 14:09:03\ntags:\n- Socket\n- HTTP\n- HTTPS\n- SPDY\n- HTTP/2\n- QUIC\n- BBR\n\n---\n\n## I. 协议优化演进\n\n### 1. 带宽与拥塞\n\n#### 现状\n\n目前的网络基建越来越好，因此带宽的已经不再是瓶颈， 但是由于相关协议(如TCP)的拥塞窗口(CWND, congestion window)控制，很多时候并没有将带宽有效的利用，因此更有效的利用带宽是一个优化方向，特别针对视频、游戏等领域。\n\n#### 应对\n\n- **QUIC:** 基于UDP，QUIC可以支持无序的递交，因此通常单个丢包最多只会影响1个请求stream，并且QUIC中一定程度上拆分拥塞窗口来更好的适配多个多路复用的连接，来尽可能的利用带宽，目前已经在Youtube以及一些Google通用库(如字体库)上应用\n- **HTTP:** 通过同时建立多个连接通道，由于每个通道有单独的拥塞窗口保证一个丢包最多只拥塞一个连接通道\n- **BBR:** Google推出的全新的阻塞策略方案，从根本上解决该问题，通过交替测量带宽和激进的估算算法尽可能的占满带宽与降低延迟（此方式极大的提高了带宽利用率），目前已经在Youtube上应用\n\n<!-- more -->\n\n#### 存在该缺陷的协议\n\n- **TCP:** 由于采用\"加性增，乘性减\"的拥塞控制算法，错误的将网络中的错误丢包也认为是拥塞丢包，导致拥塞窗口被收敛的很小，带宽无法有效利用\n- **SPDY:** 由于SPDY基于TCP，因此存在TCP相同的缺陷问题，并且虽然SPDY采用了多路复用，也做个各类优化，但是由于一个TCP连接只有一个拥塞窗口，因此一个请求stream丢包，就会导致整个通道被阻塞\n\n### 2. 握手的N-RTT的开销\n\n#### 现状\n\n目前TCP与SSL/TLS(1.0,1.1,1.2)，每次建连需要TCP三次握手+安全握手需要: `4~5-RRT`，导致建连效率低下，Google、Facebook、Tencent(Wechat)等公司推出了各类优化策略。\n\n#### 应对\n\n- **TLS1.3:** 安全握手提出了0-RTT草案\n- **QUIC:** 通过实现自己的安全模块，整个握手过程(TCP + TLS)采用全新的0-RTT方案，并计划当完成时适配到TLS1.3中\n- **Proxygen:** Facebook基于QUIC的0-RTT协议进行优化，保证安全握手最多只有1-RTT，并运用在TCP中 ，并将贡献各类优化成果给TLS1.3\n- **mmtls:** Wechat基于TLS1.3草案中的0-RTT，进行优化推出自己的mmtls，其对于长连接保障安全握手1-RTT，对于短连接安全握手尽可能使用0-RTT\n\n#### 存在该缺陷的协议\n\n- **SSL、TLS1.3之前版本:**  在TLS1.2中，需要2~1-RTT(全握手需要2-RTT)\n\n### 3. 冗余数据\n\n#### 现状\n\n通常的一般的Http请求，每次请求header基本上没什么变化；在一些情况下多个页面使用相同静态资源(js、logo等)，却每次都重复下载。\n\n#### 应对\n\n- **SPDY:** 采用[DEFLATE](http://zh.wikipedia.org/wiki/DEFLATE)对请求头/响应头进行压缩\n- **HTTP/2:**采用[HPACK](http://http2.github.io/http2-spec/compression.html)算法对请求头/响应头进行压缩，并且通讯双方各自cache一份header fields表，避免了重复header的传输\n- **QUIC:** 目前版本采用[HPACK](http://http2.github.io/http2-spec/compression.html)算法对请求头/响应头进行压缩\n- **HTTP/1.1、HTTP/2:** 支持`Cache-Control`用于控制资源有效时间,支持`Last-Modified`来控制资源是否可复用\n- **Facebook geek方案:**  将`expiration time`全部设置为1年，所有的资源请求链接，都采用概念性的连接(在请求链接后加上资源名的md5，再做mapping)(只要资源不变化链接就不变化)，保证已下载资源能被有效利用的同时，避免重复检测资源有效性\n- **浏览器优化:** Facebook联系Chrome与Firefox，针对复用资源可复用检测频率进行调整(如firefox支持在`cache-control`中的`immutable`关键字表示资源不可变不用重复检测)\n\n#### 存在该缺陷的协议\n\n- **HTTP/1:** 请求头未做压缩，不支持`Cache-Control`与`Last-Modified`因此存在冗余资源重复下载问题\n- **HTTP/1.1:** 请求头未做压缩\n\n### 4. 预准备\n\n- **Taobao:** DNS-Prefetch、Preconnect、Prefetch、Flush HTML early、PreRender\n- **SPDY、HTTP/2、QUIC:**: 允许服务端主动推服务端认为客户端需要的静态资源\n\n### 5. 负载均衡、超时策略优化与其他\n\n- **负载均衡:** 收益较小的长连接，带来服务端没必要的性能开销\n- **超时策略:** 策略性的调整建连与维连时的超时重连的频率、时间、IP/端口，来应对弱网状况，何时快速放弃节约资源(无网状态)，何时找到可用资源快速恢复连接(被劫持、服务器某端口/IP故障、基站繁忙、连接信号弱、丢包率高)\n- **策略性阻塞:** 根据网络情况、请求数目动态调整连接数来保证吞吐量与稳定性（如SPDY、HTTP/2、QUIC中的多路复用）\n- **DNS:** 结合TTL有效管理本地DNS缓存的有效时间、以及缓存大小来减少DNS查询的阻塞，以及可以通过HTTPDNS优化DNS请求的线路以及来避免DNS被篡改等问题(如果使用okhttp3，可以指定DNS，并且可以为请求设定缓存大小与时间，可以很轻易的实现自己的HTTPDNS)\n\n## II. 常见协议区分\n\n### 1. TCP\n\n目前应用最广泛的可靠的、有序的、自带问题校验修复([error-checked](https://en.wikipedia.org/wiki/Error_detection_and_correction))、传输协议，通常情况下发送端与接收端通过TCP协议来保障数据的可靠到达，中间层通过IP协议来路由数据的传递。\n\n<center>![image_1b8j1od7f11rspea7gi1stssbq9.png-104.2kB][1]</center>\n\n- **建连:** 通过三次握手，保障连接已可靠连接\n- **超时重试:** 通过连接超时重试、读写超时重试机制，来保障连接的稳定性\n- **拥塞控制:** 通过\"加性增，乘性减\"算法，来保障尽量少的报文传输尽量多的数据的同时，减少丢包重传的概率\n- **校验和:** 通过对TCP/IP头进行\"校验和\"检查，来保障传输数据与地址信息的可靠\n- **有序性:** 通过\"序列号\"来鉴别每个字节数据，保证接收端能够有序的重建传输数据，以及校验数据完整性\n- **应答机制:** 每次接收端会发送Acks(Acknowledgements)给发送端告知数据以被接收\n- **断连:** 通过四次挥手，保障连接已可靠断开\n\n### 3. HTTP\n\n#### `HTTP1.1` vs `HTTP1.0`\n\n- **更灵活缓存处理:** 引入Etag(Entity tag)等目前常用的缓存相关策略\n- **优化带宽使用:** 引入`range`头域，支持206(Partial Content)，用于数据断点续传。\n- **错误机制更完善:** 引入24个错误状态码，如409(Conflict)请求资源与当前状态冲突； 410(Gone)资源在服务器上被永久删除\n- **Host头处理:** 请求头中必须带上`host`，否则会报400 Bad Request，为了支持一台服务器上有多台虚拟主机，因此通常一个IP对应了多个域名。\n- **长连接:** 默认`Connection: keep-alive`，以复用已建连通道，不像`http1.0`每个请求都需要重新创建\n\n### 4. HTTPS\n\n1994年由**网景**提出，并应用在网景导航者浏览器中。最新的HTTPS协议在2000年5月公布的`RFC 2818`正式确定。\n\nHTTPS协议是基于TLS(Transport Layer Security)/SSL(Secure Sockets Layer)对数据进行加密校验，保障了网络通信中的数据安全。\n\n在当前大陆的网络环境而言，是有效避免运营商劫持的手段。\n\n<center>![image_1b8ji5se91a1kvn431umcc2vk9.png-44.3kB][2]</center>\n\n- **SSL与TLS:** 早期HTTPS是通过SSL对数据验证加密，后SSL逐渐演变为现在的TLS，所以大多数为了有效的支持加密，都同时支持了SSL与STL\n- **TLS提高了SSL:** 虽然最早的TLS1.0与SSL3.0非常类似，但是TLS采用HMAC(keyed-Hashing for Message Authentication Code)算法对数据验证相比SSL的MAC(Message Authentication Code)算法会更难破解，并且在其他方面也有一些小的改进\n- **请求端口:** 443\n\n\n### 5. SPDY\n\n> 读音speedy\n\n是谷歌开发为了加快网页加载速度的网络协议。\n\nSPDY兼容性: http://caniuse.com/#feat=spdy\n\n<center>![image_1b8jj8l511lag13eslpm1al918krm.png-23.8kB][3]</center>\n\n- **采用多路复用(multiplexing):** 多个请求stream共享一个tcp连接， 降低延时、提高带宽利用率\n- **请求优先级:** 允许给每个请求设置优先级，使得重要的请求得到优先响应\n- **TLS/SSL的加密传输:** 强制要求使用TLS/SSL提高数据安全可靠性\n- **压缩`请求头/响应头`:** 通过DEFLATE或gzip算法进行对`请求头/响应头`进行压缩\n- **支持Server Push:** 允许服务端主动的推送资源(js、css)给客户端，当分析获知客户端将会需要时，以此利用起空闲带宽\n- **支持Server Hints:** 允许服务端可以在客户端还没有发现将需要哪些资源的时候，主动通知客户端，以便于客户端实现准备好相关资源的缓存\n\n### 6. HTTP/2\n\n> HTTP/2基于SPDY设计\n\n<center>![image_1b90ik3e01di41tgr16hc12ks19uvp.png-129.5kB][4]</center>\n<center>![image_1b8jku3ol1rbveu4es1tp8rk61j.png-125kB][5]</center>\n\n#### HTTP/2 vs SPDY\n\n- **SSL/TLS:** SPDY强制使用SSL/TLS，HTTP/2非强制(但是部分浏览器(如Chrome)不允许，所以目前如果使用HTTP/2最好都配置SSL/TLS)\n- **消息头压缩算法:** HTTP/2消息头压缩算法采用[HPACK](http://http2.github.io/http2-spec/compression.html)，SPDY采用[DEFLATE](http://zh.wikipedia.org/wiki/DEFLATE)，一般情况下HPACK的压缩率会高于DEFLATE\n- **传输格式:** HTTP/2传输采用二进制而非文本，因此HTTP/2中的基本单位是帧, 文本形式众多很难权衡健壮、性能与复杂度，二进制弥补了这个缺陷，并且是无序的帧，最终根据头帧重新组装\n- **继承与优化:** HTTP/2继承并优化了SPDY的多路复用与Server Push\n\n### 7. QUIC\n\n> 发音`quick`\n\n> QUIC 参考了HTTP/2与SPDY，可靠的，多路复用的基于UDP的网络协议，内置安全加密模块，低延迟、运行在用户空间、开源的新一代网络协议。Google计划在完成后将其服务于所有的Google服务。\n\n> Google在2013年10月第一次在IETF展示QUIC, 2016年7月启动工作群,\n\n可靠的，多路复用的基于UDP的网络协议，内置安全加密模块，低延迟、运行在用户空间、开源的新一代网络协议。Google计划在完成后将其服务于所有的Google服务。\n\n<center>![][6]</center>\n<center>![][7]</center>\n\n- **减少建连延迟:** 从未访问过服务的情况下1-RTT，其他的可以立马开始传输数据(0-RTT)\n- **拥塞控制:** 提升TCP Cubic拥塞控制\n- **HOL阻塞:** 消除多路复用中的HOL阻塞(head-of-line blocking)\n- **更少的帧消耗:** Quic数据包包含更少的帧，因此更多的数据包可以携带数据\n- **提升丢包重试:** 丢包重试时使用新的序列号以及采用重新加密\n- **安全加密:** 内置的加密模块(支持SNI，因此支持一个IP部署多个证书)，并且是默认打开的，相比TLS更高效的向前加密 - 完成以后，将计划适配到TLS 1.3中\n- **端口:** 使用443端口来处理UDP协议数据 - [Port 80/443 UDP Traffic to Google?](https://community.spiceworks.com/topic/601177-port-80-443-udp-traffic-to-google)\n- **其他:** 更好的FEC(Forward error correction)机制、与Connection migration机制\n\n---\n\n- [从tcp原理角度理解Broken pipe和Connection Reset by Peer的区别](http://lovestblog.cn/blog/2014/05/20/tcp-broken-pipe/)\n- [淘宝HTTPS探索](http://velocity.oreilly.com.cn/2015/ppts/lizhenyu.pdf)\n- [HTTP,HTTP/2,SPDY,HTTPS你应该知道的一些事](http://www.alloyteam.com/2016/07/httphttp2-0spdyhttps-reading-this-is-enough/)\n- [QUIC Geek FAQ](https://docs.google.com/document/d/1lmL9EF6qKrk7gbazY8bIdvq3Pno2Xj_l_YShP40GLQE)\n- [google/bbr](https://github.com/google/bbr)\n- [滑动窗口和拥塞窗口简述](http://www.cnblogs.com/mydomain/archive/2013/04/18/3027668.html)\n- [BBR算法原理 - 李博杰](https://www.zhihu.com/question/53559433)\n- [QUIC - Next generation multiplexed transport over UDP](https://www.nanog.org/sites/default/files/meetings/NANOG64/1051/20150603_Rogan_Quic_Next_Generation_v1.pdf)\n- [Building Zero protocol for fast, secure mobile connections](https://code.facebook.com/posts/608854979307125/building-zero-protocol-for-fast-secure-mobile-connections/)\n- [基于TLS1.3的微信安全通信协议mmtls介绍](https://github.com/WeMobileDev/article/blob/master/%E5%9F%BA%E4%BA%8ETLS1.3%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%AE%89%E5%85%A8%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AEmmtls%E4%BB%8B%E7%BB%8D.md)\n- [QUIC Wire Layout Specification](https://docs.google.com/document/d/1WJvyZflAO2pq77yOLbp9NsGjC1CHetAXV8I0fQe-B_U/edit)\n- [SPDY - Wiki](https://en.wikipedia.org/wiki/SPDY)\n- [This browser tweak saved 60% of requests to Facebook](https://code.facebook.com/posts/557147474482256/this-browser-tweak-saved-60-of-requests-to-facebook/)\n- [HTTP2学习(四)—HTTP2的新特性](http://jiaolonghuang.github.io/2015/08/16/http2/)\n- [Server Push and Server Hints](https://www.chromium.org/spdy/link-headers-and-server-hint)\n- [What is TLS/SSL?](https://technet.microsoft.com/en-us/library/cc784450(v=ws.10).aspx)\n- [QUIC - Google-peering](http://peering.google.com/#/learn-more/quic)\n- [QUIC教材](https://www.chromium.org/quic)\n- [QUIC视频介绍](https://www.youtube.com/watch?v=hQZ-0mXFmk8)\n\n---\n\n- 文章创建时间: 2017-02-12，[本文迭代日志](https://github.com/Jacksgong/Blog/commits/master/source/_posts/network_basic.md)。\n\n---\n\n> © 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n\n  [1]: /img/network_basic-1.png\n  [2]: /img/network_basic-2.png\n  [3]: /img/network_basic-3.png\n  [4]: /img/network_basic-4.png\n  [5]: /img/network_basic-5.png\n  [6]: /img/network_basic-6.png\n  [7]: /img/network_basic-7.png\n","slug":"network_basic","published":1,"updated":"2017-02-16T14:40:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66ja003i95budeo3rrc0","content":"<h2 id=\"I-协议优化演进\"><a href=\"#I-协议优化演进\" class=\"headerlink\" title=\"I. 协议优化演进\"></a>I. 协议优化演进</h2><h3 id=\"1-带宽与拥塞\"><a href=\"#1-带宽与拥塞\" class=\"headerlink\" title=\"1. 带宽与拥塞\"></a>1. 带宽与拥塞</h3><h4 id=\"现状\"><a href=\"#现状\" class=\"headerlink\" title=\"现状\"></a>现状</h4><p>目前的网络基建越来越好，因此带宽的已经不再是瓶颈， 但是由于相关协议(如TCP)的拥塞窗口(CWND, congestion window)控制，很多时候并没有将带宽有效的利用，因此更有效的利用带宽是一个优化方向，特别针对视频、游戏等领域。</p>\n<h4 id=\"应对\"><a href=\"#应对\" class=\"headerlink\" title=\"应对\"></a>应对</h4><ul>\n<li><strong>QUIC:</strong> 基于UDP，QUIC可以支持无序的递交，因此通常单个丢包最多只会影响1个请求stream，并且QUIC中一定程度上拆分拥塞窗口来更好的适配多个多路复用的连接，来尽可能的利用带宽，目前已经在Youtube以及一些Google通用库(如字体库)上应用</li>\n<li><strong>HTTP:</strong> 通过同时建立多个连接通道，由于每个通道有单独的拥塞窗口保证一个丢包最多只拥塞一个连接通道</li>\n<li><strong>BBR:</strong> Google推出的全新的阻塞策略方案，从根本上解决该问题，通过交替测量带宽和激进的估算算法尽可能的占满带宽与降低延迟（此方式极大的提高了带宽利用率），目前已经在Youtube上应用</li>\n</ul>\n<a id=\"more\"></a>\n<h4 id=\"存在该缺陷的协议\"><a href=\"#存在该缺陷的协议\" class=\"headerlink\" title=\"存在该缺陷的协议\"></a>存在该缺陷的协议</h4><ul>\n<li><strong>TCP:</strong> 由于采用”加性增，乘性减”的拥塞控制算法，错误的将网络中的错误丢包也认为是拥塞丢包，导致拥塞窗口被收敛的很小，带宽无法有效利用</li>\n<li><strong>SPDY:</strong> 由于SPDY基于TCP，因此存在TCP相同的缺陷问题，并且虽然SPDY采用了多路复用，也做个各类优化，但是由于一个TCP连接只有一个拥塞窗口，因此一个请求stream丢包，就会导致整个通道被阻塞</li>\n</ul>\n<h3 id=\"2-握手的N-RTT的开销\"><a href=\"#2-握手的N-RTT的开销\" class=\"headerlink\" title=\"2. 握手的N-RTT的开销\"></a>2. 握手的N-RTT的开销</h3><h4 id=\"现状-1\"><a href=\"#现状-1\" class=\"headerlink\" title=\"现状\"></a>现状</h4><p>目前TCP与SSL/TLS(1.0,1.1,1.2)，每次建连需要TCP三次握手+安全握手需要: <code>4~5-RRT</code>，导致建连效率低下，Google、Facebook、Tencent(Wechat)等公司推出了各类优化策略。</p>\n<h4 id=\"应对-1\"><a href=\"#应对-1\" class=\"headerlink\" title=\"应对\"></a>应对</h4><ul>\n<li><strong>TLS1.3:</strong> 安全握手提出了0-RTT草案</li>\n<li><strong>QUIC:</strong> 通过实现自己的安全模块，整个握手过程(TCP + TLS)采用全新的0-RTT方案，并计划当完成时适配到TLS1.3中</li>\n<li><strong>Proxygen:</strong> Facebook基于QUIC的0-RTT协议进行优化，保证安全握手最多只有1-RTT，并运用在TCP中 ，并将贡献各类优化成果给TLS1.3</li>\n<li><strong>mmtls:</strong> Wechat基于TLS1.3草案中的0-RTT，进行优化推出自己的mmtls，其对于长连接保障安全握手1-RTT，对于短连接安全握手尽可能使用0-RTT</li>\n</ul>\n<h4 id=\"存在该缺陷的协议-1\"><a href=\"#存在该缺陷的协议-1\" class=\"headerlink\" title=\"存在该缺陷的协议\"></a>存在该缺陷的协议</h4><ul>\n<li><strong>SSL、TLS1.3之前版本:</strong>  在TLS1.2中，需要2~1-RTT(全握手需要2-RTT)</li>\n</ul>\n<h3 id=\"3-冗余数据\"><a href=\"#3-冗余数据\" class=\"headerlink\" title=\"3. 冗余数据\"></a>3. 冗余数据</h3><h4 id=\"现状-2\"><a href=\"#现状-2\" class=\"headerlink\" title=\"现状\"></a>现状</h4><p>通常的一般的Http请求，每次请求header基本上没什么变化；在一些情况下多个页面使用相同静态资源(js、logo等)，却每次都重复下载。</p>\n<h4 id=\"应对-2\"><a href=\"#应对-2\" class=\"headerlink\" title=\"应对\"></a>应对</h4><ul>\n<li><strong>SPDY:</strong> 采用<a href=\"http://zh.wikipedia.org/wiki/DEFLATE\" target=\"_blank\" rel=\"external\">DEFLATE</a>对请求头/响应头进行压缩</li>\n<li><strong>HTTP/2:</strong>采用<a href=\"http://http2.github.io/http2-spec/compression.html\" target=\"_blank\" rel=\"external\">HPACK</a>算法对请求头/响应头进行压缩，并且通讯双方各自cache一份header fields表，避免了重复header的传输</li>\n<li><strong>QUIC:</strong> 目前版本采用<a href=\"http://http2.github.io/http2-spec/compression.html\" target=\"_blank\" rel=\"external\">HPACK</a>算法对请求头/响应头进行压缩</li>\n<li><strong>HTTP/1.1、HTTP/2:</strong> 支持<code>Cache-Control</code>用于控制资源有效时间,支持<code>Last-Modified</code>来控制资源是否可复用</li>\n<li><strong>Facebook geek方案:</strong>  将<code>expiration time</code>全部设置为1年，所有的资源请求链接，都采用概念性的连接(在请求链接后加上资源名的md5，再做mapping)(只要资源不变化链接就不变化)，保证已下载资源能被有效利用的同时，避免重复检测资源有效性</li>\n<li><strong>浏览器优化:</strong> Facebook联系Chrome与Firefox，针对复用资源可复用检测频率进行调整(如firefox支持在<code>cache-control</code>中的<code>immutable</code>关键字表示资源不可变不用重复检测)</li>\n</ul>\n<h4 id=\"存在该缺陷的协议-2\"><a href=\"#存在该缺陷的协议-2\" class=\"headerlink\" title=\"存在该缺陷的协议\"></a>存在该缺陷的协议</h4><ul>\n<li><strong>HTTP/1:</strong> 请求头未做压缩，不支持<code>Cache-Control</code>与<code>Last-Modified</code>因此存在冗余资源重复下载问题</li>\n<li><strong>HTTP/1.1:</strong> 请求头未做压缩</li>\n</ul>\n<h3 id=\"4-预准备\"><a href=\"#4-预准备\" class=\"headerlink\" title=\"4. 预准备\"></a>4. 预准备</h3><ul>\n<li><strong>Taobao:</strong> DNS-Prefetch、Preconnect、Prefetch、Flush HTML early、PreRender</li>\n<li><strong>SPDY、HTTP/2、QUIC:</strong>: 允许服务端主动推服务端认为客户端需要的静态资源</li>\n</ul>\n<h3 id=\"5-负载均衡、超时策略优化与其他\"><a href=\"#5-负载均衡、超时策略优化与其他\" class=\"headerlink\" title=\"5. 负载均衡、超时策略优化与其他\"></a>5. 负载均衡、超时策略优化与其他</h3><ul>\n<li><strong>负载均衡:</strong> 收益较小的长连接，带来服务端没必要的性能开销</li>\n<li><strong>超时策略:</strong> 策略性的调整建连与维连时的超时重连的频率、时间、IP/端口，来应对弱网状况，何时快速放弃节约资源(无网状态)，何时找到可用资源快速恢复连接(被劫持、服务器某端口/IP故障、基站繁忙、连接信号弱、丢包率高)</li>\n<li><strong>策略性阻塞:</strong> 根据网络情况、请求数目动态调整连接数来保证吞吐量与稳定性（如SPDY、HTTP/2、QUIC中的多路复用）</li>\n<li><strong>DNS:</strong> 结合TTL有效管理本地DNS缓存的有效时间、以及缓存大小来减少DNS查询的阻塞，以及可以通过HTTPDNS优化DNS请求的线路以及来避免DNS被篡改等问题(如果使用okhttp3，可以指定DNS，并且可以为请求设定缓存大小与时间，可以很轻易的实现自己的HTTPDNS)</li>\n</ul>\n<h2 id=\"II-常见协议区分\"><a href=\"#II-常见协议区分\" class=\"headerlink\" title=\"II. 常见协议区分\"></a>II. 常见协议区分</h2><h3 id=\"1-TCP\"><a href=\"#1-TCP\" class=\"headerlink\" title=\"1. TCP\"></a>1. TCP</h3><p>目前应用最广泛的可靠的、有序的、自带问题校验修复(<a href=\"https://en.wikipedia.org/wiki/Error_detection_and_correction\" target=\"_blank\" rel=\"external\">error-checked</a>)、传输协议，通常情况下发送端与接收端通过TCP协议来保障数据的可靠到达，中间层通过IP协议来路由数据的传递。</p>\n<center><img src=\"/img/network_basic-1.png\" alt=\"image_1b8j1od7f11rspea7gi1stssbq9.png-104.2kB\"></center>\n\n<ul>\n<li><strong>建连:</strong> 通过三次握手，保障连接已可靠连接</li>\n<li><strong>超时重试:</strong> 通过连接超时重试、读写超时重试机制，来保障连接的稳定性</li>\n<li><strong>拥塞控制:</strong> 通过”加性增，乘性减”算法，来保障尽量少的报文传输尽量多的数据的同时，减少丢包重传的概率</li>\n<li><strong>校验和:</strong> 通过对TCP/IP头进行”校验和”检查，来保障传输数据与地址信息的可靠</li>\n<li><strong>有序性:</strong> 通过”序列号”来鉴别每个字节数据，保证接收端能够有序的重建传输数据，以及校验数据完整性</li>\n<li><strong>应答机制:</strong> 每次接收端会发送Acks(Acknowledgements)给发送端告知数据以被接收</li>\n<li><strong>断连:</strong> 通过四次挥手，保障连接已可靠断开</li>\n</ul>\n<h3 id=\"3-HTTP\"><a href=\"#3-HTTP\" class=\"headerlink\" title=\"3. HTTP\"></a>3. HTTP</h3><h4 id=\"HTTP1-1-vs-HTTP1-0\"><a href=\"#HTTP1-1-vs-HTTP1-0\" class=\"headerlink\" title=\"HTTP1.1 vs HTTP1.0\"></a><code>HTTP1.1</code> vs <code>HTTP1.0</code></h4><ul>\n<li><strong>更灵活缓存处理:</strong> 引入Etag(Entity tag)等目前常用的缓存相关策略</li>\n<li><strong>优化带宽使用:</strong> 引入<code>range</code>头域，支持206(Partial Content)，用于数据断点续传。</li>\n<li><strong>错误机制更完善:</strong> 引入24个错误状态码，如409(Conflict)请求资源与当前状态冲突； 410(Gone)资源在服务器上被永久删除</li>\n<li><strong>Host头处理:</strong> 请求头中必须带上<code>host</code>，否则会报400 Bad Request，为了支持一台服务器上有多台虚拟主机，因此通常一个IP对应了多个域名。</li>\n<li><strong>长连接:</strong> 默认<code>Connection: keep-alive</code>，以复用已建连通道，不像<code>http1.0</code>每个请求都需要重新创建</li>\n</ul>\n<h3 id=\"4-HTTPS\"><a href=\"#4-HTTPS\" class=\"headerlink\" title=\"4. HTTPS\"></a>4. HTTPS</h3><p>1994年由<strong>网景</strong>提出，并应用在网景导航者浏览器中。最新的HTTPS协议在2000年5月公布的<code>RFC 2818</code>正式确定。</p>\n<p>HTTPS协议是基于TLS(Transport Layer Security)/SSL(Secure Sockets Layer)对数据进行加密校验，保障了网络通信中的数据安全。</p>\n<p>在当前大陆的网络环境而言，是有效避免运营商劫持的手段。</p>\n<center><img src=\"/img/network_basic-2.png\" alt=\"image_1b8ji5se91a1kvn431umcc2vk9.png-44.3kB\"></center>\n\n<ul>\n<li><strong>SSL与TLS:</strong> 早期HTTPS是通过SSL对数据验证加密，后SSL逐渐演变为现在的TLS，所以大多数为了有效的支持加密，都同时支持了SSL与STL</li>\n<li><strong>TLS提高了SSL:</strong> 虽然最早的TLS1.0与SSL3.0非常类似，但是TLS采用HMAC(keyed-Hashing for Message Authentication Code)算法对数据验证相比SSL的MAC(Message Authentication Code)算法会更难破解，并且在其他方面也有一些小的改进</li>\n<li><strong>请求端口:</strong> 443</li>\n</ul>\n<h3 id=\"5-SPDY\"><a href=\"#5-SPDY\" class=\"headerlink\" title=\"5. SPDY\"></a>5. SPDY</h3><blockquote>\n<p>读音speedy</p>\n</blockquote>\n<p>是谷歌开发为了加快网页加载速度的网络协议。</p>\n<p>SPDY兼容性: <a href=\"http://caniuse.com/#feat=spdy\" target=\"_blank\" rel=\"external\">http://caniuse.com/#feat=spdy</a></p>\n<center><img src=\"/img/network_basic-3.png\" alt=\"image_1b8jj8l511lag13eslpm1al918krm.png-23.8kB\"></center>\n\n<ul>\n<li><strong>采用多路复用(multiplexing):</strong> 多个请求stream共享一个tcp连接， 降低延时、提高带宽利用率</li>\n<li><strong>请求优先级:</strong> 允许给每个请求设置优先级，使得重要的请求得到优先响应</li>\n<li><strong>TLS/SSL的加密传输:</strong> 强制要求使用TLS/SSL提高数据安全可靠性</li>\n<li><strong>压缩<code>请求头/响应头</code>:</strong> 通过DEFLATE或gzip算法进行对<code>请求头/响应头</code>进行压缩</li>\n<li><strong>支持Server Push:</strong> 允许服务端主动的推送资源(js、css)给客户端，当分析获知客户端将会需要时，以此利用起空闲带宽</li>\n<li><strong>支持Server Hints:</strong> 允许服务端可以在客户端还没有发现将需要哪些资源的时候，主动通知客户端，以便于客户端实现准备好相关资源的缓存</li>\n</ul>\n<h3 id=\"6-HTTP-2\"><a href=\"#6-HTTP-2\" class=\"headerlink\" title=\"6. HTTP/2\"></a>6. HTTP/2</h3><blockquote>\n<p>HTTP/2基于SPDY设计</p>\n</blockquote>\n<center><img src=\"/img/network_basic-4.png\" alt=\"image_1b90ik3e01di41tgr16hc12ks19uvp.png-129.5kB\"></center><br><center><img src=\"/img/network_basic-5.png\" alt=\"image_1b8jku3ol1rbveu4es1tp8rk61j.png-125kB\"></center>\n\n<h4 id=\"HTTP-2-vs-SPDY\"><a href=\"#HTTP-2-vs-SPDY\" class=\"headerlink\" title=\"HTTP/2 vs SPDY\"></a>HTTP/2 vs SPDY</h4><ul>\n<li><strong>SSL/TLS:</strong> SPDY强制使用SSL/TLS，HTTP/2非强制(但是部分浏览器(如Chrome)不允许，所以目前如果使用HTTP/2最好都配置SSL/TLS)</li>\n<li><strong>消息头压缩算法:</strong> HTTP/2消息头压缩算法采用<a href=\"http://http2.github.io/http2-spec/compression.html\" target=\"_blank\" rel=\"external\">HPACK</a>，SPDY采用<a href=\"http://zh.wikipedia.org/wiki/DEFLATE\" target=\"_blank\" rel=\"external\">DEFLATE</a>，一般情况下HPACK的压缩率会高于DEFLATE</li>\n<li><strong>传输格式:</strong> HTTP/2传输采用二进制而非文本，因此HTTP/2中的基本单位是帧, 文本形式众多很难权衡健壮、性能与复杂度，二进制弥补了这个缺陷，并且是无序的帧，最终根据头帧重新组装</li>\n<li><strong>继承与优化:</strong> HTTP/2继承并优化了SPDY的多路复用与Server Push</li>\n</ul>\n<h3 id=\"7-QUIC\"><a href=\"#7-QUIC\" class=\"headerlink\" title=\"7. QUIC\"></a>7. QUIC</h3><blockquote>\n<p>发音<code>quick</code></p>\n<p>QUIC 参考了HTTP/2与SPDY，可靠的，多路复用的基于UDP的网络协议，内置安全加密模块，低延迟、运行在用户空间、开源的新一代网络协议。Google计划在完成后将其服务于所有的Google服务。</p>\n<p>Google在2013年10月第一次在IETF展示QUIC, 2016年7月启动工作群,</p>\n</blockquote>\n<p>可靠的，多路复用的基于UDP的网络协议，内置安全加密模块，低延迟、运行在用户空间、开源的新一代网络协议。Google计划在完成后将其服务于所有的Google服务。</p>\n<center><img src=\"/img/network_basic-6.png\" alt=\"\"></center><br><center><img src=\"/img/network_basic-7.png\" alt=\"\"></center>\n\n<ul>\n<li><strong>减少建连延迟:</strong> 从未访问过服务的情况下1-RTT，其他的可以立马开始传输数据(0-RTT)</li>\n<li><strong>拥塞控制:</strong> 提升TCP Cubic拥塞控制</li>\n<li><strong>HOL阻塞:</strong> 消除多路复用中的HOL阻塞(head-of-line blocking)</li>\n<li><strong>更少的帧消耗:</strong> Quic数据包包含更少的帧，因此更多的数据包可以携带数据</li>\n<li><strong>提升丢包重试:</strong> 丢包重试时使用新的序列号以及采用重新加密</li>\n<li><strong>安全加密:</strong> 内置的加密模块(支持SNI，因此支持一个IP部署多个证书)，并且是默认打开的，相比TLS更高效的向前加密 - 完成以后，将计划适配到TLS 1.3中</li>\n<li><strong>端口:</strong> 使用443端口来处理UDP协议数据 - <a href=\"https://community.spiceworks.com/topic/601177-port-80-443-udp-traffic-to-google\" target=\"_blank\" rel=\"external\">Port 80/443 UDP Traffic to Google?</a></li>\n<li><strong>其他:</strong> 更好的FEC(Forward error correction)机制、与Connection migration机制</li>\n</ul>\n<hr>\n<ul>\n<li><a href=\"http://lovestblog.cn/blog/2014/05/20/tcp-broken-pipe/\" target=\"_blank\" rel=\"external\">从tcp原理角度理解Broken pipe和Connection Reset by Peer的区别</a></li>\n<li><a href=\"http://velocity.oreilly.com.cn/2015/ppts/lizhenyu.pdf\" target=\"_blank\" rel=\"external\">淘宝HTTPS探索</a></li>\n<li><a href=\"http://www.alloyteam.com/2016/07/httphttp2-0spdyhttps-reading-this-is-enough/\" target=\"_blank\" rel=\"external\">HTTP,HTTP/2,SPDY,HTTPS你应该知道的一些事</a></li>\n<li><a href=\"https://docs.google.com/document/d/1lmL9EF6qKrk7gbazY8bIdvq3Pno2Xj_l_YShP40GLQE\" target=\"_blank\" rel=\"external\">QUIC Geek FAQ</a></li>\n<li><a href=\"https://github.com/google/bbr\" target=\"_blank\" rel=\"external\">google/bbr</a></li>\n<li><a href=\"http://www.cnblogs.com/mydomain/archive/2013/04/18/3027668.html\" target=\"_blank\" rel=\"external\">滑动窗口和拥塞窗口简述</a></li>\n<li><a href=\"https://www.zhihu.com/question/53559433\" target=\"_blank\" rel=\"external\">BBR算法原理 - 李博杰</a></li>\n<li><a href=\"https://www.nanog.org/sites/default/files/meetings/NANOG64/1051/20150603_Rogan_Quic_Next_Generation_v1.pdf\" target=\"_blank\" rel=\"external\">QUIC - Next generation multiplexed transport over UDP</a></li>\n<li><a href=\"https://code.facebook.com/posts/608854979307125/building-zero-protocol-for-fast-secure-mobile-connections/\" target=\"_blank\" rel=\"external\">Building Zero protocol for fast, secure mobile connections</a></li>\n<li><a href=\"https://github.com/WeMobileDev/article/blob/master/%E5%9F%BA%E4%BA%8ETLS1.3%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%AE%89%E5%85%A8%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AEmmtls%E4%BB%8B%E7%BB%8D.md\" target=\"_blank\" rel=\"external\">基于TLS1.3的微信安全通信协议mmtls介绍</a></li>\n<li><a href=\"https://docs.google.com/document/d/1WJvyZflAO2pq77yOLbp9NsGjC1CHetAXV8I0fQe-B_U/edit\" target=\"_blank\" rel=\"external\">QUIC Wire Layout Specification</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/SPDY\" target=\"_blank\" rel=\"external\">SPDY - Wiki</a></li>\n<li><a href=\"https://code.facebook.com/posts/557147474482256/this-browser-tweak-saved-60-of-requests-to-facebook/\" target=\"_blank\" rel=\"external\">This browser tweak saved 60% of requests to Facebook</a></li>\n<li><a href=\"http://jiaolonghuang.github.io/2015/08/16/http2/\" target=\"_blank\" rel=\"external\">HTTP2学习(四)—HTTP2的新特性</a></li>\n<li><a href=\"https://www.chromium.org/spdy/link-headers-and-server-hint\" target=\"_blank\" rel=\"external\">Server Push and Server Hints</a></li>\n<li><a href=\"https://technet.microsoft.com/en-us/library/cc784450(v=ws.10\" target=\"_blank\" rel=\"external\">What is TLS/SSL?</a>.aspx)</li>\n<li><a href=\"http://peering.google.com/#/learn-more/quic\" target=\"_blank\" rel=\"external\">QUIC - Google-peering</a></li>\n<li><a href=\"https://www.chromium.org/quic\" target=\"_blank\" rel=\"external\">QUIC教材</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=hQZ-0mXFmk8\" target=\"_blank\" rel=\"external\">QUIC视频介绍</a></li>\n</ul>\n<hr>\n<ul>\n<li>文章创建时间: 2017-02-12，<a href=\"https://github.com/Jacksgong/Blog/commits/master/source/_posts/network_basic.md\" target=\"_blank\" rel=\"external\">本文迭代日志</a>。</li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<h2 id=\"I-协议优化演进\"><a href=\"#I-协议优化演进\" class=\"headerlink\" title=\"I. 协议优化演进\"></a>I. 协议优化演进</h2><h3 id=\"1-带宽与拥塞\"><a href=\"#1-带宽与拥塞\" class=\"headerlink\" title=\"1. 带宽与拥塞\"></a>1. 带宽与拥塞</h3><h4 id=\"现状\"><a href=\"#现状\" class=\"headerlink\" title=\"现状\"></a>现状</h4><p>目前的网络基建越来越好，因此带宽的已经不再是瓶颈， 但是由于相关协议(如TCP)的拥塞窗口(CWND, congestion window)控制，很多时候并没有将带宽有效的利用，因此更有效的利用带宽是一个优化方向，特别针对视频、游戏等领域。</p>\n<h4 id=\"应对\"><a href=\"#应对\" class=\"headerlink\" title=\"应对\"></a>应对</h4><ul>\n<li><strong>QUIC:</strong> 基于UDP，QUIC可以支持无序的递交，因此通常单个丢包最多只会影响1个请求stream，并且QUIC中一定程度上拆分拥塞窗口来更好的适配多个多路复用的连接，来尽可能的利用带宽，目前已经在Youtube以及一些Google通用库(如字体库)上应用</li>\n<li><strong>HTTP:</strong> 通过同时建立多个连接通道，由于每个通道有单独的拥塞窗口保证一个丢包最多只拥塞一个连接通道</li>\n<li><strong>BBR:</strong> Google推出的全新的阻塞策略方案，从根本上解决该问题，通过交替测量带宽和激进的估算算法尽可能的占满带宽与降低延迟（此方式极大的提高了带宽利用率），目前已经在Youtube上应用</li>\n</ul>","more":"<h4 id=\"存在该缺陷的协议\"><a href=\"#存在该缺陷的协议\" class=\"headerlink\" title=\"存在该缺陷的协议\"></a>存在该缺陷的协议</h4><ul>\n<li><strong>TCP:</strong> 由于采用”加性增，乘性减”的拥塞控制算法，错误的将网络中的错误丢包也认为是拥塞丢包，导致拥塞窗口被收敛的很小，带宽无法有效利用</li>\n<li><strong>SPDY:</strong> 由于SPDY基于TCP，因此存在TCP相同的缺陷问题，并且虽然SPDY采用了多路复用，也做个各类优化，但是由于一个TCP连接只有一个拥塞窗口，因此一个请求stream丢包，就会导致整个通道被阻塞</li>\n</ul>\n<h3 id=\"2-握手的N-RTT的开销\"><a href=\"#2-握手的N-RTT的开销\" class=\"headerlink\" title=\"2. 握手的N-RTT的开销\"></a>2. 握手的N-RTT的开销</h3><h4 id=\"现状-1\"><a href=\"#现状-1\" class=\"headerlink\" title=\"现状\"></a>现状</h4><p>目前TCP与SSL/TLS(1.0,1.1,1.2)，每次建连需要TCP三次握手+安全握手需要: <code>4~5-RRT</code>，导致建连效率低下，Google、Facebook、Tencent(Wechat)等公司推出了各类优化策略。</p>\n<h4 id=\"应对-1\"><a href=\"#应对-1\" class=\"headerlink\" title=\"应对\"></a>应对</h4><ul>\n<li><strong>TLS1.3:</strong> 安全握手提出了0-RTT草案</li>\n<li><strong>QUIC:</strong> 通过实现自己的安全模块，整个握手过程(TCP + TLS)采用全新的0-RTT方案，并计划当完成时适配到TLS1.3中</li>\n<li><strong>Proxygen:</strong> Facebook基于QUIC的0-RTT协议进行优化，保证安全握手最多只有1-RTT，并运用在TCP中 ，并将贡献各类优化成果给TLS1.3</li>\n<li><strong>mmtls:</strong> Wechat基于TLS1.3草案中的0-RTT，进行优化推出自己的mmtls，其对于长连接保障安全握手1-RTT，对于短连接安全握手尽可能使用0-RTT</li>\n</ul>\n<h4 id=\"存在该缺陷的协议-1\"><a href=\"#存在该缺陷的协议-1\" class=\"headerlink\" title=\"存在该缺陷的协议\"></a>存在该缺陷的协议</h4><ul>\n<li><strong>SSL、TLS1.3之前版本:</strong>  在TLS1.2中，需要2~1-RTT(全握手需要2-RTT)</li>\n</ul>\n<h3 id=\"3-冗余数据\"><a href=\"#3-冗余数据\" class=\"headerlink\" title=\"3. 冗余数据\"></a>3. 冗余数据</h3><h4 id=\"现状-2\"><a href=\"#现状-2\" class=\"headerlink\" title=\"现状\"></a>现状</h4><p>通常的一般的Http请求，每次请求header基本上没什么变化；在一些情况下多个页面使用相同静态资源(js、logo等)，却每次都重复下载。</p>\n<h4 id=\"应对-2\"><a href=\"#应对-2\" class=\"headerlink\" title=\"应对\"></a>应对</h4><ul>\n<li><strong>SPDY:</strong> 采用<a href=\"http://zh.wikipedia.org/wiki/DEFLATE\">DEFLATE</a>对请求头/响应头进行压缩</li>\n<li><strong>HTTP/2:</strong>采用<a href=\"http://http2.github.io/http2-spec/compression.html\">HPACK</a>算法对请求头/响应头进行压缩，并且通讯双方各自cache一份header fields表，避免了重复header的传输</li>\n<li><strong>QUIC:</strong> 目前版本采用<a href=\"http://http2.github.io/http2-spec/compression.html\">HPACK</a>算法对请求头/响应头进行压缩</li>\n<li><strong>HTTP/1.1、HTTP/2:</strong> 支持<code>Cache-Control</code>用于控制资源有效时间,支持<code>Last-Modified</code>来控制资源是否可复用</li>\n<li><strong>Facebook geek方案:</strong>  将<code>expiration time</code>全部设置为1年，所有的资源请求链接，都采用概念性的连接(在请求链接后加上资源名的md5，再做mapping)(只要资源不变化链接就不变化)，保证已下载资源能被有效利用的同时，避免重复检测资源有效性</li>\n<li><strong>浏览器优化:</strong> Facebook联系Chrome与Firefox，针对复用资源可复用检测频率进行调整(如firefox支持在<code>cache-control</code>中的<code>immutable</code>关键字表示资源不可变不用重复检测)</li>\n</ul>\n<h4 id=\"存在该缺陷的协议-2\"><a href=\"#存在该缺陷的协议-2\" class=\"headerlink\" title=\"存在该缺陷的协议\"></a>存在该缺陷的协议</h4><ul>\n<li><strong>HTTP/1:</strong> 请求头未做压缩，不支持<code>Cache-Control</code>与<code>Last-Modified</code>因此存在冗余资源重复下载问题</li>\n<li><strong>HTTP/1.1:</strong> 请求头未做压缩</li>\n</ul>\n<h3 id=\"4-预准备\"><a href=\"#4-预准备\" class=\"headerlink\" title=\"4. 预准备\"></a>4. 预准备</h3><ul>\n<li><strong>Taobao:</strong> DNS-Prefetch、Preconnect、Prefetch、Flush HTML early、PreRender</li>\n<li><strong>SPDY、HTTP/2、QUIC:</strong>: 允许服务端主动推服务端认为客户端需要的静态资源</li>\n</ul>\n<h3 id=\"5-负载均衡、超时策略优化与其他\"><a href=\"#5-负载均衡、超时策略优化与其他\" class=\"headerlink\" title=\"5. 负载均衡、超时策略优化与其他\"></a>5. 负载均衡、超时策略优化与其他</h3><ul>\n<li><strong>负载均衡:</strong> 收益较小的长连接，带来服务端没必要的性能开销</li>\n<li><strong>超时策略:</strong> 策略性的调整建连与维连时的超时重连的频率、时间、IP/端口，来应对弱网状况，何时快速放弃节约资源(无网状态)，何时找到可用资源快速恢复连接(被劫持、服务器某端口/IP故障、基站繁忙、连接信号弱、丢包率高)</li>\n<li><strong>策略性阻塞:</strong> 根据网络情况、请求数目动态调整连接数来保证吞吐量与稳定性（如SPDY、HTTP/2、QUIC中的多路复用）</li>\n<li><strong>DNS:</strong> 结合TTL有效管理本地DNS缓存的有效时间、以及缓存大小来减少DNS查询的阻塞，以及可以通过HTTPDNS优化DNS请求的线路以及来避免DNS被篡改等问题(如果使用okhttp3，可以指定DNS，并且可以为请求设定缓存大小与时间，可以很轻易的实现自己的HTTPDNS)</li>\n</ul>\n<h2 id=\"II-常见协议区分\"><a href=\"#II-常见协议区分\" class=\"headerlink\" title=\"II. 常见协议区分\"></a>II. 常见协议区分</h2><h3 id=\"1-TCP\"><a href=\"#1-TCP\" class=\"headerlink\" title=\"1. TCP\"></a>1. TCP</h3><p>目前应用最广泛的可靠的、有序的、自带问题校验修复(<a href=\"https://en.wikipedia.org/wiki/Error_detection_and_correction\">error-checked</a>)、传输协议，通常情况下发送端与接收端通过TCP协议来保障数据的可靠到达，中间层通过IP协议来路由数据的传递。</p>\n<center><img src=\"/img/network_basic-1.png\" alt=\"image_1b8j1od7f11rspea7gi1stssbq9.png-104.2kB\"></center>\n\n<ul>\n<li><strong>建连:</strong> 通过三次握手，保障连接已可靠连接</li>\n<li><strong>超时重试:</strong> 通过连接超时重试、读写超时重试机制，来保障连接的稳定性</li>\n<li><strong>拥塞控制:</strong> 通过”加性增，乘性减”算法，来保障尽量少的报文传输尽量多的数据的同时，减少丢包重传的概率</li>\n<li><strong>校验和:</strong> 通过对TCP/IP头进行”校验和”检查，来保障传输数据与地址信息的可靠</li>\n<li><strong>有序性:</strong> 通过”序列号”来鉴别每个字节数据，保证接收端能够有序的重建传输数据，以及校验数据完整性</li>\n<li><strong>应答机制:</strong> 每次接收端会发送Acks(Acknowledgements)给发送端告知数据以被接收</li>\n<li><strong>断连:</strong> 通过四次挥手，保障连接已可靠断开</li>\n</ul>\n<h3 id=\"3-HTTP\"><a href=\"#3-HTTP\" class=\"headerlink\" title=\"3. HTTP\"></a>3. HTTP</h3><h4 id=\"HTTP1-1-vs-HTTP1-0\"><a href=\"#HTTP1-1-vs-HTTP1-0\" class=\"headerlink\" title=\"HTTP1.1 vs HTTP1.0\"></a><code>HTTP1.1</code> vs <code>HTTP1.0</code></h4><ul>\n<li><strong>更灵活缓存处理:</strong> 引入Etag(Entity tag)等目前常用的缓存相关策略</li>\n<li><strong>优化带宽使用:</strong> 引入<code>range</code>头域，支持206(Partial Content)，用于数据断点续传。</li>\n<li><strong>错误机制更完善:</strong> 引入24个错误状态码，如409(Conflict)请求资源与当前状态冲突； 410(Gone)资源在服务器上被永久删除</li>\n<li><strong>Host头处理:</strong> 请求头中必须带上<code>host</code>，否则会报400 Bad Request，为了支持一台服务器上有多台虚拟主机，因此通常一个IP对应了多个域名。</li>\n<li><strong>长连接:</strong> 默认<code>Connection: keep-alive</code>，以复用已建连通道，不像<code>http1.0</code>每个请求都需要重新创建</li>\n</ul>\n<h3 id=\"4-HTTPS\"><a href=\"#4-HTTPS\" class=\"headerlink\" title=\"4. HTTPS\"></a>4. HTTPS</h3><p>1994年由<strong>网景</strong>提出，并应用在网景导航者浏览器中。最新的HTTPS协议在2000年5月公布的<code>RFC 2818</code>正式确定。</p>\n<p>HTTPS协议是基于TLS(Transport Layer Security)/SSL(Secure Sockets Layer)对数据进行加密校验，保障了网络通信中的数据安全。</p>\n<p>在当前大陆的网络环境而言，是有效避免运营商劫持的手段。</p>\n<center><img src=\"/img/network_basic-2.png\" alt=\"image_1b8ji5se91a1kvn431umcc2vk9.png-44.3kB\"></center>\n\n<ul>\n<li><strong>SSL与TLS:</strong> 早期HTTPS是通过SSL对数据验证加密，后SSL逐渐演变为现在的TLS，所以大多数为了有效的支持加密，都同时支持了SSL与STL</li>\n<li><strong>TLS提高了SSL:</strong> 虽然最早的TLS1.0与SSL3.0非常类似，但是TLS采用HMAC(keyed-Hashing for Message Authentication Code)算法对数据验证相比SSL的MAC(Message Authentication Code)算法会更难破解，并且在其他方面也有一些小的改进</li>\n<li><strong>请求端口:</strong> 443</li>\n</ul>\n<h3 id=\"5-SPDY\"><a href=\"#5-SPDY\" class=\"headerlink\" title=\"5. SPDY\"></a>5. SPDY</h3><blockquote>\n<p>读音speedy</p>\n</blockquote>\n<p>是谷歌开发为了加快网页加载速度的网络协议。</p>\n<p>SPDY兼容性: <a href=\"http://caniuse.com/#feat=spdy\">http://caniuse.com/#feat=spdy</a></p>\n<center><img src=\"/img/network_basic-3.png\" alt=\"image_1b8jj8l511lag13eslpm1al918krm.png-23.8kB\"></center>\n\n<ul>\n<li><strong>采用多路复用(multiplexing):</strong> 多个请求stream共享一个tcp连接， 降低延时、提高带宽利用率</li>\n<li><strong>请求优先级:</strong> 允许给每个请求设置优先级，使得重要的请求得到优先响应</li>\n<li><strong>TLS/SSL的加密传输:</strong> 强制要求使用TLS/SSL提高数据安全可靠性</li>\n<li><strong>压缩<code>请求头/响应头</code>:</strong> 通过DEFLATE或gzip算法进行对<code>请求头/响应头</code>进行压缩</li>\n<li><strong>支持Server Push:</strong> 允许服务端主动的推送资源(js、css)给客户端，当分析获知客户端将会需要时，以此利用起空闲带宽</li>\n<li><strong>支持Server Hints:</strong> 允许服务端可以在客户端还没有发现将需要哪些资源的时候，主动通知客户端，以便于客户端实现准备好相关资源的缓存</li>\n</ul>\n<h3 id=\"6-HTTP-2\"><a href=\"#6-HTTP-2\" class=\"headerlink\" title=\"6. HTTP/2\"></a>6. HTTP/2</h3><blockquote>\n<p>HTTP/2基于SPDY设计</p>\n</blockquote>\n<center><img src=\"/img/network_basic-4.png\" alt=\"image_1b90ik3e01di41tgr16hc12ks19uvp.png-129.5kB\"></center><br><center><img src=\"/img/network_basic-5.png\" alt=\"image_1b8jku3ol1rbveu4es1tp8rk61j.png-125kB\"></center>\n\n<h4 id=\"HTTP-2-vs-SPDY\"><a href=\"#HTTP-2-vs-SPDY\" class=\"headerlink\" title=\"HTTP/2 vs SPDY\"></a>HTTP/2 vs SPDY</h4><ul>\n<li><strong>SSL/TLS:</strong> SPDY强制使用SSL/TLS，HTTP/2非强制(但是部分浏览器(如Chrome)不允许，所以目前如果使用HTTP/2最好都配置SSL/TLS)</li>\n<li><strong>消息头压缩算法:</strong> HTTP/2消息头压缩算法采用<a href=\"http://http2.github.io/http2-spec/compression.html\">HPACK</a>，SPDY采用<a href=\"http://zh.wikipedia.org/wiki/DEFLATE\">DEFLATE</a>，一般情况下HPACK的压缩率会高于DEFLATE</li>\n<li><strong>传输格式:</strong> HTTP/2传输采用二进制而非文本，因此HTTP/2中的基本单位是帧, 文本形式众多很难权衡健壮、性能与复杂度，二进制弥补了这个缺陷，并且是无序的帧，最终根据头帧重新组装</li>\n<li><strong>继承与优化:</strong> HTTP/2继承并优化了SPDY的多路复用与Server Push</li>\n</ul>\n<h3 id=\"7-QUIC\"><a href=\"#7-QUIC\" class=\"headerlink\" title=\"7. QUIC\"></a>7. QUIC</h3><blockquote>\n<p>发音<code>quick</code></p>\n<p>QUIC 参考了HTTP/2与SPDY，可靠的，多路复用的基于UDP的网络协议，内置安全加密模块，低延迟、运行在用户空间、开源的新一代网络协议。Google计划在完成后将其服务于所有的Google服务。</p>\n<p>Google在2013年10月第一次在IETF展示QUIC, 2016年7月启动工作群,</p>\n</blockquote>\n<p>可靠的，多路复用的基于UDP的网络协议，内置安全加密模块，低延迟、运行在用户空间、开源的新一代网络协议。Google计划在完成后将其服务于所有的Google服务。</p>\n<center><img src=\"/img/network_basic-6.png\" alt=\"\"></center><br><center><img src=\"/img/network_basic-7.png\" alt=\"\"></center>\n\n<ul>\n<li><strong>减少建连延迟:</strong> 从未访问过服务的情况下1-RTT，其他的可以立马开始传输数据(0-RTT)</li>\n<li><strong>拥塞控制:</strong> 提升TCP Cubic拥塞控制</li>\n<li><strong>HOL阻塞:</strong> 消除多路复用中的HOL阻塞(head-of-line blocking)</li>\n<li><strong>更少的帧消耗:</strong> Quic数据包包含更少的帧，因此更多的数据包可以携带数据</li>\n<li><strong>提升丢包重试:</strong> 丢包重试时使用新的序列号以及采用重新加密</li>\n<li><strong>安全加密:</strong> 内置的加密模块(支持SNI，因此支持一个IP部署多个证书)，并且是默认打开的，相比TLS更高效的向前加密 - 完成以后，将计划适配到TLS 1.3中</li>\n<li><strong>端口:</strong> 使用443端口来处理UDP协议数据 - <a href=\"https://community.spiceworks.com/topic/601177-port-80-443-udp-traffic-to-google\">Port 80/443 UDP Traffic to Google?</a></li>\n<li><strong>其他:</strong> 更好的FEC(Forward error correction)机制、与Connection migration机制</li>\n</ul>\n<hr>\n<ul>\n<li><a href=\"http://lovestblog.cn/blog/2014/05/20/tcp-broken-pipe/\">从tcp原理角度理解Broken pipe和Connection Reset by Peer的区别</a></li>\n<li><a href=\"http://velocity.oreilly.com.cn/2015/ppts/lizhenyu.pdf\">淘宝HTTPS探索</a></li>\n<li><a href=\"http://www.alloyteam.com/2016/07/httphttp2-0spdyhttps-reading-this-is-enough/\">HTTP,HTTP/2,SPDY,HTTPS你应该知道的一些事</a></li>\n<li><a href=\"https://docs.google.com/document/d/1lmL9EF6qKrk7gbazY8bIdvq3Pno2Xj_l_YShP40GLQE\">QUIC Geek FAQ</a></li>\n<li><a href=\"https://github.com/google/bbr\">google/bbr</a></li>\n<li><a href=\"http://www.cnblogs.com/mydomain/archive/2013/04/18/3027668.html\">滑动窗口和拥塞窗口简述</a></li>\n<li><a href=\"https://www.zhihu.com/question/53559433\">BBR算法原理 - 李博杰</a></li>\n<li><a href=\"https://www.nanog.org/sites/default/files/meetings/NANOG64/1051/20150603_Rogan_Quic_Next_Generation_v1.pdf\">QUIC - Next generation multiplexed transport over UDP</a></li>\n<li><a href=\"https://code.facebook.com/posts/608854979307125/building-zero-protocol-for-fast-secure-mobile-connections/\">Building Zero protocol for fast, secure mobile connections</a></li>\n<li><a href=\"https://github.com/WeMobileDev/article/blob/master/%E5%9F%BA%E4%BA%8ETLS1.3%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%AE%89%E5%85%A8%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AEmmtls%E4%BB%8B%E7%BB%8D.md\">基于TLS1.3的微信安全通信协议mmtls介绍</a></li>\n<li><a href=\"https://docs.google.com/document/d/1WJvyZflAO2pq77yOLbp9NsGjC1CHetAXV8I0fQe-B_U/edit\">QUIC Wire Layout Specification</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/SPDY\">SPDY - Wiki</a></li>\n<li><a href=\"https://code.facebook.com/posts/557147474482256/this-browser-tweak-saved-60-of-requests-to-facebook/\">This browser tweak saved 60% of requests to Facebook</a></li>\n<li><a href=\"http://jiaolonghuang.github.io/2015/08/16/http2/\">HTTP2学习(四)—HTTP2的新特性</a></li>\n<li><a href=\"https://www.chromium.org/spdy/link-headers-and-server-hint\">Server Push and Server Hints</a></li>\n<li><a href=\"https://technet.microsoft.com/en-us/library/cc784450(v=ws.10\">What is TLS/SSL?</a>.aspx)</li>\n<li><a href=\"http://peering.google.com/#/learn-more/quic\">QUIC - Google-peering</a></li>\n<li><a href=\"https://www.chromium.org/quic\">QUIC教材</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=hQZ-0mXFmk8\">QUIC视频介绍</a></li>\n</ul>\n<hr>\n<ul>\n<li>文章创建时间: 2017-02-12，<a href=\"https://github.com/Jacksgong/Blog/commits/master/source/_posts/network_basic.md\">本文迭代日志</a>。</li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"架构设计基础知识整理","date":"2016-10-25T14:41:03.000Z","_content":"\n> 星星点点的知识点，很早就想做这块整理了，持续维护...\n\n## I. 原则:\n\n> 灵活运用，而非刻意遵循\n\n### 1. 基础原则\n\n> 尽量少的重复代码，低耦合(尽量小的影响)，高内聚\n> 模块，可小到一个类，大到一个系统\n\n<!-- more -->\n\n#### 模块间耦合因素\n\n> 构建架构时，需要谨慎耦合的因素\n\n- 模块间调用\n- 模块间传递的数据量\n- 模块间控制\n- 模块间接口复杂度\n\n#### 模块间耦合从弱到强顺序\n\n> 构建架构或简单的类时，需要根据实际情况尽量契合弱的模块间耦合关系\n> 做到职责分明，简单轻量，尽量少的潜在性的数据流动，尽量少的相互影响，避免牵一发而动全身\n\n1. 非直接耦合: 相互之间没有直接关系，而是由第三方模块控制和调用\n2. 数据耦合: 通过传递`java的内置数据类型`通讯\n3. 标记耦合: 都引用了共同的数据结构，并且通过传递该数据结构通讯\n4. 控制耦合: 通过传递开关、标志、名字等控制信息，明显的控制选择另一个模块的功能\n4. 外部耦合: 都访问一个`java的内置数据类型`的全局变量\n5. 公共耦合: 都访问了一个公共代码块( 全局数据结构、公共通讯区、内存公共覆盖区等)\n6. 内容耦合: 一个模块直接修改另外一个模块的数据。\n\n#### 降低耦合度的方法\n\n- 少用类继承，多用类接口隐藏实现细节\n- 模块功能尽量单一\n- 拒绝重复代码\n- 尽量不使用全局变量(Android中的全局变量会有一些坑，因为Attach在ClassLoader上的，因此根据不同ROM的优化，可能会在未预料的情况被unload，导致数据丢失)\n- 类成员变量与方法少用`public`，多用`private`\n- 尽量不用硬编码(如 字符串放到 `res/string.xml`，SQL语句做一层基于业务的封装供上层使用)\n- 使用设计模式，尽量让模块间的耦合关系保证在数据耦合或更弱\n\n### 2. 原则汇总\n\n| 原则  | 基本概念 | 解决问题 | 基本实现\n| --- | --- | ---\n| 开闭原则 | 对扩展开发，对修改关闭 | 实现热拔插，解耦方式 | 接口、抽象\n| 里氏代换原则 | 子类是父类的具体抽象，抽象并可代表父类(`Is-A`) | 解释抽象化的具体原则 | 继承，抽象\n| 依赖倒转原则 | 针对接口编程，依赖于抽象不依赖于具体 | 易于拓展 | 接口编程时类型使用基类，而不使用具体实现的子类\n| 接口隔离原则 | 使用多个隔离接口，比使用单个接口要好 | 降低耦合 | 封装接口的时候，尽量用不同接口解决不同问题，尽量不要合用一个接口\n| 迪米特法则 | 以实体为单位，实体之间的相互作用尽量的少 | 降低耦合 | 写一个系统架构，或模块的时候，尽量少的对外依赖\n| 合成复用原则 | 优先使用合成/聚合，而非继承 | 可以通过引入抽象类更加灵活，相互耦合变小，更加简单 | 尽量将已有对象纳入到新对象中，成为新对象的一部分，而不使用继承的方式进行复用，如 `ClassLoader` 中双亲委派架构\n\n\n#### 使用组合而非继承的场景:\n\n> 优先使用对象组合，而非继承\n\n- `Has-A`的关系，而非`Is-A`的关系\n- 子类的主要目的是拓展父类，而非`override`或`final`，如果存在大量这种情况，改用组合\n- 引入工具类，而非继承自工具类\n- 有可能或不确定 子类 有可能被替换为 另外一个类的子类的情况 ( 如果出现这种情况，就需要修改。因此还不如使用 组合，如果有类似需求，再 组合如新的对象，进行拓展即可)\n\n\n#### 继承需要注意\n\n> 当已经选择使用继承时，需要注意\n\n- 实现抽象方法，拓展新的特性方法，尽量少的重载父类非抽象方法\n- 重载父类非抽象方法时: 方法前置条件(方法形参)要比父类方法更宽松，方法后置条件(方法返回值)要比父类更严格\n\n#### 类之间的关系与UML表示\n\n![](/img/architecture-class-relate.png)\n\n## II. 常见的模式\n\n### 1. MVC 与 MVP\n\n![](/img/architecutre-mvp-mvc.gif)\nFrom http://msdn.microsoft.com/en-us/library/ff647859.aspx\n\n> MVP(Model-View_Presenter)是MVC(Model-View_Controller)的一个子集。\n\n- MVC中`Controller`控制全局事务，`View`将事件发送给`Controller`，`Controller`处理完事件同步给`Model`(数据库/数据模型)，`View`是通过所绑定的`Model`的改变来刷新自己。\n- MVP中`Presenter`从`View`中获取数据，刷新`Model`，当`Model`中的数据发生改变后，`Presenter`读取`Model`并刷新`View`。\n\n### 2. MVVM\n\n![](/img/architecture-mvvm.png)\n\n> MVVM(View<->ViewModel->Model)\n\n在Android中可以通过`DataBinding`，直接在`Layout`文件中绑定其`ViewModel`。\n\n- `View`: 布局\n- `ViewModel`: 负责显示数据(监听到`Model`中的数据变化进行显示)，以及处理用户交互(监听`View`布局中的用户Action)\n- `Model`: 存储内容\n\n### 3. MVVM-C\n\n![](/img/architecture-mvvm-c.png)\n\n> MVVM-C(View-ViewModel-Callback-Model)\n\n- `View`: 布局\n- `Callback`: 通常可以是`Fragment`或`Activity`，用于处理用户交互(监听`View`布局中的用户Action)\n- `ViewModel`: 显示数据(监听`Model`中的数据变化进行显示)\n- `Model`: 存储内容\n\n## III. 设计模式\n\n### 1. 工厂方法模式\n\n![](/img/architecture-factor-method.png)\n\n### 2. 单例模式\n\n#### Initialization-on-demand holder idiom\n> [Wiki](https://en.wikipedia.org/wiki/Initialization-on-demand_holder_idiom)\n\n> 性能高，线程安全 基于JVM [Class Loader保证Class唯一性线程安全的模型](http://blog.dreamtobe.cn/2015/12/07/android_dynamic_dex/)\n\n```\npublic class Something {\n    private Something() {}\n\n    private static class LazyHolder {\n        private static final Something INSTANCE = new Something();\n    }\n\n    public static Something getInstance() {\n        return LazyHolder.INSTANCE;\n    }\n}\n```\n\n### 3. 建造者模式\n\n> 与工厂模式区别是: 工厂模式关注构建单个类型类型；建造者模式关注构建符合类型对象。\n\n![](/img/architecture-builder-method.png)\n\n### 4. 原型模式\n\n> 当前对象对外提供拷贝方法\n\n#### 浅拷贝\n\n> 除了基本数据类型外，其他类型的对象都只持有当前对象的引用，而非重新创建拷贝\n\n##### Java中的`Object#clone`\n\n1. `Object#clone()`就已经提供了该对象的浅拷贝\n2. 如果需要使用`Object#clone`,需要类实现`Clonable`这个接口，来申明该类对象支持拷贝，否则会抛`CloneNotSupportedException`, 如果对象中存在队列成员变量，队列也需要实现`Clonable`\n\n#### 深拷贝\n\n> 所有成员变量都将重新创建\n\n##### 方式一:\n\n直接序列化(Java中基于JVM层级最简单的让对象支持序列化的方式，实现`Serializable`），拷贝二进制流。\n\n##### 方式二(推荐）：\n\n基于`Object#clone()`将非基本数据类型以外的元素都实现深拷贝，挨个深拷贝返回。\n\n\n### 5. 适配器模式\n\n![](/img/architecture-adapter-method.png)\n\n### 6. 装饰模式\n\n![](/img/architecture-decorator-method.png)\n\n### 7. 代理模式\n\n![](/img/architecture-proxy-method.png)\n\n### 8. 外观模式\n\n![](/img/architecture-facade-method.png)\n\n### 9. 桥接模式\n\n![](/img/architecture-bridge-method.png)\n\n### 10. 组合模式\n\n![](/img/architecture-composite-method.png)\n\n### 11. 享元模式\n\n![](/img/architecture-flyweight-method.png)\n\n### 12. 策略模式\n\n![](/img/architecture-strategy-method.png)\n\n### 13. 模板方法模式\n\n![](/img/architecture-template-method.png)\n\n### 14. 观察者模式\n\n![](/img/architecture-observer-method.png)\n\nTODO\n\n---\n\n- 文章创建时间: 2016-3-9，[本文迭代日志](https://github.com/Jacksgong/Blog/commits/master/source/_posts/oo_architecture.md)。\n\n---\n\n- [Java之美[从菜鸟到高手演变]之设计模式](http://blog.csdn.net/zhangerqing/article/details/8194653)\n- [软件设计原则----合成/聚合复用原则（CARP）](http://blog.csdn.net/beyondhaven/article/details/6906050)\n- [【设计模式】之六大原则（二）](http://m.blog.csdn.net/article/details?id=48834109)\n- [软件设计之——“高内聚低耦合”](http://blog.csdn.net/csh624366188/article/details/7183726)\n- [UML中几种类间关系：继承、实现、依赖、关联、聚合、组合的联系与区别](http://blog.csdn.net/sfdev/article/details/3906243)\n- [UML Class Diagrams](http://pages.cs.wisc.edu/~hasti/cs302/examples/UMLdiagram.html)\n- [Java之美[从菜鸟到高手演变]之设计模式二](http://blog.csdn.net/zhangerqing/article/details/8239539)\n- [Java之美[从菜鸟到高手演变]之设计模式三](http://blog.csdn.net/zhangerqing/article/details/8243942)\n- [Difference between asp.net MVC and MVP? are they both same?](http://stackoverflow.com/questions/19996963/difference-between-asp-net-mvc-and-mvp-are-they-both-same)\n- [Shades of MVVM](https://www.bignerdranch.com/blog/shades-of-mvvm/)\n\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/oo_architecture.md","raw":"title: 架构设计基础知识整理\ndate: 2016-10-25 22:41:03\npermalink: 2016/03/09/oo_architecture\ntags:\n- 架构\n- Android\n- MVC\n- MVP\n- MVVM\n\n---\n\n> 星星点点的知识点，很早就想做这块整理了，持续维护...\n\n## I. 原则:\n\n> 灵活运用，而非刻意遵循\n\n### 1. 基础原则\n\n> 尽量少的重复代码，低耦合(尽量小的影响)，高内聚\n> 模块，可小到一个类，大到一个系统\n\n<!-- more -->\n\n#### 模块间耦合因素\n\n> 构建架构时，需要谨慎耦合的因素\n\n- 模块间调用\n- 模块间传递的数据量\n- 模块间控制\n- 模块间接口复杂度\n\n#### 模块间耦合从弱到强顺序\n\n> 构建架构或简单的类时，需要根据实际情况尽量契合弱的模块间耦合关系\n> 做到职责分明，简单轻量，尽量少的潜在性的数据流动，尽量少的相互影响，避免牵一发而动全身\n\n1. 非直接耦合: 相互之间没有直接关系，而是由第三方模块控制和调用\n2. 数据耦合: 通过传递`java的内置数据类型`通讯\n3. 标记耦合: 都引用了共同的数据结构，并且通过传递该数据结构通讯\n4. 控制耦合: 通过传递开关、标志、名字等控制信息，明显的控制选择另一个模块的功能\n4. 外部耦合: 都访问一个`java的内置数据类型`的全局变量\n5. 公共耦合: 都访问了一个公共代码块( 全局数据结构、公共通讯区、内存公共覆盖区等)\n6. 内容耦合: 一个模块直接修改另外一个模块的数据。\n\n#### 降低耦合度的方法\n\n- 少用类继承，多用类接口隐藏实现细节\n- 模块功能尽量单一\n- 拒绝重复代码\n- 尽量不使用全局变量(Android中的全局变量会有一些坑，因为Attach在ClassLoader上的，因此根据不同ROM的优化，可能会在未预料的情况被unload，导致数据丢失)\n- 类成员变量与方法少用`public`，多用`private`\n- 尽量不用硬编码(如 字符串放到 `res/string.xml`，SQL语句做一层基于业务的封装供上层使用)\n- 使用设计模式，尽量让模块间的耦合关系保证在数据耦合或更弱\n\n### 2. 原则汇总\n\n| 原则  | 基本概念 | 解决问题 | 基本实现\n| --- | --- | ---\n| 开闭原则 | 对扩展开发，对修改关闭 | 实现热拔插，解耦方式 | 接口、抽象\n| 里氏代换原则 | 子类是父类的具体抽象，抽象并可代表父类(`Is-A`) | 解释抽象化的具体原则 | 继承，抽象\n| 依赖倒转原则 | 针对接口编程，依赖于抽象不依赖于具体 | 易于拓展 | 接口编程时类型使用基类，而不使用具体实现的子类\n| 接口隔离原则 | 使用多个隔离接口，比使用单个接口要好 | 降低耦合 | 封装接口的时候，尽量用不同接口解决不同问题，尽量不要合用一个接口\n| 迪米特法则 | 以实体为单位，实体之间的相互作用尽量的少 | 降低耦合 | 写一个系统架构，或模块的时候，尽量少的对外依赖\n| 合成复用原则 | 优先使用合成/聚合，而非继承 | 可以通过引入抽象类更加灵活，相互耦合变小，更加简单 | 尽量将已有对象纳入到新对象中，成为新对象的一部分，而不使用继承的方式进行复用，如 `ClassLoader` 中双亲委派架构\n\n\n#### 使用组合而非继承的场景:\n\n> 优先使用对象组合，而非继承\n\n- `Has-A`的关系，而非`Is-A`的关系\n- 子类的主要目的是拓展父类，而非`override`或`final`，如果存在大量这种情况，改用组合\n- 引入工具类，而非继承自工具类\n- 有可能或不确定 子类 有可能被替换为 另外一个类的子类的情况 ( 如果出现这种情况，就需要修改。因此还不如使用 组合，如果有类似需求，再 组合如新的对象，进行拓展即可)\n\n\n#### 继承需要注意\n\n> 当已经选择使用继承时，需要注意\n\n- 实现抽象方法，拓展新的特性方法，尽量少的重载父类非抽象方法\n- 重载父类非抽象方法时: 方法前置条件(方法形参)要比父类方法更宽松，方法后置条件(方法返回值)要比父类更严格\n\n#### 类之间的关系与UML表示\n\n![](/img/architecture-class-relate.png)\n\n## II. 常见的模式\n\n### 1. MVC 与 MVP\n\n![](/img/architecutre-mvp-mvc.gif)\nFrom http://msdn.microsoft.com/en-us/library/ff647859.aspx\n\n> MVP(Model-View_Presenter)是MVC(Model-View_Controller)的一个子集。\n\n- MVC中`Controller`控制全局事务，`View`将事件发送给`Controller`，`Controller`处理完事件同步给`Model`(数据库/数据模型)，`View`是通过所绑定的`Model`的改变来刷新自己。\n- MVP中`Presenter`从`View`中获取数据，刷新`Model`，当`Model`中的数据发生改变后，`Presenter`读取`Model`并刷新`View`。\n\n### 2. MVVM\n\n![](/img/architecture-mvvm.png)\n\n> MVVM(View<->ViewModel->Model)\n\n在Android中可以通过`DataBinding`，直接在`Layout`文件中绑定其`ViewModel`。\n\n- `View`: 布局\n- `ViewModel`: 负责显示数据(监听到`Model`中的数据变化进行显示)，以及处理用户交互(监听`View`布局中的用户Action)\n- `Model`: 存储内容\n\n### 3. MVVM-C\n\n![](/img/architecture-mvvm-c.png)\n\n> MVVM-C(View-ViewModel-Callback-Model)\n\n- `View`: 布局\n- `Callback`: 通常可以是`Fragment`或`Activity`，用于处理用户交互(监听`View`布局中的用户Action)\n- `ViewModel`: 显示数据(监听`Model`中的数据变化进行显示)\n- `Model`: 存储内容\n\n## III. 设计模式\n\n### 1. 工厂方法模式\n\n![](/img/architecture-factor-method.png)\n\n### 2. 单例模式\n\n#### Initialization-on-demand holder idiom\n> [Wiki](https://en.wikipedia.org/wiki/Initialization-on-demand_holder_idiom)\n\n> 性能高，线程安全 基于JVM [Class Loader保证Class唯一性线程安全的模型](http://blog.dreamtobe.cn/2015/12/07/android_dynamic_dex/)\n\n```\npublic class Something {\n    private Something() {}\n\n    private static class LazyHolder {\n        private static final Something INSTANCE = new Something();\n    }\n\n    public static Something getInstance() {\n        return LazyHolder.INSTANCE;\n    }\n}\n```\n\n### 3. 建造者模式\n\n> 与工厂模式区别是: 工厂模式关注构建单个类型类型；建造者模式关注构建符合类型对象。\n\n![](/img/architecture-builder-method.png)\n\n### 4. 原型模式\n\n> 当前对象对外提供拷贝方法\n\n#### 浅拷贝\n\n> 除了基本数据类型外，其他类型的对象都只持有当前对象的引用，而非重新创建拷贝\n\n##### Java中的`Object#clone`\n\n1. `Object#clone()`就已经提供了该对象的浅拷贝\n2. 如果需要使用`Object#clone`,需要类实现`Clonable`这个接口，来申明该类对象支持拷贝，否则会抛`CloneNotSupportedException`, 如果对象中存在队列成员变量，队列也需要实现`Clonable`\n\n#### 深拷贝\n\n> 所有成员变量都将重新创建\n\n##### 方式一:\n\n直接序列化(Java中基于JVM层级最简单的让对象支持序列化的方式，实现`Serializable`），拷贝二进制流。\n\n##### 方式二(推荐）：\n\n基于`Object#clone()`将非基本数据类型以外的元素都实现深拷贝，挨个深拷贝返回。\n\n\n### 5. 适配器模式\n\n![](/img/architecture-adapter-method.png)\n\n### 6. 装饰模式\n\n![](/img/architecture-decorator-method.png)\n\n### 7. 代理模式\n\n![](/img/architecture-proxy-method.png)\n\n### 8. 外观模式\n\n![](/img/architecture-facade-method.png)\n\n### 9. 桥接模式\n\n![](/img/architecture-bridge-method.png)\n\n### 10. 组合模式\n\n![](/img/architecture-composite-method.png)\n\n### 11. 享元模式\n\n![](/img/architecture-flyweight-method.png)\n\n### 12. 策略模式\n\n![](/img/architecture-strategy-method.png)\n\n### 13. 模板方法模式\n\n![](/img/architecture-template-method.png)\n\n### 14. 观察者模式\n\n![](/img/architecture-observer-method.png)\n\nTODO\n\n---\n\n- 文章创建时间: 2016-3-9，[本文迭代日志](https://github.com/Jacksgong/Blog/commits/master/source/_posts/oo_architecture.md)。\n\n---\n\n- [Java之美[从菜鸟到高手演变]之设计模式](http://blog.csdn.net/zhangerqing/article/details/8194653)\n- [软件设计原则----合成/聚合复用原则（CARP）](http://blog.csdn.net/beyondhaven/article/details/6906050)\n- [【设计模式】之六大原则（二）](http://m.blog.csdn.net/article/details?id=48834109)\n- [软件设计之——“高内聚低耦合”](http://blog.csdn.net/csh624366188/article/details/7183726)\n- [UML中几种类间关系：继承、实现、依赖、关联、聚合、组合的联系与区别](http://blog.csdn.net/sfdev/article/details/3906243)\n- [UML Class Diagrams](http://pages.cs.wisc.edu/~hasti/cs302/examples/UMLdiagram.html)\n- [Java之美[从菜鸟到高手演变]之设计模式二](http://blog.csdn.net/zhangerqing/article/details/8239539)\n- [Java之美[从菜鸟到高手演变]之设计模式三](http://blog.csdn.net/zhangerqing/article/details/8243942)\n- [Difference between asp.net MVC and MVP? are they both same?](http://stackoverflow.com/questions/19996963/difference-between-asp-net-mvc-and-mvp-are-they-both-same)\n- [Shades of MVVM](https://www.bignerdranch.com/blog/shades-of-mvvm/)\n\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2016/03/09/oo_architecture","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66jb003j95buqmeoyhsa","content":"<blockquote>\n<p>星星点点的知识点，很早就想做这块整理了，持续维护…</p>\n</blockquote>\n<h2 id=\"I-原则\"><a href=\"#I-原则\" class=\"headerlink\" title=\"I. 原则:\"></a>I. 原则:</h2><blockquote>\n<p>灵活运用，而非刻意遵循</p>\n</blockquote>\n<h3 id=\"1-基础原则\"><a href=\"#1-基础原则\" class=\"headerlink\" title=\"1. 基础原则\"></a>1. 基础原则</h3><blockquote>\n<p>尽量少的重复代码，低耦合(尽量小的影响)，高内聚<br>模块，可小到一个类，大到一个系统</p>\n</blockquote>\n<a id=\"more\"></a>\n<h4 id=\"模块间耦合因素\"><a href=\"#模块间耦合因素\" class=\"headerlink\" title=\"模块间耦合因素\"></a>模块间耦合因素</h4><blockquote>\n<p>构建架构时，需要谨慎耦合的因素</p>\n</blockquote>\n<ul>\n<li>模块间调用</li>\n<li>模块间传递的数据量</li>\n<li>模块间控制</li>\n<li>模块间接口复杂度</li>\n</ul>\n<h4 id=\"模块间耦合从弱到强顺序\"><a href=\"#模块间耦合从弱到强顺序\" class=\"headerlink\" title=\"模块间耦合从弱到强顺序\"></a>模块间耦合从弱到强顺序</h4><blockquote>\n<p>构建架构或简单的类时，需要根据实际情况尽量契合弱的模块间耦合关系<br>做到职责分明，简单轻量，尽量少的潜在性的数据流动，尽量少的相互影响，避免牵一发而动全身</p>\n</blockquote>\n<ol>\n<li>非直接耦合: 相互之间没有直接关系，而是由第三方模块控制和调用</li>\n<li>数据耦合: 通过传递<code>java的内置数据类型</code>通讯</li>\n<li>标记耦合: 都引用了共同的数据结构，并且通过传递该数据结构通讯</li>\n<li>控制耦合: 通过传递开关、标志、名字等控制信息，明显的控制选择另一个模块的功能</li>\n<li>外部耦合: 都访问一个<code>java的内置数据类型</code>的全局变量</li>\n<li>公共耦合: 都访问了一个公共代码块( 全局数据结构、公共通讯区、内存公共覆盖区等)</li>\n<li>内容耦合: 一个模块直接修改另外一个模块的数据。</li>\n</ol>\n<h4 id=\"降低耦合度的方法\"><a href=\"#降低耦合度的方法\" class=\"headerlink\" title=\"降低耦合度的方法\"></a>降低耦合度的方法</h4><ul>\n<li>少用类继承，多用类接口隐藏实现细节</li>\n<li>模块功能尽量单一</li>\n<li>拒绝重复代码</li>\n<li>尽量不使用全局变量(Android中的全局变量会有一些坑，因为Attach在ClassLoader上的，因此根据不同ROM的优化，可能会在未预料的情况被unload，导致数据丢失)</li>\n<li>类成员变量与方法少用<code>public</code>，多用<code>private</code></li>\n<li>尽量不用硬编码(如 字符串放到 <code>res/string.xml</code>，SQL语句做一层基于业务的封装供上层使用)</li>\n<li>使用设计模式，尽量让模块间的耦合关系保证在数据耦合或更弱</li>\n</ul>\n<h3 id=\"2-原则汇总\"><a href=\"#2-原则汇总\" class=\"headerlink\" title=\"2. 原则汇总\"></a>2. 原则汇总</h3><table>\n<thead>\n<tr>\n<th>原则</th>\n<th>基本概念</th>\n<th>解决问题</th>\n<th>基本实现</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>开闭原则</td>\n<td>对扩展开发，对修改关闭</td>\n<td>实现热拔插，解耦方式</td>\n<td>接口、抽象</td>\n</tr>\n<tr>\n<td>里氏代换原则</td>\n<td>子类是父类的具体抽象，抽象并可代表父类(<code>Is-A</code>)</td>\n<td>解释抽象化的具体原则</td>\n<td>继承，抽象</td>\n</tr>\n<tr>\n<td>依赖倒转原则</td>\n<td>针对接口编程，依赖于抽象不依赖于具体</td>\n<td>易于拓展</td>\n<td>接口编程时类型使用基类，而不使用具体实现的子类</td>\n</tr>\n<tr>\n<td>接口隔离原则</td>\n<td>使用多个隔离接口，比使用单个接口要好</td>\n<td>降低耦合</td>\n<td>封装接口的时候，尽量用不同接口解决不同问题，尽量不要合用一个接口</td>\n</tr>\n<tr>\n<td>迪米特法则</td>\n<td>以实体为单位，实体之间的相互作用尽量的少</td>\n<td>降低耦合</td>\n<td>写一个系统架构，或模块的时候，尽量少的对外依赖</td>\n</tr>\n<tr>\n<td>合成复用原则</td>\n<td>优先使用合成/聚合，而非继承</td>\n<td>可以通过引入抽象类更加灵活，相互耦合变小，更加简单</td>\n<td>尽量将已有对象纳入到新对象中，成为新对象的一部分，而不使用继承的方式进行复用，如 <code>ClassLoader</code> 中双亲委派架构</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"使用组合而非继承的场景\"><a href=\"#使用组合而非继承的场景\" class=\"headerlink\" title=\"使用组合而非继承的场景:\"></a>使用组合而非继承的场景:</h4><blockquote>\n<p>优先使用对象组合，而非继承</p>\n</blockquote>\n<ul>\n<li><code>Has-A</code>的关系，而非<code>Is-A</code>的关系</li>\n<li>子类的主要目的是拓展父类，而非<code>override</code>或<code>final</code>，如果存在大量这种情况，改用组合</li>\n<li>引入工具类，而非继承自工具类</li>\n<li>有可能或不确定 子类 有可能被替换为 另外一个类的子类的情况 ( 如果出现这种情况，就需要修改。因此还不如使用 组合，如果有类似需求，再 组合如新的对象，进行拓展即可)</li>\n</ul>\n<h4 id=\"继承需要注意\"><a href=\"#继承需要注意\" class=\"headerlink\" title=\"继承需要注意\"></a>继承需要注意</h4><blockquote>\n<p>当已经选择使用继承时，需要注意</p>\n</blockquote>\n<ul>\n<li>实现抽象方法，拓展新的特性方法，尽量少的重载父类非抽象方法</li>\n<li>重载父类非抽象方法时: 方法前置条件(方法形参)要比父类方法更宽松，方法后置条件(方法返回值)要比父类更严格</li>\n</ul>\n<h4 id=\"类之间的关系与UML表示\"><a href=\"#类之间的关系与UML表示\" class=\"headerlink\" title=\"类之间的关系与UML表示\"></a>类之间的关系与UML表示</h4><p><img src=\"/img/architecture-class-relate.png\" alt=\"\"></p>\n<h2 id=\"II-常见的模式\"><a href=\"#II-常见的模式\" class=\"headerlink\" title=\"II. 常见的模式\"></a>II. 常见的模式</h2><h3 id=\"1-MVC-与-MVP\"><a href=\"#1-MVC-与-MVP\" class=\"headerlink\" title=\"1. MVC 与 MVP\"></a>1. MVC 与 MVP</h3><p><img src=\"/img/architecutre-mvp-mvc.gif\" alt=\"\"><br>From <a href=\"http://msdn.microsoft.com/en-us/library/ff647859.aspx\" target=\"_blank\" rel=\"external\">http://msdn.microsoft.com/en-us/library/ff647859.aspx</a></p>\n<blockquote>\n<p>MVP(Model-View_Presenter)是MVC(Model-View_Controller)的一个子集。</p>\n</blockquote>\n<ul>\n<li>MVC中<code>Controller</code>控制全局事务，<code>View</code>将事件发送给<code>Controller</code>，<code>Controller</code>处理完事件同步给<code>Model</code>(数据库/数据模型)，<code>View</code>是通过所绑定的<code>Model</code>的改变来刷新自己。</li>\n<li>MVP中<code>Presenter</code>从<code>View</code>中获取数据，刷新<code>Model</code>，当<code>Model</code>中的数据发生改变后，<code>Presenter</code>读取<code>Model</code>并刷新<code>View</code>。</li>\n</ul>\n<h3 id=\"2-MVVM\"><a href=\"#2-MVVM\" class=\"headerlink\" title=\"2. MVVM\"></a>2. MVVM</h3><p><img src=\"/img/architecture-mvvm.png\" alt=\"\"></p>\n<blockquote>\n<p>MVVM(View&lt;-&gt;ViewModel-&gt;Model)</p>\n</blockquote>\n<p>在Android中可以通过<code>DataBinding</code>，直接在<code>Layout</code>文件中绑定其<code>ViewModel</code>。</p>\n<ul>\n<li><code>View</code>: 布局</li>\n<li><code>ViewModel</code>: 负责显示数据(监听到<code>Model</code>中的数据变化进行显示)，以及处理用户交互(监听<code>View</code>布局中的用户Action)</li>\n<li><code>Model</code>: 存储内容</li>\n</ul>\n<h3 id=\"3-MVVM-C\"><a href=\"#3-MVVM-C\" class=\"headerlink\" title=\"3. MVVM-C\"></a>3. MVVM-C</h3><p><img src=\"/img/architecture-mvvm-c.png\" alt=\"\"></p>\n<blockquote>\n<p>MVVM-C(View-ViewModel-Callback-Model)</p>\n</blockquote>\n<ul>\n<li><code>View</code>: 布局</li>\n<li><code>Callback</code>: 通常可以是<code>Fragment</code>或<code>Activity</code>，用于处理用户交互(监听<code>View</code>布局中的用户Action)</li>\n<li><code>ViewModel</code>: 显示数据(监听<code>Model</code>中的数据变化进行显示)</li>\n<li><code>Model</code>: 存储内容</li>\n</ul>\n<h2 id=\"III-设计模式\"><a href=\"#III-设计模式\" class=\"headerlink\" title=\"III. 设计模式\"></a>III. 设计模式</h2><h3 id=\"1-工厂方法模式\"><a href=\"#1-工厂方法模式\" class=\"headerlink\" title=\"1. 工厂方法模式\"></a>1. 工厂方法模式</h3><p><img src=\"/img/architecture-factor-method.png\" alt=\"\"></p>\n<h3 id=\"2-单例模式\"><a href=\"#2-单例模式\" class=\"headerlink\" title=\"2. 单例模式\"></a>2. 单例模式</h3><h4 id=\"Initialization-on-demand-holder-idiom\"><a href=\"#Initialization-on-demand-holder-idiom\" class=\"headerlink\" title=\"Initialization-on-demand holder idiom\"></a>Initialization-on-demand holder idiom</h4><blockquote>\n<p><a href=\"https://en.wikipedia.org/wiki/Initialization-on-demand_holder_idiom\" target=\"_blank\" rel=\"external\">Wiki</a></p>\n<p>性能高，线程安全 基于JVM <a href=\"http://blog.dreamtobe.cn/2015/12/07/android_dynamic_dex/\">Class Loader保证Class唯一性线程安全的模型</a></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Something</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Something</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LazyHolder</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Something INSTANCE = <span class=\"keyword\">new</span> Something();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Something <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> LazyHolder.INSTANCE;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-建造者模式\"><a href=\"#3-建造者模式\" class=\"headerlink\" title=\"3. 建造者模式\"></a>3. 建造者模式</h3><blockquote>\n<p>与工厂模式区别是: 工厂模式关注构建单个类型类型；建造者模式关注构建符合类型对象。</p>\n</blockquote>\n<p><img src=\"/img/architecture-builder-method.png\" alt=\"\"></p>\n<h3 id=\"4-原型模式\"><a href=\"#4-原型模式\" class=\"headerlink\" title=\"4. 原型模式\"></a>4. 原型模式</h3><blockquote>\n<p>当前对象对外提供拷贝方法</p>\n</blockquote>\n<h4 id=\"浅拷贝\"><a href=\"#浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a>浅拷贝</h4><blockquote>\n<p>除了基本数据类型外，其他类型的对象都只持有当前对象的引用，而非重新创建拷贝</p>\n</blockquote>\n<h5 id=\"Java中的Object-clone\"><a href=\"#Java中的Object-clone\" class=\"headerlink\" title=\"Java中的Object#clone\"></a>Java中的<code>Object#clone</code></h5><ol>\n<li><code>Object#clone()</code>就已经提供了该对象的浅拷贝</li>\n<li>如果需要使用<code>Object#clone</code>,需要类实现<code>Clonable</code>这个接口，来申明该类对象支持拷贝，否则会抛<code>CloneNotSupportedException</code>, 如果对象中存在队列成员变量，队列也需要实现<code>Clonable</code></li>\n</ol>\n<h4 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h4><blockquote>\n<p>所有成员变量都将重新创建</p>\n</blockquote>\n<h5 id=\"方式一\"><a href=\"#方式一\" class=\"headerlink\" title=\"方式一:\"></a>方式一:</h5><p>直接序列化(Java中基于JVM层级最简单的让对象支持序列化的方式，实现<code>Serializable</code>），拷贝二进制流。</p>\n<h5 id=\"方式二-推荐）：\"><a href=\"#方式二-推荐）：\" class=\"headerlink\" title=\"方式二(推荐）：\"></a>方式二(推荐）：</h5><p>基于<code>Object#clone()</code>将非基本数据类型以外的元素都实现深拷贝，挨个深拷贝返回。</p>\n<h3 id=\"5-适配器模式\"><a href=\"#5-适配器模式\" class=\"headerlink\" title=\"5. 适配器模式\"></a>5. 适配器模式</h3><p><img src=\"/img/architecture-adapter-method.png\" alt=\"\"></p>\n<h3 id=\"6-装饰模式\"><a href=\"#6-装饰模式\" class=\"headerlink\" title=\"6. 装饰模式\"></a>6. 装饰模式</h3><p><img src=\"/img/architecture-decorator-method.png\" alt=\"\"></p>\n<h3 id=\"7-代理模式\"><a href=\"#7-代理模式\" class=\"headerlink\" title=\"7. 代理模式\"></a>7. 代理模式</h3><p><img src=\"/img/architecture-proxy-method.png\" alt=\"\"></p>\n<h3 id=\"8-外观模式\"><a href=\"#8-外观模式\" class=\"headerlink\" title=\"8. 外观模式\"></a>8. 外观模式</h3><p><img src=\"/img/architecture-facade-method.png\" alt=\"\"></p>\n<h3 id=\"9-桥接模式\"><a href=\"#9-桥接模式\" class=\"headerlink\" title=\"9. 桥接模式\"></a>9. 桥接模式</h3><p><img src=\"/img/architecture-bridge-method.png\" alt=\"\"></p>\n<h3 id=\"10-组合模式\"><a href=\"#10-组合模式\" class=\"headerlink\" title=\"10. 组合模式\"></a>10. 组合模式</h3><p><img src=\"/img/architecture-composite-method.png\" alt=\"\"></p>\n<h3 id=\"11-享元模式\"><a href=\"#11-享元模式\" class=\"headerlink\" title=\"11. 享元模式\"></a>11. 享元模式</h3><p><img src=\"/img/architecture-flyweight-method.png\" alt=\"\"></p>\n<h3 id=\"12-策略模式\"><a href=\"#12-策略模式\" class=\"headerlink\" title=\"12. 策略模式\"></a>12. 策略模式</h3><p><img src=\"/img/architecture-strategy-method.png\" alt=\"\"></p>\n<h3 id=\"13-模板方法模式\"><a href=\"#13-模板方法模式\" class=\"headerlink\" title=\"13. 模板方法模式\"></a>13. 模板方法模式</h3><p><img src=\"/img/architecture-template-method.png\" alt=\"\"></p>\n<h3 id=\"14-观察者模式\"><a href=\"#14-观察者模式\" class=\"headerlink\" title=\"14. 观察者模式\"></a>14. 观察者模式</h3><p><img src=\"/img/architecture-observer-method.png\" alt=\"\"></p>\n<p>TODO</p>\n<hr>\n<ul>\n<li>文章创建时间: 2016-3-9，<a href=\"https://github.com/Jacksgong/Blog/commits/master/source/_posts/oo_architecture.md\" target=\"_blank\" rel=\"external\">本文迭代日志</a>。</li>\n</ul>\n<hr>\n<ul>\n<li><a href=\"http://blog.csdn.net/zhangerqing/article/details/8194653\" target=\"_blank\" rel=\"external\">Java之美[从菜鸟到高手演变]之设计模式</a></li>\n<li><a href=\"http://blog.csdn.net/beyondhaven/article/details/6906050\" target=\"_blank\" rel=\"external\">软件设计原则—-合成/聚合复用原则（CARP）</a></li>\n<li><a href=\"http://m.blog.csdn.net/article/details?id=48834109\" target=\"_blank\" rel=\"external\">【设计模式】之六大原则（二）</a></li>\n<li><a href=\"http://blog.csdn.net/csh624366188/article/details/7183726\" target=\"_blank\" rel=\"external\">软件设计之——“高内聚低耦合”</a></li>\n<li><a href=\"http://blog.csdn.net/sfdev/article/details/3906243\" target=\"_blank\" rel=\"external\">UML中几种类间关系：继承、实现、依赖、关联、聚合、组合的联系与区别</a></li>\n<li><a href=\"http://pages.cs.wisc.edu/~hasti/cs302/examples/UMLdiagram.html\" target=\"_blank\" rel=\"external\">UML Class Diagrams</a></li>\n<li><a href=\"http://blog.csdn.net/zhangerqing/article/details/8239539\" target=\"_blank\" rel=\"external\">Java之美[从菜鸟到高手演变]之设计模式二</a></li>\n<li><a href=\"http://blog.csdn.net/zhangerqing/article/details/8243942\" target=\"_blank\" rel=\"external\">Java之美[从菜鸟到高手演变]之设计模式三</a></li>\n<li><a href=\"http://stackoverflow.com/questions/19996963/difference-between-asp-net-mvc-and-mvp-are-they-both-same\" target=\"_blank\" rel=\"external\">Difference between asp.net MVC and MVP? are they both same?</a></li>\n<li><a href=\"https://www.bignerdranch.com/blog/shades-of-mvvm/\" target=\"_blank\" rel=\"external\">Shades of MVVM</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>星星点点的知识点，很早就想做这块整理了，持续维护…</p>\n</blockquote>\n<h2 id=\"I-原则\"><a href=\"#I-原则\" class=\"headerlink\" title=\"I. 原则:\"></a>I. 原则:</h2><blockquote>\n<p>灵活运用，而非刻意遵循</p>\n</blockquote>\n<h3 id=\"1-基础原则\"><a href=\"#1-基础原则\" class=\"headerlink\" title=\"1. 基础原则\"></a>1. 基础原则</h3><blockquote>\n<p>尽量少的重复代码，低耦合(尽量小的影响)，高内聚<br>模块，可小到一个类，大到一个系统</p>\n</blockquote>","more":"<h4 id=\"模块间耦合因素\"><a href=\"#模块间耦合因素\" class=\"headerlink\" title=\"模块间耦合因素\"></a>模块间耦合因素</h4><blockquote>\n<p>构建架构时，需要谨慎耦合的因素</p>\n</blockquote>\n<ul>\n<li>模块间调用</li>\n<li>模块间传递的数据量</li>\n<li>模块间控制</li>\n<li>模块间接口复杂度</li>\n</ul>\n<h4 id=\"模块间耦合从弱到强顺序\"><a href=\"#模块间耦合从弱到强顺序\" class=\"headerlink\" title=\"模块间耦合从弱到强顺序\"></a>模块间耦合从弱到强顺序</h4><blockquote>\n<p>构建架构或简单的类时，需要根据实际情况尽量契合弱的模块间耦合关系<br>做到职责分明，简单轻量，尽量少的潜在性的数据流动，尽量少的相互影响，避免牵一发而动全身</p>\n</blockquote>\n<ol>\n<li>非直接耦合: 相互之间没有直接关系，而是由第三方模块控制和调用</li>\n<li>数据耦合: 通过传递<code>java的内置数据类型</code>通讯</li>\n<li>标记耦合: 都引用了共同的数据结构，并且通过传递该数据结构通讯</li>\n<li>控制耦合: 通过传递开关、标志、名字等控制信息，明显的控制选择另一个模块的功能</li>\n<li>外部耦合: 都访问一个<code>java的内置数据类型</code>的全局变量</li>\n<li>公共耦合: 都访问了一个公共代码块( 全局数据结构、公共通讯区、内存公共覆盖区等)</li>\n<li>内容耦合: 一个模块直接修改另外一个模块的数据。</li>\n</ol>\n<h4 id=\"降低耦合度的方法\"><a href=\"#降低耦合度的方法\" class=\"headerlink\" title=\"降低耦合度的方法\"></a>降低耦合度的方法</h4><ul>\n<li>少用类继承，多用类接口隐藏实现细节</li>\n<li>模块功能尽量单一</li>\n<li>拒绝重复代码</li>\n<li>尽量不使用全局变量(Android中的全局变量会有一些坑，因为Attach在ClassLoader上的，因此根据不同ROM的优化，可能会在未预料的情况被unload，导致数据丢失)</li>\n<li>类成员变量与方法少用<code>public</code>，多用<code>private</code></li>\n<li>尽量不用硬编码(如 字符串放到 <code>res/string.xml</code>，SQL语句做一层基于业务的封装供上层使用)</li>\n<li>使用设计模式，尽量让模块间的耦合关系保证在数据耦合或更弱</li>\n</ul>\n<h3 id=\"2-原则汇总\"><a href=\"#2-原则汇总\" class=\"headerlink\" title=\"2. 原则汇总\"></a>2. 原则汇总</h3><table>\n<thead>\n<tr>\n<th>原则</th>\n<th>基本概念</th>\n<th>解决问题</th>\n<th>基本实现</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>开闭原则</td>\n<td>对扩展开发，对修改关闭</td>\n<td>实现热拔插，解耦方式</td>\n<td>接口、抽象</td>\n</tr>\n<tr>\n<td>里氏代换原则</td>\n<td>子类是父类的具体抽象，抽象并可代表父类(<code>Is-A</code>)</td>\n<td>解释抽象化的具体原则</td>\n<td>继承，抽象</td>\n</tr>\n<tr>\n<td>依赖倒转原则</td>\n<td>针对接口编程，依赖于抽象不依赖于具体</td>\n<td>易于拓展</td>\n<td>接口编程时类型使用基类，而不使用具体实现的子类</td>\n</tr>\n<tr>\n<td>接口隔离原则</td>\n<td>使用多个隔离接口，比使用单个接口要好</td>\n<td>降低耦合</td>\n<td>封装接口的时候，尽量用不同接口解决不同问题，尽量不要合用一个接口</td>\n</tr>\n<tr>\n<td>迪米特法则</td>\n<td>以实体为单位，实体之间的相互作用尽量的少</td>\n<td>降低耦合</td>\n<td>写一个系统架构，或模块的时候，尽量少的对外依赖</td>\n</tr>\n<tr>\n<td>合成复用原则</td>\n<td>优先使用合成/聚合，而非继承</td>\n<td>可以通过引入抽象类更加灵活，相互耦合变小，更加简单</td>\n<td>尽量将已有对象纳入到新对象中，成为新对象的一部分，而不使用继承的方式进行复用，如 <code>ClassLoader</code> 中双亲委派架构</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"使用组合而非继承的场景\"><a href=\"#使用组合而非继承的场景\" class=\"headerlink\" title=\"使用组合而非继承的场景:\"></a>使用组合而非继承的场景:</h4><blockquote>\n<p>优先使用对象组合，而非继承</p>\n</blockquote>\n<ul>\n<li><code>Has-A</code>的关系，而非<code>Is-A</code>的关系</li>\n<li>子类的主要目的是拓展父类，而非<code>override</code>或<code>final</code>，如果存在大量这种情况，改用组合</li>\n<li>引入工具类，而非继承自工具类</li>\n<li>有可能或不确定 子类 有可能被替换为 另外一个类的子类的情况 ( 如果出现这种情况，就需要修改。因此还不如使用 组合，如果有类似需求，再 组合如新的对象，进行拓展即可)</li>\n</ul>\n<h4 id=\"继承需要注意\"><a href=\"#继承需要注意\" class=\"headerlink\" title=\"继承需要注意\"></a>继承需要注意</h4><blockquote>\n<p>当已经选择使用继承时，需要注意</p>\n</blockquote>\n<ul>\n<li>实现抽象方法，拓展新的特性方法，尽量少的重载父类非抽象方法</li>\n<li>重载父类非抽象方法时: 方法前置条件(方法形参)要比父类方法更宽松，方法后置条件(方法返回值)要比父类更严格</li>\n</ul>\n<h4 id=\"类之间的关系与UML表示\"><a href=\"#类之间的关系与UML表示\" class=\"headerlink\" title=\"类之间的关系与UML表示\"></a>类之间的关系与UML表示</h4><p><img src=\"/img/architecture-class-relate.png\" alt=\"\"></p>\n<h2 id=\"II-常见的模式\"><a href=\"#II-常见的模式\" class=\"headerlink\" title=\"II. 常见的模式\"></a>II. 常见的模式</h2><h3 id=\"1-MVC-与-MVP\"><a href=\"#1-MVC-与-MVP\" class=\"headerlink\" title=\"1. MVC 与 MVP\"></a>1. MVC 与 MVP</h3><p><img src=\"/img/architecutre-mvp-mvc.gif\" alt=\"\"><br>From <a href=\"http://msdn.microsoft.com/en-us/library/ff647859.aspx\">http://msdn.microsoft.com/en-us/library/ff647859.aspx</a></p>\n<blockquote>\n<p>MVP(Model-View_Presenter)是MVC(Model-View_Controller)的一个子集。</p>\n</blockquote>\n<ul>\n<li>MVC中<code>Controller</code>控制全局事务，<code>View</code>将事件发送给<code>Controller</code>，<code>Controller</code>处理完事件同步给<code>Model</code>(数据库/数据模型)，<code>View</code>是通过所绑定的<code>Model</code>的改变来刷新自己。</li>\n<li>MVP中<code>Presenter</code>从<code>View</code>中获取数据，刷新<code>Model</code>，当<code>Model</code>中的数据发生改变后，<code>Presenter</code>读取<code>Model</code>并刷新<code>View</code>。</li>\n</ul>\n<h3 id=\"2-MVVM\"><a href=\"#2-MVVM\" class=\"headerlink\" title=\"2. MVVM\"></a>2. MVVM</h3><p><img src=\"/img/architecture-mvvm.png\" alt=\"\"></p>\n<blockquote>\n<p>MVVM(View&lt;-&gt;ViewModel-&gt;Model)</p>\n</blockquote>\n<p>在Android中可以通过<code>DataBinding</code>，直接在<code>Layout</code>文件中绑定其<code>ViewModel</code>。</p>\n<ul>\n<li><code>View</code>: 布局</li>\n<li><code>ViewModel</code>: 负责显示数据(监听到<code>Model</code>中的数据变化进行显示)，以及处理用户交互(监听<code>View</code>布局中的用户Action)</li>\n<li><code>Model</code>: 存储内容</li>\n</ul>\n<h3 id=\"3-MVVM-C\"><a href=\"#3-MVVM-C\" class=\"headerlink\" title=\"3. MVVM-C\"></a>3. MVVM-C</h3><p><img src=\"/img/architecture-mvvm-c.png\" alt=\"\"></p>\n<blockquote>\n<p>MVVM-C(View-ViewModel-Callback-Model)</p>\n</blockquote>\n<ul>\n<li><code>View</code>: 布局</li>\n<li><code>Callback</code>: 通常可以是<code>Fragment</code>或<code>Activity</code>，用于处理用户交互(监听<code>View</code>布局中的用户Action)</li>\n<li><code>ViewModel</code>: 显示数据(监听<code>Model</code>中的数据变化进行显示)</li>\n<li><code>Model</code>: 存储内容</li>\n</ul>\n<h2 id=\"III-设计模式\"><a href=\"#III-设计模式\" class=\"headerlink\" title=\"III. 设计模式\"></a>III. 设计模式</h2><h3 id=\"1-工厂方法模式\"><a href=\"#1-工厂方法模式\" class=\"headerlink\" title=\"1. 工厂方法模式\"></a>1. 工厂方法模式</h3><p><img src=\"/img/architecture-factor-method.png\" alt=\"\"></p>\n<h3 id=\"2-单例模式\"><a href=\"#2-单例模式\" class=\"headerlink\" title=\"2. 单例模式\"></a>2. 单例模式</h3><h4 id=\"Initialization-on-demand-holder-idiom\"><a href=\"#Initialization-on-demand-holder-idiom\" class=\"headerlink\" title=\"Initialization-on-demand holder idiom\"></a>Initialization-on-demand holder idiom</h4><blockquote>\n<p><a href=\"https://en.wikipedia.org/wiki/Initialization-on-demand_holder_idiom\">Wiki</a></p>\n<p>性能高，线程安全 基于JVM <a href=\"http://blog.dreamtobe.cn/2015/12/07/android_dynamic_dex/\">Class Loader保证Class唯一性线程安全的模型</a></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Something</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Something</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LazyHolder</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Something INSTANCE = <span class=\"keyword\">new</span> Something();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Something <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> LazyHolder.INSTANCE;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-建造者模式\"><a href=\"#3-建造者模式\" class=\"headerlink\" title=\"3. 建造者模式\"></a>3. 建造者模式</h3><blockquote>\n<p>与工厂模式区别是: 工厂模式关注构建单个类型类型；建造者模式关注构建符合类型对象。</p>\n</blockquote>\n<p><img src=\"/img/architecture-builder-method.png\" alt=\"\"></p>\n<h3 id=\"4-原型模式\"><a href=\"#4-原型模式\" class=\"headerlink\" title=\"4. 原型模式\"></a>4. 原型模式</h3><blockquote>\n<p>当前对象对外提供拷贝方法</p>\n</blockquote>\n<h4 id=\"浅拷贝\"><a href=\"#浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a>浅拷贝</h4><blockquote>\n<p>除了基本数据类型外，其他类型的对象都只持有当前对象的引用，而非重新创建拷贝</p>\n</blockquote>\n<h5 id=\"Java中的Object-clone\"><a href=\"#Java中的Object-clone\" class=\"headerlink\" title=\"Java中的Object#clone\"></a>Java中的<code>Object#clone</code></h5><ol>\n<li><code>Object#clone()</code>就已经提供了该对象的浅拷贝</li>\n<li>如果需要使用<code>Object#clone</code>,需要类实现<code>Clonable</code>这个接口，来申明该类对象支持拷贝，否则会抛<code>CloneNotSupportedException</code>, 如果对象中存在队列成员变量，队列也需要实现<code>Clonable</code></li>\n</ol>\n<h4 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h4><blockquote>\n<p>所有成员变量都将重新创建</p>\n</blockquote>\n<h5 id=\"方式一\"><a href=\"#方式一\" class=\"headerlink\" title=\"方式一:\"></a>方式一:</h5><p>直接序列化(Java中基于JVM层级最简单的让对象支持序列化的方式，实现<code>Serializable</code>），拷贝二进制流。</p>\n<h5 id=\"方式二-推荐）：\"><a href=\"#方式二-推荐）：\" class=\"headerlink\" title=\"方式二(推荐）：\"></a>方式二(推荐）：</h5><p>基于<code>Object#clone()</code>将非基本数据类型以外的元素都实现深拷贝，挨个深拷贝返回。</p>\n<h3 id=\"5-适配器模式\"><a href=\"#5-适配器模式\" class=\"headerlink\" title=\"5. 适配器模式\"></a>5. 适配器模式</h3><p><img src=\"/img/architecture-adapter-method.png\" alt=\"\"></p>\n<h3 id=\"6-装饰模式\"><a href=\"#6-装饰模式\" class=\"headerlink\" title=\"6. 装饰模式\"></a>6. 装饰模式</h3><p><img src=\"/img/architecture-decorator-method.png\" alt=\"\"></p>\n<h3 id=\"7-代理模式\"><a href=\"#7-代理模式\" class=\"headerlink\" title=\"7. 代理模式\"></a>7. 代理模式</h3><p><img src=\"/img/architecture-proxy-method.png\" alt=\"\"></p>\n<h3 id=\"8-外观模式\"><a href=\"#8-外观模式\" class=\"headerlink\" title=\"8. 外观模式\"></a>8. 外观模式</h3><p><img src=\"/img/architecture-facade-method.png\" alt=\"\"></p>\n<h3 id=\"9-桥接模式\"><a href=\"#9-桥接模式\" class=\"headerlink\" title=\"9. 桥接模式\"></a>9. 桥接模式</h3><p><img src=\"/img/architecture-bridge-method.png\" alt=\"\"></p>\n<h3 id=\"10-组合模式\"><a href=\"#10-组合模式\" class=\"headerlink\" title=\"10. 组合模式\"></a>10. 组合模式</h3><p><img src=\"/img/architecture-composite-method.png\" alt=\"\"></p>\n<h3 id=\"11-享元模式\"><a href=\"#11-享元模式\" class=\"headerlink\" title=\"11. 享元模式\"></a>11. 享元模式</h3><p><img src=\"/img/architecture-flyweight-method.png\" alt=\"\"></p>\n<h3 id=\"12-策略模式\"><a href=\"#12-策略模式\" class=\"headerlink\" title=\"12. 策略模式\"></a>12. 策略模式</h3><p><img src=\"/img/architecture-strategy-method.png\" alt=\"\"></p>\n<h3 id=\"13-模板方法模式\"><a href=\"#13-模板方法模式\" class=\"headerlink\" title=\"13. 模板方法模式\"></a>13. 模板方法模式</h3><p><img src=\"/img/architecture-template-method.png\" alt=\"\"></p>\n<h3 id=\"14-观察者模式\"><a href=\"#14-观察者模式\" class=\"headerlink\" title=\"14. 观察者模式\"></a>14. 观察者模式</h3><p><img src=\"/img/architecture-observer-method.png\" alt=\"\"></p>\n<p>TODO</p>\n<hr>\n<ul>\n<li>文章创建时间: 2016-3-9，<a href=\"https://github.com/Jacksgong/Blog/commits/master/source/_posts/oo_architecture.md\">本文迭代日志</a>。</li>\n</ul>\n<hr>\n<ul>\n<li><a href=\"http://blog.csdn.net/zhangerqing/article/details/8194653\">Java之美[从菜鸟到高手演变]之设计模式</a></li>\n<li><a href=\"http://blog.csdn.net/beyondhaven/article/details/6906050\">软件设计原则—-合成/聚合复用原则（CARP）</a></li>\n<li><a href=\"http://m.blog.csdn.net/article/details?id=48834109\">【设计模式】之六大原则（二）</a></li>\n<li><a href=\"http://blog.csdn.net/csh624366188/article/details/7183726\">软件设计之——“高内聚低耦合”</a></li>\n<li><a href=\"http://blog.csdn.net/sfdev/article/details/3906243\">UML中几种类间关系：继承、实现、依赖、关联、聚合、组合的联系与区别</a></li>\n<li><a href=\"http://pages.cs.wisc.edu/~hasti/cs302/examples/UMLdiagram.html\">UML Class Diagrams</a></li>\n<li><a href=\"http://blog.csdn.net/zhangerqing/article/details/8239539\">Java之美[从菜鸟到高手演变]之设计模式二</a></li>\n<li><a href=\"http://blog.csdn.net/zhangerqing/article/details/8243942\">Java之美[从菜鸟到高手演变]之设计模式三</a></li>\n<li><a href=\"http://stackoverflow.com/questions/19996963/difference-between-asp-net-mvc-and-mvp-are-they-both-same\">Difference between asp.net MVC and MVP? are they both same?</a></li>\n<li><a href=\"https://www.bignerdranch.com/blog/shades-of-mvvm/\">Shades of MVVM</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"OpenWrt通过迅雷快鸟提速","date":"2016-05-29T06:30:03.000Z","_content":"\n> 这次提速是在Newifi Y1上([Newifi Y1 刷Openwrt 自配Shadowsocks高稳定翻墙](http://blog.dreamtobe.cn/2016/04/24/newifi_openwrt/))，不过只要是Openwrt都可以参考这个教程，整个提速的是基于[fffonion/Xunlei-Fastdick](https://github.com/fffonion/Xunlei-Fastdick)，十分的给力，我这边的宽带下行原本是30M，成功提速到50M。\n\n<!-- more -->\n\n---\n\n## 最终结果图:\n\n> 电信宽带测速网址: http://sh.189.cn/support/netreport/\n\n![](/img/openwrt_xunlei-fastdick-1.png)\n\n首先对于是否支持快鸟提速可以参考下迅雷官方给出的支持地图: http://k.xunlei.com/notice.html\n\n---\n\n## I. 准备\n\n#### 1. 准备一个快鸟帐号\n\n可以到淘宝买快鸟帐号或者直接到[迅雷会员官网](http://vip.xunlei.com/vip_service/introduce/)购买。\n\n#### 2. 执行文件准备\n\n直接clone [fffonion/Xunlei-Fastdick](https://github.com/fffonion/Xunlei-Fastdick) 项目。\n\n#### 3. 准备环境\n\n准备一个已经有python运行环境的地方(当然也可以直接在openwrt上面操作(`opkg install python`))。\n\n\n## II. 生成运行ipk\n\n#### 1. 配置帐号\n\n在clone下来的fffonion/Xunlei-Fastdick项目目录(或与`swjsq.py`文件同目录就行)下创建文件`swjsq.account.txt`，输入帐号与密码格式如: `ahaha,123456`（英文逗号），并保存。\n\n#### 2. 执行脚本\n\n执行 `python ./swjsq.py &`，出现如下图 `Upgrade done: Down xxx, Up xxx`，表明提速成功，此时本地会生成`swjsq_0.0.1_all.ipk`文件。\n\n![](/img/openwrt_xunlei-fastdick-2.png)\n\n## III. 安装\n\n#### 1. 安装ipk\n\n在OpenWrt的`swjsq_0.0.1_all.ipk`所在目录执行 `opkg install swjsq_0.0.1_all.ipk`，进行安装。\n\n#### 2. 配置开机启动\n\n在OpenWrt的`/etc/hotplug.d/iface/`目录下，创建文件`99-xunlei`，并添加以下脚本:\n\n```\n#!/bin/sh\n[ \"$ACTION\" = ifup ] || exit 0\n[ \"$INTERFACE\" = wan ] || exit 0\nkillall -9 swjsq\n(/bin/swjsq &)\n```\n\n#### 3. 重启完成\n\n重启路由器，此时到OpenWrt的LUCI界面，在Status->Processes会看到有一个`swjsq`的进程在运行，说明已经成功运行。\n\n![](/img/openwrt_xunlei-fastdick-3.png)\n\n## IV. 升级\n\n这块记得Watching [fffonion/Xunlei-Fastdick](https://github.com/fffonion/Xunlei-Fastdick) 项目，有更新的时候当然是要重新生成ipk，重新卸载安装即可。\n\n---\n\n本文已经发布到JackBlog公众号，可请直接访问: [OpenWrt通过迅雷快鸟提速 - JacksBlog](https://mp.weixin.qq.com/s?__biz=MzIyMjQxMzAzOA==&mid=2247483654&idx=1&sn=151940b17d4f1bd03076988027a35831)\n\n---\n\n- [加速你的带宽—迅雷快鸟OPENWRT插件](http://www.openwrt.org.cn/bbs/thread-19695-1-1.html)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/openwrt_xunlei_fastdick.md","raw":"title: OpenWrt通过迅雷快鸟提速\ndate: 2016-05-29 14:30:03\npermalink: 2016/05/29/openwrt_xunlei_fastdick\ntags:\n- OpenWrt\n- 迅雷快鸟\n- Fastdick\n- 宽带提速\n\n---\n\n> 这次提速是在Newifi Y1上([Newifi Y1 刷Openwrt 自配Shadowsocks高稳定翻墙](http://blog.dreamtobe.cn/2016/04/24/newifi_openwrt/))，不过只要是Openwrt都可以参考这个教程，整个提速的是基于[fffonion/Xunlei-Fastdick](https://github.com/fffonion/Xunlei-Fastdick)，十分的给力，我这边的宽带下行原本是30M，成功提速到50M。\n\n<!-- more -->\n\n---\n\n## 最终结果图:\n\n> 电信宽带测速网址: http://sh.189.cn/support/netreport/\n\n![](/img/openwrt_xunlei-fastdick-1.png)\n\n首先对于是否支持快鸟提速可以参考下迅雷官方给出的支持地图: http://k.xunlei.com/notice.html\n\n---\n\n## I. 准备\n\n#### 1. 准备一个快鸟帐号\n\n可以到淘宝买快鸟帐号或者直接到[迅雷会员官网](http://vip.xunlei.com/vip_service/introduce/)购买。\n\n#### 2. 执行文件准备\n\n直接clone [fffonion/Xunlei-Fastdick](https://github.com/fffonion/Xunlei-Fastdick) 项目。\n\n#### 3. 准备环境\n\n准备一个已经有python运行环境的地方(当然也可以直接在openwrt上面操作(`opkg install python`))。\n\n\n## II. 生成运行ipk\n\n#### 1. 配置帐号\n\n在clone下来的fffonion/Xunlei-Fastdick项目目录(或与`swjsq.py`文件同目录就行)下创建文件`swjsq.account.txt`，输入帐号与密码格式如: `ahaha,123456`（英文逗号），并保存。\n\n#### 2. 执行脚本\n\n执行 `python ./swjsq.py &`，出现如下图 `Upgrade done: Down xxx, Up xxx`，表明提速成功，此时本地会生成`swjsq_0.0.1_all.ipk`文件。\n\n![](/img/openwrt_xunlei-fastdick-2.png)\n\n## III. 安装\n\n#### 1. 安装ipk\n\n在OpenWrt的`swjsq_0.0.1_all.ipk`所在目录执行 `opkg install swjsq_0.0.1_all.ipk`，进行安装。\n\n#### 2. 配置开机启动\n\n在OpenWrt的`/etc/hotplug.d/iface/`目录下，创建文件`99-xunlei`，并添加以下脚本:\n\n```\n#!/bin/sh\n[ \"$ACTION\" = ifup ] || exit 0\n[ \"$INTERFACE\" = wan ] || exit 0\nkillall -9 swjsq\n(/bin/swjsq &)\n```\n\n#### 3. 重启完成\n\n重启路由器，此时到OpenWrt的LUCI界面，在Status->Processes会看到有一个`swjsq`的进程在运行，说明已经成功运行。\n\n![](/img/openwrt_xunlei-fastdick-3.png)\n\n## IV. 升级\n\n这块记得Watching [fffonion/Xunlei-Fastdick](https://github.com/fffonion/Xunlei-Fastdick) 项目，有更新的时候当然是要重新生成ipk，重新卸载安装即可。\n\n---\n\n本文已经发布到JackBlog公众号，可请直接访问: [OpenWrt通过迅雷快鸟提速 - JacksBlog](https://mp.weixin.qq.com/s?__biz=MzIyMjQxMzAzOA==&mid=2247483654&idx=1&sn=151940b17d4f1bd03076988027a35831)\n\n---\n\n- [加速你的带宽—迅雷快鸟OPENWRT插件](http://www.openwrt.org.cn/bbs/thread-19695-1-1.html)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2016/05/29/openwrt_xunlei_fastdick","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66jb003l95buiedairze","content":"<blockquote>\n<p>这次提速是在Newifi Y1上(<a href=\"http://blog.dreamtobe.cn/2016/04/24/newifi_openwrt/\">Newifi Y1 刷Openwrt 自配Shadowsocks高稳定翻墙</a>)，不过只要是Openwrt都可以参考这个教程，整个提速的是基于<a href=\"https://github.com/fffonion/Xunlei-Fastdick\" target=\"_blank\" rel=\"external\">fffonion/Xunlei-Fastdick</a>，十分的给力，我这边的宽带下行原本是30M，成功提速到50M。</p>\n</blockquote>\n<a id=\"more\"></a>\n<hr>\n<h2 id=\"最终结果图\"><a href=\"#最终结果图\" class=\"headerlink\" title=\"最终结果图:\"></a>最终结果图:</h2><blockquote>\n<p>电信宽带测速网址: <a href=\"http://sh.189.cn/support/netreport/\" target=\"_blank\" rel=\"external\">http://sh.189.cn/support/netreport/</a></p>\n</blockquote>\n<p><img src=\"/img/openwrt_xunlei-fastdick-1.png\" alt=\"\"></p>\n<p>首先对于是否支持快鸟提速可以参考下迅雷官方给出的支持地图: <a href=\"http://k.xunlei.com/notice.html\" target=\"_blank\" rel=\"external\">http://k.xunlei.com/notice.html</a></p>\n<hr>\n<h2 id=\"I-准备\"><a href=\"#I-准备\" class=\"headerlink\" title=\"I. 准备\"></a>I. 准备</h2><h4 id=\"1-准备一个快鸟帐号\"><a href=\"#1-准备一个快鸟帐号\" class=\"headerlink\" title=\"1. 准备一个快鸟帐号\"></a>1. 准备一个快鸟帐号</h4><p>可以到淘宝买快鸟帐号或者直接到<a href=\"http://vip.xunlei.com/vip_service/introduce/\" target=\"_blank\" rel=\"external\">迅雷会员官网</a>购买。</p>\n<h4 id=\"2-执行文件准备\"><a href=\"#2-执行文件准备\" class=\"headerlink\" title=\"2. 执行文件准备\"></a>2. 执行文件准备</h4><p>直接clone <a href=\"https://github.com/fffonion/Xunlei-Fastdick\" target=\"_blank\" rel=\"external\">fffonion/Xunlei-Fastdick</a> 项目。</p>\n<h4 id=\"3-准备环境\"><a href=\"#3-准备环境\" class=\"headerlink\" title=\"3. 准备环境\"></a>3. 准备环境</h4><p>准备一个已经有python运行环境的地方(当然也可以直接在openwrt上面操作(<code>opkg install python</code>))。</p>\n<h2 id=\"II-生成运行ipk\"><a href=\"#II-生成运行ipk\" class=\"headerlink\" title=\"II. 生成运行ipk\"></a>II. 生成运行ipk</h2><h4 id=\"1-配置帐号\"><a href=\"#1-配置帐号\" class=\"headerlink\" title=\"1. 配置帐号\"></a>1. 配置帐号</h4><p>在clone下来的fffonion/Xunlei-Fastdick项目目录(或与<code>swjsq.py</code>文件同目录就行)下创建文件<code>swjsq.account.txt</code>，输入帐号与密码格式如: <code>ahaha,123456</code>（英文逗号），并保存。</p>\n<h4 id=\"2-执行脚本\"><a href=\"#2-执行脚本\" class=\"headerlink\" title=\"2. 执行脚本\"></a>2. 执行脚本</h4><p>执行 <code>python ./swjsq.py &amp;</code>，出现如下图 <code>Upgrade done: Down xxx, Up xxx</code>，表明提速成功，此时本地会生成<code>swjsq_0.0.1_all.ipk</code>文件。</p>\n<p><img src=\"/img/openwrt_xunlei-fastdick-2.png\" alt=\"\"></p>\n<h2 id=\"III-安装\"><a href=\"#III-安装\" class=\"headerlink\" title=\"III. 安装\"></a>III. 安装</h2><h4 id=\"1-安装ipk\"><a href=\"#1-安装ipk\" class=\"headerlink\" title=\"1. 安装ipk\"></a>1. 安装ipk</h4><p>在OpenWrt的<code>swjsq_0.0.1_all.ipk</code>所在目录执行 <code>opkg install swjsq_0.0.1_all.ipk</code>，进行安装。</p>\n<h4 id=\"2-配置开机启动\"><a href=\"#2-配置开机启动\" class=\"headerlink\" title=\"2. 配置开机启动\"></a>2. 配置开机启动</h4><p>在OpenWrt的<code>/etc/hotplug.d/iface/</code>目录下，创建文件<code>99-xunlei</code>，并添加以下脚本:</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/bin/sh</span></div><div class=\"line\">[ <span class=\"string\">\"$ACTION\"</span> = ifup ] || <span class=\"keyword\">exit</span> <span class=\"number\">0</span></div><div class=\"line\">[ <span class=\"string\">\"$INTERFACE\"</span> = wan ] || <span class=\"keyword\">exit</span> <span class=\"number\">0</span></div><div class=\"line\">killall -<span class=\"number\">9</span> swjsq</div><div class=\"line\">(<span class=\"regexp\">/bin/</span>swjsq &amp;)</div></pre></td></tr></table></figure>\n<h4 id=\"3-重启完成\"><a href=\"#3-重启完成\" class=\"headerlink\" title=\"3. 重启完成\"></a>3. 重启完成</h4><p>重启路由器，此时到OpenWrt的LUCI界面，在Status-&gt;Processes会看到有一个<code>swjsq</code>的进程在运行，说明已经成功运行。</p>\n<p><img src=\"/img/openwrt_xunlei-fastdick-3.png\" alt=\"\"></p>\n<h2 id=\"IV-升级\"><a href=\"#IV-升级\" class=\"headerlink\" title=\"IV. 升级\"></a>IV. 升级</h2><p>这块记得Watching <a href=\"https://github.com/fffonion/Xunlei-Fastdick\" target=\"_blank\" rel=\"external\">fffonion/Xunlei-Fastdick</a> 项目，有更新的时候当然是要重新生成ipk，重新卸载安装即可。</p>\n<hr>\n<p>本文已经发布到JackBlog公众号，可请直接访问: <a href=\"https://mp.weixin.qq.com/s?__biz=MzIyMjQxMzAzOA==&amp;mid=2247483654&amp;idx=1&amp;sn=151940b17d4f1bd03076988027a35831\" target=\"_blank\" rel=\"external\">OpenWrt通过迅雷快鸟提速 - JacksBlog</a></p>\n<hr>\n<ul>\n<li><a href=\"http://www.openwrt.org.cn/bbs/thread-19695-1-1.html\" target=\"_blank\" rel=\"external\">加速你的带宽—迅雷快鸟OPENWRT插件</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>这次提速是在Newifi Y1上(<a href=\"http://blog.dreamtobe.cn/2016/04/24/newifi_openwrt/\">Newifi Y1 刷Openwrt 自配Shadowsocks高稳定翻墙</a>)，不过只要是Openwrt都可以参考这个教程，整个提速的是基于<a href=\"https://github.com/fffonion/Xunlei-Fastdick\">fffonion/Xunlei-Fastdick</a>，十分的给力，我这边的宽带下行原本是30M，成功提速到50M。</p>\n</blockquote>","more":"<hr>\n<h2 id=\"最终结果图\"><a href=\"#最终结果图\" class=\"headerlink\" title=\"最终结果图:\"></a>最终结果图:</h2><blockquote>\n<p>电信宽带测速网址: <a href=\"http://sh.189.cn/support/netreport/\">http://sh.189.cn/support/netreport/</a></p>\n</blockquote>\n<p><img src=\"/img/openwrt_xunlei-fastdick-1.png\" alt=\"\"></p>\n<p>首先对于是否支持快鸟提速可以参考下迅雷官方给出的支持地图: <a href=\"http://k.xunlei.com/notice.html\">http://k.xunlei.com/notice.html</a></p>\n<hr>\n<h2 id=\"I-准备\"><a href=\"#I-准备\" class=\"headerlink\" title=\"I. 准备\"></a>I. 准备</h2><h4 id=\"1-准备一个快鸟帐号\"><a href=\"#1-准备一个快鸟帐号\" class=\"headerlink\" title=\"1. 准备一个快鸟帐号\"></a>1. 准备一个快鸟帐号</h4><p>可以到淘宝买快鸟帐号或者直接到<a href=\"http://vip.xunlei.com/vip_service/introduce/\">迅雷会员官网</a>购买。</p>\n<h4 id=\"2-执行文件准备\"><a href=\"#2-执行文件准备\" class=\"headerlink\" title=\"2. 执行文件准备\"></a>2. 执行文件准备</h4><p>直接clone <a href=\"https://github.com/fffonion/Xunlei-Fastdick\">fffonion/Xunlei-Fastdick</a> 项目。</p>\n<h4 id=\"3-准备环境\"><a href=\"#3-准备环境\" class=\"headerlink\" title=\"3. 准备环境\"></a>3. 准备环境</h4><p>准备一个已经有python运行环境的地方(当然也可以直接在openwrt上面操作(<code>opkg install python</code>))。</p>\n<h2 id=\"II-生成运行ipk\"><a href=\"#II-生成运行ipk\" class=\"headerlink\" title=\"II. 生成运行ipk\"></a>II. 生成运行ipk</h2><h4 id=\"1-配置帐号\"><a href=\"#1-配置帐号\" class=\"headerlink\" title=\"1. 配置帐号\"></a>1. 配置帐号</h4><p>在clone下来的fffonion/Xunlei-Fastdick项目目录(或与<code>swjsq.py</code>文件同目录就行)下创建文件<code>swjsq.account.txt</code>，输入帐号与密码格式如: <code>ahaha,123456</code>（英文逗号），并保存。</p>\n<h4 id=\"2-执行脚本\"><a href=\"#2-执行脚本\" class=\"headerlink\" title=\"2. 执行脚本\"></a>2. 执行脚本</h4><p>执行 <code>python ./swjsq.py &amp;</code>，出现如下图 <code>Upgrade done: Down xxx, Up xxx</code>，表明提速成功，此时本地会生成<code>swjsq_0.0.1_all.ipk</code>文件。</p>\n<p><img src=\"/img/openwrt_xunlei-fastdick-2.png\" alt=\"\"></p>\n<h2 id=\"III-安装\"><a href=\"#III-安装\" class=\"headerlink\" title=\"III. 安装\"></a>III. 安装</h2><h4 id=\"1-安装ipk\"><a href=\"#1-安装ipk\" class=\"headerlink\" title=\"1. 安装ipk\"></a>1. 安装ipk</h4><p>在OpenWrt的<code>swjsq_0.0.1_all.ipk</code>所在目录执行 <code>opkg install swjsq_0.0.1_all.ipk</code>，进行安装。</p>\n<h4 id=\"2-配置开机启动\"><a href=\"#2-配置开机启动\" class=\"headerlink\" title=\"2. 配置开机启动\"></a>2. 配置开机启动</h4><p>在OpenWrt的<code>/etc/hotplug.d/iface/</code>目录下，创建文件<code>99-xunlei</code>，并添加以下脚本:</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/bin/sh</span></div><div class=\"line\">[ <span class=\"string\">\"$ACTION\"</span> = ifup ] || <span class=\"keyword\">exit</span> <span class=\"number\">0</span></div><div class=\"line\">[ <span class=\"string\">\"$INTERFACE\"</span> = wan ] || <span class=\"keyword\">exit</span> <span class=\"number\">0</span></div><div class=\"line\">killall -<span class=\"number\">9</span> swjsq</div><div class=\"line\">(<span class=\"regexp\">/bin/</span>swjsq &amp;)</div></pre></td></tr></table></figure>\n<h4 id=\"3-重启完成\"><a href=\"#3-重启完成\" class=\"headerlink\" title=\"3. 重启完成\"></a>3. 重启完成</h4><p>重启路由器，此时到OpenWrt的LUCI界面，在Status-&gt;Processes会看到有一个<code>swjsq</code>的进程在运行，说明已经成功运行。</p>\n<p><img src=\"/img/openwrt_xunlei-fastdick-3.png\" alt=\"\"></p>\n<h2 id=\"IV-升级\"><a href=\"#IV-升级\" class=\"headerlink\" title=\"IV. 升级\"></a>IV. 升级</h2><p>这块记得Watching <a href=\"https://github.com/fffonion/Xunlei-Fastdick\">fffonion/Xunlei-Fastdick</a> 项目，有更新的时候当然是要重新生成ipk，重新卸载安装即可。</p>\n<hr>\n<p>本文已经发布到JackBlog公众号，可请直接访问: <a href=\"https://mp.weixin.qq.com/s?__biz=MzIyMjQxMzAzOA==&amp;mid=2247483654&amp;idx=1&amp;sn=151940b17d4f1bd03076988027a35831\">OpenWrt通过迅雷快鸟提速 - JacksBlog</a></p>\n<hr>\n<ul>\n<li><a href=\"http://www.openwrt.org.cn/bbs/thread-19695-1-1.html\">加速你的带宽—迅雷快鸟OPENWRT插件</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"快速集成平滑进度条","date":"2016-05-15T10:50:03.000Z","_content":"\n> 已开源 [Jacksgong/PercentSmoothHandler](https://github.com/Jacksgong/PercentSmoothHandler)\n\n- [版本迭代日志](https://github.com/Jacksgong/PercentSmoothHandler/blob/master/CHANGELOG.md)\n- [说明文档](https://github.com/Jacksgong/PercentSmoothHandler/blob/master/README.md)\n- [问题讨论区](https://github.com/Jacksgong/PercentSmoothHandler/issues)\n\n<!-- more -->\n\n---\n\n## 简述所解决问题\n\n常见的ProgressBar，或者是一些组件，如果在回调不够频繁或者跨度比较大的时候，就会出现不够平滑的问题。\n\n## 特征\n\n集成这个库，可以非常轻易的继承拓展出 `setSmoothPercent(percent:float)` 与 `setSmoothPercent(percent:float, durationMillis:long)` 接口。\n\n## Demo\n\n![demo gif](/img/percent_smooth.gif)\n","source":"_posts/percent_smooth_handler.md","raw":"title: 快速集成平滑进度条\ndate: 2016-05-15 18:50:03\npermalink: 2016/05/15/percent_smooth_handler\ntags:\n- android\n- Percent\n- Progress\n- github\n\n---\n\n> 已开源 [Jacksgong/PercentSmoothHandler](https://github.com/Jacksgong/PercentSmoothHandler)\n\n- [版本迭代日志](https://github.com/Jacksgong/PercentSmoothHandler/blob/master/CHANGELOG.md)\n- [说明文档](https://github.com/Jacksgong/PercentSmoothHandler/blob/master/README.md)\n- [问题讨论区](https://github.com/Jacksgong/PercentSmoothHandler/issues)\n\n<!-- more -->\n\n---\n\n## 简述所解决问题\n\n常见的ProgressBar，或者是一些组件，如果在回调不够频繁或者跨度比较大的时候，就会出现不够平滑的问题。\n\n## 特征\n\n集成这个库，可以非常轻易的继承拓展出 `setSmoothPercent(percent:float)` 与 `setSmoothPercent(percent:float, durationMillis:long)` 接口。\n\n## Demo\n\n![demo gif](/img/percent_smooth.gif)\n","slug":"2016/05/15/percent_smooth_handler","published":1,"updated":"2017-01-26T14:52:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66jc003m95bu3lt3c18b","content":"<blockquote>\n<p>已开源 <a href=\"https://github.com/Jacksgong/PercentSmoothHandler\" target=\"_blank\" rel=\"external\">Jacksgong/PercentSmoothHandler</a></p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/Jacksgong/PercentSmoothHandler/blob/master/CHANGELOG.md\" target=\"_blank\" rel=\"external\">版本迭代日志</a></li>\n<li><a href=\"https://github.com/Jacksgong/PercentSmoothHandler/blob/master/README.md\" target=\"_blank\" rel=\"external\">说明文档</a></li>\n<li><a href=\"https://github.com/Jacksgong/PercentSmoothHandler/issues\" target=\"_blank\" rel=\"external\">问题讨论区</a></li>\n</ul>\n<a id=\"more\"></a>\n<hr>\n<h2 id=\"简述所解决问题\"><a href=\"#简述所解决问题\" class=\"headerlink\" title=\"简述所解决问题\"></a>简述所解决问题</h2><p>常见的ProgressBar，或者是一些组件，如果在回调不够频繁或者跨度比较大的时候，就会出现不够平滑的问题。</p>\n<h2 id=\"特征\"><a href=\"#特征\" class=\"headerlink\" title=\"特征\"></a>特征</h2><p>集成这个库，可以非常轻易的继承拓展出 <code>setSmoothPercent(percent:float)</code> 与 <code>setSmoothPercent(percent:float, durationMillis:long)</code> 接口。</p>\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><p><img src=\"/img/percent_smooth.gif\" alt=\"demo gif\"></p>\n","excerpt":"<blockquote>\n<p>已开源 <a href=\"https://github.com/Jacksgong/PercentSmoothHandler\">Jacksgong/PercentSmoothHandler</a></p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/Jacksgong/PercentSmoothHandler/blob/master/CHANGELOG.md\">版本迭代日志</a></li>\n<li><a href=\"https://github.com/Jacksgong/PercentSmoothHandler/blob/master/README.md\">说明文档</a></li>\n<li><a href=\"https://github.com/Jacksgong/PercentSmoothHandler/issues\">问题讨论区</a></li>\n</ul>","more":"<hr>\n<h2 id=\"简述所解决问题\"><a href=\"#简述所解决问题\" class=\"headerlink\" title=\"简述所解决问题\"></a>简述所解决问题</h2><p>常见的ProgressBar，或者是一些组件，如果在回调不够频繁或者跨度比较大的时候，就会出现不够平滑的问题。</p>\n<h2 id=\"特征\"><a href=\"#特征\" class=\"headerlink\" title=\"特征\"></a>特征</h2><p>集成这个库，可以非常轻易的继承拓展出 <code>setSmoothPercent(percent:float)</code> 与 <code>setSmoothPercent(percent:float, durationMillis:long)</code> 接口。</p>\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><p><img src=\"/img/percent_smooth.gif\" alt=\"demo gif\"></p>"},{"title":"php mysql学习之简单留言板","date":"2013-01-08T00:35:03.000Z","_content":"\n![](/img/php-mysql-1.jpg)\n\n数据库中的内容:\n\n![](/img/php-mysql-2.jpg)\n\n<!--more-->\n`index.php`:\n\n```\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=gbk\">\n<?php\ninclude(\"IncDB.php\");\n$result=mysqli_query($link,\"SELECT * FROM intd\");\n$row=mysqli_fetch_row($result);\nwhile($row)\n{\n     echo \"ID: \".$row[0].\" 姓名: \".$row[1].\" 时间: \".$row[3].\"<br />\";\n     echo $row[2];\n     echo \"<hr /><br />\";\n     $row=mysqli_fetch_row($result);\n}\nmysqli_close($link);\n?>\n\n\n<form method=\"POST\" action=\"InsetToDB.php\">\n昵称:<input type=\"text\" size=\"8\"; name=\"name\">\n   <p>内容:<textarea rows=\"5\" name=\"text\" cols=\"60\"></textarea>\n   </p>\n   <p><input type=\"submit\" value=\"提交\" name=\"B1\"><input type=\"reset\" value=\"重置\" name=\"B2\"></p>\n</form>\n```\n\n`IncDB.php`:\n\n```\n<?php\n//error_reporting(E_ALL ^ E_WARNING);\n$link=mysqli_connect('127.0.0.1','root','');\nif(!$link)\n{\n   die(\"<center>出错啦:1!</center>\");\n\n}\n\nif(!mysqli_select_db($link,'guestbook'))\n{\n   die(\"<center>出错啦:2!</center>\");\n   }\n\n\n?>\n```\n\n`InsetToDB.php`:\n\n```\n<?php\ninclude(\"IncDB.php\");\n$name=addslashes($_POST['name']);\n$text=addslashes($_POST['text']);\n$sql = \"INSERT INTO `intd` (`id`, `name`, `text`, `datetime`) VALUES (NULL, '$name', '$text', now());\";\n//$sql=\"INSERT INTO `intd` ( , `name` , `text`,`datetime` ) VALUES ( ,'$name','$text',now())\";\nif(mysqli_query($link,$sql))\n{\n   echo \"留言成功！\";\n   echo \"<meta http-equiv=\"refresh\" content=\"1;URL=index.php\">\";\n   }\nelse\n   echo \"留言失败！\";\n\nmysqli_close($link);\n?>\n```\n\n数据库为：guestbook\n并且初始化执行：\n\n```\nCREATE TABLE `intd` (\n`id` int(11) NOT NULL auto_increment,\n`name` varchar(255) character set utf8 collate utf8_bin NOT NULL,\n`text` text character set utf8 collate utf8_bin NOT NULL,\n`datetime` datetime NOT NULL,\nPRIMARY KEY (`id`)\n) ENGINE=MyISAM DEFAULT CHARSET=gb2312 AUTO_INCREMENT=11 ;\n```\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/php-mysql学习之简单留言板.md","raw":"title: php mysql学习之简单留言板\ndate: 2013-01-08 08:35:03\npermalink: 2013/01/08/php-mysql学习之简单留言板\ntags:\n- mysql\n- php\n- sql\n- 留言板\n\n---\n\n![](/img/php-mysql-1.jpg)\n\n数据库中的内容:\n\n![](/img/php-mysql-2.jpg)\n\n<!--more-->\n`index.php`:\n\n```\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=gbk\">\n<?php\ninclude(\"IncDB.php\");\n$result=mysqli_query($link,\"SELECT * FROM intd\");\n$row=mysqli_fetch_row($result);\nwhile($row)\n{\n     echo \"ID: \".$row[0].\" 姓名: \".$row[1].\" 时间: \".$row[3].\"<br />\";\n     echo $row[2];\n     echo \"<hr /><br />\";\n     $row=mysqli_fetch_row($result);\n}\nmysqli_close($link);\n?>\n\n\n<form method=\"POST\" action=\"InsetToDB.php\">\n昵称:<input type=\"text\" size=\"8\"; name=\"name\">\n   <p>内容:<textarea rows=\"5\" name=\"text\" cols=\"60\"></textarea>\n   </p>\n   <p><input type=\"submit\" value=\"提交\" name=\"B1\"><input type=\"reset\" value=\"重置\" name=\"B2\"></p>\n</form>\n```\n\n`IncDB.php`:\n\n```\n<?php\n//error_reporting(E_ALL ^ E_WARNING);\n$link=mysqli_connect('127.0.0.1','root','');\nif(!$link)\n{\n   die(\"<center>出错啦:1!</center>\");\n\n}\n\nif(!mysqli_select_db($link,'guestbook'))\n{\n   die(\"<center>出错啦:2!</center>\");\n   }\n\n\n?>\n```\n\n`InsetToDB.php`:\n\n```\n<?php\ninclude(\"IncDB.php\");\n$name=addslashes($_POST['name']);\n$text=addslashes($_POST['text']);\n$sql = \"INSERT INTO `intd` (`id`, `name`, `text`, `datetime`) VALUES (NULL, '$name', '$text', now());\";\n//$sql=\"INSERT INTO `intd` ( , `name` , `text`,`datetime` ) VALUES ( ,'$name','$text',now())\";\nif(mysqli_query($link,$sql))\n{\n   echo \"留言成功！\";\n   echo \"<meta http-equiv=\"refresh\" content=\"1;URL=index.php\">\";\n   }\nelse\n   echo \"留言失败！\";\n\nmysqli_close($link);\n?>\n```\n\n数据库为：guestbook\n并且初始化执行：\n\n```\nCREATE TABLE `intd` (\n`id` int(11) NOT NULL auto_increment,\n`name` varchar(255) character set utf8 collate utf8_bin NOT NULL,\n`text` text character set utf8 collate utf8_bin NOT NULL,\n`datetime` datetime NOT NULL,\nPRIMARY KEY (`id`)\n) ENGINE=MyISAM DEFAULT CHARSET=gb2312 AUTO_INCREMENT=11 ;\n```\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2013/01/08/php-mysql学习之简单留言板","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66jd003o95bujgqa5upg","content":"<p><img src=\"/img/php-mysql-1.jpg\" alt=\"\"></p>\n<p>数据库中的内容:</p>\n<p><img src=\"/img/php-mysql-2.jpg\" alt=\"\"></p>\n<a id=\"more\"></a>\n<p><code>index.php</code>:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=gbk\"</span>&gt;</span></div><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?php</span></span></div><div class=\"line\"><span class=\"keyword\">include</span>(<span class=\"string\">\"IncDB.php\"</span>);</div><div class=\"line\">$result=mysqli_query($link,<span class=\"string\">\"SELECT * FROM intd\"</span>);</div><div class=\"line\">$row=mysqli_fetch_row($result);</div><div class=\"line\"><span class=\"keyword\">while</span>($row)</div><div class=\"line\">&#123;</div><div class=\"line\">     <span class=\"keyword\">echo</span> <span class=\"string\">\"ID: \"</span>.$row[<span class=\"number\">0</span>].<span class=\"string\">\" 姓名: \"</span>.$row[<span class=\"number\">1</span>].<span class=\"string\">\" 时间: \"</span>.$row[<span class=\"number\">3</span>].<span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">     <span class=\"keyword\">echo</span> $row[<span class=\"number\">2</span>];</div><div class=\"line\">     <span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;hr /&gt;&lt;br /&gt;\"</span>;</div><div class=\"line\">     $row=mysqli_fetch_row($result);</div><div class=\"line\">&#125;</div><div class=\"line\">mysqli_close($link);</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">method</span>=<span class=\"string\">\"POST\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"InsetToDB.php\"</span>&gt;</span></div><div class=\"line\">昵称:<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">size</span>=<span class=\"string\">\"8\"</span>; <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>内容:<span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">rows</span>=<span class=\"string\">\"5\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">cols</span>=<span class=\"string\">\"60\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"提交\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"B1\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"reset\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"重置\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"B2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><code>IncDB.php</code>:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?php</span></span></div><div class=\"line\"><span class=\"comment\">//error_reporting(E_ALL ^ E_WARNING);</span></div><div class=\"line\">$link=mysqli_connect(<span class=\"string\">'127.0.0.1'</span>,<span class=\"string\">'root'</span>,<span class=\"string\">''</span>);</div><div class=\"line\"><span class=\"keyword\">if</span>(!$link)</div><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"keyword\">die</span>(<span class=\"string\">\"&lt;center&gt;出错啦:1!&lt;/center&gt;\"</span>);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span>(!mysqli_select_db($link,<span class=\"string\">'guestbook'</span>))</div><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"keyword\">die</span>(<span class=\"string\">\"&lt;center&gt;出错啦:2!&lt;/center&gt;\"</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<p><code>InsetToDB.php</code>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">include(<span class=\"string\">\"IncDB.php\"</span>);</div><div class=\"line\"><span class=\"variable\">$name</span>=addslashes(<span class=\"variable\">$_POST</span>[<span class=\"string\">'name'</span>]);</div><div class=\"line\"><span class=\"variable\">$text</span>=addslashes(<span class=\"variable\">$_POST</span>[<span class=\"string\">'text'</span>]);</div><div class=\"line\"><span class=\"variable\">$sql</span> = <span class=\"string\">\"INSERT INTO `intd` (`id`, `name`, `text`, `datetime`) VALUES (NULL, '<span class=\"variable\">$name</span>', '<span class=\"variable\">$text</span>', now());\"</span>;</div><div class=\"line\">//<span class=\"variable\">$sql</span>=<span class=\"string\">\"INSERT INTO `intd` ( , `name` , `text`,`datetime` ) VALUES ( ,'<span class=\"variable\">$name</span>','<span class=\"variable\">$text</span>',now())\"</span>;</div><div class=\"line\"><span class=\"keyword\">if</span>(mysqli_query(<span class=\"variable\">$link</span>,<span class=\"variable\">$sql</span>))</div><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"留言成功！\"</span>;</div><div class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"&lt;meta http-equiv=\"</span>refresh<span class=\"string\">\" content=\"</span>1;URL=index.php<span class=\"string\">\"&gt;\"</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"留言失败！\"</span>;</div><div class=\"line\"></div><div class=\"line\">mysqli_close(<span class=\"variable\">$link</span>);</div><div class=\"line\">?&gt;</div></pre></td></tr></table></figure>\n<p>数据库为：guestbook<br>并且初始化执行：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`intd`</span> (</div><div class=\"line\"><span class=\"string\">`id`</span> <span class=\"built_in\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> auto_increment,</div><div class=\"line\"><span class=\"string\">`name`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">255</span>) <span class=\"built_in\">character</span> <span class=\"keyword\">set</span> utf8 <span class=\"keyword\">collate</span> utf8_bin <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</div><div class=\"line\"><span class=\"string\">`text`</span> <span class=\"built_in\">text</span> <span class=\"built_in\">character</span> <span class=\"keyword\">set</span> utf8 <span class=\"keyword\">collate</span> utf8_bin <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</div><div class=\"line\"><span class=\"string\">`datetime`</span> datetime <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</div><div class=\"line\">PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"string\">`id`</span>)</div><div class=\"line\">) <span class=\"keyword\">ENGINE</span>=MyISAM <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=gb2312 AUTO_INCREMENT=<span class=\"number\">11</span> ;</div></pre></td></tr></table></figure>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<p><img src=\"/img/php-mysql-1.jpg\" alt=\"\"></p>\n<p>数据库中的内容:</p>\n<p><img src=\"/img/php-mysql-2.jpg\" alt=\"\"></p>","more":"<p><code>index.php</code>:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=gbk\"</span>&gt;</span></div><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"keyword\">include</span>(<span class=\"string\">\"IncDB.php\"</span>);</div><div class=\"line\">$result=mysqli_query($link,<span class=\"string\">\"SELECT * FROM intd\"</span>);</div><div class=\"line\">$row=mysqli_fetch_row($result);</div><div class=\"line\"><span class=\"keyword\">while</span>($row)</div><div class=\"line\">&#123;</div><div class=\"line\">     <span class=\"keyword\">echo</span> <span class=\"string\">\"ID: \"</span>.$row[<span class=\"number\">0</span>].<span class=\"string\">\" 姓名: \"</span>.$row[<span class=\"number\">1</span>].<span class=\"string\">\" 时间: \"</span>.$row[<span class=\"number\">3</span>].<span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">     <span class=\"keyword\">echo</span> $row[<span class=\"number\">2</span>];</div><div class=\"line\">     <span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;hr /&gt;&lt;br /&gt;\"</span>;</div><div class=\"line\">     $row=mysqli_fetch_row($result);</div><div class=\"line\">&#125;</div><div class=\"line\">mysqli_close($link);</div><div class=\"line\"><span class=\"meta\">?&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">method</span>=<span class=\"string\">\"POST\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"InsetToDB.php\"</span>&gt;</span></div><div class=\"line\">昵称:<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">size</span>=<span class=\"string\">\"8\"</span>; <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>内容:<span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">rows</span>=<span class=\"string\">\"5\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">cols</span>=<span class=\"string\">\"60\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"提交\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"B1\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"reset\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"重置\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"B2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><code>IncDB.php</code>:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"comment\">//error_reporting(E_ALL ^ E_WARNING);</span></div><div class=\"line\">$link=mysqli_connect(<span class=\"string\">'127.0.0.1'</span>,<span class=\"string\">'root'</span>,<span class=\"string\">''</span>);</div><div class=\"line\"><span class=\"keyword\">if</span>(!$link)</div><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"keyword\">die</span>(<span class=\"string\">\"&lt;center&gt;出错啦:1!&lt;/center&gt;\"</span>);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span>(!mysqli_select_db($link,<span class=\"string\">'guestbook'</span>))</div><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"keyword\">die</span>(<span class=\"string\">\"&lt;center&gt;出错啦:2!&lt;/center&gt;\"</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">?&gt;</span></span></div></pre></td></tr></table></figure>\n<p><code>InsetToDB.php</code>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">include(<span class=\"string\">\"IncDB.php\"</span>);</div><div class=\"line\"><span class=\"variable\">$name</span>=addslashes(<span class=\"variable\">$_POST</span>[<span class=\"string\">'name'</span>]);</div><div class=\"line\"><span class=\"variable\">$text</span>=addslashes(<span class=\"variable\">$_POST</span>[<span class=\"string\">'text'</span>]);</div><div class=\"line\"><span class=\"variable\">$sql</span> = <span class=\"string\">\"INSERT INTO `intd` (`id`, `name`, `text`, `datetime`) VALUES (NULL, '<span class=\"variable\">$name</span>', '<span class=\"variable\">$text</span>', now());\"</span>;</div><div class=\"line\">//<span class=\"variable\">$sql</span>=<span class=\"string\">\"INSERT INTO `intd` ( , `name` , `text`,`datetime` ) VALUES ( ,'<span class=\"variable\">$name</span>','<span class=\"variable\">$text</span>',now())\"</span>;</div><div class=\"line\"><span class=\"keyword\">if</span>(mysqli_query(<span class=\"variable\">$link</span>,<span class=\"variable\">$sql</span>))</div><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"留言成功！\"</span>;</div><div class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"&lt;meta http-equiv=\"</span>refresh<span class=\"string\">\" content=\"</span>1;URL=index.php<span class=\"string\">\"&gt;\"</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"留言失败！\"</span>;</div><div class=\"line\"></div><div class=\"line\">mysqli_close(<span class=\"variable\">$link</span>);</div><div class=\"line\">?&gt;</div></pre></td></tr></table></figure>\n<p>数据库为：guestbook<br>并且初始化执行：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`intd`</span> (</div><div class=\"line\"><span class=\"string\">`id`</span> <span class=\"built_in\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> auto_increment,</div><div class=\"line\"><span class=\"string\">`name`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">255</span>) <span class=\"built_in\">character</span> <span class=\"keyword\">set</span> utf8 <span class=\"keyword\">collate</span> utf8_bin <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</div><div class=\"line\"><span class=\"string\">`text`</span> <span class=\"built_in\">text</span> <span class=\"built_in\">character</span> <span class=\"keyword\">set</span> utf8 <span class=\"keyword\">collate</span> utf8_bin <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</div><div class=\"line\"><span class=\"string\">`datetime`</span> datetime <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</div><div class=\"line\">PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"string\">`id`</span>)</div><div class=\"line\">) <span class=\"keyword\">ENGINE</span>=MyISAM <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=gb2312 AUTO_INCREMENT=<span class=\"number\">11</span> ;</div></pre></td></tr></table></figure>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"QiniuImageLoader","date":"2015-12-15T17:37:03.000Z","_content":"\n> 已开源 [lingochamp/QiniuImageLoader](https://github.com/lingochamp/QiniuImageLoader)\n\n- [版本迭代日志](https://github.com/lingochamp/QiniuImageLoader)\n- [中文说明文档](https://github.com/lingochamp/QiniuImageLoader/blob/master/README.md)\n- [问题讨论区](https://github.com/lingochamp/QiniuImageLoader/issues)\n\n<!-- more -->\n\n---\n\n## 简述所解决问题\n\n常见的图片加载如Picasso、Fresco等从根本上解决网络资源、CPU资源多余消耗的问题。\n\n## 特征\n\n> 目前适配了七牛的[图片加载API](http://developer.qiniu.com/docs/v6/api/reference/fop/image/imageview2.html)。\n\n- 更有效\n- 更节流\n- 更简单\n","source":"_posts/qiniu_imageloader.md","raw":"title: QiniuImageLoader\ndate: 2015-12-16 01:37:03\npermalink: 2015/12/16/qiniu_imageloader\ntags:\n- android\n- Qiniu\n- ImageLoader\n- Picasso\n- 项目\n- 优化\n- github\n\n---\n\n> 已开源 [lingochamp/QiniuImageLoader](https://github.com/lingochamp/QiniuImageLoader)\n\n- [版本迭代日志](https://github.com/lingochamp/QiniuImageLoader)\n- [中文说明文档](https://github.com/lingochamp/QiniuImageLoader/blob/master/README.md)\n- [问题讨论区](https://github.com/lingochamp/QiniuImageLoader/issues)\n\n<!-- more -->\n\n---\n\n## 简述所解决问题\n\n常见的图片加载如Picasso、Fresco等从根本上解决网络资源、CPU资源多余消耗的问题。\n\n## 特征\n\n> 目前适配了七牛的[图片加载API](http://developer.qiniu.com/docs/v6/api/reference/fop/image/imageview2.html)。\n\n- 更有效\n- 更节流\n- 更简单\n","slug":"2015/12/16/qiniu_imageloader","published":1,"updated":"2017-01-26T14:52:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66je003p95bulzepswfe","content":"<blockquote>\n<p>已开源 <a href=\"https://github.com/lingochamp/QiniuImageLoader\" target=\"_blank\" rel=\"external\">lingochamp/QiniuImageLoader</a></p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/lingochamp/QiniuImageLoader\" target=\"_blank\" rel=\"external\">版本迭代日志</a></li>\n<li><a href=\"https://github.com/lingochamp/QiniuImageLoader/blob/master/README.md\" target=\"_blank\" rel=\"external\">中文说明文档</a></li>\n<li><a href=\"https://github.com/lingochamp/QiniuImageLoader/issues\" target=\"_blank\" rel=\"external\">问题讨论区</a></li>\n</ul>\n<a id=\"more\"></a>\n<hr>\n<h2 id=\"简述所解决问题\"><a href=\"#简述所解决问题\" class=\"headerlink\" title=\"简述所解决问题\"></a>简述所解决问题</h2><p>常见的图片加载如Picasso、Fresco等从根本上解决网络资源、CPU资源多余消耗的问题。</p>\n<h2 id=\"特征\"><a href=\"#特征\" class=\"headerlink\" title=\"特征\"></a>特征</h2><blockquote>\n<p>目前适配了七牛的<a href=\"http://developer.qiniu.com/docs/v6/api/reference/fop/image/imageview2.html\" target=\"_blank\" rel=\"external\">图片加载API</a>。</p>\n</blockquote>\n<ul>\n<li>更有效</li>\n<li>更节流</li>\n<li>更简单</li>\n</ul>\n","excerpt":"<blockquote>\n<p>已开源 <a href=\"https://github.com/lingochamp/QiniuImageLoader\">lingochamp/QiniuImageLoader</a></p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/lingochamp/QiniuImageLoader\">版本迭代日志</a></li>\n<li><a href=\"https://github.com/lingochamp/QiniuImageLoader/blob/master/README.md\">中文说明文档</a></li>\n<li><a href=\"https://github.com/lingochamp/QiniuImageLoader/issues\">问题讨论区</a></li>\n</ul>","more":"<hr>\n<h2 id=\"简述所解决问题\"><a href=\"#简述所解决问题\" class=\"headerlink\" title=\"简述所解决问题\"></a>简述所解决问题</h2><p>常见的图片加载如Picasso、Fresco等从根本上解决网络资源、CPU资源多余消耗的问题。</p>\n<h2 id=\"特征\"><a href=\"#特征\" class=\"headerlink\" title=\"特征\"></a>特征</h2><blockquote>\n<p>目前适配了七牛的<a href=\"http://developer.qiniu.com/docs/v6/api/reference/fop/image/imageview2.html\">图片加载API</a>。</p>\n</blockquote>\n<ul>\n<li>更有效</li>\n<li>更节流</li>\n<li>更简单</li>\n</ul>"},{"title":"APK漏洞 \"Shadows Everywhere\"","date":"2015-12-05T16:46:03.000Z","_content":"\n## I. 作用\n\n有效逃避安全软件的扫描\n\n<!-- more -->\n\n## II. 原理\n\n> 通过两个APP协作，将调用者与攻击代码分拆在两个APP\n\n### APP1\n\n将攻击性代码放入合法App的/META-INFO目录下\n\n#### 始末\n\n为什么可以逃避安全检查?\n\n因为没有修改合法App的原始证书与数字签名。因此可以被正常安装或升级\n\n![](/img/shadows_everywhere-1.png)\n\n### APP2\n\n通过读取`/data/app`或`/system/app`或`/system/priv-app` 目录下的APP1.apk文件的/META-INFO中已经准备好的代码，实行攻击\n\n#### 始末\n\n由于这三个目录都是所有人可读的: `-rw-r--r--`\n\n\n---\n\n- [APK 漏洞“黑影无处不在(Shadows Everywhere)”详解](http://jaq.alibaba.com/blog.htm?spm=0.0.0.0.Ioo2FE&id=77)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/shadows_everywhere.md","raw":"title: APK漏洞 \"Shadows Everywhere\"\ndate: 2015-12-06 00:46:03\npermalink: 2015/12/06/shadows_everywhere\ntags:\n- Android\n- 安全\n- META-INFO\n- 证书\n- 签名\n- 攻击\n\n---\n\n## I. 作用\n\n有效逃避安全软件的扫描\n\n<!-- more -->\n\n## II. 原理\n\n> 通过两个APP协作，将调用者与攻击代码分拆在两个APP\n\n### APP1\n\n将攻击性代码放入合法App的/META-INFO目录下\n\n#### 始末\n\n为什么可以逃避安全检查?\n\n因为没有修改合法App的原始证书与数字签名。因此可以被正常安装或升级\n\n![](/img/shadows_everywhere-1.png)\n\n### APP2\n\n通过读取`/data/app`或`/system/app`或`/system/priv-app` 目录下的APP1.apk文件的/META-INFO中已经准备好的代码，实行攻击\n\n#### 始末\n\n由于这三个目录都是所有人可读的: `-rw-r--r--`\n\n\n---\n\n- [APK 漏洞“黑影无处不在(Shadows Everywhere)”详解](http://jaq.alibaba.com/blog.htm?spm=0.0.0.0.Ioo2FE&id=77)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2015/12/06/shadows_everywhere","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66jf003r95buwongbq9e","content":"<h2 id=\"I-作用\"><a href=\"#I-作用\" class=\"headerlink\" title=\"I. 作用\"></a>I. 作用</h2><p>有效逃避安全软件的扫描</p>\n<a id=\"more\"></a>\n<h2 id=\"II-原理\"><a href=\"#II-原理\" class=\"headerlink\" title=\"II. 原理\"></a>II. 原理</h2><blockquote>\n<p>通过两个APP协作，将调用者与攻击代码分拆在两个APP</p>\n</blockquote>\n<h3 id=\"APP1\"><a href=\"#APP1\" class=\"headerlink\" title=\"APP1\"></a>APP1</h3><p>将攻击性代码放入合法App的/META-INFO目录下</p>\n<h4 id=\"始末\"><a href=\"#始末\" class=\"headerlink\" title=\"始末\"></a>始末</h4><p>为什么可以逃避安全检查?</p>\n<p>因为没有修改合法App的原始证书与数字签名。因此可以被正常安装或升级</p>\n<p><img src=\"/img/shadows_everywhere-1.png\" alt=\"\"></p>\n<h3 id=\"APP2\"><a href=\"#APP2\" class=\"headerlink\" title=\"APP2\"></a>APP2</h3><p>通过读取<code>/data/app</code>或<code>/system/app</code>或<code>/system/priv-app</code> 目录下的APP1.apk文件的/META-INFO中已经准备好的代码，实行攻击</p>\n<h4 id=\"始末-1\"><a href=\"#始末-1\" class=\"headerlink\" title=\"始末\"></a>始末</h4><p>由于这三个目录都是所有人可读的: <code>-rw-r--r--</code></p>\n<hr>\n<ul>\n<li><a href=\"http://jaq.alibaba.com/blog.htm?spm=0.0.0.0.Ioo2FE&amp;id=77\" target=\"_blank\" rel=\"external\">APK 漏洞“黑影无处不在(Shadows Everywhere)”详解</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<h2 id=\"I-作用\"><a href=\"#I-作用\" class=\"headerlink\" title=\"I. 作用\"></a>I. 作用</h2><p>有效逃避安全软件的扫描</p>","more":"<h2 id=\"II-原理\"><a href=\"#II-原理\" class=\"headerlink\" title=\"II. 原理\"></a>II. 原理</h2><blockquote>\n<p>通过两个APP协作，将调用者与攻击代码分拆在两个APP</p>\n</blockquote>\n<h3 id=\"APP1\"><a href=\"#APP1\" class=\"headerlink\" title=\"APP1\"></a>APP1</h3><p>将攻击性代码放入合法App的/META-INFO目录下</p>\n<h4 id=\"始末\"><a href=\"#始末\" class=\"headerlink\" title=\"始末\"></a>始末</h4><p>为什么可以逃避安全检查?</p>\n<p>因为没有修改合法App的原始证书与数字签名。因此可以被正常安装或升级</p>\n<p><img src=\"/img/shadows_everywhere-1.png\" alt=\"\"></p>\n<h3 id=\"APP2\"><a href=\"#APP2\" class=\"headerlink\" title=\"APP2\"></a>APP2</h3><p>通过读取<code>/data/app</code>或<code>/system/app</code>或<code>/system/priv-app</code> 目录下的APP1.apk文件的/META-INFO中已经准备好的代码，实行攻击</p>\n<h4 id=\"始末-1\"><a href=\"#始末-1\" class=\"headerlink\" title=\"始末\"></a>始末</h4><p>由于这三个目录都是所有人可读的: <code>-rw-r--r--</code></p>\n<hr>\n<ul>\n<li><a href=\"http://jaq.alibaba.com/blog.htm?spm=0.0.0.0.Ioo2FE&amp;id=77\">APK 漏洞“黑影无处不在(Shadows Everywhere)”详解</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"Ruby 入门","date":"2015-07-26T12:39:03.000Z","_content":"\n> 简单哲学、高生产力、精巧、自然语法、高可读性&可维护性\n> 灵感来自: Lisp(难以读懂)、Perl和Smalltalk\n> 初衷: 让程序员能够更快乐的写代码\n> 动态语言: 更少的代码做更多的事，更敏捷的开发;执行效率比静态语言（Java、C++、etc.）慢，没有编译期可以检查类型错误(单元测试/TTD来解决)\n\n<!--more-->\n\n### Ruby语言推荐入门\n\n1. [Ruby 学习](https://ihower.tw/rails4/ruby.html)\n2. [关于Ruby](https://www.ruby-lang.org/zh_cn/about/)\n3. [20分钟体验Ruby](https://www.ruby-lang.org/zh_cn/documentation/quickstart/)\n4. [Code School Try Ruby](http://tryruby.org/levels/1/challenges/0)\n5. [其他语言与Ruby的对比，学过其他语言的再学习ruby有很大帮助](https://www.ruby-lang.org/zh_cn/documentation/ruby-from-other-languages/)\n\n## 推荐学习网址\n\n- [Ruby官方中文-文档](https://www.ruby-lang.org/zh_cn/documentation/)\n\n- [如何快速学习RoR - 知乎](http://www.zhihu.com/question/19552402)\n\n\n## DSL\n> 目前应用于DSL(Domain-specific language)非常成功。\n\n### 成功的SDL函数库:\n\n- Rake构建工具\n- RSpec测试工具\n- Chef伺服器设定工具\n- Cucumber验收测试\n- ...\n\n## RubyGems\n\n> Ruby的套件管理系统，简化安装以及管理Ruby函数库\n\n也可以通过[The ruby Toolbox](https://www.ruby-toolbox.com/)来查找套件，按照热度排列的。\n\n### 常用指令\n\n```\ngem -v #告诉你RubyGems 的版本\ngem update --system #升级RubyGems的版本\ngem install gem_name #安装某个套件\ngem install gem_name --no-ri --no-rdoc #安装套件，不产生期RDoc和ri文件\ngem list #列出安装的套件\ngem update gem_name #更新最新版本\ngem update #更新所有你安装的Gems\ngem install -v xxx gemname #安装特定版本\ngem uninstall gem_name #反安装\n```\n\n## RoR(Ruby on Rails)\n\n> 作者: David Heinemeier Hanson\n> 2004年DDH将Rails从37sinals商业产品中独立开源出来\n> 目标: 更少的代码，更多的功能，轻量&强大\n> 特点: 社区活跃、轻量、开发周期短\n\n- 采用MVC模式\n- 内建支援单元测试和整合测试\n- 支持Ajax\n- 支持RESTful界面\n- 支持ORM机制\n- 支持HTML5、JQuery\n- ...\n\n### 指导原则\n\n- DRY(Don't Repeat Yourself) 不要重复自己\n- 惯例胜于设定(预设好设定，不需要我们去设定细节)\n- REST -- 最佳模式(Resources和标准的HTTP verbs来组织代码)\n\n### 安装\n\n> 介于国内网络环境，导致rubygems.org放在Amazon S#上面的资源文件间歇性连接失败，Fuxk!! 所以需要配置到taobao以后再试。\n\n国内用户: 以下步骤切换到taobao提供的rubygems.org镜像（15分钟一次与官网同步）\n\n```\n$ gem sources --remove https://rubygems.org/\n$ gem sources -a https://ruby.taobao.org/\n$ gem sources -l\n*** CURRENT SOURCES ***\n\nhttps://ruby.taobao.org\n# 请确保只有 ruby.taobao.org\n```\n\n开始安装rails\n\n```\n# 为了节省安装时间,不安装文件档--no-ri、--no-rdoc(文档google上查更方便，不是吗)\ngem install rails --no-ri --no-rdoc\n```\n\n输入`rails -v`可以看到当前rails的版本\n\n### 开始使用\n\n\n#### I. 创建一个demo的案例:\n\n```\nrails new demo --skip-test-unit\n```\n\n由于`rails new`会用到`bundle`，而介于国内的墙，因此国内用户需要配置下淘宝提供的镜像:\n\n```\nbundle config mirror.https://rubygems.org https://ruby.taobao.org\n```\n\n#### II. 目录分析\n\n创建`demo`以后，会出现一个`demo`文件夹，进入以后的目录结构:\n\n档案/目录 | 用途\n:-:|:-\nGemfile|    设定Rails应用程式会使用哪些Gems套件\nREADME| 专案说明：你可以用来告诉其他人你的应用程式是做什么用的，如何使用等等。\nRakefile|   用来载入可以被命令列执行的一些Rake任务\napp/|   放Controllers、Models和Views档案，接下来的内容主要都在这个目录。\nconfig/|    应用程式设定档、路由规则、资料库设定等等\nconfig.ru|  用来启动应用程式的Rack伺服器设定档\ndb/|    资料库的结构纲要\ndoc/|   用来放你的文件\nlib/|   放一些自定的Module和类别档案\nlog/|   应用程式的Log记录档\npublic/|    唯一可以在网路上看到的目录，这是你的图档、JavaScript、CSS和其他静态档案摆放的地方\nbin/|   放rails这个指令和放其他的script指令\ntest/|  单元测试、fixtures及整合测试等程式\ntmp/|   暂时性的档案\n\n#### III. 启动服务器\n\n```\n#rails server可以间写为rails s\nbin/rails server\n```\n\n屏幕上出现:\n\n```\n=> Booting WEBrick\n=> Rails 4.2.3 application starting in development on http://localhost:3000\n=> Run `rails server -h` for more startup options\n=> Ctrl-C to shutdown server\n[2015-07-26 20:00:19] INFO  WEBrick 1.3.1\n[2015-07-26 20:00:19] INFO  ruby 2.2.2 (2015-04-13) [x86_64-darwin14]\n[2015-07-26 20:00:19] INFO  WEBrick::HTTPServer#start: pid=23454 port=3000\n```\n说明已经运行在3000端口了:[http://localhost:3000](http://localhost:3000)\n\n![](/img/ruby_guide_1.png)\n\n#### IV. 终端服务器\n\n```\n#开发模式下，除修改config或vender目录下的文件，其他都不用重启，正式上限模式，任何文件修改都需要重新启动服务器\n<Ctrl> + <C>\n```\n\n### Hello World\n\n> 基于Rails的MVC框架，由于Hello World不需要数据支持，因此我们只需要涉及到C-V\n\n#### I. 创建一个welcome:\n\n```\n#rails generate 可以简写未rails g\nbin/rails generate controller welcome\n```\n\n#### II. 对页面进行路由:\n\n编辑`config/routes.rb`文件，新增一行:\n```\nRails::Application.routes.draw do\n    # 将http://localhost:3000/welcome/say_hello这样的网址对应到welcome Controller的say Action上。\n    get \"welcome/say_hello\" => \"welcome#say\"\n    ...\nend\n```\n\n#### III. 在Control中添加`say`Action已经在View上也添加\n\n编辑`app/controllers/welcome_controller.rb`,加入一个`say`方法\n\n```\nclass WelcomeController < ApplicationController\n    def say\n    end\nend\n```\n\n编辑`app/views/welcome/`下创建对应Action名称(`say`)的文件:`say.html.erb`(html表示是HTML格式文件)，(erb表示是ERb样式)，添加内容如下:\n\n```\n<h1>Hello, World!</h1>\n```\n\n#### IV. 验证\n\n打开地址[http://localhost:3000/welcome/say_hello](http://localhost:3000/welcome/say_hello):\n\n![](/img/ruby_guide_2.png)\n\n### 进一步学习\n\n#### View相关\n\n```\n#link_to 是Rails内部方法用于输出超链接，welcome_say_hello_path输出地址/welcome/say_hello\n<p><%=link_to 'Hello!', welcome_say_hello_path %></p>\n#root_path 首页地址(http://localhost:3000/)\n<p><%=link_to 'Home', root_path %></p>\n```\n\n#### Model相关\n\n> Rails数据设定文件是: `config/database.yml`\n> Rails内建数据库SQLite是一套非常轻量的数据库文件(资料库)而已，流量大的线上环境不合适，用来开发和测试非常好用。\n\n##### `YAML`\n\n> 这里的配置文件是`YAML`格式文件，`YAML`是可读性高的表达配置文件的存档格式。\n\n严格要求:\n1. 缩进\n2. 冒号后面必须有空格\n\n**注意:** 数字与换行尽量用引号，避免出错(一串数字会被解析成Fixnum)\n\n\n##### 三个模式在`config/database.yml`配置:\n\n- `development` 开发模式\n- `test` 测试模式，用在自动测试时，由于test的数据库会被删除，因此不要配置成`development`的与`production`的\n- `prodution`正式上线的模式\n\n```\n#建立资料库,会在db/目录下建立development、test的SQLite3的存档\nbin/rake db:create\n\n#Rake是Ruby的命令工具，这个命令列出rake的所有可用指令\nrake -T\n```\n\n##### scaffold鹰架功能\n\n> 会自动生成一组Model、Views、Controller代码，完成一个简易的C(Creat)R(Read)U(Update)D(Delete)的资料库\n\n```\n# 利用scaffold功能，建立person表，包含字段name，bio，birthday\nbin/rails g scaffold person name:string bio:text birthday:date\n\n# 通过迁移档，来生成资料页(http://localhost:3000/people)，支持rud\nbin/rake db:migrate\n```\n\n目录 | 说明\n:-: | :-\n`db/migrate/20141021135430_create_people.rb`| 用来建立people资料库资料表的Migration(你的档案开头名称会有不同的时间)\n`app/models/person.rb`|   person model档案\n`app/controllers/people_controller.rb` |   people controller档案\n`app/views/people/index.html.erb` |    用来显示所有文章的index页面\n`app/views/people/edit.html.erb` | 用来编辑文章的页面\n`app/views/people/show.html.erb` | 用来显示特定一篇文章的页面\n`app/views/people/new.html.erb` |  用来新增文章的页面\n`app/views/people/_form.html.erb` |    用来显示编辑和新增文章的表单局部(Partial)样板\n`app/helpers/people_helper.rb` |   可在文章Views中使用的Helper方法\n`config/routes.rb` |   设定URL路由规则的档案，scaffold再此新增了一行resources :people\n`app/assets/stylesheets/scaffold.css.scss` |   Scaffold鹰架提供的样式档案\n`app/assets/stylesheets/people.css.scss` | people的CSS样式档案\n`app/assets/javascripts/people.js.coffee` |    people的JavaScript档案\n\n#### `config/routes.rb`相关\n\n```\nRails::Application.routes.draw do\n    ...\n    #设置wecome为首页\n    root :to => \"welcome#index\"\n    ...\nend\n```\n\n\n## 错误排查\n\n### NameError\n\n读取了一个不存在/没有初始化过的成员变量\n\n### SyntaxError:unexpected$end\n\n多了或少了`end`关键字，可以单独用`ruby -w`去执行发生错误的代码，例如`ruby -w app/controller/welcome_controller`这样会打开Ruby的警告模式\n\n\n---\n## 参考资料\n\n- [Ruby on Rails实战圣经](https://ihower.tw/rails4)\n- [RubyGems镜像 - 淘宝网](http://ruby.taobao.org/)\n\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/ruby_guide.md","raw":"title: Ruby 入门\ndate: 2015-07-26 20:39:03\npermalink: 2015/07/26/ruby_guide\ntags:\n- 后端\n- rails\n- ruby\n- 语言\n\n---\n\n> 简单哲学、高生产力、精巧、自然语法、高可读性&可维护性\n> 灵感来自: Lisp(难以读懂)、Perl和Smalltalk\n> 初衷: 让程序员能够更快乐的写代码\n> 动态语言: 更少的代码做更多的事，更敏捷的开发;执行效率比静态语言（Java、C++、etc.）慢，没有编译期可以检查类型错误(单元测试/TTD来解决)\n\n<!--more-->\n\n### Ruby语言推荐入门\n\n1. [Ruby 学习](https://ihower.tw/rails4/ruby.html)\n2. [关于Ruby](https://www.ruby-lang.org/zh_cn/about/)\n3. [20分钟体验Ruby](https://www.ruby-lang.org/zh_cn/documentation/quickstart/)\n4. [Code School Try Ruby](http://tryruby.org/levels/1/challenges/0)\n5. [其他语言与Ruby的对比，学过其他语言的再学习ruby有很大帮助](https://www.ruby-lang.org/zh_cn/documentation/ruby-from-other-languages/)\n\n## 推荐学习网址\n\n- [Ruby官方中文-文档](https://www.ruby-lang.org/zh_cn/documentation/)\n\n- [如何快速学习RoR - 知乎](http://www.zhihu.com/question/19552402)\n\n\n## DSL\n> 目前应用于DSL(Domain-specific language)非常成功。\n\n### 成功的SDL函数库:\n\n- Rake构建工具\n- RSpec测试工具\n- Chef伺服器设定工具\n- Cucumber验收测试\n- ...\n\n## RubyGems\n\n> Ruby的套件管理系统，简化安装以及管理Ruby函数库\n\n也可以通过[The ruby Toolbox](https://www.ruby-toolbox.com/)来查找套件，按照热度排列的。\n\n### 常用指令\n\n```\ngem -v #告诉你RubyGems 的版本\ngem update --system #升级RubyGems的版本\ngem install gem_name #安装某个套件\ngem install gem_name --no-ri --no-rdoc #安装套件，不产生期RDoc和ri文件\ngem list #列出安装的套件\ngem update gem_name #更新最新版本\ngem update #更新所有你安装的Gems\ngem install -v xxx gemname #安装特定版本\ngem uninstall gem_name #反安装\n```\n\n## RoR(Ruby on Rails)\n\n> 作者: David Heinemeier Hanson\n> 2004年DDH将Rails从37sinals商业产品中独立开源出来\n> 目标: 更少的代码，更多的功能，轻量&强大\n> 特点: 社区活跃、轻量、开发周期短\n\n- 采用MVC模式\n- 内建支援单元测试和整合测试\n- 支持Ajax\n- 支持RESTful界面\n- 支持ORM机制\n- 支持HTML5、JQuery\n- ...\n\n### 指导原则\n\n- DRY(Don't Repeat Yourself) 不要重复自己\n- 惯例胜于设定(预设好设定，不需要我们去设定细节)\n- REST -- 最佳模式(Resources和标准的HTTP verbs来组织代码)\n\n### 安装\n\n> 介于国内网络环境，导致rubygems.org放在Amazon S#上面的资源文件间歇性连接失败，Fuxk!! 所以需要配置到taobao以后再试。\n\n国内用户: 以下步骤切换到taobao提供的rubygems.org镜像（15分钟一次与官网同步）\n\n```\n$ gem sources --remove https://rubygems.org/\n$ gem sources -a https://ruby.taobao.org/\n$ gem sources -l\n*** CURRENT SOURCES ***\n\nhttps://ruby.taobao.org\n# 请确保只有 ruby.taobao.org\n```\n\n开始安装rails\n\n```\n# 为了节省安装时间,不安装文件档--no-ri、--no-rdoc(文档google上查更方便，不是吗)\ngem install rails --no-ri --no-rdoc\n```\n\n输入`rails -v`可以看到当前rails的版本\n\n### 开始使用\n\n\n#### I. 创建一个demo的案例:\n\n```\nrails new demo --skip-test-unit\n```\n\n由于`rails new`会用到`bundle`，而介于国内的墙，因此国内用户需要配置下淘宝提供的镜像:\n\n```\nbundle config mirror.https://rubygems.org https://ruby.taobao.org\n```\n\n#### II. 目录分析\n\n创建`demo`以后，会出现一个`demo`文件夹，进入以后的目录结构:\n\n档案/目录 | 用途\n:-:|:-\nGemfile|    设定Rails应用程式会使用哪些Gems套件\nREADME| 专案说明：你可以用来告诉其他人你的应用程式是做什么用的，如何使用等等。\nRakefile|   用来载入可以被命令列执行的一些Rake任务\napp/|   放Controllers、Models和Views档案，接下来的内容主要都在这个目录。\nconfig/|    应用程式设定档、路由规则、资料库设定等等\nconfig.ru|  用来启动应用程式的Rack伺服器设定档\ndb/|    资料库的结构纲要\ndoc/|   用来放你的文件\nlib/|   放一些自定的Module和类别档案\nlog/|   应用程式的Log记录档\npublic/|    唯一可以在网路上看到的目录，这是你的图档、JavaScript、CSS和其他静态档案摆放的地方\nbin/|   放rails这个指令和放其他的script指令\ntest/|  单元测试、fixtures及整合测试等程式\ntmp/|   暂时性的档案\n\n#### III. 启动服务器\n\n```\n#rails server可以间写为rails s\nbin/rails server\n```\n\n屏幕上出现:\n\n```\n=> Booting WEBrick\n=> Rails 4.2.3 application starting in development on http://localhost:3000\n=> Run `rails server -h` for more startup options\n=> Ctrl-C to shutdown server\n[2015-07-26 20:00:19] INFO  WEBrick 1.3.1\n[2015-07-26 20:00:19] INFO  ruby 2.2.2 (2015-04-13) [x86_64-darwin14]\n[2015-07-26 20:00:19] INFO  WEBrick::HTTPServer#start: pid=23454 port=3000\n```\n说明已经运行在3000端口了:[http://localhost:3000](http://localhost:3000)\n\n![](/img/ruby_guide_1.png)\n\n#### IV. 终端服务器\n\n```\n#开发模式下，除修改config或vender目录下的文件，其他都不用重启，正式上限模式，任何文件修改都需要重新启动服务器\n<Ctrl> + <C>\n```\n\n### Hello World\n\n> 基于Rails的MVC框架，由于Hello World不需要数据支持，因此我们只需要涉及到C-V\n\n#### I. 创建一个welcome:\n\n```\n#rails generate 可以简写未rails g\nbin/rails generate controller welcome\n```\n\n#### II. 对页面进行路由:\n\n编辑`config/routes.rb`文件，新增一行:\n```\nRails::Application.routes.draw do\n    # 将http://localhost:3000/welcome/say_hello这样的网址对应到welcome Controller的say Action上。\n    get \"welcome/say_hello\" => \"welcome#say\"\n    ...\nend\n```\n\n#### III. 在Control中添加`say`Action已经在View上也添加\n\n编辑`app/controllers/welcome_controller.rb`,加入一个`say`方法\n\n```\nclass WelcomeController < ApplicationController\n    def say\n    end\nend\n```\n\n编辑`app/views/welcome/`下创建对应Action名称(`say`)的文件:`say.html.erb`(html表示是HTML格式文件)，(erb表示是ERb样式)，添加内容如下:\n\n```\n<h1>Hello, World!</h1>\n```\n\n#### IV. 验证\n\n打开地址[http://localhost:3000/welcome/say_hello](http://localhost:3000/welcome/say_hello):\n\n![](/img/ruby_guide_2.png)\n\n### 进一步学习\n\n#### View相关\n\n```\n#link_to 是Rails内部方法用于输出超链接，welcome_say_hello_path输出地址/welcome/say_hello\n<p><%=link_to 'Hello!', welcome_say_hello_path %></p>\n#root_path 首页地址(http://localhost:3000/)\n<p><%=link_to 'Home', root_path %></p>\n```\n\n#### Model相关\n\n> Rails数据设定文件是: `config/database.yml`\n> Rails内建数据库SQLite是一套非常轻量的数据库文件(资料库)而已，流量大的线上环境不合适，用来开发和测试非常好用。\n\n##### `YAML`\n\n> 这里的配置文件是`YAML`格式文件，`YAML`是可读性高的表达配置文件的存档格式。\n\n严格要求:\n1. 缩进\n2. 冒号后面必须有空格\n\n**注意:** 数字与换行尽量用引号，避免出错(一串数字会被解析成Fixnum)\n\n\n##### 三个模式在`config/database.yml`配置:\n\n- `development` 开发模式\n- `test` 测试模式，用在自动测试时，由于test的数据库会被删除，因此不要配置成`development`的与`production`的\n- `prodution`正式上线的模式\n\n```\n#建立资料库,会在db/目录下建立development、test的SQLite3的存档\nbin/rake db:create\n\n#Rake是Ruby的命令工具，这个命令列出rake的所有可用指令\nrake -T\n```\n\n##### scaffold鹰架功能\n\n> 会自动生成一组Model、Views、Controller代码，完成一个简易的C(Creat)R(Read)U(Update)D(Delete)的资料库\n\n```\n# 利用scaffold功能，建立person表，包含字段name，bio，birthday\nbin/rails g scaffold person name:string bio:text birthday:date\n\n# 通过迁移档，来生成资料页(http://localhost:3000/people)，支持rud\nbin/rake db:migrate\n```\n\n目录 | 说明\n:-: | :-\n`db/migrate/20141021135430_create_people.rb`| 用来建立people资料库资料表的Migration(你的档案开头名称会有不同的时间)\n`app/models/person.rb`|   person model档案\n`app/controllers/people_controller.rb` |   people controller档案\n`app/views/people/index.html.erb` |    用来显示所有文章的index页面\n`app/views/people/edit.html.erb` | 用来编辑文章的页面\n`app/views/people/show.html.erb` | 用来显示特定一篇文章的页面\n`app/views/people/new.html.erb` |  用来新增文章的页面\n`app/views/people/_form.html.erb` |    用来显示编辑和新增文章的表单局部(Partial)样板\n`app/helpers/people_helper.rb` |   可在文章Views中使用的Helper方法\n`config/routes.rb` |   设定URL路由规则的档案，scaffold再此新增了一行resources :people\n`app/assets/stylesheets/scaffold.css.scss` |   Scaffold鹰架提供的样式档案\n`app/assets/stylesheets/people.css.scss` | people的CSS样式档案\n`app/assets/javascripts/people.js.coffee` |    people的JavaScript档案\n\n#### `config/routes.rb`相关\n\n```\nRails::Application.routes.draw do\n    ...\n    #设置wecome为首页\n    root :to => \"welcome#index\"\n    ...\nend\n```\n\n\n## 错误排查\n\n### NameError\n\n读取了一个不存在/没有初始化过的成员变量\n\n### SyntaxError:unexpected$end\n\n多了或少了`end`关键字，可以单独用`ruby -w`去执行发生错误的代码，例如`ruby -w app/controller/welcome_controller`这样会打开Ruby的警告模式\n\n\n---\n## 参考资料\n\n- [Ruby on Rails实战圣经](https://ihower.tw/rails4)\n- [RubyGems镜像 - 淘宝网](http://ruby.taobao.org/)\n\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2015/07/26/ruby_guide","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66jf003t95buseocwiri","content":"<blockquote>\n<p>简单哲学、高生产力、精巧、自然语法、高可读性&amp;可维护性<br>灵感来自: Lisp(难以读懂)、Perl和Smalltalk<br>初衷: 让程序员能够更快乐的写代码<br>动态语言: 更少的代码做更多的事，更敏捷的开发;执行效率比静态语言（Java、C++、etc.）慢，没有编译期可以检查类型错误(单元测试/TTD来解决)</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"Ruby语言推荐入门\"><a href=\"#Ruby语言推荐入门\" class=\"headerlink\" title=\"Ruby语言推荐入门\"></a>Ruby语言推荐入门</h3><ol>\n<li><a href=\"https://ihower.tw/rails4/ruby.html\" target=\"_blank\" rel=\"external\">Ruby 学习</a></li>\n<li><a href=\"https://www.ruby-lang.org/zh_cn/about/\" target=\"_blank\" rel=\"external\">关于Ruby</a></li>\n<li><a href=\"https://www.ruby-lang.org/zh_cn/documentation/quickstart/\" target=\"_blank\" rel=\"external\">20分钟体验Ruby</a></li>\n<li><a href=\"http://tryruby.org/levels/1/challenges/0\" target=\"_blank\" rel=\"external\">Code School Try Ruby</a></li>\n<li><a href=\"https://www.ruby-lang.org/zh_cn/documentation/ruby-from-other-languages/\" target=\"_blank\" rel=\"external\">其他语言与Ruby的对比，学过其他语言的再学习ruby有很大帮助</a></li>\n</ol>\n<h2 id=\"推荐学习网址\"><a href=\"#推荐学习网址\" class=\"headerlink\" title=\"推荐学习网址\"></a>推荐学习网址</h2><ul>\n<li><p><a href=\"https://www.ruby-lang.org/zh_cn/documentation/\" target=\"_blank\" rel=\"external\">Ruby官方中文-文档</a></p>\n</li>\n<li><p><a href=\"http://www.zhihu.com/question/19552402\" target=\"_blank\" rel=\"external\">如何快速学习RoR - 知乎</a></p>\n</li>\n</ul>\n<h2 id=\"DSL\"><a href=\"#DSL\" class=\"headerlink\" title=\"DSL\"></a>DSL</h2><blockquote>\n<p>目前应用于DSL(Domain-specific language)非常成功。</p>\n</blockquote>\n<h3 id=\"成功的SDL函数库\"><a href=\"#成功的SDL函数库\" class=\"headerlink\" title=\"成功的SDL函数库:\"></a>成功的SDL函数库:</h3><ul>\n<li>Rake构建工具</li>\n<li>RSpec测试工具</li>\n<li>Chef伺服器设定工具</li>\n<li>Cucumber验收测试</li>\n<li>…</li>\n</ul>\n<h2 id=\"RubyGems\"><a href=\"#RubyGems\" class=\"headerlink\" title=\"RubyGems\"></a>RubyGems</h2><blockquote>\n<p>Ruby的套件管理系统，简化安装以及管理Ruby函数库</p>\n</blockquote>\n<p>也可以通过<a href=\"https://www.ruby-toolbox.com/\" target=\"_blank\" rel=\"external\">The ruby Toolbox</a>来查找套件，按照热度排列的。</p>\n<h3 id=\"常用指令\"><a href=\"#常用指令\" class=\"headerlink\" title=\"常用指令\"></a>常用指令</h3><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem -v <span class=\"comment\">#告诉你RubyGems 的版本</span></div><div class=\"line\">gem update --system <span class=\"comment\">#升级RubyGems的版本</span></div><div class=\"line\">gem <span class=\"keyword\">install</span> gem_name <span class=\"comment\">#安装某个套件</span></div><div class=\"line\">gem <span class=\"keyword\">install</span> gem_name --no-ri --no-rdoc <span class=\"comment\">#安装套件，不产生期RDoc和ri文件</span></div><div class=\"line\">gem list <span class=\"comment\">#列出安装的套件</span></div><div class=\"line\">gem update gem_name <span class=\"comment\">#更新最新版本</span></div><div class=\"line\">gem update <span class=\"comment\">#更新所有你安装的Gems</span></div><div class=\"line\">gem <span class=\"keyword\">install</span> -v xxx gemname <span class=\"comment\">#安装特定版本</span></div><div class=\"line\">gem uninstall gem_name <span class=\"comment\">#反安装</span></div></pre></td></tr></table></figure>\n<h2 id=\"RoR-Ruby-on-Rails\"><a href=\"#RoR-Ruby-on-Rails\" class=\"headerlink\" title=\"RoR(Ruby on Rails)\"></a>RoR(Ruby on Rails)</h2><blockquote>\n<p>作者: David Heinemeier Hanson<br>2004年DDH将Rails从37sinals商业产品中独立开源出来<br>目标: 更少的代码，更多的功能，轻量&amp;强大<br>特点: 社区活跃、轻量、开发周期短</p>\n</blockquote>\n<ul>\n<li>采用MVC模式</li>\n<li>内建支援单元测试和整合测试</li>\n<li>支持Ajax</li>\n<li>支持RESTful界面</li>\n<li>支持ORM机制</li>\n<li>支持HTML5、JQuery</li>\n<li>…</li>\n</ul>\n<h3 id=\"指导原则\"><a href=\"#指导原则\" class=\"headerlink\" title=\"指导原则\"></a>指导原则</h3><ul>\n<li>DRY(Don’t Repeat Yourself) 不要重复自己</li>\n<li>惯例胜于设定(预设好设定，不需要我们去设定细节)</li>\n<li>REST – 最佳模式(Resources和标准的HTTP verbs来组织代码)</li>\n</ul>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><blockquote>\n<p>介于国内网络环境，导致rubygems.org放在Amazon S#上面的资源文件间歇性连接失败，Fuxk!! 所以需要配置到taobao以后再试。</p>\n</blockquote>\n<p>国内用户: 以下步骤切换到taobao提供的rubygems.org镜像（15分钟一次与官网同步）</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">$</span> gem sources --remove https:<span class=\"comment\">//rubygems.org/</span></div><div class=\"line\"><span class=\"symbol\">$</span> gem sources -a https:<span class=\"comment\">//ruby.taobao.org/</span></div><div class=\"line\"><span class=\"symbol\">$</span> gem sources -l</div><div class=\"line\"><span class=\"comment\">*** CURRENT SOURCES ***</span></div><div class=\"line\"></div><div class=\"line\">https:<span class=\"comment\">//ruby.taobao.org</span></div><div class=\"line\"># 请确保只有 ruby.taobao.org</div></pre></td></tr></table></figure>\n<p>开始安装rails</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 为了节省安装时间,不安装文件档--<span class=\"keyword\">no</span>-<span class=\"keyword\">ri</span>、--<span class=\"keyword\">no</span>-rdoc(文档google上查更方便，不是吗)</div><div class=\"line\">gem install rails --<span class=\"keyword\">no</span>-<span class=\"keyword\">ri</span> --<span class=\"keyword\">no</span>-rdoc</div></pre></td></tr></table></figure>\n<p>输入<code>rails -v</code>可以看到当前rails的版本</p>\n<h3 id=\"开始使用\"><a href=\"#开始使用\" class=\"headerlink\" title=\"开始使用\"></a>开始使用</h3><h4 id=\"I-创建一个demo的案例\"><a href=\"#I-创建一个demo的案例\" class=\"headerlink\" title=\"I. 创建一个demo的案例:\"></a>I. 创建一个demo的案例:</h4><figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rails <span class=\"keyword\">new</span> demo --<span class=\"keyword\">skip</span>-test-<span class=\"keyword\">unit</span></div></pre></td></tr></table></figure>\n<p>由于<code>rails new</code>会用到<code>bundle</code>，而介于国内的墙，因此国内用户需要配置下淘宝提供的镜像:</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bundle config mirror<span class=\"selector-class\">.https</span>:<span class=\"comment\">//rubygems.org https://ruby.taobao.org</span></div></pre></td></tr></table></figure>\n<h4 id=\"II-目录分析\"><a href=\"#II-目录分析\" class=\"headerlink\" title=\"II. 目录分析\"></a>II. 目录分析</h4><p>创建<code>demo</code>以后，会出现一个<code>demo</code>文件夹，进入以后的目录结构:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">档案/目录</th>\n<th style=\"text-align:left\">用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Gemfile</td>\n<td style=\"text-align:left\">设定Rails应用程式会使用哪些Gems套件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">README</td>\n<td style=\"text-align:left\">专案说明：你可以用来告诉其他人你的应用程式是做什么用的，如何使用等等。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Rakefile</td>\n<td style=\"text-align:left\">用来载入可以被命令列执行的一些Rake任务</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">app/</td>\n<td style=\"text-align:left\">放Controllers、Models和Views档案，接下来的内容主要都在这个目录。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">config/</td>\n<td style=\"text-align:left\">应用程式设定档、路由规则、资料库设定等等</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">config.ru</td>\n<td style=\"text-align:left\">用来启动应用程式的Rack伺服器设定档</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">db/</td>\n<td style=\"text-align:left\">资料库的结构纲要</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">doc/</td>\n<td style=\"text-align:left\">用来放你的文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lib/</td>\n<td style=\"text-align:left\">放一些自定的Module和类别档案</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">log/</td>\n<td style=\"text-align:left\">应用程式的Log记录档</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">public/</td>\n<td style=\"text-align:left\">唯一可以在网路上看到的目录，这是你的图档、JavaScript、CSS和其他静态档案摆放的地方</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">bin/</td>\n<td style=\"text-align:left\">放rails这个指令和放其他的script指令</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">test/</td>\n<td style=\"text-align:left\">单元测试、fixtures及整合测试等程式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">tmp/</td>\n<td style=\"text-align:left\">暂时性的档案</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"III-启动服务器\"><a href=\"#III-启动服务器\" class=\"headerlink\" title=\"III. 启动服务器\"></a>III. 启动服务器</h4><figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#rails server可以间写为rails s</span></div><div class=\"line\">bin/rails <span class=\"keyword\">server</span></div></pre></td></tr></table></figure>\n<p>屏幕上出现:</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">=&gt; Booting WEBrick</div><div class=\"line\">=&gt; Rails <span class=\"number\">4.2</span>.<span class=\"number\">3</span> application starting in development on ht<span class=\"symbol\">tp:</span>//localho<span class=\"symbol\">st:3000</span></div><div class=\"line\">=&gt; Run `rails server -h` for more startup options</div><div class=\"line\">=&gt; Ctrl-C to shutdown server</div><div class=\"line\">[<span class=\"number\">2015</span>-<span class=\"number\">07</span>-<span class=\"number\">26</span> <span class=\"symbol\">20:00</span><span class=\"symbol\">:19</span>] <span class=\"built_in\">INFO</span>  WEBrick <span class=\"number\">1.3</span>.<span class=\"number\">1</span></div><div class=\"line\">[<span class=\"number\">2015</span>-<span class=\"number\">07</span>-<span class=\"number\">26</span> <span class=\"symbol\">20:00</span><span class=\"symbol\">:19</span>] <span class=\"built_in\">INFO</span>  ruby <span class=\"number\">2.2</span>.<span class=\"number\">2</span> (<span class=\"number\">2015</span>-<span class=\"number\">04</span>-<span class=\"number\">13</span>) [x86_64-darwin14]</div><div class=\"line\">[<span class=\"number\">2015</span>-<span class=\"number\">07</span>-<span class=\"number\">26</span> <span class=\"symbol\">20:00</span><span class=\"symbol\">:19</span>] <span class=\"built_in\">INFO</span>  WEBri<span class=\"symbol\">ck:</span><span class=\"symbol\">:HT</span>TPServer#sta<span class=\"symbol\">rt:</span> pid=<span class=\"number\">23454</span> port=<span class=\"number\">3000</span></div></pre></td></tr></table></figure>\n<p>说明已经运行在3000端口了:<a href=\"http://localhost:3000\" target=\"_blank\" rel=\"external\">http://localhost:3000</a></p>\n<p><img src=\"/img/ruby_guide_1.png\" alt=\"\"></p>\n<h4 id=\"IV-终端服务器\"><a href=\"#IV-终端服务器\" class=\"headerlink\" title=\"IV. 终端服务器\"></a>IV. 终端服务器</h4><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#开发模式下，除修改config或vender目录下的文件，其他都不用重启，正式上限模式，任何文件修改都需要重新启动服务器</span></div><div class=\"line\"><span class=\"params\">&lt;Ctrl&gt;</span> + <span class=\"params\">&lt;C&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h3><blockquote>\n<p>基于Rails的MVC框架，由于Hello World不需要数据支持，因此我们只需要涉及到C-V</p>\n</blockquote>\n<h4 id=\"I-创建一个welcome\"><a href=\"#I-创建一个welcome\" class=\"headerlink\" title=\"I. 创建一个welcome:\"></a>I. 创建一个welcome:</h4><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#rails <span class=\"keyword\">generate</span> 可以简写未rails g</div><div class=\"line\">bin/rails <span class=\"keyword\">generate</span> controller welcome</div></pre></td></tr></table></figure>\n<h4 id=\"II-对页面进行路由\"><a href=\"#II-对页面进行路由\" class=\"headerlink\" title=\"II. 对页面进行路由:\"></a>II. 对页面进行路由:</h4><p>编辑<code>config/routes.rb</code>文件，新增一行:<br><figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Rails::Application.routes.<span class=\"built_in\">draw</span> <span class=\"keyword\">do</span></div><div class=\"line\">    <span class=\"meta\"># 将http:<span class=\"comment\">//localhost:3000/welcome/say_hello这样的网址对应到welcome Controller的say Action上。</span></span></div><div class=\"line\">    get <span class=\"string\">\"welcome/say_hello\"</span> =&gt; <span class=\"string\">\"welcome#say\"</span></div><div class=\"line\">    ...</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"III-在Control中添加sayAction已经在View上也添加\"><a href=\"#III-在Control中添加sayAction已经在View上也添加\" class=\"headerlink\" title=\"III. 在Control中添加sayAction已经在View上也添加\"></a>III. 在Control中添加<code>say</code>Action已经在View上也添加</h4><p>编辑<code>app/controllers/welcome_controller.rb</code>,加入一个<code>say</code>方法</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WelcomeController</span> &lt; ApplicationController</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">say</span></span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<p>编辑<code>app/views/welcome/</code>下创建对应Action名称(<code>say</code>)的文件:<code>say.html.erb</code>(html表示是HTML格式文件)，(erb表示是ERb样式)，添加内容如下:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, World!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"IV-验证\"><a href=\"#IV-验证\" class=\"headerlink\" title=\"IV. 验证\"></a>IV. 验证</h4><p>打开地址<a href=\"http://localhost:3000/welcome/say_hello\" target=\"_blank\" rel=\"external\">http://localhost:3000/welcome/say_hello</a>:</p>\n<p><img src=\"/img/ruby_guide_2.png\" alt=\"\"></p>\n<h3 id=\"进一步学习\"><a href=\"#进一步学习\" class=\"headerlink\" title=\"进一步学习\"></a>进一步学习</h3><h4 id=\"View相关\"><a href=\"#View相关\" class=\"headerlink\" title=\"View相关\"></a>View相关</h4><figure class=\"highlight erb\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\">#link_to 是Rails内部方法用于输出超链接，welcome_say_hello_path输出地址/welcome/say_hello</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span></span><span class=\"ruby\">link_to <span class=\"string\">'Hello!'</span>, welcome_say_hello_path </span><span class=\"xml\"><span class=\"tag\">%&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></div><div class=\"line\">#root_path 首页地址(http://localhost:3000/)</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span></span><span class=\"ruby\">link_to <span class=\"string\">'Home'</span>, root_path </span><span class=\"xml\"><span class=\"tag\">%&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<h4 id=\"Model相关\"><a href=\"#Model相关\" class=\"headerlink\" title=\"Model相关\"></a>Model相关</h4><blockquote>\n<p>Rails数据设定文件是: <code>config/database.yml</code><br>Rails内建数据库SQLite是一套非常轻量的数据库文件(资料库)而已，流量大的线上环境不合适，用来开发和测试非常好用。</p>\n</blockquote>\n<h5 id=\"YAML\"><a href=\"#YAML\" class=\"headerlink\" title=\"YAML\"></a><code>YAML</code></h5><blockquote>\n<p>这里的配置文件是<code>YAML</code>格式文件，<code>YAML</code>是可读性高的表达配置文件的存档格式。</p>\n</blockquote>\n<p>严格要求:</p>\n<ol>\n<li>缩进</li>\n<li>冒号后面必须有空格</li>\n</ol>\n<p><strong>注意:</strong> 数字与换行尽量用引号，避免出错(一串数字会被解析成Fixnum)</p>\n<h5 id=\"三个模式在config-database-yml配置\"><a href=\"#三个模式在config-database-yml配置\" class=\"headerlink\" title=\"三个模式在config/database.yml配置:\"></a>三个模式在<code>config/database.yml</code>配置:</h5><ul>\n<li><code>development</code> 开发模式</li>\n<li><code>test</code> 测试模式，用在自动测试时，由于test的数据库会被删除，因此不要配置成<code>development</code>的与<code>production</code>的</li>\n<li><code>prodution</code>正式上线的模式</li>\n</ul>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#建立资料库,会在db/目录下建立development、test的SQLite3的存档</span></div><div class=\"line\">bin/rake db:create</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#Rake是Ruby的命令工具，这个命令列出rake的所有可用指令</span></div><div class=\"line\">rake -T</div></pre></td></tr></table></figure>\n<h5 id=\"scaffold鹰架功能\"><a href=\"#scaffold鹰架功能\" class=\"headerlink\" title=\"scaffold鹰架功能\"></a>scaffold鹰架功能</h5><blockquote>\n<p>会自动生成一组Model、Views、Controller代码，完成一个简易的C(Creat)R(Read)U(Update)D(Delete)的资料库</p>\n</blockquote>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 利用scaffold功能，建立person表，包含字段name，bio，birthday</span></div><div class=\"line\"><span class=\"keyword\">bin/rails </span>g <span class=\"keyword\">scaffold </span>person name:string <span class=\"keyword\">bio:text </span><span class=\"keyword\">birthday:date</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 通过迁移档，来生成资料页(http://localhost:3000/people)，支持rud</span></div><div class=\"line\"><span class=\"keyword\">bin/rake </span>db:migrate</div></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">目录</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>db/migrate/20141021135430_create_people.rb</code></td>\n<td style=\"text-align:left\">用来建立people资料库资料表的Migration(你的档案开头名称会有不同的时间)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>app/models/person.rb</code></td>\n<td style=\"text-align:left\">person model档案</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>app/controllers/people_controller.rb</code></td>\n<td style=\"text-align:left\">people controller档案</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>app/views/people/index.html.erb</code></td>\n<td style=\"text-align:left\">用来显示所有文章的index页面</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>app/views/people/edit.html.erb</code></td>\n<td style=\"text-align:left\">用来编辑文章的页面</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>app/views/people/show.html.erb</code></td>\n<td style=\"text-align:left\">用来显示特定一篇文章的页面</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>app/views/people/new.html.erb</code></td>\n<td style=\"text-align:left\">用来新增文章的页面</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>app/views/people/_form.html.erb</code></td>\n<td style=\"text-align:left\">用来显示编辑和新增文章的表单局部(Partial)样板</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>app/helpers/people_helper.rb</code></td>\n<td style=\"text-align:left\">可在文章Views中使用的Helper方法</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>config/routes.rb</code></td>\n<td style=\"text-align:left\">设定URL路由规则的档案，scaffold再此新增了一行resources :people</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>app/assets/stylesheets/scaffold.css.scss</code></td>\n<td style=\"text-align:left\">Scaffold鹰架提供的样式档案</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>app/assets/stylesheets/people.css.scss</code></td>\n<td style=\"text-align:left\">people的CSS样式档案</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>app/assets/javascripts/people.js.coffee</code></td>\n<td style=\"text-align:left\">people的JavaScript档案</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"config-routes-rb相关\"><a href=\"#config-routes-rb相关\" class=\"headerlink\" title=\"config/routes.rb相关\"></a><code>config/routes.rb</code>相关</h4><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">Rails:</span><span class=\"symbol\">:Application</span>.routes.draw <span class=\"keyword\">do</span></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">#设置wecome为首页</span></div><div class=\"line\">    root <span class=\"symbol\">:to</span> =&gt; <span class=\"string\">\"welcome#index\"</span></div><div class=\"line\">    ...</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<h2 id=\"错误排查\"><a href=\"#错误排查\" class=\"headerlink\" title=\"错误排查\"></a>错误排查</h2><h3 id=\"NameError\"><a href=\"#NameError\" class=\"headerlink\" title=\"NameError\"></a>NameError</h3><p>读取了一个不存在/没有初始化过的成员变量</p>\n<h3 id=\"SyntaxError-unexpected-end\"><a href=\"#SyntaxError-unexpected-end\" class=\"headerlink\" title=\"SyntaxError:unexpected$end\"></a>SyntaxError:unexpected$end</h3><p>多了或少了<code>end</code>关键字，可以单独用<code>ruby -w</code>去执行发生错误的代码，例如<code>ruby -w app/controller/welcome_controller</code>这样会打开Ruby的警告模式</p>\n<hr>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://ihower.tw/rails4\" target=\"_blank\" rel=\"external\">Ruby on Rails实战圣经</a></li>\n<li><a href=\"http://ruby.taobao.org/\" target=\"_blank\" rel=\"external\">RubyGems镜像 - 淘宝网</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>简单哲学、高生产力、精巧、自然语法、高可读性&amp;可维护性<br>灵感来自: Lisp(难以读懂)、Perl和Smalltalk<br>初衷: 让程序员能够更快乐的写代码<br>动态语言: 更少的代码做更多的事，更敏捷的开发;执行效率比静态语言（Java、C++、etc.）慢，没有编译期可以检查类型错误(单元测试/TTD来解决)</p>\n</blockquote>","more":"<h3 id=\"Ruby语言推荐入门\"><a href=\"#Ruby语言推荐入门\" class=\"headerlink\" title=\"Ruby语言推荐入门\"></a>Ruby语言推荐入门</h3><ol>\n<li><a href=\"https://ihower.tw/rails4/ruby.html\">Ruby 学习</a></li>\n<li><a href=\"https://www.ruby-lang.org/zh_cn/about/\">关于Ruby</a></li>\n<li><a href=\"https://www.ruby-lang.org/zh_cn/documentation/quickstart/\">20分钟体验Ruby</a></li>\n<li><a href=\"http://tryruby.org/levels/1/challenges/0\">Code School Try Ruby</a></li>\n<li><a href=\"https://www.ruby-lang.org/zh_cn/documentation/ruby-from-other-languages/\">其他语言与Ruby的对比，学过其他语言的再学习ruby有很大帮助</a></li>\n</ol>\n<h2 id=\"推荐学习网址\"><a href=\"#推荐学习网址\" class=\"headerlink\" title=\"推荐学习网址\"></a>推荐学习网址</h2><ul>\n<li><p><a href=\"https://www.ruby-lang.org/zh_cn/documentation/\">Ruby官方中文-文档</a></p>\n</li>\n<li><p><a href=\"http://www.zhihu.com/question/19552402\">如何快速学习RoR - 知乎</a></p>\n</li>\n</ul>\n<h2 id=\"DSL\"><a href=\"#DSL\" class=\"headerlink\" title=\"DSL\"></a>DSL</h2><blockquote>\n<p>目前应用于DSL(Domain-specific language)非常成功。</p>\n</blockquote>\n<h3 id=\"成功的SDL函数库\"><a href=\"#成功的SDL函数库\" class=\"headerlink\" title=\"成功的SDL函数库:\"></a>成功的SDL函数库:</h3><ul>\n<li>Rake构建工具</li>\n<li>RSpec测试工具</li>\n<li>Chef伺服器设定工具</li>\n<li>Cucumber验收测试</li>\n<li>…</li>\n</ul>\n<h2 id=\"RubyGems\"><a href=\"#RubyGems\" class=\"headerlink\" title=\"RubyGems\"></a>RubyGems</h2><blockquote>\n<p>Ruby的套件管理系统，简化安装以及管理Ruby函数库</p>\n</blockquote>\n<p>也可以通过<a href=\"https://www.ruby-toolbox.com/\">The ruby Toolbox</a>来查找套件，按照热度排列的。</p>\n<h3 id=\"常用指令\"><a href=\"#常用指令\" class=\"headerlink\" title=\"常用指令\"></a>常用指令</h3><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem -v <span class=\"comment\">#告诉你RubyGems 的版本</span></div><div class=\"line\">gem update --system <span class=\"comment\">#升级RubyGems的版本</span></div><div class=\"line\">gem <span class=\"keyword\">install</span> gem_name <span class=\"comment\">#安装某个套件</span></div><div class=\"line\">gem <span class=\"keyword\">install</span> gem_name --no-ri --no-rdoc <span class=\"comment\">#安装套件，不产生期RDoc和ri文件</span></div><div class=\"line\">gem list <span class=\"comment\">#列出安装的套件</span></div><div class=\"line\">gem update gem_name <span class=\"comment\">#更新最新版本</span></div><div class=\"line\">gem update <span class=\"comment\">#更新所有你安装的Gems</span></div><div class=\"line\">gem <span class=\"keyword\">install</span> -v xxx gemname <span class=\"comment\">#安装特定版本</span></div><div class=\"line\">gem uninstall gem_name <span class=\"comment\">#反安装</span></div></pre></td></tr></table></figure>\n<h2 id=\"RoR-Ruby-on-Rails\"><a href=\"#RoR-Ruby-on-Rails\" class=\"headerlink\" title=\"RoR(Ruby on Rails)\"></a>RoR(Ruby on Rails)</h2><blockquote>\n<p>作者: David Heinemeier Hanson<br>2004年DDH将Rails从37sinals商业产品中独立开源出来<br>目标: 更少的代码，更多的功能，轻量&amp;强大<br>特点: 社区活跃、轻量、开发周期短</p>\n</blockquote>\n<ul>\n<li>采用MVC模式</li>\n<li>内建支援单元测试和整合测试</li>\n<li>支持Ajax</li>\n<li>支持RESTful界面</li>\n<li>支持ORM机制</li>\n<li>支持HTML5、JQuery</li>\n<li>…</li>\n</ul>\n<h3 id=\"指导原则\"><a href=\"#指导原则\" class=\"headerlink\" title=\"指导原则\"></a>指导原则</h3><ul>\n<li>DRY(Don’t Repeat Yourself) 不要重复自己</li>\n<li>惯例胜于设定(预设好设定，不需要我们去设定细节)</li>\n<li>REST – 最佳模式(Resources和标准的HTTP verbs来组织代码)</li>\n</ul>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><blockquote>\n<p>介于国内网络环境，导致rubygems.org放在Amazon S#上面的资源文件间歇性连接失败，Fuxk!! 所以需要配置到taobao以后再试。</p>\n</blockquote>\n<p>国内用户: 以下步骤切换到taobao提供的rubygems.org镜像（15分钟一次与官网同步）</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">$</span> gem sources --remove https:<span class=\"comment\">//rubygems.org/</span></div><div class=\"line\"><span class=\"symbol\">$</span> gem sources -a https:<span class=\"comment\">//ruby.taobao.org/</span></div><div class=\"line\"><span class=\"symbol\">$</span> gem sources -l</div><div class=\"line\"><span class=\"comment\">*** CURRENT SOURCES ***</span></div><div class=\"line\"></div><div class=\"line\">https:<span class=\"comment\">//ruby.taobao.org</span></div><div class=\"line\"># 请确保只有 ruby.taobao.org</div></pre></td></tr></table></figure>\n<p>开始安装rails</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 为了节省安装时间,不安装文件档--<span class=\"keyword\">no</span>-<span class=\"keyword\">ri</span>、--<span class=\"keyword\">no</span>-rdoc(文档google上查更方便，不是吗)</div><div class=\"line\">gem install rails --<span class=\"keyword\">no</span>-<span class=\"keyword\">ri</span> --<span class=\"keyword\">no</span>-rdoc</div></pre></td></tr></table></figure>\n<p>输入<code>rails -v</code>可以看到当前rails的版本</p>\n<h3 id=\"开始使用\"><a href=\"#开始使用\" class=\"headerlink\" title=\"开始使用\"></a>开始使用</h3><h4 id=\"I-创建一个demo的案例\"><a href=\"#I-创建一个demo的案例\" class=\"headerlink\" title=\"I. 创建一个demo的案例:\"></a>I. 创建一个demo的案例:</h4><figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rails <span class=\"keyword\">new</span> demo --<span class=\"keyword\">skip</span>-test-<span class=\"keyword\">unit</span></div></pre></td></tr></table></figure>\n<p>由于<code>rails new</code>会用到<code>bundle</code>，而介于国内的墙，因此国内用户需要配置下淘宝提供的镜像:</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bundle config mirror<span class=\"selector-class\">.https</span>:<span class=\"comment\">//rubygems.org https://ruby.taobao.org</span></div></pre></td></tr></table></figure>\n<h4 id=\"II-目录分析\"><a href=\"#II-目录分析\" class=\"headerlink\" title=\"II. 目录分析\"></a>II. 目录分析</h4><p>创建<code>demo</code>以后，会出现一个<code>demo</code>文件夹，进入以后的目录结构:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">档案/目录</th>\n<th style=\"text-align:left\">用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Gemfile</td>\n<td style=\"text-align:left\">设定Rails应用程式会使用哪些Gems套件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">README</td>\n<td style=\"text-align:left\">专案说明：你可以用来告诉其他人你的应用程式是做什么用的，如何使用等等。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Rakefile</td>\n<td style=\"text-align:left\">用来载入可以被命令列执行的一些Rake任务</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">app/</td>\n<td style=\"text-align:left\">放Controllers、Models和Views档案，接下来的内容主要都在这个目录。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">config/</td>\n<td style=\"text-align:left\">应用程式设定档、路由规则、资料库设定等等</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">config.ru</td>\n<td style=\"text-align:left\">用来启动应用程式的Rack伺服器设定档</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">db/</td>\n<td style=\"text-align:left\">资料库的结构纲要</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">doc/</td>\n<td style=\"text-align:left\">用来放你的文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lib/</td>\n<td style=\"text-align:left\">放一些自定的Module和类别档案</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">log/</td>\n<td style=\"text-align:left\">应用程式的Log记录档</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">public/</td>\n<td style=\"text-align:left\">唯一可以在网路上看到的目录，这是你的图档、JavaScript、CSS和其他静态档案摆放的地方</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">bin/</td>\n<td style=\"text-align:left\">放rails这个指令和放其他的script指令</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">test/</td>\n<td style=\"text-align:left\">单元测试、fixtures及整合测试等程式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">tmp/</td>\n<td style=\"text-align:left\">暂时性的档案</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"III-启动服务器\"><a href=\"#III-启动服务器\" class=\"headerlink\" title=\"III. 启动服务器\"></a>III. 启动服务器</h4><figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#rails server可以间写为rails s</span></div><div class=\"line\">bin/rails <span class=\"keyword\">server</span></div></pre></td></tr></table></figure>\n<p>屏幕上出现:</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">=&gt; Booting WEBrick</div><div class=\"line\">=&gt; Rails <span class=\"number\">4.2</span>.<span class=\"number\">3</span> application starting in development on ht<span class=\"symbol\">tp:</span>//localho<span class=\"symbol\">st:3000</span></div><div class=\"line\">=&gt; Run `rails server -h` for more startup options</div><div class=\"line\">=&gt; Ctrl-C to shutdown server</div><div class=\"line\">[<span class=\"number\">2015</span>-<span class=\"number\">07</span>-<span class=\"number\">26</span> <span class=\"symbol\">20:00</span><span class=\"symbol\">:19</span>] <span class=\"built_in\">INFO</span>  WEBrick <span class=\"number\">1.3</span>.<span class=\"number\">1</span></div><div class=\"line\">[<span class=\"number\">2015</span>-<span class=\"number\">07</span>-<span class=\"number\">26</span> <span class=\"symbol\">20:00</span><span class=\"symbol\">:19</span>] <span class=\"built_in\">INFO</span>  ruby <span class=\"number\">2.2</span>.<span class=\"number\">2</span> (<span class=\"number\">2015</span>-<span class=\"number\">04</span>-<span class=\"number\">13</span>) [x86_64-darwin14]</div><div class=\"line\">[<span class=\"number\">2015</span>-<span class=\"number\">07</span>-<span class=\"number\">26</span> <span class=\"symbol\">20:00</span><span class=\"symbol\">:19</span>] <span class=\"built_in\">INFO</span>  WEBri<span class=\"symbol\">ck:</span><span class=\"symbol\">:HT</span>TPServer#sta<span class=\"symbol\">rt:</span> pid=<span class=\"number\">23454</span> port=<span class=\"number\">3000</span></div></pre></td></tr></table></figure>\n<p>说明已经运行在3000端口了:<a href=\"http://localhost:3000\">http://localhost:3000</a></p>\n<p><img src=\"/img/ruby_guide_1.png\" alt=\"\"></p>\n<h4 id=\"IV-终端服务器\"><a href=\"#IV-终端服务器\" class=\"headerlink\" title=\"IV. 终端服务器\"></a>IV. 终端服务器</h4><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#开发模式下，除修改config或vender目录下的文件，其他都不用重启，正式上限模式，任何文件修改都需要重新启动服务器</span></div><div class=\"line\"><span class=\"params\">&lt;Ctrl&gt;</span> + <span class=\"params\">&lt;C&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h3><blockquote>\n<p>基于Rails的MVC框架，由于Hello World不需要数据支持，因此我们只需要涉及到C-V</p>\n</blockquote>\n<h4 id=\"I-创建一个welcome\"><a href=\"#I-创建一个welcome\" class=\"headerlink\" title=\"I. 创建一个welcome:\"></a>I. 创建一个welcome:</h4><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#rails <span class=\"keyword\">generate</span> 可以简写未rails g</div><div class=\"line\">bin/rails <span class=\"keyword\">generate</span> controller welcome</div></pre></td></tr></table></figure>\n<h4 id=\"II-对页面进行路由\"><a href=\"#II-对页面进行路由\" class=\"headerlink\" title=\"II. 对页面进行路由:\"></a>II. 对页面进行路由:</h4><p>编辑<code>config/routes.rb</code>文件，新增一行:<br><figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Rails::Application.routes.<span class=\"built_in\">draw</span> <span class=\"keyword\">do</span></div><div class=\"line\">    <span class=\"meta\"># 将http:<span class=\"comment\">//localhost:3000/welcome/say_hello这样的网址对应到welcome Controller的say Action上。</span></span></div><div class=\"line\">    get <span class=\"string\">\"welcome/say_hello\"</span> =&gt; <span class=\"string\">\"welcome#say\"</span></div><div class=\"line\">    ...</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"III-在Control中添加sayAction已经在View上也添加\"><a href=\"#III-在Control中添加sayAction已经在View上也添加\" class=\"headerlink\" title=\"III. 在Control中添加sayAction已经在View上也添加\"></a>III. 在Control中添加<code>say</code>Action已经在View上也添加</h4><p>编辑<code>app/controllers/welcome_controller.rb</code>,加入一个<code>say</code>方法</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WelcomeController</span> &lt; ApplicationController</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">say</span></span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<p>编辑<code>app/views/welcome/</code>下创建对应Action名称(<code>say</code>)的文件:<code>say.html.erb</code>(html表示是HTML格式文件)，(erb表示是ERb样式)，添加内容如下:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, World!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"IV-验证\"><a href=\"#IV-验证\" class=\"headerlink\" title=\"IV. 验证\"></a>IV. 验证</h4><p>打开地址<a href=\"http://localhost:3000/welcome/say_hello\">http://localhost:3000/welcome/say_hello</a>:</p>\n<p><img src=\"/img/ruby_guide_2.png\" alt=\"\"></p>\n<h3 id=\"进一步学习\"><a href=\"#进一步学习\" class=\"headerlink\" title=\"进一步学习\"></a>进一步学习</h3><h4 id=\"View相关\"><a href=\"#View相关\" class=\"headerlink\" title=\"View相关\"></a>View相关</h4><figure class=\"highlight erb\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\">#link_to 是Rails内部方法用于输出超链接，welcome_say_hello_path输出地址/welcome/say_hello</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span></span></span><span class=\"ruby\">link_to <span class=\"string\">'Hello!'</span>, welcome_say_hello_path </span><span class=\"xml\"><span class=\"tag\">%&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">#root_path 首页地址(http://localhost:3000/)</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span></span></span><span class=\"ruby\">link_to <span class=\"string\">'Home'</span>, root_path </span><span class=\"xml\"><span class=\"tag\">%&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<h4 id=\"Model相关\"><a href=\"#Model相关\" class=\"headerlink\" title=\"Model相关\"></a>Model相关</h4><blockquote>\n<p>Rails数据设定文件是: <code>config/database.yml</code><br>Rails内建数据库SQLite是一套非常轻量的数据库文件(资料库)而已，流量大的线上环境不合适，用来开发和测试非常好用。</p>\n</blockquote>\n<h5 id=\"YAML\"><a href=\"#YAML\" class=\"headerlink\" title=\"YAML\"></a><code>YAML</code></h5><blockquote>\n<p>这里的配置文件是<code>YAML</code>格式文件，<code>YAML</code>是可读性高的表达配置文件的存档格式。</p>\n</blockquote>\n<p>严格要求:</p>\n<ol>\n<li>缩进</li>\n<li>冒号后面必须有空格</li>\n</ol>\n<p><strong>注意:</strong> 数字与换行尽量用引号，避免出错(一串数字会被解析成Fixnum)</p>\n<h5 id=\"三个模式在config-database-yml配置\"><a href=\"#三个模式在config-database-yml配置\" class=\"headerlink\" title=\"三个模式在config/database.yml配置:\"></a>三个模式在<code>config/database.yml</code>配置:</h5><ul>\n<li><code>development</code> 开发模式</li>\n<li><code>test</code> 测试模式，用在自动测试时，由于test的数据库会被删除，因此不要配置成<code>development</code>的与<code>production</code>的</li>\n<li><code>prodution</code>正式上线的模式</li>\n</ul>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#建立资料库,会在db/目录下建立development、test的SQLite3的存档</span></div><div class=\"line\">bin/rake db:create</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#Rake是Ruby的命令工具，这个命令列出rake的所有可用指令</span></div><div class=\"line\">rake -T</div></pre></td></tr></table></figure>\n<h5 id=\"scaffold鹰架功能\"><a href=\"#scaffold鹰架功能\" class=\"headerlink\" title=\"scaffold鹰架功能\"></a>scaffold鹰架功能</h5><blockquote>\n<p>会自动生成一组Model、Views、Controller代码，完成一个简易的C(Creat)R(Read)U(Update)D(Delete)的资料库</p>\n</blockquote>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 利用scaffold功能，建立person表，包含字段name，bio，birthday</span></div><div class=\"line\"><span class=\"keyword\">bin/rails </span>g <span class=\"keyword\">scaffold </span>person name:string <span class=\"keyword\">bio:text </span><span class=\"keyword\">birthday:date</div><div class=\"line\"></span></div><div class=\"line\"><span class=\"comment\"># 通过迁移档，来生成资料页(http://localhost:3000/people)，支持rud</span></div><div class=\"line\"><span class=\"keyword\">bin/rake </span>db:migrate</div></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">目录</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>db/migrate/20141021135430_create_people.rb</code></td>\n<td style=\"text-align:left\">用来建立people资料库资料表的Migration(你的档案开头名称会有不同的时间)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>app/models/person.rb</code></td>\n<td style=\"text-align:left\">person model档案</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>app/controllers/people_controller.rb</code></td>\n<td style=\"text-align:left\">people controller档案</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>app/views/people/index.html.erb</code></td>\n<td style=\"text-align:left\">用来显示所有文章的index页面</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>app/views/people/edit.html.erb</code></td>\n<td style=\"text-align:left\">用来编辑文章的页面</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>app/views/people/show.html.erb</code></td>\n<td style=\"text-align:left\">用来显示特定一篇文章的页面</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>app/views/people/new.html.erb</code></td>\n<td style=\"text-align:left\">用来新增文章的页面</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>app/views/people/_form.html.erb</code></td>\n<td style=\"text-align:left\">用来显示编辑和新增文章的表单局部(Partial)样板</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>app/helpers/people_helper.rb</code></td>\n<td style=\"text-align:left\">可在文章Views中使用的Helper方法</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>config/routes.rb</code></td>\n<td style=\"text-align:left\">设定URL路由规则的档案，scaffold再此新增了一行resources :people</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>app/assets/stylesheets/scaffold.css.scss</code></td>\n<td style=\"text-align:left\">Scaffold鹰架提供的样式档案</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>app/assets/stylesheets/people.css.scss</code></td>\n<td style=\"text-align:left\">people的CSS样式档案</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>app/assets/javascripts/people.js.coffee</code></td>\n<td style=\"text-align:left\">people的JavaScript档案</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"config-routes-rb相关\"><a href=\"#config-routes-rb相关\" class=\"headerlink\" title=\"config/routes.rb相关\"></a><code>config/routes.rb</code>相关</h4><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">Rails:</span><span class=\"symbol\">:Application</span>.routes.draw <span class=\"keyword\">do</span></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">#设置wecome为首页</span></div><div class=\"line\">    root <span class=\"symbol\">:to</span> =&gt; <span class=\"string\">\"welcome#index\"</span></div><div class=\"line\">    ...</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<h2 id=\"错误排查\"><a href=\"#错误排查\" class=\"headerlink\" title=\"错误排查\"></a>错误排查</h2><h3 id=\"NameError\"><a href=\"#NameError\" class=\"headerlink\" title=\"NameError\"></a>NameError</h3><p>读取了一个不存在/没有初始化过的成员变量</p>\n<h3 id=\"SyntaxError-unexpected-end\"><a href=\"#SyntaxError-unexpected-end\" class=\"headerlink\" title=\"SyntaxError:unexpected$end\"></a>SyntaxError:unexpected$end</h3><p>多了或少了<code>end</code>关键字，可以单独用<code>ruby -w</code>去执行发生错误的代码，例如<code>ruby -w app/controller/welcome_controller</code>这样会打开Ruby的警告模式</p>\n<hr>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://ihower.tw/rails4\">Ruby on Rails实战圣经</a></li>\n<li><a href=\"http://ruby.taobao.org/\">RubyGems镜像 - 淘宝网</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"Span省略号处理","date":"2015-09-17T00:35:03.000Z","_content":"\n> 由于Android TextView最大宽度尾部省略号的场景，在内容含有Span的时候，并未对Span处理，导致达到最大宽度尾部无省略号，甚至Span绘制不完全等异常现象，就该问题进行处理。\n\n<!-- more -->\n\n## 伤心的故事\n\n虽然我发现包括，手Q、脉脉、网易云音乐等在这块处理都有问题，或者是都没有处理吧。。。因此欣然的写了这个算法。抱着造福一方的心态开源。。\n\n最终的解决是猛然回头发现`android.text.TextUtils#ellipsize(...):CharSequence`已经很好的分装了类似方法。\n\n#### 看图理解\n\n> 还是没有明白解决啥问题？不多废话，上图!\n\n![](https://raw.githubusercontent.com/lingochamp/SpanEllipsizeEnd/master/imgs/demo.jpg)\n\n## I. 基本算法\n\n![](https://raw.githubusercontent.com/lingochamp/SpanEllipsizeEnd/master/imgs/algorithm.jpg)\n\n## II. 使用方法\n\n简单如下:\n\n```\nmDemoTv.setText(SpanEllipsizeEndHelper.matchMaxWidth(demoSS, mDemoTv));\n```\n\n## III. TODO\n\n- 就目前只支持ImageSpan处理，不断拓展其他Span处理。\n- 就目前只支持单行处理，将在以后，考虑多行处理。\n\n## IV. GitHub\n\n[SpanEllipsizeEnd](https://github.com/lingochamp/SpanEllipsizeEnd)\n","source":"_posts/span_ellipsize_end.md","raw":"title: Span省略号处理\ndate: 2015-09-17 08:35:03\npermalink: 2015/09/17/span_ellipsize_end\ntags:\n- Android\n- SpannableString\n- Android\n- Span\n- Ellipsize\n- MaxWidth\n\n---\n\n> 由于Android TextView最大宽度尾部省略号的场景，在内容含有Span的时候，并未对Span处理，导致达到最大宽度尾部无省略号，甚至Span绘制不完全等异常现象，就该问题进行处理。\n\n<!-- more -->\n\n## 伤心的故事\n\n虽然我发现包括，手Q、脉脉、网易云音乐等在这块处理都有问题，或者是都没有处理吧。。。因此欣然的写了这个算法。抱着造福一方的心态开源。。\n\n最终的解决是猛然回头发现`android.text.TextUtils#ellipsize(...):CharSequence`已经很好的分装了类似方法。\n\n#### 看图理解\n\n> 还是没有明白解决啥问题？不多废话，上图!\n\n![](https://raw.githubusercontent.com/lingochamp/SpanEllipsizeEnd/master/imgs/demo.jpg)\n\n## I. 基本算法\n\n![](https://raw.githubusercontent.com/lingochamp/SpanEllipsizeEnd/master/imgs/algorithm.jpg)\n\n## II. 使用方法\n\n简单如下:\n\n```\nmDemoTv.setText(SpanEllipsizeEndHelper.matchMaxWidth(demoSS, mDemoTv));\n```\n\n## III. TODO\n\n- 就目前只支持ImageSpan处理，不断拓展其他Span处理。\n- 就目前只支持单行处理，将在以后，考虑多行处理。\n\n## IV. GitHub\n\n[SpanEllipsizeEnd](https://github.com/lingochamp/SpanEllipsizeEnd)\n","slug":"2015/09/17/span_ellipsize_end","published":1,"updated":"2017-01-26T14:52:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66jg003w95bumko59a9e","content":"<blockquote>\n<p>由于Android TextView最大宽度尾部省略号的场景，在内容含有Span的时候，并未对Span处理，导致达到最大宽度尾部无省略号，甚至Span绘制不完全等异常现象，就该问题进行处理。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"伤心的故事\"><a href=\"#伤心的故事\" class=\"headerlink\" title=\"伤心的故事\"></a>伤心的故事</h2><p>虽然我发现包括，手Q、脉脉、网易云音乐等在这块处理都有问题，或者是都没有处理吧。。。因此欣然的写了这个算法。抱着造福一方的心态开源。。</p>\n<p>最终的解决是猛然回头发现<code>android.text.TextUtils#ellipsize(...):CharSequence</code>已经很好的分装了类似方法。</p>\n<h4 id=\"看图理解\"><a href=\"#看图理解\" class=\"headerlink\" title=\"看图理解\"></a>看图理解</h4><blockquote>\n<p>还是没有明白解决啥问题？不多废话，上图!</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/lingochamp/SpanEllipsizeEnd/master/imgs/demo.jpg\" alt=\"\"></p>\n<h2 id=\"I-基本算法\"><a href=\"#I-基本算法\" class=\"headerlink\" title=\"I. 基本算法\"></a>I. 基本算法</h2><p><img src=\"https://raw.githubusercontent.com/lingochamp/SpanEllipsizeEnd/master/imgs/algorithm.jpg\" alt=\"\"></p>\n<h2 id=\"II-使用方法\"><a href=\"#II-使用方法\" class=\"headerlink\" title=\"II. 使用方法\"></a>II. 使用方法</h2><p>简单如下:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">mDemoTv</span><span class=\"selector-class\">.setText</span>(<span class=\"selector-tag\">SpanEllipsizeEndHelper</span><span class=\"selector-class\">.matchMaxWidth</span>(<span class=\"selector-tag\">demoSS</span>, <span class=\"selector-tag\">mDemoTv</span>));</div></pre></td></tr></table></figure>\n<h2 id=\"III-TODO\"><a href=\"#III-TODO\" class=\"headerlink\" title=\"III. TODO\"></a>III. TODO</h2><ul>\n<li>就目前只支持ImageSpan处理，不断拓展其他Span处理。</li>\n<li>就目前只支持单行处理，将在以后，考虑多行处理。</li>\n</ul>\n<h2 id=\"IV-GitHub\"><a href=\"#IV-GitHub\" class=\"headerlink\" title=\"IV. GitHub\"></a>IV. GitHub</h2><p><a href=\"https://github.com/lingochamp/SpanEllipsizeEnd\" target=\"_blank\" rel=\"external\">SpanEllipsizeEnd</a></p>\n","excerpt":"<blockquote>\n<p>由于Android TextView最大宽度尾部省略号的场景，在内容含有Span的时候，并未对Span处理，导致达到最大宽度尾部无省略号，甚至Span绘制不完全等异常现象，就该问题进行处理。</p>\n</blockquote>","more":"<h2 id=\"伤心的故事\"><a href=\"#伤心的故事\" class=\"headerlink\" title=\"伤心的故事\"></a>伤心的故事</h2><p>虽然我发现包括，手Q、脉脉、网易云音乐等在这块处理都有问题，或者是都没有处理吧。。。因此欣然的写了这个算法。抱着造福一方的心态开源。。</p>\n<p>最终的解决是猛然回头发现<code>android.text.TextUtils#ellipsize(...):CharSequence</code>已经很好的分装了类似方法。</p>\n<h4 id=\"看图理解\"><a href=\"#看图理解\" class=\"headerlink\" title=\"看图理解\"></a>看图理解</h4><blockquote>\n<p>还是没有明白解决啥问题？不多废话，上图!</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/lingochamp/SpanEllipsizeEnd/master/imgs/demo.jpg\" alt=\"\"></p>\n<h2 id=\"I-基本算法\"><a href=\"#I-基本算法\" class=\"headerlink\" title=\"I. 基本算法\"></a>I. 基本算法</h2><p><img src=\"https://raw.githubusercontent.com/lingochamp/SpanEllipsizeEnd/master/imgs/algorithm.jpg\" alt=\"\"></p>\n<h2 id=\"II-使用方法\"><a href=\"#II-使用方法\" class=\"headerlink\" title=\"II. 使用方法\"></a>II. 使用方法</h2><p>简单如下:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">mDemoTv</span><span class=\"selector-class\">.setText</span>(<span class=\"selector-tag\">SpanEllipsizeEndHelper</span><span class=\"selector-class\">.matchMaxWidth</span>(<span class=\"selector-tag\">demoSS</span>, <span class=\"selector-tag\">mDemoTv</span>));</div></pre></td></tr></table></figure>\n<h2 id=\"III-TODO\"><a href=\"#III-TODO\" class=\"headerlink\" title=\"III. TODO\"></a>III. TODO</h2><ul>\n<li>就目前只支持ImageSpan处理，不断拓展其他Span处理。</li>\n<li>就目前只支持单行处理，将在以后，考虑多行处理。</li>\n</ul>\n<h2 id=\"IV-GitHub\"><a href=\"#IV-GitHub\" class=\"headerlink\" title=\"IV. GitHub\"></a>IV. GitHub</h2><p><a href=\"https://github.com/lingochamp/SpanEllipsizeEnd\">SpanEllipsizeEnd</a></p>"},{"title":"ThreadDebugger And ThreadPool","date":"2016-09-01T08:43:03.000Z","_content":"\n> 已开源 [Jacksgong/ThreadDebugger](https://github.com/Jacksgong/ThreadDebugger)\n\n- [中文迭代日志](https://github.com/Jacksgong/ThreadDebugger/blob/master/CHANGELOG_zh.md)\n- [中文说明文档](https://github.com/Jacksgong/ThreadDebugger/blob/master/README_zh.md)\n- [问题讨论区](https://github.com/Jacksgong/ThreadDebugger/issues)\n\n<!-- more -->\n\n---\n\n## 简述所解决问题\n\n#### 线程调试器\n\n虽然我们知道已经有很多方法进行线程调试，如通过Android Studio Monitor 进行Allocation Tracking，在分析结果中会带有期间线程的一些信息；或者是通过Android Device Monitor进行Method Profiling，在分析结果中也会带有期间线程的一些信息。但是每次都需要进行启动关闭，并且每次结果分析都要几秒，几十秒甚至更久，显得不是很灵活。\n\nThreadDebugger是一个简单易用的线程调试器，可以帮助您随时查看应用中所有线程的使用情况，以及变化情况。\n\n#### 线程池创建工具\n\n该线程池创建工具，相比系统的Executors强制要求每次执行任务的时候都需要指定任务的名称，以便于更好的调试与监控，并且提供非常便捷的创建相关规则的线程池。\n系统提供的DownloadManager由于是考虑系统层面所有应用公用，不够灵活。\n\n## 特征\n\n- 便捷\n- 易用\n\n## Demo\n\n![](/img/thread_debugger_and_thread_pool.png)\n","source":"_posts/thread_debugger_and_thread_pool.md","raw":"title: ThreadDebugger And ThreadPool\ndate: 2016-09-01 16:43:03\npermalink: 2016/09/01/thread_debugger_and_thread_pool\ntags:\n- ThreadDebugger\n- ThreadPool\n- Debugger\n- Thread\n- Project\n\n---\n\n> 已开源 [Jacksgong/ThreadDebugger](https://github.com/Jacksgong/ThreadDebugger)\n\n- [中文迭代日志](https://github.com/Jacksgong/ThreadDebugger/blob/master/CHANGELOG_zh.md)\n- [中文说明文档](https://github.com/Jacksgong/ThreadDebugger/blob/master/README_zh.md)\n- [问题讨论区](https://github.com/Jacksgong/ThreadDebugger/issues)\n\n<!-- more -->\n\n---\n\n## 简述所解决问题\n\n#### 线程调试器\n\n虽然我们知道已经有很多方法进行线程调试，如通过Android Studio Monitor 进行Allocation Tracking，在分析结果中会带有期间线程的一些信息；或者是通过Android Device Monitor进行Method Profiling，在分析结果中也会带有期间线程的一些信息。但是每次都需要进行启动关闭，并且每次结果分析都要几秒，几十秒甚至更久，显得不是很灵活。\n\nThreadDebugger是一个简单易用的线程调试器，可以帮助您随时查看应用中所有线程的使用情况，以及变化情况。\n\n#### 线程池创建工具\n\n该线程池创建工具，相比系统的Executors强制要求每次执行任务的时候都需要指定任务的名称，以便于更好的调试与监控，并且提供非常便捷的创建相关规则的线程池。\n系统提供的DownloadManager由于是考虑系统层面所有应用公用，不够灵活。\n\n## 特征\n\n- 便捷\n- 易用\n\n## Demo\n\n![](/img/thread_debugger_and_thread_pool.png)\n","slug":"2016/09/01/thread_debugger_and_thread_pool","published":1,"updated":"2017-01-26T14:52:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66jg003y95buz1i4k8q0","content":"<blockquote>\n<p>已开源 <a href=\"https://github.com/Jacksgong/ThreadDebugger\" target=\"_blank\" rel=\"external\">Jacksgong/ThreadDebugger</a></p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/Jacksgong/ThreadDebugger/blob/master/CHANGELOG_zh.md\" target=\"_blank\" rel=\"external\">中文迭代日志</a></li>\n<li><a href=\"https://github.com/Jacksgong/ThreadDebugger/blob/master/README_zh.md\" target=\"_blank\" rel=\"external\">中文说明文档</a></li>\n<li><a href=\"https://github.com/Jacksgong/ThreadDebugger/issues\" target=\"_blank\" rel=\"external\">问题讨论区</a></li>\n</ul>\n<a id=\"more\"></a>\n<hr>\n<h2 id=\"简述所解决问题\"><a href=\"#简述所解决问题\" class=\"headerlink\" title=\"简述所解决问题\"></a>简述所解决问题</h2><h4 id=\"线程调试器\"><a href=\"#线程调试器\" class=\"headerlink\" title=\"线程调试器\"></a>线程调试器</h4><p>虽然我们知道已经有很多方法进行线程调试，如通过Android Studio Monitor 进行Allocation Tracking，在分析结果中会带有期间线程的一些信息；或者是通过Android Device Monitor进行Method Profiling，在分析结果中也会带有期间线程的一些信息。但是每次都需要进行启动关闭，并且每次结果分析都要几秒，几十秒甚至更久，显得不是很灵活。</p>\n<p>ThreadDebugger是一个简单易用的线程调试器，可以帮助您随时查看应用中所有线程的使用情况，以及变化情况。</p>\n<h4 id=\"线程池创建工具\"><a href=\"#线程池创建工具\" class=\"headerlink\" title=\"线程池创建工具\"></a>线程池创建工具</h4><p>该线程池创建工具，相比系统的Executors强制要求每次执行任务的时候都需要指定任务的名称，以便于更好的调试与监控，并且提供非常便捷的创建相关规则的线程池。<br>系统提供的DownloadManager由于是考虑系统层面所有应用公用，不够灵活。</p>\n<h2 id=\"特征\"><a href=\"#特征\" class=\"headerlink\" title=\"特征\"></a>特征</h2><ul>\n<li>便捷</li>\n<li>易用</li>\n</ul>\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><p><img src=\"/img/thread_debugger_and_thread_pool.png\" alt=\"\"></p>\n","excerpt":"<blockquote>\n<p>已开源 <a href=\"https://github.com/Jacksgong/ThreadDebugger\">Jacksgong/ThreadDebugger</a></p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/Jacksgong/ThreadDebugger/blob/master/CHANGELOG_zh.md\">中文迭代日志</a></li>\n<li><a href=\"https://github.com/Jacksgong/ThreadDebugger/blob/master/README_zh.md\">中文说明文档</a></li>\n<li><a href=\"https://github.com/Jacksgong/ThreadDebugger/issues\">问题讨论区</a></li>\n</ul>","more":"<hr>\n<h2 id=\"简述所解决问题\"><a href=\"#简述所解决问题\" class=\"headerlink\" title=\"简述所解决问题\"></a>简述所解决问题</h2><h4 id=\"线程调试器\"><a href=\"#线程调试器\" class=\"headerlink\" title=\"线程调试器\"></a>线程调试器</h4><p>虽然我们知道已经有很多方法进行线程调试，如通过Android Studio Monitor 进行Allocation Tracking，在分析结果中会带有期间线程的一些信息；或者是通过Android Device Monitor进行Method Profiling，在分析结果中也会带有期间线程的一些信息。但是每次都需要进行启动关闭，并且每次结果分析都要几秒，几十秒甚至更久，显得不是很灵活。</p>\n<p>ThreadDebugger是一个简单易用的线程调试器，可以帮助您随时查看应用中所有线程的使用情况，以及变化情况。</p>\n<h4 id=\"线程池创建工具\"><a href=\"#线程池创建工具\" class=\"headerlink\" title=\"线程池创建工具\"></a>线程池创建工具</h4><p>该线程池创建工具，相比系统的Executors强制要求每次执行任务的时候都需要指定任务的名称，以便于更好的调试与监控，并且提供非常便捷的创建相关规则的线程池。<br>系统提供的DownloadManager由于是考虑系统层面所有应用公用，不够灵活。</p>\n<h2 id=\"特征\"><a href=\"#特征\" class=\"headerlink\" title=\"特征\"></a>特征</h2><ul>\n<li>便捷</li>\n<li>易用</li>\n</ul>\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><p><img src=\"/img/thread_debugger_and_thread_pool.png\" alt=\"\"></p>"},{"title":"Android Touch Event派发分析","date":"2016-03-10T01:49:03.000Z","_content":"\n> 早前画了touch事件派发草图，重新整理了下\n\n<!-- more -->\n\n## Touch Event: Down\n\n> Down事件，无论 `clickable` 与否都会各层级传递\n\n![](/img/touch_event-down-not-cliable.png)\n\n## Touch Event: Move\n\n| Hierarchy | `clickable`/`longClickable`\n| --- | ---\n| Parent | `false`\n| Child | `false`\n\n![](/img/touch_event-move-not-cliable.png)\n\n| Hierarchy | `clickable`/`longClickable`\n| --- | ---\n| Parent | `false`/`true`\n| Child | `true`\n\n\n![](/img/touch_event-move-child-cliable.png)\n\n| Hierarchy | `clickable`/`longClickable`\n| --- | ---\n| Parent | `true`\n| Child | `false`\n\n![](/img/touch_event-move-cliable.png)\n\n## Touch Event: Up\n\n\n| Hierarchy | `clickable`/`longClickable`\n| --- | ---\n| Parent | `false`\n| Child | `false`\n\n![](/img/touch_event-up-not-cliable.png)\n\n\n| Hierarchy | `clickable`/`longClickable`\n| --- | ---\n| Parent | `true`/`false`\n| Child | `true`\n\n![](/img/touch_event-up-child-cliable.png)\n\n\n| Hierarchy | `clickable`/`longClickable`\n| --- | ---\n| Parent | `true`\n| Child | `false`\n\n![](/img/touch_event-up-cliable.png)\n\n---\n\n本文已经发布到JackBlog公众号，可请直接访问: [Android Touch Event派发分析 - JacksBlog](https://mp.weixin.qq.com/s?__biz=MzIyMjQxMzAzOA==&mid=2247483664&idx=1&sn=9871b049b89ec0b5198e85759986f50b)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/touch_event.md","raw":"title: Android Touch Event派发分析\ndate: 2016-03-10 09:49:03\npermalink: 2016/03/10/touch_event\ntags:\n- Android\n- Touch\n\n---\n\n> 早前画了touch事件派发草图，重新整理了下\n\n<!-- more -->\n\n## Touch Event: Down\n\n> Down事件，无论 `clickable` 与否都会各层级传递\n\n![](/img/touch_event-down-not-cliable.png)\n\n## Touch Event: Move\n\n| Hierarchy | `clickable`/`longClickable`\n| --- | ---\n| Parent | `false`\n| Child | `false`\n\n![](/img/touch_event-move-not-cliable.png)\n\n| Hierarchy | `clickable`/`longClickable`\n| --- | ---\n| Parent | `false`/`true`\n| Child | `true`\n\n\n![](/img/touch_event-move-child-cliable.png)\n\n| Hierarchy | `clickable`/`longClickable`\n| --- | ---\n| Parent | `true`\n| Child | `false`\n\n![](/img/touch_event-move-cliable.png)\n\n## Touch Event: Up\n\n\n| Hierarchy | `clickable`/`longClickable`\n| --- | ---\n| Parent | `false`\n| Child | `false`\n\n![](/img/touch_event-up-not-cliable.png)\n\n\n| Hierarchy | `clickable`/`longClickable`\n| --- | ---\n| Parent | `true`/`false`\n| Child | `true`\n\n![](/img/touch_event-up-child-cliable.png)\n\n\n| Hierarchy | `clickable`/`longClickable`\n| --- | ---\n| Parent | `true`\n| Child | `false`\n\n![](/img/touch_event-up-cliable.png)\n\n---\n\n本文已经发布到JackBlog公众号，可请直接访问: [Android Touch Event派发分析 - JacksBlog](https://mp.weixin.qq.com/s?__biz=MzIyMjQxMzAzOA==&mid=2247483664&idx=1&sn=9871b049b89ec0b5198e85759986f50b)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2016/03/10/touch_event","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66jh004095but6r9bygo","content":"<blockquote>\n<p>早前画了touch事件派发草图，重新整理了下</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"Touch-Event-Down\"><a href=\"#Touch-Event-Down\" class=\"headerlink\" title=\"Touch Event: Down\"></a>Touch Event: Down</h2><blockquote>\n<p>Down事件，无论 <code>clickable</code> 与否都会各层级传递</p>\n</blockquote>\n<p><img src=\"/img/touch_event-down-not-cliable.png\" alt=\"\"></p>\n<h2 id=\"Touch-Event-Move\"><a href=\"#Touch-Event-Move\" class=\"headerlink\" title=\"Touch Event: Move\"></a>Touch Event: Move</h2><table>\n<thead>\n<tr>\n<th>Hierarchy</th>\n<th><code>clickable</code>/<code>longClickable</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Parent</td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>Child</td>\n<td><code>false</code></td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"/img/touch_event-move-not-cliable.png\" alt=\"\"></p>\n<table>\n<thead>\n<tr>\n<th>Hierarchy</th>\n<th><code>clickable</code>/<code>longClickable</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Parent</td>\n<td><code>false</code>/<code>true</code></td>\n</tr>\n<tr>\n<td>Child</td>\n<td><code>true</code></td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"/img/touch_event-move-child-cliable.png\" alt=\"\"></p>\n<table>\n<thead>\n<tr>\n<th>Hierarchy</th>\n<th><code>clickable</code>/<code>longClickable</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Parent</td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td>Child</td>\n<td><code>false</code></td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"/img/touch_event-move-cliable.png\" alt=\"\"></p>\n<h2 id=\"Touch-Event-Up\"><a href=\"#Touch-Event-Up\" class=\"headerlink\" title=\"Touch Event: Up\"></a>Touch Event: Up</h2><table>\n<thead>\n<tr>\n<th>Hierarchy</th>\n<th><code>clickable</code>/<code>longClickable</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Parent</td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>Child</td>\n<td><code>false</code></td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"/img/touch_event-up-not-cliable.png\" alt=\"\"></p>\n<table>\n<thead>\n<tr>\n<th>Hierarchy</th>\n<th><code>clickable</code>/<code>longClickable</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Parent</td>\n<td><code>true</code>/<code>false</code></td>\n</tr>\n<tr>\n<td>Child</td>\n<td><code>true</code></td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"/img/touch_event-up-child-cliable.png\" alt=\"\"></p>\n<table>\n<thead>\n<tr>\n<th>Hierarchy</th>\n<th><code>clickable</code>/<code>longClickable</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Parent</td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td>Child</td>\n<td><code>false</code></td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"/img/touch_event-up-cliable.png\" alt=\"\"></p>\n<hr>\n<p>本文已经发布到JackBlog公众号，可请直接访问: <a href=\"https://mp.weixin.qq.com/s?__biz=MzIyMjQxMzAzOA==&amp;mid=2247483664&amp;idx=1&amp;sn=9871b049b89ec0b5198e85759986f50b\" target=\"_blank\" rel=\"external\">Android Touch Event派发分析 - JacksBlog</a></p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>早前画了touch事件派发草图，重新整理了下</p>\n</blockquote>","more":"<h2 id=\"Touch-Event-Down\"><a href=\"#Touch-Event-Down\" class=\"headerlink\" title=\"Touch Event: Down\"></a>Touch Event: Down</h2><blockquote>\n<p>Down事件，无论 <code>clickable</code> 与否都会各层级传递</p>\n</blockquote>\n<p><img src=\"/img/touch_event-down-not-cliable.png\" alt=\"\"></p>\n<h2 id=\"Touch-Event-Move\"><a href=\"#Touch-Event-Move\" class=\"headerlink\" title=\"Touch Event: Move\"></a>Touch Event: Move</h2><table>\n<thead>\n<tr>\n<th>Hierarchy</th>\n<th><code>clickable</code>/<code>longClickable</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Parent</td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>Child</td>\n<td><code>false</code></td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"/img/touch_event-move-not-cliable.png\" alt=\"\"></p>\n<table>\n<thead>\n<tr>\n<th>Hierarchy</th>\n<th><code>clickable</code>/<code>longClickable</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Parent</td>\n<td><code>false</code>/<code>true</code></td>\n</tr>\n<tr>\n<td>Child</td>\n<td><code>true</code></td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"/img/touch_event-move-child-cliable.png\" alt=\"\"></p>\n<table>\n<thead>\n<tr>\n<th>Hierarchy</th>\n<th><code>clickable</code>/<code>longClickable</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Parent</td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td>Child</td>\n<td><code>false</code></td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"/img/touch_event-move-cliable.png\" alt=\"\"></p>\n<h2 id=\"Touch-Event-Up\"><a href=\"#Touch-Event-Up\" class=\"headerlink\" title=\"Touch Event: Up\"></a>Touch Event: Up</h2><table>\n<thead>\n<tr>\n<th>Hierarchy</th>\n<th><code>clickable</code>/<code>longClickable</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Parent</td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>Child</td>\n<td><code>false</code></td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"/img/touch_event-up-not-cliable.png\" alt=\"\"></p>\n<table>\n<thead>\n<tr>\n<th>Hierarchy</th>\n<th><code>clickable</code>/<code>longClickable</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Parent</td>\n<td><code>true</code>/<code>false</code></td>\n</tr>\n<tr>\n<td>Child</td>\n<td><code>true</code></td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"/img/touch_event-up-child-cliable.png\" alt=\"\"></p>\n<table>\n<thead>\n<tr>\n<th>Hierarchy</th>\n<th><code>clickable</code>/<code>longClickable</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Parent</td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td>Child</td>\n<td><code>false</code></td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"/img/touch_event-up-cliable.png\" alt=\"\"></p>\n<hr>\n<p>本文已经发布到JackBlog公众号，可请直接访问: <a href=\"https://mp.weixin.qq.com/s?__biz=MzIyMjQxMzAzOA==&amp;mid=2247483664&amp;idx=1&amp;sn=9871b049b89ec0b5198e85759986f50b\">Android Touch Event派发分析 - JacksBlog</a></p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"Android应用程序通用自动脱壳方法研究","date":"2015-07-17T13:35:03.000Z","_content":"\n> 演讲者: 杨文博\n> 上海交通大学计算机系在读博士\n> GoSSIP软件安全小组\n\n## Android加壳保护\n\n#### 加固保护市场\n\n- 阿里聚安全\n\n#### 可保护\n\n- 程序逻辑: 算法、协议\n- 完整性: 盗版、外挂\n\n<!--more-->\n\n#### 不可保护\n\n- 安全问题: 数据存储传输\n- 程序漏洞: 权限\n\n## 为什么要做脱壳\n\n> 最近一年多(2014年开始)，加壳的恶意程序大爆发，通过加壳逃避杀毒软件\n\n## 脱壳的影响\n\n- 暴露真实的逻辑\n- 降低分析门槛配合自动化扫描\n- 篡改App\n\n## 加固程序特点\n\n- `Manifest`保留\n- 增加入口点类(转到Native库)\n- Native执行\n- 隐藏DEX\n- 静态逆向难\n- 变化快\n- 反分析：反调试、反内存dump、反反汇编\n\n### Native也被加壳\n\n- ARM ELF 头部破坏\n- `.init_array`段花指令\n\n\n## 制作脱壳机\n\n> 不需要知道方法，就可以过滤掉\n\n### Dalvik源码插桩\n\n- Portable 解释器\n- 绕过反调试: Dalvik源码中做\n- 运行时数据\n- 任意脱壳: 任何一个指令后面插一个脱壳点的插桩\n- 真机部署\n\n内存中的Dalvik数据结构\n\n## 一个Native的实现\n\n### 读取DexFile结构体\n\n> dalvik/dexdump/DexDump.app (谷歌提供的)\n\n- 基于源码: C/C++ 实现\n- 以DexFile为输入\n\n## 效果\n\n> 几乎可以对付市面所有的壳\n\n- 脱壳点: `MainActivity.onCreate()` in Manifest\n- 输出: 一个纯文本，这是一个很大的问题!\n\nCTF?\n\n## 更加复杂的脱壳实现\n\n> DEX文件重组，真正执行的时候，Dex在内存中肯定是正确的。\n\n- 获取内存中的Dalvik数据（应该是在内存中是连续的区域):、不同的数据块有较多的寻址方式\n- 排列顺序: dalvik/libdex/DexFile.h\n- 调整偏移: stringDataOff, parametersOff, interfacesOff, classDataOff, codeOff...\n- 重新计算: DexHeader\n\n## 10种壳(ALL-KILL)\n\n1. bangbang\n2. 爱加密\n3. 360\n4. 百度\n5. 阿里\n6. 腾讯\n7. APKProtect\n8. 网泰\n9. LIAPP\n10. DEXProtector\n\n> 最佳防御 混淆&Java自动转为 Native\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/wh_android_tk.md","raw":"title: Android应用程序通用自动脱壳方法研究\ndate: 2015-07-17 21:35:03\npermalink: 2015/07/17/wh_android_tk\ntags:\n- 2015乌云白帽大会\n- 安全\n- 白帽\n- 会议笔记\n\n---\n\n> 演讲者: 杨文博\n> 上海交通大学计算机系在读博士\n> GoSSIP软件安全小组\n\n## Android加壳保护\n\n#### 加固保护市场\n\n- 阿里聚安全\n\n#### 可保护\n\n- 程序逻辑: 算法、协议\n- 完整性: 盗版、外挂\n\n<!--more-->\n\n#### 不可保护\n\n- 安全问题: 数据存储传输\n- 程序漏洞: 权限\n\n## 为什么要做脱壳\n\n> 最近一年多(2014年开始)，加壳的恶意程序大爆发，通过加壳逃避杀毒软件\n\n## 脱壳的影响\n\n- 暴露真实的逻辑\n- 降低分析门槛配合自动化扫描\n- 篡改App\n\n## 加固程序特点\n\n- `Manifest`保留\n- 增加入口点类(转到Native库)\n- Native执行\n- 隐藏DEX\n- 静态逆向难\n- 变化快\n- 反分析：反调试、反内存dump、反反汇编\n\n### Native也被加壳\n\n- ARM ELF 头部破坏\n- `.init_array`段花指令\n\n\n## 制作脱壳机\n\n> 不需要知道方法，就可以过滤掉\n\n### Dalvik源码插桩\n\n- Portable 解释器\n- 绕过反调试: Dalvik源码中做\n- 运行时数据\n- 任意脱壳: 任何一个指令后面插一个脱壳点的插桩\n- 真机部署\n\n内存中的Dalvik数据结构\n\n## 一个Native的实现\n\n### 读取DexFile结构体\n\n> dalvik/dexdump/DexDump.app (谷歌提供的)\n\n- 基于源码: C/C++ 实现\n- 以DexFile为输入\n\n## 效果\n\n> 几乎可以对付市面所有的壳\n\n- 脱壳点: `MainActivity.onCreate()` in Manifest\n- 输出: 一个纯文本，这是一个很大的问题!\n\nCTF?\n\n## 更加复杂的脱壳实现\n\n> DEX文件重组，真正执行的时候，Dex在内存中肯定是正确的。\n\n- 获取内存中的Dalvik数据（应该是在内存中是连续的区域):、不同的数据块有较多的寻址方式\n- 排列顺序: dalvik/libdex/DexFile.h\n- 调整偏移: stringDataOff, parametersOff, interfacesOff, classDataOff, codeOff...\n- 重新计算: DexHeader\n\n## 10种壳(ALL-KILL)\n\n1. bangbang\n2. 爱加密\n3. 360\n4. 百度\n5. 阿里\n6. 腾讯\n7. APKProtect\n8. 网泰\n9. LIAPP\n10. DEXProtector\n\n> 最佳防御 混淆&Java自动转为 Native\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2015/07/17/wh_android_tk","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66ji004395bu9htstkj6","content":"<blockquote>\n<p>演讲者: 杨文博<br>上海交通大学计算机系在读博士<br>GoSSIP软件安全小组</p>\n</blockquote>\n<h2 id=\"Android加壳保护\"><a href=\"#Android加壳保护\" class=\"headerlink\" title=\"Android加壳保护\"></a>Android加壳保护</h2><h4 id=\"加固保护市场\"><a href=\"#加固保护市场\" class=\"headerlink\" title=\"加固保护市场\"></a>加固保护市场</h4><ul>\n<li>阿里聚安全</li>\n</ul>\n<h4 id=\"可保护\"><a href=\"#可保护\" class=\"headerlink\" title=\"可保护\"></a>可保护</h4><ul>\n<li>程序逻辑: 算法、协议</li>\n<li>完整性: 盗版、外挂</li>\n</ul>\n<a id=\"more\"></a>\n<h4 id=\"不可保护\"><a href=\"#不可保护\" class=\"headerlink\" title=\"不可保护\"></a>不可保护</h4><ul>\n<li>安全问题: 数据存储传输</li>\n<li>程序漏洞: 权限</li>\n</ul>\n<h2 id=\"为什么要做脱壳\"><a href=\"#为什么要做脱壳\" class=\"headerlink\" title=\"为什么要做脱壳\"></a>为什么要做脱壳</h2><blockquote>\n<p>最近一年多(2014年开始)，加壳的恶意程序大爆发，通过加壳逃避杀毒软件</p>\n</blockquote>\n<h2 id=\"脱壳的影响\"><a href=\"#脱壳的影响\" class=\"headerlink\" title=\"脱壳的影响\"></a>脱壳的影响</h2><ul>\n<li>暴露真实的逻辑</li>\n<li>降低分析门槛配合自动化扫描</li>\n<li>篡改App</li>\n</ul>\n<h2 id=\"加固程序特点\"><a href=\"#加固程序特点\" class=\"headerlink\" title=\"加固程序特点\"></a>加固程序特点</h2><ul>\n<li><code>Manifest</code>保留</li>\n<li>增加入口点类(转到Native库)</li>\n<li>Native执行</li>\n<li>隐藏DEX</li>\n<li>静态逆向难</li>\n<li>变化快</li>\n<li>反分析：反调试、反内存dump、反反汇编</li>\n</ul>\n<h3 id=\"Native也被加壳\"><a href=\"#Native也被加壳\" class=\"headerlink\" title=\"Native也被加壳\"></a>Native也被加壳</h3><ul>\n<li>ARM ELF 头部破坏</li>\n<li><code>.init_array</code>段花指令</li>\n</ul>\n<h2 id=\"制作脱壳机\"><a href=\"#制作脱壳机\" class=\"headerlink\" title=\"制作脱壳机\"></a>制作脱壳机</h2><blockquote>\n<p>不需要知道方法，就可以过滤掉</p>\n</blockquote>\n<h3 id=\"Dalvik源码插桩\"><a href=\"#Dalvik源码插桩\" class=\"headerlink\" title=\"Dalvik源码插桩\"></a>Dalvik源码插桩</h3><ul>\n<li>Portable 解释器</li>\n<li>绕过反调试: Dalvik源码中做</li>\n<li>运行时数据</li>\n<li>任意脱壳: 任何一个指令后面插一个脱壳点的插桩</li>\n<li>真机部署</li>\n</ul>\n<p>内存中的Dalvik数据结构</p>\n<h2 id=\"一个Native的实现\"><a href=\"#一个Native的实现\" class=\"headerlink\" title=\"一个Native的实现\"></a>一个Native的实现</h2><h3 id=\"读取DexFile结构体\"><a href=\"#读取DexFile结构体\" class=\"headerlink\" title=\"读取DexFile结构体\"></a>读取DexFile结构体</h3><blockquote>\n<p>dalvik/dexdump/DexDump.app (谷歌提供的)</p>\n</blockquote>\n<ul>\n<li>基于源码: C/C++ 实现</li>\n<li>以DexFile为输入</li>\n</ul>\n<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><blockquote>\n<p>几乎可以对付市面所有的壳</p>\n</blockquote>\n<ul>\n<li>脱壳点: <code>MainActivity.onCreate()</code> in Manifest</li>\n<li>输出: 一个纯文本，这是一个很大的问题!</li>\n</ul>\n<p>CTF?</p>\n<h2 id=\"更加复杂的脱壳实现\"><a href=\"#更加复杂的脱壳实现\" class=\"headerlink\" title=\"更加复杂的脱壳实现\"></a>更加复杂的脱壳实现</h2><blockquote>\n<p>DEX文件重组，真正执行的时候，Dex在内存中肯定是正确的。</p>\n</blockquote>\n<ul>\n<li>获取内存中的Dalvik数据（应该是在内存中是连续的区域):、不同的数据块有较多的寻址方式</li>\n<li>排列顺序: dalvik/libdex/DexFile.h</li>\n<li>调整偏移: stringDataOff, parametersOff, interfacesOff, classDataOff, codeOff…</li>\n<li>重新计算: DexHeader</li>\n</ul>\n<h2 id=\"10种壳-ALL-KILL\"><a href=\"#10种壳-ALL-KILL\" class=\"headerlink\" title=\"10种壳(ALL-KILL)\"></a>10种壳(ALL-KILL)</h2><ol>\n<li>bangbang</li>\n<li>爱加密</li>\n<li>360</li>\n<li>百度</li>\n<li>阿里</li>\n<li>腾讯</li>\n<li>APKProtect</li>\n<li>网泰</li>\n<li>LIAPP</li>\n<li>DEXProtector</li>\n</ol>\n<blockquote>\n<p>最佳防御 混淆&amp;Java自动转为 Native</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>演讲者: 杨文博<br>上海交通大学计算机系在读博士<br>GoSSIP软件安全小组</p>\n</blockquote>\n<h2 id=\"Android加壳保护\"><a href=\"#Android加壳保护\" class=\"headerlink\" title=\"Android加壳保护\"></a>Android加壳保护</h2><h4 id=\"加固保护市场\"><a href=\"#加固保护市场\" class=\"headerlink\" title=\"加固保护市场\"></a>加固保护市场</h4><ul>\n<li>阿里聚安全</li>\n</ul>\n<h4 id=\"可保护\"><a href=\"#可保护\" class=\"headerlink\" title=\"可保护\"></a>可保护</h4><ul>\n<li>程序逻辑: 算法、协议</li>\n<li>完整性: 盗版、外挂</li>\n</ul>","more":"<h4 id=\"不可保护\"><a href=\"#不可保护\" class=\"headerlink\" title=\"不可保护\"></a>不可保护</h4><ul>\n<li>安全问题: 数据存储传输</li>\n<li>程序漏洞: 权限</li>\n</ul>\n<h2 id=\"为什么要做脱壳\"><a href=\"#为什么要做脱壳\" class=\"headerlink\" title=\"为什么要做脱壳\"></a>为什么要做脱壳</h2><blockquote>\n<p>最近一年多(2014年开始)，加壳的恶意程序大爆发，通过加壳逃避杀毒软件</p>\n</blockquote>\n<h2 id=\"脱壳的影响\"><a href=\"#脱壳的影响\" class=\"headerlink\" title=\"脱壳的影响\"></a>脱壳的影响</h2><ul>\n<li>暴露真实的逻辑</li>\n<li>降低分析门槛配合自动化扫描</li>\n<li>篡改App</li>\n</ul>\n<h2 id=\"加固程序特点\"><a href=\"#加固程序特点\" class=\"headerlink\" title=\"加固程序特点\"></a>加固程序特点</h2><ul>\n<li><code>Manifest</code>保留</li>\n<li>增加入口点类(转到Native库)</li>\n<li>Native执行</li>\n<li>隐藏DEX</li>\n<li>静态逆向难</li>\n<li>变化快</li>\n<li>反分析：反调试、反内存dump、反反汇编</li>\n</ul>\n<h3 id=\"Native也被加壳\"><a href=\"#Native也被加壳\" class=\"headerlink\" title=\"Native也被加壳\"></a>Native也被加壳</h3><ul>\n<li>ARM ELF 头部破坏</li>\n<li><code>.init_array</code>段花指令</li>\n</ul>\n<h2 id=\"制作脱壳机\"><a href=\"#制作脱壳机\" class=\"headerlink\" title=\"制作脱壳机\"></a>制作脱壳机</h2><blockquote>\n<p>不需要知道方法，就可以过滤掉</p>\n</blockquote>\n<h3 id=\"Dalvik源码插桩\"><a href=\"#Dalvik源码插桩\" class=\"headerlink\" title=\"Dalvik源码插桩\"></a>Dalvik源码插桩</h3><ul>\n<li>Portable 解释器</li>\n<li>绕过反调试: Dalvik源码中做</li>\n<li>运行时数据</li>\n<li>任意脱壳: 任何一个指令后面插一个脱壳点的插桩</li>\n<li>真机部署</li>\n</ul>\n<p>内存中的Dalvik数据结构</p>\n<h2 id=\"一个Native的实现\"><a href=\"#一个Native的实现\" class=\"headerlink\" title=\"一个Native的实现\"></a>一个Native的实现</h2><h3 id=\"读取DexFile结构体\"><a href=\"#读取DexFile结构体\" class=\"headerlink\" title=\"读取DexFile结构体\"></a>读取DexFile结构体</h3><blockquote>\n<p>dalvik/dexdump/DexDump.app (谷歌提供的)</p>\n</blockquote>\n<ul>\n<li>基于源码: C/C++ 实现</li>\n<li>以DexFile为输入</li>\n</ul>\n<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><blockquote>\n<p>几乎可以对付市面所有的壳</p>\n</blockquote>\n<ul>\n<li>脱壳点: <code>MainActivity.onCreate()</code> in Manifest</li>\n<li>输出: 一个纯文本，这是一个很大的问题!</li>\n</ul>\n<p>CTF?</p>\n<h2 id=\"更加复杂的脱壳实现\"><a href=\"#更加复杂的脱壳实现\" class=\"headerlink\" title=\"更加复杂的脱壳实现\"></a>更加复杂的脱壳实现</h2><blockquote>\n<p>DEX文件重组，真正执行的时候，Dex在内存中肯定是正确的。</p>\n</blockquote>\n<ul>\n<li>获取内存中的Dalvik数据（应该是在内存中是连续的区域):、不同的数据块有较多的寻址方式</li>\n<li>排列顺序: dalvik/libdex/DexFile.h</li>\n<li>调整偏移: stringDataOff, parametersOff, interfacesOff, classDataOff, codeOff…</li>\n<li>重新计算: DexHeader</li>\n</ul>\n<h2 id=\"10种壳-ALL-KILL\"><a href=\"#10种壳-ALL-KILL\" class=\"headerlink\" title=\"10种壳(ALL-KILL)\"></a>10种壳(ALL-KILL)</h2><ol>\n<li>bangbang</li>\n<li>爱加密</li>\n<li>360</li>\n<li>百度</li>\n<li>阿里</li>\n<li>腾讯</li>\n<li>APKProtect</li>\n<li>网泰</li>\n<li>LIAPP</li>\n<li>DEXProtector</li>\n</ol>\n<blockquote>\n<p>最佳防御 混淆&amp;Java自动转为 Native</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"3G、4G USIM卡的安全性分析","date":"2015-07-18T10:35:03.000Z","_content":"\n> 演讲者: 葛毅杰\n> 上海交通大学 在读硕士\n\n## I. 背景\n\n今年2月，斯诺登暴露美国安全局黑入某Sim卡生厂商。\n\n<!--more-->\n### 重点:\n\nSim卡的密钥，得到他的 通话信息与短信信息 甚至是克隆Sim卡。\n\n### 2G\n\n> 2G早已经千疮百孔\n\n1. 单向鉴权无法辨别 伪基站\n2. 鉴权算法本身存在漏洞(十几年前就已经被提出，但是还有很多遗漏没有解决)\n3. 面对旁路攻击显得脆弱\n\n\n### 3G/4G\n\n> 3G/4G 同一代SIM卡，鉴权机制一致\n\n1. MILENAGE算法层面没有什么漏洞\n2. 双向鉴权可以识别伪基站\n3. 采用SQN保证同步性，UE、eNB、MME通信完整性\n\n\n## II. 旁路攻击\n\n容易采集加密设备的功耗: SPA、DPA 进行分析攻击\n\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/wh_3g_4g_usim.md","raw":"title: 3G、4G USIM卡的安全性分析\ndate: 2015-07-18 18:35:03\npermalink: 2015/07/18/wh_3g_4g_usim\ntags:\n- 2015乌云白帽大会\n- 安全\n- 白帽\n- 会议笔记\n\n---\n\n> 演讲者: 葛毅杰\n> 上海交通大学 在读硕士\n\n## I. 背景\n\n今年2月，斯诺登暴露美国安全局黑入某Sim卡生厂商。\n\n<!--more-->\n### 重点:\n\nSim卡的密钥，得到他的 通话信息与短信信息 甚至是克隆Sim卡。\n\n### 2G\n\n> 2G早已经千疮百孔\n\n1. 单向鉴权无法辨别 伪基站\n2. 鉴权算法本身存在漏洞(十几年前就已经被提出，但是还有很多遗漏没有解决)\n3. 面对旁路攻击显得脆弱\n\n\n### 3G/4G\n\n> 3G/4G 同一代SIM卡，鉴权机制一致\n\n1. MILENAGE算法层面没有什么漏洞\n2. 双向鉴权可以识别伪基站\n3. 采用SQN保证同步性，UE、eNB、MME通信完整性\n\n\n## II. 旁路攻击\n\n容易采集加密设备的功耗: SPA、DPA 进行分析攻击\n\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2015/07/18/wh_3g_4g_usim","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66jj004495bucikn7fzx","content":"<blockquote>\n<p>演讲者: 葛毅杰<br>上海交通大学 在读硕士</p>\n</blockquote>\n<h2 id=\"I-背景\"><a href=\"#I-背景\" class=\"headerlink\" title=\"I. 背景\"></a>I. 背景</h2><p>今年2月，斯诺登暴露美国安全局黑入某Sim卡生厂商。</p>\n<a id=\"more\"></a>\n<h3 id=\"重点\"><a href=\"#重点\" class=\"headerlink\" title=\"重点:\"></a>重点:</h3><p>Sim卡的密钥，得到他的 通话信息与短信信息 甚至是克隆Sim卡。</p>\n<h3 id=\"2G\"><a href=\"#2G\" class=\"headerlink\" title=\"2G\"></a>2G</h3><blockquote>\n<p>2G早已经千疮百孔</p>\n</blockquote>\n<ol>\n<li>单向鉴权无法辨别 伪基站</li>\n<li>鉴权算法本身存在漏洞(十几年前就已经被提出，但是还有很多遗漏没有解决)</li>\n<li>面对旁路攻击显得脆弱</li>\n</ol>\n<h3 id=\"3G-4G\"><a href=\"#3G-4G\" class=\"headerlink\" title=\"3G/4G\"></a>3G/4G</h3><blockquote>\n<p>3G/4G 同一代SIM卡，鉴权机制一致</p>\n</blockquote>\n<ol>\n<li>MILENAGE算法层面没有什么漏洞</li>\n<li>双向鉴权可以识别伪基站</li>\n<li>采用SQN保证同步性，UE、eNB、MME通信完整性</li>\n</ol>\n<h2 id=\"II-旁路攻击\"><a href=\"#II-旁路攻击\" class=\"headerlink\" title=\"II. 旁路攻击\"></a>II. 旁路攻击</h2><p>容易采集加密设备的功耗: SPA、DPA 进行分析攻击</p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>演讲者: 葛毅杰<br>上海交通大学 在读硕士</p>\n</blockquote>\n<h2 id=\"I-背景\"><a href=\"#I-背景\" class=\"headerlink\" title=\"I. 背景\"></a>I. 背景</h2><p>今年2月，斯诺登暴露美国安全局黑入某Sim卡生厂商。</p>","more":"<h3 id=\"重点\"><a href=\"#重点\" class=\"headerlink\" title=\"重点:\"></a>重点:</h3><p>Sim卡的密钥，得到他的 通话信息与短信信息 甚至是克隆Sim卡。</p>\n<h3 id=\"2G\"><a href=\"#2G\" class=\"headerlink\" title=\"2G\"></a>2G</h3><blockquote>\n<p>2G早已经千疮百孔</p>\n</blockquote>\n<ol>\n<li>单向鉴权无法辨别 伪基站</li>\n<li>鉴权算法本身存在漏洞(十几年前就已经被提出，但是还有很多遗漏没有解决)</li>\n<li>面对旁路攻击显得脆弱</li>\n</ol>\n<h3 id=\"3G-4G\"><a href=\"#3G-4G\" class=\"headerlink\" title=\"3G/4G\"></a>3G/4G</h3><blockquote>\n<p>3G/4G 同一代SIM卡，鉴权机制一致</p>\n</blockquote>\n<ol>\n<li>MILENAGE算法层面没有什么漏洞</li>\n<li>双向鉴权可以识别伪基站</li>\n<li>采用SQN保证同步性，UE、eNB、MME通信完整性</li>\n</ol>\n<h2 id=\"II-旁路攻击\"><a href=\"#II-旁路攻击\" class=\"headerlink\" title=\"II. 旁路攻击\"></a>II. 旁路攻击</h2><p>容易采集加密设备的功耗: SPA、DPA 进行分析攻击</p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"应急响应","date":"2015-07-17T13:35:03.000Z","_content":"\n> 演讲者: Piaca\n> 乌云白帽子\n\n## 为什么要做应急响应\n\n- 保障业务\n- 还原攻击\n- 明确意图\n- 解决方案\n- 查漏补缺: 一通百通\n- 司法途径\n\n<!--more-->\n\n## 怎么做应急响应\n\n- 确定攻击时间: 通过时间来缩小范围\n- 查找攻击线索\n- 梳理攻击流程\n- 实施解决方案\n- 定位攻击人，取证: 留下的痕迹，无论什么痕迹\n\n## 为什么要反渗透\n\n- 被动变主动\n\n## 案例\n\n### 1. 账号被盗\n\n**现象:** 发出了test，还有@乌云说乌云测试\n\n#### 分析原因\n\n- 非工作人员操作\n- 账号被cookie登陆\n- 可能是cookie有httponly\n\n#### 操作\n\n1. 查看工作人员的访问路径\n2. 还原攻击，修复漏洞，修复类似漏洞，对工作人员做安全培训\n\n### 2. 500错误日志引发的血案\n\n#### 还原攻击\n\n- 通过日志确认入侵途径是tomcat\n- 做了一些操作\n\n#### 操作\n- 大多是肉鸡IP，香港，廊坊: 并入侵进行清理，调查\n\n### 3. DNS/链路劫持\n\n> 插入js文件，劫持的时候可以获得输入的用户名密码\n> 插入广告\n\n#### 处理过程\n\n##### 定位劫持位置:\n\n- TTL\n- IP\n\n##### 投诉到运营商\n\n#### 手段\n\n- 完善监控\n- https?\n\n## 总结\n\n- 业务角度: 保障业务优先\n- 对抗角度: 了解对手\n- 技术角度: 攻击技术；日志、流量等数据\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/wh_emergency.md","raw":"title: 应急响应\ndate: 2015-07-17 21:35:03\npermalink: 2015/07/17/wh_emergency\ntags:\n- 2015乌云白帽大会\n- 安全\n- 白帽\n- 会议笔记\n\n---\n\n> 演讲者: Piaca\n> 乌云白帽子\n\n## 为什么要做应急响应\n\n- 保障业务\n- 还原攻击\n- 明确意图\n- 解决方案\n- 查漏补缺: 一通百通\n- 司法途径\n\n<!--more-->\n\n## 怎么做应急响应\n\n- 确定攻击时间: 通过时间来缩小范围\n- 查找攻击线索\n- 梳理攻击流程\n- 实施解决方案\n- 定位攻击人，取证: 留下的痕迹，无论什么痕迹\n\n## 为什么要反渗透\n\n- 被动变主动\n\n## 案例\n\n### 1. 账号被盗\n\n**现象:** 发出了test，还有@乌云说乌云测试\n\n#### 分析原因\n\n- 非工作人员操作\n- 账号被cookie登陆\n- 可能是cookie有httponly\n\n#### 操作\n\n1. 查看工作人员的访问路径\n2. 还原攻击，修复漏洞，修复类似漏洞，对工作人员做安全培训\n\n### 2. 500错误日志引发的血案\n\n#### 还原攻击\n\n- 通过日志确认入侵途径是tomcat\n- 做了一些操作\n\n#### 操作\n- 大多是肉鸡IP，香港，廊坊: 并入侵进行清理，调查\n\n### 3. DNS/链路劫持\n\n> 插入js文件，劫持的时候可以获得输入的用户名密码\n> 插入广告\n\n#### 处理过程\n\n##### 定位劫持位置:\n\n- TTL\n- IP\n\n##### 投诉到运营商\n\n#### 手段\n\n- 完善监控\n- https?\n\n## 总结\n\n- 业务角度: 保障业务优先\n- 对抗角度: 了解对手\n- 技术角度: 攻击技术；日志、流量等数据\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2015/07/17/wh_emergency","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66jj004695bucnrqijzb","content":"<blockquote>\n<p>演讲者: Piaca<br>乌云白帽子</p>\n</blockquote>\n<h2 id=\"为什么要做应急响应\"><a href=\"#为什么要做应急响应\" class=\"headerlink\" title=\"为什么要做应急响应\"></a>为什么要做应急响应</h2><ul>\n<li>保障业务</li>\n<li>还原攻击</li>\n<li>明确意图</li>\n<li>解决方案</li>\n<li>查漏补缺: 一通百通</li>\n<li>司法途径</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"怎么做应急响应\"><a href=\"#怎么做应急响应\" class=\"headerlink\" title=\"怎么做应急响应\"></a>怎么做应急响应</h2><ul>\n<li>确定攻击时间: 通过时间来缩小范围</li>\n<li>查找攻击线索</li>\n<li>梳理攻击流程</li>\n<li>实施解决方案</li>\n<li>定位攻击人，取证: 留下的痕迹，无论什么痕迹</li>\n</ul>\n<h2 id=\"为什么要反渗透\"><a href=\"#为什么要反渗透\" class=\"headerlink\" title=\"为什么要反渗透\"></a>为什么要反渗透</h2><ul>\n<li>被动变主动</li>\n</ul>\n<h2 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h2><h3 id=\"1-账号被盗\"><a href=\"#1-账号被盗\" class=\"headerlink\" title=\"1. 账号被盗\"></a>1. 账号被盗</h3><p><strong>现象:</strong> 发出了test，还有@乌云说乌云测试</p>\n<h4 id=\"分析原因\"><a href=\"#分析原因\" class=\"headerlink\" title=\"分析原因\"></a>分析原因</h4><ul>\n<li>非工作人员操作</li>\n<li>账号被cookie登陆</li>\n<li>可能是cookie有httponly</li>\n</ul>\n<h4 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h4><ol>\n<li>查看工作人员的访问路径</li>\n<li>还原攻击，修复漏洞，修复类似漏洞，对工作人员做安全培训</li>\n</ol>\n<h3 id=\"2-500错误日志引发的血案\"><a href=\"#2-500错误日志引发的血案\" class=\"headerlink\" title=\"2. 500错误日志引发的血案\"></a>2. 500错误日志引发的血案</h3><h4 id=\"还原攻击\"><a href=\"#还原攻击\" class=\"headerlink\" title=\"还原攻击\"></a>还原攻击</h4><ul>\n<li>通过日志确认入侵途径是tomcat</li>\n<li>做了一些操作</li>\n</ul>\n<h4 id=\"操作-1\"><a href=\"#操作-1\" class=\"headerlink\" title=\"操作\"></a>操作</h4><ul>\n<li>大多是肉鸡IP，香港，廊坊: 并入侵进行清理，调查</li>\n</ul>\n<h3 id=\"3-DNS-链路劫持\"><a href=\"#3-DNS-链路劫持\" class=\"headerlink\" title=\"3. DNS/链路劫持\"></a>3. DNS/链路劫持</h3><blockquote>\n<p>插入js文件，劫持的时候可以获得输入的用户名密码<br>插入广告</p>\n</blockquote>\n<h4 id=\"处理过程\"><a href=\"#处理过程\" class=\"headerlink\" title=\"处理过程\"></a>处理过程</h4><h5 id=\"定位劫持位置\"><a href=\"#定位劫持位置\" class=\"headerlink\" title=\"定位劫持位置:\"></a>定位劫持位置:</h5><ul>\n<li>TTL</li>\n<li>IP</li>\n</ul>\n<h5 id=\"投诉到运营商\"><a href=\"#投诉到运营商\" class=\"headerlink\" title=\"投诉到运营商\"></a>投诉到运营商</h5><h4 id=\"手段\"><a href=\"#手段\" class=\"headerlink\" title=\"手段\"></a>手段</h4><ul>\n<li>完善监控</li>\n<li>https?</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>业务角度: 保障业务优先</li>\n<li>对抗角度: 了解对手</li>\n<li>技术角度: 攻击技术；日志、流量等数据</li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>演讲者: Piaca<br>乌云白帽子</p>\n</blockquote>\n<h2 id=\"为什么要做应急响应\"><a href=\"#为什么要做应急响应\" class=\"headerlink\" title=\"为什么要做应急响应\"></a>为什么要做应急响应</h2><ul>\n<li>保障业务</li>\n<li>还原攻击</li>\n<li>明确意图</li>\n<li>解决方案</li>\n<li>查漏补缺: 一通百通</li>\n<li>司法途径</li>\n</ul>","more":"<h2 id=\"怎么做应急响应\"><a href=\"#怎么做应急响应\" class=\"headerlink\" title=\"怎么做应急响应\"></a>怎么做应急响应</h2><ul>\n<li>确定攻击时间: 通过时间来缩小范围</li>\n<li>查找攻击线索</li>\n<li>梳理攻击流程</li>\n<li>实施解决方案</li>\n<li>定位攻击人，取证: 留下的痕迹，无论什么痕迹</li>\n</ul>\n<h2 id=\"为什么要反渗透\"><a href=\"#为什么要反渗透\" class=\"headerlink\" title=\"为什么要反渗透\"></a>为什么要反渗透</h2><ul>\n<li>被动变主动</li>\n</ul>\n<h2 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h2><h3 id=\"1-账号被盗\"><a href=\"#1-账号被盗\" class=\"headerlink\" title=\"1. 账号被盗\"></a>1. 账号被盗</h3><p><strong>现象:</strong> 发出了test，还有@乌云说乌云测试</p>\n<h4 id=\"分析原因\"><a href=\"#分析原因\" class=\"headerlink\" title=\"分析原因\"></a>分析原因</h4><ul>\n<li>非工作人员操作</li>\n<li>账号被cookie登陆</li>\n<li>可能是cookie有httponly</li>\n</ul>\n<h4 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h4><ol>\n<li>查看工作人员的访问路径</li>\n<li>还原攻击，修复漏洞，修复类似漏洞，对工作人员做安全培训</li>\n</ol>\n<h3 id=\"2-500错误日志引发的血案\"><a href=\"#2-500错误日志引发的血案\" class=\"headerlink\" title=\"2. 500错误日志引发的血案\"></a>2. 500错误日志引发的血案</h3><h4 id=\"还原攻击\"><a href=\"#还原攻击\" class=\"headerlink\" title=\"还原攻击\"></a>还原攻击</h4><ul>\n<li>通过日志确认入侵途径是tomcat</li>\n<li>做了一些操作</li>\n</ul>\n<h4 id=\"操作-1\"><a href=\"#操作-1\" class=\"headerlink\" title=\"操作\"></a>操作</h4><ul>\n<li>大多是肉鸡IP，香港，廊坊: 并入侵进行清理，调查</li>\n</ul>\n<h3 id=\"3-DNS-链路劫持\"><a href=\"#3-DNS-链路劫持\" class=\"headerlink\" title=\"3. DNS/链路劫持\"></a>3. DNS/链路劫持</h3><blockquote>\n<p>插入js文件，劫持的时候可以获得输入的用户名密码<br>插入广告</p>\n</blockquote>\n<h4 id=\"处理过程\"><a href=\"#处理过程\" class=\"headerlink\" title=\"处理过程\"></a>处理过程</h4><h5 id=\"定位劫持位置\"><a href=\"#定位劫持位置\" class=\"headerlink\" title=\"定位劫持位置:\"></a>定位劫持位置:</h5><ul>\n<li>TTL</li>\n<li>IP</li>\n</ul>\n<h5 id=\"投诉到运营商\"><a href=\"#投诉到运营商\" class=\"headerlink\" title=\"投诉到运营商\"></a>投诉到运营商</h5><h4 id=\"手段\"><a href=\"#手段\" class=\"headerlink\" title=\"手段\"></a>手段</h4><ul>\n<li>完善监控</li>\n<li>https?</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>业务角度: 保障业务优先</li>\n<li>对抗角度: 了解对手</li>\n<li>技术角度: 攻击技术；日志、流量等数据</li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"如何从外围入各大公司内网","date":"2015-07-17T13:35:03.000Z","_content":"\n> 演讲者: boooooom\n> 乌云白帽子\n\n## I. 为什么要进入内网\n\n> 一切不以数据为目的的攻击行为，都是扯蛋。\n\n- 攻击的核心目标: 数据\n- 数据在哪？\n- 内网的脆弱性!\n\n<!--more-->\n## II. 方式\n\n### 1. 合法入口(和员工一起进入内网)\n\n- vpn/mail，通过大数据获取 企业员工的用户名密码\n- wifi，万能钥匙(京东内网暴露事件)\n\n### 2. \"非法\"入口(跨边界的资产)\n\n- 应用, 各种漏洞、弱点GETSHELL\n- 服务，坑爹配置GETSHELL\n- 员工PC，钓鱼种木马\n\n## III. 说点实在的\n\n> 小公司需要效率、大公司需要过招取其命门\n\n### 1. 大公司\n\n> 成也边界，败也边界\n\n- 只关注边界\n- 区域性的防守 (OA - IDC - HTTP)\n- 划分边界，保护核心资产(数据)\n- 制定规范，把玩法先说好\n\n#### 问题所在(命门)\n\n1. 规范越多，执行越差，无法统一固定唯一的规范\n2. 合规性检查的盲区\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/wh_invade.md","raw":"title: 如何从外围入各大公司内网\ndate: 2015-07-17 21:35:03\npermalink: 2015/07/17/wh_invade\ntags:\n- 2015乌云白帽大会\n- 安全\n- 白帽\n- 会议笔记\n\n---\n\n> 演讲者: boooooom\n> 乌云白帽子\n\n## I. 为什么要进入内网\n\n> 一切不以数据为目的的攻击行为，都是扯蛋。\n\n- 攻击的核心目标: 数据\n- 数据在哪？\n- 内网的脆弱性!\n\n<!--more-->\n## II. 方式\n\n### 1. 合法入口(和员工一起进入内网)\n\n- vpn/mail，通过大数据获取 企业员工的用户名密码\n- wifi，万能钥匙(京东内网暴露事件)\n\n### 2. \"非法\"入口(跨边界的资产)\n\n- 应用, 各种漏洞、弱点GETSHELL\n- 服务，坑爹配置GETSHELL\n- 员工PC，钓鱼种木马\n\n## III. 说点实在的\n\n> 小公司需要效率、大公司需要过招取其命门\n\n### 1. 大公司\n\n> 成也边界，败也边界\n\n- 只关注边界\n- 区域性的防守 (OA - IDC - HTTP)\n- 划分边界，保护核心资产(数据)\n- 制定规范，把玩法先说好\n\n#### 问题所在(命门)\n\n1. 规范越多，执行越差，无法统一固定唯一的规范\n2. 合规性检查的盲区\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2015/07/17/wh_invade","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66jk004795buoibi36gg","content":"<blockquote>\n<p>演讲者: boooooom<br>乌云白帽子</p>\n</blockquote>\n<h2 id=\"I-为什么要进入内网\"><a href=\"#I-为什么要进入内网\" class=\"headerlink\" title=\"I. 为什么要进入内网\"></a>I. 为什么要进入内网</h2><blockquote>\n<p>一切不以数据为目的的攻击行为，都是扯蛋。</p>\n</blockquote>\n<ul>\n<li>攻击的核心目标: 数据</li>\n<li>数据在哪？</li>\n<li>内网的脆弱性!</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"II-方式\"><a href=\"#II-方式\" class=\"headerlink\" title=\"II. 方式\"></a>II. 方式</h2><h3 id=\"1-合法入口-和员工一起进入内网\"><a href=\"#1-合法入口-和员工一起进入内网\" class=\"headerlink\" title=\"1. 合法入口(和员工一起进入内网)\"></a>1. 合法入口(和员工一起进入内网)</h3><ul>\n<li>vpn/mail，通过大数据获取 企业员工的用户名密码</li>\n<li>wifi，万能钥匙(京东内网暴露事件)</li>\n</ul>\n<h3 id=\"2-“非法”入口-跨边界的资产\"><a href=\"#2-“非法”入口-跨边界的资产\" class=\"headerlink\" title=\"2. “非法”入口(跨边界的资产)\"></a>2. “非法”入口(跨边界的资产)</h3><ul>\n<li>应用, 各种漏洞、弱点GETSHELL</li>\n<li>服务，坑爹配置GETSHELL</li>\n<li>员工PC，钓鱼种木马</li>\n</ul>\n<h2 id=\"III-说点实在的\"><a href=\"#III-说点实在的\" class=\"headerlink\" title=\"III. 说点实在的\"></a>III. 说点实在的</h2><blockquote>\n<p>小公司需要效率、大公司需要过招取其命门</p>\n</blockquote>\n<h3 id=\"1-大公司\"><a href=\"#1-大公司\" class=\"headerlink\" title=\"1. 大公司\"></a>1. 大公司</h3><blockquote>\n<p>成也边界，败也边界</p>\n</blockquote>\n<ul>\n<li>只关注边界</li>\n<li>区域性的防守 (OA - IDC - HTTP)</li>\n<li>划分边界，保护核心资产(数据)</li>\n<li>制定规范，把玩法先说好</li>\n</ul>\n<h4 id=\"问题所在-命门\"><a href=\"#问题所在-命门\" class=\"headerlink\" title=\"问题所在(命门)\"></a>问题所在(命门)</h4><ol>\n<li>规范越多，执行越差，无法统一固定唯一的规范</li>\n<li>合规性检查的盲区</li>\n</ol>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>演讲者: boooooom<br>乌云白帽子</p>\n</blockquote>\n<h2 id=\"I-为什么要进入内网\"><a href=\"#I-为什么要进入内网\" class=\"headerlink\" title=\"I. 为什么要进入内网\"></a>I. 为什么要进入内网</h2><blockquote>\n<p>一切不以数据为目的的攻击行为，都是扯蛋。</p>\n</blockquote>\n<ul>\n<li>攻击的核心目标: 数据</li>\n<li>数据在哪？</li>\n<li>内网的脆弱性!</li>\n</ul>","more":"<h2 id=\"II-方式\"><a href=\"#II-方式\" class=\"headerlink\" title=\"II. 方式\"></a>II. 方式</h2><h3 id=\"1-合法入口-和员工一起进入内网\"><a href=\"#1-合法入口-和员工一起进入内网\" class=\"headerlink\" title=\"1. 合法入口(和员工一起进入内网)\"></a>1. 合法入口(和员工一起进入内网)</h3><ul>\n<li>vpn/mail，通过大数据获取 企业员工的用户名密码</li>\n<li>wifi，万能钥匙(京东内网暴露事件)</li>\n</ul>\n<h3 id=\"2-“非法”入口-跨边界的资产\"><a href=\"#2-“非法”入口-跨边界的资产\" class=\"headerlink\" title=\"2. “非法”入口(跨边界的资产)\"></a>2. “非法”入口(跨边界的资产)</h3><ul>\n<li>应用, 各种漏洞、弱点GETSHELL</li>\n<li>服务，坑爹配置GETSHELL</li>\n<li>员工PC，钓鱼种木马</li>\n</ul>\n<h2 id=\"III-说点实在的\"><a href=\"#III-说点实在的\" class=\"headerlink\" title=\"III. 说点实在的\"></a>III. 说点实在的</h2><blockquote>\n<p>小公司需要效率、大公司需要过招取其命门</p>\n</blockquote>\n<h3 id=\"1-大公司\"><a href=\"#1-大公司\" class=\"headerlink\" title=\"1. 大公司\"></a>1. 大公司</h3><blockquote>\n<p>成也边界，败也边界</p>\n</blockquote>\n<ul>\n<li>只关注边界</li>\n<li>区域性的防守 (OA - IDC - HTTP)</li>\n<li>划分边界，保护核心资产(数据)</li>\n<li>制定规范，把玩法先说好</li>\n</ul>\n<h4 id=\"问题所在-命门\"><a href=\"#问题所在-命门\" class=\"headerlink\" title=\"问题所在(命门)\"></a>问题所在(命门)</h4><ol>\n<li>规范越多，执行越差，无法统一固定唯一的规范</li>\n<li>合规性检查的盲区</li>\n</ol>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"去哪儿安全0~1","date":"2015-07-17T13:35:03.000Z","_content":"\n> 演讲者：郭添森\n> 去哪儿安全总监\n> 联系微信: eyasguo\n\n## ESG信息安全\n\n> Enterprise Strategy Group\n\n<!--more-->\n### 愿景:\n\n1. 初始阶段: 可有可无，运维\n2. 进阶: 被提出，比较独立\n3. 高阶: 被重视\n\n\n## 如何建立安全威信\n\n> 领导力\n\n#### 1. 专业\n\n进行决策的时候，能够有专业的主见与方向的把控\n\n#### 2. 人格\n\n替对方考虑: 每个人都是为别人服务，也需要对方来为你来服务。\n\n权衡ROI等\n\n#### 3. 职权\n\n- 组织架构：\n\n    他之前的公司: 运维 <- 安全工程师 | 安全独立 | 安全上升到VP级别(阿里巴巴)\n\n- 参与关键流程\n- 奖惩\n\n## 去哪儿安全发展\n\n### 第一阶段\n\n> 公司500人左右。网络规模: 千人，第一年\n\n- 组建团队\n\n#### 网络模块\n\n##### 问题&解决方案:\n\n- 办公网: 未隔离\n\n    做VLAN隔离: 只能出不能进\n\n- 生产网: 无ACL\n\n    设置ACL: 只开http/https端口 &只开给指定的IP\n    Web统一由nginx做反向代理\n    Nginx配置走变更流程\n\n- VPN: 用户名/密码验证\n\n### 第二阶段\n\n> 公司10000人左右，网络规模下一个数量级，2~3年\n\n#### 主要升级方面\n\n- 流程制度的标准: 技术标准\n- 合规: SOX404、PCI DSS\n- 建立自动化系统、确保安全规划能落地执行\n\n##### 操作系统层面问题\n\n- 用户名/密码认证\n\n    双因素认证 : 登陆服务器，先登陆堡垒机\n\n- 弱口令\n\n    tcp wrapper\n\n- 离职人员账号\n\n##### 数据库\n\n- 空口令/弱口令: mysql, pg, mongod\n\n    检测配置文件，把密码的hash拿出来\n\n##### 系统应用\n\n- 软件?版本?配置?漏洞?\n\n    收集软件版本、配置等 & 漏洞检测 & 警告邮件\n\n##### Web server\n\n> 百分百覆盖以下问题\n\n- 默认管理后台: tomcat，jboos等\n- 启动账号:nobody\n- 目录权限:root,755\n- 解析漏洞:nginx fastcgi, apache httpd等\n- Auto index\n- 压缩文件\n\n> 默认情况下保证Web server 写不了\n\n##### Spring/struts\n##### Jenkins/es等命令执行\n##### rsyncd\n##### Redis\n\n\n##### Web应用\n\n- 账号密码?复杂度?定期改\n\n    QSSO系统: 集中管理，双因素认证\n\n    QWAF: 静态、动态(静态 ＋ 动态策略规则)\n\n- OWASP TOP 10\n\n    制定安全标准\n    内部测试、终测\n\n### 第三阶段\n\n> 10000人，第4年\n\n#### 数据安全\n\n##### 用户隐私、交易详情、产品技术文档，源码保护\n\n- 制定标准\n- PCI DSS(支付卡行业数据安全标准)认证\n- 数据加密(加密算法只有几个人知道)、清洗、大码\n- 自动抽样（发现问题，进行跟进处理)\n- 授权\n- 人工巡查github\n\n#### 业务安全\n\n##### 账号安全：垃圾注册？撞库?\n\n- 统一入口，收缩防线\n- 动静结合\n\n##### 反欺诈:用户/商业作弊\n\n- 异常行为分析\n\n#### 业务和安全平衡\n\n> 消除风险还是控制风险。\n\n##### 基础架构: OPS\n\n> 安全稳定高效\n\n- 运维部门合作\n\n- 业务部门: 开发/QA/产品\n\n    产品流程切入，一般会在后期切入\n\n- 冲突: 汇报人员级别不断升级\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/wh_qunaer0_1.md","raw":"title: 去哪儿安全0~1\ndate: 2015-07-17 21:35:03\npermalink: 2015/07/17/wh_qunaer0_1\ntags:\n- 2015乌云白帽大会\n- 安全\n- 白帽\n- 会议笔记\n\n---\n\n> 演讲者：郭添森\n> 去哪儿安全总监\n> 联系微信: eyasguo\n\n## ESG信息安全\n\n> Enterprise Strategy Group\n\n<!--more-->\n### 愿景:\n\n1. 初始阶段: 可有可无，运维\n2. 进阶: 被提出，比较独立\n3. 高阶: 被重视\n\n\n## 如何建立安全威信\n\n> 领导力\n\n#### 1. 专业\n\n进行决策的时候，能够有专业的主见与方向的把控\n\n#### 2. 人格\n\n替对方考虑: 每个人都是为别人服务，也需要对方来为你来服务。\n\n权衡ROI等\n\n#### 3. 职权\n\n- 组织架构：\n\n    他之前的公司: 运维 <- 安全工程师 | 安全独立 | 安全上升到VP级别(阿里巴巴)\n\n- 参与关键流程\n- 奖惩\n\n## 去哪儿安全发展\n\n### 第一阶段\n\n> 公司500人左右。网络规模: 千人，第一年\n\n- 组建团队\n\n#### 网络模块\n\n##### 问题&解决方案:\n\n- 办公网: 未隔离\n\n    做VLAN隔离: 只能出不能进\n\n- 生产网: 无ACL\n\n    设置ACL: 只开http/https端口 &只开给指定的IP\n    Web统一由nginx做反向代理\n    Nginx配置走变更流程\n\n- VPN: 用户名/密码验证\n\n### 第二阶段\n\n> 公司10000人左右，网络规模下一个数量级，2~3年\n\n#### 主要升级方面\n\n- 流程制度的标准: 技术标准\n- 合规: SOX404、PCI DSS\n- 建立自动化系统、确保安全规划能落地执行\n\n##### 操作系统层面问题\n\n- 用户名/密码认证\n\n    双因素认证 : 登陆服务器，先登陆堡垒机\n\n- 弱口令\n\n    tcp wrapper\n\n- 离职人员账号\n\n##### 数据库\n\n- 空口令/弱口令: mysql, pg, mongod\n\n    检测配置文件，把密码的hash拿出来\n\n##### 系统应用\n\n- 软件?版本?配置?漏洞?\n\n    收集软件版本、配置等 & 漏洞检测 & 警告邮件\n\n##### Web server\n\n> 百分百覆盖以下问题\n\n- 默认管理后台: tomcat，jboos等\n- 启动账号:nobody\n- 目录权限:root,755\n- 解析漏洞:nginx fastcgi, apache httpd等\n- Auto index\n- 压缩文件\n\n> 默认情况下保证Web server 写不了\n\n##### Spring/struts\n##### Jenkins/es等命令执行\n##### rsyncd\n##### Redis\n\n\n##### Web应用\n\n- 账号密码?复杂度?定期改\n\n    QSSO系统: 集中管理，双因素认证\n\n    QWAF: 静态、动态(静态 ＋ 动态策略规则)\n\n- OWASP TOP 10\n\n    制定安全标准\n    内部测试、终测\n\n### 第三阶段\n\n> 10000人，第4年\n\n#### 数据安全\n\n##### 用户隐私、交易详情、产品技术文档，源码保护\n\n- 制定标准\n- PCI DSS(支付卡行业数据安全标准)认证\n- 数据加密(加密算法只有几个人知道)、清洗、大码\n- 自动抽样（发现问题，进行跟进处理)\n- 授权\n- 人工巡查github\n\n#### 业务安全\n\n##### 账号安全：垃圾注册？撞库?\n\n- 统一入口，收缩防线\n- 动静结合\n\n##### 反欺诈:用户/商业作弊\n\n- 异常行为分析\n\n#### 业务和安全平衡\n\n> 消除风险还是控制风险。\n\n##### 基础架构: OPS\n\n> 安全稳定高效\n\n- 运维部门合作\n\n- 业务部门: 开发/QA/产品\n\n    产品流程切入，一般会在后期切入\n\n- 冲突: 汇报人员级别不断升级\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2015/07/17/wh_qunaer0_1","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66jt004a95buwqsbhk6s","content":"<blockquote>\n<p>演讲者：郭添森<br>去哪儿安全总监<br>联系微信: eyasguo</p>\n</blockquote>\n<h2 id=\"ESG信息安全\"><a href=\"#ESG信息安全\" class=\"headerlink\" title=\"ESG信息安全\"></a>ESG信息安全</h2><blockquote>\n<p>Enterprise Strategy Group</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"愿景\"><a href=\"#愿景\" class=\"headerlink\" title=\"愿景:\"></a>愿景:</h3><ol>\n<li>初始阶段: 可有可无，运维</li>\n<li>进阶: 被提出，比较独立</li>\n<li>高阶: 被重视</li>\n</ol>\n<h2 id=\"如何建立安全威信\"><a href=\"#如何建立安全威信\" class=\"headerlink\" title=\"如何建立安全威信\"></a>如何建立安全威信</h2><blockquote>\n<p>领导力</p>\n</blockquote>\n<h4 id=\"1-专业\"><a href=\"#1-专业\" class=\"headerlink\" title=\"1. 专业\"></a>1. 专业</h4><p>进行决策的时候，能够有专业的主见与方向的把控</p>\n<h4 id=\"2-人格\"><a href=\"#2-人格\" class=\"headerlink\" title=\"2. 人格\"></a>2. 人格</h4><p>替对方考虑: 每个人都是为别人服务，也需要对方来为你来服务。</p>\n<p>权衡ROI等</p>\n<h4 id=\"3-职权\"><a href=\"#3-职权\" class=\"headerlink\" title=\"3. 职权\"></a>3. 职权</h4><ul>\n<li><p>组织架构：</p>\n<p>  他之前的公司: 运维 &lt;- 安全工程师 | 安全独立 | 安全上升到VP级别(阿里巴巴)</p>\n</li>\n<li><p>参与关键流程</p>\n</li>\n<li>奖惩</li>\n</ul>\n<h2 id=\"去哪儿安全发展\"><a href=\"#去哪儿安全发展\" class=\"headerlink\" title=\"去哪儿安全发展\"></a>去哪儿安全发展</h2><h3 id=\"第一阶段\"><a href=\"#第一阶段\" class=\"headerlink\" title=\"第一阶段\"></a>第一阶段</h3><blockquote>\n<p>公司500人左右。网络规模: 千人，第一年</p>\n</blockquote>\n<ul>\n<li>组建团队</li>\n</ul>\n<h4 id=\"网络模块\"><a href=\"#网络模块\" class=\"headerlink\" title=\"网络模块\"></a>网络模块</h4><h5 id=\"问题-amp-解决方案\"><a href=\"#问题-amp-解决方案\" class=\"headerlink\" title=\"问题&amp;解决方案:\"></a>问题&amp;解决方案:</h5><ul>\n<li><p>办公网: 未隔离</p>\n<p>  做VLAN隔离: 只能出不能进</p>\n</li>\n<li><p>生产网: 无ACL</p>\n<p>  设置ACL: 只开http/https端口 &amp;只开给指定的IP<br>  Web统一由nginx做反向代理<br>  Nginx配置走变更流程</p>\n</li>\n<li><p>VPN: 用户名/密码验证</p>\n</li>\n</ul>\n<h3 id=\"第二阶段\"><a href=\"#第二阶段\" class=\"headerlink\" title=\"第二阶段\"></a>第二阶段</h3><blockquote>\n<p>公司10000人左右，网络规模下一个数量级，2~3年</p>\n</blockquote>\n<h4 id=\"主要升级方面\"><a href=\"#主要升级方面\" class=\"headerlink\" title=\"主要升级方面\"></a>主要升级方面</h4><ul>\n<li>流程制度的标准: 技术标准</li>\n<li>合规: SOX404、PCI DSS</li>\n<li>建立自动化系统、确保安全规划能落地执行</li>\n</ul>\n<h5 id=\"操作系统层面问题\"><a href=\"#操作系统层面问题\" class=\"headerlink\" title=\"操作系统层面问题\"></a>操作系统层面问题</h5><ul>\n<li><p>用户名/密码认证</p>\n<p>  双因素认证 : 登陆服务器，先登陆堡垒机</p>\n</li>\n<li><p>弱口令</p>\n<p>  tcp wrapper</p>\n</li>\n<li><p>离职人员账号</p>\n</li>\n</ul>\n<h5 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h5><ul>\n<li><p>空口令/弱口令: mysql, pg, mongod</p>\n<p>  检测配置文件，把密码的hash拿出来</p>\n</li>\n</ul>\n<h5 id=\"系统应用\"><a href=\"#系统应用\" class=\"headerlink\" title=\"系统应用\"></a>系统应用</h5><ul>\n<li><p>软件?版本?配置?漏洞?</p>\n<p>  收集软件版本、配置等 &amp; 漏洞检测 &amp; 警告邮件</p>\n</li>\n</ul>\n<h5 id=\"Web-server\"><a href=\"#Web-server\" class=\"headerlink\" title=\"Web server\"></a>Web server</h5><blockquote>\n<p>百分百覆盖以下问题</p>\n</blockquote>\n<ul>\n<li>默认管理后台: tomcat，jboos等</li>\n<li>启动账号:nobody</li>\n<li>目录权限:root,755</li>\n<li>解析漏洞:nginx fastcgi, apache httpd等</li>\n<li>Auto index</li>\n<li>压缩文件</li>\n</ul>\n<blockquote>\n<p>默认情况下保证Web server 写不了</p>\n</blockquote>\n<h5 id=\"Spring-struts\"><a href=\"#Spring-struts\" class=\"headerlink\" title=\"Spring/struts\"></a>Spring/struts</h5><h5 id=\"Jenkins-es等命令执行\"><a href=\"#Jenkins-es等命令执行\" class=\"headerlink\" title=\"Jenkins/es等命令执行\"></a>Jenkins/es等命令执行</h5><h5 id=\"rsyncd\"><a href=\"#rsyncd\" class=\"headerlink\" title=\"rsyncd\"></a>rsyncd</h5><h5 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h5><h5 id=\"Web应用\"><a href=\"#Web应用\" class=\"headerlink\" title=\"Web应用\"></a>Web应用</h5><ul>\n<li><p>账号密码?复杂度?定期改</p>\n<p>  QSSO系统: 集中管理，双因素认证</p>\n<p>  QWAF: 静态、动态(静态 ＋ 动态策略规则)</p>\n</li>\n<li><p>OWASP TOP 10</p>\n<p>  制定安全标准<br>  内部测试、终测</p>\n</li>\n</ul>\n<h3 id=\"第三阶段\"><a href=\"#第三阶段\" class=\"headerlink\" title=\"第三阶段\"></a>第三阶段</h3><blockquote>\n<p>10000人，第4年</p>\n</blockquote>\n<h4 id=\"数据安全\"><a href=\"#数据安全\" class=\"headerlink\" title=\"数据安全\"></a>数据安全</h4><h5 id=\"用户隐私、交易详情、产品技术文档，源码保护\"><a href=\"#用户隐私、交易详情、产品技术文档，源码保护\" class=\"headerlink\" title=\"用户隐私、交易详情、产品技术文档，源码保护\"></a>用户隐私、交易详情、产品技术文档，源码保护</h5><ul>\n<li>制定标准</li>\n<li>PCI DSS(支付卡行业数据安全标准)认证</li>\n<li>数据加密(加密算法只有几个人知道)、清洗、大码</li>\n<li>自动抽样（发现问题，进行跟进处理)</li>\n<li>授权</li>\n<li>人工巡查github</li>\n</ul>\n<h4 id=\"业务安全\"><a href=\"#业务安全\" class=\"headerlink\" title=\"业务安全\"></a>业务安全</h4><h5 id=\"账号安全：垃圾注册？撞库\"><a href=\"#账号安全：垃圾注册？撞库\" class=\"headerlink\" title=\"账号安全：垃圾注册？撞库?\"></a>账号安全：垃圾注册？撞库?</h5><ul>\n<li>统一入口，收缩防线</li>\n<li>动静结合</li>\n</ul>\n<h5 id=\"反欺诈-用户-商业作弊\"><a href=\"#反欺诈-用户-商业作弊\" class=\"headerlink\" title=\"反欺诈:用户/商业作弊\"></a>反欺诈:用户/商业作弊</h5><ul>\n<li>异常行为分析</li>\n</ul>\n<h4 id=\"业务和安全平衡\"><a href=\"#业务和安全平衡\" class=\"headerlink\" title=\"业务和安全平衡\"></a>业务和安全平衡</h4><blockquote>\n<p>消除风险还是控制风险。</p>\n</blockquote>\n<h5 id=\"基础架构-OPS\"><a href=\"#基础架构-OPS\" class=\"headerlink\" title=\"基础架构: OPS\"></a>基础架构: OPS</h5><blockquote>\n<p>安全稳定高效</p>\n</blockquote>\n<ul>\n<li><p>运维部门合作</p>\n</li>\n<li><p>业务部门: 开发/QA/产品</p>\n<p>  产品流程切入，一般会在后期切入</p>\n</li>\n<li><p>冲突: 汇报人员级别不断升级</p>\n</li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>演讲者：郭添森<br>去哪儿安全总监<br>联系微信: eyasguo</p>\n</blockquote>\n<h2 id=\"ESG信息安全\"><a href=\"#ESG信息安全\" class=\"headerlink\" title=\"ESG信息安全\"></a>ESG信息安全</h2><blockquote>\n<p>Enterprise Strategy Group</p>\n</blockquote>","more":"<h3 id=\"愿景\"><a href=\"#愿景\" class=\"headerlink\" title=\"愿景:\"></a>愿景:</h3><ol>\n<li>初始阶段: 可有可无，运维</li>\n<li>进阶: 被提出，比较独立</li>\n<li>高阶: 被重视</li>\n</ol>\n<h2 id=\"如何建立安全威信\"><a href=\"#如何建立安全威信\" class=\"headerlink\" title=\"如何建立安全威信\"></a>如何建立安全威信</h2><blockquote>\n<p>领导力</p>\n</blockquote>\n<h4 id=\"1-专业\"><a href=\"#1-专业\" class=\"headerlink\" title=\"1. 专业\"></a>1. 专业</h4><p>进行决策的时候，能够有专业的主见与方向的把控</p>\n<h4 id=\"2-人格\"><a href=\"#2-人格\" class=\"headerlink\" title=\"2. 人格\"></a>2. 人格</h4><p>替对方考虑: 每个人都是为别人服务，也需要对方来为你来服务。</p>\n<p>权衡ROI等</p>\n<h4 id=\"3-职权\"><a href=\"#3-职权\" class=\"headerlink\" title=\"3. 职权\"></a>3. 职权</h4><ul>\n<li><p>组织架构：</p>\n<p>  他之前的公司: 运维 &lt;- 安全工程师 | 安全独立 | 安全上升到VP级别(阿里巴巴)</p>\n</li>\n<li><p>参与关键流程</p>\n</li>\n<li>奖惩</li>\n</ul>\n<h2 id=\"去哪儿安全发展\"><a href=\"#去哪儿安全发展\" class=\"headerlink\" title=\"去哪儿安全发展\"></a>去哪儿安全发展</h2><h3 id=\"第一阶段\"><a href=\"#第一阶段\" class=\"headerlink\" title=\"第一阶段\"></a>第一阶段</h3><blockquote>\n<p>公司500人左右。网络规模: 千人，第一年</p>\n</blockquote>\n<ul>\n<li>组建团队</li>\n</ul>\n<h4 id=\"网络模块\"><a href=\"#网络模块\" class=\"headerlink\" title=\"网络模块\"></a>网络模块</h4><h5 id=\"问题-amp-解决方案\"><a href=\"#问题-amp-解决方案\" class=\"headerlink\" title=\"问题&amp;解决方案:\"></a>问题&amp;解决方案:</h5><ul>\n<li><p>办公网: 未隔离</p>\n<p>  做VLAN隔离: 只能出不能进</p>\n</li>\n<li><p>生产网: 无ACL</p>\n<p>  设置ACL: 只开http/https端口 &amp;只开给指定的IP<br>  Web统一由nginx做反向代理<br>  Nginx配置走变更流程</p>\n</li>\n<li><p>VPN: 用户名/密码验证</p>\n</li>\n</ul>\n<h3 id=\"第二阶段\"><a href=\"#第二阶段\" class=\"headerlink\" title=\"第二阶段\"></a>第二阶段</h3><blockquote>\n<p>公司10000人左右，网络规模下一个数量级，2~3年</p>\n</blockquote>\n<h4 id=\"主要升级方面\"><a href=\"#主要升级方面\" class=\"headerlink\" title=\"主要升级方面\"></a>主要升级方面</h4><ul>\n<li>流程制度的标准: 技术标准</li>\n<li>合规: SOX404、PCI DSS</li>\n<li>建立自动化系统、确保安全规划能落地执行</li>\n</ul>\n<h5 id=\"操作系统层面问题\"><a href=\"#操作系统层面问题\" class=\"headerlink\" title=\"操作系统层面问题\"></a>操作系统层面问题</h5><ul>\n<li><p>用户名/密码认证</p>\n<p>  双因素认证 : 登陆服务器，先登陆堡垒机</p>\n</li>\n<li><p>弱口令</p>\n<p>  tcp wrapper</p>\n</li>\n<li><p>离职人员账号</p>\n</li>\n</ul>\n<h5 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h5><ul>\n<li><p>空口令/弱口令: mysql, pg, mongod</p>\n<p>  检测配置文件，把密码的hash拿出来</p>\n</li>\n</ul>\n<h5 id=\"系统应用\"><a href=\"#系统应用\" class=\"headerlink\" title=\"系统应用\"></a>系统应用</h5><ul>\n<li><p>软件?版本?配置?漏洞?</p>\n<p>  收集软件版本、配置等 &amp; 漏洞检测 &amp; 警告邮件</p>\n</li>\n</ul>\n<h5 id=\"Web-server\"><a href=\"#Web-server\" class=\"headerlink\" title=\"Web server\"></a>Web server</h5><blockquote>\n<p>百分百覆盖以下问题</p>\n</blockquote>\n<ul>\n<li>默认管理后台: tomcat，jboos等</li>\n<li>启动账号:nobody</li>\n<li>目录权限:root,755</li>\n<li>解析漏洞:nginx fastcgi, apache httpd等</li>\n<li>Auto index</li>\n<li>压缩文件</li>\n</ul>\n<blockquote>\n<p>默认情况下保证Web server 写不了</p>\n</blockquote>\n<h5 id=\"Spring-struts\"><a href=\"#Spring-struts\" class=\"headerlink\" title=\"Spring/struts\"></a>Spring/struts</h5><h5 id=\"Jenkins-es等命令执行\"><a href=\"#Jenkins-es等命令执行\" class=\"headerlink\" title=\"Jenkins/es等命令执行\"></a>Jenkins/es等命令执行</h5><h5 id=\"rsyncd\"><a href=\"#rsyncd\" class=\"headerlink\" title=\"rsyncd\"></a>rsyncd</h5><h5 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h5><h5 id=\"Web应用\"><a href=\"#Web应用\" class=\"headerlink\" title=\"Web应用\"></a>Web应用</h5><ul>\n<li><p>账号密码?复杂度?定期改</p>\n<p>  QSSO系统: 集中管理，双因素认证</p>\n<p>  QWAF: 静态、动态(静态 ＋ 动态策略规则)</p>\n</li>\n<li><p>OWASP TOP 10</p>\n<p>  制定安全标准<br>  内部测试、终测</p>\n</li>\n</ul>\n<h3 id=\"第三阶段\"><a href=\"#第三阶段\" class=\"headerlink\" title=\"第三阶段\"></a>第三阶段</h3><blockquote>\n<p>10000人，第4年</p>\n</blockquote>\n<h4 id=\"数据安全\"><a href=\"#数据安全\" class=\"headerlink\" title=\"数据安全\"></a>数据安全</h4><h5 id=\"用户隐私、交易详情、产品技术文档，源码保护\"><a href=\"#用户隐私、交易详情、产品技术文档，源码保护\" class=\"headerlink\" title=\"用户隐私、交易详情、产品技术文档，源码保护\"></a>用户隐私、交易详情、产品技术文档，源码保护</h5><ul>\n<li>制定标准</li>\n<li>PCI DSS(支付卡行业数据安全标准)认证</li>\n<li>数据加密(加密算法只有几个人知道)、清洗、大码</li>\n<li>自动抽样（发现问题，进行跟进处理)</li>\n<li>授权</li>\n<li>人工巡查github</li>\n</ul>\n<h4 id=\"业务安全\"><a href=\"#业务安全\" class=\"headerlink\" title=\"业务安全\"></a>业务安全</h4><h5 id=\"账号安全：垃圾注册？撞库\"><a href=\"#账号安全：垃圾注册？撞库\" class=\"headerlink\" title=\"账号安全：垃圾注册？撞库?\"></a>账号安全：垃圾注册？撞库?</h5><ul>\n<li>统一入口，收缩防线</li>\n<li>动静结合</li>\n</ul>\n<h5 id=\"反欺诈-用户-商业作弊\"><a href=\"#反欺诈-用户-商业作弊\" class=\"headerlink\" title=\"反欺诈:用户/商业作弊\"></a>反欺诈:用户/商业作弊</h5><ul>\n<li>异常行为分析</li>\n</ul>\n<h4 id=\"业务和安全平衡\"><a href=\"#业务和安全平衡\" class=\"headerlink\" title=\"业务和安全平衡\"></a>业务和安全平衡</h4><blockquote>\n<p>消除风险还是控制风险。</p>\n</blockquote>\n<h5 id=\"基础架构-OPS\"><a href=\"#基础架构-OPS\" class=\"headerlink\" title=\"基础架构: OPS\"></a>基础架构: OPS</h5><blockquote>\n<p>安全稳定高效</p>\n</blockquote>\n<ul>\n<li><p>运维部门合作</p>\n</li>\n<li><p>业务部门: 开发/QA/产品</p>\n<p>  产品流程切入，一般会在后期切入</p>\n</li>\n<li><p>冲突: 汇报人员级别不断升级</p>\n</li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"腾讯web安全","date":"2015-07-17T13:35:03.000Z","_content":"\n> 演讲者: 腾讯安全架构师\n> 腾讯8年老员工，一直做腾讯安全\n\n#### 开发\n\n安全规范、安全培训、安全API、安全JS\n\n#### 测试\n\n- 接入WAF\n- 上线前安全扫描\n\n<!--more-->\n\n## 扫描器:\n\n- 扫描程序架构: 全异步事件驱动 ＋ 协程\n- 规则: 检测逻辑、配置(lua脚本(性能高(1/4 c))、实时更新\n- 任务调度系统: Gearman: 系统优先级，多任务类型、任务出错重试、超时\n- 爬虫: webkit后台server，与调度系统结合\n\n## WAF方案\n\n1. 本地服务器模块模式\n2. 反向代理模式（在反向代理上切入WAF)\n3. 硬件防护（在硬件中嵌入)\n\n\n### 大型网络复杂情况下WAF的选择:\n\n> 多种方案并存, 用WAF集群来专门处理\n\n##### 服务器Agent + WAF集群:\n\n- DDOS设备\n- CDN\n- Nginx反向代理\n- 通用性webserver\n- 自研webserver\n\n\n\n## 技术点:\n\n### 1. Nginx agent的实现(数据分发)\n\n> Nginx以性能著称\n\n需要对Nginx的处理流程&通讯机制进行介入。\n\n通过Nginx一些api的方式进行网络通信监控。\n\nWAF回来以后做网络通信: 通过Nginx1.4.4＋的对外接口来获得回调。  \n\n### 2. 性能\n\n### 3. 负载均衡、容灾、防雪崩、流量穿透\n\n\n## WAF运营\n\n\n### 1. 业务web服务器配置\n\n### 2. 规则管理\n\n公司类、WAF、旁路分发。\n编辑环境、测试环境、线上运营\n\n### 3. 大数据分析\n\n解决: 误报、漏报\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/wh_tencent_web.md","raw":"title: 腾讯web安全\ndate: 2015-07-17 21:35:03\npermalink: 2015/07/17/wh_tencent_web\ntags:\n- 2015乌云白帽大会\n- 安全\n- 白帽\n- 会议笔记\n\n---\n\n> 演讲者: 腾讯安全架构师\n> 腾讯8年老员工，一直做腾讯安全\n\n#### 开发\n\n安全规范、安全培训、安全API、安全JS\n\n#### 测试\n\n- 接入WAF\n- 上线前安全扫描\n\n<!--more-->\n\n## 扫描器:\n\n- 扫描程序架构: 全异步事件驱动 ＋ 协程\n- 规则: 检测逻辑、配置(lua脚本(性能高(1/4 c))、实时更新\n- 任务调度系统: Gearman: 系统优先级，多任务类型、任务出错重试、超时\n- 爬虫: webkit后台server，与调度系统结合\n\n## WAF方案\n\n1. 本地服务器模块模式\n2. 反向代理模式（在反向代理上切入WAF)\n3. 硬件防护（在硬件中嵌入)\n\n\n### 大型网络复杂情况下WAF的选择:\n\n> 多种方案并存, 用WAF集群来专门处理\n\n##### 服务器Agent + WAF集群:\n\n- DDOS设备\n- CDN\n- Nginx反向代理\n- 通用性webserver\n- 自研webserver\n\n\n\n## 技术点:\n\n### 1. Nginx agent的实现(数据分发)\n\n> Nginx以性能著称\n\n需要对Nginx的处理流程&通讯机制进行介入。\n\n通过Nginx一些api的方式进行网络通信监控。\n\nWAF回来以后做网络通信: 通过Nginx1.4.4＋的对外接口来获得回调。  \n\n### 2. 性能\n\n### 3. 负载均衡、容灾、防雪崩、流量穿透\n\n\n## WAF运营\n\n\n### 1. 业务web服务器配置\n\n### 2. 规则管理\n\n公司类、WAF、旁路分发。\n编辑环境、测试环境、线上运营\n\n### 3. 大数据分析\n\n解决: 误报、漏报\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2015/07/17/wh_tencent_web","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66ju004c95buklqoz76b","content":"<blockquote>\n<p>演讲者: 腾讯安全架构师<br>腾讯8年老员工，一直做腾讯安全</p>\n</blockquote>\n<h4 id=\"开发\"><a href=\"#开发\" class=\"headerlink\" title=\"开发\"></a>开发</h4><p>安全规范、安全培训、安全API、安全JS</p>\n<h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><ul>\n<li>接入WAF</li>\n<li>上线前安全扫描</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"扫描器\"><a href=\"#扫描器\" class=\"headerlink\" title=\"扫描器:\"></a>扫描器:</h2><ul>\n<li>扫描程序架构: 全异步事件驱动 ＋ 协程</li>\n<li>规则: 检测逻辑、配置(lua脚本(性能高(1/4 c))、实时更新</li>\n<li>任务调度系统: Gearman: 系统优先级，多任务类型、任务出错重试、超时</li>\n<li>爬虫: webkit后台server，与调度系统结合</li>\n</ul>\n<h2 id=\"WAF方案\"><a href=\"#WAF方案\" class=\"headerlink\" title=\"WAF方案\"></a>WAF方案</h2><ol>\n<li>本地服务器模块模式</li>\n<li>反向代理模式（在反向代理上切入WAF)</li>\n<li>硬件防护（在硬件中嵌入)</li>\n</ol>\n<h3 id=\"大型网络复杂情况下WAF的选择\"><a href=\"#大型网络复杂情况下WAF的选择\" class=\"headerlink\" title=\"大型网络复杂情况下WAF的选择:\"></a>大型网络复杂情况下WAF的选择:</h3><blockquote>\n<p>多种方案并存, 用WAF集群来专门处理</p>\n</blockquote>\n<h5 id=\"服务器Agent-WAF集群\"><a href=\"#服务器Agent-WAF集群\" class=\"headerlink\" title=\"服务器Agent + WAF集群:\"></a>服务器Agent + WAF集群:</h5><ul>\n<li>DDOS设备</li>\n<li>CDN</li>\n<li>Nginx反向代理</li>\n<li>通用性webserver</li>\n<li>自研webserver</li>\n</ul>\n<h2 id=\"技术点\"><a href=\"#技术点\" class=\"headerlink\" title=\"技术点:\"></a>技术点:</h2><h3 id=\"1-Nginx-agent的实现-数据分发\"><a href=\"#1-Nginx-agent的实现-数据分发\" class=\"headerlink\" title=\"1. Nginx agent的实现(数据分发)\"></a>1. Nginx agent的实现(数据分发)</h3><blockquote>\n<p>Nginx以性能著称</p>\n</blockquote>\n<p>需要对Nginx的处理流程&amp;通讯机制进行介入。</p>\n<p>通过Nginx一些api的方式进行网络通信监控。</p>\n<p>WAF回来以后做网络通信: 通过Nginx1.4.4＋的对外接口来获得回调。  </p>\n<h3 id=\"2-性能\"><a href=\"#2-性能\" class=\"headerlink\" title=\"2. 性能\"></a>2. 性能</h3><h3 id=\"3-负载均衡、容灾、防雪崩、流量穿透\"><a href=\"#3-负载均衡、容灾、防雪崩、流量穿透\" class=\"headerlink\" title=\"3. 负载均衡、容灾、防雪崩、流量穿透\"></a>3. 负载均衡、容灾、防雪崩、流量穿透</h3><h2 id=\"WAF运营\"><a href=\"#WAF运营\" class=\"headerlink\" title=\"WAF运营\"></a>WAF运营</h2><h3 id=\"1-业务web服务器配置\"><a href=\"#1-业务web服务器配置\" class=\"headerlink\" title=\"1. 业务web服务器配置\"></a>1. 业务web服务器配置</h3><h3 id=\"2-规则管理\"><a href=\"#2-规则管理\" class=\"headerlink\" title=\"2. 规则管理\"></a>2. 规则管理</h3><p>公司类、WAF、旁路分发。<br>编辑环境、测试环境、线上运营</p>\n<h3 id=\"3-大数据分析\"><a href=\"#3-大数据分析\" class=\"headerlink\" title=\"3. 大数据分析\"></a>3. 大数据分析</h3><p>解决: 误报、漏报</p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>演讲者: 腾讯安全架构师<br>腾讯8年老员工，一直做腾讯安全</p>\n</blockquote>\n<h4 id=\"开发\"><a href=\"#开发\" class=\"headerlink\" title=\"开发\"></a>开发</h4><p>安全规范、安全培训、安全API、安全JS</p>\n<h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><ul>\n<li>接入WAF</li>\n<li>上线前安全扫描</li>\n</ul>","more":"<h2 id=\"扫描器\"><a href=\"#扫描器\" class=\"headerlink\" title=\"扫描器:\"></a>扫描器:</h2><ul>\n<li>扫描程序架构: 全异步事件驱动 ＋ 协程</li>\n<li>规则: 检测逻辑、配置(lua脚本(性能高(1/4 c))、实时更新</li>\n<li>任务调度系统: Gearman: 系统优先级，多任务类型、任务出错重试、超时</li>\n<li>爬虫: webkit后台server，与调度系统结合</li>\n</ul>\n<h2 id=\"WAF方案\"><a href=\"#WAF方案\" class=\"headerlink\" title=\"WAF方案\"></a>WAF方案</h2><ol>\n<li>本地服务器模块模式</li>\n<li>反向代理模式（在反向代理上切入WAF)</li>\n<li>硬件防护（在硬件中嵌入)</li>\n</ol>\n<h3 id=\"大型网络复杂情况下WAF的选择\"><a href=\"#大型网络复杂情况下WAF的选择\" class=\"headerlink\" title=\"大型网络复杂情况下WAF的选择:\"></a>大型网络复杂情况下WAF的选择:</h3><blockquote>\n<p>多种方案并存, 用WAF集群来专门处理</p>\n</blockquote>\n<h5 id=\"服务器Agent-WAF集群\"><a href=\"#服务器Agent-WAF集群\" class=\"headerlink\" title=\"服务器Agent + WAF集群:\"></a>服务器Agent + WAF集群:</h5><ul>\n<li>DDOS设备</li>\n<li>CDN</li>\n<li>Nginx反向代理</li>\n<li>通用性webserver</li>\n<li>自研webserver</li>\n</ul>\n<h2 id=\"技术点\"><a href=\"#技术点\" class=\"headerlink\" title=\"技术点:\"></a>技术点:</h2><h3 id=\"1-Nginx-agent的实现-数据分发\"><a href=\"#1-Nginx-agent的实现-数据分发\" class=\"headerlink\" title=\"1. Nginx agent的实现(数据分发)\"></a>1. Nginx agent的实现(数据分发)</h3><blockquote>\n<p>Nginx以性能著称</p>\n</blockquote>\n<p>需要对Nginx的处理流程&amp;通讯机制进行介入。</p>\n<p>通过Nginx一些api的方式进行网络通信监控。</p>\n<p>WAF回来以后做网络通信: 通过Nginx1.4.4＋的对外接口来获得回调。  </p>\n<h3 id=\"2-性能\"><a href=\"#2-性能\" class=\"headerlink\" title=\"2. 性能\"></a>2. 性能</h3><h3 id=\"3-负载均衡、容灾、防雪崩、流量穿透\"><a href=\"#3-负载均衡、容灾、防雪崩、流量穿透\" class=\"headerlink\" title=\"3. 负载均衡、容灾、防雪崩、流量穿透\"></a>3. 负载均衡、容灾、防雪崩、流量穿透</h3><h2 id=\"WAF运营\"><a href=\"#WAF运营\" class=\"headerlink\" title=\"WAF运营\"></a>WAF运营</h2><h3 id=\"1-业务web服务器配置\"><a href=\"#1-业务web服务器配置\" class=\"headerlink\" title=\"1. 业务web服务器配置\"></a>1. 业务web服务器配置</h3><h3 id=\"2-规则管理\"><a href=\"#2-规则管理\" class=\"headerlink\" title=\"2. 规则管理\"></a>2. 规则管理</h3><p>公司类、WAF、旁路分发。<br>编辑环境、测试环境、线上运营</p>\n<h3 id=\"3-大数据分析\"><a href=\"#3-大数据分析\" class=\"headerlink\" title=\"3. 大数据分析\"></a>3. 大数据分析</h3><p>解决: 误报、漏报</p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"多角度对抗WAF","date":"2015-07-17T13:35:03.000Z","_content":"\n> MayIKissYou\n> 完美世界高级安全工程师\n\nNginx-lua-waf Modsecurity\n\n\n> 安全狗 有很多bug\n\n<!--more-->\n> 很好的方法 模糊测试, 遍历%xx\n\n## WAF在哪里\n\n请求到最终请求转发，中间经过的多少设备\n\n## 如何绕过\n\n通过一些没有考虑到的特性\n\n### 数据库层绕过\n\n> 利用数据库特性\n\n#### 1. mysql、sqlserver、oracle、postgress\n\n```\n[1]select[2][3]from[4]\n\n// 1、2、4: a-z, A-Z,_,数字\n// 3: a-z, A-Z, _\n\n```\n\nhttp://zone.wooyun.org/content/13270\n\n\n### WEB服务器层绕过\n\n\n1. asp+IIS: %\n2. aspx+IIS: %u\n3. php+apache: 畸形的method\n4. java+tomcat\n\n> 模糊测试来模拟 and的a，如%uxxxnd : widechar，widechar iis可以处理，多个widechar会有可能转换为同一字符。\n\n### WAF层绕过\n\n> 留意WAF自身的点点滴滴，特有的功能可能就是你的绕过的利器。\n\n- 如果上传一个1G大小的流，WAF肯定不会扫描的，要保障大小。\n- post请求加了很多数据，并发的请求，会有部分请求绕过\n- 通过%26是&绕过了360安全卫士\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/wh_waf.md","raw":"title: 多角度对抗WAF\ndate: 2015-07-17 21:35:03\npermalink: 2015/07/17/wh_waf\ntags:\n- 2015乌云白帽大会\n- 安全\n- 白帽\n- 会议笔记\n\n---\n\n> MayIKissYou\n> 完美世界高级安全工程师\n\nNginx-lua-waf Modsecurity\n\n\n> 安全狗 有很多bug\n\n<!--more-->\n> 很好的方法 模糊测试, 遍历%xx\n\n## WAF在哪里\n\n请求到最终请求转发，中间经过的多少设备\n\n## 如何绕过\n\n通过一些没有考虑到的特性\n\n### 数据库层绕过\n\n> 利用数据库特性\n\n#### 1. mysql、sqlserver、oracle、postgress\n\n```\n[1]select[2][3]from[4]\n\n// 1、2、4: a-z, A-Z,_,数字\n// 3: a-z, A-Z, _\n\n```\n\nhttp://zone.wooyun.org/content/13270\n\n\n### WEB服务器层绕过\n\n\n1. asp+IIS: %\n2. aspx+IIS: %u\n3. php+apache: 畸形的method\n4. java+tomcat\n\n> 模糊测试来模拟 and的a，如%uxxxnd : widechar，widechar iis可以处理，多个widechar会有可能转换为同一字符。\n\n### WAF层绕过\n\n> 留意WAF自身的点点滴滴，特有的功能可能就是你的绕过的利器。\n\n- 如果上传一个1G大小的流，WAF肯定不会扫描的，要保障大小。\n- post请求加了很多数据，并发的请求，会有部分请求绕过\n- 通过%26是&绕过了360安全卫士\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2015/07/17/wh_waf","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66jv004f95buekgyhfv8","content":"<blockquote>\n<p>MayIKissYou<br>完美世界高级安全工程师</p>\n</blockquote>\n<p>Nginx-lua-waf Modsecurity</p>\n<blockquote>\n<p>安全狗 有很多bug</p>\n</blockquote>\n<a id=\"more\"></a>\n<blockquote>\n<p>很好的方法 模糊测试, 遍历%xx</p>\n</blockquote>\n<h2 id=\"WAF在哪里\"><a href=\"#WAF在哪里\" class=\"headerlink\" title=\"WAF在哪里\"></a>WAF在哪里</h2><p>请求到最终请求转发，中间经过的多少设备</p>\n<h2 id=\"如何绕过\"><a href=\"#如何绕过\" class=\"headerlink\" title=\"如何绕过\"></a>如何绕过</h2><p>通过一些没有考虑到的特性</p>\n<h3 id=\"数据库层绕过\"><a href=\"#数据库层绕过\" class=\"headerlink\" title=\"数据库层绕过\"></a>数据库层绕过</h3><blockquote>\n<p>利用数据库特性</p>\n</blockquote>\n<h4 id=\"1-mysql、sqlserver、oracle、postgress\"><a href=\"#1-mysql、sqlserver、oracle、postgress\" class=\"headerlink\" title=\"1. mysql、sqlserver、oracle、postgress\"></a>1. mysql、sqlserver、oracle、postgress</h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"string\">1</span>]select[<span class=\"string\">2</span>][<span class=\"symbol\">3</span>]from[4]</div><div class=\"line\"></div><div class=\"line\">// 1、2、4: a-z, A-Z,_,数字</div><div class=\"line\">// 3: a-z, A-Z, _</div></pre></td></tr></table></figure>\n<p><a href=\"http://zone.wooyun.org/content/13270\" target=\"_blank\" rel=\"external\">http://zone.wooyun.org/content/13270</a></p>\n<h3 id=\"WEB服务器层绕过\"><a href=\"#WEB服务器层绕过\" class=\"headerlink\" title=\"WEB服务器层绕过\"></a>WEB服务器层绕过</h3><ol>\n<li>asp+IIS: %</li>\n<li>aspx+IIS: %u</li>\n<li>php+apache: 畸形的method</li>\n<li>java+tomcat</li>\n</ol>\n<blockquote>\n<p>模糊测试来模拟 and的a，如%uxxxnd : widechar，widechar iis可以处理，多个widechar会有可能转换为同一字符。</p>\n</blockquote>\n<h3 id=\"WAF层绕过\"><a href=\"#WAF层绕过\" class=\"headerlink\" title=\"WAF层绕过\"></a>WAF层绕过</h3><blockquote>\n<p>留意WAF自身的点点滴滴，特有的功能可能就是你的绕过的利器。</p>\n</blockquote>\n<ul>\n<li>如果上传一个1G大小的流，WAF肯定不会扫描的，要保障大小。</li>\n<li>post请求加了很多数据，并发的请求，会有部分请求绕过</li>\n<li>通过%26是&amp;绕过了360安全卫士</li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>MayIKissYou<br>完美世界高级安全工程师</p>\n</blockquote>\n<p>Nginx-lua-waf Modsecurity</p>\n<blockquote>\n<p>安全狗 有很多bug</p>\n</blockquote>","more":"<blockquote>\n<p>很好的方法 模糊测试, 遍历%xx</p>\n</blockquote>\n<h2 id=\"WAF在哪里\"><a href=\"#WAF在哪里\" class=\"headerlink\" title=\"WAF在哪里\"></a>WAF在哪里</h2><p>请求到最终请求转发，中间经过的多少设备</p>\n<h2 id=\"如何绕过\"><a href=\"#如何绕过\" class=\"headerlink\" title=\"如何绕过\"></a>如何绕过</h2><p>通过一些没有考虑到的特性</p>\n<h3 id=\"数据库层绕过\"><a href=\"#数据库层绕过\" class=\"headerlink\" title=\"数据库层绕过\"></a>数据库层绕过</h3><blockquote>\n<p>利用数据库特性</p>\n</blockquote>\n<h4 id=\"1-mysql、sqlserver、oracle、postgress\"><a href=\"#1-mysql、sqlserver、oracle、postgress\" class=\"headerlink\" title=\"1. mysql、sqlserver、oracle、postgress\"></a>1. mysql、sqlserver、oracle、postgress</h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"string\">1</span>]select[<span class=\"string\">2</span>][<span class=\"symbol\">3</span>]from[4]</div><div class=\"line\"></div><div class=\"line\">// 1、2、4: a-z, A-Z,_,数字</div><div class=\"line\">// 3: a-z, A-Z, _</div></pre></td></tr></table></figure>\n<p><a href=\"http://zone.wooyun.org/content/13270\">http://zone.wooyun.org/content/13270</a></p>\n<h3 id=\"WEB服务器层绕过\"><a href=\"#WEB服务器层绕过\" class=\"headerlink\" title=\"WEB服务器层绕过\"></a>WEB服务器层绕过</h3><ol>\n<li>asp+IIS: %</li>\n<li>aspx+IIS: %u</li>\n<li>php+apache: 畸形的method</li>\n<li>java+tomcat</li>\n</ol>\n<blockquote>\n<p>模糊测试来模拟 and的a，如%uxxxnd : widechar，widechar iis可以处理，多个widechar会有可能转换为同一字符。</p>\n</blockquote>\n<h3 id=\"WAF层绕过\"><a href=\"#WAF层绕过\" class=\"headerlink\" title=\"WAF层绕过\"></a>WAF层绕过</h3><blockquote>\n<p>留意WAF自身的点点滴滴，特有的功能可能就是你的绕过的利器。</p>\n</blockquote>\n<ul>\n<li>如果上传一个1G大小的流，WAF肯定不会扫描的，要保障大小。</li>\n<li>post请求加了很多数据，并发的请求，会有部分请求绕过</li>\n<li>通过%26是&amp;绕过了360安全卫士</li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"从案件看国内DDOS现状","date":"2015-07-17T13:35:03.000Z","_content":"\n> 童瀛，6年刑侦(5年网警)\n> 江苏网络案件\n\n## 网络犯罪克星－网警\n\n> 监督&管理&侦查\n\n## 从案件看D攻击发展\n\n> 从分布来看中国最屌\n\n1. UDP-FLOOD: 40.98%\n2. SYN-FLOOD\n3. NTP-FLOOD\n\n<!--more-->\n\n### D攻击发展趋势\n\n1. 98: 技术炫耀\n2. 03: 黑吃黑: 私服发布站\n3. 08: 统一市场: 几波人，大量资源，带宽\n4. 10: 全面蔓延: 黑色行业(性药、p2p信贷、色情)\n\n## D攻击的自我防范\n\n#### 2014.11 江苏多家网吧D攻击:\n\n收到短信勒索-> 晚上就受到攻击。\n\n破解思路：换IP又被攻击，可能有人在网吧通报。\n\n#### 2014.3 2015苏州蜗牛D攻击:\n\n> 日志的重要性\n\n没有敲诈短信，没有目的性\n\n破解思路: 通过日志找到攻击源\n\n#### 2009.5 六省网络无法进行域名解析&暴风域名解析被攻击\n\n破解思路：走访调查\n\n#### CF、LOL炸房:\n\n为了保持游戏战绩，DDOS一台服务器，让其他人掉线。\n\n攻击高考系统（小孩子），姐姐要高考，就去把高考系统搞瘫。\n\n## 如何应对D攻击\n\n> 没有无缘无故的爱，也没有无缘无故饿恨。\n\n1. 前端防御\n2. 云防护\n3. 前端+云防护\n\n> 自己的服务器，尽量的放在主干的服务器上\n\n> 最好的方法：报案\n\n#### 有管辖权的警方:\n\n目的地，行为地，结果地\n\n#### 立案条件:\n\n1. 违法所得：5000RMB\n2. 1w用户+瘫痪\n3. 20台+非法空寂\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/wh_wangjin_ddos.md","raw":"title: 从案件看国内DDOS现状\ndate: 2015-07-17 21:35:03\npermalink: 2015/07/17/wh_wangjin_ddos\ntags:\n- 2015乌云白帽大会\n- 安全\n- 白帽\n- 会议笔记\n\n---\n\n> 童瀛，6年刑侦(5年网警)\n> 江苏网络案件\n\n## 网络犯罪克星－网警\n\n> 监督&管理&侦查\n\n## 从案件看D攻击发展\n\n> 从分布来看中国最屌\n\n1. UDP-FLOOD: 40.98%\n2. SYN-FLOOD\n3. NTP-FLOOD\n\n<!--more-->\n\n### D攻击发展趋势\n\n1. 98: 技术炫耀\n2. 03: 黑吃黑: 私服发布站\n3. 08: 统一市场: 几波人，大量资源，带宽\n4. 10: 全面蔓延: 黑色行业(性药、p2p信贷、色情)\n\n## D攻击的自我防范\n\n#### 2014.11 江苏多家网吧D攻击:\n\n收到短信勒索-> 晚上就受到攻击。\n\n破解思路：换IP又被攻击，可能有人在网吧通报。\n\n#### 2014.3 2015苏州蜗牛D攻击:\n\n> 日志的重要性\n\n没有敲诈短信，没有目的性\n\n破解思路: 通过日志找到攻击源\n\n#### 2009.5 六省网络无法进行域名解析&暴风域名解析被攻击\n\n破解思路：走访调查\n\n#### CF、LOL炸房:\n\n为了保持游戏战绩，DDOS一台服务器，让其他人掉线。\n\n攻击高考系统（小孩子），姐姐要高考，就去把高考系统搞瘫。\n\n## 如何应对D攻击\n\n> 没有无缘无故的爱，也没有无缘无故饿恨。\n\n1. 前端防御\n2. 云防护\n3. 前端+云防护\n\n> 自己的服务器，尽量的放在主干的服务器上\n\n> 最好的方法：报案\n\n#### 有管辖权的警方:\n\n目的地，行为地，结果地\n\n#### 立案条件:\n\n1. 违法所得：5000RMB\n2. 1w用户+瘫痪\n3. 20台+非法空寂\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2015/07/17/wh_wangjin_ddos","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66jv004h95butg7zi90g","content":"<blockquote>\n<p>童瀛，6年刑侦(5年网警)<br>江苏网络案件</p>\n</blockquote>\n<h2 id=\"网络犯罪克星－网警\"><a href=\"#网络犯罪克星－网警\" class=\"headerlink\" title=\"网络犯罪克星－网警\"></a>网络犯罪克星－网警</h2><blockquote>\n<p>监督&amp;管理&amp;侦查</p>\n</blockquote>\n<h2 id=\"从案件看D攻击发展\"><a href=\"#从案件看D攻击发展\" class=\"headerlink\" title=\"从案件看D攻击发展\"></a>从案件看D攻击发展</h2><blockquote>\n<p>从分布来看中国最屌</p>\n</blockquote>\n<ol>\n<li>UDP-FLOOD: 40.98%</li>\n<li>SYN-FLOOD</li>\n<li>NTP-FLOOD</li>\n</ol>\n<a id=\"more\"></a>\n<h3 id=\"D攻击发展趋势\"><a href=\"#D攻击发展趋势\" class=\"headerlink\" title=\"D攻击发展趋势\"></a>D攻击发展趋势</h3><ol>\n<li>98: 技术炫耀</li>\n<li>03: 黑吃黑: 私服发布站</li>\n<li>08: 统一市场: 几波人，大量资源，带宽</li>\n<li>10: 全面蔓延: 黑色行业(性药、p2p信贷、色情)</li>\n</ol>\n<h2 id=\"D攻击的自我防范\"><a href=\"#D攻击的自我防范\" class=\"headerlink\" title=\"D攻击的自我防范\"></a>D攻击的自我防范</h2><h4 id=\"2014-11-江苏多家网吧D攻击\"><a href=\"#2014-11-江苏多家网吧D攻击\" class=\"headerlink\" title=\"2014.11 江苏多家网吧D攻击:\"></a>2014.11 江苏多家网吧D攻击:</h4><p>收到短信勒索-&gt; 晚上就受到攻击。</p>\n<p>破解思路：换IP又被攻击，可能有人在网吧通报。</p>\n<h4 id=\"2014-3-2015苏州蜗牛D攻击\"><a href=\"#2014-3-2015苏州蜗牛D攻击\" class=\"headerlink\" title=\"2014.3 2015苏州蜗牛D攻击:\"></a>2014.3 2015苏州蜗牛D攻击:</h4><blockquote>\n<p>日志的重要性</p>\n</blockquote>\n<p>没有敲诈短信，没有目的性</p>\n<p>破解思路: 通过日志找到攻击源</p>\n<h4 id=\"2009-5-六省网络无法进行域名解析-amp-暴风域名解析被攻击\"><a href=\"#2009-5-六省网络无法进行域名解析-amp-暴风域名解析被攻击\" class=\"headerlink\" title=\"2009.5 六省网络无法进行域名解析&amp;暴风域名解析被攻击\"></a>2009.5 六省网络无法进行域名解析&amp;暴风域名解析被攻击</h4><p>破解思路：走访调查</p>\n<h4 id=\"CF、LOL炸房\"><a href=\"#CF、LOL炸房\" class=\"headerlink\" title=\"CF、LOL炸房:\"></a>CF、LOL炸房:</h4><p>为了保持游戏战绩，DDOS一台服务器，让其他人掉线。</p>\n<p>攻击高考系统（小孩子），姐姐要高考，就去把高考系统搞瘫。</p>\n<h2 id=\"如何应对D攻击\"><a href=\"#如何应对D攻击\" class=\"headerlink\" title=\"如何应对D攻击\"></a>如何应对D攻击</h2><blockquote>\n<p>没有无缘无故的爱，也没有无缘无故饿恨。</p>\n</blockquote>\n<ol>\n<li>前端防御</li>\n<li>云防护</li>\n<li>前端+云防护</li>\n</ol>\n<blockquote>\n<p>自己的服务器，尽量的放在主干的服务器上</p>\n<p>最好的方法：报案</p>\n</blockquote>\n<h4 id=\"有管辖权的警方\"><a href=\"#有管辖权的警方\" class=\"headerlink\" title=\"有管辖权的警方:\"></a>有管辖权的警方:</h4><p>目的地，行为地，结果地</p>\n<h4 id=\"立案条件\"><a href=\"#立案条件\" class=\"headerlink\" title=\"立案条件:\"></a>立案条件:</h4><ol>\n<li>违法所得：5000RMB</li>\n<li>1w用户+瘫痪</li>\n<li>20台+非法空寂</li>\n</ol>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>童瀛，6年刑侦(5年网警)<br>江苏网络案件</p>\n</blockquote>\n<h2 id=\"网络犯罪克星－网警\"><a href=\"#网络犯罪克星－网警\" class=\"headerlink\" title=\"网络犯罪克星－网警\"></a>网络犯罪克星－网警</h2><blockquote>\n<p>监督&amp;管理&amp;侦查</p>\n</blockquote>\n<h2 id=\"从案件看D攻击发展\"><a href=\"#从案件看D攻击发展\" class=\"headerlink\" title=\"从案件看D攻击发展\"></a>从案件看D攻击发展</h2><blockquote>\n<p>从分布来看中国最屌</p>\n</blockquote>\n<ol>\n<li>UDP-FLOOD: 40.98%</li>\n<li>SYN-FLOOD</li>\n<li>NTP-FLOOD</li>\n</ol>","more":"<h3 id=\"D攻击发展趋势\"><a href=\"#D攻击发展趋势\" class=\"headerlink\" title=\"D攻击发展趋势\"></a>D攻击发展趋势</h3><ol>\n<li>98: 技术炫耀</li>\n<li>03: 黑吃黑: 私服发布站</li>\n<li>08: 统一市场: 几波人，大量资源，带宽</li>\n<li>10: 全面蔓延: 黑色行业(性药、p2p信贷、色情)</li>\n</ol>\n<h2 id=\"D攻击的自我防范\"><a href=\"#D攻击的自我防范\" class=\"headerlink\" title=\"D攻击的自我防范\"></a>D攻击的自我防范</h2><h4 id=\"2014-11-江苏多家网吧D攻击\"><a href=\"#2014-11-江苏多家网吧D攻击\" class=\"headerlink\" title=\"2014.11 江苏多家网吧D攻击:\"></a>2014.11 江苏多家网吧D攻击:</h4><p>收到短信勒索-&gt; 晚上就受到攻击。</p>\n<p>破解思路：换IP又被攻击，可能有人在网吧通报。</p>\n<h4 id=\"2014-3-2015苏州蜗牛D攻击\"><a href=\"#2014-3-2015苏州蜗牛D攻击\" class=\"headerlink\" title=\"2014.3 2015苏州蜗牛D攻击:\"></a>2014.3 2015苏州蜗牛D攻击:</h4><blockquote>\n<p>日志的重要性</p>\n</blockquote>\n<p>没有敲诈短信，没有目的性</p>\n<p>破解思路: 通过日志找到攻击源</p>\n<h4 id=\"2009-5-六省网络无法进行域名解析-amp-暴风域名解析被攻击\"><a href=\"#2009-5-六省网络无法进行域名解析-amp-暴风域名解析被攻击\" class=\"headerlink\" title=\"2009.5 六省网络无法进行域名解析&amp;暴风域名解析被攻击\"></a>2009.5 六省网络无法进行域名解析&amp;暴风域名解析被攻击</h4><p>破解思路：走访调查</p>\n<h4 id=\"CF、LOL炸房\"><a href=\"#CF、LOL炸房\" class=\"headerlink\" title=\"CF、LOL炸房:\"></a>CF、LOL炸房:</h4><p>为了保持游戏战绩，DDOS一台服务器，让其他人掉线。</p>\n<p>攻击高考系统（小孩子），姐姐要高考，就去把高考系统搞瘫。</p>\n<h2 id=\"如何应对D攻击\"><a href=\"#如何应对D攻击\" class=\"headerlink\" title=\"如何应对D攻击\"></a>如何应对D攻击</h2><blockquote>\n<p>没有无缘无故的爱，也没有无缘无故饿恨。</p>\n</blockquote>\n<ol>\n<li>前端防御</li>\n<li>云防护</li>\n<li>前端+云防护</li>\n</ol>\n<blockquote>\n<p>自己的服务器，尽量的放在主干的服务器上</p>\n<p>最好的方法：报案</p>\n</blockquote>\n<h4 id=\"有管辖权的警方\"><a href=\"#有管辖权的警方\" class=\"headerlink\" title=\"有管辖权的警方:\"></a>有管辖权的警方:</h4><p>目的地，行为地，结果地</p>\n<h4 id=\"立案条件\"><a href=\"#立案条件\" class=\"headerlink\" title=\"立案条件:\"></a>立案条件:</h4><ol>\n<li>违法所得：5000RMB</li>\n<li>1w用户+瘫痪</li>\n<li>20台+非法空寂</li>\n</ol>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"windows 下csipsimple 编译全解 带最新源码[非中间]","date":"2013-03-28T16:32:11.000Z","_content":"\n> 先上源码: [http://pan.baidu.com/share/link?shareid=352171&uk=859141184%3C/hide%3E](http://pan.baidu.com/share/link?shareid=352171&uk=859141184%3C/hide%3E)\n\n<!--more-->\n\n> 下载以后得到的rar文件:\n\n![](/img/w-csip-1.png)\n\n> 解压得到目录:\n\n![](/img/w-csip-2.png)\n\n> eclipse指定目录到这个文件夹，导入记得用这个格式:\n\n![](/img/w-csip-3.png)\n\n> 导入以后，基本上就可以了，有什么问题，请Clean或者Fix Project，基本上是没有问题的。\n\n![](/img/w-csip-4.png)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/windows-csipsimple.md","raw":"title: windows 下csipsimple 编译全解 带最新源码[非中间]\ndate: 2013-03-29 00:32:11\npermalink: 2013/03/29/windows-csipsimple\ntags:\n- csipsimple\n- voip\n- Android\n\n---\n\n> 先上源码: [http://pan.baidu.com/share/link?shareid=352171&uk=859141184%3C/hide%3E](http://pan.baidu.com/share/link?shareid=352171&uk=859141184%3C/hide%3E)\n\n<!--more-->\n\n> 下载以后得到的rar文件:\n\n![](/img/w-csip-1.png)\n\n> 解压得到目录:\n\n![](/img/w-csip-2.png)\n\n> eclipse指定目录到这个文件夹，导入记得用这个格式:\n\n![](/img/w-csip-3.png)\n\n> 导入以后，基本上就可以了，有什么问题，请Clean或者Fix Project，基本上是没有问题的。\n\n![](/img/w-csip-4.png)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2013/03/29/windows-csipsimple","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66jw004k95buc51abwzu","content":"<blockquote>\n<p>先上源码: <a href=\"http://pan.baidu.com/share/link?shareid=352171&amp;uk=859141184%3C/hide%3E\" target=\"_blank\" rel=\"external\">http://pan.baidu.com/share/link?shareid=352171&amp;uk=859141184%3C/hide%3E</a></p>\n</blockquote>\n<a id=\"more\"></a>\n<blockquote>\n<p>下载以后得到的rar文件:</p>\n</blockquote>\n<p><img src=\"/img/w-csip-1.png\" alt=\"\"></p>\n<blockquote>\n<p>解压得到目录:</p>\n</blockquote>\n<p><img src=\"/img/w-csip-2.png\" alt=\"\"></p>\n<blockquote>\n<p>eclipse指定目录到这个文件夹，导入记得用这个格式:</p>\n</blockquote>\n<p><img src=\"/img/w-csip-3.png\" alt=\"\"></p>\n<blockquote>\n<p>导入以后，基本上就可以了，有什么问题，请Clean或者Fix Project，基本上是没有问题的。</p>\n</blockquote>\n<p><img src=\"/img/w-csip-4.png\" alt=\"\"></p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>先上源码: <a href=\"http://pan.baidu.com/share/link?shareid=352171&amp;uk=859141184%3C/hide%3E\">http://pan.baidu.com/share/link?shareid=352171&amp;uk=859141184%3C/hide%3E</a></p>\n</blockquote>","more":"<blockquote>\n<p>下载以后得到的rar文件:</p>\n</blockquote>\n<p><img src=\"/img/w-csip-1.png\" alt=\"\"></p>\n<blockquote>\n<p>解压得到目录:</p>\n</blockquote>\n<p><img src=\"/img/w-csip-2.png\" alt=\"\"></p>\n<blockquote>\n<p>eclipse指定目录到这个文件夹，导入记得用这个格式:</p>\n</blockquote>\n<p><img src=\"/img/w-csip-3.png\" alt=\"\"></p>\n<blockquote>\n<p>导入以后，基本上就可以了，有什么问题，请Clean或者Fix Project，基本上是没有问题的。</p>\n</blockquote>\n<p><img src=\"/img/w-csip-4.png\" alt=\"\"></p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"TP-LINK WR720N v3 刷OpenWrt 完美翻墙","date":"2015-09-06T15:20:03.000Z","_content":"\n> 之前买了一台改过硬件的TP-Link WR841N-V7路由器，并且成功刷机OpenWrt也完成了翻墙，WR841N-V7的更多详情可以看[这里](http://blog.dreamtobe.cn/2015/09/05/TP-Link-WR841N-V7-OpenWrt-ShadowSocks/)，但是可能卖家焊接的有问题，导致老是听到滋滋滋高频率的赤耳声音，很不爽，因此无奈拿起之前的TL-WR720N V3，这台内存小，存储空间小的路由器，捣腾起来，没想到，踩了一天的坑，总算是完美翻墙。\n\n---\n\n本文不会再提到坑的过程，有些地方稍微点下，主要是步骤。\n\n---\n\n<!-- more -->\n\n## 刷完并完成挂载后\n\n![](/img/wr720n-1.png)\n\n## I. 选用固件\n\n- 没有刷过OpenWrt，选择这个: [openwrt-ar71xx-generic-tl-wr720n-v3-squashfs-factory.bin](http://downloads.openwrt.org/barrier_breaker/14.07/ar71xx/generic/openwrt-ar71xx-generic-tl-wr720n-v3-squashfs-factory.bin)\n\n- 已经刷过OpenWrt的选择这个: [openwrt-ar71xx-generic-tl-wr720n-v3-squashfs-sysupgrade.bin](http://downloads.openwrt.org/barrier_breaker/14.07/ar71xx/generic/openwrt-ar71xx-generic-tl-wr720n-v3-squashfs-sysupgrade.bin)\n\n## II. 刷入目标OpenWrt\n\n#### 没有刷过OpenWrt的路由器\n\n连接以后，登录路由器，在系统升级页面选择刷机包，选择不配置，确定升级，在升级过程不可断电。升级结束后，就刷好了。\n\n#### 刷过OpenWrt的路由器\n\n1. 通过`scp openwrt-ar71xx-generic-tl-wr720n-v3-squashfs-sysupgrade.bin root@192.168.2.1:/tmp`拷贝到路由器的`/tmp`目录\n2. 进入openwrt以后`mtd write /tmp/openwrt-ar71xx-generic-tl-wr720n-v3-squashfs-sysupgrade.bin firmware`刷入。\n3. 完成以后重启。`reboot`\n\n## III. 修改默认源为国内源\n\n> 替换为: http://mirrors.ustc.edu.cn/openwrt 这个源，速度飕飕的。\n> 最后几行是根据[ShadowSocks安装](http://openwrt-dist.sourceforge.net/)该官方文档添加的源，方便后面shadowsocks安装。\n\n#### 1). ssh连上openWrt\n#### 2). 修改`/etc/opkg.conf`文件内容为:\n\n```\ndest root /\ndest ram /tmip\nlists_dir ext /var/opkg-lists\noption overlay_root /overlay\nsrc/gz barrier_breaker_base http://mirrors.ustc.edu.cn/openwrt/barrier_breaker/14.07/ar71xx/generic/packages/base\nsrc/gz barrier_breaker_luci http://mirrors.ustc.edu.cn/openwrt/barrier_breaker/14.07/ar71xx/generic/packages/luci\nsrc/gz barrier_breaker_packages http://mirrors.ustc.edu.cn/openwrt/barrier_breaker/14.07/ar71xx/generic/packages/packages\nsrc/gz barrier_breaker_routing http://mirrors.ustc.edu.cn/openwrt/barrier_breaker/14.07/ar71xx/generic/packages/routing\nsrc/gz barrier_breaker_telephony http://mirrors.ustc.edu.cn/openwrt/barrier_breaker/14.07/ar71xx/generic/packages/telephony\nsrc/gz barrier_breaker_management http://mirrors.ustc.edu.cn/openwrt/barrier_breaker/14.07/ar71xx/generic/packages/management\nsrc/gz barrier_breaker_oldpackages http://mirrors.ustc.edu.cn/openwrt/barrier_breaker/14.07/ar71xx/generic/packages/oldpackages\n\n#shadowsocks\nsrc/gz openwrt_dist http://openwrt-dist.sourceforge.net/releases/ar71xx/packages\nsrc/gz openwrt_dist_luci http://openwrt-dist.sourceforge.net/releases/luci/packages\n```\n\n## IV. 挂载u盘(参考[加菲猫的博客](http://coffeecat.info/?p=175)进行调整，优化)\n\n#### 1). 安装包\n\n```\nopkg update\nopkg install kmod-usb-ohci kmod-usb2 kmod-fs-ext4 kmod-usb-storage block-mount \tkmod-nls-base kmod-nls-cp437 kmod-ipt-nat-extra iptables-mod-nat-extra\n```\n\nps: 安装过程中会提示: `kmod: failed to insert /lib/modules/…`的错误，不要管，回头重启就好了。\n\n#### 2). 现在关闭路由器\n\n运行 `df`，会发现rootfs只剩下40k左右。\n\n#### 3). 准备\n\n1. 格式化准备好的u盘为`ext4`，并插入路由器的usb口。\n2. 将路由器模式开关调为3g，开启路由器。\n3. 等到路由器灯不闪了，ssh登录路由器。\n\n#### 4). 挂载操作\n\n1. 运行`ls /dev/sda*`，如果显示`/dev/sda /dev/sda1 ...`，说明u盘已经认出来了。否则拔出来格式化下。\n2. 接着运行\n\n```\nblock detect > /etc/config/fstab\nvim /etc/config/fstab\n```\n\n修改内容为(uuid不要改动)\n\n```\nconfig 'global'\n        option  anon_swap       '0'\n        option  anon_mount      '0'\n        option  auto_swap       '1'\n        option  auto_mount      '1'\n        option  delay_root      '5'\n        option  check_fs        '0'\n\nconfig 'mount'\n        option  target  '/overlay'\n        option  uuid    '4a639f83-8137-f649-0f2c-79d66189a4ca'\n        option  fstype  ext4\n        option  options rw,sync\n        option  enabled '1'\n        option  enabled_fsck 0\n\nconfig 'swap'\n        option  device  '/dev/sda2'\n        option  enabled '1'\n```\n\n接着把4M文件系统中的文件拷贝到u盘\n\n> 这么做附带是，能够从u盘重启失败，把u盘拔出来，还是可以通过路由器4M闪存进入系统操作\n\n```\nmkdir /mnt/sda1\nmount /dev/sda1 /mnt/sda1\nmkdir -p /tmp/cproot\nmount --bind / /tmp/cproot/\ntar -C /tmp/cproot/ -cvf - . | tar -C /mnt/sda1 -xf -\numount /dev/sda1\numount /tmp/cproot\necho option force_space >> /etc/opkg.conf\n```\n\n重启路由器\n\n#### 5). 挂载最后的配置\n\n1. 通过网页输入路由器ip进入luci\n2. 选择system->mount point，可以看到rootfs已经变为U盘的大小\n3. 最后的swap那边，勾选enable\n4. 在Mount points，找到/dev/sda1那行，点击删除\n5. 在Mount points后面点击添加\n6. 选择/dev/sda1，文件系统选择ext4，这时候会出来一个选项，设置为rootfs，选中它，再选中启用\n7. 保存并应用\n\n#### 6). 挂载最终效果\n\n![](/img/wr720n-4.png)\n\n## V. 安装chinadns和shadowscks\n\n> 参考 [ShadowSocks安装](http://openwrt-dist.sourceforge.net/)\n\n#### 1). 安装ipset\n\n```\nopkg update\nopkg install ipset\n```\n\nps: 安装过程中如果提示`kmod:failed to insert /lib/modules/...`的错误不用管他。\n\n好了以后，重启路由器。\n\n#### 2). ssh登录路由器，安装软件\n\n```\nopkg update\nopkg install libpolarssl\nopkg install resolveip\nopkg install luci-i18n-chinese\nopkg install ChinaDNS\nopkg install luci-app-chinadns\nopkg install shadowsocks-libev-spec\nopkg install luci-app-shadowsocks-spec\n```\n\n#### 3). 通过路由器ip登录 luci，可以将luci修改为中文\n\n选用system -> system -> language 选择中文\n重启路由器\n\n## VI. 配置shadowsocks和chinadns\n\n#### 1). 通过路由器ip访问luci\n\n#### 2). 配置ChinaDNS\n\n![](/img/wr720n-2.png)\n\n进入 服务->ChinaDNS 修改上游服务器为:\n\n```\n223.6.6.6,123.125.81.6,114.114.115.115,114.114.114.114,8.8.4.4,127.0.0.1:5151\n```\n\n#### 3). 配置Shadowsocks\n\n![](/img/wr720n-5.png)\n\n1. 进入 服务->ShadowSocks 配置好全局配置，UDP转发 选择勾选。\n2. UDP本地端口保证与ChinaDNS中 上游服务器 中设置的本地的端口一样: 5151。\n\n#### 4). DHCP/DNS设置\n\n> 4个是为了保证稳定性，否则经常会出现解析失败导致网页无法打开，\n\n网络->DHCP/DNS设置->基本设置->DNS转发设置为:\n\n\n![](/img/wr720n-3.png)\n\n> 这里确实是#号\n\n```\n127.0.0.1#5353\n127.0.0.1#5353\n127.0.0.1#5353\n127.0.0.1#5353\n```\n\n基本设置->HOST和解析文件\n\n![](/img/wr720n-6.png)\n\n1. 忽略解析文件 打勾\n2. 忽略HOSTS文件 打勾\n\n#### 5). 更新ChinaDNS过滤ip\n\n> `/etc/chinadns_chnroute.txt` 替换为 服务->ChinaDNS中的 国内路由表 地址\n\n```\nopkg update\nopkg install libcurl curl\ncurl 'http://ftp.apnic.net/apnic/stats/apnic/delegated-apnic-latest' | grep ipv4 | grep CN | awk -F\\| '{ printf(\"%s/%d\\n\", $4, 32-log($5)/log(2)) }' > /etc/chinadns_chnroute.txt\n```\n\n> 计划，每天凌晨4点更新下\n\n```\n* 4 * * * curl 'http://ftp.apnic.net/apnic/stats/apnic/delegated-apnic-latest' | grep ipv4 | grep CN | awk -F\\| '{ printf(\"%s/%d\\n\", $4, 32-log($5)/log(2)) }' > /etc/chinadns_chnroute.txt\n```\n\n---\n\n- [国内源](http://mirrors.ustc.edu.cn/openwrt/openwrt/barrier_breaker/)\n- [720N 4M-8M固件，含NAS、3G、Printer，支持3070和8187网卡[20120914更新]](http://www.right.com.cn/forum/thread-91571-1-1.html)\n- [wr720n原厂_4M_编程器_固件，要的拿走](http://www.right.com.cn/forum/forum.php?mod=viewthread&tid=102354&highlight=wr720n)\n- [TP-LINK TL-WR720N V3 OpenWrt 固件下载](http://blog.nanpuyue.com/2012/011.html)\n- [【U-Boot】U-Boot 刷机方法大全](http://www.right.com.cn/forum/thread-154561-1-1.html)\n- [Flash 由4M改8M/16M, u-boot不锁死可刷写, openwrt源码的修改 ](http://blog.chinaunix.net/uid-27194309-id-3407524.html)\n- [TP-Link wr720n Openwrt 科学上网改造，使用ChinaDNS + Shadowsocks 攻略](http://coffeecat.info/?p=175)\n- [解决OpenWRT Opkg Update Bad Address 问题](https://lostman.org/openwrt-opkg-update-bad-address/)\n- [ShadowSocks安装](http://openwrt-dist.sourceforge.net/)\n- [Where to get packages](http://wiki.openwrt.org/doc/packages)\n- [南浦月 TP-LINK TL-WR720N V3 OpenWrt 固件下载](http://blog.nanpuyue.com/2012/011.html)\n- [Lenovo-Y1_RY-1S-firmware](http://downloads.openwrt.org.cn/PandoraBox/Lenovo-Y1_RY-1S/firmware/)\n\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/wr720n-v3-openwrt-shadowsocks.md","raw":"title: TP-LINK WR720N v3 刷OpenWrt 完美翻墙\ndate: 2015-09-06 23:20:03\npermalink: 2015/09/06/wr720n-v3-openwrt-shadowsocks\ntags:\n- 翻墙\n- OpenWrt\n- ShadowSocks\n- WR720N\n\n---\n\n> 之前买了一台改过硬件的TP-Link WR841N-V7路由器，并且成功刷机OpenWrt也完成了翻墙，WR841N-V7的更多详情可以看[这里](http://blog.dreamtobe.cn/2015/09/05/TP-Link-WR841N-V7-OpenWrt-ShadowSocks/)，但是可能卖家焊接的有问题，导致老是听到滋滋滋高频率的赤耳声音，很不爽，因此无奈拿起之前的TL-WR720N V3，这台内存小，存储空间小的路由器，捣腾起来，没想到，踩了一天的坑，总算是完美翻墙。\n\n---\n\n本文不会再提到坑的过程，有些地方稍微点下，主要是步骤。\n\n---\n\n<!-- more -->\n\n## 刷完并完成挂载后\n\n![](/img/wr720n-1.png)\n\n## I. 选用固件\n\n- 没有刷过OpenWrt，选择这个: [openwrt-ar71xx-generic-tl-wr720n-v3-squashfs-factory.bin](http://downloads.openwrt.org/barrier_breaker/14.07/ar71xx/generic/openwrt-ar71xx-generic-tl-wr720n-v3-squashfs-factory.bin)\n\n- 已经刷过OpenWrt的选择这个: [openwrt-ar71xx-generic-tl-wr720n-v3-squashfs-sysupgrade.bin](http://downloads.openwrt.org/barrier_breaker/14.07/ar71xx/generic/openwrt-ar71xx-generic-tl-wr720n-v3-squashfs-sysupgrade.bin)\n\n## II. 刷入目标OpenWrt\n\n#### 没有刷过OpenWrt的路由器\n\n连接以后，登录路由器，在系统升级页面选择刷机包，选择不配置，确定升级，在升级过程不可断电。升级结束后，就刷好了。\n\n#### 刷过OpenWrt的路由器\n\n1. 通过`scp openwrt-ar71xx-generic-tl-wr720n-v3-squashfs-sysupgrade.bin root@192.168.2.1:/tmp`拷贝到路由器的`/tmp`目录\n2. 进入openwrt以后`mtd write /tmp/openwrt-ar71xx-generic-tl-wr720n-v3-squashfs-sysupgrade.bin firmware`刷入。\n3. 完成以后重启。`reboot`\n\n## III. 修改默认源为国内源\n\n> 替换为: http://mirrors.ustc.edu.cn/openwrt 这个源，速度飕飕的。\n> 最后几行是根据[ShadowSocks安装](http://openwrt-dist.sourceforge.net/)该官方文档添加的源，方便后面shadowsocks安装。\n\n#### 1). ssh连上openWrt\n#### 2). 修改`/etc/opkg.conf`文件内容为:\n\n```\ndest root /\ndest ram /tmip\nlists_dir ext /var/opkg-lists\noption overlay_root /overlay\nsrc/gz barrier_breaker_base http://mirrors.ustc.edu.cn/openwrt/barrier_breaker/14.07/ar71xx/generic/packages/base\nsrc/gz barrier_breaker_luci http://mirrors.ustc.edu.cn/openwrt/barrier_breaker/14.07/ar71xx/generic/packages/luci\nsrc/gz barrier_breaker_packages http://mirrors.ustc.edu.cn/openwrt/barrier_breaker/14.07/ar71xx/generic/packages/packages\nsrc/gz barrier_breaker_routing http://mirrors.ustc.edu.cn/openwrt/barrier_breaker/14.07/ar71xx/generic/packages/routing\nsrc/gz barrier_breaker_telephony http://mirrors.ustc.edu.cn/openwrt/barrier_breaker/14.07/ar71xx/generic/packages/telephony\nsrc/gz barrier_breaker_management http://mirrors.ustc.edu.cn/openwrt/barrier_breaker/14.07/ar71xx/generic/packages/management\nsrc/gz barrier_breaker_oldpackages http://mirrors.ustc.edu.cn/openwrt/barrier_breaker/14.07/ar71xx/generic/packages/oldpackages\n\n#shadowsocks\nsrc/gz openwrt_dist http://openwrt-dist.sourceforge.net/releases/ar71xx/packages\nsrc/gz openwrt_dist_luci http://openwrt-dist.sourceforge.net/releases/luci/packages\n```\n\n## IV. 挂载u盘(参考[加菲猫的博客](http://coffeecat.info/?p=175)进行调整，优化)\n\n#### 1). 安装包\n\n```\nopkg update\nopkg install kmod-usb-ohci kmod-usb2 kmod-fs-ext4 kmod-usb-storage block-mount \tkmod-nls-base kmod-nls-cp437 kmod-ipt-nat-extra iptables-mod-nat-extra\n```\n\nps: 安装过程中会提示: `kmod: failed to insert /lib/modules/…`的错误，不要管，回头重启就好了。\n\n#### 2). 现在关闭路由器\n\n运行 `df`，会发现rootfs只剩下40k左右。\n\n#### 3). 准备\n\n1. 格式化准备好的u盘为`ext4`，并插入路由器的usb口。\n2. 将路由器模式开关调为3g，开启路由器。\n3. 等到路由器灯不闪了，ssh登录路由器。\n\n#### 4). 挂载操作\n\n1. 运行`ls /dev/sda*`，如果显示`/dev/sda /dev/sda1 ...`，说明u盘已经认出来了。否则拔出来格式化下。\n2. 接着运行\n\n```\nblock detect > /etc/config/fstab\nvim /etc/config/fstab\n```\n\n修改内容为(uuid不要改动)\n\n```\nconfig 'global'\n        option  anon_swap       '0'\n        option  anon_mount      '0'\n        option  auto_swap       '1'\n        option  auto_mount      '1'\n        option  delay_root      '5'\n        option  check_fs        '0'\n\nconfig 'mount'\n        option  target  '/overlay'\n        option  uuid    '4a639f83-8137-f649-0f2c-79d66189a4ca'\n        option  fstype  ext4\n        option  options rw,sync\n        option  enabled '1'\n        option  enabled_fsck 0\n\nconfig 'swap'\n        option  device  '/dev/sda2'\n        option  enabled '1'\n```\n\n接着把4M文件系统中的文件拷贝到u盘\n\n> 这么做附带是，能够从u盘重启失败，把u盘拔出来，还是可以通过路由器4M闪存进入系统操作\n\n```\nmkdir /mnt/sda1\nmount /dev/sda1 /mnt/sda1\nmkdir -p /tmp/cproot\nmount --bind / /tmp/cproot/\ntar -C /tmp/cproot/ -cvf - . | tar -C /mnt/sda1 -xf -\numount /dev/sda1\numount /tmp/cproot\necho option force_space >> /etc/opkg.conf\n```\n\n重启路由器\n\n#### 5). 挂载最后的配置\n\n1. 通过网页输入路由器ip进入luci\n2. 选择system->mount point，可以看到rootfs已经变为U盘的大小\n3. 最后的swap那边，勾选enable\n4. 在Mount points，找到/dev/sda1那行，点击删除\n5. 在Mount points后面点击添加\n6. 选择/dev/sda1，文件系统选择ext4，这时候会出来一个选项，设置为rootfs，选中它，再选中启用\n7. 保存并应用\n\n#### 6). 挂载最终效果\n\n![](/img/wr720n-4.png)\n\n## V. 安装chinadns和shadowscks\n\n> 参考 [ShadowSocks安装](http://openwrt-dist.sourceforge.net/)\n\n#### 1). 安装ipset\n\n```\nopkg update\nopkg install ipset\n```\n\nps: 安装过程中如果提示`kmod:failed to insert /lib/modules/...`的错误不用管他。\n\n好了以后，重启路由器。\n\n#### 2). ssh登录路由器，安装软件\n\n```\nopkg update\nopkg install libpolarssl\nopkg install resolveip\nopkg install luci-i18n-chinese\nopkg install ChinaDNS\nopkg install luci-app-chinadns\nopkg install shadowsocks-libev-spec\nopkg install luci-app-shadowsocks-spec\n```\n\n#### 3). 通过路由器ip登录 luci，可以将luci修改为中文\n\n选用system -> system -> language 选择中文\n重启路由器\n\n## VI. 配置shadowsocks和chinadns\n\n#### 1). 通过路由器ip访问luci\n\n#### 2). 配置ChinaDNS\n\n![](/img/wr720n-2.png)\n\n进入 服务->ChinaDNS 修改上游服务器为:\n\n```\n223.6.6.6,123.125.81.6,114.114.115.115,114.114.114.114,8.8.4.4,127.0.0.1:5151\n```\n\n#### 3). 配置Shadowsocks\n\n![](/img/wr720n-5.png)\n\n1. 进入 服务->ShadowSocks 配置好全局配置，UDP转发 选择勾选。\n2. UDP本地端口保证与ChinaDNS中 上游服务器 中设置的本地的端口一样: 5151。\n\n#### 4). DHCP/DNS设置\n\n> 4个是为了保证稳定性，否则经常会出现解析失败导致网页无法打开，\n\n网络->DHCP/DNS设置->基本设置->DNS转发设置为:\n\n\n![](/img/wr720n-3.png)\n\n> 这里确实是#号\n\n```\n127.0.0.1#5353\n127.0.0.1#5353\n127.0.0.1#5353\n127.0.0.1#5353\n```\n\n基本设置->HOST和解析文件\n\n![](/img/wr720n-6.png)\n\n1. 忽略解析文件 打勾\n2. 忽略HOSTS文件 打勾\n\n#### 5). 更新ChinaDNS过滤ip\n\n> `/etc/chinadns_chnroute.txt` 替换为 服务->ChinaDNS中的 国内路由表 地址\n\n```\nopkg update\nopkg install libcurl curl\ncurl 'http://ftp.apnic.net/apnic/stats/apnic/delegated-apnic-latest' | grep ipv4 | grep CN | awk -F\\| '{ printf(\"%s/%d\\n\", $4, 32-log($5)/log(2)) }' > /etc/chinadns_chnroute.txt\n```\n\n> 计划，每天凌晨4点更新下\n\n```\n* 4 * * * curl 'http://ftp.apnic.net/apnic/stats/apnic/delegated-apnic-latest' | grep ipv4 | grep CN | awk -F\\| '{ printf(\"%s/%d\\n\", $4, 32-log($5)/log(2)) }' > /etc/chinadns_chnroute.txt\n```\n\n---\n\n- [国内源](http://mirrors.ustc.edu.cn/openwrt/openwrt/barrier_breaker/)\n- [720N 4M-8M固件，含NAS、3G、Printer，支持3070和8187网卡[20120914更新]](http://www.right.com.cn/forum/thread-91571-1-1.html)\n- [wr720n原厂_4M_编程器_固件，要的拿走](http://www.right.com.cn/forum/forum.php?mod=viewthread&tid=102354&highlight=wr720n)\n- [TP-LINK TL-WR720N V3 OpenWrt 固件下载](http://blog.nanpuyue.com/2012/011.html)\n- [【U-Boot】U-Boot 刷机方法大全](http://www.right.com.cn/forum/thread-154561-1-1.html)\n- [Flash 由4M改8M/16M, u-boot不锁死可刷写, openwrt源码的修改 ](http://blog.chinaunix.net/uid-27194309-id-3407524.html)\n- [TP-Link wr720n Openwrt 科学上网改造，使用ChinaDNS + Shadowsocks 攻略](http://coffeecat.info/?p=175)\n- [解决OpenWRT Opkg Update Bad Address 问题](https://lostman.org/openwrt-opkg-update-bad-address/)\n- [ShadowSocks安装](http://openwrt-dist.sourceforge.net/)\n- [Where to get packages](http://wiki.openwrt.org/doc/packages)\n- [南浦月 TP-LINK TL-WR720N V3 OpenWrt 固件下载](http://blog.nanpuyue.com/2012/011.html)\n- [Lenovo-Y1_RY-1S-firmware](http://downloads.openwrt.org.cn/PandoraBox/Lenovo-Y1_RY-1S/firmware/)\n\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2015/09/06/wr720n-v3-openwrt-shadowsocks","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66jw004l95bu8dbhvwie","content":"<blockquote>\n<p>之前买了一台改过硬件的TP-Link WR841N-V7路由器，并且成功刷机OpenWrt也完成了翻墙，WR841N-V7的更多详情可以看<a href=\"http://blog.dreamtobe.cn/2015/09/05/TP-Link-WR841N-V7-OpenWrt-ShadowSocks/\">这里</a>，但是可能卖家焊接的有问题，导致老是听到滋滋滋高频率的赤耳声音，很不爽，因此无奈拿起之前的TL-WR720N V3，这台内存小，存储空间小的路由器，捣腾起来，没想到，踩了一天的坑，总算是完美翻墙。</p>\n</blockquote>\n<hr>\n<p>本文不会再提到坑的过程，有些地方稍微点下，主要是步骤。</p>\n<hr>\n<a id=\"more\"></a>\n<h2 id=\"刷完并完成挂载后\"><a href=\"#刷完并完成挂载后\" class=\"headerlink\" title=\"刷完并完成挂载后\"></a>刷完并完成挂载后</h2><p><img src=\"/img/wr720n-1.png\" alt=\"\"></p>\n<h2 id=\"I-选用固件\"><a href=\"#I-选用固件\" class=\"headerlink\" title=\"I. 选用固件\"></a>I. 选用固件</h2><ul>\n<li><p>没有刷过OpenWrt，选择这个: <a href=\"http://downloads.openwrt.org/barrier_breaker/14.07/ar71xx/generic/openwrt-ar71xx-generic-tl-wr720n-v3-squashfs-factory.bin\" target=\"_blank\" rel=\"external\">openwrt-ar71xx-generic-tl-wr720n-v3-squashfs-factory.bin</a></p>\n</li>\n<li><p>已经刷过OpenWrt的选择这个: <a href=\"http://downloads.openwrt.org/barrier_breaker/14.07/ar71xx/generic/openwrt-ar71xx-generic-tl-wr720n-v3-squashfs-sysupgrade.bin\" target=\"_blank\" rel=\"external\">openwrt-ar71xx-generic-tl-wr720n-v3-squashfs-sysupgrade.bin</a></p>\n</li>\n</ul>\n<h2 id=\"II-刷入目标OpenWrt\"><a href=\"#II-刷入目标OpenWrt\" class=\"headerlink\" title=\"II. 刷入目标OpenWrt\"></a>II. 刷入目标OpenWrt</h2><h4 id=\"没有刷过OpenWrt的路由器\"><a href=\"#没有刷过OpenWrt的路由器\" class=\"headerlink\" title=\"没有刷过OpenWrt的路由器\"></a>没有刷过OpenWrt的路由器</h4><p>连接以后，登录路由器，在系统升级页面选择刷机包，选择不配置，确定升级，在升级过程不可断电。升级结束后，就刷好了。</p>\n<h4 id=\"刷过OpenWrt的路由器\"><a href=\"#刷过OpenWrt的路由器\" class=\"headerlink\" title=\"刷过OpenWrt的路由器\"></a>刷过OpenWrt的路由器</h4><ol>\n<li>通过<code>scp openwrt-ar71xx-generic-tl-wr720n-v3-squashfs-sysupgrade.bin root@192.168.2.1:/tmp</code>拷贝到路由器的<code>/tmp</code>目录</li>\n<li>进入openwrt以后<code>mtd write /tmp/openwrt-ar71xx-generic-tl-wr720n-v3-squashfs-sysupgrade.bin firmware</code>刷入。</li>\n<li>完成以后重启。<code>reboot</code></li>\n</ol>\n<h2 id=\"III-修改默认源为国内源\"><a href=\"#III-修改默认源为国内源\" class=\"headerlink\" title=\"III. 修改默认源为国内源\"></a>III. 修改默认源为国内源</h2><blockquote>\n<p>替换为: <a href=\"http://mirrors.ustc.edu.cn/openwrt\" target=\"_blank\" rel=\"external\">http://mirrors.ustc.edu.cn/openwrt</a> 这个源，速度飕飕的。<br>最后几行是根据<a href=\"http://openwrt-dist.sourceforge.net/\" target=\"_blank\" rel=\"external\">ShadowSocks安装</a>该官方文档添加的源，方便后面shadowsocks安装。</p>\n</blockquote>\n<h4 id=\"1-ssh连上openWrt\"><a href=\"#1-ssh连上openWrt\" class=\"headerlink\" title=\"1). ssh连上openWrt\"></a>1). ssh连上openWrt</h4><h4 id=\"2-修改-etc-opkg-conf文件内容为\"><a href=\"#2-修改-etc-opkg-conf文件内容为\" class=\"headerlink\" title=\"2). 修改/etc/opkg.conf文件内容为:\"></a>2). 修改<code>/etc/opkg.conf</code>文件内容为:</h4><figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">dest root /</div><div class=\"line\">dest ram /tmip</div><div class=\"line\">lists_dir ext /var/opkg-lists</div><div class=\"line\">option overlay_root /overlay</div><div class=\"line\">src/gz barrier_breaker_base <span class=\"symbol\">http:</span>/<span class=\"regexp\">/mirrors.ustc.edu.cn/openwrt</span><span class=\"regexp\">/barrier_breaker/</span><span class=\"number\">14.07</span>/ar71xx/generic/packages/base</div><div class=\"line\">src/gz barrier_breaker_luci <span class=\"symbol\">http:</span>/<span class=\"regexp\">/mirrors.ustc.edu.cn/openwrt</span><span class=\"regexp\">/barrier_breaker/</span><span class=\"number\">14.07</span>/ar71xx/generic/packages/luci</div><div class=\"line\">src/gz barrier_breaker_packages <span class=\"symbol\">http:</span>/<span class=\"regexp\">/mirrors.ustc.edu.cn/openwrt</span><span class=\"regexp\">/barrier_breaker/</span><span class=\"number\">14.07</span>/ar71xx/generic/packages/packages</div><div class=\"line\">src/gz barrier_breaker_routing <span class=\"symbol\">http:</span>/<span class=\"regexp\">/mirrors.ustc.edu.cn/openwrt</span><span class=\"regexp\">/barrier_breaker/</span><span class=\"number\">14.07</span>/ar71xx/generic/packages/routing</div><div class=\"line\">src/gz barrier_breaker_telephony <span class=\"symbol\">http:</span>/<span class=\"regexp\">/mirrors.ustc.edu.cn/openwrt</span><span class=\"regexp\">/barrier_breaker/</span><span class=\"number\">14.07</span>/ar71xx/generic/packages/telephony</div><div class=\"line\">src/gz barrier_breaker_management <span class=\"symbol\">http:</span>/<span class=\"regexp\">/mirrors.ustc.edu.cn/openwrt</span><span class=\"regexp\">/barrier_breaker/</span><span class=\"number\">14.07</span>/ar71xx/generic/packages/management</div><div class=\"line\">src/gz barrier_breaker_oldpackages <span class=\"symbol\">http:</span>/<span class=\"regexp\">/mirrors.ustc.edu.cn/openwrt</span><span class=\"regexp\">/barrier_breaker/</span><span class=\"number\">14.07</span>/ar71xx/generic/packages/oldpackages</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#shadowsocks</span></div><div class=\"line\">src/gz openwrt_dist <span class=\"symbol\">http:</span>/<span class=\"regexp\">/openwrt-dist.sourceforge.net/releases</span><span class=\"regexp\">/ar71xx/packages</span></div><div class=\"line\">src/gz openwrt_dist_luci <span class=\"symbol\">http:</span>/<span class=\"regexp\">/openwrt-dist.sourceforge.net/releases</span><span class=\"regexp\">/luci/packages</span></div></pre></td></tr></table></figure>\n<h2 id=\"IV-挂载u盘-参考加菲猫的博客进行调整，优化\"><a href=\"#IV-挂载u盘-参考加菲猫的博客进行调整，优化\" class=\"headerlink\" title=\"IV. 挂载u盘(参考加菲猫的博客进行调整，优化)\"></a>IV. 挂载u盘(参考<a href=\"http://coffeecat.info/?p=175\" target=\"_blank\" rel=\"external\">加菲猫的博客</a>进行调整，优化)</h2><h4 id=\"1-安装包\"><a href=\"#1-安装包\" class=\"headerlink\" title=\"1). 安装包\"></a>1). 安装包</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">opkg <span class=\"keyword\">update</span></div><div class=\"line\">opkg <span class=\"keyword\">install</span> kmod-usb-ohci kmod-usb2 kmod-fs-ext4 kmod-usb-<span class=\"keyword\">storage</span> <span class=\"keyword\">block</span>-<span class=\"keyword\">mount</span> \tkmod-nls-base kmod-nls-cp437 kmod-ipt-nat-extra iptables-<span class=\"keyword\">mod</span>-nat-extra</div></pre></td></tr></table></figure>\n<p>ps: 安装过程中会提示: <code>kmod: failed to insert /lib/modules/…</code>的错误，不要管，回头重启就好了。</p>\n<h4 id=\"2-现在关闭路由器\"><a href=\"#2-现在关闭路由器\" class=\"headerlink\" title=\"2). 现在关闭路由器\"></a>2). 现在关闭路由器</h4><p>运行 <code>df</code>，会发现rootfs只剩下40k左右。</p>\n<h4 id=\"3-准备\"><a href=\"#3-准备\" class=\"headerlink\" title=\"3). 准备\"></a>3). 准备</h4><ol>\n<li>格式化准备好的u盘为<code>ext4</code>，并插入路由器的usb口。</li>\n<li>将路由器模式开关调为3g，开启路由器。</li>\n<li>等到路由器灯不闪了，ssh登录路由器。</li>\n</ol>\n<h4 id=\"4-挂载操作\"><a href=\"#4-挂载操作\" class=\"headerlink\" title=\"4). 挂载操作\"></a>4). 挂载操作</h4><ol>\n<li>运行<code>ls /dev/sda*</code>，如果显示<code>/dev/sda /dev/sda1 ...</code>，说明u盘已经认出来了。否则拔出来格式化下。</li>\n<li>接着运行</li>\n</ol>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">block detect &gt; <span class=\"regexp\">/etc/config</span><span class=\"regexp\">/fstab</span></div><div class=\"line\">vim /etc<span class=\"regexp\">/config/fstab</span></div></pre></td></tr></table></figure>\n<p>修改内容为(uuid不要改动)</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">config <span class=\"string\">'global'</span></div><div class=\"line\">        <span class=\"keyword\">option</span>  anon_swap       <span class=\"string\">'0'</span></div><div class=\"line\">        <span class=\"keyword\">option</span>  anon_mount      <span class=\"string\">'0'</span></div><div class=\"line\">        <span class=\"keyword\">option</span>  auto_swap       <span class=\"string\">'1'</span></div><div class=\"line\">        <span class=\"keyword\">option</span>  auto_mount      <span class=\"string\">'1'</span></div><div class=\"line\">        <span class=\"keyword\">option</span>  delay_root      <span class=\"string\">'5'</span></div><div class=\"line\">        <span class=\"keyword\">option</span>  check_fs        <span class=\"string\">'0'</span></div><div class=\"line\"></div><div class=\"line\">config <span class=\"string\">'mount'</span></div><div class=\"line\">        <span class=\"keyword\">option</span>  target  <span class=\"string\">'/overlay'</span></div><div class=\"line\">        <span class=\"keyword\">option</span>  uuid    <span class=\"string\">'4a639f83-8137-f649-0f2c-79d66189a4ca'</span></div><div class=\"line\">        <span class=\"keyword\">option</span>  fstype  ext4</div><div class=\"line\">        <span class=\"keyword\">option</span>  <span class=\"keyword\">options</span> rw,sync</div><div class=\"line\">        <span class=\"keyword\">option</span>  enabled <span class=\"string\">'1'</span></div><div class=\"line\">        <span class=\"keyword\">option</span>  enabled_fsck <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\">config <span class=\"string\">'swap'</span></div><div class=\"line\">        <span class=\"keyword\">option</span>  device  <span class=\"string\">'/dev/sda2'</span></div><div class=\"line\">        <span class=\"keyword\">option</span>  enabled <span class=\"string\">'1'</span></div></pre></td></tr></table></figure>\n<p>接着把4M文件系统中的文件拷贝到u盘</p>\n<blockquote>\n<p>这么做附带是，能够从u盘重启失败，把u盘拔出来，还是可以通过路由器4M闪存进入系统操作</p>\n</blockquote>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir <span class=\"regexp\">/mnt/</span>sda1</div><div class=\"line\">mount <span class=\"regexp\">/dev/</span>sda1 <span class=\"regexp\">/mnt/</span>sda1</div><div class=\"line\">mkdir -p <span class=\"regexp\">/tmp/</span>cproot</div><div class=\"line\">mount --bind <span class=\"regexp\">/ /</span>tmp<span class=\"regexp\">/cproot/</span></div><div class=\"line\">tar -C <span class=\"regexp\">/tmp/</span>cproot<span class=\"regexp\">/ -cvf - . | tar -C /</span>mnt/sda1 -xf -</div><div class=\"line\">umount <span class=\"regexp\">/dev/</span>sda1</div><div class=\"line\">umount <span class=\"regexp\">/tmp/</span>cproot</div><div class=\"line\">echo option force_space &gt;&gt; <span class=\"regexp\">/etc/</span>opkg.conf</div></pre></td></tr></table></figure>\n<p>重启路由器</p>\n<h4 id=\"5-挂载最后的配置\"><a href=\"#5-挂载最后的配置\" class=\"headerlink\" title=\"5). 挂载最后的配置\"></a>5). 挂载最后的配置</h4><ol>\n<li>通过网页输入路由器ip进入luci</li>\n<li>选择system-&gt;mount point，可以看到rootfs已经变为U盘的大小</li>\n<li>最后的swap那边，勾选enable</li>\n<li>在Mount points，找到/dev/sda1那行，点击删除</li>\n<li>在Mount points后面点击添加</li>\n<li>选择/dev/sda1，文件系统选择ext4，这时候会出来一个选项，设置为rootfs，选中它，再选中启用</li>\n<li>保存并应用</li>\n</ol>\n<h4 id=\"6-挂载最终效果\"><a href=\"#6-挂载最终效果\" class=\"headerlink\" title=\"6). 挂载最终效果\"></a>6). 挂载最终效果</h4><p><img src=\"/img/wr720n-4.png\" alt=\"\"></p>\n<h2 id=\"V-安装chinadns和shadowscks\"><a href=\"#V-安装chinadns和shadowscks\" class=\"headerlink\" title=\"V. 安装chinadns和shadowscks\"></a>V. 安装chinadns和shadowscks</h2><blockquote>\n<p>参考 <a href=\"http://openwrt-dist.sourceforge.net/\" target=\"_blank\" rel=\"external\">ShadowSocks安装</a></p>\n</blockquote>\n<h4 id=\"1-安装ipset\"><a href=\"#1-安装ipset\" class=\"headerlink\" title=\"1). 安装ipset\"></a>1). 安装ipset</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">opkg <span class=\"keyword\">update</span></div><div class=\"line\">opkg <span class=\"keyword\">install</span> ipset</div></pre></td></tr></table></figure>\n<p>ps: 安装过程中如果提示<code>kmod:failed to insert /lib/modules/...</code>的错误不用管他。</p>\n<p>好了以后，重启路由器。</p>\n<h4 id=\"2-ssh登录路由器，安装软件\"><a href=\"#2-ssh登录路由器，安装软件\" class=\"headerlink\" title=\"2). ssh登录路由器，安装软件\"></a>2). ssh登录路由器，安装软件</h4><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">opkg update</div><div class=\"line\">opkg <span class=\"keyword\">install </span>libpolarssl</div><div class=\"line\">opkg <span class=\"keyword\">install </span>resolveip</div><div class=\"line\">opkg <span class=\"keyword\">install </span>luci-i18n-chinese</div><div class=\"line\">opkg <span class=\"keyword\">install </span>ChinaDNS</div><div class=\"line\">opkg <span class=\"keyword\">install </span>luci-app-chinadns</div><div class=\"line\">opkg <span class=\"keyword\">install </span><span class=\"keyword\">shadowsocks-libev-spec</span></div><div class=\"line\">opkg <span class=\"keyword\">install </span>luci-app-<span class=\"keyword\">shadowsocks-spec</span></div></pre></td></tr></table></figure>\n<h4 id=\"3-通过路由器ip登录-luci，可以将luci修改为中文\"><a href=\"#3-通过路由器ip登录-luci，可以将luci修改为中文\" class=\"headerlink\" title=\"3). 通过路由器ip登录 luci，可以将luci修改为中文\"></a>3). 通过路由器ip登录 luci，可以将luci修改为中文</h4><p>选用system -&gt; system -&gt; language 选择中文<br>重启路由器</p>\n<h2 id=\"VI-配置shadowsocks和chinadns\"><a href=\"#VI-配置shadowsocks和chinadns\" class=\"headerlink\" title=\"VI. 配置shadowsocks和chinadns\"></a>VI. 配置shadowsocks和chinadns</h2><h4 id=\"1-通过路由器ip访问luci\"><a href=\"#1-通过路由器ip访问luci\" class=\"headerlink\" title=\"1). 通过路由器ip访问luci\"></a>1). 通过路由器ip访问luci</h4><h4 id=\"2-配置ChinaDNS\"><a href=\"#2-配置ChinaDNS\" class=\"headerlink\" title=\"2). 配置ChinaDNS\"></a>2). 配置ChinaDNS</h4><p><img src=\"/img/wr720n-2.png\" alt=\"\"></p>\n<p>进入 服务-&gt;ChinaDNS 修改上游服务器为:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">223<span class=\"selector-class\">.6</span><span class=\"selector-class\">.6</span><span class=\"selector-class\">.6</span>,123<span class=\"selector-class\">.125</span><span class=\"selector-class\">.81</span><span class=\"selector-class\">.6</span>,114<span class=\"selector-class\">.114</span><span class=\"selector-class\">.115</span><span class=\"selector-class\">.115</span>,114<span class=\"selector-class\">.114</span><span class=\"selector-class\">.114</span><span class=\"selector-class\">.114</span>,8<span class=\"selector-class\">.8</span><span class=\"selector-class\">.4</span><span class=\"selector-class\">.4</span>,127<span class=\"selector-class\">.0</span><span class=\"selector-class\">.0</span><span class=\"selector-class\">.1</span><span class=\"selector-pseudo\">:5151</span></div></pre></td></tr></table></figure>\n<h4 id=\"3-配置Shadowsocks\"><a href=\"#3-配置Shadowsocks\" class=\"headerlink\" title=\"3). 配置Shadowsocks\"></a>3). 配置Shadowsocks</h4><p><img src=\"/img/wr720n-5.png\" alt=\"\"></p>\n<ol>\n<li>进入 服务-&gt;ShadowSocks 配置好全局配置，UDP转发 选择勾选。</li>\n<li>UDP本地端口保证与ChinaDNS中 上游服务器 中设置的本地的端口一样: 5151。</li>\n</ol>\n<h4 id=\"4-DHCP-DNS设置\"><a href=\"#4-DHCP-DNS设置\" class=\"headerlink\" title=\"4). DHCP/DNS设置\"></a>4). DHCP/DNS设置</h4><blockquote>\n<p>4个是为了保证稳定性，否则经常会出现解析失败导致网页无法打开，</p>\n</blockquote>\n<p>网络-&gt;DHCP/DNS设置-&gt;基本设置-&gt;DNS转发设置为:</p>\n<p><img src=\"/img/wr720n-3.png\" alt=\"\"></p>\n<blockquote>\n<p>这里确实是#号</p>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">127<span class=\"selector-class\">.0</span><span class=\"selector-class\">.0</span><span class=\"selector-class\">.1</span><span class=\"selector-id\">#5353</span></div><div class=\"line\">127<span class=\"selector-class\">.0</span><span class=\"selector-class\">.0</span><span class=\"selector-class\">.1</span><span class=\"selector-id\">#5353</span></div><div class=\"line\">127<span class=\"selector-class\">.0</span><span class=\"selector-class\">.0</span><span class=\"selector-class\">.1</span><span class=\"selector-id\">#5353</span></div><div class=\"line\">127<span class=\"selector-class\">.0</span><span class=\"selector-class\">.0</span><span class=\"selector-class\">.1</span><span class=\"selector-id\">#5353</span></div></pre></td></tr></table></figure>\n<p>基本设置-&gt;HOST和解析文件</p>\n<p><img src=\"/img/wr720n-6.png\" alt=\"\"></p>\n<ol>\n<li>忽略解析文件 打勾</li>\n<li>忽略HOSTS文件 打勾</li>\n</ol>\n<h4 id=\"5-更新ChinaDNS过滤ip\"><a href=\"#5-更新ChinaDNS过滤ip\" class=\"headerlink\" title=\"5). 更新ChinaDNS过滤ip\"></a>5). 更新ChinaDNS过滤ip</h4><blockquote>\n<p><code>/etc/chinadns_chnroute.txt</code> 替换为 服务-&gt;ChinaDNS中的 国内路由表 地址</p>\n</blockquote>\n<figure class=\"highlight coq\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">opkg update</div><div class=\"line\">opkg install libcurl curl</div><div class=\"line\">curl 'http://ftp.apnic.net/apnic/stats/apnic/delegated-apnic-latest' | <span class=\"type\">grep</span> ipv4 | <span class=\"type\">grep</span> CN | <span class=\"type\">awk</span> -F\\| <span class=\"type\">'&#123; printf</span>(<span class=\"string\">\"%s/%d\\n\"</span>, $<span class=\"number\">4</span>, <span class=\"number\">32</span>-log($<span class=\"number\">5</span>)/log(<span class=\"number\">2</span>)) &#125;' &gt; /etc/chinadns_chnroute.txt</div></pre></td></tr></table></figure>\n<blockquote>\n<p>计划，每天凌晨4点更新下</p>\n</blockquote>\n<figure class=\"highlight coq\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">* <span class=\"number\">4</span> * * * curl 'http://ftp.apnic.net/apnic/stats/apnic/delegated-apnic-latest' | <span class=\"type\">grep</span> ipv4 | <span class=\"type\">grep</span> CN | <span class=\"type\">awk</span> -F\\| <span class=\"type\">'&#123; printf</span>(<span class=\"string\">\"%s/%d\\n\"</span>, $<span class=\"number\">4</span>, <span class=\"number\">32</span>-log($<span class=\"number\">5</span>)/log(<span class=\"number\">2</span>)) &#125;' &gt; /etc/chinadns_chnroute.txt</div></pre></td></tr></table></figure>\n<hr>\n<ul>\n<li><a href=\"http://mirrors.ustc.edu.cn/openwrt/openwrt/barrier_breaker/\" target=\"_blank\" rel=\"external\">国内源</a></li>\n<li><a href=\"http://www.right.com.cn/forum/thread-91571-1-1.html\" target=\"_blank\" rel=\"external\">720N 4M-8M固件，含NAS、3G、Printer，支持3070和8187网卡[20120914更新]</a></li>\n<li><a href=\"http://www.right.com.cn/forum/forum.php?mod=viewthread&amp;tid=102354&amp;highlight=wr720n\" target=\"_blank\" rel=\"external\">wr720n原厂<em>4M</em>编程器_固件，要的拿走</a></li>\n<li><a href=\"http://blog.nanpuyue.com/2012/011.html\" target=\"_blank\" rel=\"external\">TP-LINK TL-WR720N V3 OpenWrt 固件下载</a></li>\n<li><a href=\"http://www.right.com.cn/forum/thread-154561-1-1.html\" target=\"_blank\" rel=\"external\">【U-Boot】U-Boot 刷机方法大全</a></li>\n<li><a href=\"http://blog.chinaunix.net/uid-27194309-id-3407524.html\" target=\"_blank\" rel=\"external\">Flash 由4M改8M/16M, u-boot不锁死可刷写, openwrt源码的修改 </a></li>\n<li><a href=\"http://coffeecat.info/?p=175\" target=\"_blank\" rel=\"external\">TP-Link wr720n Openwrt 科学上网改造，使用ChinaDNS + Shadowsocks 攻略</a></li>\n<li><a href=\"https://lostman.org/openwrt-opkg-update-bad-address/\" target=\"_blank\" rel=\"external\">解决OpenWRT Opkg Update Bad Address 问题</a></li>\n<li><a href=\"http://openwrt-dist.sourceforge.net/\" target=\"_blank\" rel=\"external\">ShadowSocks安装</a></li>\n<li><a href=\"http://wiki.openwrt.org/doc/packages\" target=\"_blank\" rel=\"external\">Where to get packages</a></li>\n<li><a href=\"http://blog.nanpuyue.com/2012/011.html\" target=\"_blank\" rel=\"external\">南浦月 TP-LINK TL-WR720N V3 OpenWrt 固件下载</a></li>\n<li><a href=\"http://downloads.openwrt.org.cn/PandoraBox/Lenovo-Y1_RY-1S/firmware/\" target=\"_blank\" rel=\"external\">Lenovo-Y1_RY-1S-firmware</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>之前买了一台改过硬件的TP-Link WR841N-V7路由器，并且成功刷机OpenWrt也完成了翻墙，WR841N-V7的更多详情可以看<a href=\"http://blog.dreamtobe.cn/2015/09/05/TP-Link-WR841N-V7-OpenWrt-ShadowSocks/\">这里</a>，但是可能卖家焊接的有问题，导致老是听到滋滋滋高频率的赤耳声音，很不爽，因此无奈拿起之前的TL-WR720N V3，这台内存小，存储空间小的路由器，捣腾起来，没想到，踩了一天的坑，总算是完美翻墙。</p>\n</blockquote>\n<hr>\n<p>本文不会再提到坑的过程，有些地方稍微点下，主要是步骤。</p>\n<hr>","more":"<h2 id=\"刷完并完成挂载后\"><a href=\"#刷完并完成挂载后\" class=\"headerlink\" title=\"刷完并完成挂载后\"></a>刷完并完成挂载后</h2><p><img src=\"/img/wr720n-1.png\" alt=\"\"></p>\n<h2 id=\"I-选用固件\"><a href=\"#I-选用固件\" class=\"headerlink\" title=\"I. 选用固件\"></a>I. 选用固件</h2><ul>\n<li><p>没有刷过OpenWrt，选择这个: <a href=\"http://downloads.openwrt.org/barrier_breaker/14.07/ar71xx/generic/openwrt-ar71xx-generic-tl-wr720n-v3-squashfs-factory.bin\">openwrt-ar71xx-generic-tl-wr720n-v3-squashfs-factory.bin</a></p>\n</li>\n<li><p>已经刷过OpenWrt的选择这个: <a href=\"http://downloads.openwrt.org/barrier_breaker/14.07/ar71xx/generic/openwrt-ar71xx-generic-tl-wr720n-v3-squashfs-sysupgrade.bin\">openwrt-ar71xx-generic-tl-wr720n-v3-squashfs-sysupgrade.bin</a></p>\n</li>\n</ul>\n<h2 id=\"II-刷入目标OpenWrt\"><a href=\"#II-刷入目标OpenWrt\" class=\"headerlink\" title=\"II. 刷入目标OpenWrt\"></a>II. 刷入目标OpenWrt</h2><h4 id=\"没有刷过OpenWrt的路由器\"><a href=\"#没有刷过OpenWrt的路由器\" class=\"headerlink\" title=\"没有刷过OpenWrt的路由器\"></a>没有刷过OpenWrt的路由器</h4><p>连接以后，登录路由器，在系统升级页面选择刷机包，选择不配置，确定升级，在升级过程不可断电。升级结束后，就刷好了。</p>\n<h4 id=\"刷过OpenWrt的路由器\"><a href=\"#刷过OpenWrt的路由器\" class=\"headerlink\" title=\"刷过OpenWrt的路由器\"></a>刷过OpenWrt的路由器</h4><ol>\n<li>通过<code>scp openwrt-ar71xx-generic-tl-wr720n-v3-squashfs-sysupgrade.bin root@192.168.2.1:/tmp</code>拷贝到路由器的<code>/tmp</code>目录</li>\n<li>进入openwrt以后<code>mtd write /tmp/openwrt-ar71xx-generic-tl-wr720n-v3-squashfs-sysupgrade.bin firmware</code>刷入。</li>\n<li>完成以后重启。<code>reboot</code></li>\n</ol>\n<h2 id=\"III-修改默认源为国内源\"><a href=\"#III-修改默认源为国内源\" class=\"headerlink\" title=\"III. 修改默认源为国内源\"></a>III. 修改默认源为国内源</h2><blockquote>\n<p>替换为: <a href=\"http://mirrors.ustc.edu.cn/openwrt\">http://mirrors.ustc.edu.cn/openwrt</a> 这个源，速度飕飕的。<br>最后几行是根据<a href=\"http://openwrt-dist.sourceforge.net/\">ShadowSocks安装</a>该官方文档添加的源，方便后面shadowsocks安装。</p>\n</blockquote>\n<h4 id=\"1-ssh连上openWrt\"><a href=\"#1-ssh连上openWrt\" class=\"headerlink\" title=\"1). ssh连上openWrt\"></a>1). ssh连上openWrt</h4><h4 id=\"2-修改-etc-opkg-conf文件内容为\"><a href=\"#2-修改-etc-opkg-conf文件内容为\" class=\"headerlink\" title=\"2). 修改/etc/opkg.conf文件内容为:\"></a>2). 修改<code>/etc/opkg.conf</code>文件内容为:</h4><figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">dest root /</div><div class=\"line\">dest ram /tmip</div><div class=\"line\">lists_dir ext /var/opkg-lists</div><div class=\"line\">option overlay_root /overlay</div><div class=\"line\">src/gz barrier_breaker_base <span class=\"symbol\">http:</span>/<span class=\"regexp\">/mirrors.ustc.edu.cn/openwrt</span><span class=\"regexp\">/barrier_breaker/</span><span class=\"number\">14.07</span>/ar71xx/generic/packages/base</div><div class=\"line\">src/gz barrier_breaker_luci <span class=\"symbol\">http:</span>/<span class=\"regexp\">/mirrors.ustc.edu.cn/openwrt</span><span class=\"regexp\">/barrier_breaker/</span><span class=\"number\">14.07</span>/ar71xx/generic/packages/luci</div><div class=\"line\">src/gz barrier_breaker_packages <span class=\"symbol\">http:</span>/<span class=\"regexp\">/mirrors.ustc.edu.cn/openwrt</span><span class=\"regexp\">/barrier_breaker/</span><span class=\"number\">14.07</span>/ar71xx/generic/packages/packages</div><div class=\"line\">src/gz barrier_breaker_routing <span class=\"symbol\">http:</span>/<span class=\"regexp\">/mirrors.ustc.edu.cn/openwrt</span><span class=\"regexp\">/barrier_breaker/</span><span class=\"number\">14.07</span>/ar71xx/generic/packages/routing</div><div class=\"line\">src/gz barrier_breaker_telephony <span class=\"symbol\">http:</span>/<span class=\"regexp\">/mirrors.ustc.edu.cn/openwrt</span><span class=\"regexp\">/barrier_breaker/</span><span class=\"number\">14.07</span>/ar71xx/generic/packages/telephony</div><div class=\"line\">src/gz barrier_breaker_management <span class=\"symbol\">http:</span>/<span class=\"regexp\">/mirrors.ustc.edu.cn/openwrt</span><span class=\"regexp\">/barrier_breaker/</span><span class=\"number\">14.07</span>/ar71xx/generic/packages/management</div><div class=\"line\">src/gz barrier_breaker_oldpackages <span class=\"symbol\">http:</span>/<span class=\"regexp\">/mirrors.ustc.edu.cn/openwrt</span><span class=\"regexp\">/barrier_breaker/</span><span class=\"number\">14.07</span>/ar71xx/generic/packages/oldpackages</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#shadowsocks</span></div><div class=\"line\">src/gz openwrt_dist <span class=\"symbol\">http:</span>/<span class=\"regexp\">/openwrt-dist.sourceforge.net/releases</span><span class=\"regexp\">/ar71xx/packages</span></div><div class=\"line\">src/gz openwrt_dist_luci <span class=\"symbol\">http:</span>/<span class=\"regexp\">/openwrt-dist.sourceforge.net/releases</span><span class=\"regexp\">/luci/packages</span></div></pre></td></tr></table></figure>\n<h2 id=\"IV-挂载u盘-参考加菲猫的博客进行调整，优化\"><a href=\"#IV-挂载u盘-参考加菲猫的博客进行调整，优化\" class=\"headerlink\" title=\"IV. 挂载u盘(参考加菲猫的博客进行调整，优化)\"></a>IV. 挂载u盘(参考<a href=\"http://coffeecat.info/?p=175\">加菲猫的博客</a>进行调整，优化)</h2><h4 id=\"1-安装包\"><a href=\"#1-安装包\" class=\"headerlink\" title=\"1). 安装包\"></a>1). 安装包</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">opkg <span class=\"keyword\">update</span></div><div class=\"line\">opkg <span class=\"keyword\">install</span> kmod-usb-ohci kmod-usb2 kmod-fs-ext4 kmod-usb-<span class=\"keyword\">storage</span> <span class=\"keyword\">block</span>-<span class=\"keyword\">mount</span> \tkmod-nls-base kmod-nls-cp437 kmod-ipt-nat-extra iptables-<span class=\"keyword\">mod</span>-nat-extra</div></pre></td></tr></table></figure>\n<p>ps: 安装过程中会提示: <code>kmod: failed to insert /lib/modules/…</code>的错误，不要管，回头重启就好了。</p>\n<h4 id=\"2-现在关闭路由器\"><a href=\"#2-现在关闭路由器\" class=\"headerlink\" title=\"2). 现在关闭路由器\"></a>2). 现在关闭路由器</h4><p>运行 <code>df</code>，会发现rootfs只剩下40k左右。</p>\n<h4 id=\"3-准备\"><a href=\"#3-准备\" class=\"headerlink\" title=\"3). 准备\"></a>3). 准备</h4><ol>\n<li>格式化准备好的u盘为<code>ext4</code>，并插入路由器的usb口。</li>\n<li>将路由器模式开关调为3g，开启路由器。</li>\n<li>等到路由器灯不闪了，ssh登录路由器。</li>\n</ol>\n<h4 id=\"4-挂载操作\"><a href=\"#4-挂载操作\" class=\"headerlink\" title=\"4). 挂载操作\"></a>4). 挂载操作</h4><ol>\n<li>运行<code>ls /dev/sda*</code>，如果显示<code>/dev/sda /dev/sda1 ...</code>，说明u盘已经认出来了。否则拔出来格式化下。</li>\n<li>接着运行</li>\n</ol>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">block detect &gt; <span class=\"regexp\">/etc/config</span><span class=\"regexp\">/fstab</div><div class=\"line\">vim /etc</span><span class=\"regexp\">/config/fstab</span></div></pre></td></tr></table></figure>\n<p>修改内容为(uuid不要改动)</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">config <span class=\"string\">'global'</span></div><div class=\"line\">        <span class=\"keyword\">option</span>  anon_swap       <span class=\"string\">'0'</span></div><div class=\"line\">        <span class=\"keyword\">option</span>  anon_mount      <span class=\"string\">'0'</span></div><div class=\"line\">        <span class=\"keyword\">option</span>  auto_swap       <span class=\"string\">'1'</span></div><div class=\"line\">        <span class=\"keyword\">option</span>  auto_mount      <span class=\"string\">'1'</span></div><div class=\"line\">        <span class=\"keyword\">option</span>  delay_root      <span class=\"string\">'5'</span></div><div class=\"line\">        <span class=\"keyword\">option</span>  check_fs        <span class=\"string\">'0'</span></div><div class=\"line\"></div><div class=\"line\">config <span class=\"string\">'mount'</span></div><div class=\"line\">        <span class=\"keyword\">option</span>  target  <span class=\"string\">'/overlay'</span></div><div class=\"line\">        <span class=\"keyword\">option</span>  uuid    <span class=\"string\">'4a639f83-8137-f649-0f2c-79d66189a4ca'</span></div><div class=\"line\">        <span class=\"keyword\">option</span>  fstype  ext4</div><div class=\"line\">        <span class=\"keyword\">option</span>  <span class=\"keyword\">options</span> rw,sync</div><div class=\"line\">        <span class=\"keyword\">option</span>  enabled <span class=\"string\">'1'</span></div><div class=\"line\">        <span class=\"keyword\">option</span>  enabled_fsck <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\">config <span class=\"string\">'swap'</span></div><div class=\"line\">        <span class=\"keyword\">option</span>  device  <span class=\"string\">'/dev/sda2'</span></div><div class=\"line\">        <span class=\"keyword\">option</span>  enabled <span class=\"string\">'1'</span></div></pre></td></tr></table></figure>\n<p>接着把4M文件系统中的文件拷贝到u盘</p>\n<blockquote>\n<p>这么做附带是，能够从u盘重启失败，把u盘拔出来，还是可以通过路由器4M闪存进入系统操作</p>\n</blockquote>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir <span class=\"regexp\">/mnt/</span>sda1</div><div class=\"line\">mount <span class=\"regexp\">/dev/</span>sda1 <span class=\"regexp\">/mnt/</span>sda1</div><div class=\"line\">mkdir -p <span class=\"regexp\">/tmp/</span>cproot</div><div class=\"line\">mount --bind <span class=\"regexp\">/ /</span>tmp<span class=\"regexp\">/cproot/</span></div><div class=\"line\">tar -C <span class=\"regexp\">/tmp/</span>cproot<span class=\"regexp\">/ -cvf - . | tar -C /</span>mnt/sda1 -xf -</div><div class=\"line\">umount <span class=\"regexp\">/dev/</span>sda1</div><div class=\"line\">umount <span class=\"regexp\">/tmp/</span>cproot</div><div class=\"line\">echo option force_space &gt;&gt; <span class=\"regexp\">/etc/</span>opkg.conf</div></pre></td></tr></table></figure>\n<p>重启路由器</p>\n<h4 id=\"5-挂载最后的配置\"><a href=\"#5-挂载最后的配置\" class=\"headerlink\" title=\"5). 挂载最后的配置\"></a>5). 挂载最后的配置</h4><ol>\n<li>通过网页输入路由器ip进入luci</li>\n<li>选择system-&gt;mount point，可以看到rootfs已经变为U盘的大小</li>\n<li>最后的swap那边，勾选enable</li>\n<li>在Mount points，找到/dev/sda1那行，点击删除</li>\n<li>在Mount points后面点击添加</li>\n<li>选择/dev/sda1，文件系统选择ext4，这时候会出来一个选项，设置为rootfs，选中它，再选中启用</li>\n<li>保存并应用</li>\n</ol>\n<h4 id=\"6-挂载最终效果\"><a href=\"#6-挂载最终效果\" class=\"headerlink\" title=\"6). 挂载最终效果\"></a>6). 挂载最终效果</h4><p><img src=\"/img/wr720n-4.png\" alt=\"\"></p>\n<h2 id=\"V-安装chinadns和shadowscks\"><a href=\"#V-安装chinadns和shadowscks\" class=\"headerlink\" title=\"V. 安装chinadns和shadowscks\"></a>V. 安装chinadns和shadowscks</h2><blockquote>\n<p>参考 <a href=\"http://openwrt-dist.sourceforge.net/\">ShadowSocks安装</a></p>\n</blockquote>\n<h4 id=\"1-安装ipset\"><a href=\"#1-安装ipset\" class=\"headerlink\" title=\"1). 安装ipset\"></a>1). 安装ipset</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">opkg <span class=\"keyword\">update</span></div><div class=\"line\">opkg <span class=\"keyword\">install</span> ipset</div></pre></td></tr></table></figure>\n<p>ps: 安装过程中如果提示<code>kmod:failed to insert /lib/modules/...</code>的错误不用管他。</p>\n<p>好了以后，重启路由器。</p>\n<h4 id=\"2-ssh登录路由器，安装软件\"><a href=\"#2-ssh登录路由器，安装软件\" class=\"headerlink\" title=\"2). ssh登录路由器，安装软件\"></a>2). ssh登录路由器，安装软件</h4><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">opkg update</div><div class=\"line\">opkg <span class=\"keyword\">install </span>libpolarssl</div><div class=\"line\">opkg <span class=\"keyword\">install </span>resolveip</div><div class=\"line\">opkg <span class=\"keyword\">install </span>luci-i18n-chinese</div><div class=\"line\">opkg <span class=\"keyword\">install </span>ChinaDNS</div><div class=\"line\">opkg <span class=\"keyword\">install </span>luci-app-chinadns</div><div class=\"line\">opkg <span class=\"keyword\">install </span><span class=\"keyword\">shadowsocks-libev-spec</div><div class=\"line\"></span>opkg <span class=\"keyword\">install </span>luci-app-<span class=\"keyword\">shadowsocks-spec</span></div></pre></td></tr></table></figure>\n<h4 id=\"3-通过路由器ip登录-luci，可以将luci修改为中文\"><a href=\"#3-通过路由器ip登录-luci，可以将luci修改为中文\" class=\"headerlink\" title=\"3). 通过路由器ip登录 luci，可以将luci修改为中文\"></a>3). 通过路由器ip登录 luci，可以将luci修改为中文</h4><p>选用system -&gt; system -&gt; language 选择中文<br>重启路由器</p>\n<h2 id=\"VI-配置shadowsocks和chinadns\"><a href=\"#VI-配置shadowsocks和chinadns\" class=\"headerlink\" title=\"VI. 配置shadowsocks和chinadns\"></a>VI. 配置shadowsocks和chinadns</h2><h4 id=\"1-通过路由器ip访问luci\"><a href=\"#1-通过路由器ip访问luci\" class=\"headerlink\" title=\"1). 通过路由器ip访问luci\"></a>1). 通过路由器ip访问luci</h4><h4 id=\"2-配置ChinaDNS\"><a href=\"#2-配置ChinaDNS\" class=\"headerlink\" title=\"2). 配置ChinaDNS\"></a>2). 配置ChinaDNS</h4><p><img src=\"/img/wr720n-2.png\" alt=\"\"></p>\n<p>进入 服务-&gt;ChinaDNS 修改上游服务器为:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">223<span class=\"selector-class\">.6</span><span class=\"selector-class\">.6</span><span class=\"selector-class\">.6</span>,123<span class=\"selector-class\">.125</span><span class=\"selector-class\">.81</span><span class=\"selector-class\">.6</span>,114<span class=\"selector-class\">.114</span><span class=\"selector-class\">.115</span><span class=\"selector-class\">.115</span>,114<span class=\"selector-class\">.114</span><span class=\"selector-class\">.114</span><span class=\"selector-class\">.114</span>,8<span class=\"selector-class\">.8</span><span class=\"selector-class\">.4</span><span class=\"selector-class\">.4</span>,127<span class=\"selector-class\">.0</span><span class=\"selector-class\">.0</span><span class=\"selector-class\">.1</span><span class=\"selector-pseudo\">:5151</span></div></pre></td></tr></table></figure>\n<h4 id=\"3-配置Shadowsocks\"><a href=\"#3-配置Shadowsocks\" class=\"headerlink\" title=\"3). 配置Shadowsocks\"></a>3). 配置Shadowsocks</h4><p><img src=\"/img/wr720n-5.png\" alt=\"\"></p>\n<ol>\n<li>进入 服务-&gt;ShadowSocks 配置好全局配置，UDP转发 选择勾选。</li>\n<li>UDP本地端口保证与ChinaDNS中 上游服务器 中设置的本地的端口一样: 5151。</li>\n</ol>\n<h4 id=\"4-DHCP-DNS设置\"><a href=\"#4-DHCP-DNS设置\" class=\"headerlink\" title=\"4). DHCP/DNS设置\"></a>4). DHCP/DNS设置</h4><blockquote>\n<p>4个是为了保证稳定性，否则经常会出现解析失败导致网页无法打开，</p>\n</blockquote>\n<p>网络-&gt;DHCP/DNS设置-&gt;基本设置-&gt;DNS转发设置为:</p>\n<p><img src=\"/img/wr720n-3.png\" alt=\"\"></p>\n<blockquote>\n<p>这里确实是#号</p>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">127<span class=\"selector-class\">.0</span><span class=\"selector-class\">.0</span><span class=\"selector-class\">.1</span><span class=\"selector-id\">#5353</span></div><div class=\"line\">127<span class=\"selector-class\">.0</span><span class=\"selector-class\">.0</span><span class=\"selector-class\">.1</span><span class=\"selector-id\">#5353</span></div><div class=\"line\">127<span class=\"selector-class\">.0</span><span class=\"selector-class\">.0</span><span class=\"selector-class\">.1</span><span class=\"selector-id\">#5353</span></div><div class=\"line\">127<span class=\"selector-class\">.0</span><span class=\"selector-class\">.0</span><span class=\"selector-class\">.1</span><span class=\"selector-id\">#5353</span></div></pre></td></tr></table></figure>\n<p>基本设置-&gt;HOST和解析文件</p>\n<p><img src=\"/img/wr720n-6.png\" alt=\"\"></p>\n<ol>\n<li>忽略解析文件 打勾</li>\n<li>忽略HOSTS文件 打勾</li>\n</ol>\n<h4 id=\"5-更新ChinaDNS过滤ip\"><a href=\"#5-更新ChinaDNS过滤ip\" class=\"headerlink\" title=\"5). 更新ChinaDNS过滤ip\"></a>5). 更新ChinaDNS过滤ip</h4><blockquote>\n<p><code>/etc/chinadns_chnroute.txt</code> 替换为 服务-&gt;ChinaDNS中的 国内路由表 地址</p>\n</blockquote>\n<figure class=\"highlight coq\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">opkg update</div><div class=\"line\">opkg install libcurl curl</div><div class=\"line\">curl 'http://ftp.apnic.net/apnic/stats/apnic/delegated-apnic-latest' | <span class=\"type\">grep</span> ipv4 | <span class=\"type\">grep</span> CN | <span class=\"type\">awk</span> -F\\| <span class=\"type\">'&#123; printf</span>(<span class=\"string\">\"%s/%d\\n\"</span>, $<span class=\"number\">4</span>, <span class=\"number\">32</span>-log($<span class=\"number\">5</span>)/log(<span class=\"number\">2</span>)) &#125;' &gt; /etc/chinadns_chnroute.txt</div></pre></td></tr></table></figure>\n<blockquote>\n<p>计划，每天凌晨4点更新下</p>\n</blockquote>\n<figure class=\"highlight coq\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">* <span class=\"number\">4</span> * * * curl 'http://ftp.apnic.net/apnic/stats/apnic/delegated-apnic-latest' | <span class=\"type\">grep</span> ipv4 | <span class=\"type\">grep</span> CN | <span class=\"type\">awk</span> -F\\| <span class=\"type\">'&#123; printf</span>(<span class=\"string\">\"%s/%d\\n\"</span>, $<span class=\"number\">4</span>, <span class=\"number\">32</span>-log($<span class=\"number\">5</span>)/log(<span class=\"number\">2</span>)) &#125;' &gt; /etc/chinadns_chnroute.txt</div></pre></td></tr></table></figure>\n<hr>\n<ul>\n<li><a href=\"http://mirrors.ustc.edu.cn/openwrt/openwrt/barrier_breaker/\">国内源</a></li>\n<li><a href=\"http://www.right.com.cn/forum/thread-91571-1-1.html\">720N 4M-8M固件，含NAS、3G、Printer，支持3070和8187网卡[20120914更新]</a></li>\n<li><a href=\"http://www.right.com.cn/forum/forum.php?mod=viewthread&amp;tid=102354&amp;highlight=wr720n\">wr720n原厂<em>4M</em>编程器_固件，要的拿走</a></li>\n<li><a href=\"http://blog.nanpuyue.com/2012/011.html\">TP-LINK TL-WR720N V3 OpenWrt 固件下载</a></li>\n<li><a href=\"http://www.right.com.cn/forum/thread-154561-1-1.html\">【U-Boot】U-Boot 刷机方法大全</a></li>\n<li><a href=\"http://blog.chinaunix.net/uid-27194309-id-3407524.html\">Flash 由4M改8M/16M, u-boot不锁死可刷写, openwrt源码的修改 </a></li>\n<li><a href=\"http://coffeecat.info/?p=175\">TP-Link wr720n Openwrt 科学上网改造，使用ChinaDNS + Shadowsocks 攻略</a></li>\n<li><a href=\"https://lostman.org/openwrt-opkg-update-bad-address/\">解决OpenWRT Opkg Update Bad Address 问题</a></li>\n<li><a href=\"http://openwrt-dist.sourceforge.net/\">ShadowSocks安装</a></li>\n<li><a href=\"http://wiki.openwrt.org/doc/packages\">Where to get packages</a></li>\n<li><a href=\"http://blog.nanpuyue.com/2012/011.html\">南浦月 TP-LINK TL-WR720N V3 OpenWrt 固件下载</a></li>\n<li><a href=\"http://downloads.openwrt.org.cn/PandoraBox/Lenovo-Y1_RY-1S/firmware/\">Lenovo-Y1_RY-1S-firmware</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"zsh[oh my zsh]","date":"2015-03-29T07:08:03.000Z","_content":"\n### I. 安装\n\n```\napt-get install zsh\napt-get install git-core\n\ngit clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh\n\ncp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc\n\nchsh -s `which zsh`\n\nsudo shutdown -r 0\n```\n\n<!--more-->\n### II. 配置文件所在路径\n\n##### 全局设置:\n`~/.zshrc`\n\n##### 文件地址:\n`~/.oh-my-zsh/`\n\n如主题路径: `~/.oh-my-zsh/themes/`\n\n######* 修改主题举例:\n\n如果要修改主题里面的特性。直接编辑`~/.oh-my-zsh/themes/` 下对应主题\n\n如果要选择主题，编辑`~/.zshrc`里面对应的`ZSH_THEME`参数\n\n```\nPROMPT='%{$fg_bold[red]%}➜ %{$fg_bold[green]%}%p%{$fg[cyan]%}%d %{$fg_bold[blue]%}$(git_prompt_info)%{$fg_bold[blue]%}% %{$reset_color%}>'\n\n#PROMPT='%{$fg_bold[red]%}➜ %{$fg_bold[green]%}%p %{$fg[cyan]%}%c %{$fg_bold[blue]%}$(git_prompt_info)%{$fg_bold[blue]%} % %{$reset_color%}'\n```\n\n其中的`%d`表示绝对路径，`c`表示相对路径\n\n######* 别名添加:\n\n直接在`~/.zshrc`中添加\n\n\n推荐别名:\n\n```\nalias cls='clear'\nalias ll='ls -l'\nalias la='ls -a'\nalias vi='vim'\nalias javac=\"javac -J-Dfile.encoding=utf8\"\nalias grep=\"grep --color=auto\"\nalias -s html=mate   # 在命令行直接输入后缀为 html 的文件名，会在 TextMate 中打开\nalias -s rb=mate     # 在命令行直接输入 ruby 文件，会在 TextMate 中打开\nalias -s py=vi       # 在命令行直接输入 python 文件，会用 vim 中打开，以下类似\nalias -s js=vi\nalias -s c=vi\nalias -s java=vi\nalias -s txt=vi\nalias -s gz='tar -xzvf'\nalias -s tgz='tar -xzvf'\nalias -s zip='unzip'\nalias -s bz2='tar -xjvf'\n```\n\n### III. 插件\n\n##### 添加插件:\n编辑`~/.zshrc`中的plugins字段。默认是:`plugins=(git)`默认已经添加了git插件。\n\n如果需要添加插件，只要在括号里添加即可，如:`plugins=(git autojump)`\n\n##### 插件目录:\n`~/.oh-my-zsh/plugins`\n\n如想要修改`git`插件的带的`git`相关别名或其他配置，只需要编辑:`~/.oh-my-zsh/plugins/git/git.plugin.zsh`文件即可\n\n### IV. 其他\n\n#### 推荐使用插件\n\n```\n// vim 模式\nvi-mode\n\n// 快速用sublime打开当前目录等互动\nsublime\n\n```\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/zsh[oh-my-zsh]学习整理.md","raw":"title: zsh[oh my zsh]\ndate: 2015-03-29 15:08:03\npermalink: 2015/03/29/zsh[oh-my-zsh]学习整理\ntags:\n- zsh\n- Linux\n- shell\n\n---\n\n### I. 安装\n\n```\napt-get install zsh\napt-get install git-core\n\ngit clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh\n\ncp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc\n\nchsh -s `which zsh`\n\nsudo shutdown -r 0\n```\n\n<!--more-->\n### II. 配置文件所在路径\n\n##### 全局设置:\n`~/.zshrc`\n\n##### 文件地址:\n`~/.oh-my-zsh/`\n\n如主题路径: `~/.oh-my-zsh/themes/`\n\n######* 修改主题举例:\n\n如果要修改主题里面的特性。直接编辑`~/.oh-my-zsh/themes/` 下对应主题\n\n如果要选择主题，编辑`~/.zshrc`里面对应的`ZSH_THEME`参数\n\n```\nPROMPT='%{$fg_bold[red]%}➜ %{$fg_bold[green]%}%p%{$fg[cyan]%}%d %{$fg_bold[blue]%}$(git_prompt_info)%{$fg_bold[blue]%}% %{$reset_color%}>'\n\n#PROMPT='%{$fg_bold[red]%}➜ %{$fg_bold[green]%}%p %{$fg[cyan]%}%c %{$fg_bold[blue]%}$(git_prompt_info)%{$fg_bold[blue]%} % %{$reset_color%}'\n```\n\n其中的`%d`表示绝对路径，`c`表示相对路径\n\n######* 别名添加:\n\n直接在`~/.zshrc`中添加\n\n\n推荐别名:\n\n```\nalias cls='clear'\nalias ll='ls -l'\nalias la='ls -a'\nalias vi='vim'\nalias javac=\"javac -J-Dfile.encoding=utf8\"\nalias grep=\"grep --color=auto\"\nalias -s html=mate   # 在命令行直接输入后缀为 html 的文件名，会在 TextMate 中打开\nalias -s rb=mate     # 在命令行直接输入 ruby 文件，会在 TextMate 中打开\nalias -s py=vi       # 在命令行直接输入 python 文件，会用 vim 中打开，以下类似\nalias -s js=vi\nalias -s c=vi\nalias -s java=vi\nalias -s txt=vi\nalias -s gz='tar -xzvf'\nalias -s tgz='tar -xzvf'\nalias -s zip='unzip'\nalias -s bz2='tar -xjvf'\n```\n\n### III. 插件\n\n##### 添加插件:\n编辑`~/.zshrc`中的plugins字段。默认是:`plugins=(git)`默认已经添加了git插件。\n\n如果需要添加插件，只要在括号里添加即可，如:`plugins=(git autojump)`\n\n##### 插件目录:\n`~/.oh-my-zsh/plugins`\n\n如想要修改`git`插件的带的`git`相关别名或其他配置，只需要编辑:`~/.oh-my-zsh/plugins/git/git.plugin.zsh`文件即可\n\n### IV. 其他\n\n#### 推荐使用插件\n\n```\n// vim 模式\nvi-mode\n\n// 快速用sublime打开当前目录等互动\nsublime\n\n```\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2015/03/29/zsh[oh-my-zsh]学习整理","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66jx004n95buq4uwu741","content":"<h3 id=\"I-安装\"><a href=\"#I-安装\" class=\"headerlink\" title=\"I. 安装\"></a>I. 安装</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-get <span class=\"keyword\">install</span> zsh</div><div class=\"line\">apt-<span class=\"keyword\">get</span> <span class=\"keyword\">install</span> git-core</div><div class=\"line\"></div><div class=\"line\">git <span class=\"keyword\">clone</span> git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</div><div class=\"line\"></div><div class=\"line\">cp ~/.oh-my-zsh/templates/zshrc.zsh-<span class=\"keyword\">template</span> ~/.zshrc</div><div class=\"line\"></div><div class=\"line\">chsh -s <span class=\"string\">`which zsh`</span></div><div class=\"line\"></div><div class=\"line\">sudo <span class=\"keyword\">shutdown</span> -r <span class=\"number\">0</span></div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"II-配置文件所在路径\"><a href=\"#II-配置文件所在路径\" class=\"headerlink\" title=\"II. 配置文件所在路径\"></a>II. 配置文件所在路径</h3><h5 id=\"全局设置\"><a href=\"#全局设置\" class=\"headerlink\" title=\"全局设置:\"></a>全局设置:</h5><p><code>~/.zshrc</code></p>\n<h5 id=\"文件地址\"><a href=\"#文件地址\" class=\"headerlink\" title=\"文件地址:\"></a>文件地址:</h5><p><code>~/.oh-my-zsh/</code></p>\n<p>如主题路径: <code>~/.oh-my-zsh/themes/</code></p>\n<p>######* 修改主题举例:</p>\n<p>如果要修改主题里面的特性。直接编辑<code>~/.oh-my-zsh/themes/</code> 下对应主题</p>\n<p>如果要选择主题，编辑<code>~/.zshrc</code>里面对应的<code>ZSH_THEME</code>参数</p>\n<figure class=\"highlight cos\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">PROMPT='%&#123;<span class=\"built_in\">$fg</span>_bold[red]%&#125;➜ %&#123;<span class=\"built_in\">$fg</span>_bold[green]%&#125;<span class=\"built_in\">%p</span>%&#123;<span class=\"built_in\">$fg</span>[cyan]%&#125;<span class=\"built_in\">%d</span> %&#123;<span class=\"built_in\">$fg</span>_bold[blue]%&#125;$(git_prompt_info)%&#123;<span class=\"built_in\">$fg</span>_bold[blue]%&#125;% %&#123;<span class=\"built_in\">$reset</span>_color%&#125;&gt;'</div><div class=\"line\"></div><div class=\"line\">#PROMPT='%&#123;<span class=\"built_in\">$fg</span>_bold[red]%&#125;➜ %&#123;<span class=\"built_in\">$fg</span>_bold[green]%&#125;<span class=\"built_in\">%p</span> %&#123;<span class=\"built_in\">$fg</span>[cyan]%&#125;<span class=\"built_in\">%c</span> %&#123;<span class=\"built_in\">$fg</span>_bold[blue]%&#125;$(git_prompt_info)%&#123;<span class=\"built_in\">$fg</span>_bold[blue]%&#125; % %&#123;<span class=\"built_in\">$reset</span>_color%&#125;'</div></pre></td></tr></table></figure>\n<p>其中的<code>%d</code>表示绝对路径，<code>c</code>表示相对路径</p>\n<p>######* 别名添加:</p>\n<p>直接在<code>~/.zshrc</code>中添加</p>\n<p>推荐别名:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">alias</span> cls=<span class=\"string\">'clear'</span></div><div class=\"line\"><span class=\"built_in\">alias</span> ll=<span class=\"string\">'ls -l'</span></div><div class=\"line\"><span class=\"built_in\">alias</span> la=<span class=\"string\">'ls -a'</span></div><div class=\"line\"><span class=\"built_in\">alias</span> vi=<span class=\"string\">'vim'</span></div><div class=\"line\"><span class=\"built_in\">alias</span> javac=<span class=\"string\">\"javac -J-Dfile.encoding=utf8\"</span></div><div class=\"line\"><span class=\"built_in\">alias</span> grep=<span class=\"string\">\"grep --color=auto\"</span></div><div class=\"line\"><span class=\"built_in\">alias</span> <span class=\"_\">-s</span> html=mate   <span class=\"comment\"># 在命令行直接输入后缀为 html 的文件名，会在 TextMate 中打开</span></div><div class=\"line\"><span class=\"built_in\">alias</span> <span class=\"_\">-s</span> rb=mate     <span class=\"comment\"># 在命令行直接输入 ruby 文件，会在 TextMate 中打开</span></div><div class=\"line\"><span class=\"built_in\">alias</span> <span class=\"_\">-s</span> py=vi       <span class=\"comment\"># 在命令行直接输入 python 文件，会用 vim 中打开，以下类似</span></div><div class=\"line\"><span class=\"built_in\">alias</span> <span class=\"_\">-s</span> js=vi</div><div class=\"line\"><span class=\"built_in\">alias</span> <span class=\"_\">-s</span> c=vi</div><div class=\"line\"><span class=\"built_in\">alias</span> <span class=\"_\">-s</span> java=vi</div><div class=\"line\"><span class=\"built_in\">alias</span> <span class=\"_\">-s</span> txt=vi</div><div class=\"line\"><span class=\"built_in\">alias</span> <span class=\"_\">-s</span> gz=<span class=\"string\">'tar -xzvf'</span></div><div class=\"line\"><span class=\"built_in\">alias</span> <span class=\"_\">-s</span> tgz=<span class=\"string\">'tar -xzvf'</span></div><div class=\"line\"><span class=\"built_in\">alias</span> <span class=\"_\">-s</span> zip=<span class=\"string\">'unzip'</span></div><div class=\"line\"><span class=\"built_in\">alias</span> <span class=\"_\">-s</span> bz2=<span class=\"string\">'tar -xjvf'</span></div></pre></td></tr></table></figure>\n<h3 id=\"III-插件\"><a href=\"#III-插件\" class=\"headerlink\" title=\"III. 插件\"></a>III. 插件</h3><h5 id=\"添加插件\"><a href=\"#添加插件\" class=\"headerlink\" title=\"添加插件:\"></a>添加插件:</h5><p>编辑<code>~/.zshrc</code>中的plugins字段。默认是:<code>plugins=(git)</code>默认已经添加了git插件。</p>\n<p>如果需要添加插件，只要在括号里添加即可，如:<code>plugins=(git autojump)</code></p>\n<h5 id=\"插件目录\"><a href=\"#插件目录\" class=\"headerlink\" title=\"插件目录:\"></a>插件目录:</h5><p><code>~/.oh-my-zsh/plugins</code></p>\n<p>如想要修改<code>git</code>插件的带的<code>git</code>相关别名或其他配置，只需要编辑:<code>~/.oh-my-zsh/plugins/git/git.plugin.zsh</code>文件即可</p>\n<h3 id=\"IV-其他\"><a href=\"#IV-其他\" class=\"headerlink\" title=\"IV. 其他\"></a>IV. 其他</h3><h4 id=\"推荐使用插件\"><a href=\"#推荐使用插件\" class=\"headerlink\" title=\"推荐使用插件\"></a>推荐使用插件</h4><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// <span class=\"keyword\">vim</span> 模式</div><div class=\"line\"><span class=\"keyword\">vi</span>-<span class=\"keyword\">mode</span></div><div class=\"line\"></div><div class=\"line\">// 快速用sublime打开当前目录等互动</div><div class=\"line\">sublime</div></pre></td></tr></table></figure>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<h3 id=\"I-安装\"><a href=\"#I-安装\" class=\"headerlink\" title=\"I. 安装\"></a>I. 安装</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-get <span class=\"keyword\">install</span> zsh</div><div class=\"line\">apt-<span class=\"keyword\">get</span> <span class=\"keyword\">install</span> git-core</div><div class=\"line\"></div><div class=\"line\">git <span class=\"keyword\">clone</span> git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</div><div class=\"line\"></div><div class=\"line\">cp ~/.oh-my-zsh/templates/zshrc.zsh-<span class=\"keyword\">template</span> ~/.zshrc</div><div class=\"line\"></div><div class=\"line\">chsh -s <span class=\"string\">`which zsh`</span></div><div class=\"line\"></div><div class=\"line\">sudo <span class=\"keyword\">shutdown</span> -r <span class=\"number\">0</span></div></pre></td></tr></table></figure>","more":"<h3 id=\"II-配置文件所在路径\"><a href=\"#II-配置文件所在路径\" class=\"headerlink\" title=\"II. 配置文件所在路径\"></a>II. 配置文件所在路径</h3><h5 id=\"全局设置\"><a href=\"#全局设置\" class=\"headerlink\" title=\"全局设置:\"></a>全局设置:</h5><p><code>~/.zshrc</code></p>\n<h5 id=\"文件地址\"><a href=\"#文件地址\" class=\"headerlink\" title=\"文件地址:\"></a>文件地址:</h5><p><code>~/.oh-my-zsh/</code></p>\n<p>如主题路径: <code>~/.oh-my-zsh/themes/</code></p>\n<p>######* 修改主题举例:</p>\n<p>如果要修改主题里面的特性。直接编辑<code>~/.oh-my-zsh/themes/</code> 下对应主题</p>\n<p>如果要选择主题，编辑<code>~/.zshrc</code>里面对应的<code>ZSH_THEME</code>参数</p>\n<figure class=\"highlight cos\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">PROMPT='%&#123;<span class=\"built_in\">$fg</span>_bold[red]%&#125;➜ %&#123;<span class=\"built_in\">$fg</span>_bold[green]%&#125;<span class=\"built_in\">%p</span>%&#123;<span class=\"built_in\">$fg</span>[cyan]%&#125;<span class=\"built_in\">%d</span> %&#123;<span class=\"built_in\">$fg</span>_bold[blue]%&#125;$(git_prompt_info)%&#123;<span class=\"built_in\">$fg</span>_bold[blue]%&#125;% %&#123;<span class=\"built_in\">$reset</span>_color%&#125;&gt;'</div><div class=\"line\"></div><div class=\"line\">#PROMPT='%&#123;<span class=\"built_in\">$fg</span>_bold[red]%&#125;➜ %&#123;<span class=\"built_in\">$fg</span>_bold[green]%&#125;<span class=\"built_in\">%p</span> %&#123;<span class=\"built_in\">$fg</span>[cyan]%&#125;<span class=\"built_in\">%c</span> %&#123;<span class=\"built_in\">$fg</span>_bold[blue]%&#125;$(git_prompt_info)%&#123;<span class=\"built_in\">$fg</span>_bold[blue]%&#125; % %&#123;<span class=\"built_in\">$reset</span>_color%&#125;'</div></pre></td></tr></table></figure>\n<p>其中的<code>%d</code>表示绝对路径，<code>c</code>表示相对路径</p>\n<p>######* 别名添加:</p>\n<p>直接在<code>~/.zshrc</code>中添加</p>\n<p>推荐别名:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">alias</span> cls=<span class=\"string\">'clear'</span></div><div class=\"line\"><span class=\"built_in\">alias</span> ll=<span class=\"string\">'ls -l'</span></div><div class=\"line\"><span class=\"built_in\">alias</span> la=<span class=\"string\">'ls -a'</span></div><div class=\"line\"><span class=\"built_in\">alias</span> vi=<span class=\"string\">'vim'</span></div><div class=\"line\"><span class=\"built_in\">alias</span> javac=<span class=\"string\">\"javac -J-Dfile.encoding=utf8\"</span></div><div class=\"line\"><span class=\"built_in\">alias</span> grep=<span class=\"string\">\"grep --color=auto\"</span></div><div class=\"line\"><span class=\"built_in\">alias</span> <span class=\"_\">-s</span> html=mate   <span class=\"comment\"># 在命令行直接输入后缀为 html 的文件名，会在 TextMate 中打开</span></div><div class=\"line\"><span class=\"built_in\">alias</span> <span class=\"_\">-s</span> rb=mate     <span class=\"comment\"># 在命令行直接输入 ruby 文件，会在 TextMate 中打开</span></div><div class=\"line\"><span class=\"built_in\">alias</span> <span class=\"_\">-s</span> py=vi       <span class=\"comment\"># 在命令行直接输入 python 文件，会用 vim 中打开，以下类似</span></div><div class=\"line\"><span class=\"built_in\">alias</span> <span class=\"_\">-s</span> js=vi</div><div class=\"line\"><span class=\"built_in\">alias</span> <span class=\"_\">-s</span> c=vi</div><div class=\"line\"><span class=\"built_in\">alias</span> <span class=\"_\">-s</span> java=vi</div><div class=\"line\"><span class=\"built_in\">alias</span> <span class=\"_\">-s</span> txt=vi</div><div class=\"line\"><span class=\"built_in\">alias</span> <span class=\"_\">-s</span> gz=<span class=\"string\">'tar -xzvf'</span></div><div class=\"line\"><span class=\"built_in\">alias</span> <span class=\"_\">-s</span> tgz=<span class=\"string\">'tar -xzvf'</span></div><div class=\"line\"><span class=\"built_in\">alias</span> <span class=\"_\">-s</span> zip=<span class=\"string\">'unzip'</span></div><div class=\"line\"><span class=\"built_in\">alias</span> <span class=\"_\">-s</span> bz2=<span class=\"string\">'tar -xjvf'</span></div></pre></td></tr></table></figure>\n<h3 id=\"III-插件\"><a href=\"#III-插件\" class=\"headerlink\" title=\"III. 插件\"></a>III. 插件</h3><h5 id=\"添加插件\"><a href=\"#添加插件\" class=\"headerlink\" title=\"添加插件:\"></a>添加插件:</h5><p>编辑<code>~/.zshrc</code>中的plugins字段。默认是:<code>plugins=(git)</code>默认已经添加了git插件。</p>\n<p>如果需要添加插件，只要在括号里添加即可，如:<code>plugins=(git autojump)</code></p>\n<h5 id=\"插件目录\"><a href=\"#插件目录\" class=\"headerlink\" title=\"插件目录:\"></a>插件目录:</h5><p><code>~/.oh-my-zsh/plugins</code></p>\n<p>如想要修改<code>git</code>插件的带的<code>git</code>相关别名或其他配置，只需要编辑:<code>~/.oh-my-zsh/plugins/git/git.plugin.zsh</code>文件即可</p>\n<h3 id=\"IV-其他\"><a href=\"#IV-其他\" class=\"headerlink\" title=\"IV. 其他\"></a>IV. 其他</h3><h4 id=\"推荐使用插件\"><a href=\"#推荐使用插件\" class=\"headerlink\" title=\"推荐使用插件\"></a>推荐使用插件</h4><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// <span class=\"keyword\">vim</span> 模式</div><div class=\"line\"><span class=\"keyword\">vi</span>-<span class=\"keyword\">mode</span></div><div class=\"line\"></div><div class=\"line\">// 快速用sublime打开当前目录等互动</div><div class=\"line\">sublime</div></pre></td></tr></table></figure>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"《海上钢琴师》经典台词选集","date":"2008-01-04T00:35:03.000Z","_content":"\n## 原文：\n\nMoonlight city. You just couldn’t see an end to it. It wasn’t what I saw that stopped me, Max. It was what I didn’t see.\n\n<!--more-->\n\nTake the piano. Keys begin. Keys end. You know there are 88 of them. They’re not infinite. You’re infinite. And on those keys, the music that you can make is infinite. I like that. That I can live by. But you get me up on that gangway, and you roll them out in front of me. Keyboards have millions and billions of keys that never end. That keyboard is infinite. Then on that keyboard there’s no music you can play. That’s God’s piano.\n\nDid you see the streets? There’re thousands of them. How do you choose just one? One woman, one house, one way to die… You don’t even know where it comes to an end. Aren’t you ever just scared of breaking apart with the thought of it?\n\nI was born on this ship. And the world passed me by. But 2000 people at a time and there’re old wishes here. But nevermore that fit between prow and stern. You played out your happiness bit on a piano that was not infinite. I learned to live that way.\n\nLand? Land is a ship too big for me, It’s a woman too beautiful, a bridge too long, perfume to strong, music I don’t know how to play. I can never get off this ship. At best, I didn’t step off my life. After all, I don’t exist for anyone.\n\n## 译文：\n\n偌大的城市，绵延无尽。并非是我眼见的让我停住了脚步，而是我所看不见的。你能明白吗？\n\n拿钢琴来说。键盘有始亦有终。你确切地知道88个键就在那儿，错不了。它们并不是无限的，而你，才是无限的。你能在键盘上表现的音乐是无限的。我喜欢这样，我能轻松应付。而你现在让我走过跳板，走到城市里，等着我的是一个没有尽头的键盘。我又怎能在这样的键盘上弹奏呢？那是上帝的键盘啊！\n\n你看到那数不清的街道吗？如何只选择其中一条去走？一个共渡一生的女人，一幢属于自己的屋子，一种生与死的方式……你甚至不知道什么时候才是尽头。一想到这个，难道不会害怕、会崩溃吗？\n\n我在这艘船上出生。世事千变万化，然而这艘船每次只载2000人。这里有着希望，但仅在船头和船尾之间。你可以在有限的钢琴上奏出你的欢欣快乐。我习惯了这样的生活。\n\n陆地？陆地对我来说是一艘太大的船，太漂亮的女人，太长的旅程，太浓烈的香水，无从着手的音乐。我永远无法走下这艘船，这样的话，我宁可舍弃我的生命。毕竟，我从没有为任何人存在过，不是么？\n\n–收录于早年百度博客.\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/《海上钢琴师》经典台词选集.md","raw":"title: 《海上钢琴师》经典台词选集\ndate: 2008-01-04 08:35:03\npermalink: 2008/01/04/《海上钢琴师》经典台词选集\ntags:\n- 抄录\n\n---\n\n## 原文：\n\nMoonlight city. You just couldn’t see an end to it. It wasn’t what I saw that stopped me, Max. It was what I didn’t see.\n\n<!--more-->\n\nTake the piano. Keys begin. Keys end. You know there are 88 of them. They’re not infinite. You’re infinite. And on those keys, the music that you can make is infinite. I like that. That I can live by. But you get me up on that gangway, and you roll them out in front of me. Keyboards have millions and billions of keys that never end. That keyboard is infinite. Then on that keyboard there’s no music you can play. That’s God’s piano.\n\nDid you see the streets? There’re thousands of them. How do you choose just one? One woman, one house, one way to die… You don’t even know where it comes to an end. Aren’t you ever just scared of breaking apart with the thought of it?\n\nI was born on this ship. And the world passed me by. But 2000 people at a time and there’re old wishes here. But nevermore that fit between prow and stern. You played out your happiness bit on a piano that was not infinite. I learned to live that way.\n\nLand? Land is a ship too big for me, It’s a woman too beautiful, a bridge too long, perfume to strong, music I don’t know how to play. I can never get off this ship. At best, I didn’t step off my life. After all, I don’t exist for anyone.\n\n## 译文：\n\n偌大的城市，绵延无尽。并非是我眼见的让我停住了脚步，而是我所看不见的。你能明白吗？\n\n拿钢琴来说。键盘有始亦有终。你确切地知道88个键就在那儿，错不了。它们并不是无限的，而你，才是无限的。你能在键盘上表现的音乐是无限的。我喜欢这样，我能轻松应付。而你现在让我走过跳板，走到城市里，等着我的是一个没有尽头的键盘。我又怎能在这样的键盘上弹奏呢？那是上帝的键盘啊！\n\n你看到那数不清的街道吗？如何只选择其中一条去走？一个共渡一生的女人，一幢属于自己的屋子，一种生与死的方式……你甚至不知道什么时候才是尽头。一想到这个，难道不会害怕、会崩溃吗？\n\n我在这艘船上出生。世事千变万化，然而这艘船每次只载2000人。这里有着希望，但仅在船头和船尾之间。你可以在有限的钢琴上奏出你的欢欣快乐。我习惯了这样的生活。\n\n陆地？陆地对我来说是一艘太大的船，太漂亮的女人，太长的旅程，太浓烈的香水，无从着手的音乐。我永远无法走下这艘船，这样的话，我宁可舍弃我的生命。毕竟，我从没有为任何人存在过，不是么？\n\n–收录于早年百度博客.\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2008/01/04/《海上钢琴师》经典台词选集","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66jy004o95buwtr6mdaf","content":"<h2 id=\"原文：\"><a href=\"#原文：\" class=\"headerlink\" title=\"原文：\"></a>原文：</h2><p>Moonlight city. You just couldn’t see an end to it. It wasn’t what I saw that stopped me, Max. It was what I didn’t see.</p>\n<a id=\"more\"></a>\n<p>Take the piano. Keys begin. Keys end. You know there are 88 of them. They’re not infinite. You’re infinite. And on those keys, the music that you can make is infinite. I like that. That I can live by. But you get me up on that gangway, and you roll them out in front of me. Keyboards have millions and billions of keys that never end. That keyboard is infinite. Then on that keyboard there’s no music you can play. That’s God’s piano.</p>\n<p>Did you see the streets? There’re thousands of them. How do you choose just one? One woman, one house, one way to die… You don’t even know where it comes to an end. Aren’t you ever just scared of breaking apart with the thought of it?</p>\n<p>I was born on this ship. And the world passed me by. But 2000 people at a time and there’re old wishes here. But nevermore that fit between prow and stern. You played out your happiness bit on a piano that was not infinite. I learned to live that way.</p>\n<p>Land? Land is a ship too big for me, It’s a woman too beautiful, a bridge too long, perfume to strong, music I don’t know how to play. I can never get off this ship. At best, I didn’t step off my life. After all, I don’t exist for anyone.</p>\n<h2 id=\"译文：\"><a href=\"#译文：\" class=\"headerlink\" title=\"译文：\"></a>译文：</h2><p>偌大的城市，绵延无尽。并非是我眼见的让我停住了脚步，而是我所看不见的。你能明白吗？</p>\n<p>拿钢琴来说。键盘有始亦有终。你确切地知道88个键就在那儿，错不了。它们并不是无限的，而你，才是无限的。你能在键盘上表现的音乐是无限的。我喜欢这样，我能轻松应付。而你现在让我走过跳板，走到城市里，等着我的是一个没有尽头的键盘。我又怎能在这样的键盘上弹奏呢？那是上帝的键盘啊！</p>\n<p>你看到那数不清的街道吗？如何只选择其中一条去走？一个共渡一生的女人，一幢属于自己的屋子，一种生与死的方式……你甚至不知道什么时候才是尽头。一想到这个，难道不会害怕、会崩溃吗？</p>\n<p>我在这艘船上出生。世事千变万化，然而这艘船每次只载2000人。这里有着希望，但仅在船头和船尾之间。你可以在有限的钢琴上奏出你的欢欣快乐。我习惯了这样的生活。</p>\n<p>陆地？陆地对我来说是一艘太大的船，太漂亮的女人，太长的旅程，太浓烈的香水，无从着手的音乐。我永远无法走下这艘船，这样的话，我宁可舍弃我的生命。毕竟，我从没有为任何人存在过，不是么？</p>\n<p>–收录于早年百度博客.</p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<h2 id=\"原文：\"><a href=\"#原文：\" class=\"headerlink\" title=\"原文：\"></a>原文：</h2><p>Moonlight city. You just couldn’t see an end to it. It wasn’t what I saw that stopped me, Max. It was what I didn’t see.</p>","more":"<p>Take the piano. Keys begin. Keys end. You know there are 88 of them. They’re not infinite. You’re infinite. And on those keys, the music that you can make is infinite. I like that. That I can live by. But you get me up on that gangway, and you roll them out in front of me. Keyboards have millions and billions of keys that never end. That keyboard is infinite. Then on that keyboard there’s no music you can play. That’s God’s piano.</p>\n<p>Did you see the streets? There’re thousands of them. How do you choose just one? One woman, one house, one way to die… You don’t even know where it comes to an end. Aren’t you ever just scared of breaking apart with the thought of it?</p>\n<p>I was born on this ship. And the world passed me by. But 2000 people at a time and there’re old wishes here. But nevermore that fit between prow and stern. You played out your happiness bit on a piano that was not infinite. I learned to live that way.</p>\n<p>Land? Land is a ship too big for me, It’s a woman too beautiful, a bridge too long, perfume to strong, music I don’t know how to play. I can never get off this ship. At best, I didn’t step off my life. After all, I don’t exist for anyone.</p>\n<h2 id=\"译文：\"><a href=\"#译文：\" class=\"headerlink\" title=\"译文：\"></a>译文：</h2><p>偌大的城市，绵延无尽。并非是我眼见的让我停住了脚步，而是我所看不见的。你能明白吗？</p>\n<p>拿钢琴来说。键盘有始亦有终。你确切地知道88个键就在那儿，错不了。它们并不是无限的，而你，才是无限的。你能在键盘上表现的音乐是无限的。我喜欢这样，我能轻松应付。而你现在让我走过跳板，走到城市里，等着我的是一个没有尽头的键盘。我又怎能在这样的键盘上弹奏呢？那是上帝的键盘啊！</p>\n<p>你看到那数不清的街道吗？如何只选择其中一条去走？一个共渡一生的女人，一幢属于自己的屋子，一种生与死的方式……你甚至不知道什么时候才是尽头。一想到这个，难道不会害怕、会崩溃吗？</p>\n<p>我在这艘船上出生。世事千变万化，然而这艘船每次只载2000人。这里有着希望，但仅在船头和船尾之间。你可以在有限的钢琴上奏出你的欢欣快乐。我习惯了这样的生活。</p>\n<p>陆地？陆地对我来说是一艘太大的船，太漂亮的女人，太长的旅程，太浓烈的香水，无从着手的音乐。我永远无法走下这艘船，这样的话，我宁可舍弃我的生命。毕竟，我从没有为任何人存在过，不是么？</p>\n<p>–收录于早年百度博客.</p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"互联网进化论“物联网”时代的崛起","date":"2013-06-12T00:35:03.000Z","_content":"\n## “物联网”时代的崛起\n\n> 作者：龚振杰\n\n前言：其实，有时候，我常常在想，在这个暴风雨的前期，是否有很多人在和我一样，游说着身边的朋友，告诉他们，一切皆有可能。\n\n<!--more-->\n\n在研究之前，我在维基百科中查看了官方的定义—-物联网是一个基于互联网、传统电信网络等信息载体，让所有能够被独立寻址的普通物理对象实现互联互通网络。确实，这个的涉及面实在是太大、太广，大到要其全面实现实在需要等到一个不可预知的未来，具有关调查显示每个人周围的设备可以达到一千至五千个，所以如果要全面实施物联网，需要让数以万亿计的物体相互通信，这是几乎无法估计的工程，但是它的意义却非同寻常，正如它无法估计的市场前景一般。正因如此，在科技日新月异的今天，这个难以想象的技术正逐渐被实施，并且逐渐的走向市场，虽然只是部分设备的互联。\n\n具有关的新闻报道2015年国内物联网市场规模将达到7500亿元，细分市场已步入稳定发展期。而在今年在北京举行的第十一届RFID与物联网国际峰会和在上海举行的第四届中国国际物联网大会中，规模各异的多家物联网企业表示已经走在谋求上市的轨道上，如朗坤物联网已经在按照上市要求做规划，而灵动快拍董事长王鹏飞对上市直言不讳，去年刚完成一轮融资进行战略布局，目标锁定创业板。这一切都预示着一场暴风雨将要到来。\n\n虽然在很早之前就有看到过有关的文章，并且自己也有涉入过其领域一段时间，但是我对物联网的理解却与官方的解释有一些出入，我总认为物联网是所有一切的互联，我曾有看过朋友做过类似的实验，相对简单的设备，比如简易电灯、简易风扇，它没有任何信息处理与分析能力，但是，正如我们平时与它通信通过开关一般，我们通过一个有处理能力的设备对其完成我们想要的操作，这里，我们选用了一个单片机，我们可以通过手机控制单片机，让单片机控制他们的电源，而单片机也记录他们的状态反馈给手机，来完成通信的过程。这也是我对智能家居的理解，所谓智能家居应该建立在原有的家居的基础上，让所有已有的设备完成我们想要的通信过程，这就借助一个类似中央控制器，这个中央控制器记录当前所有设备的状态，并且能够控制他们。\n\n基于这些我对我物联网的看法进行了修整—-所有拥有输入设施与输出设施的物件之间的通信(下文中的所有提及的物联网都是基于这个定义)，这几乎可以囊括一切，比如电灯，它的输入设施就是电压的变化，而输出设施就是它本身的所产生的亮度、温度等等对环境的影响因素。甚至有时候我自己一个人进行思考的时候，认为，其实世间万物都是基于一个独立的物联网当中，而每个独立的物联网与外界也是相互通信的，只是局限于每个独立个体自身的输入设备与输出设备的制约，比如人类是细胞与有关化学物质、微生物等相互互联的独立个体，所有机能与有关生命特征都是互联所带来的，而由于局限于人类个人的输入设施仅有视觉、听觉、触觉、嗅觉、味觉、第六感，而输出设施仅有局限空间范围的各肢体的行为，因此人类与独立个体外的事物通信的时候往往局限于空间与方法的约束，而互联网的诞生，在信息资源上弥补了空间的限制，使人类借助有关通讯设备，达到信息上的互联。\n\n其实在我的思想中科技变迁的划分很简单，人类的输入设施、输出设施被改善的越来越多样化与它们的应用与互联的过程，如刚刚第一批出货被寄予很大期望的佩戴式设备之一的谷歌眼镜，它专注于改善人类的输入设施，确实是一款不错的产品，你能想象，当你有聊天请求的时候不再是打开手机或是电脑，而是在视野右上角有个小提示，是不是很奇妙，但是它的本身的输入设施却由于本身的缺陷，需要人们去适应甚至令人担忧，目前它本身的输入设施是触摸右边眼镜架与语音控制，触摸眼镜架的想法我之前也有想到，但确实这个是基于这个设备唯一可取的方式之一，如果为了操作谷歌眼镜频繁的抬手，不得不说它的奇妙性会大打折扣，而通过语音控制，会使他的应用场合有所制约，而且语音识别在不同的环境受到不同的干扰令人担忧，我以前也想到，基于这个设备如果眼球定位进行控制，后来想想，这是否会让使用者显得异常的怪异，但这些都不是不可取。可是换一个角度，当前的一款专注于改善人类输出设施的设备MYO在2014年将推上市场，很荣幸，我也订购了。这款产品，是一个“手腕”，它通过识别人类手腕、手的各个动作来完成对它的输入，如果我们把对它与谷歌眼镜互联将会解决谷歌眼镜显而易见的问题，比如我们只要在任意的空间挥动手或手指就可以对谷歌眼镜进行控制，是否相对之前谷歌眼镜在头部的操作更加令人满意，这就是为什么互联网进化后为什么是物联网的原因之一，随着这些输入设备与输出设备逐渐多样化与相互的联通，如三星研究的隐形眼镜、苹果的iwatch等，这也将成为暴风雨来临的预兆之一。\n\n我有在一些文章里了解过物联网是云计算的一种应用，当然这是基于官方定义的物联网的概念。基于上文提出的概念，云计算是物联网的产物之一。基于物联网的额外产物，会有一个可以预见的趋向，用户的基础设施逐渐简单，最后趋于基础设施只剩下输入设备、输出设备与有关的电源，而所有的处理与存储全部基于云端，而每一方面都更加专注，比如输入设备需要考虑用户的空间运动（行为）体验，而输出设备要考虑用户的多感官协调体验。其实在某种意义上说，这个想法与谷歌的一款产品ChromeBook不谋而合，ChromeBook一直都在简化除输入、输出、电源设备以外的设施，我似乎什么时候有在某篇文章中看过有关的说明，ChromeBook的最终目的就是要达到所有处理与存储都放在云端。其实，当今很多游戏都采用的这种思想，客户端只考虑呈现，处理与数据存储基本都在服务器上，特别是页游。\n\n这些都仅仅只是将要到来的这个时代的一部分，在有关文摘中记录物联网的另外一种定义，通过射频识别、红外感应器、全球定位系统、激光扫描器等信息传感设备，按约定的协议，把任何物品与互联网连接起来，进行信息的交换和通讯，以实现智能化识别、定位、跟踪、监控和管理的一种网络，是互联网基础上延伸和扩展的网络，即无线通信与互联网结合，使物品在生产、流通、消费的各个过程都具备智能，可有效提高管理的效率和资源使用的效率。它这是从通讯过程与所产生的效益进行分析，其实本文提到的物联网的应用也还体现在了大量传感器被运用在互联过程中，并且有些为了达到某种效果也运用与某些终端上，而各类传感器的使用可以极大的提高人们对事物的认识与体验，比如上短时间，日本某企业研发了可以捕获、记忆味道与制造、散发味道的设备，此设备是手机的拓展设备，通过这个设备就能够将在不同空间上的味道进行相互传输，颠覆了人们常规的思想，在一定程度上便捷了人们的生活。\n\n最后，基于进化论的说法，这里我对互联网与物联网的区别进行说明。显而易见，互联网是物联网的基石，也是互联网的拓展，明确些说明，互联网是基于部分设备的互联，而物联网是基于所有拥有输入设施与输出设施的物件的互联，互联更加多样化，是互联的极端体现，两物体由于空间的限制无法之间的互联，可以借助其他物件对其进行互联，这就是他们的区别。基于此，我们可以提出大胆的预测，时代变迁也许在遥远的未来，互联的理念会从仅仅从空间上的突破发展到对时间上的互联。\n\n\n---\n\n#### 参考文献：\n\n- 维基百科 – 物联网(zh.wikipedia.org/wiki/物联网)\n- 中国证券网(www.cnstock.com)\n- 物联网世界（www.iotworld.com.cn）\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/互联网进化论“物联网”时代的崛起.md","raw":"title: 互联网进化论“物联网”时代的崛起\ndate: 2013-06-12 08:35:03\npermalink: 2013/06/12/互联网进化论“物联网”时代的崛起\ntags:\n- 物联网\n- 文笔\n- 议论\n\n---\n\n## “物联网”时代的崛起\n\n> 作者：龚振杰\n\n前言：其实，有时候，我常常在想，在这个暴风雨的前期，是否有很多人在和我一样，游说着身边的朋友，告诉他们，一切皆有可能。\n\n<!--more-->\n\n在研究之前，我在维基百科中查看了官方的定义—-物联网是一个基于互联网、传统电信网络等信息载体，让所有能够被独立寻址的普通物理对象实现互联互通网络。确实，这个的涉及面实在是太大、太广，大到要其全面实现实在需要等到一个不可预知的未来，具有关调查显示每个人周围的设备可以达到一千至五千个，所以如果要全面实施物联网，需要让数以万亿计的物体相互通信，这是几乎无法估计的工程，但是它的意义却非同寻常，正如它无法估计的市场前景一般。正因如此，在科技日新月异的今天，这个难以想象的技术正逐渐被实施，并且逐渐的走向市场，虽然只是部分设备的互联。\n\n具有关的新闻报道2015年国内物联网市场规模将达到7500亿元，细分市场已步入稳定发展期。而在今年在北京举行的第十一届RFID与物联网国际峰会和在上海举行的第四届中国国际物联网大会中，规模各异的多家物联网企业表示已经走在谋求上市的轨道上，如朗坤物联网已经在按照上市要求做规划，而灵动快拍董事长王鹏飞对上市直言不讳，去年刚完成一轮融资进行战略布局，目标锁定创业板。这一切都预示着一场暴风雨将要到来。\n\n虽然在很早之前就有看到过有关的文章，并且自己也有涉入过其领域一段时间，但是我对物联网的理解却与官方的解释有一些出入，我总认为物联网是所有一切的互联，我曾有看过朋友做过类似的实验，相对简单的设备，比如简易电灯、简易风扇，它没有任何信息处理与分析能力，但是，正如我们平时与它通信通过开关一般，我们通过一个有处理能力的设备对其完成我们想要的操作，这里，我们选用了一个单片机，我们可以通过手机控制单片机，让单片机控制他们的电源，而单片机也记录他们的状态反馈给手机，来完成通信的过程。这也是我对智能家居的理解，所谓智能家居应该建立在原有的家居的基础上，让所有已有的设备完成我们想要的通信过程，这就借助一个类似中央控制器，这个中央控制器记录当前所有设备的状态，并且能够控制他们。\n\n基于这些我对我物联网的看法进行了修整—-所有拥有输入设施与输出设施的物件之间的通信(下文中的所有提及的物联网都是基于这个定义)，这几乎可以囊括一切，比如电灯，它的输入设施就是电压的变化，而输出设施就是它本身的所产生的亮度、温度等等对环境的影响因素。甚至有时候我自己一个人进行思考的时候，认为，其实世间万物都是基于一个独立的物联网当中，而每个独立的物联网与外界也是相互通信的，只是局限于每个独立个体自身的输入设备与输出设备的制约，比如人类是细胞与有关化学物质、微生物等相互互联的独立个体，所有机能与有关生命特征都是互联所带来的，而由于局限于人类个人的输入设施仅有视觉、听觉、触觉、嗅觉、味觉、第六感，而输出设施仅有局限空间范围的各肢体的行为，因此人类与独立个体外的事物通信的时候往往局限于空间与方法的约束，而互联网的诞生，在信息资源上弥补了空间的限制，使人类借助有关通讯设备，达到信息上的互联。\n\n其实在我的思想中科技变迁的划分很简单，人类的输入设施、输出设施被改善的越来越多样化与它们的应用与互联的过程，如刚刚第一批出货被寄予很大期望的佩戴式设备之一的谷歌眼镜，它专注于改善人类的输入设施，确实是一款不错的产品，你能想象，当你有聊天请求的时候不再是打开手机或是电脑，而是在视野右上角有个小提示，是不是很奇妙，但是它的本身的输入设施却由于本身的缺陷，需要人们去适应甚至令人担忧，目前它本身的输入设施是触摸右边眼镜架与语音控制，触摸眼镜架的想法我之前也有想到，但确实这个是基于这个设备唯一可取的方式之一，如果为了操作谷歌眼镜频繁的抬手，不得不说它的奇妙性会大打折扣，而通过语音控制，会使他的应用场合有所制约，而且语音识别在不同的环境受到不同的干扰令人担忧，我以前也想到，基于这个设备如果眼球定位进行控制，后来想想，这是否会让使用者显得异常的怪异，但这些都不是不可取。可是换一个角度，当前的一款专注于改善人类输出设施的设备MYO在2014年将推上市场，很荣幸，我也订购了。这款产品，是一个“手腕”，它通过识别人类手腕、手的各个动作来完成对它的输入，如果我们把对它与谷歌眼镜互联将会解决谷歌眼镜显而易见的问题，比如我们只要在任意的空间挥动手或手指就可以对谷歌眼镜进行控制，是否相对之前谷歌眼镜在头部的操作更加令人满意，这就是为什么互联网进化后为什么是物联网的原因之一，随着这些输入设备与输出设备逐渐多样化与相互的联通，如三星研究的隐形眼镜、苹果的iwatch等，这也将成为暴风雨来临的预兆之一。\n\n我有在一些文章里了解过物联网是云计算的一种应用，当然这是基于官方定义的物联网的概念。基于上文提出的概念，云计算是物联网的产物之一。基于物联网的额外产物，会有一个可以预见的趋向，用户的基础设施逐渐简单，最后趋于基础设施只剩下输入设备、输出设备与有关的电源，而所有的处理与存储全部基于云端，而每一方面都更加专注，比如输入设备需要考虑用户的空间运动（行为）体验，而输出设备要考虑用户的多感官协调体验。其实在某种意义上说，这个想法与谷歌的一款产品ChromeBook不谋而合，ChromeBook一直都在简化除输入、输出、电源设备以外的设施，我似乎什么时候有在某篇文章中看过有关的说明，ChromeBook的最终目的就是要达到所有处理与存储都放在云端。其实，当今很多游戏都采用的这种思想，客户端只考虑呈现，处理与数据存储基本都在服务器上，特别是页游。\n\n这些都仅仅只是将要到来的这个时代的一部分，在有关文摘中记录物联网的另外一种定义，通过射频识别、红外感应器、全球定位系统、激光扫描器等信息传感设备，按约定的协议，把任何物品与互联网连接起来，进行信息的交换和通讯，以实现智能化识别、定位、跟踪、监控和管理的一种网络，是互联网基础上延伸和扩展的网络，即无线通信与互联网结合，使物品在生产、流通、消费的各个过程都具备智能，可有效提高管理的效率和资源使用的效率。它这是从通讯过程与所产生的效益进行分析，其实本文提到的物联网的应用也还体现在了大量传感器被运用在互联过程中，并且有些为了达到某种效果也运用与某些终端上，而各类传感器的使用可以极大的提高人们对事物的认识与体验，比如上短时间，日本某企业研发了可以捕获、记忆味道与制造、散发味道的设备，此设备是手机的拓展设备，通过这个设备就能够将在不同空间上的味道进行相互传输，颠覆了人们常规的思想，在一定程度上便捷了人们的生活。\n\n最后，基于进化论的说法，这里我对互联网与物联网的区别进行说明。显而易见，互联网是物联网的基石，也是互联网的拓展，明确些说明，互联网是基于部分设备的互联，而物联网是基于所有拥有输入设施与输出设施的物件的互联，互联更加多样化，是互联的极端体现，两物体由于空间的限制无法之间的互联，可以借助其他物件对其进行互联，这就是他们的区别。基于此，我们可以提出大胆的预测，时代变迁也许在遥远的未来，互联的理念会从仅仅从空间上的突破发展到对时间上的互联。\n\n\n---\n\n#### 参考文献：\n\n- 维基百科 – 物联网(zh.wikipedia.org/wiki/物联网)\n- 中国证券网(www.cnstock.com)\n- 物联网世界（www.iotworld.com.cn）\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2013/06/12/互联网进化论“物联网”时代的崛起","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66jz004q95buuyhypdmh","content":"<h2 id=\"“物联网”时代的崛起\"><a href=\"#“物联网”时代的崛起\" class=\"headerlink\" title=\"“物联网”时代的崛起\"></a>“物联网”时代的崛起</h2><blockquote>\n<p>作者：龚振杰</p>\n</blockquote>\n<p>前言：其实，有时候，我常常在想，在这个暴风雨的前期，是否有很多人在和我一样，游说着身边的朋友，告诉他们，一切皆有可能。</p>\n<a id=\"more\"></a>\n<p>在研究之前，我在维基百科中查看了官方的定义—-物联网是一个基于互联网、传统电信网络等信息载体，让所有能够被独立寻址的普通物理对象实现互联互通网络。确实，这个的涉及面实在是太大、太广，大到要其全面实现实在需要等到一个不可预知的未来，具有关调查显示每个人周围的设备可以达到一千至五千个，所以如果要全面实施物联网，需要让数以万亿计的物体相互通信，这是几乎无法估计的工程，但是它的意义却非同寻常，正如它无法估计的市场前景一般。正因如此，在科技日新月异的今天，这个难以想象的技术正逐渐被实施，并且逐渐的走向市场，虽然只是部分设备的互联。</p>\n<p>具有关的新闻报道2015年国内物联网市场规模将达到7500亿元，细分市场已步入稳定发展期。而在今年在北京举行的第十一届RFID与物联网国际峰会和在上海举行的第四届中国国际物联网大会中，规模各异的多家物联网企业表示已经走在谋求上市的轨道上，如朗坤物联网已经在按照上市要求做规划，而灵动快拍董事长王鹏飞对上市直言不讳，去年刚完成一轮融资进行战略布局，目标锁定创业板。这一切都预示着一场暴风雨将要到来。</p>\n<p>虽然在很早之前就有看到过有关的文章，并且自己也有涉入过其领域一段时间，但是我对物联网的理解却与官方的解释有一些出入，我总认为物联网是所有一切的互联，我曾有看过朋友做过类似的实验，相对简单的设备，比如简易电灯、简易风扇，它没有任何信息处理与分析能力，但是，正如我们平时与它通信通过开关一般，我们通过一个有处理能力的设备对其完成我们想要的操作，这里，我们选用了一个单片机，我们可以通过手机控制单片机，让单片机控制他们的电源，而单片机也记录他们的状态反馈给手机，来完成通信的过程。这也是我对智能家居的理解，所谓智能家居应该建立在原有的家居的基础上，让所有已有的设备完成我们想要的通信过程，这就借助一个类似中央控制器，这个中央控制器记录当前所有设备的状态，并且能够控制他们。</p>\n<p>基于这些我对我物联网的看法进行了修整—-所有拥有输入设施与输出设施的物件之间的通信(下文中的所有提及的物联网都是基于这个定义)，这几乎可以囊括一切，比如电灯，它的输入设施就是电压的变化，而输出设施就是它本身的所产生的亮度、温度等等对环境的影响因素。甚至有时候我自己一个人进行思考的时候，认为，其实世间万物都是基于一个独立的物联网当中，而每个独立的物联网与外界也是相互通信的，只是局限于每个独立个体自身的输入设备与输出设备的制约，比如人类是细胞与有关化学物质、微生物等相互互联的独立个体，所有机能与有关生命特征都是互联所带来的，而由于局限于人类个人的输入设施仅有视觉、听觉、触觉、嗅觉、味觉、第六感，而输出设施仅有局限空间范围的各肢体的行为，因此人类与独立个体外的事物通信的时候往往局限于空间与方法的约束，而互联网的诞生，在信息资源上弥补了空间的限制，使人类借助有关通讯设备，达到信息上的互联。</p>\n<p>其实在我的思想中科技变迁的划分很简单，人类的输入设施、输出设施被改善的越来越多样化与它们的应用与互联的过程，如刚刚第一批出货被寄予很大期望的佩戴式设备之一的谷歌眼镜，它专注于改善人类的输入设施，确实是一款不错的产品，你能想象，当你有聊天请求的时候不再是打开手机或是电脑，而是在视野右上角有个小提示，是不是很奇妙，但是它的本身的输入设施却由于本身的缺陷，需要人们去适应甚至令人担忧，目前它本身的输入设施是触摸右边眼镜架与语音控制，触摸眼镜架的想法我之前也有想到，但确实这个是基于这个设备唯一可取的方式之一，如果为了操作谷歌眼镜频繁的抬手，不得不说它的奇妙性会大打折扣，而通过语音控制，会使他的应用场合有所制约，而且语音识别在不同的环境受到不同的干扰令人担忧，我以前也想到，基于这个设备如果眼球定位进行控制，后来想想，这是否会让使用者显得异常的怪异，但这些都不是不可取。可是换一个角度，当前的一款专注于改善人类输出设施的设备MYO在2014年将推上市场，很荣幸，我也订购了。这款产品，是一个“手腕”，它通过识别人类手腕、手的各个动作来完成对它的输入，如果我们把对它与谷歌眼镜互联将会解决谷歌眼镜显而易见的问题，比如我们只要在任意的空间挥动手或手指就可以对谷歌眼镜进行控制，是否相对之前谷歌眼镜在头部的操作更加令人满意，这就是为什么互联网进化后为什么是物联网的原因之一，随着这些输入设备与输出设备逐渐多样化与相互的联通，如三星研究的隐形眼镜、苹果的iwatch等，这也将成为暴风雨来临的预兆之一。</p>\n<p>我有在一些文章里了解过物联网是云计算的一种应用，当然这是基于官方定义的物联网的概念。基于上文提出的概念，云计算是物联网的产物之一。基于物联网的额外产物，会有一个可以预见的趋向，用户的基础设施逐渐简单，最后趋于基础设施只剩下输入设备、输出设备与有关的电源，而所有的处理与存储全部基于云端，而每一方面都更加专注，比如输入设备需要考虑用户的空间运动（行为）体验，而输出设备要考虑用户的多感官协调体验。其实在某种意义上说，这个想法与谷歌的一款产品ChromeBook不谋而合，ChromeBook一直都在简化除输入、输出、电源设备以外的设施，我似乎什么时候有在某篇文章中看过有关的说明，ChromeBook的最终目的就是要达到所有处理与存储都放在云端。其实，当今很多游戏都采用的这种思想，客户端只考虑呈现，处理与数据存储基本都在服务器上，特别是页游。</p>\n<p>这些都仅仅只是将要到来的这个时代的一部分，在有关文摘中记录物联网的另外一种定义，通过射频识别、红外感应器、全球定位系统、激光扫描器等信息传感设备，按约定的协议，把任何物品与互联网连接起来，进行信息的交换和通讯，以实现智能化识别、定位、跟踪、监控和管理的一种网络，是互联网基础上延伸和扩展的网络，即无线通信与互联网结合，使物品在生产、流通、消费的各个过程都具备智能，可有效提高管理的效率和资源使用的效率。它这是从通讯过程与所产生的效益进行分析，其实本文提到的物联网的应用也还体现在了大量传感器被运用在互联过程中，并且有些为了达到某种效果也运用与某些终端上，而各类传感器的使用可以极大的提高人们对事物的认识与体验，比如上短时间，日本某企业研发了可以捕获、记忆味道与制造、散发味道的设备，此设备是手机的拓展设备，通过这个设备就能够将在不同空间上的味道进行相互传输，颠覆了人们常规的思想，在一定程度上便捷了人们的生活。</p>\n<p>最后，基于进化论的说法，这里我对互联网与物联网的区别进行说明。显而易见，互联网是物联网的基石，也是互联网的拓展，明确些说明，互联网是基于部分设备的互联，而物联网是基于所有拥有输入设施与输出设施的物件的互联，互联更加多样化，是互联的极端体现，两物体由于空间的限制无法之间的互联，可以借助其他物件对其进行互联，这就是他们的区别。基于此，我们可以提出大胆的预测，时代变迁也许在遥远的未来，互联的理念会从仅仅从空间上的突破发展到对时间上的互联。</p>\n<hr>\n<h4 id=\"参考文献：\"><a href=\"#参考文献：\" class=\"headerlink\" title=\"参考文献：\"></a>参考文献：</h4><ul>\n<li>维基百科 – 物联网(zh.wikipedia.org/wiki/物联网)</li>\n<li>中国证券网(www.cnstock.com)</li>\n<li>物联网世界（www.iotworld.com.cn）</li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<h2 id=\"“物联网”时代的崛起\"><a href=\"#“物联网”时代的崛起\" class=\"headerlink\" title=\"“物联网”时代的崛起\"></a>“物联网”时代的崛起</h2><blockquote>\n<p>作者：龚振杰</p>\n</blockquote>\n<p>前言：其实，有时候，我常常在想，在这个暴风雨的前期，是否有很多人在和我一样，游说着身边的朋友，告诉他们，一切皆有可能。</p>","more":"<p>在研究之前，我在维基百科中查看了官方的定义—-物联网是一个基于互联网、传统电信网络等信息载体，让所有能够被独立寻址的普通物理对象实现互联互通网络。确实，这个的涉及面实在是太大、太广，大到要其全面实现实在需要等到一个不可预知的未来，具有关调查显示每个人周围的设备可以达到一千至五千个，所以如果要全面实施物联网，需要让数以万亿计的物体相互通信，这是几乎无法估计的工程，但是它的意义却非同寻常，正如它无法估计的市场前景一般。正因如此，在科技日新月异的今天，这个难以想象的技术正逐渐被实施，并且逐渐的走向市场，虽然只是部分设备的互联。</p>\n<p>具有关的新闻报道2015年国内物联网市场规模将达到7500亿元，细分市场已步入稳定发展期。而在今年在北京举行的第十一届RFID与物联网国际峰会和在上海举行的第四届中国国际物联网大会中，规模各异的多家物联网企业表示已经走在谋求上市的轨道上，如朗坤物联网已经在按照上市要求做规划，而灵动快拍董事长王鹏飞对上市直言不讳，去年刚完成一轮融资进行战略布局，目标锁定创业板。这一切都预示着一场暴风雨将要到来。</p>\n<p>虽然在很早之前就有看到过有关的文章，并且自己也有涉入过其领域一段时间，但是我对物联网的理解却与官方的解释有一些出入，我总认为物联网是所有一切的互联，我曾有看过朋友做过类似的实验，相对简单的设备，比如简易电灯、简易风扇，它没有任何信息处理与分析能力，但是，正如我们平时与它通信通过开关一般，我们通过一个有处理能力的设备对其完成我们想要的操作，这里，我们选用了一个单片机，我们可以通过手机控制单片机，让单片机控制他们的电源，而单片机也记录他们的状态反馈给手机，来完成通信的过程。这也是我对智能家居的理解，所谓智能家居应该建立在原有的家居的基础上，让所有已有的设备完成我们想要的通信过程，这就借助一个类似中央控制器，这个中央控制器记录当前所有设备的状态，并且能够控制他们。</p>\n<p>基于这些我对我物联网的看法进行了修整—-所有拥有输入设施与输出设施的物件之间的通信(下文中的所有提及的物联网都是基于这个定义)，这几乎可以囊括一切，比如电灯，它的输入设施就是电压的变化，而输出设施就是它本身的所产生的亮度、温度等等对环境的影响因素。甚至有时候我自己一个人进行思考的时候，认为，其实世间万物都是基于一个独立的物联网当中，而每个独立的物联网与外界也是相互通信的，只是局限于每个独立个体自身的输入设备与输出设备的制约，比如人类是细胞与有关化学物质、微生物等相互互联的独立个体，所有机能与有关生命特征都是互联所带来的，而由于局限于人类个人的输入设施仅有视觉、听觉、触觉、嗅觉、味觉、第六感，而输出设施仅有局限空间范围的各肢体的行为，因此人类与独立个体外的事物通信的时候往往局限于空间与方法的约束，而互联网的诞生，在信息资源上弥补了空间的限制，使人类借助有关通讯设备，达到信息上的互联。</p>\n<p>其实在我的思想中科技变迁的划分很简单，人类的输入设施、输出设施被改善的越来越多样化与它们的应用与互联的过程，如刚刚第一批出货被寄予很大期望的佩戴式设备之一的谷歌眼镜，它专注于改善人类的输入设施，确实是一款不错的产品，你能想象，当你有聊天请求的时候不再是打开手机或是电脑，而是在视野右上角有个小提示，是不是很奇妙，但是它的本身的输入设施却由于本身的缺陷，需要人们去适应甚至令人担忧，目前它本身的输入设施是触摸右边眼镜架与语音控制，触摸眼镜架的想法我之前也有想到，但确实这个是基于这个设备唯一可取的方式之一，如果为了操作谷歌眼镜频繁的抬手，不得不说它的奇妙性会大打折扣，而通过语音控制，会使他的应用场合有所制约，而且语音识别在不同的环境受到不同的干扰令人担忧，我以前也想到，基于这个设备如果眼球定位进行控制，后来想想，这是否会让使用者显得异常的怪异，但这些都不是不可取。可是换一个角度，当前的一款专注于改善人类输出设施的设备MYO在2014年将推上市场，很荣幸，我也订购了。这款产品，是一个“手腕”，它通过识别人类手腕、手的各个动作来完成对它的输入，如果我们把对它与谷歌眼镜互联将会解决谷歌眼镜显而易见的问题，比如我们只要在任意的空间挥动手或手指就可以对谷歌眼镜进行控制，是否相对之前谷歌眼镜在头部的操作更加令人满意，这就是为什么互联网进化后为什么是物联网的原因之一，随着这些输入设备与输出设备逐渐多样化与相互的联通，如三星研究的隐形眼镜、苹果的iwatch等，这也将成为暴风雨来临的预兆之一。</p>\n<p>我有在一些文章里了解过物联网是云计算的一种应用，当然这是基于官方定义的物联网的概念。基于上文提出的概念，云计算是物联网的产物之一。基于物联网的额外产物，会有一个可以预见的趋向，用户的基础设施逐渐简单，最后趋于基础设施只剩下输入设备、输出设备与有关的电源，而所有的处理与存储全部基于云端，而每一方面都更加专注，比如输入设备需要考虑用户的空间运动（行为）体验，而输出设备要考虑用户的多感官协调体验。其实在某种意义上说，这个想法与谷歌的一款产品ChromeBook不谋而合，ChromeBook一直都在简化除输入、输出、电源设备以外的设施，我似乎什么时候有在某篇文章中看过有关的说明，ChromeBook的最终目的就是要达到所有处理与存储都放在云端。其实，当今很多游戏都采用的这种思想，客户端只考虑呈现，处理与数据存储基本都在服务器上，特别是页游。</p>\n<p>这些都仅仅只是将要到来的这个时代的一部分，在有关文摘中记录物联网的另外一种定义，通过射频识别、红外感应器、全球定位系统、激光扫描器等信息传感设备，按约定的协议，把任何物品与互联网连接起来，进行信息的交换和通讯，以实现智能化识别、定位、跟踪、监控和管理的一种网络，是互联网基础上延伸和扩展的网络，即无线通信与互联网结合，使物品在生产、流通、消费的各个过程都具备智能，可有效提高管理的效率和资源使用的效率。它这是从通讯过程与所产生的效益进行分析，其实本文提到的物联网的应用也还体现在了大量传感器被运用在互联过程中，并且有些为了达到某种效果也运用与某些终端上，而各类传感器的使用可以极大的提高人们对事物的认识与体验，比如上短时间，日本某企业研发了可以捕获、记忆味道与制造、散发味道的设备，此设备是手机的拓展设备，通过这个设备就能够将在不同空间上的味道进行相互传输，颠覆了人们常规的思想，在一定程度上便捷了人们的生活。</p>\n<p>最后，基于进化论的说法，这里我对互联网与物联网的区别进行说明。显而易见，互联网是物联网的基石，也是互联网的拓展，明确些说明，互联网是基于部分设备的互联，而物联网是基于所有拥有输入设施与输出设施的物件的互联，互联更加多样化，是互联的极端体现，两物体由于空间的限制无法之间的互联，可以借助其他物件对其进行互联，这就是他们的区别。基于此，我们可以提出大胆的预测，时代变迁也许在遥远的未来，互联的理念会从仅仅从空间上的突破发展到对时间上的互联。</p>\n<hr>\n<h4 id=\"参考文献：\"><a href=\"#参考文献：\" class=\"headerlink\" title=\"参考文献：\"></a>参考文献：</h4><ul>\n<li>维基百科 – 物联网(zh.wikipedia.org/wiki/物联网)</li>\n<li>中国证券网(www.cnstock.com)</li>\n<li>物联网世界（www.iotworld.com.cn）</li>\n</ul>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"【原创】【最新beta2.3】《鳝溪菜单》更新专题","date":"2012-12-11T00:35:03.000Z","_content":"\n![](/img/shanxi-1.png)\n\n2013年1月2日： 由于接下来进入考试月，将不再进行更新。下学期将抽空推出一款服务系统，周期为半年希望大家多多支持。\n\n\n<!--more-->\n\n《鳝溪菜单 beta 2.4》\n\n> 2012年1月 修复部分小bug\n\n> 2012年12月30日 19：40 更新部分bug\n> 2012年12月29日 更新《鳝溪菜单 beta 2.3》\n\n## 更新内容：\n\n1.重新设计编排整个UI界面\n2.添加短信订餐功能\n3.添加一键催单功能\n4.添加订餐历史查阅功能\n\n> 2012年12月12日更新《鳝溪菜单 beta1.3》\n\n## 更新内容：\n\n1.添加开启自动监测版本更新\n2.添加语音搜索\n3.修复菜系列表出现重复错误点击\n4.优化菜系加载页加载速度\n5.取消菜系加载时眼花而无用的滚动\n\n> 2012年12月11日更新 《鳝溪菜单 beta 1.1》\n\n## 更新内容：\n\n1.修复在无网络状态下，会打开两次主界面。\n2.修复在无网络状态下，冗余的上传下载测试。\n3.修复在首页进入菜单搜索，搜索菜名时获得错误的店名Extra导致，进入店铺页面加载内容失败.\n4.首页搜索操作优化，当点击记录时，键盘进行隐藏。\n\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/原创-最新beta2.3-《鳝溪菜单》更新专题.md","raw":"title: 【原创】【最新beta2.3】《鳝溪菜单》更新专题\ndate: 2012-12-11 08:35:03\npermalink: 2012/12/11/原创-最新beta2\ntags:\n- 项目\n- app\n- Android\n\n---\n\n![](/img/shanxi-1.png)\n\n2013年1月2日： 由于接下来进入考试月，将不再进行更新。下学期将抽空推出一款服务系统，周期为半年希望大家多多支持。\n\n\n<!--more-->\n\n《鳝溪菜单 beta 2.4》\n\n> 2012年1月 修复部分小bug\n\n> 2012年12月30日 19：40 更新部分bug\n> 2012年12月29日 更新《鳝溪菜单 beta 2.3》\n\n## 更新内容：\n\n1.重新设计编排整个UI界面\n2.添加短信订餐功能\n3.添加一键催单功能\n4.添加订餐历史查阅功能\n\n> 2012年12月12日更新《鳝溪菜单 beta1.3》\n\n## 更新内容：\n\n1.添加开启自动监测版本更新\n2.添加语音搜索\n3.修复菜系列表出现重复错误点击\n4.优化菜系加载页加载速度\n5.取消菜系加载时眼花而无用的滚动\n\n> 2012年12月11日更新 《鳝溪菜单 beta 1.1》\n\n## 更新内容：\n\n1.修复在无网络状态下，会打开两次主界面。\n2.修复在无网络状态下，冗余的上传下载测试。\n3.修复在首页进入菜单搜索，搜索菜名时获得错误的店名Extra导致，进入店铺页面加载内容失败.\n4.首页搜索操作优化，当点击记录时，键盘进行隐藏。\n\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2012/12/11/原创-最新beta2","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66k0004s95buf1qjqhyq","content":"<p><img src=\"/img/shanxi-1.png\" alt=\"\"></p>\n<p>2013年1月2日： 由于接下来进入考试月，将不再进行更新。下学期将抽空推出一款服务系统，周期为半年希望大家多多支持。</p>\n<a id=\"more\"></a>\n<p>《鳝溪菜单 beta 2.4》</p>\n<blockquote>\n<p>2012年1月 修复部分小bug</p>\n<p>2012年12月30日 19：40 更新部分bug<br>2012年12月29日 更新《鳝溪菜单 beta 2.3》</p>\n</blockquote>\n<h2 id=\"更新内容：\"><a href=\"#更新内容：\" class=\"headerlink\" title=\"更新内容：\"></a>更新内容：</h2><p>1.重新设计编排整个UI界面<br>2.添加短信订餐功能<br>3.添加一键催单功能<br>4.添加订餐历史查阅功能</p>\n<blockquote>\n<p>2012年12月12日更新《鳝溪菜单 beta1.3》</p>\n</blockquote>\n<h2 id=\"更新内容：-1\"><a href=\"#更新内容：-1\" class=\"headerlink\" title=\"更新内容：\"></a>更新内容：</h2><p>1.添加开启自动监测版本更新<br>2.添加语音搜索<br>3.修复菜系列表出现重复错误点击<br>4.优化菜系加载页加载速度<br>5.取消菜系加载时眼花而无用的滚动</p>\n<blockquote>\n<p>2012年12月11日更新 《鳝溪菜单 beta 1.1》</p>\n</blockquote>\n<h2 id=\"更新内容：-2\"><a href=\"#更新内容：-2\" class=\"headerlink\" title=\"更新内容：\"></a>更新内容：</h2><p>1.修复在无网络状态下，会打开两次主界面。<br>2.修复在无网络状态下，冗余的上传下载测试。<br>3.修复在首页进入菜单搜索，搜索菜名时获得错误的店名Extra导致，进入店铺页面加载内容失败.<br>4.首页搜索操作优化，当点击记录时，键盘进行隐藏。</p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<p><img src=\"/img/shanxi-1.png\" alt=\"\"></p>\n<p>2013年1月2日： 由于接下来进入考试月，将不再进行更新。下学期将抽空推出一款服务系统，周期为半年希望大家多多支持。</p>","more":"<p>《鳝溪菜单 beta 2.4》</p>\n<blockquote>\n<p>2012年1月 修复部分小bug</p>\n<p>2012年12月30日 19：40 更新部分bug<br>2012年12月29日 更新《鳝溪菜单 beta 2.3》</p>\n</blockquote>\n<h2 id=\"更新内容：\"><a href=\"#更新内容：\" class=\"headerlink\" title=\"更新内容：\"></a>更新内容：</h2><p>1.重新设计编排整个UI界面<br>2.添加短信订餐功能<br>3.添加一键催单功能<br>4.添加订餐历史查阅功能</p>\n<blockquote>\n<p>2012年12月12日更新《鳝溪菜单 beta1.3》</p>\n</blockquote>\n<h2 id=\"更新内容：-1\"><a href=\"#更新内容：-1\" class=\"headerlink\" title=\"更新内容：\"></a>更新内容：</h2><p>1.添加开启自动监测版本更新<br>2.添加语音搜索<br>3.修复菜系列表出现重复错误点击<br>4.优化菜系加载页加载速度<br>5.取消菜系加载时眼花而无用的滚动</p>\n<blockquote>\n<p>2012年12月11日更新 《鳝溪菜单 beta 1.1》</p>\n</blockquote>\n<h2 id=\"更新内容：-2\"><a href=\"#更新内容：-2\" class=\"headerlink\" title=\"更新内容：\"></a>更新内容：</h2><p>1.修复在无网络状态下，会打开两次主界面。<br>2.修复在无网络状态下，冗余的上传下载测试。<br>3.修复在首页进入菜单搜索，搜索菜名时获得错误的店名Extra导致，进入店铺页面加载内容失败.<br>4.首页搜索操作优化，当点击记录时，键盘进行隐藏。</p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"【原创】基于Cocos2d-x连连看游戏","date":"2012-11-02T00:35:03.000Z","_content":"\n> 2012年从事cocos2d-x游戏开发时的实习任务。\n\n<!--more-->\n![](/img/cocos2d-1.png)\n\n源码git地址：https://github.com/Jacksgong/COCOS2D-X_LINKGAME\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/基于Cocos2d-连连看.md","raw":"title: 【原创】基于Cocos2d-x连连看游戏\ndate: 2012-11-02 08:35:03\npermalink: 2012/11/02/基于Cocos2d-连连看\ntags:\n- 项目\n- Cocos2d-x\n- 游戏\n\n---\n\n> 2012年从事cocos2d-x游戏开发时的实习任务。\n\n<!--more-->\n![](/img/cocos2d-1.png)\n\n源码git地址：https://github.com/Jacksgong/COCOS2D-X_LINKGAME\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2012/11/02/基于Cocos2d-连连看","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66k0004u95buy3lmgvos","content":"<blockquote>\n<p>2012年从事cocos2d-x游戏开发时的实习任务。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p><img src=\"/img/cocos2d-1.png\" alt=\"\"></p>\n<p>源码git地址：<a href=\"https://github.com/Jacksgong/COCOS2D-X_LINKGAME\" target=\"_blank\" rel=\"external\">https://github.com/Jacksgong/COCOS2D-X_LINKGAME</a></p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>2012年从事cocos2d-x游戏开发时的实习任务。</p>\n</blockquote>","more":"<p><img src=\"/img/cocos2d-1.png\" alt=\"\"></p>\n<p>源码git地址：<a href=\"https://github.com/Jacksgong/COCOS2D-X_LINKGAME\">https://github.com/Jacksgong/COCOS2D-X_LINKGAME</a></p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"大二暑期 win8体验录制","date":"2012-11-17T00:35:03.000Z","_content":"\n> 大二暑假抢先体验Win8，用于宣传用Discuz搭建的学院的论坛\n\n<!--more-->\n<iframe height=498 width=510 src=\"http://player.youku.com/embed/XNDQ0NjU0MDY0\" frameborder=0 allowfullscreen></iframe>\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/大二暑期-win8体验录制.md","raw":"title: 大二暑期 win8体验录制\ndate: 2012-11-17 08:35:03\npermalink: 2012/11/17/大二暑期-win8体验录制\ntags:\n- 娱乐\n- 视频\n\n---\n\n> 大二暑假抢先体验Win8，用于宣传用Discuz搭建的学院的论坛\n\n<!--more-->\n<iframe height=498 width=510 src=\"http://player.youku.com/embed/XNDQ0NjU0MDY0\" frameborder=0 allowfullscreen></iframe>\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2012/11/17/大二暑期-win8体验录制","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66k1004x95buqmyir5h7","content":"<blockquote>\n<p>大二暑假抢先体验Win8，用于宣传用Discuz搭建的学院的论坛</p>\n</blockquote>\n<a id=\"more\"></a>\n<iframe height=\"498\" width=\"510\" src=\"http://player.youku.com/embed/XNDQ0NjU0MDY0\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>大二暑假抢先体验Win8，用于宣传用Discuz搭建的学院的论坛</p>\n</blockquote>","more":"<iframe height=498 width=510 src=\"http://player.youku.com/embed/XNDQ0NjU0MDY0\" frameborder=0 allowfullscreen></iframe>\n\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"【异步加载专题】【原创分析】中级篇-各类架构与线程数控制","date":"2012-12-31T00:35:03.000Z","_content":"\n> 本文分析此源码(源码作者也许叫cindy吧）：http://s.yunio.com/Wd8Nxm\n\n![](/img/async-1.png)\n\n<!--more-->\n\n> 本项目非常值得分析的一点除了它的异步加载外，还有它良好的文件结构：\n固定的临时文件夹创建放在MyApp(继承于Application）（如备注，当application/package被创建时，此函数被实例化:\n\n```\npackage cindy.android.test.synclistview;\n\nimport java.io.File;\n\nimport android.app.Application;\nimport android.os.Environment;\n\npublic class MyApp extends Application{\n//will cause that class to be instantiated for you when the process for your application/package is created...\n\t//create cache on install application\n\t@Override\n\tpublic void onCreate() {\n\t\t// TODO Auto-generated method stub\n\t\tsuper.onCreate();\n\t\tFile f = new File(Environment.getExternalStorageDirectory()+\"/TestSyncListView/\");\n\t\tif(!f.exists()){\n\t\t\tf.mkdir();\n\t\t}\n\t}\n\n}\n```\n\n当然了，需要在AndroidManifest.xml中定义：\n\n```\n........\n```\n\nLog记录做一个类，这样即可以统一管理TAG也可以清晰的通过此类明白自己项目会涉及到问题.并且统一管理对应的显示规则：\n\n```\npackage cindy.android.test.synclistview;\n\nimport android.content.Context;\nimport android.util.Log;\nimport android.widget.Toast;\n\npublic class DebugUtil {\n    public static final String TAG = \"DebugUtil\";\n    public static final boolean DEBUG = true;\n     //for debug show log.\n    public static void toast(Context context,String content){\n        Toast.makeText(context, content, Toast.LENGTH_SHORT).show();\n    }\n\n    public static void debug(String tag,String msg){\n        if (DEBUG) {\n            Log.d(tag, msg);\n        }\n    }\n\n    public static void debug(String msg){\n        if (DEBUG) {\n            Log.d(TAG, msg);\n        }\n    }\n\n    public static void error(String tag,String error){\n        Log.e(tag, error);\n    }\n\n    public static void error(String error){\n        Log.e(TAG, error);\n    }\n}\n```\n\n本项目封装了入口Activity的父类：\n\n```\npackage cindy.android.test.synclistview;\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.os.Message;\nimport android.view.Window;\nimport android.widget.Toast;\n\npublic abstract class AbstructCommonActivity extends Activity  {\n\n\t//Main Activity's Parent\n\t//Window Feature_no_Title\n\t//Hanlder to Show some tip.\n\tprivate MyHandler handler = new MyHandler();\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\trequestWindowFeature(Window.FEATURE_NO_TITLE);\n\t}\n\n\tprotected void handleOtherMessage(int flag){\n\n\t}\n\n\tpublic void sendMessage(int flag) {\n\t\thandler.sendEmptyMessage(flag);\n\t}\n\n\tpublic void sendMessageDely(int flag,long delayMillis){\n\t\thandler.sendEmptyMessageDelayed(flag, delayMillis);\n\t}\n\n\tpublic void showToast(String toast_message){\n\t\thandler.toast_message = toast_message;\n\t\tsendMessage(MyHandler.SHOW_STR_TOAST);\n\t}\n\n\tpublic void showToast(int res){\n\t\thandler.toast_res = res;\n\t\tsendMessage(MyHandler.SHOW_RES_TOAST);\n\t}\n\n\tprivate class MyHandler extends Handler {\n\t\tpublic static final int SHOW_STR_TOAST = 0;\n\t\tpublic static final int SHOW_RES_TOAST = 1;\n\n\t\tprivate String toast_message=null;\n\t\tprivate int toast_res;\n\n\t\t@Override\n\t\tpublic void handleMessage(Message msg) {\n\t\t\tif (!Thread.currentThread().isInterrupted()) {\n\t\t\t\tswitch (msg.what) {\n\t\t\t\t\tcase SHOW_STR_TOAST:\n\t\t\t\t\t\tToast.makeText(getBaseContext(), toast_message, 1).show();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase SHOW_RES_TOAST:\n\t\t\t\t\t\tToast.makeText(getBaseContext(), toast_res, 1).show();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\thandleOtherMessage(msg.what);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n}\n```\n\n通过这个统一管理了主要的一些Toast简化代码量的同时也清晰了项目会遇到的一些需要给用户提示的情况，并且定义了整体的布局。这是一个很好的方法。\n\n由于加载是从网络上来的，需要延时是难免的。通过ProgressBar来下意识用户等候是常用方法，本项目作者将整个延时等待的load框架封装出来：\n\n```\npackage cindy.android.test.synclistview;\n\nimport android.content.Context;\nimport android.util.AttributeSet;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.LinearLayout;\nimport android.widget.ProgressBar;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\n\npublic class LoadStateView extends RelativeLayout{\n\t//Loading RelativeLayout\n\tProgressBar progBar;\n\n\tLinearLayout downLoadErrMsgBox;\n\n\tTextView downLoadErrText;\n\n\tButton btnListLoadErr;\n\n\tpublic LoadStateView(Context context, AttributeSet attrs) {\n\t\tsuper(context, attrs);\n\t\t// TODO Auto-generated constructor stub\n\t}\n\n\t@Override\n\tprotected void onFinishInflate() {\n\t\t// TODO Auto-generated method stub\n\t\tsuper.onFinishInflate();\n\t\tprogBar = (ProgressBar) findViewById(R.id.progBar);\n\t\tdownLoadErrMsgBox = (LinearLayout) findViewById(R.id.downLoadErrMsgBox);\n\t\tdownLoadErrText = (TextView) findViewById(R.id.downLoadErrText);\n\t\tbtnListLoadErr = (Button) findViewById(R.id.btnListLoadErr);\n\t}\n\n\tpublic void startLoad(){\n\t\tdownLoadErrMsgBox.setVisibility(View.GONE);\n\t\tprogBar.setVisibility(View.VISIBLE);\n\t}\n\n\tpublic void stopLoad(){\n\t\tprogBar.setVisibility(View.GONE);\n\t}\n\n\tpublic void showError(){\n\t\tdownLoadErrMsgBox.setVisibility(View.VISIBLE);\n\t\tprogBar.setVisibility(View.GONE);\n\t}\n\n\tpublic void showEmpty(){\n\t\tdownLoadErrMsgBox.setVisibility(View.VISIBLE);\n\t\tprogBar.setVisibility(View.GONE);\n\t}\n\n\tpublic void setOnReloadClickListener(OnClickListener onReloadClickListener){\n\t\tbtnListLoadErr.setOnClickListener(onReloadClickListener);\n\t}\n}\n```\n\n这样很好的对加载框架进行控制，隐藏了方法，同时使可读性增强。\n\n下面我们进入本项目的分析：\n我们先按管理分析下作者的思路：\n如果加载成功隐藏加载框架，失败显示按钮与有关文字 -> 滑动如果处于闲置状态进行加载对应范围内的图片.\n首先我们看看入口Activity:\n\n```\npackage cindy.android.test.synclistview;\n\nimport android.os.Bundle;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.AdapterView;\nimport android.widget.ListView;\n\npublic class TestListViewActivity extends AbstructCommonActivity\n\timplements AdapterView.OnItemClickListener{\n\n\tListView viewBookList;\n\n\tBookItemAdapter adapter;\n\n\t//ViewGroup listFolder;\n\n\tLoadStateView loadStateView;\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\t// TODO Auto-generated method stub\n\t\tsuper.onCreate(savedInstanceState);\n\t\tsetContentView(R.layout.main);\n\t\tviewBookList = (ListView) findViewById(R.id.viewBookList);\n\t\tadapter = new BookItemAdapter(this,viewBookList);\n\t\tloadStateView = (LoadStateView) findViewById(R.id.downloadStatusBox);\n\n\t\tloadStateView.setOnReloadClickListener(new View.OnClickListener() {\n\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\treload();\n\t\t\t}\n\t\t});\n\t\t//listFolder = (ViewGroup) getLayoutInflater().inflate(R.layout.load_more, null);\n\t\t//viewBookList.addFooterView(listFolder);\n\t\tviewBookList.setAdapter(adapter);\n\t\tviewBookList.setOnItemClickListener(this);\n\t\treload();\n\t}\n\n\tprivate void reload(){\n\t\tadapter.clean();\n\t\tloadStateView.startLoad();\n\t\tnew Thread(new Runnable(){\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(2*1000);\n\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\tloadDate();\n\t\t\t\tsendMessage(REFRESH_LIST);\n//\t\t\t\tsendMessageDely(LOAD_IMAGE, 500);\n\t\t\t}\n\t\t}).start();\n\t}\n\n\tpublic void loadDate(){\n\t\tfor(int i=0;i&lt;10;i++){\n\t\t\tadapter.addBook(\"吞噬星空\"+i,\n\t\t\t\"http://www.pfwx.com/bookinfo/11/11000.html\",\n\t\t\t\"http://www.pfwx.com/files/article/image/11/11000/11000s.jpg\");\n\n\t\t\tadapter.addBook(\"仙逆\"+i,\n\t\t\t\"http://www.pfwx.com/bookinfo/9/9760.html\",\n\t\t\t\"http://www.pfwx.com/files/article/image/9/9760/9760s.jpg\");\n\n\t\t\tadapter.addBook(\"武动乾坤\"+i,\n\t\t\t\"http://www.pfwx.com/bookinfo/13/13939.html\",\n\t\t\t\"http://www.pfwx.com/files/article/image/13/13939/13939s.jpg\");\n\n\t\t\tadapter.addBook(\"凡人修仙传\"+i,\n\t\t\t\"http://www.pfwx.com/bookinfo/3/3237.html\",\n\t\t\t\"http://www.pfwx.com/files/article/image/3/3237/3237s.jpg\");\n\n\t\t\tadapter.addBook(\"遮天\"+i,\n\t\t\t\"http://www.pfwx.com/bookinfo/11/11381.html\",\n\t\t\t\"http://www.pfwx.com/files/article/image/11/11381/11381s.jpg\");\n\t\t}\n\t}\n\n\t@Override\n\tpublic void onItemClick(AdapterView&lt;?&gt; arg0, View arg1, int arg2, long arg3) {\n\n\t}\n\n\tprivate static final int REFRESH_LIST = 0x10001;\n\tprivate static final int SHOW_LOAD_STATE_VIEW = 0x10003;\n\tprivate static final int HIDE_LOAD_STATE_VIEW = 0x10004;\n\n\t@Override\n\tprotected void handleOtherMessage(int flag) {\n\t\tswitch (flag) {\n\t\tcase REFRESH_LIST:\n\t\t\tadapter.notifyDataSetChanged();\n\t\t\tloadStateView.stopLoad();\n\t\t\tif(adapter.getCount() == 0){\n\t\t\t\tloadStateView.showEmpty();\n\t\t\t}\n\t\t\tbreak;\n\t\tcase SHOW_LOAD_STATE_VIEW:\n\t\t\tloadStateView.startLoad();\n\t\t\tbreak;\n\t\tcase HIDE_LOAD_STATE_VIEW:\n\t\t\tloadStateView.stopLoad();\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t}\n\n}\n```\n\n继承自封装好的Activity。\n创建一个adapter对象：\n\n```\nadapter = new BookItemAdapter(this,viewBookList);\n```\n\n下面我们来看下BookItemAdapter:\n\n```\npackage cindy.android.test.synclistview;\n\nimport java.util.Vector;\n\nimport android.content.Context;\nimport android.graphics.drawable.Drawable;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.AbsListView;\nimport android.widget.BaseAdapter;\nimport android.widget.ImageView;\nimport android.widget.ListView;\nimport android.widget.TextView;\n\npublic class BookItemAdapter extends BaseAdapter{\n\t//Main List Adapter\n\tprivate LayoutInflater mInflater;\n\tprivate Context mContext;\n\tprivate Vector mModels = new Vector();\n\tprivate ListView mListView;\n\tSyncImageLoader syncImageLoader;\n\n\tpublic BookItemAdapter(Context context,ListView listView){\n\t\tmInflater = LayoutInflater.from(context);\n\t\tsyncImageLoader = new SyncImageLoader();\n\t\tmContext = context;\n\t\tmListView = listView;\n\n\t\tmListView.setOnScrollListener(onScrollListener);\n\t}\n\n\tpublic void addBook(String book_name,String out_book_url,String out_book_pic){\n\t\tBookModel model = new BookModel();\n\t\tmodel.book_name =book_name;\n\t\tmodel.out_book_url = out_book_url;\n\t\tmodel.out_book_pic = out_book_pic;\n\t\tmModels.add(model);\n\t}\n\n\tpublic void clean(){\n\t\tmModels.clear();\n\t}\n\n\t@Override\n\tpublic int getCount() {\n\t\t// TODO Auto-generated method stub\n\t\treturn mModels.size();\n\t}\n\n\t@Override\n\tpublic Object getItem(int position) {\n\t\tif(position &gt;= getCount()){\n\t\t\treturn null;\n\t\t}\n\t\treturn mModels.get(position);\n\t}\n\n\t@Override\n\tpublic long getItemId(int position) {\n\t\t// TODO Auto-generated method stub\n\t\treturn position;\n\t}\n\n\t@Override\n\tpublic View getView(int position, View convertView, ViewGroup parent) {\n\t\tif(convertView == null){\n\t\t\tconvertView = mInflater.inflate(R.layout.book_item_adapter, null);\n\t\t}\n\t\tBookModel model = mModels.get(position);\n\t\tconvertView.setTag(position);\n\t\tImageView iv = (ImageView) convertView.findViewById(R.id.sItemIcon);\n\t\tTextView sItemTitle =  (TextView) convertView.findViewById(R.id.sItemTitle);\n\t\tTextView sItemInfo =  (TextView) convertView.findViewById(R.id.sItemInfo);\n\t\tsItemTitle.setText(model.book_name);\n\t\tsItemInfo.setText(model.out_book_url);\n\t\tiv.setBackgroundResource(R.drawable.rc_item_bg);\n\t\tsyncImageLoader.loadImage(position,model.out_book_pic,imageLoadListener);\n\t\treturn  convertView;\n\t}\n\n\tSyncImageLoader.OnImageLoadListener imageLoadListener = new SyncImageLoader.OnImageLoadListener(){\n\n\t\t@Override\n\t\tpublic void onImageLoad(Integer t, Drawable drawable) {\n\t\t\t//BookModel model = (BookModel) getItem(t);\n\t\t\tView view = mListView.findViewWithTag(t);\n\t\t\tif(view != null){\n\t\t\t\tImageView iv = (ImageView) view.findViewById(R.id.sItemIcon);\n\t\t\t\tiv.setBackgroundDrawable(drawable);\n\t\t\t}\n\t\t}\n\t\t@Override\n\t\tpublic void onError(Integer t) {\n\t\t\tBookModel model = (BookModel) getItem(t);\n\t\t\tView view = mListView.findViewWithTag(model);\n\t\t\tif(view != null){\n\t\t\t\tImageView iv = (ImageView) view.findViewById(R.id.sItemIcon);\n\t\t\t\tiv.setBackgroundResource(R.drawable.rc_item_bg);\n\t\t\t}\n\t\t}\n\n\t};\n\n\tpublic void loadImage(){\n\t\tint start = mListView.getFirstVisiblePosition();\n\t\tint end =mListView.getLastVisiblePosition();\n\t\tif(end &gt;= getCount()){\n\t\t\tend = getCount() -1;\n\t\t}\n\t\tsyncImageLoader.setLoadLimit(start, end);\n\t\tsyncImageLoader.unlock();\n\t}\n\n\tAbsListView.OnScrollListener onScrollListener = new AbsListView.OnScrollListener() {\n\n\t\t@Override\n\t\tpublic void onScrollStateChanged(AbsListView view, int scrollState) {\n\t\t\tswitch (scrollState) {\n\t\t\t\tcase AbsListView.OnScrollListener.SCROLL_STATE_FLING:\n\t\t\t\t\tDebugUtil.debug(\"SCROLL_STATE_FLING\");\n\t\t\t\t\tsyncImageLoader.lock();\n\t\t\t\t\tbreak;\n\t\t\t\tcase AbsListView.OnScrollListener.SCROLL_STATE_IDLE:\n\t\t\t\t\tDebugUtil.debug(\"SCROLL_STATE_IDLE\");\n\t\t\t\t\tloadImage();\n\t\t\t\t\t//loadImage();\n\t\t\t\t\tbreak;\n\t\t\t\tcase AbsListView.OnScrollListener.SCROLL_STATE_TOUCH_SCROLL:\n\t\t\t\t\tsyncImageLoader.lock();\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t}\n\n\t\t@Override\n\t\tpublic void onScroll(AbsListView view, int firstVisibleItem,\n\t\t\t\tint visibleItemCount, int totalItemCount) {\n\t\t\t// TODO Auto-generated method stub\n\n\t\t}\n\t};\n}\n```\n\n此Adapter在构造时还获得了对应的ListView\n我们可以看到\n\n```\nmListView.setOnScrollListener(onScrollListener);\n```\n\n我们看下onScrollListener:\n\n```\nAbsListView.OnScrollListener onScrollListener = new AbsListView.OnScrollListener() {\n\n\t\t@Override\n\t\tpublic void onScrollStateChanged(AbsListView view, int scrollState) {\n\t\t\tswitch (scrollState) {\n\t\t\t\tcase AbsListView.OnScrollListener.SCROLL_STATE_FLING:\n\t\t\t\t\tDebugUtil.debug(\"SCROLL_STATE_FLING\");\n\t\t\t\t\tsyncImageLoader.lock();\n\t\t\t\t\tbreak;\n\t\t\t\tcase AbsListView.OnScrollListener.SCROLL_STATE_IDLE:\n\t\t\t\t\tDebugUtil.debug(\"SCROLL_STATE_IDLE\");\n\t\t\t\t\tloadImage();\n\t\t\t\t\t//loadImage();\n\t\t\t\t\tbreak;\n\t\t\t\tcase AbsListView.OnScrollListener.SCROLL_STATE_TOUCH_SCROLL:\n\t\t\t\t\tsyncImageLoader.lock();\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t}\n\n\t\t@Override\n\t\tpublic void onScroll(AbsListView view, int firstVisibleItem,\n\t\t\t\tint visibleItemCount, int totalItemCount) {\n\t\t\t// TODO Auto-generated method stub\n\n\t\t}\n\t};\n```\n\n这里主要就是当滑动闲置的时候解锁加载.我们深入看下：\n\n```\npackage cindy.android.test.synclistview;\n\nimport java.io.DataInputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.lang.ref.SoftReference;\nimport java.net.URL;\nimport java.util.HashMap;\n\nimport android.graphics.drawable.Drawable;\nimport android.os.Environment;\nimport android.os.Handler;\n\npublic class SyncImageLoader {\n\t//Sync Image Loader\n\t//Message Load Image\n\t//\n\tprivate Object lock = new Object();\n\n\tprivate boolean mAllowLoad = true;\n\n\tprivate boolean firstLoad = true;\n\n\tprivate int mStartLoadLimit = 0;\n\n\tprivate int mStopLoadLimit = 0;\n\n\tfinal Handler handler = new Handler();\n\n\tprivate HashMap&lt;String, SoftReference&gt; imageCache = new HashMap&lt;String, SoftReference&gt;();\n\n\tpublic interface OnImageLoadListener {\n\t\tpublic void onImageLoad(Integer t, Drawable drawable);\n\t\tpublic void onError(Integer t);\n\t}\n\n\tpublic void setLoadLimit(int startLoadLimit,int stopLoadLimit){\n\t\tif(startLoadLimit &gt; stopLoadLimit){\n\t\t\treturn;\n\t\t}\n\t\tmStartLoadLimit = startLoadLimit;\n\t\tmStopLoadLimit = stopLoadLimit;\n\t}\n\n\tpublic void restore(){\n\t\tmAllowLoad = true;\n\t\tfirstLoad = true;\n\t}\n\n\tpublic void lock(){\n\t\tmAllowLoad = false;\n\t\tfirstLoad = false;\n\t}\n\n\tpublic void unlock(){\n\t\tmAllowLoad = true;\n\t\tsynchronized (lock) {\n\t\t\tlock.notifyAll(); //wake up all waiting thread.\n\t\t}\n\t}\n\n\tpublic void loadImage(Integer t, String imageUrl,\n\t\t\tOnImageLoadListener listener) {\n\t\tfinal OnImageLoadListener mListener = listener;\n\t\tfinal String mImageUrl = imageUrl;\n\t\tfinal Integer mt = t;\n\n\t\tnew Thread(new Runnable() {\n\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tif(!mAllowLoad){\n\t\t\t\t\tDebugUtil.debug(\"prepare to load\");\n\t\t\t\t\tsynchronized (lock) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tlock.wait();\n\t\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(mAllowLoad &amp;&amp; firstLoad){\n\t\t\t\t\tloadImage(mImageUrl, mt, mListener);\n\t\t\t\t}\n\n\t\t\t\tif(mAllowLoad &amp;&amp; mt &lt;= mStopLoadLimit &amp;&amp; mt &gt;= mStartLoadLimit){\n\t\t\t\t\tloadImage(mImageUrl, mt, mListener);\n\t\t\t\t}\n\t\t\t}\n\n\t\t}).start();\n\t}\n\n\tprivate void loadImage(final String mImageUrl,final Integer mt,final OnImageLoadListener mListener){\n\n\t\tif (imageCache.containsKey(mImageUrl)) {\n            SoftReference softReference = imageCache.get(mImageUrl);\n            final Drawable d = softReference.get();\n            if (d != null) {\n            \thandler.post(new Runnable() {\n    \t\t\t\t@Override\n    \t\t\t\tpublic void run() {\n    \t\t\t\t\tif(mAllowLoad){\n    \t\t\t\t\t\tmListener.onImageLoad(mt, d);\n    \t\t\t\t\t}\n    \t\t\t\t}\n    \t\t\t});\n                return;\n            }\n        }\n\t\ttry {\n\t\t\tfinal Drawable d = loadImageFromUrl(mImageUrl);\n\t\t\tif(d != null){\n                imageCache.put(mImageUrl, new SoftReference(d));\n\t\t\t}\n\t\t\thandler.post(new Runnable() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\tif(mAllowLoad){\n\t\t\t\t\t\tmListener.onImageLoad(mt, d);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (IOException e) {\n\t\t\thandler.post(new Runnable() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\tmListener.onError(mt);\n\t\t\t\t}\n\t\t\t});\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic static Drawable loadImageFromUrl(String url) throws IOException {\n\t\tDebugUtil.debug(url);\n\t\tif(Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)){\n\t\t\t//if local SD CARD usable create local ache in SD card.\n\t\t\tFile f = new File(Environment.getExternalStorageDirectory()+\"/TestSyncListView/\"+MD5.getMD5(url));\n\t\t\tif(f.exists()){\n\t\t\t\tFileInputStream fis = new FileInputStream(f);\n\t\t\t\tDrawable d = Drawable.createFromStream(fis, \"src\");\n\t\t\t\treturn d;\n\t\t\t}\n\t\t\tURL m = new URL(url);\n\t\t\tInputStream i = (InputStream) m.getContent();\n\t\t\tDataInputStream in = new DataInputStream(i);\n\t\t\tFileOutputStream out = new FileOutputStream(f);\n\t\t\tbyte[] buffer = new byte[1024];\n\t\t\tint   byteread=0;\n\t\t\twhile ((byteread = in.read(buffer)) != -1) {\n\t\t\t\tout.write(buffer, 0, byteread);\n\t\t\t}\n\t\t\tin.close();\n\t\t\tout.close();\n\t\t\tDrawable d = Drawable.createFromStream(i, \"src\");\n\t\t\treturn loadImageFromUrl(url);\n\t\t}else{\n\t\t\t//if local SD CARD unusable only get Drawable from input stream.\n\t\t\tURL m = new URL(url);\n\t\t\tInputStream i = (InputStream) m.getContent();\n\t\t\tDrawable d = Drawable.createFromStream(i, \"src\");\n\t\t\treturn d;\n\t\t}\n\n\t}\n}\n```\n\n可以清晰的看到只有当mAllowLoad与firstLoad同为true或者mAllowLoad与获得的position在当前界面的时候调用loadImage:\n\n```\nprivate void loadImage(final String mImageUrl,final Integer mt,final OnImageLoadListener mListener){\n\n\t\tif (imageCache.containsKey(mImageUrl)) {\n            SoftReference softReference = imageCache.get(mImageUrl);\n            final Drawable d = softReference.get();\n            if (d != null) {\n            \thandler.post(new Runnable() {\n    \t\t\t\t@Override\n    \t\t\t\tpublic void run() {\n    \t\t\t\t\tif(mAllowLoad){\n    \t\t\t\t\t\tmListener.onImageLoad(mt, d);\n    \t\t\t\t\t}\n    \t\t\t\t}\n    \t\t\t});\n                return;\n            }\n        }\n\t\ttry {\n\t\t\tfinal Drawable d = loadImageFromUrl(mImageUrl);\n\t\t\tif(d != null){\n                imageCache.put(mImageUrl, new SoftReference(d));\n\t\t\t}\n\t\t\thandler.post(new Runnable() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\tif(mAllowLoad){\n\t\t\t\t\t\tmListener.onImageLoad(mt, d);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (IOException e) {\n\t\t\thandler.post(new Runnable() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\tmListener.onError(mt);\n\t\t\t\t}\n\t\t\t});\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n```\n\n这里的imageCache是一个哈希表\nprivate HashMap&lt;String, SoftReference&gt; imageCache = new HashMap&lt;String, SoftReference&gt;();\n我们可以很清晰的看到当通过图片的url地址可以在哈希表中找到直接从哈希表中得到对应的软引用（不会被随意回收，不过当内存吃紧返回00mb的时候会被回收）.如果此时允许加载，调用OnImageLoadListener的onImageLoad对应的接口：\n此接口在BookItemAdapter中进行了实现：\n\n```\nSyncImageLoader.OnImageLoadListener imageLoadListener = new SyncImageLoader.OnImageLoadListener(){\n\n\t\t@Override\n\t\tpublic void onImageLoad(Integer t, Drawable drawable) {\n\t\t\t//BookModel model = (BookModel) getItem(t);\n\t\t\tView view = mListView.findViewWithTag(t);\n\t\t\tif(view != null){\n\t\t\t\tImageView iv = (ImageView) view.findViewById(R.id.sItemIcon);\n\t\t\t\tiv.setBackgroundDrawable(drawable);\n\t\t\t}\n\t\t}\n\t\t@Override\n\t\tpublic void onError(Integer t) {\n//\t\t\tBookModel model = (BookModel) getItem(t);\n\t\t\tView view = mListView.findViewWithTag(t);\n\t\t\tif(view != null){\n\t\t\t\tImageView iv = (ImageView) view.findViewById(R.id.sItemIcon);\n\t\t\t\tiv.setBackgroundResource(R.drawable.rc_item_bg);\n\t\t\t}\n\t\t}\n\n\t};\n```\n\n很显然这里通过传入的position可以得到对应item的View我们可以看下BookItemAdapter中的getView\n\n```\nconvertView.setTag(position);\n```\n\n确实是将对应的position设置为其tag.\n回到SyncImageLoader的private void loadImage(final String mImageUrl,final Integer mt,final OnImageLoadListener mListener):\n当在哈希表中找不到对应的软引用，则通过loadImageFromUrl获得：\n\n```\npublic static Drawable loadImageFromUrl(String url) throws IOException {\n\t\tDebugUtil.debug(url);\n\t\tif(Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)){\n\t\t\t//if local SD CARD usable create local ache in SD card.\n\t\t\tFile f = new File(Environment.getExternalStorageDirectory()+\"/TestSyncListView/\"+MD5.getMD5(url));\n\t\t\tif(f.exists()){\n\t\t\t\tFileInputStream fis = new FileInputStream(f);\n\t\t\t\tDrawable d = Drawable.createFromStream(fis, \"src\");\n\t\t\t\treturn d;\n\t\t\t}\n\t\t\tURL m = new URL(url);\n\t\t\tInputStream i = (InputStream) m.getContent();\n\t\t\tDataInputStream in = new DataInputStream(i);\n\t\t\tFileOutputStream out = new FileOutputStream(f);\n\t\t\tbyte[] buffer = new byte[1024];\n\t\t\tint   byteread=0;\n\t\t\twhile ((byteread = in.read(buffer)) != -1) {\n\t\t\t\tout.write(buffer, 0, byteread);\n\t\t\t}\n\t\t\tin.close();\n\t\t\tout.close();\n\t\t\tDrawable d = Drawable.createFromStream(i, \"src\");\n\t\t\treturn loadImageFromUrl(url);\n\t\t}else{\n\t\t\t//if local SD CARD unusable only get Drawable from input stream.\n\t\t\tURL m = new URL(url);\n\t\t\tInputStream i = (InputStream) m.getContent();\n\t\t\tDrawable d = Drawable.createFromStream(i, \"src\");\n\t\t\treturn d;\n\t\t}\n\n\t}\n```\n\n此函数从网络上获得图片并创建对应Drawable.如果sd卡可用:\n如果对应缓存文件存在（已经缓存），则直接从缓存文件中取得，否则从网路上读取后，创建缓存文件(同样以MD5加密形式命名）。\n如果不sdcard不可用直接从网络上读取.\n返回Drawable.\n通过所返回的Drawable 判断是否调用onImageLoad接口或是onError接口（显示默认图片）。\n\n在之前我们已经了解到如果SCROLL_STATE_IDLE的时候进行加载，我们看下它的调用：\n\n```\ncase AbsListView.OnScrollListener.SCROLL_STATE_IDLE:\n\t\t\t\t\tDebugUtil.debug(\"SCROLL_STATE_IDLE\");\n\t\t\t\t\tloadImage();\n\t\t\t\t\t//loadImage();\n\t\t\t\t\tbreak;\n```\n\n对应的loadImage():\n\n```\npublic void loadImage(){\n\t\tint start = mListView.getFirstVisiblePosition();\n\t\tint end =mListView.getLastVisiblePosition();\n\t\tif(end &gt;= getCount()){\n\t\t\tend = getCount() -1;\n\t\t}\n\t\tsyncImageLoader.setLoadLimit(start, end);\n\t\tsyncImageLoader.unlock();\n\t}\n```\n\n这里的把当前界面的第一个item的position与最后一个item的position传给syncImageLoader，然后进行解锁：\n\n```\npublic void unlock(){\n\t\tmAllowLoad = true;\n\t\tsynchronized (lock) {\n\t\t\tlock.notifyAll(); //wake up all waiting thread.\n\t\t}\n\t}\n```\n\n此时getView中各种加载，这里的加载条件与方法上面已经知道了。\n其它的，入口的reload和刷新的作用一样.重新刷新一遍。\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/异步加载专题-原创分析-中级篇本地缓存、ListView滑动停止加载、利用sync.md","raw":"title: 【异步加载专题】【原创分析】中级篇-各类架构与线程数控制\ndate: 2012-12-31 08:35:03\npermalink: 2012/12/31/异步加载专题-原创分析-中级篇本地缓存、ListView滑动停止加载、利用sync\ntags:\n- Android\n- ListView\n- synchronized\n- 异步加载\n- 文件结构\n- 本地缓存\n\n---\n\n> 本文分析此源码(源码作者也许叫cindy吧）：http://s.yunio.com/Wd8Nxm\n\n![](/img/async-1.png)\n\n<!--more-->\n\n> 本项目非常值得分析的一点除了它的异步加载外，还有它良好的文件结构：\n固定的临时文件夹创建放在MyApp(继承于Application）（如备注，当application/package被创建时，此函数被实例化:\n\n```\npackage cindy.android.test.synclistview;\n\nimport java.io.File;\n\nimport android.app.Application;\nimport android.os.Environment;\n\npublic class MyApp extends Application{\n//will cause that class to be instantiated for you when the process for your application/package is created...\n\t//create cache on install application\n\t@Override\n\tpublic void onCreate() {\n\t\t// TODO Auto-generated method stub\n\t\tsuper.onCreate();\n\t\tFile f = new File(Environment.getExternalStorageDirectory()+\"/TestSyncListView/\");\n\t\tif(!f.exists()){\n\t\t\tf.mkdir();\n\t\t}\n\t}\n\n}\n```\n\n当然了，需要在AndroidManifest.xml中定义：\n\n```\n........\n```\n\nLog记录做一个类，这样即可以统一管理TAG也可以清晰的通过此类明白自己项目会涉及到问题.并且统一管理对应的显示规则：\n\n```\npackage cindy.android.test.synclistview;\n\nimport android.content.Context;\nimport android.util.Log;\nimport android.widget.Toast;\n\npublic class DebugUtil {\n    public static final String TAG = \"DebugUtil\";\n    public static final boolean DEBUG = true;\n     //for debug show log.\n    public static void toast(Context context,String content){\n        Toast.makeText(context, content, Toast.LENGTH_SHORT).show();\n    }\n\n    public static void debug(String tag,String msg){\n        if (DEBUG) {\n            Log.d(tag, msg);\n        }\n    }\n\n    public static void debug(String msg){\n        if (DEBUG) {\n            Log.d(TAG, msg);\n        }\n    }\n\n    public static void error(String tag,String error){\n        Log.e(tag, error);\n    }\n\n    public static void error(String error){\n        Log.e(TAG, error);\n    }\n}\n```\n\n本项目封装了入口Activity的父类：\n\n```\npackage cindy.android.test.synclistview;\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.os.Message;\nimport android.view.Window;\nimport android.widget.Toast;\n\npublic abstract class AbstructCommonActivity extends Activity  {\n\n\t//Main Activity's Parent\n\t//Window Feature_no_Title\n\t//Hanlder to Show some tip.\n\tprivate MyHandler handler = new MyHandler();\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\trequestWindowFeature(Window.FEATURE_NO_TITLE);\n\t}\n\n\tprotected void handleOtherMessage(int flag){\n\n\t}\n\n\tpublic void sendMessage(int flag) {\n\t\thandler.sendEmptyMessage(flag);\n\t}\n\n\tpublic void sendMessageDely(int flag,long delayMillis){\n\t\thandler.sendEmptyMessageDelayed(flag, delayMillis);\n\t}\n\n\tpublic void showToast(String toast_message){\n\t\thandler.toast_message = toast_message;\n\t\tsendMessage(MyHandler.SHOW_STR_TOAST);\n\t}\n\n\tpublic void showToast(int res){\n\t\thandler.toast_res = res;\n\t\tsendMessage(MyHandler.SHOW_RES_TOAST);\n\t}\n\n\tprivate class MyHandler extends Handler {\n\t\tpublic static final int SHOW_STR_TOAST = 0;\n\t\tpublic static final int SHOW_RES_TOAST = 1;\n\n\t\tprivate String toast_message=null;\n\t\tprivate int toast_res;\n\n\t\t@Override\n\t\tpublic void handleMessage(Message msg) {\n\t\t\tif (!Thread.currentThread().isInterrupted()) {\n\t\t\t\tswitch (msg.what) {\n\t\t\t\t\tcase SHOW_STR_TOAST:\n\t\t\t\t\t\tToast.makeText(getBaseContext(), toast_message, 1).show();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase SHOW_RES_TOAST:\n\t\t\t\t\t\tToast.makeText(getBaseContext(), toast_res, 1).show();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\thandleOtherMessage(msg.what);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n}\n```\n\n通过这个统一管理了主要的一些Toast简化代码量的同时也清晰了项目会遇到的一些需要给用户提示的情况，并且定义了整体的布局。这是一个很好的方法。\n\n由于加载是从网络上来的，需要延时是难免的。通过ProgressBar来下意识用户等候是常用方法，本项目作者将整个延时等待的load框架封装出来：\n\n```\npackage cindy.android.test.synclistview;\n\nimport android.content.Context;\nimport android.util.AttributeSet;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.LinearLayout;\nimport android.widget.ProgressBar;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\n\npublic class LoadStateView extends RelativeLayout{\n\t//Loading RelativeLayout\n\tProgressBar progBar;\n\n\tLinearLayout downLoadErrMsgBox;\n\n\tTextView downLoadErrText;\n\n\tButton btnListLoadErr;\n\n\tpublic LoadStateView(Context context, AttributeSet attrs) {\n\t\tsuper(context, attrs);\n\t\t// TODO Auto-generated constructor stub\n\t}\n\n\t@Override\n\tprotected void onFinishInflate() {\n\t\t// TODO Auto-generated method stub\n\t\tsuper.onFinishInflate();\n\t\tprogBar = (ProgressBar) findViewById(R.id.progBar);\n\t\tdownLoadErrMsgBox = (LinearLayout) findViewById(R.id.downLoadErrMsgBox);\n\t\tdownLoadErrText = (TextView) findViewById(R.id.downLoadErrText);\n\t\tbtnListLoadErr = (Button) findViewById(R.id.btnListLoadErr);\n\t}\n\n\tpublic void startLoad(){\n\t\tdownLoadErrMsgBox.setVisibility(View.GONE);\n\t\tprogBar.setVisibility(View.VISIBLE);\n\t}\n\n\tpublic void stopLoad(){\n\t\tprogBar.setVisibility(View.GONE);\n\t}\n\n\tpublic void showError(){\n\t\tdownLoadErrMsgBox.setVisibility(View.VISIBLE);\n\t\tprogBar.setVisibility(View.GONE);\n\t}\n\n\tpublic void showEmpty(){\n\t\tdownLoadErrMsgBox.setVisibility(View.VISIBLE);\n\t\tprogBar.setVisibility(View.GONE);\n\t}\n\n\tpublic void setOnReloadClickListener(OnClickListener onReloadClickListener){\n\t\tbtnListLoadErr.setOnClickListener(onReloadClickListener);\n\t}\n}\n```\n\n这样很好的对加载框架进行控制，隐藏了方法，同时使可读性增强。\n\n下面我们进入本项目的分析：\n我们先按管理分析下作者的思路：\n如果加载成功隐藏加载框架，失败显示按钮与有关文字 -> 滑动如果处于闲置状态进行加载对应范围内的图片.\n首先我们看看入口Activity:\n\n```\npackage cindy.android.test.synclistview;\n\nimport android.os.Bundle;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.AdapterView;\nimport android.widget.ListView;\n\npublic class TestListViewActivity extends AbstructCommonActivity\n\timplements AdapterView.OnItemClickListener{\n\n\tListView viewBookList;\n\n\tBookItemAdapter adapter;\n\n\t//ViewGroup listFolder;\n\n\tLoadStateView loadStateView;\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\t// TODO Auto-generated method stub\n\t\tsuper.onCreate(savedInstanceState);\n\t\tsetContentView(R.layout.main);\n\t\tviewBookList = (ListView) findViewById(R.id.viewBookList);\n\t\tadapter = new BookItemAdapter(this,viewBookList);\n\t\tloadStateView = (LoadStateView) findViewById(R.id.downloadStatusBox);\n\n\t\tloadStateView.setOnReloadClickListener(new View.OnClickListener() {\n\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\treload();\n\t\t\t}\n\t\t});\n\t\t//listFolder = (ViewGroup) getLayoutInflater().inflate(R.layout.load_more, null);\n\t\t//viewBookList.addFooterView(listFolder);\n\t\tviewBookList.setAdapter(adapter);\n\t\tviewBookList.setOnItemClickListener(this);\n\t\treload();\n\t}\n\n\tprivate void reload(){\n\t\tadapter.clean();\n\t\tloadStateView.startLoad();\n\t\tnew Thread(new Runnable(){\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(2*1000);\n\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\tloadDate();\n\t\t\t\tsendMessage(REFRESH_LIST);\n//\t\t\t\tsendMessageDely(LOAD_IMAGE, 500);\n\t\t\t}\n\t\t}).start();\n\t}\n\n\tpublic void loadDate(){\n\t\tfor(int i=0;i&lt;10;i++){\n\t\t\tadapter.addBook(\"吞噬星空\"+i,\n\t\t\t\"http://www.pfwx.com/bookinfo/11/11000.html\",\n\t\t\t\"http://www.pfwx.com/files/article/image/11/11000/11000s.jpg\");\n\n\t\t\tadapter.addBook(\"仙逆\"+i,\n\t\t\t\"http://www.pfwx.com/bookinfo/9/9760.html\",\n\t\t\t\"http://www.pfwx.com/files/article/image/9/9760/9760s.jpg\");\n\n\t\t\tadapter.addBook(\"武动乾坤\"+i,\n\t\t\t\"http://www.pfwx.com/bookinfo/13/13939.html\",\n\t\t\t\"http://www.pfwx.com/files/article/image/13/13939/13939s.jpg\");\n\n\t\t\tadapter.addBook(\"凡人修仙传\"+i,\n\t\t\t\"http://www.pfwx.com/bookinfo/3/3237.html\",\n\t\t\t\"http://www.pfwx.com/files/article/image/3/3237/3237s.jpg\");\n\n\t\t\tadapter.addBook(\"遮天\"+i,\n\t\t\t\"http://www.pfwx.com/bookinfo/11/11381.html\",\n\t\t\t\"http://www.pfwx.com/files/article/image/11/11381/11381s.jpg\");\n\t\t}\n\t}\n\n\t@Override\n\tpublic void onItemClick(AdapterView&lt;?&gt; arg0, View arg1, int arg2, long arg3) {\n\n\t}\n\n\tprivate static final int REFRESH_LIST = 0x10001;\n\tprivate static final int SHOW_LOAD_STATE_VIEW = 0x10003;\n\tprivate static final int HIDE_LOAD_STATE_VIEW = 0x10004;\n\n\t@Override\n\tprotected void handleOtherMessage(int flag) {\n\t\tswitch (flag) {\n\t\tcase REFRESH_LIST:\n\t\t\tadapter.notifyDataSetChanged();\n\t\t\tloadStateView.stopLoad();\n\t\t\tif(adapter.getCount() == 0){\n\t\t\t\tloadStateView.showEmpty();\n\t\t\t}\n\t\t\tbreak;\n\t\tcase SHOW_LOAD_STATE_VIEW:\n\t\t\tloadStateView.startLoad();\n\t\t\tbreak;\n\t\tcase HIDE_LOAD_STATE_VIEW:\n\t\t\tloadStateView.stopLoad();\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t}\n\n}\n```\n\n继承自封装好的Activity。\n创建一个adapter对象：\n\n```\nadapter = new BookItemAdapter(this,viewBookList);\n```\n\n下面我们来看下BookItemAdapter:\n\n```\npackage cindy.android.test.synclistview;\n\nimport java.util.Vector;\n\nimport android.content.Context;\nimport android.graphics.drawable.Drawable;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.AbsListView;\nimport android.widget.BaseAdapter;\nimport android.widget.ImageView;\nimport android.widget.ListView;\nimport android.widget.TextView;\n\npublic class BookItemAdapter extends BaseAdapter{\n\t//Main List Adapter\n\tprivate LayoutInflater mInflater;\n\tprivate Context mContext;\n\tprivate Vector mModels = new Vector();\n\tprivate ListView mListView;\n\tSyncImageLoader syncImageLoader;\n\n\tpublic BookItemAdapter(Context context,ListView listView){\n\t\tmInflater = LayoutInflater.from(context);\n\t\tsyncImageLoader = new SyncImageLoader();\n\t\tmContext = context;\n\t\tmListView = listView;\n\n\t\tmListView.setOnScrollListener(onScrollListener);\n\t}\n\n\tpublic void addBook(String book_name,String out_book_url,String out_book_pic){\n\t\tBookModel model = new BookModel();\n\t\tmodel.book_name =book_name;\n\t\tmodel.out_book_url = out_book_url;\n\t\tmodel.out_book_pic = out_book_pic;\n\t\tmModels.add(model);\n\t}\n\n\tpublic void clean(){\n\t\tmModels.clear();\n\t}\n\n\t@Override\n\tpublic int getCount() {\n\t\t// TODO Auto-generated method stub\n\t\treturn mModels.size();\n\t}\n\n\t@Override\n\tpublic Object getItem(int position) {\n\t\tif(position &gt;= getCount()){\n\t\t\treturn null;\n\t\t}\n\t\treturn mModels.get(position);\n\t}\n\n\t@Override\n\tpublic long getItemId(int position) {\n\t\t// TODO Auto-generated method stub\n\t\treturn position;\n\t}\n\n\t@Override\n\tpublic View getView(int position, View convertView, ViewGroup parent) {\n\t\tif(convertView == null){\n\t\t\tconvertView = mInflater.inflate(R.layout.book_item_adapter, null);\n\t\t}\n\t\tBookModel model = mModels.get(position);\n\t\tconvertView.setTag(position);\n\t\tImageView iv = (ImageView) convertView.findViewById(R.id.sItemIcon);\n\t\tTextView sItemTitle =  (TextView) convertView.findViewById(R.id.sItemTitle);\n\t\tTextView sItemInfo =  (TextView) convertView.findViewById(R.id.sItemInfo);\n\t\tsItemTitle.setText(model.book_name);\n\t\tsItemInfo.setText(model.out_book_url);\n\t\tiv.setBackgroundResource(R.drawable.rc_item_bg);\n\t\tsyncImageLoader.loadImage(position,model.out_book_pic,imageLoadListener);\n\t\treturn  convertView;\n\t}\n\n\tSyncImageLoader.OnImageLoadListener imageLoadListener = new SyncImageLoader.OnImageLoadListener(){\n\n\t\t@Override\n\t\tpublic void onImageLoad(Integer t, Drawable drawable) {\n\t\t\t//BookModel model = (BookModel) getItem(t);\n\t\t\tView view = mListView.findViewWithTag(t);\n\t\t\tif(view != null){\n\t\t\t\tImageView iv = (ImageView) view.findViewById(R.id.sItemIcon);\n\t\t\t\tiv.setBackgroundDrawable(drawable);\n\t\t\t}\n\t\t}\n\t\t@Override\n\t\tpublic void onError(Integer t) {\n\t\t\tBookModel model = (BookModel) getItem(t);\n\t\t\tView view = mListView.findViewWithTag(model);\n\t\t\tif(view != null){\n\t\t\t\tImageView iv = (ImageView) view.findViewById(R.id.sItemIcon);\n\t\t\t\tiv.setBackgroundResource(R.drawable.rc_item_bg);\n\t\t\t}\n\t\t}\n\n\t};\n\n\tpublic void loadImage(){\n\t\tint start = mListView.getFirstVisiblePosition();\n\t\tint end =mListView.getLastVisiblePosition();\n\t\tif(end &gt;= getCount()){\n\t\t\tend = getCount() -1;\n\t\t}\n\t\tsyncImageLoader.setLoadLimit(start, end);\n\t\tsyncImageLoader.unlock();\n\t}\n\n\tAbsListView.OnScrollListener onScrollListener = new AbsListView.OnScrollListener() {\n\n\t\t@Override\n\t\tpublic void onScrollStateChanged(AbsListView view, int scrollState) {\n\t\t\tswitch (scrollState) {\n\t\t\t\tcase AbsListView.OnScrollListener.SCROLL_STATE_FLING:\n\t\t\t\t\tDebugUtil.debug(\"SCROLL_STATE_FLING\");\n\t\t\t\t\tsyncImageLoader.lock();\n\t\t\t\t\tbreak;\n\t\t\t\tcase AbsListView.OnScrollListener.SCROLL_STATE_IDLE:\n\t\t\t\t\tDebugUtil.debug(\"SCROLL_STATE_IDLE\");\n\t\t\t\t\tloadImage();\n\t\t\t\t\t//loadImage();\n\t\t\t\t\tbreak;\n\t\t\t\tcase AbsListView.OnScrollListener.SCROLL_STATE_TOUCH_SCROLL:\n\t\t\t\t\tsyncImageLoader.lock();\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t}\n\n\t\t@Override\n\t\tpublic void onScroll(AbsListView view, int firstVisibleItem,\n\t\t\t\tint visibleItemCount, int totalItemCount) {\n\t\t\t// TODO Auto-generated method stub\n\n\t\t}\n\t};\n}\n```\n\n此Adapter在构造时还获得了对应的ListView\n我们可以看到\n\n```\nmListView.setOnScrollListener(onScrollListener);\n```\n\n我们看下onScrollListener:\n\n```\nAbsListView.OnScrollListener onScrollListener = new AbsListView.OnScrollListener() {\n\n\t\t@Override\n\t\tpublic void onScrollStateChanged(AbsListView view, int scrollState) {\n\t\t\tswitch (scrollState) {\n\t\t\t\tcase AbsListView.OnScrollListener.SCROLL_STATE_FLING:\n\t\t\t\t\tDebugUtil.debug(\"SCROLL_STATE_FLING\");\n\t\t\t\t\tsyncImageLoader.lock();\n\t\t\t\t\tbreak;\n\t\t\t\tcase AbsListView.OnScrollListener.SCROLL_STATE_IDLE:\n\t\t\t\t\tDebugUtil.debug(\"SCROLL_STATE_IDLE\");\n\t\t\t\t\tloadImage();\n\t\t\t\t\t//loadImage();\n\t\t\t\t\tbreak;\n\t\t\t\tcase AbsListView.OnScrollListener.SCROLL_STATE_TOUCH_SCROLL:\n\t\t\t\t\tsyncImageLoader.lock();\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t}\n\n\t\t@Override\n\t\tpublic void onScroll(AbsListView view, int firstVisibleItem,\n\t\t\t\tint visibleItemCount, int totalItemCount) {\n\t\t\t// TODO Auto-generated method stub\n\n\t\t}\n\t};\n```\n\n这里主要就是当滑动闲置的时候解锁加载.我们深入看下：\n\n```\npackage cindy.android.test.synclistview;\n\nimport java.io.DataInputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.lang.ref.SoftReference;\nimport java.net.URL;\nimport java.util.HashMap;\n\nimport android.graphics.drawable.Drawable;\nimport android.os.Environment;\nimport android.os.Handler;\n\npublic class SyncImageLoader {\n\t//Sync Image Loader\n\t//Message Load Image\n\t//\n\tprivate Object lock = new Object();\n\n\tprivate boolean mAllowLoad = true;\n\n\tprivate boolean firstLoad = true;\n\n\tprivate int mStartLoadLimit = 0;\n\n\tprivate int mStopLoadLimit = 0;\n\n\tfinal Handler handler = new Handler();\n\n\tprivate HashMap&lt;String, SoftReference&gt; imageCache = new HashMap&lt;String, SoftReference&gt;();\n\n\tpublic interface OnImageLoadListener {\n\t\tpublic void onImageLoad(Integer t, Drawable drawable);\n\t\tpublic void onError(Integer t);\n\t}\n\n\tpublic void setLoadLimit(int startLoadLimit,int stopLoadLimit){\n\t\tif(startLoadLimit &gt; stopLoadLimit){\n\t\t\treturn;\n\t\t}\n\t\tmStartLoadLimit = startLoadLimit;\n\t\tmStopLoadLimit = stopLoadLimit;\n\t}\n\n\tpublic void restore(){\n\t\tmAllowLoad = true;\n\t\tfirstLoad = true;\n\t}\n\n\tpublic void lock(){\n\t\tmAllowLoad = false;\n\t\tfirstLoad = false;\n\t}\n\n\tpublic void unlock(){\n\t\tmAllowLoad = true;\n\t\tsynchronized (lock) {\n\t\t\tlock.notifyAll(); //wake up all waiting thread.\n\t\t}\n\t}\n\n\tpublic void loadImage(Integer t, String imageUrl,\n\t\t\tOnImageLoadListener listener) {\n\t\tfinal OnImageLoadListener mListener = listener;\n\t\tfinal String mImageUrl = imageUrl;\n\t\tfinal Integer mt = t;\n\n\t\tnew Thread(new Runnable() {\n\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tif(!mAllowLoad){\n\t\t\t\t\tDebugUtil.debug(\"prepare to load\");\n\t\t\t\t\tsynchronized (lock) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tlock.wait();\n\t\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(mAllowLoad &amp;&amp; firstLoad){\n\t\t\t\t\tloadImage(mImageUrl, mt, mListener);\n\t\t\t\t}\n\n\t\t\t\tif(mAllowLoad &amp;&amp; mt &lt;= mStopLoadLimit &amp;&amp; mt &gt;= mStartLoadLimit){\n\t\t\t\t\tloadImage(mImageUrl, mt, mListener);\n\t\t\t\t}\n\t\t\t}\n\n\t\t}).start();\n\t}\n\n\tprivate void loadImage(final String mImageUrl,final Integer mt,final OnImageLoadListener mListener){\n\n\t\tif (imageCache.containsKey(mImageUrl)) {\n            SoftReference softReference = imageCache.get(mImageUrl);\n            final Drawable d = softReference.get();\n            if (d != null) {\n            \thandler.post(new Runnable() {\n    \t\t\t\t@Override\n    \t\t\t\tpublic void run() {\n    \t\t\t\t\tif(mAllowLoad){\n    \t\t\t\t\t\tmListener.onImageLoad(mt, d);\n    \t\t\t\t\t}\n    \t\t\t\t}\n    \t\t\t});\n                return;\n            }\n        }\n\t\ttry {\n\t\t\tfinal Drawable d = loadImageFromUrl(mImageUrl);\n\t\t\tif(d != null){\n                imageCache.put(mImageUrl, new SoftReference(d));\n\t\t\t}\n\t\t\thandler.post(new Runnable() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\tif(mAllowLoad){\n\t\t\t\t\t\tmListener.onImageLoad(mt, d);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (IOException e) {\n\t\t\thandler.post(new Runnable() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\tmListener.onError(mt);\n\t\t\t\t}\n\t\t\t});\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic static Drawable loadImageFromUrl(String url) throws IOException {\n\t\tDebugUtil.debug(url);\n\t\tif(Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)){\n\t\t\t//if local SD CARD usable create local ache in SD card.\n\t\t\tFile f = new File(Environment.getExternalStorageDirectory()+\"/TestSyncListView/\"+MD5.getMD5(url));\n\t\t\tif(f.exists()){\n\t\t\t\tFileInputStream fis = new FileInputStream(f);\n\t\t\t\tDrawable d = Drawable.createFromStream(fis, \"src\");\n\t\t\t\treturn d;\n\t\t\t}\n\t\t\tURL m = new URL(url);\n\t\t\tInputStream i = (InputStream) m.getContent();\n\t\t\tDataInputStream in = new DataInputStream(i);\n\t\t\tFileOutputStream out = new FileOutputStream(f);\n\t\t\tbyte[] buffer = new byte[1024];\n\t\t\tint   byteread=0;\n\t\t\twhile ((byteread = in.read(buffer)) != -1) {\n\t\t\t\tout.write(buffer, 0, byteread);\n\t\t\t}\n\t\t\tin.close();\n\t\t\tout.close();\n\t\t\tDrawable d = Drawable.createFromStream(i, \"src\");\n\t\t\treturn loadImageFromUrl(url);\n\t\t}else{\n\t\t\t//if local SD CARD unusable only get Drawable from input stream.\n\t\t\tURL m = new URL(url);\n\t\t\tInputStream i = (InputStream) m.getContent();\n\t\t\tDrawable d = Drawable.createFromStream(i, \"src\");\n\t\t\treturn d;\n\t\t}\n\n\t}\n}\n```\n\n可以清晰的看到只有当mAllowLoad与firstLoad同为true或者mAllowLoad与获得的position在当前界面的时候调用loadImage:\n\n```\nprivate void loadImage(final String mImageUrl,final Integer mt,final OnImageLoadListener mListener){\n\n\t\tif (imageCache.containsKey(mImageUrl)) {\n            SoftReference softReference = imageCache.get(mImageUrl);\n            final Drawable d = softReference.get();\n            if (d != null) {\n            \thandler.post(new Runnable() {\n    \t\t\t\t@Override\n    \t\t\t\tpublic void run() {\n    \t\t\t\t\tif(mAllowLoad){\n    \t\t\t\t\t\tmListener.onImageLoad(mt, d);\n    \t\t\t\t\t}\n    \t\t\t\t}\n    \t\t\t});\n                return;\n            }\n        }\n\t\ttry {\n\t\t\tfinal Drawable d = loadImageFromUrl(mImageUrl);\n\t\t\tif(d != null){\n                imageCache.put(mImageUrl, new SoftReference(d));\n\t\t\t}\n\t\t\thandler.post(new Runnable() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\tif(mAllowLoad){\n\t\t\t\t\t\tmListener.onImageLoad(mt, d);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (IOException e) {\n\t\t\thandler.post(new Runnable() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\tmListener.onError(mt);\n\t\t\t\t}\n\t\t\t});\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n```\n\n这里的imageCache是一个哈希表\nprivate HashMap&lt;String, SoftReference&gt; imageCache = new HashMap&lt;String, SoftReference&gt;();\n我们可以很清晰的看到当通过图片的url地址可以在哈希表中找到直接从哈希表中得到对应的软引用（不会被随意回收，不过当内存吃紧返回00mb的时候会被回收）.如果此时允许加载，调用OnImageLoadListener的onImageLoad对应的接口：\n此接口在BookItemAdapter中进行了实现：\n\n```\nSyncImageLoader.OnImageLoadListener imageLoadListener = new SyncImageLoader.OnImageLoadListener(){\n\n\t\t@Override\n\t\tpublic void onImageLoad(Integer t, Drawable drawable) {\n\t\t\t//BookModel model = (BookModel) getItem(t);\n\t\t\tView view = mListView.findViewWithTag(t);\n\t\t\tif(view != null){\n\t\t\t\tImageView iv = (ImageView) view.findViewById(R.id.sItemIcon);\n\t\t\t\tiv.setBackgroundDrawable(drawable);\n\t\t\t}\n\t\t}\n\t\t@Override\n\t\tpublic void onError(Integer t) {\n//\t\t\tBookModel model = (BookModel) getItem(t);\n\t\t\tView view = mListView.findViewWithTag(t);\n\t\t\tif(view != null){\n\t\t\t\tImageView iv = (ImageView) view.findViewById(R.id.sItemIcon);\n\t\t\t\tiv.setBackgroundResource(R.drawable.rc_item_bg);\n\t\t\t}\n\t\t}\n\n\t};\n```\n\n很显然这里通过传入的position可以得到对应item的View我们可以看下BookItemAdapter中的getView\n\n```\nconvertView.setTag(position);\n```\n\n确实是将对应的position设置为其tag.\n回到SyncImageLoader的private void loadImage(final String mImageUrl,final Integer mt,final OnImageLoadListener mListener):\n当在哈希表中找不到对应的软引用，则通过loadImageFromUrl获得：\n\n```\npublic static Drawable loadImageFromUrl(String url) throws IOException {\n\t\tDebugUtil.debug(url);\n\t\tif(Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)){\n\t\t\t//if local SD CARD usable create local ache in SD card.\n\t\t\tFile f = new File(Environment.getExternalStorageDirectory()+\"/TestSyncListView/\"+MD5.getMD5(url));\n\t\t\tif(f.exists()){\n\t\t\t\tFileInputStream fis = new FileInputStream(f);\n\t\t\t\tDrawable d = Drawable.createFromStream(fis, \"src\");\n\t\t\t\treturn d;\n\t\t\t}\n\t\t\tURL m = new URL(url);\n\t\t\tInputStream i = (InputStream) m.getContent();\n\t\t\tDataInputStream in = new DataInputStream(i);\n\t\t\tFileOutputStream out = new FileOutputStream(f);\n\t\t\tbyte[] buffer = new byte[1024];\n\t\t\tint   byteread=0;\n\t\t\twhile ((byteread = in.read(buffer)) != -1) {\n\t\t\t\tout.write(buffer, 0, byteread);\n\t\t\t}\n\t\t\tin.close();\n\t\t\tout.close();\n\t\t\tDrawable d = Drawable.createFromStream(i, \"src\");\n\t\t\treturn loadImageFromUrl(url);\n\t\t}else{\n\t\t\t//if local SD CARD unusable only get Drawable from input stream.\n\t\t\tURL m = new URL(url);\n\t\t\tInputStream i = (InputStream) m.getContent();\n\t\t\tDrawable d = Drawable.createFromStream(i, \"src\");\n\t\t\treturn d;\n\t\t}\n\n\t}\n```\n\n此函数从网络上获得图片并创建对应Drawable.如果sd卡可用:\n如果对应缓存文件存在（已经缓存），则直接从缓存文件中取得，否则从网路上读取后，创建缓存文件(同样以MD5加密形式命名）。\n如果不sdcard不可用直接从网络上读取.\n返回Drawable.\n通过所返回的Drawable 判断是否调用onImageLoad接口或是onError接口（显示默认图片）。\n\n在之前我们已经了解到如果SCROLL_STATE_IDLE的时候进行加载，我们看下它的调用：\n\n```\ncase AbsListView.OnScrollListener.SCROLL_STATE_IDLE:\n\t\t\t\t\tDebugUtil.debug(\"SCROLL_STATE_IDLE\");\n\t\t\t\t\tloadImage();\n\t\t\t\t\t//loadImage();\n\t\t\t\t\tbreak;\n```\n\n对应的loadImage():\n\n```\npublic void loadImage(){\n\t\tint start = mListView.getFirstVisiblePosition();\n\t\tint end =mListView.getLastVisiblePosition();\n\t\tif(end &gt;= getCount()){\n\t\t\tend = getCount() -1;\n\t\t}\n\t\tsyncImageLoader.setLoadLimit(start, end);\n\t\tsyncImageLoader.unlock();\n\t}\n```\n\n这里的把当前界面的第一个item的position与最后一个item的position传给syncImageLoader，然后进行解锁：\n\n```\npublic void unlock(){\n\t\tmAllowLoad = true;\n\t\tsynchronized (lock) {\n\t\t\tlock.notifyAll(); //wake up all waiting thread.\n\t\t}\n\t}\n```\n\n此时getView中各种加载，这里的加载条件与方法上面已经知道了。\n其它的，入口的reload和刷新的作用一样.重新刷新一遍。\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2012/12/31/异步加载专题-原创分析-中级篇本地缓存、ListView滑动停止加载、利用sync","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66k1004z95bu4g1h9unu","content":"<blockquote>\n<p>本文分析此源码(源码作者也许叫cindy吧）：<a href=\"http://s.yunio.com/Wd8Nxm\" target=\"_blank\" rel=\"external\">http://s.yunio.com/Wd8Nxm</a></p>\n</blockquote>\n<p><img src=\"/img/async-1.png\" alt=\"\"></p>\n<a id=\"more\"></a>\n<blockquote>\n<p>本项目非常值得分析的一点除了它的异步加载外，还有它良好的文件结构：<br>固定的临时文件夹创建放在MyApp(继承于Application）（如备注，当application/package被创建时，此函数被实例化:</p>\n</blockquote>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cindy.android.test.synclistview;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.<span class=\"type\">File</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.app.<span class=\"type\">Application</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.<span class=\"type\">Environment</span>;</div><div class=\"line\"></div><div class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span></span>&#123;</div><div class=\"line\"><span class=\"comment\">//will cause that class to be instantiated for you when the process for your application/package is created...</span></div><div class=\"line\">\t<span class=\"comment\">//create cache on install application</span></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\tpublic void onCreate() &#123;</div><div class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">\t\t<span class=\"keyword\">super</span>.onCreate();</div><div class=\"line\">\t\t<span class=\"type\">File</span> f = <span class=\"keyword\">new</span> <span class=\"type\">File</span>(<span class=\"type\">Environment</span>.getExternalStorageDirectory()+<span class=\"string\">\"/TestSyncListView/\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(!f.exists())&#123;</div><div class=\"line\">\t\t\tf.mkdir();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当然了，需要在AndroidManifest.xml中定义：</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">........</div></pre></td></tr></table></figure>\n<p>Log记录做一个类，这样即可以统一管理TAG也可以清晰的通过此类明白自己项目会涉及到问题.并且统一管理对应的显示规则：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cindy.android.test.synclistview;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</div><div class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.Toast;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DebugUtil</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"DebugUtil\"</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> DEBUG = <span class=\"keyword\">true</span>;</div><div class=\"line\">     <span class=\"comment\">//for debug show log.</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">toast</span><span class=\"params\">(Context context,String content)</span></span>&#123;</div><div class=\"line\">        Toast.makeText(context, content, Toast.LENGTH_SHORT).show();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">debug</span><span class=\"params\">(String tag,String msg)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">            Log.d(tag, msg);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">debug</span><span class=\"params\">(String msg)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">            Log.d(TAG, msg);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">error</span><span class=\"params\">(String tag,String <span class=\"keyword\">error</span>)</span></span>&#123;</div><div class=\"line\">        Log.e(tag, <span class=\"keyword\">error</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">error</span><span class=\"params\">(String <span class=\"keyword\">error</span>)</span></span>&#123;</div><div class=\"line\">        Log.e(TAG, <span class=\"keyword\">error</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>本项目封装了入口Activity的父类：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cindy.android.test.synclistview;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.app.Activity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Handler;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Message;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.Window;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.Toast;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstructCommonActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span>  </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//Main Activity's Parent</span></div><div class=\"line\">\t<span class=\"comment\">//Window Feature_no_Title</span></div><div class=\"line\">\t<span class=\"comment\">//Hanlder to Show some tip.</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> MyHandler <span class=\"keyword\">handler</span> = <span class=\"keyword\">new</span> MyHandler();</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">\t\trequestWindowFeature(Window.FEATURE_NO_TITLE);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">handleOtherMessage</span><span class=\"params\">(<span class=\"keyword\">int</span> flag)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sendMessage</span><span class=\"params\">(<span class=\"keyword\">int</span> flag)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">handler</span>.sendEmptyMessage(flag);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sendMessageDely</span><span class=\"params\">(<span class=\"keyword\">int</span> flag,<span class=\"keyword\">long</span> delayMillis)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">handler</span>.sendEmptyMessageDelayed(flag, delayMillis);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showToast</span><span class=\"params\">(String toast_message)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">handler</span>.toast_message = toast_message;</div><div class=\"line\">\t\tsendMessage(MyHandler.SHOW_STR_TOAST);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showToast</span><span class=\"params\">(<span class=\"keyword\">int</span> res)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">handler</span>.toast_res = res;</div><div class=\"line\">\t\tsendMessage(MyHandler.SHOW_RES_TOAST);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> SHOW_STR_TOAST = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> SHOW_RES_TOAST = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">private</span> String toast_message=<span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> toast_res;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!Thread.currentThread().isInterrupted()) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">switch</span> (msg.what) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">case</span> SHOW_STR_TOAST:</div><div class=\"line\">\t\t\t\t\t\tToast.makeText(getBaseContext(), toast_message, 1).show();</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">case</span> SHOW_RES_TOAST:</div><div class=\"line\">\t\t\t\t\t\tToast.makeText(getBaseContext(), toast_res, 1).show();</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">default</span>:</div><div class=\"line\">\t\t\t\t\t\thandleOtherMessage(msg.what);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>通过这个统一管理了主要的一些Toast简化代码量的同时也清晰了项目会遇到的一些需要给用户提示的情况，并且定义了整体的布局。这是一个很好的方法。</p>\n<p>由于加载是从网络上来的，需要延时是难免的。通过ProgressBar来下意识用户等候是常用方法，本项目作者将整个延时等待的load框架封装出来：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cindy.android.test.synclistview;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</div><div class=\"line\"><span class=\"keyword\">import</span> android.util.AttributeSet;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.Button;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.LinearLayout;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.ProgressBar;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.RelativeLayout;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.TextView;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoadStateView</span> <span class=\"keyword\">extends</span> <span class=\"title\">RelativeLayout</span></span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//Loading RelativeLayout</span></div><div class=\"line\">\tProgressBar progBar;</div><div class=\"line\"></div><div class=\"line\">\tLinearLayout downLoadErrMsgBox;</div><div class=\"line\"></div><div class=\"line\">\tTextView downLoadErrText;</div><div class=\"line\"></div><div class=\"line\">\tButton btnListLoadErr;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LoadStateView</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>(context, attrs);</div><div class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated constructor stub</span></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onFinishInflate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">\t\t<span class=\"keyword\">super</span>.onFinishInflate();</div><div class=\"line\">\t\tprogBar = (ProgressBar) findViewById(R.id.progBar);</div><div class=\"line\">\t\tdownLoadErrMsgBox = (LinearLayout) findViewById(R.id.downLoadErrMsgBox);</div><div class=\"line\">\t\tdownLoadErrText = (TextView) findViewById(R.id.downLoadErrText);</div><div class=\"line\">\t\tbtnListLoadErr = (Button) findViewById(R.id.btnListLoadErr);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startLoad</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tdownLoadErrMsgBox.setVisibility(View.GONE);</div><div class=\"line\">\t\tprogBar.setVisibility(View.VISIBLE);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stopLoad</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tprogBar.setVisibility(View.GONE);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showError</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tdownLoadErrMsgBox.setVisibility(View.VISIBLE);</div><div class=\"line\">\t\tprogBar.setVisibility(View.GONE);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showEmpty</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tdownLoadErrMsgBox.setVisibility(View.VISIBLE);</div><div class=\"line\">\t\tprogBar.setVisibility(View.GONE);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setOnReloadClickListener</span><span class=\"params\">(OnClickListener onReloadClickListener)</span></span>&#123;</div><div class=\"line\">\t\tbtnListLoadErr.setOnClickListener(onReloadClickListener);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样很好的对加载框架进行控制，隐藏了方法，同时使可读性增强。</p>\n<p>下面我们进入本项目的分析：<br>我们先按管理分析下作者的思路：<br>如果加载成功隐藏加载框架，失败显示按钮与有关文字 -&gt; 滑动如果处于闲置状态进行加载对应范围内的图片.<br>首先我们看看入口Activity:</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cindy.android.test.synclistview;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.ViewGroup;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.AdapterView;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.ListView;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestListViewActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstructCommonActivity</span></span></div><div class=\"line\">\t<span class=\"keyword\">implements</span> <span class=\"title\">AdapterView</span>.<span class=\"title\">OnItemClickListener</span>&#123;</div><div class=\"line\"></div><div class=\"line\">\tListView viewBookList;</div><div class=\"line\"></div><div class=\"line\">\tBookItemAdapter adapter;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//ViewGroup listFolder;</span></div><div class=\"line\"></div><div class=\"line\">\tLoadStateView loadStateView;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">\t\t<span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">\t\tsetContentView(R.layout.main);</div><div class=\"line\">\t\tviewBookList = (ListView) findViewById(R.id.viewBookList);</div><div class=\"line\">\t\tadapter = <span class=\"keyword\">new</span> BookItemAdapter(<span class=\"keyword\">this</span>,viewBookList);</div><div class=\"line\">\t\tloadStateView = (LoadStateView) findViewById(R.id.downloadStatusBox);</div><div class=\"line\"></div><div class=\"line\">\t\tloadStateView.setOnReloadClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">\t\t\t\treload();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t\t<span class=\"comment\">//listFolder = (ViewGroup) getLayoutInflater().inflate(R.layout.load_more, null);</span></div><div class=\"line\">\t\t<span class=\"comment\">//viewBookList.addFooterView(listFolder);</span></div><div class=\"line\">\t\tviewBookList.setAdapter(adapter);</div><div class=\"line\">\t\tviewBookList.setOnItemClickListener(<span class=\"keyword\">this</span>);</div><div class=\"line\">\t\treload();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">reload</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tadapter.clean();</div><div class=\"line\">\t\tloadStateView.startLoad();</div><div class=\"line\">\t\t<span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable()&#123;</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\tThread.sleep(<span class=\"number\">2</span>*<span class=\"number\">1000</span>);</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tloadDate();</div><div class=\"line\">\t\t\t\tsendMessage(REFRESH_LIST);</div><div class=\"line\"><span class=\"comment\">//\t\t\t\tsendMessageDely(LOAD_IMAGE, 500);</span></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;).start();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">loadDate</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&amp;lt;<span class=\"number\">10</span>;i++)&#123;</div><div class=\"line\">\t\t\tadapter.addBook(<span class=\"string\">\"吞噬星空\"</span>+i,</div><div class=\"line\">\t\t\t<span class=\"string\">\"http://www.pfwx.com/bookinfo/11/11000.html\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"http://www.pfwx.com/files/article/image/11/11000/11000s.jpg\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t\t\tadapter.addBook(<span class=\"string\">\"仙逆\"</span>+i,</div><div class=\"line\">\t\t\t<span class=\"string\">\"http://www.pfwx.com/bookinfo/9/9760.html\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"http://www.pfwx.com/files/article/image/9/9760/9760s.jpg\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t\t\tadapter.addBook(<span class=\"string\">\"武动乾坤\"</span>+i,</div><div class=\"line\">\t\t\t<span class=\"string\">\"http://www.pfwx.com/bookinfo/13/13939.html\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"http://www.pfwx.com/files/article/image/13/13939/13939s.jpg\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t\t\tadapter.addBook(<span class=\"string\">\"凡人修仙传\"</span>+i,</div><div class=\"line\">\t\t\t<span class=\"string\">\"http://www.pfwx.com/bookinfo/3/3237.html\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"http://www.pfwx.com/files/article/image/3/3237/3237s.jpg\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t\t\tadapter.addBook(<span class=\"string\">\"遮天\"</span>+i,</div><div class=\"line\">\t\t\t<span class=\"string\">\"http://www.pfwx.com/bookinfo/11/11381.html\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"http://www.pfwx.com/files/article/image/11/11381/11381s.jpg\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onItemClick</span><span class=\"params\">(AdapterView&amp;lt;?&amp;gt; arg0, View arg1, <span class=\"keyword\">int</span> arg2, <span class=\"keyword\">long</span> arg3)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> REFRESH_LIST = <span class=\"number\">0x10001</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> SHOW_LOAD_STATE_VIEW = <span class=\"number\">0x10003</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> HIDE_LOAD_STATE_VIEW = <span class=\"number\">0x10004</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">handleOtherMessage</span><span class=\"params\">(<span class=\"keyword\">int</span> flag)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">switch</span> (flag) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> REFRESH_LIST:</div><div class=\"line\">\t\t\tadapter.notifyDataSetChanged();</div><div class=\"line\">\t\t\tloadStateView.stopLoad();</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(adapter.getCount() == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\t\tloadStateView.showEmpty();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> SHOW_LOAD_STATE_VIEW:</div><div class=\"line\">\t\t\tloadStateView.startLoad();</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> HIDE_LOAD_STATE_VIEW:</div><div class=\"line\">\t\t\tloadStateView.stopLoad();</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">default</span>:</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>继承自封装好的Activity。<br>创建一个adapter对象：</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adapter = <span class=\"keyword\">new</span> <span class=\"type\">BookItemAdapter</span>(<span class=\"built_in\">this</span>,viewBookList);</div></pre></td></tr></table></figure>\n<p>下面我们来看下BookItemAdapter:</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cindy.android.test.synclistview;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Vector;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.drawable.Drawable;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.LayoutInflater;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.ViewGroup;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.AbsListView;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.BaseAdapter;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.ImageView;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.ListView;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.TextView;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookItemAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseAdapter</span></span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//Main List Adapter</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> LayoutInflater mInflater;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Context mContext;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Vector mModels = <span class=\"keyword\">new</span> Vector();</div><div class=\"line\">\t<span class=\"keyword\">private</span> ListView mListView;</div><div class=\"line\">\tSyncImageLoader syncImageLoader;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BookItemAdapter</span><span class=\"params\">(Context context,ListView listView)</span></span>&#123;</div><div class=\"line\">\t\tmInflater = LayoutInflater.from(context);</div><div class=\"line\">\t\tsyncImageLoader = <span class=\"keyword\">new</span> SyncImageLoader();</div><div class=\"line\">\t\tmContext = context;</div><div class=\"line\">\t\tmListView = listView;</div><div class=\"line\"></div><div class=\"line\">\t\tmListView.setOnScrollListener(onScrollListener);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addBook</span><span class=\"params\">(String book_name,String out_book_url,String out_book_pic)</span></span>&#123;</div><div class=\"line\">\t\tBookModel model = <span class=\"keyword\">new</span> BookModel();</div><div class=\"line\">\t\tmodel.book_name =book_name;</div><div class=\"line\">\t\tmodel.out_book_url = out_book_url;</div><div class=\"line\">\t\tmodel.out_book_pic = out_book_pic;</div><div class=\"line\">\t\tmModels.add(model);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clean</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tmModels.clear();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">return</span> mModels.<span class=\"title\">size</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\">Object <span class=\"title\">getItem</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(position &amp;gt;= getCount())&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">return</span> mModels.<span class=\"title\">get</span><span class=\"params\">(position)</span></span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">getItemId</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> position;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\">View <span class=\"title\">getView</span><span class=\"params\">(<span class=\"keyword\">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(convertView == <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">\t\t\tconvertView = mInflater.inflate(R.layout.book_item_adapter, <span class=\"keyword\">null</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tBookModel model = mModels.get(position);</div><div class=\"line\">\t\tconvertView.setTag(position);</div><div class=\"line\">\t\tImageView iv = (ImageView) convertView.findViewById(R.id.sItemIcon);</div><div class=\"line\">\t\tTextView sItemTitle =  (TextView) convertView.findViewById(R.id.sItemTitle);</div><div class=\"line\">\t\tTextView sItemInfo =  (TextView) convertView.findViewById(R.id.sItemInfo);</div><div class=\"line\">\t\tsItemTitle.setText(model.book_name);</div><div class=\"line\">\t\tsItemInfo.setText(model.out_book_url);</div><div class=\"line\">\t\tiv.setBackgroundResource(R.drawable.rc_item_bg);</div><div class=\"line\">\t\tsyncImageLoader.loadImage(position,model.out_book_pic,imageLoadListener);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span>  convertView;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tSyncImageLoader.OnImageLoadListener imageLoadListener = <span class=\"keyword\">new</span> SyncImageLoader.OnImageLoadListener()&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onImageLoad</span><span class=\"params\">(Integer t, Drawable drawable)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//BookModel model = (BookModel) getItem(t);</span></div><div class=\"line\">\t\t\tView view = mListView.findViewWithTag(t);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(view != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">\t\t\t\tImageView iv = (ImageView) view.findViewById(R.id.sItemIcon);</div><div class=\"line\">\t\t\t\tiv.setBackgroundDrawable(drawable);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Integer t)</span> </span>&#123;</div><div class=\"line\">\t\t\tBookModel model = (BookModel) getItem(t);</div><div class=\"line\">\t\t\tView view = mListView.findViewWithTag(model);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(view != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">\t\t\t\tImageView iv = (ImageView) view.findViewById(R.id.sItemIcon);</div><div class=\"line\">\t\t\t\tiv.setBackgroundResource(R.drawable.rc_item_bg);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t&#125;;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">loadImage</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> start = mListView.getFirstVisiblePosition();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> end =mListView.getLastVisiblePosition();</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(end &amp;gt;= getCount())&#123;</div><div class=\"line\">\t\t\tend = getCount() <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tsyncImageLoader.setLoadLimit(start, end);</div><div class=\"line\">\t\tsyncImageLoader.unlock();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tAbsListView.OnScrollListener onScrollListener = <span class=\"keyword\">new</span> AbsListView.OnScrollListener() &#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onScrollStateChanged</span><span class=\"params\">(AbsListView view, <span class=\"keyword\">int</span> scrollState)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">switch</span> (scrollState) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">case</span> AbsListView.OnScrollListener.SCROLL_STATE_FLING:</div><div class=\"line\">\t\t\t\t\tDebugUtil.debug(<span class=\"string\">\"SCROLL_STATE_FLING\"</span>);</div><div class=\"line\">\t\t\t\t\tsyncImageLoader.lock();</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">case</span> AbsListView.OnScrollListener.SCROLL_STATE_IDLE:</div><div class=\"line\">\t\t\t\t\tDebugUtil.debug(<span class=\"string\">\"SCROLL_STATE_IDLE\"</span>);</div><div class=\"line\">\t\t\t\t\tloadImage();</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">//loadImage();</span></div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">case</span> AbsListView.OnScrollListener.SCROLL_STATE_TOUCH_SCROLL:</div><div class=\"line\">\t\t\t\t\tsyncImageLoader.lock();</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">default</span>:</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onScroll</span><span class=\"params\">(AbsListView view, <span class=\"keyword\">int</span> firstVisibleItem,</span></span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> visibleItemCount, <span class=\"keyword\">int</span> totalItemCount) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\"></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>此Adapter在构造时还获得了对应的ListView<br>我们可以看到</p>\n<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mListView.<span class=\"built_in\">set</span>OnScrollListener(<span class=\"keyword\">on</span>ScrollListener);</div></pre></td></tr></table></figure>\n<p>我们看下onScrollListener:</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">AbsListView.OnScrollListener onScrollListener = <span class=\"keyword\">new</span> AbsListView.OnScrollListener() &#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onScrollStateChanged</span><span class=\"params\">(AbsListView view, <span class=\"keyword\">int</span> scrollState)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">switch</span> (scrollState) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">case</span> AbsListView.OnScrollListener.SCROLL_STATE_FLING:</div><div class=\"line\">\t\t\t\t\tDebugUtil.debug(<span class=\"string\">\"SCROLL_STATE_FLING\"</span>);</div><div class=\"line\">\t\t\t\t\tsyncImageLoader.lock();</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">case</span> AbsListView.OnScrollListener.SCROLL_STATE_IDLE:</div><div class=\"line\">\t\t\t\t\tDebugUtil.debug(<span class=\"string\">\"SCROLL_STATE_IDLE\"</span>);</div><div class=\"line\">\t\t\t\t\tloadImage();</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">//loadImage();</span></div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">case</span> AbsListView.OnScrollListener.SCROLL_STATE_TOUCH_SCROLL:</div><div class=\"line\">\t\t\t\t\tsyncImageLoader.lock();</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">default</span>:</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onScroll</span><span class=\"params\">(AbsListView view, <span class=\"keyword\">int</span> firstVisibleItem,</span></span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> visibleItemCount, <span class=\"keyword\">int</span> totalItemCount) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\"></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;;</div></pre></td></tr></table></figure>\n<p>这里主要就是当滑动闲置的时候解锁加载.我们深入看下：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cindy.android.test.synclistview;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.DataInputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.File;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.ref.SoftReference;</div><div class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.drawable.Drawable;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Environment;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Handler;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SyncImageLoader</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//Sync Image Loader</span></div><div class=\"line\">\t<span class=\"comment\">//Message Load Image</span></div><div class=\"line\">\t<span class=\"comment\">//</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> Object lock = <span class=\"keyword\">new</span> Object();</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> mAllowLoad = <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> firstLoad = <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mStartLoadLimit = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mStopLoadLimit = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">final</span> Handler <span class=\"keyword\">handler</span> = <span class=\"keyword\">new</span> Handler();</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> HashMap&amp;lt;String, SoftReference&amp;gt; imageCache = <span class=\"keyword\">new</span> HashMap&amp;lt;String, SoftReference&amp;gt;();</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">OnImageLoadListener</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onImageLoad</span><span class=\"params\">(Integer t, Drawable drawable)</span></span>;</div><div class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Integer t)</span></span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setLoadLimit</span><span class=\"params\">(<span class=\"keyword\">int</span> startLoadLimit,<span class=\"keyword\">int</span> stopLoadLimit)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(startLoadLimit &amp;gt; stopLoadLimit)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tmStartLoadLimit = startLoadLimit;</div><div class=\"line\">\t\tmStopLoadLimit = stopLoadLimit;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">restore</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tmAllowLoad = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\tfirstLoad = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">lock</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tmAllowLoad = <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\tfirstLoad = <span class=\"keyword\">false</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">unlock</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tmAllowLoad = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (lock) &#123;</div><div class=\"line\">\t\t\tlock.notifyAll(); <span class=\"comment\">//wake up all waiting thread.</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">loadImage</span><span class=\"params\">(Integer t, String imageUrl,</span></span></div><div class=\"line\">\t\t\tOnImageLoadListener listener) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">final</span> OnImageLoadListener mListener = listener;</div><div class=\"line\">\t\t<span class=\"keyword\">final</span> String mImageUrl = imageUrl;</div><div class=\"line\">\t\t<span class=\"keyword\">final</span> Integer mt = t;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(!mAllowLoad)&#123;</div><div class=\"line\">\t\t\t\t\tDebugUtil.debug(<span class=\"string\">\"prepare to load\"</span>);</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">synchronized</span> (lock) &#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\t\t\tlock.wait();</div><div class=\"line\">\t\t\t\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\t\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(mAllowLoad &amp;amp;&amp;amp; firstLoad)&#123;</div><div class=\"line\">\t\t\t\t\tloadImage(mImageUrl, mt, mListener);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(mAllowLoad &amp;amp;&amp;amp; mt &amp;lt;= mStopLoadLimit &amp;amp;&amp;amp; mt &amp;gt;= mStartLoadLimit)&#123;</div><div class=\"line\">\t\t\t\t\tloadImage(mImageUrl, mt, mListener);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t&#125;).start();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">loadImage</span><span class=\"params\">(<span class=\"keyword\">final</span> String mImageUrl,<span class=\"keyword\">final</span> Integer mt,<span class=\"keyword\">final</span> OnImageLoadListener mListener)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (imageCache.containsKey(mImageUrl)) &#123;</div><div class=\"line\">            SoftReference softReference = imageCache.get(mImageUrl);</div><div class=\"line\">            <span class=\"keyword\">final</span> Drawable d = softReference.get();</div><div class=\"line\">            <span class=\"keyword\">if</span> (d != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            \t<span class=\"keyword\">handler</span>.post(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">    \t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">    \t\t\t\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    \t\t\t\t\t<span class=\"keyword\">if</span>(mAllowLoad)&#123;</div><div class=\"line\">    \t\t\t\t\t\tmListener.onImageLoad(mt, d);</div><div class=\"line\">    \t\t\t\t\t&#125;</div><div class=\"line\">    \t\t\t\t&#125;</div><div class=\"line\">    \t\t\t&#125;);</div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">final</span> Drawable d = loadImageFromUrl(mImageUrl);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(d != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">                imageCache.put(mImageUrl, <span class=\"keyword\">new</span> SoftReference(d));</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">handler</span>.post(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">\t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(mAllowLoad)&#123;</div><div class=\"line\">\t\t\t\t\t\tmListener.onImageLoad(mt, d);</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">handler</span>.post(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">\t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\t\tmListener.onError(mt);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;);</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\">Drawable <span class=\"title\">loadImageFromUrl</span><span class=\"params\">(String url)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">\t\tDebugUtil.debug(url);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED))&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//if local SD CARD usable create local ache in SD card.</span></div><div class=\"line\">\t\t\tFile f = <span class=\"keyword\">new</span> File(Environment.getExternalStorageDirectory()+<span class=\"string\">\"/TestSyncListView/\"</span>+MD5.getMD5(url));</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(f.exists())&#123;</div><div class=\"line\">\t\t\t\tFileInputStream fis = <span class=\"keyword\">new</span> FileInputStream(f);</div><div class=\"line\">\t\t\t\tDrawable d = Drawable.createFromStream(fis, <span class=\"string\">\"src\"</span>);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> d;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tURL m = <span class=\"keyword\">new</span> URL(url);</div><div class=\"line\">\t\t\tInputStream i = (InputStream) m.getContent();</div><div class=\"line\">\t\t\tDataInputStream in = <span class=\"keyword\">new</span> DataInputStream(i);</div><div class=\"line\">\t\t\tFileOutputStream out = <span class=\"keyword\">new</span> FileOutputStream(f);</div><div class=\"line\">\t\t\t<span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span>   byteread=<span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> ((byteread = in.read(buffer)) != <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">\t\t\t\tout.write(buffer, <span class=\"number\">0</span>, byteread);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tin.close();</div><div class=\"line\">\t\t\tout.close();</div><div class=\"line\">\t\t\tDrawable d = Drawable.createFromStream(i, <span class=\"string\">\"src\"</span>);</div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">return</span> <span class=\"title\">loadImageFromUrl</span><span class=\"params\">(url)</span></span>;</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//if local SD CARD unusable only get Drawable from input stream.</span></div><div class=\"line\">\t\t\tURL m = <span class=\"keyword\">new</span> URL(url);</div><div class=\"line\">\t\t\tInputStream i = (InputStream) m.getContent();</div><div class=\"line\">\t\t\tDrawable d = Drawable.createFromStream(i, <span class=\"string\">\"src\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> d;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以清晰的看到只有当mAllowLoad与firstLoad同为true或者mAllowLoad与获得的position在当前界面的时候调用loadImage:</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">loadImage</span><span class=\"params\">(<span class=\"keyword\">final</span> String mImageUrl,<span class=\"keyword\">final</span> Integer mt,<span class=\"keyword\">final</span> OnImageLoadListener mListener)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (imageCache.containsKey(mImageUrl)) &#123;</div><div class=\"line\">            SoftReference softReference = imageCache.get(mImageUrl);</div><div class=\"line\">            <span class=\"keyword\">final</span> Drawable d = softReference.get();</div><div class=\"line\">            <span class=\"keyword\">if</span> (d != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            \t<span class=\"keyword\">handler</span>.post(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">    \t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">    \t\t\t\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    \t\t\t\t\t<span class=\"keyword\">if</span>(mAllowLoad)&#123;</div><div class=\"line\">    \t\t\t\t\t\tmListener.onImageLoad(mt, d);</div><div class=\"line\">    \t\t\t\t\t&#125;</div><div class=\"line\">    \t\t\t\t&#125;</div><div class=\"line\">    \t\t\t&#125;);</div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">final</span> Drawable d = loadImageFromUrl(mImageUrl);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(d != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">                imageCache.put(mImageUrl, <span class=\"keyword\">new</span> SoftReference(d));</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">handler</span>.post(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">\t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(mAllowLoad)&#123;</div><div class=\"line\">\t\t\t\t\t\tmListener.onImageLoad(mt, d);</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">handler</span>.post(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">\t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\t\tmListener.onError(mt);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;);</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<p>这里的imageCache是一个哈希表<br>private HashMap&lt;String, SoftReference&gt; imageCache = new HashMap&lt;String, SoftReference&gt;();<br>我们可以很清晰的看到当通过图片的url地址可以在哈希表中找到直接从哈希表中得到对应的软引用（不会被随意回收，不过当内存吃紧返回00mb的时候会被回收）.如果此时允许加载，调用OnImageLoadListener的onImageLoad对应的接口：<br>此接口在BookItemAdapter中进行了实现：</p>\n<figure class=\"highlight pony\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"type\">SyncImageLoader</span>.<span class=\"type\">OnImageLoadListener</span> imageLoadListener = <span class=\"function\"><span class=\"keyword\">new</span> <span class=\"title\">SyncImageLoader</span>.<span class=\"title\">OnImageLoadListener</span>()&#123;</span></div><div class=\"line\"></div><div class=\"line\">\t\t@<span class=\"title\">Override</span></div><div class=\"line\">\t\t<span class=\"title\">public</span> <span class=\"title\">void</span> <span class=\"title\">onImageLoad</span>(<span class=\"type\">Integer</span> t, <span class=\"type\">Drawable</span> drawable) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//BookModel model = (BookModel) getItem(t);</span></div><div class=\"line\">\t\t\t<span class=\"title\">View</span> <span class=\"title\">view</span> = <span class=\"title\">mListView</span>.<span class=\"title\">findViewWithTag</span>(t);</div><div class=\"line\">\t\t\t<span class=\"title\">if</span>(view != null)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"title\">ImageView</span> <span class=\"title\">iv</span> = (<span class=\"type\">ImageView</span>) <span class=\"title\">view</span>.<span class=\"title\">findViewById</span>(<span class=\"type\">R</span>.id.sItemIcon);</div><div class=\"line\">\t\t\t\t<span class=\"title\">iv</span>.<span class=\"title\">setBackgroundDrawable</span>(drawable);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t@<span class=\"title\">Override</span></div><div class=\"line\">\t\t<span class=\"title\">public</span> <span class=\"title\">void</span> <span class=\"title\">onError</span>(<span class=\"type\">Integer</span> t) &#123;</div><div class=\"line\"><span class=\"comment\">//\t\t\tBookModel model = (BookModel) getItem(t);</span></div><div class=\"line\">\t\t\t<span class=\"title\">View</span> <span class=\"title\">view</span> = <span class=\"title\">mListView</span>.<span class=\"title\">findViewWithTag</span>(t);</div><div class=\"line\">\t\t\t<span class=\"title\">if</span>(view != null)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"title\">ImageView</span> <span class=\"title\">iv</span> = (<span class=\"type\">ImageView</span>) <span class=\"title\">view</span>.<span class=\"title\">findViewById</span>(<span class=\"type\">R</span>.id.sItemIcon);</div><div class=\"line\">\t\t\t\t<span class=\"title\">iv</span>.<span class=\"title\">setBackgroundResource</span>(<span class=\"type\">R</span>.drawable.rc_item_bg);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t&#125;;</div></pre></td></tr></table></figure>\n<p>很显然这里通过传入的position可以得到对应item的View我们可以看下BookItemAdapter中的getView</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">convertView.setTag(position)<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p>确实是将对应的position设置为其tag.<br>回到SyncImageLoader的private void loadImage(final String mImageUrl,final Integer mt,final OnImageLoadListener mListener):<br>当在哈希表中找不到对应的软引用，则通过loadImageFromUrl获得：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Drawable loadImageFromUrl(<span class=\"keyword\">String</span> url) throws IOException &#123;</div><div class=\"line\">\t\tDebugUtil.debug(url);</div><div class=\"line\">\t\t<span class=\"built_in\">if</span>(Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED))&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//if local SD CARD usable create local ache in SD card.</span></div><div class=\"line\">\t\t\t<span class=\"built_in\">File</span> f = <span class=\"keyword\">new</span> <span class=\"built_in\">File</span>(Environment.getExternalStorageDirectory()+<span class=\"string\">\"/TestSyncListView/\"</span>+MD5.getMD5(url));</div><div class=\"line\">\t\t\t<span class=\"built_in\">if</span>(f.<span class=\"built_in\">exists</span>())&#123;</div><div class=\"line\">\t\t\t\tFileInputStream fis = <span class=\"keyword\">new</span> FileInputStream(f);</div><div class=\"line\">\t\t\t\tDrawable d = Drawable.createFromStream(fis, <span class=\"string\">\"src\"</span>);</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">return</span> d;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tURL m = <span class=\"keyword\">new</span> URL(url);</div><div class=\"line\">\t\t\tInputStream i = (InputStream) m.getContent();</div><div class=\"line\">\t\t\tDataInputStream in = <span class=\"keyword\">new</span> DataInputStream(i);</div><div class=\"line\">\t\t\tFileOutputStream out = <span class=\"keyword\">new</span> FileOutputStream(f);</div><div class=\"line\">\t\t\t<span class=\"keyword\">byte</span>[] <span class=\"built_in\">buffer</span> = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span>   byteread=<span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t<span class=\"built_in\">while</span> ((byteread = in.<span class=\"built_in\">read</span>(<span class=\"built_in\">buffer</span>)) != <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">\t\t\t\tout.<span class=\"built_in\">write</span>(<span class=\"built_in\">buffer</span>, <span class=\"number\">0</span>, byteread);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tin.<span class=\"built_in\">close</span>();</div><div class=\"line\">\t\t\tout.<span class=\"built_in\">close</span>();</div><div class=\"line\">\t\t\tDrawable d = Drawable.createFromStream(i, <span class=\"string\">\"src\"</span>);</div><div class=\"line\">\t\t\t<span class=\"built_in\">return</span> loadImageFromUrl(url);</div><div class=\"line\">\t\t&#125;<span class=\"built_in\">else</span>&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//if local SD CARD unusable only get Drawable from input stream.</span></div><div class=\"line\">\t\t\tURL m = <span class=\"keyword\">new</span> URL(url);</div><div class=\"line\">\t\t\tInputStream i = (InputStream) m.getContent();</div><div class=\"line\">\t\t\tDrawable d = Drawable.createFromStream(i, <span class=\"string\">\"src\"</span>);</div><div class=\"line\">\t\t\t<span class=\"built_in\">return</span> d;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<p>此函数从网络上获得图片并创建对应Drawable.如果sd卡可用:<br>如果对应缓存文件存在（已经缓存），则直接从缓存文件中取得，否则从网路上读取后，创建缓存文件(同样以MD5加密形式命名）。<br>如果不sdcard不可用直接从网络上读取.<br>返回Drawable.<br>通过所返回的Drawable 判断是否调用onImageLoad接口或是onError接口（显示默认图片）。</p>\n<p>在之前我们已经了解到如果SCROLL_STATE_IDLE的时候进行加载，我们看下它的调用：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">case</span> AbsListView.OnScrollListener.SCROLL_STATE_IDLE:</div><div class=\"line\">\t\t\t\t\tDebugUtil.debug(<span class=\"string\">\"SCROLL_STATE_IDLE\"</span>);</div><div class=\"line\">\t\t\t\t\t<span class=\"built_in\">loadImage</span>();</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">//loadImage();</span></div><div class=\"line\">\t\t\t\t\t<span class=\"built_in\">break</span>;</div></pre></td></tr></table></figure>\n<p>对应的loadImage():</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"built_in\">loadImage</span>()&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> start = mListView.getFirstVisiblePosition();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> <span class=\"built_in\">end</span> =mListView.getLastVisiblePosition();</div><div class=\"line\">\t\t<span class=\"built_in\">if</span>(<span class=\"built_in\">end</span> &amp;gt;= getCount())&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">end</span> = getCount() <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tsyncImageLoader.setLoadLimit(start, <span class=\"built_in\">end</span>);</div><div class=\"line\">\t\tsyncImageLoader.unlock();</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<p>这里的把当前界面的第一个item的position与最后一个item的position传给syncImageLoader，然后进行解锁：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">unlock</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\tmAllowLoad = <span class=\"literal\">true</span>;</div><div class=\"line\">\t\tsynchronized (<span class=\"keyword\">lock</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">lock</span>.notifyAll(); <span class=\"comment\">//wake up all waiting thread.</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<p>此时getView中各种加载，这里的加载条件与方法上面已经知道了。<br>其它的，入口的reload和刷新的作用一样.重新刷新一遍。</p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>本文分析此源码(源码作者也许叫cindy吧）：<a href=\"http://s.yunio.com/Wd8Nxm\">http://s.yunio.com/Wd8Nxm</a></p>\n</blockquote>\n<p><img src=\"/img/async-1.png\" alt=\"\"></p>","more":"<blockquote>\n<p>本项目非常值得分析的一点除了它的异步加载外，还有它良好的文件结构：<br>固定的临时文件夹创建放在MyApp(继承于Application）（如备注，当application/package被创建时，此函数被实例化:</p>\n</blockquote>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cindy.android.test.synclistview;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.<span class=\"type\">File</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.app.<span class=\"type\">Application</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.<span class=\"type\">Environment</span>;</div><div class=\"line\"></div><div class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span></span>&#123;</div><div class=\"line\"><span class=\"comment\">//will cause that class to be instantiated for you when the process for your application/package is created...</span></div><div class=\"line\">\t<span class=\"comment\">//create cache on install application</span></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\tpublic void onCreate() &#123;</div><div class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">\t\t<span class=\"keyword\">super</span>.onCreate();</div><div class=\"line\">\t\t<span class=\"type\">File</span> f = <span class=\"keyword\">new</span> <span class=\"type\">File</span>(<span class=\"type\">Environment</span>.getExternalStorageDirectory()+<span class=\"string\">\"/TestSyncListView/\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(!f.exists())&#123;</div><div class=\"line\">\t\t\tf.mkdir();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当然了，需要在AndroidManifest.xml中定义：</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">........</div></pre></td></tr></table></figure>\n<p>Log记录做一个类，这样即可以统一管理TAG也可以清晰的通过此类明白自己项目会涉及到问题.并且统一管理对应的显示规则：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cindy.android.test.synclistview;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</div><div class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.Toast;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DebugUtil</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"DebugUtil\"</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> DEBUG = <span class=\"keyword\">true</span>;</div><div class=\"line\">     <span class=\"comment\">//for debug show log.</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">toast</span><span class=\"params\">(Context context,String content)</span></span>&#123;</div><div class=\"line\">        Toast.makeText(context, content, Toast.LENGTH_SHORT).show();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">debug</span><span class=\"params\">(String tag,String msg)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">            Log.d(tag, msg);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">debug</span><span class=\"params\">(String msg)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">            Log.d(TAG, msg);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">error</span><span class=\"params\">(String tag,String <span class=\"keyword\">error</span>)</span></span>&#123;</div><div class=\"line\">        Log.e(tag, <span class=\"keyword\">error</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">error</span><span class=\"params\">(String <span class=\"keyword\">error</span>)</span></span>&#123;</div><div class=\"line\">        Log.e(TAG, <span class=\"keyword\">error</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>本项目封装了入口Activity的父类：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cindy.android.test.synclistview;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.app.Activity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Handler;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Message;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.Window;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.Toast;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstructCommonActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span>  </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//Main Activity's Parent</span></div><div class=\"line\">\t<span class=\"comment\">//Window Feature_no_Title</span></div><div class=\"line\">\t<span class=\"comment\">//Hanlder to Show some tip.</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> MyHandler <span class=\"keyword\">handler</span> = <span class=\"keyword\">new</span> MyHandler();</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">\t\trequestWindowFeature(Window.FEATURE_NO_TITLE);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">handleOtherMessage</span><span class=\"params\">(<span class=\"keyword\">int</span> flag)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sendMessage</span><span class=\"params\">(<span class=\"keyword\">int</span> flag)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">handler</span>.sendEmptyMessage(flag);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sendMessageDely</span><span class=\"params\">(<span class=\"keyword\">int</span> flag,<span class=\"keyword\">long</span> delayMillis)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">handler</span>.sendEmptyMessageDelayed(flag, delayMillis);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showToast</span><span class=\"params\">(String toast_message)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">handler</span>.toast_message = toast_message;</div><div class=\"line\">\t\tsendMessage(MyHandler.SHOW_STR_TOAST);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showToast</span><span class=\"params\">(<span class=\"keyword\">int</span> res)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">handler</span>.toast_res = res;</div><div class=\"line\">\t\tsendMessage(MyHandler.SHOW_RES_TOAST);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> SHOW_STR_TOAST = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> SHOW_RES_TOAST = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">private</span> String toast_message=<span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> toast_res;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!Thread.currentThread().isInterrupted()) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">switch</span> (msg.what) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">case</span> SHOW_STR_TOAST:</div><div class=\"line\">\t\t\t\t\t\tToast.makeText(getBaseContext(), toast_message, 1).show();</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">case</span> SHOW_RES_TOAST:</div><div class=\"line\">\t\t\t\t\t\tToast.makeText(getBaseContext(), toast_res, 1).show();</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">default</span>:</div><div class=\"line\">\t\t\t\t\t\thandleOtherMessage(msg.what);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>通过这个统一管理了主要的一些Toast简化代码量的同时也清晰了项目会遇到的一些需要给用户提示的情况，并且定义了整体的布局。这是一个很好的方法。</p>\n<p>由于加载是从网络上来的，需要延时是难免的。通过ProgressBar来下意识用户等候是常用方法，本项目作者将整个延时等待的load框架封装出来：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cindy.android.test.synclistview;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</div><div class=\"line\"><span class=\"keyword\">import</span> android.util.AttributeSet;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.Button;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.LinearLayout;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.ProgressBar;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.RelativeLayout;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.TextView;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoadStateView</span> <span class=\"keyword\">extends</span> <span class=\"title\">RelativeLayout</span></span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//Loading RelativeLayout</span></div><div class=\"line\">\tProgressBar progBar;</div><div class=\"line\"></div><div class=\"line\">\tLinearLayout downLoadErrMsgBox;</div><div class=\"line\"></div><div class=\"line\">\tTextView downLoadErrText;</div><div class=\"line\"></div><div class=\"line\">\tButton btnListLoadErr;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LoadStateView</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>(context, attrs);</div><div class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated constructor stub</span></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onFinishInflate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">\t\t<span class=\"keyword\">super</span>.onFinishInflate();</div><div class=\"line\">\t\tprogBar = (ProgressBar) findViewById(R.id.progBar);</div><div class=\"line\">\t\tdownLoadErrMsgBox = (LinearLayout) findViewById(R.id.downLoadErrMsgBox);</div><div class=\"line\">\t\tdownLoadErrText = (TextView) findViewById(R.id.downLoadErrText);</div><div class=\"line\">\t\tbtnListLoadErr = (Button) findViewById(R.id.btnListLoadErr);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startLoad</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tdownLoadErrMsgBox.setVisibility(View.GONE);</div><div class=\"line\">\t\tprogBar.setVisibility(View.VISIBLE);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stopLoad</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tprogBar.setVisibility(View.GONE);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showError</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tdownLoadErrMsgBox.setVisibility(View.VISIBLE);</div><div class=\"line\">\t\tprogBar.setVisibility(View.GONE);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showEmpty</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tdownLoadErrMsgBox.setVisibility(View.VISIBLE);</div><div class=\"line\">\t\tprogBar.setVisibility(View.GONE);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setOnReloadClickListener</span><span class=\"params\">(OnClickListener onReloadClickListener)</span></span>&#123;</div><div class=\"line\">\t\tbtnListLoadErr.setOnClickListener(onReloadClickListener);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样很好的对加载框架进行控制，隐藏了方法，同时使可读性增强。</p>\n<p>下面我们进入本项目的分析：<br>我们先按管理分析下作者的思路：<br>如果加载成功隐藏加载框架，失败显示按钮与有关文字 -&gt; 滑动如果处于闲置状态进行加载对应范围内的图片.<br>首先我们看看入口Activity:</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cindy.android.test.synclistview;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.ViewGroup;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.AdapterView;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.ListView;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestListViewActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstructCommonActivity</span></div><div class=\"line\">\t<span class=\"keyword\">implements</span> <span class=\"title\">AdapterView</span>.<span class=\"title\">OnItemClickListener</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\tListView viewBookList;</div><div class=\"line\"></div><div class=\"line\">\tBookItemAdapter adapter;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//ViewGroup listFolder;</span></div><div class=\"line\"></div><div class=\"line\">\tLoadStateView loadStateView;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">\t\t<span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">\t\tsetContentView(R.layout.main);</div><div class=\"line\">\t\tviewBookList = (ListView) findViewById(R.id.viewBookList);</div><div class=\"line\">\t\tadapter = <span class=\"keyword\">new</span> BookItemAdapter(<span class=\"keyword\">this</span>,viewBookList);</div><div class=\"line\">\t\tloadStateView = (LoadStateView) findViewById(R.id.downloadStatusBox);</div><div class=\"line\"></div><div class=\"line\">\t\tloadStateView.setOnReloadClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">\t\t\t\treload();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t\t<span class=\"comment\">//listFolder = (ViewGroup) getLayoutInflater().inflate(R.layout.load_more, null);</span></div><div class=\"line\">\t\t<span class=\"comment\">//viewBookList.addFooterView(listFolder);</span></div><div class=\"line\">\t\tviewBookList.setAdapter(adapter);</div><div class=\"line\">\t\tviewBookList.setOnItemClickListener(<span class=\"keyword\">this</span>);</div><div class=\"line\">\t\treload();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">reload</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tadapter.clean();</div><div class=\"line\">\t\tloadStateView.startLoad();</div><div class=\"line\">\t\t<span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable()&#123;</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\tThread.sleep(<span class=\"number\">2</span>*<span class=\"number\">1000</span>);</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tloadDate();</div><div class=\"line\">\t\t\t\tsendMessage(REFRESH_LIST);</div><div class=\"line\"><span class=\"comment\">//\t\t\t\tsendMessageDely(LOAD_IMAGE, 500);</span></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;).start();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">loadDate</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&amp;lt;<span class=\"number\">10</span>;i++)&#123;</div><div class=\"line\">\t\t\tadapter.addBook(<span class=\"string\">\"吞噬星空\"</span>+i,</div><div class=\"line\">\t\t\t<span class=\"string\">\"http://www.pfwx.com/bookinfo/11/11000.html\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"http://www.pfwx.com/files/article/image/11/11000/11000s.jpg\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t\t\tadapter.addBook(<span class=\"string\">\"仙逆\"</span>+i,</div><div class=\"line\">\t\t\t<span class=\"string\">\"http://www.pfwx.com/bookinfo/9/9760.html\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"http://www.pfwx.com/files/article/image/9/9760/9760s.jpg\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t\t\tadapter.addBook(<span class=\"string\">\"武动乾坤\"</span>+i,</div><div class=\"line\">\t\t\t<span class=\"string\">\"http://www.pfwx.com/bookinfo/13/13939.html\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"http://www.pfwx.com/files/article/image/13/13939/13939s.jpg\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t\t\tadapter.addBook(<span class=\"string\">\"凡人修仙传\"</span>+i,</div><div class=\"line\">\t\t\t<span class=\"string\">\"http://www.pfwx.com/bookinfo/3/3237.html\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"http://www.pfwx.com/files/article/image/3/3237/3237s.jpg\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t\t\tadapter.addBook(<span class=\"string\">\"遮天\"</span>+i,</div><div class=\"line\">\t\t\t<span class=\"string\">\"http://www.pfwx.com/bookinfo/11/11381.html\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"http://www.pfwx.com/files/article/image/11/11381/11381s.jpg\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onItemClick</span><span class=\"params\">(AdapterView&amp;lt;?&amp;gt; arg0, View arg1, <span class=\"keyword\">int</span> arg2, <span class=\"keyword\">long</span> arg3)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> REFRESH_LIST = <span class=\"number\">0x10001</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> SHOW_LOAD_STATE_VIEW = <span class=\"number\">0x10003</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> HIDE_LOAD_STATE_VIEW = <span class=\"number\">0x10004</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">handleOtherMessage</span><span class=\"params\">(<span class=\"keyword\">int</span> flag)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">switch</span> (flag) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> REFRESH_LIST:</div><div class=\"line\">\t\t\tadapter.notifyDataSetChanged();</div><div class=\"line\">\t\t\tloadStateView.stopLoad();</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(adapter.getCount() == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\t\tloadStateView.showEmpty();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> SHOW_LOAD_STATE_VIEW:</div><div class=\"line\">\t\t\tloadStateView.startLoad();</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> HIDE_LOAD_STATE_VIEW:</div><div class=\"line\">\t\t\tloadStateView.stopLoad();</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">default</span>:</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>继承自封装好的Activity。<br>创建一个adapter对象：</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adapter = <span class=\"keyword\">new</span> <span class=\"type\">BookItemAdapter</span>(<span class=\"built_in\">this</span>,viewBookList);</div></pre></td></tr></table></figure>\n<p>下面我们来看下BookItemAdapter:</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cindy.android.test.synclistview;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Vector;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.drawable.Drawable;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.LayoutInflater;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.ViewGroup;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.AbsListView;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.BaseAdapter;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.ImageView;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.ListView;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.TextView;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookItemAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseAdapter</span></span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//Main List Adapter</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> LayoutInflater mInflater;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Context mContext;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Vector mModels = <span class=\"keyword\">new</span> Vector();</div><div class=\"line\">\t<span class=\"keyword\">private</span> ListView mListView;</div><div class=\"line\">\tSyncImageLoader syncImageLoader;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BookItemAdapter</span><span class=\"params\">(Context context,ListView listView)</span></span>&#123;</div><div class=\"line\">\t\tmInflater = LayoutInflater.from(context);</div><div class=\"line\">\t\tsyncImageLoader = <span class=\"keyword\">new</span> SyncImageLoader();</div><div class=\"line\">\t\tmContext = context;</div><div class=\"line\">\t\tmListView = listView;</div><div class=\"line\"></div><div class=\"line\">\t\tmListView.setOnScrollListener(onScrollListener);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addBook</span><span class=\"params\">(String book_name,String out_book_url,String out_book_pic)</span></span>&#123;</div><div class=\"line\">\t\tBookModel model = <span class=\"keyword\">new</span> BookModel();</div><div class=\"line\">\t\tmodel.book_name =book_name;</div><div class=\"line\">\t\tmodel.out_book_url = out_book_url;</div><div class=\"line\">\t\tmodel.out_book_pic = out_book_pic;</div><div class=\"line\">\t\tmModels.add(model);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clean</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tmModels.clear();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">return</span> mModels.<span class=\"title\">size</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\">Object <span class=\"title\">getItem</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(position &amp;gt;= getCount())&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">return</span> mModels.<span class=\"title\">get</span><span class=\"params\">(position)</span></span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">getItemId</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> position;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\">View <span class=\"title\">getView</span><span class=\"params\">(<span class=\"keyword\">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(convertView == <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">\t\t\tconvertView = mInflater.inflate(R.layout.book_item_adapter, <span class=\"keyword\">null</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tBookModel model = mModels.get(position);</div><div class=\"line\">\t\tconvertView.setTag(position);</div><div class=\"line\">\t\tImageView iv = (ImageView) convertView.findViewById(R.id.sItemIcon);</div><div class=\"line\">\t\tTextView sItemTitle =  (TextView) convertView.findViewById(R.id.sItemTitle);</div><div class=\"line\">\t\tTextView sItemInfo =  (TextView) convertView.findViewById(R.id.sItemInfo);</div><div class=\"line\">\t\tsItemTitle.setText(model.book_name);</div><div class=\"line\">\t\tsItemInfo.setText(model.out_book_url);</div><div class=\"line\">\t\tiv.setBackgroundResource(R.drawable.rc_item_bg);</div><div class=\"line\">\t\tsyncImageLoader.loadImage(position,model.out_book_pic,imageLoadListener);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span>  convertView;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tSyncImageLoader.OnImageLoadListener imageLoadListener = <span class=\"keyword\">new</span> SyncImageLoader.OnImageLoadListener()&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onImageLoad</span><span class=\"params\">(Integer t, Drawable drawable)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//BookModel model = (BookModel) getItem(t);</span></div><div class=\"line\">\t\t\tView view = mListView.findViewWithTag(t);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(view != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">\t\t\t\tImageView iv = (ImageView) view.findViewById(R.id.sItemIcon);</div><div class=\"line\">\t\t\t\tiv.setBackgroundDrawable(drawable);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Integer t)</span> </span>&#123;</div><div class=\"line\">\t\t\tBookModel model = (BookModel) getItem(t);</div><div class=\"line\">\t\t\tView view = mListView.findViewWithTag(model);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(view != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">\t\t\t\tImageView iv = (ImageView) view.findViewById(R.id.sItemIcon);</div><div class=\"line\">\t\t\t\tiv.setBackgroundResource(R.drawable.rc_item_bg);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t&#125;;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">loadImage</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> start = mListView.getFirstVisiblePosition();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> end =mListView.getLastVisiblePosition();</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(end &amp;gt;= getCount())&#123;</div><div class=\"line\">\t\t\tend = getCount() <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tsyncImageLoader.setLoadLimit(start, end);</div><div class=\"line\">\t\tsyncImageLoader.unlock();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tAbsListView.OnScrollListener onScrollListener = <span class=\"keyword\">new</span> AbsListView.OnScrollListener() &#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onScrollStateChanged</span><span class=\"params\">(AbsListView view, <span class=\"keyword\">int</span> scrollState)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">switch</span> (scrollState) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">case</span> AbsListView.OnScrollListener.SCROLL_STATE_FLING:</div><div class=\"line\">\t\t\t\t\tDebugUtil.debug(<span class=\"string\">\"SCROLL_STATE_FLING\"</span>);</div><div class=\"line\">\t\t\t\t\tsyncImageLoader.lock();</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">case</span> AbsListView.OnScrollListener.SCROLL_STATE_IDLE:</div><div class=\"line\">\t\t\t\t\tDebugUtil.debug(<span class=\"string\">\"SCROLL_STATE_IDLE\"</span>);</div><div class=\"line\">\t\t\t\t\tloadImage();</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">//loadImage();</span></div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">case</span> AbsListView.OnScrollListener.SCROLL_STATE_TOUCH_SCROLL:</div><div class=\"line\">\t\t\t\t\tsyncImageLoader.lock();</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">default</span>:</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onScroll</span><span class=\"params\">(AbsListView view, <span class=\"keyword\">int</span> firstVisibleItem,</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> visibleItemCount, <span class=\"keyword\">int</span> totalItemCount)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\"></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>此Adapter在构造时还获得了对应的ListView<br>我们可以看到</p>\n<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mListView.<span class=\"built_in\">set</span>OnScrollListener(<span class=\"keyword\">on</span>ScrollListener);</div></pre></td></tr></table></figure>\n<p>我们看下onScrollListener:</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">AbsListView.OnScrollListener onScrollListener = <span class=\"keyword\">new</span> AbsListView.OnScrollListener() &#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onScrollStateChanged</span><span class=\"params\">(AbsListView view, <span class=\"keyword\">int</span> scrollState)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">switch</span> (scrollState) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">case</span> AbsListView.OnScrollListener.SCROLL_STATE_FLING:</div><div class=\"line\">\t\t\t\t\tDebugUtil.debug(<span class=\"string\">\"SCROLL_STATE_FLING\"</span>);</div><div class=\"line\">\t\t\t\t\tsyncImageLoader.lock();</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">case</span> AbsListView.OnScrollListener.SCROLL_STATE_IDLE:</div><div class=\"line\">\t\t\t\t\tDebugUtil.debug(<span class=\"string\">\"SCROLL_STATE_IDLE\"</span>);</div><div class=\"line\">\t\t\t\t\tloadImage();</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">//loadImage();</span></div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">case</span> AbsListView.OnScrollListener.SCROLL_STATE_TOUCH_SCROLL:</div><div class=\"line\">\t\t\t\t\tsyncImageLoader.lock();</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">default</span>:</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onScroll</span><span class=\"params\">(AbsListView view, <span class=\"keyword\">int</span> firstVisibleItem,</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> visibleItemCount, <span class=\"keyword\">int</span> totalItemCount)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\"></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;;</div></pre></td></tr></table></figure>\n<p>这里主要就是当滑动闲置的时候解锁加载.我们深入看下：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> cindy.android.test.synclistview;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.DataInputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.File;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.ref.SoftReference;</div><div class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.drawable.Drawable;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Environment;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Handler;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SyncImageLoader</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//Sync Image Loader</span></div><div class=\"line\">\t<span class=\"comment\">//Message Load Image</span></div><div class=\"line\">\t<span class=\"comment\">//</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> Object lock = <span class=\"keyword\">new</span> Object();</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> mAllowLoad = <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> firstLoad = <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mStartLoadLimit = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mStopLoadLimit = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">final</span> Handler <span class=\"keyword\">handler</span> = <span class=\"keyword\">new</span> Handler();</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> HashMap&amp;lt;String, SoftReference&amp;gt; imageCache = <span class=\"keyword\">new</span> HashMap&amp;lt;String, SoftReference&amp;gt;();</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">OnImageLoadListener</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onImageLoad</span><span class=\"params\">(Integer t, Drawable drawable)</span></span>;</div><div class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Integer t)</span></span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setLoadLimit</span><span class=\"params\">(<span class=\"keyword\">int</span> startLoadLimit,<span class=\"keyword\">int</span> stopLoadLimit)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(startLoadLimit &amp;gt; stopLoadLimit)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tmStartLoadLimit = startLoadLimit;</div><div class=\"line\">\t\tmStopLoadLimit = stopLoadLimit;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">restore</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tmAllowLoad = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\tfirstLoad = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">lock</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tmAllowLoad = <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\tfirstLoad = <span class=\"keyword\">false</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">unlock</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tmAllowLoad = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (lock) &#123;</div><div class=\"line\">\t\t\tlock.notifyAll(); <span class=\"comment\">//wake up all waiting thread.</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">loadImage</span><span class=\"params\">(Integer t, String imageUrl,</div><div class=\"line\">\t\t\tOnImageLoadListener listener)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">final</span> OnImageLoadListener mListener = listener;</div><div class=\"line\">\t\t<span class=\"keyword\">final</span> String mImageUrl = imageUrl;</div><div class=\"line\">\t\t<span class=\"keyword\">final</span> Integer mt = t;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(!mAllowLoad)&#123;</div><div class=\"line\">\t\t\t\t\tDebugUtil.debug(<span class=\"string\">\"prepare to load\"</span>);</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">synchronized</span> (lock) &#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\t\t\tlock.wait();</div><div class=\"line\">\t\t\t\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\t\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(mAllowLoad &amp;amp;&amp;amp; firstLoad)&#123;</div><div class=\"line\">\t\t\t\t\tloadImage(mImageUrl, mt, mListener);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(mAllowLoad &amp;amp;&amp;amp; mt &amp;lt;= mStopLoadLimit &amp;amp;&amp;amp; mt &amp;gt;= mStartLoadLimit)&#123;</div><div class=\"line\">\t\t\t\t\tloadImage(mImageUrl, mt, mListener);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t&#125;).start();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">loadImage</span><span class=\"params\">(<span class=\"keyword\">final</span> String mImageUrl,<span class=\"keyword\">final</span> Integer mt,<span class=\"keyword\">final</span> OnImageLoadListener mListener)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (imageCache.containsKey(mImageUrl)) &#123;</div><div class=\"line\">            SoftReference softReference = imageCache.get(mImageUrl);</div><div class=\"line\">            <span class=\"keyword\">final</span> Drawable d = softReference.get();</div><div class=\"line\">            <span class=\"keyword\">if</span> (d != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            \t<span class=\"keyword\">handler</span>.post(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">    \t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">    \t\t\t\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    \t\t\t\t\t<span class=\"keyword\">if</span>(mAllowLoad)&#123;</div><div class=\"line\">    \t\t\t\t\t\tmListener.onImageLoad(mt, d);</div><div class=\"line\">    \t\t\t\t\t&#125;</div><div class=\"line\">    \t\t\t\t&#125;</div><div class=\"line\">    \t\t\t&#125;);</div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">final</span> Drawable d = loadImageFromUrl(mImageUrl);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(d != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">                imageCache.put(mImageUrl, <span class=\"keyword\">new</span> SoftReference(d));</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">handler</span>.post(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">\t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(mAllowLoad)&#123;</div><div class=\"line\">\t\t\t\t\t\tmListener.onImageLoad(mt, d);</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">handler</span>.post(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">\t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\t\tmListener.onError(mt);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;);</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\">Drawable <span class=\"title\">loadImageFromUrl</span><span class=\"params\">(String url)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">\t\tDebugUtil.debug(url);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED))&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//if local SD CARD usable create local ache in SD card.</span></div><div class=\"line\">\t\t\tFile f = <span class=\"keyword\">new</span> File(Environment.getExternalStorageDirectory()+<span class=\"string\">\"/TestSyncListView/\"</span>+MD5.getMD5(url));</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(f.exists())&#123;</div><div class=\"line\">\t\t\t\tFileInputStream fis = <span class=\"keyword\">new</span> FileInputStream(f);</div><div class=\"line\">\t\t\t\tDrawable d = Drawable.createFromStream(fis, <span class=\"string\">\"src\"</span>);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> d;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tURL m = <span class=\"keyword\">new</span> URL(url);</div><div class=\"line\">\t\t\tInputStream i = (InputStream) m.getContent();</div><div class=\"line\">\t\t\tDataInputStream in = <span class=\"keyword\">new</span> DataInputStream(i);</div><div class=\"line\">\t\t\tFileOutputStream out = <span class=\"keyword\">new</span> FileOutputStream(f);</div><div class=\"line\">\t\t\t<span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span>   byteread=<span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> ((byteread = in.read(buffer)) != <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">\t\t\t\tout.write(buffer, <span class=\"number\">0</span>, byteread);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tin.close();</div><div class=\"line\">\t\t\tout.close();</div><div class=\"line\">\t\t\tDrawable d = Drawable.createFromStream(i, <span class=\"string\">\"src\"</span>);</div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">return</span> <span class=\"title\">loadImageFromUrl</span><span class=\"params\">(url)</span></span>;</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//if local SD CARD unusable only get Drawable from input stream.</span></div><div class=\"line\">\t\t\tURL m = <span class=\"keyword\">new</span> URL(url);</div><div class=\"line\">\t\t\tInputStream i = (InputStream) m.getContent();</div><div class=\"line\">\t\t\tDrawable d = Drawable.createFromStream(i, <span class=\"string\">\"src\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> d;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以清晰的看到只有当mAllowLoad与firstLoad同为true或者mAllowLoad与获得的position在当前界面的时候调用loadImage:</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">loadImage</span><span class=\"params\">(<span class=\"keyword\">final</span> String mImageUrl,<span class=\"keyword\">final</span> Integer mt,<span class=\"keyword\">final</span> OnImageLoadListener mListener)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (imageCache.containsKey(mImageUrl)) &#123;</div><div class=\"line\">            SoftReference softReference = imageCache.get(mImageUrl);</div><div class=\"line\">            <span class=\"keyword\">final</span> Drawable d = softReference.get();</div><div class=\"line\">            <span class=\"keyword\">if</span> (d != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            \t<span class=\"keyword\">handler</span>.post(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">    \t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">    \t\t\t\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    \t\t\t\t\t<span class=\"keyword\">if</span>(mAllowLoad)&#123;</div><div class=\"line\">    \t\t\t\t\t\tmListener.onImageLoad(mt, d);</div><div class=\"line\">    \t\t\t\t\t&#125;</div><div class=\"line\">    \t\t\t\t&#125;</div><div class=\"line\">    \t\t\t&#125;);</div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">final</span> Drawable d = loadImageFromUrl(mImageUrl);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(d != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">                imageCache.put(mImageUrl, <span class=\"keyword\">new</span> SoftReference(d));</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">handler</span>.post(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">\t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(mAllowLoad)&#123;</div><div class=\"line\">\t\t\t\t\t\tmListener.onImageLoad(mt, d);</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">handler</span>.post(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">\t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\t\tmListener.onError(mt);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;);</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<p>这里的imageCache是一个哈希表<br>private HashMap&lt;String, SoftReference&gt; imageCache = new HashMap&lt;String, SoftReference&gt;();<br>我们可以很清晰的看到当通过图片的url地址可以在哈希表中找到直接从哈希表中得到对应的软引用（不会被随意回收，不过当内存吃紧返回00mb的时候会被回收）.如果此时允许加载，调用OnImageLoadListener的onImageLoad对应的接口：<br>此接口在BookItemAdapter中进行了实现：</p>\n<figure class=\"highlight pony\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"type\">SyncImageLoader</span>.<span class=\"type\">OnImageLoadListener</span> imageLoadListener = <span class=\"function\"><span class=\"keyword\">new</span> <span class=\"title\">SyncImageLoader</span>.<span class=\"title\">OnImageLoadListener</span>()&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t@<span class=\"title\">Override</span></div><div class=\"line\">\t\t<span class=\"title\">public</span> <span class=\"title\">void</span> <span class=\"title\">onImageLoad</span>(<span class=\"type\">Integer</span> t, <span class=\"type\">Drawable</span> drawable) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//BookModel model = (BookModel) getItem(t);</span></div><div class=\"line\">\t\t\t<span class=\"title\">View</span> <span class=\"title\">view</span> = <span class=\"title\">mListView</span>.<span class=\"title\">findViewWithTag</span>(t);</div><div class=\"line\">\t\t\t<span class=\"title\">if</span>(view != null)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"title\">ImageView</span> <span class=\"title\">iv</span> = (<span class=\"type\">ImageView</span>) <span class=\"title\">view</span>.<span class=\"title\">findViewById</span>(<span class=\"type\">R</span>.id.sItemIcon);</div><div class=\"line\">\t\t\t\t<span class=\"title\">iv</span>.<span class=\"title\">setBackgroundDrawable</span>(drawable);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t@<span class=\"title\">Override</span></div><div class=\"line\">\t\t<span class=\"title\">public</span> <span class=\"title\">void</span> <span class=\"title\">onError</span>(<span class=\"type\">Integer</span> t) &#123;</div><div class=\"line\"><span class=\"comment\">//\t\t\tBookModel model = (BookModel) getItem(t);</span></div><div class=\"line\">\t\t\t<span class=\"title\">View</span> <span class=\"title\">view</span> = <span class=\"title\">mListView</span>.<span class=\"title\">findViewWithTag</span>(t);</div><div class=\"line\">\t\t\t<span class=\"title\">if</span>(view != null)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"title\">ImageView</span> <span class=\"title\">iv</span> = (<span class=\"type\">ImageView</span>) <span class=\"title\">view</span>.<span class=\"title\">findViewById</span>(<span class=\"type\">R</span>.id.sItemIcon);</div><div class=\"line\">\t\t\t\t<span class=\"title\">iv</span>.<span class=\"title\">setBackgroundResource</span>(<span class=\"type\">R</span>.drawable.rc_item_bg);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t&#125;;</span></div></pre></td></tr></table></figure>\n<p>很显然这里通过传入的position可以得到对应item的View我们可以看下BookItemAdapter中的getView</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">convertView.setTag(position)<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p>确实是将对应的position设置为其tag.<br>回到SyncImageLoader的private void loadImage(final String mImageUrl,final Integer mt,final OnImageLoadListener mListener):<br>当在哈希表中找不到对应的软引用，则通过loadImageFromUrl获得：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Drawable loadImageFromUrl(<span class=\"keyword\">String</span> url) throws IOException &#123;</div><div class=\"line\">\t\tDebugUtil.debug(url);</div><div class=\"line\">\t\t<span class=\"built_in\">if</span>(Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED))&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//if local SD CARD usable create local ache in SD card.</span></div><div class=\"line\">\t\t\t<span class=\"built_in\">File</span> f = <span class=\"keyword\">new</span> <span class=\"built_in\">File</span>(Environment.getExternalStorageDirectory()+<span class=\"string\">\"/TestSyncListView/\"</span>+MD5.getMD5(url));</div><div class=\"line\">\t\t\t<span class=\"built_in\">if</span>(f.<span class=\"built_in\">exists</span>())&#123;</div><div class=\"line\">\t\t\t\tFileInputStream fis = <span class=\"keyword\">new</span> FileInputStream(f);</div><div class=\"line\">\t\t\t\tDrawable d = Drawable.createFromStream(fis, <span class=\"string\">\"src\"</span>);</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">return</span> d;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tURL m = <span class=\"keyword\">new</span> URL(url);</div><div class=\"line\">\t\t\tInputStream i = (InputStream) m.getContent();</div><div class=\"line\">\t\t\tDataInputStream in = <span class=\"keyword\">new</span> DataInputStream(i);</div><div class=\"line\">\t\t\tFileOutputStream out = <span class=\"keyword\">new</span> FileOutputStream(f);</div><div class=\"line\">\t\t\t<span class=\"keyword\">byte</span>[] <span class=\"built_in\">buffer</span> = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span>   byteread=<span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t<span class=\"built_in\">while</span> ((byteread = in.<span class=\"built_in\">read</span>(<span class=\"built_in\">buffer</span>)) != <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">\t\t\t\tout.<span class=\"built_in\">write</span>(<span class=\"built_in\">buffer</span>, <span class=\"number\">0</span>, byteread);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tin.<span class=\"built_in\">close</span>();</div><div class=\"line\">\t\t\tout.<span class=\"built_in\">close</span>();</div><div class=\"line\">\t\t\tDrawable d = Drawable.createFromStream(i, <span class=\"string\">\"src\"</span>);</div><div class=\"line\">\t\t\t<span class=\"built_in\">return</span> loadImageFromUrl(url);</div><div class=\"line\">\t\t&#125;<span class=\"built_in\">else</span>&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//if local SD CARD unusable only get Drawable from input stream.</span></div><div class=\"line\">\t\t\tURL m = <span class=\"keyword\">new</span> URL(url);</div><div class=\"line\">\t\t\tInputStream i = (InputStream) m.getContent();</div><div class=\"line\">\t\t\tDrawable d = Drawable.createFromStream(i, <span class=\"string\">\"src\"</span>);</div><div class=\"line\">\t\t\t<span class=\"built_in\">return</span> d;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<p>此函数从网络上获得图片并创建对应Drawable.如果sd卡可用:<br>如果对应缓存文件存在（已经缓存），则直接从缓存文件中取得，否则从网路上读取后，创建缓存文件(同样以MD5加密形式命名）。<br>如果不sdcard不可用直接从网络上读取.<br>返回Drawable.<br>通过所返回的Drawable 判断是否调用onImageLoad接口或是onError接口（显示默认图片）。</p>\n<p>在之前我们已经了解到如果SCROLL_STATE_IDLE的时候进行加载，我们看下它的调用：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">case</span> AbsListView.OnScrollListener.SCROLL_STATE_IDLE:</div><div class=\"line\">\t\t\t\t\tDebugUtil.debug(<span class=\"string\">\"SCROLL_STATE_IDLE\"</span>);</div><div class=\"line\">\t\t\t\t\t<span class=\"built_in\">loadImage</span>();</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">//loadImage();</span></div><div class=\"line\">\t\t\t\t\t<span class=\"built_in\">break</span>;</div></pre></td></tr></table></figure>\n<p>对应的loadImage():</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"built_in\">loadImage</span>()&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> start = mListView.getFirstVisiblePosition();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> <span class=\"built_in\">end</span> =mListView.getLastVisiblePosition();</div><div class=\"line\">\t\t<span class=\"built_in\">if</span>(<span class=\"built_in\">end</span> &amp;gt;= getCount())&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">end</span> = getCount() <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tsyncImageLoader.setLoadLimit(start, <span class=\"built_in\">end</span>);</div><div class=\"line\">\t\tsyncImageLoader.unlock();</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<p>这里的把当前界面的第一个item的position与最后一个item的position传给syncImageLoader，然后进行解锁：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">unlock</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\tmAllowLoad = <span class=\"literal\">true</span>;</div><div class=\"line\">\t\tsynchronized (<span class=\"keyword\">lock</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">lock</span>.notifyAll(); <span class=\"comment\">//wake up all waiting thread.</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<p>此时getView中各种加载，这里的加载条件与方法上面已经知道了。<br>其它的，入口的reload和刷新的作用一样.重新刷新一遍。</p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"【异步加载专题】【原创分析】简单篇通过xml获取地址、本地文件缓存、异步加载","date":"2012-12-31T00:35:03.000Z","_content":"\n> 本文分析该内容：http://l5.yunpan.cn/lk/QkvuDuuCFWS89\n\n首先我们看下作者的思路：\n\n创建缓存目录 ->; 通过一个线程进行获取xml文件内容  ->; 对获取的xml文件进行解析获取所有的图片id、图片名称、图片地址 -> 在线程中通过Handler的Message创建listview的adapter -> 在adapter中实现异步加载图片资源.\n\n<!--more-->\n//下一篇将分析：[异步加载专题][原创分析]中级篇本地缓存、ListView滑动停止加载、利用synchronized控制线程数机制、很好的文件结构\n下面我们开始分析MainActivity:\n\n```\npackage com.example.synctask;\n\nimport java.io.File;\nimport java.util.List;\n\nimport android.app.Activity;\nimport android.graphics.Bitmap;\nimport android.graphics.BitmapFactory;\nimport android.os.Bundle;\nimport android.os.Environment;\nimport android.os.Handler;\nimport android.os.Message;\nimport android.widget.ListView;\n\npublic class MainActivity extends Activity {\n\tprotected static final int SUCCESS_GET_CONTACT = 0;\n\tprivate ListView mListView;\n\tprivate ImageAdapter mAdapter;\n\tprivate File cache;\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        mListView = (ListView) findViewById(R.id.listView);\n\n        //创建缓存目录，系统一运行就得创建缓存目录的，\n        cache = new File(Environment.getExternalStorageDirectory(), \"cache\");\n\n        if(!cache.exists()){\n        \tcache.mkdirs();\n        }\n\n        //获取数据，主UI线程是不能做耗时操作的，所以启动子线程来做\n        new Thread(){\n        \tpublic void run() {\n        \t\tContactService service = new ContactService();\n        \t\tList<contact> contacts = null;\n\t\t\t\ttry {\n\t\t\t\t\tcontacts = service.getContactAll();\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\t//子线程通过Message对象封装信息，并且用初始化好的，\n\t\t\t\t//Handler对象的sendMessage()方法把数据发送到主线程中，从而达到更新UI主线程的目的\n        \t\tMessage msg = new Message();\n        \t\tmsg.what = SUCCESS_GET_CONTACT;\n        \t\tmsg.obj = contacts;\n        \t\tmHandler.sendMessage(msg);\n        \t};\n        }.start();\n    }\n\n    private Handler mHandler = new Handler(){\n\t\tpublic void handleMessage(android.os.Message msg) {\n\t\t\tif(msg.what == SUCCESS_GET_CONTACT){\n\t\t\t\tList<contact> contacts = (List<contact>) msg.obj;\n\t\t\t\tmAdapter = new ImageAdapter(getApplicationContext(),contacts,cache);\n\t\t\t\tmListView.setAdapter(mAdapter);\n\t\t\t}\n\t\t};\n\t};\n\n    @Override\n    protected void onDestroy() {\n    \tsuper.onDestroy();\n    \t//清空缓存\n    \tFile[] files = cache.listFiles();\n    \tfor(File file :files){\n    \t\tfile.delete();\n    \t}\n    \tcache.delete();\n    }\n}\n```\n\n其中Contact用于存储从xml中读取到的对象类型：\n\n```\npackage com.example.synctask;\n\npublic class Contact {\n\tint id;\n\tString image;\n\tString name;\n\n\tpublic Contact() {\n\t\tsuper();\n\t}\n\tpublic Contact(int id, String image, String name) {\n\t\tthis.id = id;\n\t\tthis.image = image;\n\t\tthis.name = name;\n\t}\n\tpublic int getId() {\n\t\treturn id;\n\t}\n\tpublic void setId(int id) {\n\t\tthis.id = id;\n\t}\n\tpublic String getImage() {\n\t\treturn image;\n\t}\n\tpublic void setImage(String image) {\n\t\tthis.image = image;\n\t}\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n}\n```\n\nContactService 用于获取网络资源:\n\n```\npackage com.example.synctask;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.List;\n\n\nimport org.xmlpull.v1.XmlPullParser;\n\nimport android.graphics.Bitmap;\nimport android.net.Uri;\nimport android.util.Xml;\n\npublic class ContactService {\n\n\t/*\n\t * 从服务器上获取数据\n\t */\n\tpublic List<contact> getContactAll() throws Exception {\n\t\tList<contact> contacts = null;\n\t\tString Parth = \"http://xxx.dreamtobe.cn:8080/xxx/list.xml\";\n\t\tURL url = new URL(Parth);\n\t\tHttpURLConnection conn = (HttpURLConnection) url.openConnection();\n\t\tconn.setConnectTimeout(30000);\n\t\tconn.setReadTimeout(30000);\n\t\tconn.setRequestMethod(\"GET\");\n\t\tif (conn.getResponseCode() == HttpURLConnection.HTTP_OK) {\n\t\t\tInputStream is = conn.getInputStream();\n\t\t\t// 这里获取数据直接放在XmlPullParser里面解析\n\t\t\tcontacts = xmlParser(is);\n\t\t\treturn contacts;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t// 这里并没有下载图片下来，而是把图片的地址保存下来了\n\tprivate List<contact> xmlParser(InputStream is) throws Exception {\n\t\tList<contact> contacts = null;\n\t\tContact contact = null;\n\t\tXmlPullParser parser = Xml.newPullParser();\n\t\tparser.setInput(is, \"UTF-8\");\n\t\tint eventType = parser.getEventType();\n\t\twhile ((eventType = parser.next()) != XmlPullParser.END_DOCUMENT) {\n\t\t\tswitch (eventType) {\n\t\t\tcase XmlPullParser.START_TAG:\n\t\t\t\tif (parser.getName().equals(\"contacts\")) {\n\t\t\t\t\tcontacts = new ArrayList<contact>();\n\t\t\t\t} else if (parser.getName().equals(\"contact\")) {\n\t\t\t\t\tcontact = new Contact();\n\t\t\t\t\tcontact.setId(Integer.valueOf(parser.getAttributeValue(0)));\n\t\t\t\t} else if (parser.getName().equals(\"name\")) {\n\t\t\t\t\tcontact.setName(parser.nextText());\n\t\t\t\t} else if (parser.getName().equals(\"image\")) {\n\t\t\t\t\tcontact.setImage(parser.getAttributeValue(0));\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase XmlPullParser.END_TAG:\n\t\t\t\tif (parser.getName().equals(\"contact\")) {\n\t\t\t\t\tcontacts.add(contact);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn contacts;\n\t}\n\n\t/*\n\t * 从网络上获取图片，如果图片在本地存在的话就直接拿，如果不存在再去服务器上下载图片\n\t * 这里的path是图片的地址\n\t */\n\tpublic Uri getImageURI(String path, File cache) throws Exception {\n\t\tString name = MD5.getMD5(path) + path.substring(path.lastIndexOf(\".\"));\n\t\tFile file = new File(cache, name);\n\t\t// 如果图片存在本地缓存目录，则不去服务器下载\n\t\tif (file.exists()) {\n\t\t\treturn Uri.fromFile(file);//Uri.fromFile(path)这个方法能得到文件的URI\n\t\t} else {\n\t\t\t// 从网络上获取图片\n\t\t\tURL url = new URL(path);\n\t\t\tHttpURLConnection conn = (HttpURLConnection) url.openConnection();\n\t\t\tconn.setConnectTimeout(5000);\n\t\t\tconn.setRequestMethod(\"GET\");\n\t\t\tconn.setDoInput(true);\n\t\t\tif (conn.getResponseCode() == 200) {\n\n\t\t\t\tInputStream is = conn.getInputStream();\n\t\t\t\tFileOutputStream fos = new FileOutputStream(file);\n\t\t\t\tbyte[] buffer = new byte[1024];\n\t\t\t\tint len = 0;\n\t\t\t\twhile ((len = is.read(buffer)) != -1) {\n\t\t\t\t\tfos.write(buffer, 0, len);\n\t\t\t\t}\n\t\t\t\tis.close();\n\t\t\t\tfos.close();\n\t\t\t\t// 返回一个URI对象\n\t\t\t\treturn Uri.fromFile(file);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n}\n```\n\n其中MainActivity中的线程：\n\n```\n//获取数据，主UI线程是不能做耗时操作的，所以启动子线程来做\n        new Thread(){\n        \tpublic void run() {\n        \t\tContactService service = new ContactService();\n        \t\tList<contact> contacts = null;\n\t\t\t\ttry {\n\t\t\t\t\tcontacts = service.getContactAll();\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\t//子线程通过Message对象封装信息，并且用初始化好的，\n\t\t\t\t//Handler对象的sendMessage()方法把数据发送到主线程中，从而达到更新UI主线程的目的\n        \t\tMessage msg = new Message();\n        \t\tmsg.what = SUCCESS_GET_CONTACT;\n        \t\tmsg.obj = contacts;\n        \t\tmHandler.sendMessage(msg);\n        \t};\n        }.start();\n```\n\n先通过\n\n```\ncontacts = service.getContactAll();\n```\n\n获得解析后的所有的Contact.\n通过Hanlder的Message\n\n```\nMessage msg = new Message();\n        \t\tmsg.what = SUCCESS_GET_CONTACT;\n        \t\tmsg.obj = contacts;\n        \t\tmHandler.sendMessage(msg);\n```\n\n发送到\n\n```\nprivate Handler mHandler = new Handler(){\n\t\tpublic void handleMessage(android.os.Message msg) {\n\t\t\tif(msg.what == SUCCESS_GET_CONTACT){\n\t\t\t\tList<contact> contacts = (List<contact>) msg.obj;\n\t\t\t\tmAdapter = new ImageAdapter(getApplicationContext(),contacts,cache);\n\t\t\t\tmListView.setAdapter(mAdapter);\n\t\t\t}\n\t\t};\n\t};\n```\n\n在handleMessage中创建ListView的Adapter.\n在ImageAdapter中：\n\n```\n@Override\n\tpublic View getView(int position, View convertView, ViewGroup parent) {\n\t\t// 1获取item,再得到控件\n\t\t// 2 获取数据\n\t\t// 3绑定数据到item\n\t\tViewHolder holder = null;\n\t\tif (convertView == null) {\n\t\t\tholder = new ViewHolder();\n\n\t\t\tconvertView = mInflater.inflate(R.layout.item, null);\n\n\t\t\tholder.iv_header = (ImageView) convertView.findViewById(R.id.imageView);\n\t\t\tholder.tv_name = (TextView) convertView.findViewById(R.id.textView);\n\n\t\t\tconvertView.setTag(holder);\n\t\t}else {\n\t\t\tholder = (ViewHolder)convertView.getTag();\n\t\t}\n\n\t\tContact contact = contacts.get(position);\n\n\t\t// 异步的加载图片 (线程池 + Handler ) ---> AsyncTask\n\t\tasyncloadImage(holder.iv_header, contact.image);\n\n\t\tholder.tv_name.setText(contact.name);\n\n\t\treturn convertView;\n\t}\n```\n\n调用asyncloadImage顾名思义异步加载图片:\n\n```\nprivate void asyncloadImage(ImageView iv_header, String path) {\n\t\tContactService service = new ContactService();\n\t\tAsyncImageTask task = new AsyncImageTask(service, iv_header);\n\t\ttask.execute(path);\n\t}\n```\n\n在其中创建联网下载图片的对象service传入以AsyncTask 为父类（暂且理解为可以更新UI的线程）的task对象.\n\n```\nprivate final class AsyncImageTask extends AsyncTask<string, Integer, Uri> {\n\n\t\tprivate ContactService service;\n\t\tprivate ImageView iv_header;\n\n\t\tpublic AsyncImageTask(ContactService service, ImageView iv_header) {\n\t\t\tthis.service = service;\n\t\t\tthis.iv_header = iv_header;\n\t\t}\n\n\t\t// 后台运行的子线程子线程\n\t\t@Override\n\t\tprotected Uri doInBackground(String... params) {\n\t\t\ttry {\n\t\t\t\treturn service.getImageURI(params[0], cache);\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t// 这个放在在ui线程中执行\n\t\t@Override\n\t\tprotected void onPostExecute(Uri result) {\n\t\t\tsuper.onPostExecute(result);\n\t\t\t// 完成图片的绑定\n\t\t\tif (iv_header != null && result != null) {\n\t\t\t\tiv_header.setImageURI(result);\n\t\t\t}\n\t\t}\n\t}\n```\n\n我们可以清晰的看到：\n此类在:protected void onPostExecute(Uri result)是需要传入一个Uri类型的值得。\n而protected Uri doInBackground(String… params)的返回值恰好是Uri(通过后面我们可以清晰的了解到，这个值就是传递给onPostExecute的）。\n而这个线程的请求应该是通过：task.execute(path);\n我们看下protected Uri doInBackground(String… params)\n\n```\n// 后台运行的子线程子线程\n\t\t@Override\n\t\tprotected Uri doInBackground(String... params) {\n\t\t\ttry {\n\t\t\t\treturn service.getImageURI(params[0], cache);\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n```\n\n这个在后台运行的子线程子线程调通过getImageURI返回获取Uri.\n我们看下：getImageURI:\n```\n/*\n\t * 从网络上获取图片，如果图片在本地存在的话就直接拿，如果不存在再去服务器上下载图片\n\t * 这里的path是图片的地址\n\t */\n\tpublic Uri getImageURI(String path, File cache) throws Exception {\n\t\tString name = MD5.getMD5(path) + path.substring(path.lastIndexOf(\".\"));\n\t\tFile file = new File(cache, name);\n\t\t// 如果图片存在本地缓存目录，则不去服务器下载\n\t\tif (file.exists()) {\n\t\t\treturn Uri.fromFile(file);//Uri.fromFile(path)这个方法能得到文件的URI\n\t\t} else {\n\t\t\t// 从网络上获取图片\n\t\t\tURL url = new URL(path);\n\t\t\tHttpURLConnection conn = (HttpURLConnection) url.openConnection();\n\t\t\tconn.setConnectTimeout(5000); //5000毫秒 请求无连接直接返回Timeout\n\t\t\tconn.setRequestMethod(\"GET\"); //通过get请求\n\t\t\tconn.setDoInput(true);\n\t\t\tif (conn.getResponseCode() == 200) {\n\n\t\t\t\tInputStream is = conn.getInputStream();\n\t\t\t\tFileOutputStream fos = new FileOutputStream(file);\n\t\t\t\tbyte[] buffer = new byte[1024];\n\t\t\t\tint len = 0;\n\t\t\t\twhile ((len = is.read(buffer)) != -1) {\n\t\t\t\t\tfos.write(buffer, 0, len);\n\t\t\t\t}\n\t\t\t\tis.close();\n\t\t\t\tfos.close();\n\t\t\t\t// 返回一个URI对象\n\t\t\t\treturn Uri.fromFile(file);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n```\n\n这里已经备注的很清晰了，需要提到的是这里通过MD5来加密了获取到的图片的名字.\n就是项目中涉及到的：\n\n```\npackage com.example.synctask;\n\nimport java.security.MessageDigest;\nimport java.util.Iterator;\n\npublic class MD5 {\n\tpublic static String getMD5(String content) {\n\t\ttry {\n\t\t\tMessageDigest digest = MessageDigest.getInstance(\"MD5\");\n\t\t\tdigest.update(content.getBytes());\n\t\t\treturn getHashString(digest);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic static String getHashString(MessageDigest digest) {\n\t\tStringBuilder builder = new StringBuilder();\n\t\tfor (byte b : digest.digest()) {\n\t\t\tbuilder.append(Integer.toHexString((b >> 4) & 0xf));\n\t\t\tbuilder.append(Integer.toHexString(b & 0xf));\n\n\t\t}\n\t\treturn builder.toString();\n\t}\n}\n```\n\n此时更新ui\n\n```\n// 这个放在在ui线程中执行\n\t\t@Override\n\t\tprotected void onPostExecute(Uri result) {\n\t\t\tsuper.onPostExecute(result);\n\t\t\t// 完成图片的绑定\n\t\t\tif (iv_header != null && result != null) {\n\t\t\t\tiv_header.setImageURI(result);\n\t\t\t}\n\t\t}\n```\n\n至此简单的异步加载就实现了。\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/异步加载专题-原创分析-简单篇通过xml获取地址、本地文件缓存、异步加载.md","raw":"title: 【异步加载专题】【原创分析】简单篇通过xml获取地址、本地文件缓存、异步加载\ndate: 2012-12-31 08:35:03\npermalink: 2012/12/31/异步加载专题-原创分析-简单篇通过xml获取地址、本地文件缓存、异步加载\ntags:\n- xml\n- 异步加载\n- Android\n\n---\n\n> 本文分析该内容：http://l5.yunpan.cn/lk/QkvuDuuCFWS89\n\n首先我们看下作者的思路：\n\n创建缓存目录 ->; 通过一个线程进行获取xml文件内容  ->; 对获取的xml文件进行解析获取所有的图片id、图片名称、图片地址 -> 在线程中通过Handler的Message创建listview的adapter -> 在adapter中实现异步加载图片资源.\n\n<!--more-->\n//下一篇将分析：[异步加载专题][原创分析]中级篇本地缓存、ListView滑动停止加载、利用synchronized控制线程数机制、很好的文件结构\n下面我们开始分析MainActivity:\n\n```\npackage com.example.synctask;\n\nimport java.io.File;\nimport java.util.List;\n\nimport android.app.Activity;\nimport android.graphics.Bitmap;\nimport android.graphics.BitmapFactory;\nimport android.os.Bundle;\nimport android.os.Environment;\nimport android.os.Handler;\nimport android.os.Message;\nimport android.widget.ListView;\n\npublic class MainActivity extends Activity {\n\tprotected static final int SUCCESS_GET_CONTACT = 0;\n\tprivate ListView mListView;\n\tprivate ImageAdapter mAdapter;\n\tprivate File cache;\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        mListView = (ListView) findViewById(R.id.listView);\n\n        //创建缓存目录，系统一运行就得创建缓存目录的，\n        cache = new File(Environment.getExternalStorageDirectory(), \"cache\");\n\n        if(!cache.exists()){\n        \tcache.mkdirs();\n        }\n\n        //获取数据，主UI线程是不能做耗时操作的，所以启动子线程来做\n        new Thread(){\n        \tpublic void run() {\n        \t\tContactService service = new ContactService();\n        \t\tList<contact> contacts = null;\n\t\t\t\ttry {\n\t\t\t\t\tcontacts = service.getContactAll();\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\t//子线程通过Message对象封装信息，并且用初始化好的，\n\t\t\t\t//Handler对象的sendMessage()方法把数据发送到主线程中，从而达到更新UI主线程的目的\n        \t\tMessage msg = new Message();\n        \t\tmsg.what = SUCCESS_GET_CONTACT;\n        \t\tmsg.obj = contacts;\n        \t\tmHandler.sendMessage(msg);\n        \t};\n        }.start();\n    }\n\n    private Handler mHandler = new Handler(){\n\t\tpublic void handleMessage(android.os.Message msg) {\n\t\t\tif(msg.what == SUCCESS_GET_CONTACT){\n\t\t\t\tList<contact> contacts = (List<contact>) msg.obj;\n\t\t\t\tmAdapter = new ImageAdapter(getApplicationContext(),contacts,cache);\n\t\t\t\tmListView.setAdapter(mAdapter);\n\t\t\t}\n\t\t};\n\t};\n\n    @Override\n    protected void onDestroy() {\n    \tsuper.onDestroy();\n    \t//清空缓存\n    \tFile[] files = cache.listFiles();\n    \tfor(File file :files){\n    \t\tfile.delete();\n    \t}\n    \tcache.delete();\n    }\n}\n```\n\n其中Contact用于存储从xml中读取到的对象类型：\n\n```\npackage com.example.synctask;\n\npublic class Contact {\n\tint id;\n\tString image;\n\tString name;\n\n\tpublic Contact() {\n\t\tsuper();\n\t}\n\tpublic Contact(int id, String image, String name) {\n\t\tthis.id = id;\n\t\tthis.image = image;\n\t\tthis.name = name;\n\t}\n\tpublic int getId() {\n\t\treturn id;\n\t}\n\tpublic void setId(int id) {\n\t\tthis.id = id;\n\t}\n\tpublic String getImage() {\n\t\treturn image;\n\t}\n\tpublic void setImage(String image) {\n\t\tthis.image = image;\n\t}\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n}\n```\n\nContactService 用于获取网络资源:\n\n```\npackage com.example.synctask;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.List;\n\n\nimport org.xmlpull.v1.XmlPullParser;\n\nimport android.graphics.Bitmap;\nimport android.net.Uri;\nimport android.util.Xml;\n\npublic class ContactService {\n\n\t/*\n\t * 从服务器上获取数据\n\t */\n\tpublic List<contact> getContactAll() throws Exception {\n\t\tList<contact> contacts = null;\n\t\tString Parth = \"http://xxx.dreamtobe.cn:8080/xxx/list.xml\";\n\t\tURL url = new URL(Parth);\n\t\tHttpURLConnection conn = (HttpURLConnection) url.openConnection();\n\t\tconn.setConnectTimeout(30000);\n\t\tconn.setReadTimeout(30000);\n\t\tconn.setRequestMethod(\"GET\");\n\t\tif (conn.getResponseCode() == HttpURLConnection.HTTP_OK) {\n\t\t\tInputStream is = conn.getInputStream();\n\t\t\t// 这里获取数据直接放在XmlPullParser里面解析\n\t\t\tcontacts = xmlParser(is);\n\t\t\treturn contacts;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t// 这里并没有下载图片下来，而是把图片的地址保存下来了\n\tprivate List<contact> xmlParser(InputStream is) throws Exception {\n\t\tList<contact> contacts = null;\n\t\tContact contact = null;\n\t\tXmlPullParser parser = Xml.newPullParser();\n\t\tparser.setInput(is, \"UTF-8\");\n\t\tint eventType = parser.getEventType();\n\t\twhile ((eventType = parser.next()) != XmlPullParser.END_DOCUMENT) {\n\t\t\tswitch (eventType) {\n\t\t\tcase XmlPullParser.START_TAG:\n\t\t\t\tif (parser.getName().equals(\"contacts\")) {\n\t\t\t\t\tcontacts = new ArrayList<contact>();\n\t\t\t\t} else if (parser.getName().equals(\"contact\")) {\n\t\t\t\t\tcontact = new Contact();\n\t\t\t\t\tcontact.setId(Integer.valueOf(parser.getAttributeValue(0)));\n\t\t\t\t} else if (parser.getName().equals(\"name\")) {\n\t\t\t\t\tcontact.setName(parser.nextText());\n\t\t\t\t} else if (parser.getName().equals(\"image\")) {\n\t\t\t\t\tcontact.setImage(parser.getAttributeValue(0));\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase XmlPullParser.END_TAG:\n\t\t\t\tif (parser.getName().equals(\"contact\")) {\n\t\t\t\t\tcontacts.add(contact);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn contacts;\n\t}\n\n\t/*\n\t * 从网络上获取图片，如果图片在本地存在的话就直接拿，如果不存在再去服务器上下载图片\n\t * 这里的path是图片的地址\n\t */\n\tpublic Uri getImageURI(String path, File cache) throws Exception {\n\t\tString name = MD5.getMD5(path) + path.substring(path.lastIndexOf(\".\"));\n\t\tFile file = new File(cache, name);\n\t\t// 如果图片存在本地缓存目录，则不去服务器下载\n\t\tif (file.exists()) {\n\t\t\treturn Uri.fromFile(file);//Uri.fromFile(path)这个方法能得到文件的URI\n\t\t} else {\n\t\t\t// 从网络上获取图片\n\t\t\tURL url = new URL(path);\n\t\t\tHttpURLConnection conn = (HttpURLConnection) url.openConnection();\n\t\t\tconn.setConnectTimeout(5000);\n\t\t\tconn.setRequestMethod(\"GET\");\n\t\t\tconn.setDoInput(true);\n\t\t\tif (conn.getResponseCode() == 200) {\n\n\t\t\t\tInputStream is = conn.getInputStream();\n\t\t\t\tFileOutputStream fos = new FileOutputStream(file);\n\t\t\t\tbyte[] buffer = new byte[1024];\n\t\t\t\tint len = 0;\n\t\t\t\twhile ((len = is.read(buffer)) != -1) {\n\t\t\t\t\tfos.write(buffer, 0, len);\n\t\t\t\t}\n\t\t\t\tis.close();\n\t\t\t\tfos.close();\n\t\t\t\t// 返回一个URI对象\n\t\t\t\treturn Uri.fromFile(file);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n}\n```\n\n其中MainActivity中的线程：\n\n```\n//获取数据，主UI线程是不能做耗时操作的，所以启动子线程来做\n        new Thread(){\n        \tpublic void run() {\n        \t\tContactService service = new ContactService();\n        \t\tList<contact> contacts = null;\n\t\t\t\ttry {\n\t\t\t\t\tcontacts = service.getContactAll();\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\t//子线程通过Message对象封装信息，并且用初始化好的，\n\t\t\t\t//Handler对象的sendMessage()方法把数据发送到主线程中，从而达到更新UI主线程的目的\n        \t\tMessage msg = new Message();\n        \t\tmsg.what = SUCCESS_GET_CONTACT;\n        \t\tmsg.obj = contacts;\n        \t\tmHandler.sendMessage(msg);\n        \t};\n        }.start();\n```\n\n先通过\n\n```\ncontacts = service.getContactAll();\n```\n\n获得解析后的所有的Contact.\n通过Hanlder的Message\n\n```\nMessage msg = new Message();\n        \t\tmsg.what = SUCCESS_GET_CONTACT;\n        \t\tmsg.obj = contacts;\n        \t\tmHandler.sendMessage(msg);\n```\n\n发送到\n\n```\nprivate Handler mHandler = new Handler(){\n\t\tpublic void handleMessage(android.os.Message msg) {\n\t\t\tif(msg.what == SUCCESS_GET_CONTACT){\n\t\t\t\tList<contact> contacts = (List<contact>) msg.obj;\n\t\t\t\tmAdapter = new ImageAdapter(getApplicationContext(),contacts,cache);\n\t\t\t\tmListView.setAdapter(mAdapter);\n\t\t\t}\n\t\t};\n\t};\n```\n\n在handleMessage中创建ListView的Adapter.\n在ImageAdapter中：\n\n```\n@Override\n\tpublic View getView(int position, View convertView, ViewGroup parent) {\n\t\t// 1获取item,再得到控件\n\t\t// 2 获取数据\n\t\t// 3绑定数据到item\n\t\tViewHolder holder = null;\n\t\tif (convertView == null) {\n\t\t\tholder = new ViewHolder();\n\n\t\t\tconvertView = mInflater.inflate(R.layout.item, null);\n\n\t\t\tholder.iv_header = (ImageView) convertView.findViewById(R.id.imageView);\n\t\t\tholder.tv_name = (TextView) convertView.findViewById(R.id.textView);\n\n\t\t\tconvertView.setTag(holder);\n\t\t}else {\n\t\t\tholder = (ViewHolder)convertView.getTag();\n\t\t}\n\n\t\tContact contact = contacts.get(position);\n\n\t\t// 异步的加载图片 (线程池 + Handler ) ---> AsyncTask\n\t\tasyncloadImage(holder.iv_header, contact.image);\n\n\t\tholder.tv_name.setText(contact.name);\n\n\t\treturn convertView;\n\t}\n```\n\n调用asyncloadImage顾名思义异步加载图片:\n\n```\nprivate void asyncloadImage(ImageView iv_header, String path) {\n\t\tContactService service = new ContactService();\n\t\tAsyncImageTask task = new AsyncImageTask(service, iv_header);\n\t\ttask.execute(path);\n\t}\n```\n\n在其中创建联网下载图片的对象service传入以AsyncTask 为父类（暂且理解为可以更新UI的线程）的task对象.\n\n```\nprivate final class AsyncImageTask extends AsyncTask<string, Integer, Uri> {\n\n\t\tprivate ContactService service;\n\t\tprivate ImageView iv_header;\n\n\t\tpublic AsyncImageTask(ContactService service, ImageView iv_header) {\n\t\t\tthis.service = service;\n\t\t\tthis.iv_header = iv_header;\n\t\t}\n\n\t\t// 后台运行的子线程子线程\n\t\t@Override\n\t\tprotected Uri doInBackground(String... params) {\n\t\t\ttry {\n\t\t\t\treturn service.getImageURI(params[0], cache);\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t// 这个放在在ui线程中执行\n\t\t@Override\n\t\tprotected void onPostExecute(Uri result) {\n\t\t\tsuper.onPostExecute(result);\n\t\t\t// 完成图片的绑定\n\t\t\tif (iv_header != null && result != null) {\n\t\t\t\tiv_header.setImageURI(result);\n\t\t\t}\n\t\t}\n\t}\n```\n\n我们可以清晰的看到：\n此类在:protected void onPostExecute(Uri result)是需要传入一个Uri类型的值得。\n而protected Uri doInBackground(String… params)的返回值恰好是Uri(通过后面我们可以清晰的了解到，这个值就是传递给onPostExecute的）。\n而这个线程的请求应该是通过：task.execute(path);\n我们看下protected Uri doInBackground(String… params)\n\n```\n// 后台运行的子线程子线程\n\t\t@Override\n\t\tprotected Uri doInBackground(String... params) {\n\t\t\ttry {\n\t\t\t\treturn service.getImageURI(params[0], cache);\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n```\n\n这个在后台运行的子线程子线程调通过getImageURI返回获取Uri.\n我们看下：getImageURI:\n```\n/*\n\t * 从网络上获取图片，如果图片在本地存在的话就直接拿，如果不存在再去服务器上下载图片\n\t * 这里的path是图片的地址\n\t */\n\tpublic Uri getImageURI(String path, File cache) throws Exception {\n\t\tString name = MD5.getMD5(path) + path.substring(path.lastIndexOf(\".\"));\n\t\tFile file = new File(cache, name);\n\t\t// 如果图片存在本地缓存目录，则不去服务器下载\n\t\tif (file.exists()) {\n\t\t\treturn Uri.fromFile(file);//Uri.fromFile(path)这个方法能得到文件的URI\n\t\t} else {\n\t\t\t// 从网络上获取图片\n\t\t\tURL url = new URL(path);\n\t\t\tHttpURLConnection conn = (HttpURLConnection) url.openConnection();\n\t\t\tconn.setConnectTimeout(5000); //5000毫秒 请求无连接直接返回Timeout\n\t\t\tconn.setRequestMethod(\"GET\"); //通过get请求\n\t\t\tconn.setDoInput(true);\n\t\t\tif (conn.getResponseCode() == 200) {\n\n\t\t\t\tInputStream is = conn.getInputStream();\n\t\t\t\tFileOutputStream fos = new FileOutputStream(file);\n\t\t\t\tbyte[] buffer = new byte[1024];\n\t\t\t\tint len = 0;\n\t\t\t\twhile ((len = is.read(buffer)) != -1) {\n\t\t\t\t\tfos.write(buffer, 0, len);\n\t\t\t\t}\n\t\t\t\tis.close();\n\t\t\t\tfos.close();\n\t\t\t\t// 返回一个URI对象\n\t\t\t\treturn Uri.fromFile(file);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n```\n\n这里已经备注的很清晰了，需要提到的是这里通过MD5来加密了获取到的图片的名字.\n就是项目中涉及到的：\n\n```\npackage com.example.synctask;\n\nimport java.security.MessageDigest;\nimport java.util.Iterator;\n\npublic class MD5 {\n\tpublic static String getMD5(String content) {\n\t\ttry {\n\t\t\tMessageDigest digest = MessageDigest.getInstance(\"MD5\");\n\t\t\tdigest.update(content.getBytes());\n\t\t\treturn getHashString(digest);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic static String getHashString(MessageDigest digest) {\n\t\tStringBuilder builder = new StringBuilder();\n\t\tfor (byte b : digest.digest()) {\n\t\t\tbuilder.append(Integer.toHexString((b >> 4) & 0xf));\n\t\t\tbuilder.append(Integer.toHexString(b & 0xf));\n\n\t\t}\n\t\treturn builder.toString();\n\t}\n}\n```\n\n此时更新ui\n\n```\n// 这个放在在ui线程中执行\n\t\t@Override\n\t\tprotected void onPostExecute(Uri result) {\n\t\t\tsuper.onPostExecute(result);\n\t\t\t// 完成图片的绑定\n\t\t\tif (iv_header != null && result != null) {\n\t\t\t\tiv_header.setImageURI(result);\n\t\t\t}\n\t\t}\n```\n\n至此简单的异步加载就实现了。\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2012/12/31/异步加载专题-原创分析-简单篇通过xml获取地址、本地文件缓存、异步加载","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66k3005195buv3k7a82q","content":"<blockquote>\n<p>本文分析该内容：<a href=\"http://l5.yunpan.cn/lk/QkvuDuuCFWS89\" target=\"_blank\" rel=\"external\">http://l5.yunpan.cn/lk/QkvuDuuCFWS89</a></p>\n</blockquote>\n<p>首先我们看下作者的思路：</p>\n<p>创建缓存目录 -&gt;; 通过一个线程进行获取xml文件内容  -&gt;; 对获取的xml文件进行解析获取所有的图片id、图片名称、图片地址 -&gt; 在线程中通过Handler的Message创建listview的adapter -&gt; 在adapter中实现异步加载图片资源.</p>\n<a id=\"more\"></a>\n<p>//下一篇将分析：[异步加载专题][原创分析]中级篇本地缓存、ListView滑动停止加载、利用synchronized控制线程数机制、很好的文件结构<br>下面我们开始分析MainActivity:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.example.synctask;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.<span class=\"keyword\">File</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.app.Activity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Bitmap;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.BitmapFactory;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Environment;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Handler;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Message;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.ListView;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> MainActivity <span class=\"keyword\">extends</span> Activity &#123;</div><div class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> SUCCESS_GET_CONTACT = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> ListView mListView;</div><div class=\"line\">\t<span class=\"keyword\">private</span> ImageAdapter mAdapter;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">File</span> cache;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> onCreate(Bundle savedInstanceState) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\"></div><div class=\"line\">        mListView = (ListView) findViewById(R.id.listView);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//创建缓存目录，系统一运行就得创建缓存目录的，</span></div><div class=\"line\">        cache = <span class=\"keyword\">new</span> <span class=\"keyword\">File</span>(Environment.getExternalStorageDirectory(), <span class=\"string\">\"cache\"</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span>(!cache.exists())&#123;</div><div class=\"line\">        \tcache.mkdirs();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//获取数据，主UI线程是不能做耗时操作的，所以启动子线程来做</span></div><div class=\"line\">        <span class=\"keyword\">new</span> Thread()&#123;</div><div class=\"line\">        \t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> run() &#123;</div><div class=\"line\">        \t\tContactService service = <span class=\"keyword\">new</span> ContactService();</div><div class=\"line\">        \t\tList&lt;contact&gt; contacts = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\tcontacts = service.getContactAll();</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">//子线程通过Message对象封装信息，并且用初始化好的，</span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">//Handler对象的sendMessage()方法把数据发送到主线程中，从而达到更新UI主线程的目的</span></div><div class=\"line\">        \t\tMessage msg = <span class=\"keyword\">new</span> Message();</div><div class=\"line\">        \t\tmsg.what = SUCCESS_GET_CONTACT;</div><div class=\"line\">        \t\tmsg.obj = contacts;</div><div class=\"line\">        \t\tmHandler.sendMessage(msg);</div><div class=\"line\">        \t&#125;;</div><div class=\"line\">        &#125;.start();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Handler mHandler = <span class=\"keyword\">new</span> Handler()&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> handleMessage(android.os.Message msg) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(msg.what == SUCCESS_GET_CONTACT)&#123;</div><div class=\"line\">\t\t\t\tList&lt;contact&gt; contacts = (List&lt;contact&gt;) msg.obj;</div><div class=\"line\">\t\t\t\tmAdapter = <span class=\"keyword\">new</span> ImageAdapter(getApplicationContext(),contacts,cache);</div><div class=\"line\">\t\t\t\tmListView.setAdapter(mAdapter);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;;</div><div class=\"line\">\t&#125;;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> onDestroy() &#123;</div><div class=\"line\">    \t<span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">    \t<span class=\"comment\">//清空缓存</span></div><div class=\"line\">    \t<span class=\"keyword\">File</span>[] files = cache.listFiles();</div><div class=\"line\">    \t<span class=\"keyword\">for</span>(<span class=\"keyword\">File</span> <span class=\"keyword\">file</span> :files)&#123;</div><div class=\"line\">    \t\t<span class=\"keyword\">file</span>.<span class=\"keyword\">delete</span>();</div><div class=\"line\">    \t&#125;</div><div class=\"line\">    \tcache.<span class=\"keyword\">delete</span>();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中Contact用于存储从xml中读取到的对象类型：</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.example.synctask;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> class Contact &#123;</div><div class=\"line\">\t<span class=\"built_in\">int</span> id;</div><div class=\"line\">\t<span class=\"keyword\">String</span> <span class=\"built_in\">image</span>;</div><div class=\"line\">\t<span class=\"keyword\">String</span> name;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> Contact() &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">public</span> Contact(<span class=\"built_in\">int</span> id, <span class=\"keyword\">String</span> <span class=\"built_in\">image</span>, <span class=\"keyword\">String</span> name) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.<span class=\"built_in\">image</span> = <span class=\"built_in\">image</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"built_in\">int</span> getId() &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> id;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> setId(<span class=\"built_in\">int</span> id) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">String</span> getImage() &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">image</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> setImage(<span class=\"keyword\">String</span> <span class=\"built_in\">image</span>) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.<span class=\"built_in\">image</span> = <span class=\"built_in\">image</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">String</span> getName() &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> setName(<span class=\"keyword\">String</span> name) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ContactService 用于获取网络资源:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.example.synctask;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.<span class=\"keyword\">File</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.net.HttpURLConnection;</div><div class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.xmlpull.v1.XmlPullParser;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Bitmap;</div><div class=\"line\"><span class=\"keyword\">import</span> android.net.Uri;</div><div class=\"line\"><span class=\"keyword\">import</span> android.util.Xml;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> ContactService &#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/*</span></div><div class=\"line\">\t * 从服务器上获取数据</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"keyword\">public</span> List&lt;contact&gt; getContactAll() <span class=\"keyword\">throws</span> Exception &#123;</div><div class=\"line\">\t\tList&lt;contact&gt; contacts = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\tString Parth = <span class=\"string\">\"http://xxx.dreamtobe.cn:8080/xxx/list.xml\"</span>;</div><div class=\"line\">\t\tURL url = <span class=\"keyword\">new</span> URL(Parth);</div><div class=\"line\">\t\tHttpURLConnection conn = (HttpURLConnection) url.openConnection();</div><div class=\"line\">\t\tconn.setConnectTimeout(<span class=\"number\">30000</span>);</div><div class=\"line\">\t\tconn.setReadTimeout(<span class=\"number\">30000</span>);</div><div class=\"line\">\t\tconn.setRequestMethod(<span class=\"string\">\"GET\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (conn.getResponseCode() == HttpURLConnection.HTTP_OK) &#123;</div><div class=\"line\">\t\t\tInputStream is = conn.getInputStream();</div><div class=\"line\">\t\t\t<span class=\"comment\">// 这里获取数据直接放在XmlPullParser里面解析</span></div><div class=\"line\">\t\t\tcontacts = xmlParser(is);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> contacts;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 这里并没有下载图片下来，而是把图片的地址保存下来了</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> List&lt;contact&gt; xmlParser(InputStream is) <span class=\"keyword\">throws</span> Exception &#123;</div><div class=\"line\">\t\tList&lt;contact&gt; contacts = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\tContact contact = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\tXmlPullParser parser = Xml.newPullParser();</div><div class=\"line\">\t\tparser.setInput(is, <span class=\"string\">\"UTF-8\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> eventType = parser.getEventType();</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> ((eventType = parser.<span class=\"keyword\">next</span>()) != XmlPullParser.END_DOCUMENT) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">switch</span> (eventType) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">case</span> XmlPullParser.START_TAG:</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (parser.getName().equals(<span class=\"string\">\"contacts\"</span>)) &#123;</div><div class=\"line\">\t\t\t\t\tcontacts = <span class=\"keyword\">new</span> ArrayList&lt;contact&gt;();</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (parser.getName().equals(<span class=\"string\">\"contact\"</span>)) &#123;</div><div class=\"line\">\t\t\t\t\tcontact = <span class=\"keyword\">new</span> Contact();</div><div class=\"line\">\t\t\t\t\tcontact.setId(Integer.valueOf(parser.getAttributeValue(<span class=\"number\">0</span>)));</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (parser.getName().equals(<span class=\"string\">\"name\"</span>)) &#123;</div><div class=\"line\">\t\t\t\t\tcontact.setName(parser.nextText());</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (parser.getName().equals(<span class=\"string\">\"image\"</span>)) &#123;</div><div class=\"line\">\t\t\t\t\tcontact.setImage(parser.getAttributeValue(<span class=\"number\">0</span>));</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">case</span> XmlPullParser.END_TAG:</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (parser.getName().equals(<span class=\"string\">\"contact\"</span>)) &#123;</div><div class=\"line\">\t\t\t\t\tcontacts.add(contact);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> contacts;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/*</span></div><div class=\"line\">\t * 从网络上获取图片，如果图片在本地存在的话就直接拿，如果不存在再去服务器上下载图片</div><div class=\"line\">\t * 这里的path是图片的地址</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"keyword\">public</span> Uri getImageURI(String path, <span class=\"keyword\">File</span> cache) <span class=\"keyword\">throws</span> Exception &#123;</div><div class=\"line\">\t\tString name = MD5.getMD5(path) + path.substring(path.lastIndexOf(<span class=\"string\">\".\"</span>));</div><div class=\"line\">\t\t<span class=\"keyword\">File</span> <span class=\"keyword\">file</span> = <span class=\"keyword\">new</span> <span class=\"keyword\">File</span>(cache, name);</div><div class=\"line\">\t\t<span class=\"comment\">// 如果图片存在本地缓存目录，则不去服务器下载</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">file</span>.exists()) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> Uri.fromFile(<span class=\"keyword\">file</span>);<span class=\"comment\">//Uri.fromFile(path)这个方法能得到文件的URI</span></div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 从网络上获取图片</span></div><div class=\"line\">\t\t\tURL url = <span class=\"keyword\">new</span> URL(path);</div><div class=\"line\">\t\t\tHttpURLConnection conn = (HttpURLConnection) url.openConnection();</div><div class=\"line\">\t\t\tconn.setConnectTimeout(<span class=\"number\">5000</span>);</div><div class=\"line\">\t\t\tconn.setRequestMethod(<span class=\"string\">\"GET\"</span>);</div><div class=\"line\">\t\t\tconn.setDoInput(<span class=\"keyword\">true</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (conn.getResponseCode() == <span class=\"number\">200</span>) &#123;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\tInputStream is = conn.getInputStream();</div><div class=\"line\">\t\t\t\tFileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"keyword\">file</span>);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">while</span> ((len = is.<span class=\"keyword\">read</span>(buffer)) != -<span class=\"number\">1</span>) &#123;</div><div class=\"line\">\t\t\t\t\tfos.<span class=\"keyword\">write</span>(buffer, <span class=\"number\">0</span>, len);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tis.close();</div><div class=\"line\">\t\t\t\tfos.close();</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 返回一个URI对象</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> Uri.fromFile(<span class=\"keyword\">file</span>);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中MainActivity中的线程：</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//获取数据，主UI线程是不能做耗时操作的，所以启动子线程来做</span></div><div class=\"line\">        <span class=\"keyword\">new</span> <span class=\"type\">Thread</span>()&#123;</div><div class=\"line\">        \t<span class=\"keyword\">public</span> void run() &#123;</div><div class=\"line\">        \t\tContactService service = <span class=\"keyword\">new</span> <span class=\"type\">ContactService</span>();</div><div class=\"line\">        \t\tList&lt;contact&gt; contacts = <span class=\"literal\">null</span>;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\tcontacts = service.getContactAll();</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">//子线程通过Message对象封装信息，并且用初始化好的，</span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">//Handler对象的sendMessage()方法把数据发送到主线程中，从而达到更新UI主线程的目的</span></div><div class=\"line\">        \t\tMessage msg = <span class=\"keyword\">new</span> <span class=\"type\">Message</span>();</div><div class=\"line\">        \t\tmsg.what = SUCCESS_GET_CONTACT;</div><div class=\"line\">        \t\tmsg.obj = contacts;</div><div class=\"line\">        \t\tmHandler.sendMessage(msg);</div><div class=\"line\">        \t&#125;;</div><div class=\"line\">        &#125;.start();</div></pre></td></tr></table></figure>\n<p>先通过</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">contacts</span> = service.getContactAll()<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p>获得解析后的所有的Contact.<br>通过Hanlder的Message</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Message msg = new Message()<span class=\"comment\">;</span></div><div class=\"line\">        \t\tmsg.what = SUCCESS_GET_CONTACT<span class=\"comment\">;</span></div><div class=\"line\">        \t\tmsg.obj = contacts<span class=\"comment\">;</span></div><div class=\"line\">        \t\tmHandler.sendMessage(msg)<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p>发送到</p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> Handler mHandler = <span class=\"literal\">new</span> Handler()&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"literal\">void</span> handleMessage(android.os.Message msg) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(msg.what == SUCCESS_GET_CONTACT)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">List</span>&lt;contact&gt; contacts = (<span class=\"built_in\">List</span>&lt;contact&gt;) msg.obj;</div><div class=\"line\">\t\t\t\tmAdapter = <span class=\"literal\">new</span> ImageAdapter(getApplicationContext(),contacts,<span class=\"keyword\">cache</span>);</div><div class=\"line\">\t\t\t\tmListView.setAdapter(mAdapter);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;;</div><div class=\"line\">\t&#125;;</div></pre></td></tr></table></figure>\n<p>在handleMessage中创建ListView的Adapter.<br>在ImageAdapter中：</p>\n<figure class=\"highlight pony\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"type\">Override</span></div><div class=\"line\">\tpublic <span class=\"type\">View</span> getView(int position, <span class=\"type\">View</span> convertView, <span class=\"type\">ViewGroup</span> parent) &#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 1获取item,再得到控件</span></div><div class=\"line\">\t\t<span class=\"comment\">// 2 获取数据</span></div><div class=\"line\">\t\t<span class=\"comment\">// 3绑定数据到item</span></div><div class=\"line\">\t\t<span class=\"type\">ViewHolder</span> holder = null;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (convertView == null) &#123;</div><div class=\"line\">\t\t\tholder = <span class=\"function\"><span class=\"keyword\">new</span> <span class=\"title\">ViewHolder</span>();</span></div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"title\">convertView</span> = <span class=\"title\">mInflater</span>.<span class=\"title\">inflate</span>(<span class=\"type\">R</span>.layout.item, null);</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"title\">holder</span>.<span class=\"title\">iv_header</span> = (<span class=\"type\">ImageView</span>) <span class=\"title\">convertView</span>.<span class=\"title\">findViewById</span>(<span class=\"type\">R</span>.id.imageView);</div><div class=\"line\">\t\t\t<span class=\"title\">holder</span>.<span class=\"title\">tv_name</span> = (<span class=\"type\">TextView</span>) <span class=\"title\">convertView</span>.<span class=\"title\">findViewById</span>(<span class=\"type\">R</span>.id.textView);</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"title\">convertView</span>.<span class=\"title\">setTag</span>(holder);</div><div class=\"line\">\t\t&#125;<span class=\"title\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"title\">holder</span> = (<span class=\"type\">ViewHolder</span>)<span class=\"title\">convertView</span>.<span class=\"title\">getTag</span>();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"title\">Contact</span> <span class=\"title\">contact</span> = <span class=\"title\">contacts</span>.<span class=\"title\">get</span>(position);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 异步的加载图片 (线程池 + Handler ) ---&gt; AsyncTask</span></div><div class=\"line\">\t\t<span class=\"title\">asyncloadImage</span>(holder.iv_header, contact.image);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"title\">holder</span>.<span class=\"title\">tv_name</span>.<span class=\"title\">setText</span>(contact.name);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"title\">return</span> <span class=\"title\">convertView</span>;</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<p>调用asyncloadImage顾名思义异步加载图片:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> asyncloadImage(ImageView iv_header, String path) &#123;</div><div class=\"line\">\t\tContactService service = <span class=\"keyword\">new</span> ContactService();</div><div class=\"line\">\t\tAsyncImageTask <span class=\"keyword\">task</span> = <span class=\"keyword\">new</span> AsyncImageTask(service, iv_header);</div><div class=\"line\">\t\t<span class=\"keyword\">task</span>.execute(path);</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<p>在其中创建联网下载图片的对象service传入以AsyncTask 为父类（暂且理解为可以更新UI的线程）的task对象.</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsyncImageTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTask&lt;string</span>, <span class=\"title\">Integer</span>, <span class=\"title\">Uri&gt;</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"type\">ContactService</span> service;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"type\">ImageView</span> iv_header;</div><div class=\"line\"></div><div class=\"line\">\t\tpublic <span class=\"type\">AsyncImageTask</span>(<span class=\"type\">ContactService</span> service, <span class=\"type\">ImageView</span> iv_header) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.service = service;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.iv_header = iv_header;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 后台运行的子线程子线程</span></div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"keyword\">protected</span> <span class=\"type\">Uri</span> doInBackground(<span class=\"type\">String</span>... params) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> service.getImageURI(params[<span class=\"number\">0</span>], cache);</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (<span class=\"type\">Exception</span> e) &#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 这个放在在ui线程中执行</span></div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"keyword\">protected</span> void onPostExecute(<span class=\"type\">Uri</span> result) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">super</span>.onPostExecute(result);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 完成图片的绑定</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (iv_header != <span class=\"literal\">null</span> &amp;&amp; result != <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">\t\t\t\tiv_header.setImageURI(result);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<p>我们可以清晰的看到：<br>此类在:protected void onPostExecute(Uri result)是需要传入一个Uri类型的值得。<br>而protected Uri doInBackground(String… params)的返回值恰好是Uri(通过后面我们可以清晰的了解到，这个值就是传递给onPostExecute的）。<br>而这个线程的请求应该是通过：task.execute(path);<br>我们看下protected Uri doInBackground(String… params)</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 后台运行的子线程子线程</span></div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"keyword\">protected</span> <span class=\"function\">Uri <span class=\"title\">doInBackground</span><span class=\"params\">(String... params)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">return</span> service.<span class=\"title\">getImageURI</span><span class=\"params\">(params[<span class=\"number\">0</span>], cache)</span></span>;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t&#125;</div></pre></td></tr></table></figure>\n<p>这个在后台运行的子线程子线程调通过getImageURI返回获取Uri.<br>我们看下：getImageURI:<br><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">\t * 从网络上获取图片，如果图片在本地存在的话就直接拿，如果不存在再去服务器上下载图片</div><div class=\"line\">\t * 这里的path是图片的地址</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"keyword\">public</span> Uri getImageURI(<span class=\"keyword\">String</span> path, <span class=\"built_in\">File</span> cache) throws Exception &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">String</span> name = MD5.getMD5(path) + path.substring(path.lastIndexOf(<span class=\"string\">\".\"</span>));</div><div class=\"line\">\t\t<span class=\"built_in\">File</span> file = <span class=\"keyword\">new</span> <span class=\"built_in\">File</span>(cache, name);</div><div class=\"line\">\t\t<span class=\"comment\">// 如果图片存在本地缓存目录，则不去服务器下载</span></div><div class=\"line\">\t\t<span class=\"built_in\">if</span> (file.<span class=\"built_in\">exists</span>()) &#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">return</span> Uri.fromFile(file);<span class=\"comment\">//Uri.fromFile(path)这个方法能得到文件的URI</span></div><div class=\"line\">\t\t&#125; <span class=\"built_in\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 从网络上获取图片</span></div><div class=\"line\">\t\t\tURL url = <span class=\"keyword\">new</span> URL(path);</div><div class=\"line\">\t\t\tHttpURLConnection conn = (HttpURLConnection) url.openConnection();</div><div class=\"line\">\t\t\tconn.setConnectTimeout(<span class=\"number\">5000</span>); <span class=\"comment\">//5000毫秒 请求无连接直接返回Timeout</span></div><div class=\"line\">\t\t\tconn.setRequestMethod(<span class=\"string\">\"GET\"</span>); <span class=\"comment\">//通过get请求</span></div><div class=\"line\">\t\t\tconn.setDoInput(true);</div><div class=\"line\">\t\t\t<span class=\"built_in\">if</span> (conn.getResponseCode() == <span class=\"number\">200</span>) &#123;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\tInputStream is = conn.getInputStream();</div><div class=\"line\">\t\t\t\tFileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(file);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">byte</span>[] <span class=\"built_in\">buffer</span> = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">while</span> ((len = is.<span class=\"built_in\">read</span>(<span class=\"built_in\">buffer</span>)) != <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">\t\t\t\t\tfos.<span class=\"built_in\">write</span>(<span class=\"built_in\">buffer</span>, <span class=\"number\">0</span>, len);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tis.<span class=\"built_in\">close</span>();</div><div class=\"line\">\t\t\t\tfos.<span class=\"built_in\">close</span>();</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 返回一个URI对象</span></div><div class=\"line\">\t\t\t\t<span class=\"built_in\">return</span> Uri.fromFile(file);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"built_in\">return</span> null;</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure></p>\n<p>这里已经备注的很清晰了，需要提到的是这里通过MD5来加密了获取到的图片的名字.<br>就是项目中涉及到的：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.example.synctask;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.security.MessageDigest;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MD5</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\">String <span class=\"title\">getMD5</span><span class=\"params\">(String content)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tMessageDigest digest = MessageDigest.getInstance(<span class=\"string\">\"MD5\"</span>);</div><div class=\"line\">\t\t\tdigest.update(content.getBytes());</div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">return</span> <span class=\"title\">getHashString</span><span class=\"params\">(digest)</span></span>;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\">String <span class=\"title\">getHashString</span><span class=\"params\">(MessageDigest digest)</span> </span>&#123;</div><div class=\"line\">\t\tStringBuilder builder = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">byte</span> b : digest.digest()) &#123;</div><div class=\"line\">\t\t\tbuilder.append(Integer.toHexString((b &gt;&gt; <span class=\"number\">4</span>) &amp; <span class=\"number\">0xf</span>));</div><div class=\"line\">\t\t\tbuilder.append(Integer.toHexString(b &amp; <span class=\"number\">0xf</span>));</div><div class=\"line\"></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">return</span> builder.<span class=\"title\">toString</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>此时更新ui</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 这个放在在ui线程中执行</span></div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onPostExecute</span><span class=\"params\">(Uri result)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">super</span>.onPostExecute(result);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 完成图片的绑定</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (iv_header != <span class=\"keyword\">null</span> &amp;&amp; result != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\tiv_header.setImageURI(result);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div></pre></td></tr></table></figure>\n<p>至此简单的异步加载就实现了。</p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>本文分析该内容：<a href=\"http://l5.yunpan.cn/lk/QkvuDuuCFWS89\">http://l5.yunpan.cn/lk/QkvuDuuCFWS89</a></p>\n</blockquote>\n<p>首先我们看下作者的思路：</p>\n<p>创建缓存目录 -&gt;; 通过一个线程进行获取xml文件内容  -&gt;; 对获取的xml文件进行解析获取所有的图片id、图片名称、图片地址 -&gt; 在线程中通过Handler的Message创建listview的adapter -&gt; 在adapter中实现异步加载图片资源.</p>","more":"<p>//下一篇将分析：[异步加载专题][原创分析]中级篇本地缓存、ListView滑动停止加载、利用synchronized控制线程数机制、很好的文件结构<br>下面我们开始分析MainActivity:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.example.synctask;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.<span class=\"keyword\">File</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.app.Activity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Bitmap;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.BitmapFactory;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Environment;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Handler;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Message;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.ListView;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> MainActivity <span class=\"keyword\">extends</span> Activity &#123;</div><div class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> SUCCESS_GET_CONTACT = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> ListView mListView;</div><div class=\"line\">\t<span class=\"keyword\">private</span> ImageAdapter mAdapter;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">File</span> cache;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> onCreate(Bundle savedInstanceState) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\"></div><div class=\"line\">        mListView = (ListView) findViewById(R.id.listView);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//创建缓存目录，系统一运行就得创建缓存目录的，</span></div><div class=\"line\">        cache = <span class=\"keyword\">new</span> <span class=\"keyword\">File</span>(Environment.getExternalStorageDirectory(), <span class=\"string\">\"cache\"</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span>(!cache.exists())&#123;</div><div class=\"line\">        \tcache.mkdirs();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//获取数据，主UI线程是不能做耗时操作的，所以启动子线程来做</span></div><div class=\"line\">        <span class=\"keyword\">new</span> Thread()&#123;</div><div class=\"line\">        \t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> run() &#123;</div><div class=\"line\">        \t\tContactService service = <span class=\"keyword\">new</span> ContactService();</div><div class=\"line\">        \t\tList&lt;contact&gt; contacts = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\tcontacts = service.getContactAll();</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">//子线程通过Message对象封装信息，并且用初始化好的，</span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">//Handler对象的sendMessage()方法把数据发送到主线程中，从而达到更新UI主线程的目的</span></div><div class=\"line\">        \t\tMessage msg = <span class=\"keyword\">new</span> Message();</div><div class=\"line\">        \t\tmsg.what = SUCCESS_GET_CONTACT;</div><div class=\"line\">        \t\tmsg.obj = contacts;</div><div class=\"line\">        \t\tmHandler.sendMessage(msg);</div><div class=\"line\">        \t&#125;;</div><div class=\"line\">        &#125;.start();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Handler mHandler = <span class=\"keyword\">new</span> Handler()&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> handleMessage(android.os.Message msg) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(msg.what == SUCCESS_GET_CONTACT)&#123;</div><div class=\"line\">\t\t\t\tList&lt;contact&gt; contacts = (List&lt;contact&gt;) msg.obj;</div><div class=\"line\">\t\t\t\tmAdapter = <span class=\"keyword\">new</span> ImageAdapter(getApplicationContext(),contacts,cache);</div><div class=\"line\">\t\t\t\tmListView.setAdapter(mAdapter);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;;</div><div class=\"line\">\t&#125;;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> onDestroy() &#123;</div><div class=\"line\">    \t<span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">    \t<span class=\"comment\">//清空缓存</span></div><div class=\"line\">    \t<span class=\"keyword\">File</span>[] files = cache.listFiles();</div><div class=\"line\">    \t<span class=\"keyword\">for</span>(<span class=\"keyword\">File</span> <span class=\"keyword\">file</span> :files)&#123;</div><div class=\"line\">    \t\t<span class=\"keyword\">file</span>.<span class=\"keyword\">delete</span>();</div><div class=\"line\">    \t&#125;</div><div class=\"line\">    \tcache.<span class=\"keyword\">delete</span>();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中Contact用于存储从xml中读取到的对象类型：</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.example.synctask;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> class Contact &#123;</div><div class=\"line\">\t<span class=\"built_in\">int</span> id;</div><div class=\"line\">\t<span class=\"keyword\">String</span> <span class=\"built_in\">image</span>;</div><div class=\"line\">\t<span class=\"keyword\">String</span> name;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> Contact() &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">public</span> Contact(<span class=\"built_in\">int</span> id, <span class=\"keyword\">String</span> <span class=\"built_in\">image</span>, <span class=\"keyword\">String</span> name) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.<span class=\"built_in\">image</span> = <span class=\"built_in\">image</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"built_in\">int</span> getId() &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> id;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> setId(<span class=\"built_in\">int</span> id) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">String</span> getImage() &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">image</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> setImage(<span class=\"keyword\">String</span> <span class=\"built_in\">image</span>) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.<span class=\"built_in\">image</span> = <span class=\"built_in\">image</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">String</span> getName() &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> setName(<span class=\"keyword\">String</span> name) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ContactService 用于获取网络资源:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.example.synctask;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.<span class=\"keyword\">File</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.net.HttpURLConnection;</div><div class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.xmlpull.v1.XmlPullParser;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Bitmap;</div><div class=\"line\"><span class=\"keyword\">import</span> android.net.Uri;</div><div class=\"line\"><span class=\"keyword\">import</span> android.util.Xml;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> ContactService &#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/*</div><div class=\"line\">\t * 从服务器上获取数据</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> List&lt;contact&gt; getContactAll() <span class=\"keyword\">throws</span> Exception &#123;</div><div class=\"line\">\t\tList&lt;contact&gt; contacts = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\tString Parth = <span class=\"string\">\"http://xxx.dreamtobe.cn:8080/xxx/list.xml\"</span>;</div><div class=\"line\">\t\tURL url = <span class=\"keyword\">new</span> URL(Parth);</div><div class=\"line\">\t\tHttpURLConnection conn = (HttpURLConnection) url.openConnection();</div><div class=\"line\">\t\tconn.setConnectTimeout(<span class=\"number\">30000</span>);</div><div class=\"line\">\t\tconn.setReadTimeout(<span class=\"number\">30000</span>);</div><div class=\"line\">\t\tconn.setRequestMethod(<span class=\"string\">\"GET\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (conn.getResponseCode() == HttpURLConnection.HTTP_OK) &#123;</div><div class=\"line\">\t\t\tInputStream is = conn.getInputStream();</div><div class=\"line\">\t\t\t<span class=\"comment\">// 这里获取数据直接放在XmlPullParser里面解析</span></div><div class=\"line\">\t\t\tcontacts = xmlParser(is);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> contacts;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 这里并没有下载图片下来，而是把图片的地址保存下来了</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> List&lt;contact&gt; xmlParser(InputStream is) <span class=\"keyword\">throws</span> Exception &#123;</div><div class=\"line\">\t\tList&lt;contact&gt; contacts = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\tContact contact = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\tXmlPullParser parser = Xml.newPullParser();</div><div class=\"line\">\t\tparser.setInput(is, <span class=\"string\">\"UTF-8\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> eventType = parser.getEventType();</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> ((eventType = parser.<span class=\"keyword\">next</span>()) != XmlPullParser.END_DOCUMENT) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">switch</span> (eventType) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">case</span> XmlPullParser.START_TAG:</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (parser.getName().equals(<span class=\"string\">\"contacts\"</span>)) &#123;</div><div class=\"line\">\t\t\t\t\tcontacts = <span class=\"keyword\">new</span> ArrayList&lt;contact&gt;();</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (parser.getName().equals(<span class=\"string\">\"contact\"</span>)) &#123;</div><div class=\"line\">\t\t\t\t\tcontact = <span class=\"keyword\">new</span> Contact();</div><div class=\"line\">\t\t\t\t\tcontact.setId(Integer.valueOf(parser.getAttributeValue(<span class=\"number\">0</span>)));</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (parser.getName().equals(<span class=\"string\">\"name\"</span>)) &#123;</div><div class=\"line\">\t\t\t\t\tcontact.setName(parser.nextText());</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (parser.getName().equals(<span class=\"string\">\"image\"</span>)) &#123;</div><div class=\"line\">\t\t\t\t\tcontact.setImage(parser.getAttributeValue(<span class=\"number\">0</span>));</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">case</span> XmlPullParser.END_TAG:</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (parser.getName().equals(<span class=\"string\">\"contact\"</span>)) &#123;</div><div class=\"line\">\t\t\t\t\tcontacts.add(contact);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> contacts;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/*</div><div class=\"line\">\t * 从网络上获取图片，如果图片在本地存在的话就直接拿，如果不存在再去服务器上下载图片</div><div class=\"line\">\t * 这里的path是图片的地址</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> Uri getImageURI(String path, <span class=\"keyword\">File</span> cache) <span class=\"keyword\">throws</span> Exception &#123;</div><div class=\"line\">\t\tString name = MD5.getMD5(path) + path.substring(path.lastIndexOf(<span class=\"string\">\".\"</span>));</div><div class=\"line\">\t\t<span class=\"keyword\">File</span> <span class=\"keyword\">file</span> = <span class=\"keyword\">new</span> <span class=\"keyword\">File</span>(cache, name);</div><div class=\"line\">\t\t<span class=\"comment\">// 如果图片存在本地缓存目录，则不去服务器下载</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">file</span>.exists()) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> Uri.fromFile(<span class=\"keyword\">file</span>);<span class=\"comment\">//Uri.fromFile(path)这个方法能得到文件的URI</span></div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 从网络上获取图片</span></div><div class=\"line\">\t\t\tURL url = <span class=\"keyword\">new</span> URL(path);</div><div class=\"line\">\t\t\tHttpURLConnection conn = (HttpURLConnection) url.openConnection();</div><div class=\"line\">\t\t\tconn.setConnectTimeout(<span class=\"number\">5000</span>);</div><div class=\"line\">\t\t\tconn.setRequestMethod(<span class=\"string\">\"GET\"</span>);</div><div class=\"line\">\t\t\tconn.setDoInput(<span class=\"keyword\">true</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (conn.getResponseCode() == <span class=\"number\">200</span>) &#123;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\tInputStream is = conn.getInputStream();</div><div class=\"line\">\t\t\t\tFileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"keyword\">file</span>);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">while</span> ((len = is.<span class=\"keyword\">read</span>(buffer)) != -<span class=\"number\">1</span>) &#123;</div><div class=\"line\">\t\t\t\t\tfos.<span class=\"keyword\">write</span>(buffer, <span class=\"number\">0</span>, len);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tis.close();</div><div class=\"line\">\t\t\t\tfos.close();</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 返回一个URI对象</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> Uri.fromFile(<span class=\"keyword\">file</span>);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中MainActivity中的线程：</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//获取数据，主UI线程是不能做耗时操作的，所以启动子线程来做</span></div><div class=\"line\">        <span class=\"keyword\">new</span> <span class=\"type\">Thread</span>()&#123;</div><div class=\"line\">        \t<span class=\"keyword\">public</span> void run() &#123;</div><div class=\"line\">        \t\tContactService service = <span class=\"keyword\">new</span> <span class=\"type\">ContactService</span>();</div><div class=\"line\">        \t\tList&lt;contact&gt; contacts = <span class=\"literal\">null</span>;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\tcontacts = service.getContactAll();</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">//子线程通过Message对象封装信息，并且用初始化好的，</span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">//Handler对象的sendMessage()方法把数据发送到主线程中，从而达到更新UI主线程的目的</span></div><div class=\"line\">        \t\tMessage msg = <span class=\"keyword\">new</span> <span class=\"type\">Message</span>();</div><div class=\"line\">        \t\tmsg.what = SUCCESS_GET_CONTACT;</div><div class=\"line\">        \t\tmsg.obj = contacts;</div><div class=\"line\">        \t\tmHandler.sendMessage(msg);</div><div class=\"line\">        \t&#125;;</div><div class=\"line\">        &#125;.start();</div></pre></td></tr></table></figure>\n<p>先通过</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">contacts</span> = service.getContactAll()<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p>获得解析后的所有的Contact.<br>通过Hanlder的Message</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Message msg = new Message()<span class=\"comment\">;</span></div><div class=\"line\">        \t\tmsg.what = SUCCESS_GET_CONTACT<span class=\"comment\">;</span></div><div class=\"line\">        \t\tmsg.obj = contacts<span class=\"comment\">;</span></div><div class=\"line\">        \t\tmHandler.sendMessage(msg)<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p>发送到</p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> Handler mHandler = <span class=\"literal\">new</span> Handler()&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"literal\">void</span> handleMessage(android.os.Message msg) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(msg.what == SUCCESS_GET_CONTACT)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">List</span>&lt;contact&gt; contacts = (<span class=\"built_in\">List</span>&lt;contact&gt;) msg.obj;</div><div class=\"line\">\t\t\t\tmAdapter = <span class=\"literal\">new</span> ImageAdapter(getApplicationContext(),contacts,<span class=\"keyword\">cache</span>);</div><div class=\"line\">\t\t\t\tmListView.setAdapter(mAdapter);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;;</div><div class=\"line\">\t&#125;;</div></pre></td></tr></table></figure>\n<p>在handleMessage中创建ListView的Adapter.<br>在ImageAdapter中：</p>\n<figure class=\"highlight pony\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"type\">Override</span></div><div class=\"line\">\tpublic <span class=\"type\">View</span> getView(int position, <span class=\"type\">View</span> convertView, <span class=\"type\">ViewGroup</span> parent) &#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 1获取item,再得到控件</span></div><div class=\"line\">\t\t<span class=\"comment\">// 2 获取数据</span></div><div class=\"line\">\t\t<span class=\"comment\">// 3绑定数据到item</span></div><div class=\"line\">\t\t<span class=\"type\">ViewHolder</span> holder = null;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (convertView == null) &#123;</div><div class=\"line\">\t\t\tholder = <span class=\"function\"><span class=\"keyword\">new</span> <span class=\"title\">ViewHolder</span>();</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"title\">convertView</span> = <span class=\"title\">mInflater</span>.<span class=\"title\">inflate</span>(<span class=\"type\">R</span>.layout.item, null);</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"title\">holder</span>.<span class=\"title\">iv_header</span> = (<span class=\"type\">ImageView</span>) <span class=\"title\">convertView</span>.<span class=\"title\">findViewById</span>(<span class=\"type\">R</span>.id.imageView);</div><div class=\"line\">\t\t\t<span class=\"title\">holder</span>.<span class=\"title\">tv_name</span> = (<span class=\"type\">TextView</span>) <span class=\"title\">convertView</span>.<span class=\"title\">findViewById</span>(<span class=\"type\">R</span>.id.textView);</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"title\">convertView</span>.<span class=\"title\">setTag</span>(holder);</div><div class=\"line\">\t\t&#125;<span class=\"title\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"title\">holder</span> = (<span class=\"type\">ViewHolder</span>)<span class=\"title\">convertView</span>.<span class=\"title\">getTag</span>();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"title\">Contact</span> <span class=\"title\">contact</span> = <span class=\"title\">contacts</span>.<span class=\"title\">get</span>(position);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 异步的加载图片 (线程池 + Handler ) ---&gt; AsyncTask</span></div><div class=\"line\">\t\t<span class=\"title\">asyncloadImage</span>(holder.iv_header, contact.image);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"title\">holder</span>.<span class=\"title\">tv_name</span>.<span class=\"title\">setText</span>(contact.name);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"title\">return</span> <span class=\"title\">convertView</span>;</div><div class=\"line\">\t&#125;</span></div></pre></td></tr></table></figure>\n<p>调用asyncloadImage顾名思义异步加载图片:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> asyncloadImage(ImageView iv_header, String path) &#123;</div><div class=\"line\">\t\tContactService service = <span class=\"keyword\">new</span> ContactService();</div><div class=\"line\">\t\tAsyncImageTask <span class=\"keyword\">task</span> = <span class=\"keyword\">new</span> AsyncImageTask(service, iv_header);</div><div class=\"line\">\t\t<span class=\"keyword\">task</span>.execute(path);</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<p>在其中创建联网下载图片的对象service传入以AsyncTask 为父类（暂且理解为可以更新UI的线程）的task对象.</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsyncImageTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTask&lt;string</span>, <span class=\"title\">Integer</span>, <span class=\"title\">Uri&gt;</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"type\">ContactService</span> service;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"type\">ImageView</span> iv_header;</div><div class=\"line\"></div><div class=\"line\">\t\tpublic <span class=\"type\">AsyncImageTask</span>(<span class=\"type\">ContactService</span> service, <span class=\"type\">ImageView</span> iv_header) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.service = service;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.iv_header = iv_header;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 后台运行的子线程子线程</span></div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"keyword\">protected</span> <span class=\"type\">Uri</span> doInBackground(<span class=\"type\">String</span>... params) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> service.getImageURI(params[<span class=\"number\">0</span>], cache);</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (<span class=\"type\">Exception</span> e) &#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 这个放在在ui线程中执行</span></div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"keyword\">protected</span> void onPostExecute(<span class=\"type\">Uri</span> result) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">super</span>.onPostExecute(result);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 完成图片的绑定</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (iv_header != <span class=\"literal\">null</span> &amp;&amp; result != <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">\t\t\t\tiv_header.setImageURI(result);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<p>我们可以清晰的看到：<br>此类在:protected void onPostExecute(Uri result)是需要传入一个Uri类型的值得。<br>而protected Uri doInBackground(String… params)的返回值恰好是Uri(通过后面我们可以清晰的了解到，这个值就是传递给onPostExecute的）。<br>而这个线程的请求应该是通过：task.execute(path);<br>我们看下protected Uri doInBackground(String… params)</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 后台运行的子线程子线程</span></div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"keyword\">protected</span> <span class=\"function\">Uri <span class=\"title\">doInBackground</span><span class=\"params\">(String... params)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">return</span> service.<span class=\"title\">getImageURI</span><span class=\"params\">(params[<span class=\"number\">0</span>], cache)</span></span>;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t&#125;</div></pre></td></tr></table></figure>\n<p>这个在后台运行的子线程子线程调通过getImageURI返回获取Uri.<br>我们看下：getImageURI:<br><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\">\t * 从网络上获取图片，如果图片在本地存在的话就直接拿，如果不存在再去服务器上下载图片</div><div class=\"line\">\t * 这里的path是图片的地址</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> Uri getImageURI(<span class=\"keyword\">String</span> path, <span class=\"built_in\">File</span> cache) throws Exception &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">String</span> name = MD5.getMD5(path) + path.substring(path.lastIndexOf(<span class=\"string\">\".\"</span>));</div><div class=\"line\">\t\t<span class=\"built_in\">File</span> file = <span class=\"keyword\">new</span> <span class=\"built_in\">File</span>(cache, name);</div><div class=\"line\">\t\t<span class=\"comment\">// 如果图片存在本地缓存目录，则不去服务器下载</span></div><div class=\"line\">\t\t<span class=\"built_in\">if</span> (file.<span class=\"built_in\">exists</span>()) &#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">return</span> Uri.fromFile(file);<span class=\"comment\">//Uri.fromFile(path)这个方法能得到文件的URI</span></div><div class=\"line\">\t\t&#125; <span class=\"built_in\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 从网络上获取图片</span></div><div class=\"line\">\t\t\tURL url = <span class=\"keyword\">new</span> URL(path);</div><div class=\"line\">\t\t\tHttpURLConnection conn = (HttpURLConnection) url.openConnection();</div><div class=\"line\">\t\t\tconn.setConnectTimeout(<span class=\"number\">5000</span>); <span class=\"comment\">//5000毫秒 请求无连接直接返回Timeout</span></div><div class=\"line\">\t\t\tconn.setRequestMethod(<span class=\"string\">\"GET\"</span>); <span class=\"comment\">//通过get请求</span></div><div class=\"line\">\t\t\tconn.setDoInput(true);</div><div class=\"line\">\t\t\t<span class=\"built_in\">if</span> (conn.getResponseCode() == <span class=\"number\">200</span>) &#123;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\tInputStream is = conn.getInputStream();</div><div class=\"line\">\t\t\t\tFileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(file);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">byte</span>[] <span class=\"built_in\">buffer</span> = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">while</span> ((len = is.<span class=\"built_in\">read</span>(<span class=\"built_in\">buffer</span>)) != <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">\t\t\t\t\tfos.<span class=\"built_in\">write</span>(<span class=\"built_in\">buffer</span>, <span class=\"number\">0</span>, len);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tis.<span class=\"built_in\">close</span>();</div><div class=\"line\">\t\t\t\tfos.<span class=\"built_in\">close</span>();</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 返回一个URI对象</span></div><div class=\"line\">\t\t\t\t<span class=\"built_in\">return</span> Uri.fromFile(file);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"built_in\">return</span> null;</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure></p>\n<p>这里已经备注的很清晰了，需要提到的是这里通过MD5来加密了获取到的图片的名字.<br>就是项目中涉及到的：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.example.synctask;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.security.MessageDigest;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MD5</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\">String <span class=\"title\">getMD5</span><span class=\"params\">(String content)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tMessageDigest digest = MessageDigest.getInstance(<span class=\"string\">\"MD5\"</span>);</div><div class=\"line\">\t\t\tdigest.update(content.getBytes());</div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">return</span> <span class=\"title\">getHashString</span><span class=\"params\">(digest)</span></span>;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\">String <span class=\"title\">getHashString</span><span class=\"params\">(MessageDigest digest)</span> </span>&#123;</div><div class=\"line\">\t\tStringBuilder builder = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">byte</span> b : digest.digest()) &#123;</div><div class=\"line\">\t\t\tbuilder.append(Integer.toHexString((b &gt;&gt; <span class=\"number\">4</span>) &amp; <span class=\"number\">0xf</span>));</div><div class=\"line\">\t\t\tbuilder.append(Integer.toHexString(b &amp; <span class=\"number\">0xf</span>));</div><div class=\"line\"></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">return</span> builder.<span class=\"title\">toString</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>此时更新ui</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 这个放在在ui线程中执行</span></div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onPostExecute</span><span class=\"params\">(Uri result)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">super</span>.onPostExecute(result);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 完成图片的绑定</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (iv_header != <span class=\"keyword\">null</span> &amp;&amp; result != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\tiv_header.setImageURI(result);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div></pre></td></tr></table></figure>\n<p>至此简单的异步加载就实现了。</p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"悟·空，勿·懂","date":"2013-11-08T00:35:03.000Z","_content":"\n生活好，或不好，我就在那里，想写一点感悟。\n\n<!--more-->\n生活就如流星，匆匆飘过，留下的是心愿。心愿。心愿。但却总激起片片尘埃。一撇一捺之间，太多欲望。\n\n离开一家公司，首先是喜悦，而后，伤感，至少是我。我期待新的生活，却在拥有以后缅怀旧的人，旧的事，世事总是略带伤感吗？\n\n不过我骨髓里依然能感受那股涌动的热血，因为我年轻，我还有未完成的梦想。\n\n但，回过头是现实的不能再现实的生活，虽然我很想将其梦幻，但它就是在一呼一吸之间。\n\n我没有谈过爱情，不懂恋人所谓的幸福，在我眼中，幸福就是衣食无忧，端庄潇洒；幸福就是能够去想去的地方，眺望.吹风。虽然我现在没钱，但我愿意骑着单车到猎德附近感染风尘，因为程序员需要有自己独特的存在感，单身汉需要自己独特的小快乐。。\n\n我喜欢喝苦咖啡，让苦涩从舌尖慢慢的淌入心坎。我喜欢经历风雨的自己，我喜欢成长中的自己，也许我老了，我会怀念过去的自己，我需要这种怀念，你呢。\n\n也许你不懂你，内心居住这一常客，太久沉淀喧嚣浮躁的世事，他会想念你，他需要向你微笑，他需要向你哭泣，他需要你的拥抱，也许他，才是你。\n\n你知道吗？人生何其短暂，一切沧海一粟，也许战国时，你是一国之君，如今盛世，你又在何方？能在何方？！但，正如时间的流淌，你永远无法保留每一秒，因为它就在上一个瞬间，太来不及捉摸，那么一生中，你需要珍惜，珍惜下一秒，至少是那些值得收藏的几秒，也许，当你老去你会明白的。\n\n我总是一个人听着音乐，我总是一个人思考着，我总是一个人问候另一个自己…..\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/悟空-勿懂.md","raw":"title: 悟·空，勿·懂\ndate: 2013-11-08 08:35:03\npermalink: 2013/11/08/悟空-勿懂\ntags:\n- 随笔\n- 文笔\n\n---\n\n生活好，或不好，我就在那里，想写一点感悟。\n\n<!--more-->\n生活就如流星，匆匆飘过，留下的是心愿。心愿。心愿。但却总激起片片尘埃。一撇一捺之间，太多欲望。\n\n离开一家公司，首先是喜悦，而后，伤感，至少是我。我期待新的生活，却在拥有以后缅怀旧的人，旧的事，世事总是略带伤感吗？\n\n不过我骨髓里依然能感受那股涌动的热血，因为我年轻，我还有未完成的梦想。\n\n但，回过头是现实的不能再现实的生活，虽然我很想将其梦幻，但它就是在一呼一吸之间。\n\n我没有谈过爱情，不懂恋人所谓的幸福，在我眼中，幸福就是衣食无忧，端庄潇洒；幸福就是能够去想去的地方，眺望.吹风。虽然我现在没钱，但我愿意骑着单车到猎德附近感染风尘，因为程序员需要有自己独特的存在感，单身汉需要自己独特的小快乐。。\n\n我喜欢喝苦咖啡，让苦涩从舌尖慢慢的淌入心坎。我喜欢经历风雨的自己，我喜欢成长中的自己，也许我老了，我会怀念过去的自己，我需要这种怀念，你呢。\n\n也许你不懂你，内心居住这一常客，太久沉淀喧嚣浮躁的世事，他会想念你，他需要向你微笑，他需要向你哭泣，他需要你的拥抱，也许他，才是你。\n\n你知道吗？人生何其短暂，一切沧海一粟，也许战国时，你是一国之君，如今盛世，你又在何方？能在何方？！但，正如时间的流淌，你永远无法保留每一秒，因为它就在上一个瞬间，太来不及捉摸，那么一生中，你需要珍惜，珍惜下一秒，至少是那些值得收藏的几秒，也许，当你老去你会明白的。\n\n我总是一个人听着音乐，我总是一个人思考着，我总是一个人问候另一个自己…..\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2013/11/08/悟空-勿懂","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66k4005295buvx1zqvvc","content":"<p>生活好，或不好，我就在那里，想写一点感悟。</p>\n<a id=\"more\"></a>\n<p>生活就如流星，匆匆飘过，留下的是心愿。心愿。心愿。但却总激起片片尘埃。一撇一捺之间，太多欲望。</p>\n<p>离开一家公司，首先是喜悦，而后，伤感，至少是我。我期待新的生活，却在拥有以后缅怀旧的人，旧的事，世事总是略带伤感吗？</p>\n<p>不过我骨髓里依然能感受那股涌动的热血，因为我年轻，我还有未完成的梦想。</p>\n<p>但，回过头是现实的不能再现实的生活，虽然我很想将其梦幻，但它就是在一呼一吸之间。</p>\n<p>我没有谈过爱情，不懂恋人所谓的幸福，在我眼中，幸福就是衣食无忧，端庄潇洒；幸福就是能够去想去的地方，眺望.吹风。虽然我现在没钱，但我愿意骑着单车到猎德附近感染风尘，因为程序员需要有自己独特的存在感，单身汉需要自己独特的小快乐。。</p>\n<p>我喜欢喝苦咖啡，让苦涩从舌尖慢慢的淌入心坎。我喜欢经历风雨的自己，我喜欢成长中的自己，也许我老了，我会怀念过去的自己，我需要这种怀念，你呢。</p>\n<p>也许你不懂你，内心居住这一常客，太久沉淀喧嚣浮躁的世事，他会想念你，他需要向你微笑，他需要向你哭泣，他需要你的拥抱，也许他，才是你。</p>\n<p>你知道吗？人生何其短暂，一切沧海一粟，也许战国时，你是一国之君，如今盛世，你又在何方？能在何方？！但，正如时间的流淌，你永远无法保留每一秒，因为它就在上一个瞬间，太来不及捉摸，那么一生中，你需要珍惜，珍惜下一秒，至少是那些值得收藏的几秒，也许，当你老去你会明白的。</p>\n<p>我总是一个人听着音乐，我总是一个人思考着，我总是一个人问候另一个自己…..</p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<p>生活好，或不好，我就在那里，想写一点感悟。</p>","more":"<p>生活就如流星，匆匆飘过，留下的是心愿。心愿。心愿。但却总激起片片尘埃。一撇一捺之间，太多欲望。</p>\n<p>离开一家公司，首先是喜悦，而后，伤感，至少是我。我期待新的生活，却在拥有以后缅怀旧的人，旧的事，世事总是略带伤感吗？</p>\n<p>不过我骨髓里依然能感受那股涌动的热血，因为我年轻，我还有未完成的梦想。</p>\n<p>但，回过头是现实的不能再现实的生活，虽然我很想将其梦幻，但它就是在一呼一吸之间。</p>\n<p>我没有谈过爱情，不懂恋人所谓的幸福，在我眼中，幸福就是衣食无忧，端庄潇洒；幸福就是能够去想去的地方，眺望.吹风。虽然我现在没钱，但我愿意骑着单车到猎德附近感染风尘，因为程序员需要有自己独特的存在感，单身汉需要自己独特的小快乐。。</p>\n<p>我喜欢喝苦咖啡，让苦涩从舌尖慢慢的淌入心坎。我喜欢经历风雨的自己，我喜欢成长中的自己，也许我老了，我会怀念过去的自己，我需要这种怀念，你呢。</p>\n<p>也许你不懂你，内心居住这一常客，太久沉淀喧嚣浮躁的世事，他会想念你，他需要向你微笑，他需要向你哭泣，他需要你的拥抱，也许他，才是你。</p>\n<p>你知道吗？人生何其短暂，一切沧海一粟，也许战国时，你是一国之君，如今盛世，你又在何方？能在何方？！但，正如时间的流淌，你永远无法保留每一秒，因为它就在上一个瞬间，太来不及捉摸，那么一生中，你需要珍惜，珍惜下一秒，至少是那些值得收藏的几秒，也许，当你老去你会明白的。</p>\n<p>我总是一个人听着音乐，我总是一个人思考着，我总是一个人问候另一个自己…..</p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"岁月","date":"2014-08-29T00:35:03.000Z","_content":"\n人生总是匆匆又匆匆，总是在忙碌中让我麻木，虽然总是警惕让自己去思索，保持初衷，去眺望远方。\n\n<!--more-->\n转眼，已经毕业，领毕业证时没有太在意，投入正式工作，也觉得顺其自然，只有在夜深人静，让自己一个人静下来的时候，才会大吃一惊，日子过得好快。\n\n这个世界充斥了喧嚣、浮躁，每个人的承载都有所不同，我有未完成的梦，有太多目标，有好多事情要去做，因此，我总把把自己排得满满的，然后沉浸在里面，甚至总是因为一些小的成绩感到满足。\n\n我追求自由，虽然我知道有时候生活是无奈的，但是我总会因为内心是自由的感到无比的畅快，就好像，哪怕天塌下来，只有我还有一口气在，所有存在的问题，都能解决，所有目标都能逐一分解，逐一完成。\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/岁月.md","raw":"title: 岁月\ndate: 2014-08-29 08:35:03\npermalink: 2014/08/29/岁月\ntags:\n- 日记\n- 文笔\n\n---\n\n人生总是匆匆又匆匆，总是在忙碌中让我麻木，虽然总是警惕让自己去思索，保持初衷，去眺望远方。\n\n<!--more-->\n转眼，已经毕业，领毕业证时没有太在意，投入正式工作，也觉得顺其自然，只有在夜深人静，让自己一个人静下来的时候，才会大吃一惊，日子过得好快。\n\n这个世界充斥了喧嚣、浮躁，每个人的承载都有所不同，我有未完成的梦，有太多目标，有好多事情要去做，因此，我总把把自己排得满满的，然后沉浸在里面，甚至总是因为一些小的成绩感到满足。\n\n我追求自由，虽然我知道有时候生活是无奈的，但是我总会因为内心是自由的感到无比的畅快，就好像，哪怕天塌下来，只有我还有一口气在，所有存在的问题，都能解决，所有目标都能逐一分解，逐一完成。\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2014/08/29/岁月","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66k5005495butnzs24so","content":"<p>人生总是匆匆又匆匆，总是在忙碌中让我麻木，虽然总是警惕让自己去思索，保持初衷，去眺望远方。</p>\n<a id=\"more\"></a>\n<p>转眼，已经毕业，领毕业证时没有太在意，投入正式工作，也觉得顺其自然，只有在夜深人静，让自己一个人静下来的时候，才会大吃一惊，日子过得好快。</p>\n<p>这个世界充斥了喧嚣、浮躁，每个人的承载都有所不同，我有未完成的梦，有太多目标，有好多事情要去做，因此，我总把把自己排得满满的，然后沉浸在里面，甚至总是因为一些小的成绩感到满足。</p>\n<p>我追求自由，虽然我知道有时候生活是无奈的，但是我总会因为内心是自由的感到无比的畅快，就好像，哪怕天塌下来，只有我还有一口气在，所有存在的问题，都能解决，所有目标都能逐一分解，逐一完成。</p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<p>人生总是匆匆又匆匆，总是在忙碌中让我麻木，虽然总是警惕让自己去思索，保持初衷，去眺望远方。</p>","more":"<p>转眼，已经毕业，领毕业证时没有太在意，投入正式工作，也觉得顺其自然，只有在夜深人静，让自己一个人静下来的时候，才会大吃一惊，日子过得好快。</p>\n<p>这个世界充斥了喧嚣、浮躁，每个人的承载都有所不同，我有未完成的梦，有太多目标，有好多事情要去做，因此，我总把把自己排得满满的，然后沉浸在里面，甚至总是因为一些小的成绩感到满足。</p>\n<p>我追求自由，虽然我知道有时候生活是无奈的，但是我总会因为内心是自由的感到无比的畅快，就好像，哪怕天塌下来，只有我还有一口气在，所有存在的问题，都能解决，所有目标都能逐一分解，逐一完成。</p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"扯","date":"2014-01-01T00:35:03.000Z","_content":"\n这个社会的由”大家都这样,所以我们也这样”的这么一群人组成,但是,必须要由”我们为什么不可以这样”,”我们要这样”的人推进与创造. 第一类人,活的很幸福,但是在某种意义上，完全依赖与第二类人的成果，直到离开人世的那天,TA走过一段属于TA的人生.第二类人,活的很艰辛,却也很幸福,直到离开人世那一天,TA走过一段属于自己的一生并且推进了人类历史…\n\n<!--more-->\n我了个去扯远了!..招商银行,推出代扣业务,有严重漏洞. 所有的代扣业务由用户与商户谈,签妥了以后，由商户提交给招行，按时扣费，招行不会给于用户任何的事前通知。就如你在网络上填写了一份办理电信宽带的合同，提交了以后，在某个时间会自动从你填写了招行卡中扣走对应费用，比如我们签署的是一次性扣一年1980+300，第二天早上9点左右，就从卡里全部扣走。事前招行不会做任何通知。这是非常不可思议的。打电话问招行，答复很简单，现在全国的银行都是这样。没有必要事前短信告知用户。这个漏洞其实只需要在合同在招行生效之后或之前给用户一个明确的扣款周期与款项就可以。但是因为全国都这样，所以这样。站在一个企业来说，充当第一类其实是自甘落后，侥幸生存，但是只要存在，就存在绝对的危机…\n\n我了个去。又扯远了。。当然每一个不可能一出生就是第二类人，TA需要成长，TA需要选择。。。其实每个人都可以奋斗成为，某人口中每天120%热忱奋斗的第二类人，只是还需要坚持。还需要付出更多努力。我不会轻易回头看，只要我还活着，当我离世那天，如果我回想，有那么几年我活的像艾斯一样，就已经足矣。当你走在人来人往中时，如果你觉得每个人都是（高级）动物，都在不停的思索，并且驱动着身体时，你开始学会冷漠，你明白你需要生存。当你走在人来人往中，如果你看着是每个人的脸盘，体味着细微的人暖时，你开始学会融入，你明白你需要的是生活。\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/扯.md","raw":"title: 扯\ndate: 2014-01-01 08:35:03\npermalink: 2014/01/01/扯\ntags:\n- 文笔\n- 随笔\n\n---\n\n这个社会的由”大家都这样,所以我们也这样”的这么一群人组成,但是,必须要由”我们为什么不可以这样”,”我们要这样”的人推进与创造. 第一类人,活的很幸福,但是在某种意义上，完全依赖与第二类人的成果，直到离开人世的那天,TA走过一段属于TA的人生.第二类人,活的很艰辛,却也很幸福,直到离开人世那一天,TA走过一段属于自己的一生并且推进了人类历史…\n\n<!--more-->\n我了个去扯远了!..招商银行,推出代扣业务,有严重漏洞. 所有的代扣业务由用户与商户谈,签妥了以后，由商户提交给招行，按时扣费，招行不会给于用户任何的事前通知。就如你在网络上填写了一份办理电信宽带的合同，提交了以后，在某个时间会自动从你填写了招行卡中扣走对应费用，比如我们签署的是一次性扣一年1980+300，第二天早上9点左右，就从卡里全部扣走。事前招行不会做任何通知。这是非常不可思议的。打电话问招行，答复很简单，现在全国的银行都是这样。没有必要事前短信告知用户。这个漏洞其实只需要在合同在招行生效之后或之前给用户一个明确的扣款周期与款项就可以。但是因为全国都这样，所以这样。站在一个企业来说，充当第一类其实是自甘落后，侥幸生存，但是只要存在，就存在绝对的危机…\n\n我了个去。又扯远了。。当然每一个不可能一出生就是第二类人，TA需要成长，TA需要选择。。。其实每个人都可以奋斗成为，某人口中每天120%热忱奋斗的第二类人，只是还需要坚持。还需要付出更多努力。我不会轻易回头看，只要我还活着，当我离世那天，如果我回想，有那么几年我活的像艾斯一样，就已经足矣。当你走在人来人往中时，如果你觉得每个人都是（高级）动物，都在不停的思索，并且驱动着身体时，你开始学会冷漠，你明白你需要生存。当你走在人来人往中，如果你看着是每个人的脸盘，体味着细微的人暖时，你开始学会融入，你明白你需要的是生活。\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2014/01/01/扯","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66k5005595bujn8xoi6q","content":"<p>这个社会的由”大家都这样,所以我们也这样”的这么一群人组成,但是,必须要由”我们为什么不可以这样”,”我们要这样”的人推进与创造. 第一类人,活的很幸福,但是在某种意义上，完全依赖与第二类人的成果，直到离开人世的那天,TA走过一段属于TA的人生.第二类人,活的很艰辛,却也很幸福,直到离开人世那一天,TA走过一段属于自己的一生并且推进了人类历史…</p>\n<a id=\"more\"></a>\n<p>我了个去扯远了!..招商银行,推出代扣业务,有严重漏洞. 所有的代扣业务由用户与商户谈,签妥了以后，由商户提交给招行，按时扣费，招行不会给于用户任何的事前通知。就如你在网络上填写了一份办理电信宽带的合同，提交了以后，在某个时间会自动从你填写了招行卡中扣走对应费用，比如我们签署的是一次性扣一年1980+300，第二天早上9点左右，就从卡里全部扣走。事前招行不会做任何通知。这是非常不可思议的。打电话问招行，答复很简单，现在全国的银行都是这样。没有必要事前短信告知用户。这个漏洞其实只需要在合同在招行生效之后或之前给用户一个明确的扣款周期与款项就可以。但是因为全国都这样，所以这样。站在一个企业来说，充当第一类其实是自甘落后，侥幸生存，但是只要存在，就存在绝对的危机…</p>\n<p>我了个去。又扯远了。。当然每一个不可能一出生就是第二类人，TA需要成长，TA需要选择。。。其实每个人都可以奋斗成为，某人口中每天120%热忱奋斗的第二类人，只是还需要坚持。还需要付出更多努力。我不会轻易回头看，只要我还活着，当我离世那天，如果我回想，有那么几年我活的像艾斯一样，就已经足矣。当你走在人来人往中时，如果你觉得每个人都是（高级）动物，都在不停的思索，并且驱动着身体时，你开始学会冷漠，你明白你需要生存。当你走在人来人往中，如果你看着是每个人的脸盘，体味着细微的人暖时，你开始学会融入，你明白你需要的是生活。</p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<p>这个社会的由”大家都这样,所以我们也这样”的这么一群人组成,但是,必须要由”我们为什么不可以这样”,”我们要这样”的人推进与创造. 第一类人,活的很幸福,但是在某种意义上，完全依赖与第二类人的成果，直到离开人世的那天,TA走过一段属于TA的人生.第二类人,活的很艰辛,却也很幸福,直到离开人世那一天,TA走过一段属于自己的一生并且推进了人类历史…</p>","more":"<p>我了个去扯远了!..招商银行,推出代扣业务,有严重漏洞. 所有的代扣业务由用户与商户谈,签妥了以后，由商户提交给招行，按时扣费，招行不会给于用户任何的事前通知。就如你在网络上填写了一份办理电信宽带的合同，提交了以后，在某个时间会自动从你填写了招行卡中扣走对应费用，比如我们签署的是一次性扣一年1980+300，第二天早上9点左右，就从卡里全部扣走。事前招行不会做任何通知。这是非常不可思议的。打电话问招行，答复很简单，现在全国的银行都是这样。没有必要事前短信告知用户。这个漏洞其实只需要在合同在招行生效之后或之前给用户一个明确的扣款周期与款项就可以。但是因为全国都这样，所以这样。站在一个企业来说，充当第一类其实是自甘落后，侥幸生存，但是只要存在，就存在绝对的危机…</p>\n<p>我了个去。又扯远了。。当然每一个不可能一出生就是第二类人，TA需要成长，TA需要选择。。。其实每个人都可以奋斗成为，某人口中每天120%热忱奋斗的第二类人，只是还需要坚持。还需要付出更多努力。我不会轻易回头看，只要我还活着，当我离世那天，如果我回想，有那么几年我活的像艾斯一样，就已经足矣。当你走在人来人往中时，如果你觉得每个人都是（高级）动物，都在不停的思索，并且驱动着身体时，你开始学会冷漠，你明白你需要生存。当你走在人来人往中，如果你看着是每个人的脸盘，体味着细微的人暖时，你开始学会融入，你明白你需要的是生活。</p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"整理自14年-毕业生标兵准备的演讲稿","date":"2014-06-01T00:35:03.000Z","_content":"> 刚毕业，写的毕业生标兵演讲稿。\n\n<!--more-->\n\n尊敬的老师同学们：\n大家好，我是来自软件1002班的龚振杰。时间飞逝，仿佛拖着行李箱踏进大学的那一刻就在昨日，而现在已是我们的大学毕业典礼。大学，给我们留下了珍贵的回忆与友谊，接下来，我们需要步入社会，迎接全新的挑战，开启我们的职业生涯。先祝愿大家前程似锦！在此作为毕业生标兵，我十分荣幸能够与各位分享我的实习感悟。\n\n也许是因为专业原因，我们对移动互联网的一些方面十分的敏感，就个人而言，有时候我想着想着、或者看着新闻，就会猛然醒悟，移动互联网时代充满着机会与挑战，遍地都是黄金，相信很多人都有同感。\n\n\n我目前就职于腾讯，在微信团队，参与微信Android端开发，但私底下做点外包也做点自己的微创业项目，最近有一个私底下自己团队的小项目《小道消息》 马上要上线。《小道消息》这个项目整个团队一共6人，一个产品、一个后台、一个IOS、一个网站、一个美工、还有我，负责Android。移动互联网的微创业就是这么简单，几个人，一个点子，一点业余时间。这是我眼中的移动互联网微创业。虽然事情不是想象中的那么顺利，如IOS同学中途放弃了，大家都是第一次异地合作，交流上刚开始时并不是很顺利等等，但是最终还是坚持下来了。我们的愿景其实很简单，我们不要求，甚至不希望，一开始就推出一款产品，就能十分成功，因为这会让我们变得脆弱，我们更希望的是沉淀尽量多的东西。\n\n我认为作为刚刚毕业的我们，需要做的是懂得去收集、思考、整理、沉淀下来，在移动互联网领域更需要像极客一样追寻新的东西，不断探索。\n\n其实在去年我和我哥们就说过，两年后我要入职腾讯，再两年我要入职Google，再两年带几个大神一起创业。但是移动互联网总是瞬息万变，很多的计划都已经提前，很多计划都有所改变，而我们必须每天保持着足够的热忱去应对这一切。我记得大二暑假，我原本在一家公司做网站开发，但是由于和公司的老板有些不愉快的过节，我辞职离开了那家公司。但是移动互联网的各类新闻动态总是驱使我一定要去做点什么才成，那段时间我疯狂的学习了几本书，甚至萌生了很多基于移动互联网的点子，于是开始写计划书，投递给各个我在博客、微博上所能找到的风投与天使投资，我记得我计划书的最后一段清楚的写着，我可以为了梦想随时起航到任何一个未知的地方，哪怕放弃我的学业！那时候似乎觉得，只要有一个点子，一份激情就能够打动别人，迎来全新的契机，结果可想而知，完全无人问津。后来看了吴军的《浪潮之巅》，才发现，原来我们需沉淀的还有很多。\n\n我认为作为毕业生的我们必须要深刻的认识到一点，人生并不是一味的等待机会，而是应该如何不断的给自己创造机会。\n\n大三下学期我在一家游戏公司实习，从事COCOS2D-X游戏开发， 在这家公司我十分踏实、努力的干了半年，后来我和我的导师都离开了这家公司，除了在这家公司学习了COCOS2D-X优秀的设计模式思想以外，还有一个不得不拿出来与大家分享的感悟。在那家公司半年了，虽然十分努力，但是待遇一直没怎么提高，当然也意识到这是一家已经成长了四年的互联网公司，可是还是没有什么成长，公司原本就没有什么油水，要让老板提高员工的待遇更是艰难了。私底下我开始学习Android开发，并且在做了第一个Apps之后，开始接一些外包，后面才得到远在广州的酷狗音乐的赏识，大四得以直接前往广州。\n\n如果你觉得现在所在的公司前程堪忧，和它一起磨下去其实是一件很可怕的事情，与其如此，还不如改变自己，谋求新的出路。除此之外还需要铭记永远不要让自己一条路走到黑，无论是现状如何，都需要给自己腾出哪怕一小丁点空间，给自己的未来一点额外的更优质的想象。\n\n我一直认为，一个成功的计划是拥有多个层次的，最高的目标是唯一的，但它会随着成长逐渐登上更高的台阶，次层的目标是几年内可以实现的，最基层的目标是随时都在改变的，我一直践行着这些，也希望它成为大家的宝藏。\n\n我们大家都即将完全的步入社会，也许对于我们而言，对于我们这个年华而言，很大一部分精力都放在了攀登人生巅峰的道路上，但请别迷失自己，适当的时候享受生活，哪怕是望着窗外、或者走在河边故作沉思，也是十分必要的。\n\n各位同学，目前我们要做的是踏实的工作。但铭记，给别人打工永远是别人的马仔，祝愿大家都能够闯出自己的一片天空！\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/整理自14年-毕业生标兵准备的演讲稿.md","raw":"title: 整理自14年-毕业生标兵准备的演讲稿\ndate: 2014-06-01 08:35:03\npermalink: 2014/06/01/整理自14年-毕业生标兵准备的演讲稿\ntags:\n---\n> 刚毕业，写的毕业生标兵演讲稿。\n\n<!--more-->\n\n尊敬的老师同学们：\n大家好，我是来自软件1002班的龚振杰。时间飞逝，仿佛拖着行李箱踏进大学的那一刻就在昨日，而现在已是我们的大学毕业典礼。大学，给我们留下了珍贵的回忆与友谊，接下来，我们需要步入社会，迎接全新的挑战，开启我们的职业生涯。先祝愿大家前程似锦！在此作为毕业生标兵，我十分荣幸能够与各位分享我的实习感悟。\n\n也许是因为专业原因，我们对移动互联网的一些方面十分的敏感，就个人而言，有时候我想着想着、或者看着新闻，就会猛然醒悟，移动互联网时代充满着机会与挑战，遍地都是黄金，相信很多人都有同感。\n\n\n我目前就职于腾讯，在微信团队，参与微信Android端开发，但私底下做点外包也做点自己的微创业项目，最近有一个私底下自己团队的小项目《小道消息》 马上要上线。《小道消息》这个项目整个团队一共6人，一个产品、一个后台、一个IOS、一个网站、一个美工、还有我，负责Android。移动互联网的微创业就是这么简单，几个人，一个点子，一点业余时间。这是我眼中的移动互联网微创业。虽然事情不是想象中的那么顺利，如IOS同学中途放弃了，大家都是第一次异地合作，交流上刚开始时并不是很顺利等等，但是最终还是坚持下来了。我们的愿景其实很简单，我们不要求，甚至不希望，一开始就推出一款产品，就能十分成功，因为这会让我们变得脆弱，我们更希望的是沉淀尽量多的东西。\n\n我认为作为刚刚毕业的我们，需要做的是懂得去收集、思考、整理、沉淀下来，在移动互联网领域更需要像极客一样追寻新的东西，不断探索。\n\n其实在去年我和我哥们就说过，两年后我要入职腾讯，再两年我要入职Google，再两年带几个大神一起创业。但是移动互联网总是瞬息万变，很多的计划都已经提前，很多计划都有所改变，而我们必须每天保持着足够的热忱去应对这一切。我记得大二暑假，我原本在一家公司做网站开发，但是由于和公司的老板有些不愉快的过节，我辞职离开了那家公司。但是移动互联网的各类新闻动态总是驱使我一定要去做点什么才成，那段时间我疯狂的学习了几本书，甚至萌生了很多基于移动互联网的点子，于是开始写计划书，投递给各个我在博客、微博上所能找到的风投与天使投资，我记得我计划书的最后一段清楚的写着，我可以为了梦想随时起航到任何一个未知的地方，哪怕放弃我的学业！那时候似乎觉得，只要有一个点子，一份激情就能够打动别人，迎来全新的契机，结果可想而知，完全无人问津。后来看了吴军的《浪潮之巅》，才发现，原来我们需沉淀的还有很多。\n\n我认为作为毕业生的我们必须要深刻的认识到一点，人生并不是一味的等待机会，而是应该如何不断的给自己创造机会。\n\n大三下学期我在一家游戏公司实习，从事COCOS2D-X游戏开发， 在这家公司我十分踏实、努力的干了半年，后来我和我的导师都离开了这家公司，除了在这家公司学习了COCOS2D-X优秀的设计模式思想以外，还有一个不得不拿出来与大家分享的感悟。在那家公司半年了，虽然十分努力，但是待遇一直没怎么提高，当然也意识到这是一家已经成长了四年的互联网公司，可是还是没有什么成长，公司原本就没有什么油水，要让老板提高员工的待遇更是艰难了。私底下我开始学习Android开发，并且在做了第一个Apps之后，开始接一些外包，后面才得到远在广州的酷狗音乐的赏识，大四得以直接前往广州。\n\n如果你觉得现在所在的公司前程堪忧，和它一起磨下去其实是一件很可怕的事情，与其如此，还不如改变自己，谋求新的出路。除此之外还需要铭记永远不要让自己一条路走到黑，无论是现状如何，都需要给自己腾出哪怕一小丁点空间，给自己的未来一点额外的更优质的想象。\n\n我一直认为，一个成功的计划是拥有多个层次的，最高的目标是唯一的，但它会随着成长逐渐登上更高的台阶，次层的目标是几年内可以实现的，最基层的目标是随时都在改变的，我一直践行着这些，也希望它成为大家的宝藏。\n\n我们大家都即将完全的步入社会，也许对于我们而言，对于我们这个年华而言，很大一部分精力都放在了攀登人生巅峰的道路上，但请别迷失自己，适当的时候享受生活，哪怕是望着窗外、或者走在河边故作沉思，也是十分必要的。\n\n各位同学，目前我们要做的是踏实的工作。但铭记，给别人打工永远是别人的马仔，祝愿大家都能够闯出自己的一片天空！\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2014/06/01/整理自14年-毕业生标兵准备的演讲稿","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66k6005795bul01txff3","content":"<blockquote>\n<p>刚毕业，写的毕业生标兵演讲稿。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>尊敬的老师同学们：<br>大家好，我是来自软件1002班的龚振杰。时间飞逝，仿佛拖着行李箱踏进大学的那一刻就在昨日，而现在已是我们的大学毕业典礼。大学，给我们留下了珍贵的回忆与友谊，接下来，我们需要步入社会，迎接全新的挑战，开启我们的职业生涯。先祝愿大家前程似锦！在此作为毕业生标兵，我十分荣幸能够与各位分享我的实习感悟。</p>\n<p>也许是因为专业原因，我们对移动互联网的一些方面十分的敏感，就个人而言，有时候我想着想着、或者看着新闻，就会猛然醒悟，移动互联网时代充满着机会与挑战，遍地都是黄金，相信很多人都有同感。</p>\n<p>我目前就职于腾讯，在微信团队，参与微信Android端开发，但私底下做点外包也做点自己的微创业项目，最近有一个私底下自己团队的小项目《小道消息》 马上要上线。《小道消息》这个项目整个团队一共6人，一个产品、一个后台、一个IOS、一个网站、一个美工、还有我，负责Android。移动互联网的微创业就是这么简单，几个人，一个点子，一点业余时间。这是我眼中的移动互联网微创业。虽然事情不是想象中的那么顺利，如IOS同学中途放弃了，大家都是第一次异地合作，交流上刚开始时并不是很顺利等等，但是最终还是坚持下来了。我们的愿景其实很简单，我们不要求，甚至不希望，一开始就推出一款产品，就能十分成功，因为这会让我们变得脆弱，我们更希望的是沉淀尽量多的东西。</p>\n<p>我认为作为刚刚毕业的我们，需要做的是懂得去收集、思考、整理、沉淀下来，在移动互联网领域更需要像极客一样追寻新的东西，不断探索。</p>\n<p>其实在去年我和我哥们就说过，两年后我要入职腾讯，再两年我要入职Google，再两年带几个大神一起创业。但是移动互联网总是瞬息万变，很多的计划都已经提前，很多计划都有所改变，而我们必须每天保持着足够的热忱去应对这一切。我记得大二暑假，我原本在一家公司做网站开发，但是由于和公司的老板有些不愉快的过节，我辞职离开了那家公司。但是移动互联网的各类新闻动态总是驱使我一定要去做点什么才成，那段时间我疯狂的学习了几本书，甚至萌生了很多基于移动互联网的点子，于是开始写计划书，投递给各个我在博客、微博上所能找到的风投与天使投资，我记得我计划书的最后一段清楚的写着，我可以为了梦想随时起航到任何一个未知的地方，哪怕放弃我的学业！那时候似乎觉得，只要有一个点子，一份激情就能够打动别人，迎来全新的契机，结果可想而知，完全无人问津。后来看了吴军的《浪潮之巅》，才发现，原来我们需沉淀的还有很多。</p>\n<p>我认为作为毕业生的我们必须要深刻的认识到一点，人生并不是一味的等待机会，而是应该如何不断的给自己创造机会。</p>\n<p>大三下学期我在一家游戏公司实习，从事COCOS2D-X游戏开发， 在这家公司我十分踏实、努力的干了半年，后来我和我的导师都离开了这家公司，除了在这家公司学习了COCOS2D-X优秀的设计模式思想以外，还有一个不得不拿出来与大家分享的感悟。在那家公司半年了，虽然十分努力，但是待遇一直没怎么提高，当然也意识到这是一家已经成长了四年的互联网公司，可是还是没有什么成长，公司原本就没有什么油水，要让老板提高员工的待遇更是艰难了。私底下我开始学习Android开发，并且在做了第一个Apps之后，开始接一些外包，后面才得到远在广州的酷狗音乐的赏识，大四得以直接前往广州。</p>\n<p>如果你觉得现在所在的公司前程堪忧，和它一起磨下去其实是一件很可怕的事情，与其如此，还不如改变自己，谋求新的出路。除此之外还需要铭记永远不要让自己一条路走到黑，无论是现状如何，都需要给自己腾出哪怕一小丁点空间，给自己的未来一点额外的更优质的想象。</p>\n<p>我一直认为，一个成功的计划是拥有多个层次的，最高的目标是唯一的，但它会随着成长逐渐登上更高的台阶，次层的目标是几年内可以实现的，最基层的目标是随时都在改变的，我一直践行着这些，也希望它成为大家的宝藏。</p>\n<p>我们大家都即将完全的步入社会，也许对于我们而言，对于我们这个年华而言，很大一部分精力都放在了攀登人生巅峰的道路上，但请别迷失自己，适当的时候享受生活，哪怕是望着窗外、或者走在河边故作沉思，也是十分必要的。</p>\n<p>各位同学，目前我们要做的是踏实的工作。但铭记，给别人打工永远是别人的马仔，祝愿大家都能够闯出自己的一片天空！</p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>刚毕业，写的毕业生标兵演讲稿。</p>\n</blockquote>","more":"<p>尊敬的老师同学们：<br>大家好，我是来自软件1002班的龚振杰。时间飞逝，仿佛拖着行李箱踏进大学的那一刻就在昨日，而现在已是我们的大学毕业典礼。大学，给我们留下了珍贵的回忆与友谊，接下来，我们需要步入社会，迎接全新的挑战，开启我们的职业生涯。先祝愿大家前程似锦！在此作为毕业生标兵，我十分荣幸能够与各位分享我的实习感悟。</p>\n<p>也许是因为专业原因，我们对移动互联网的一些方面十分的敏感，就个人而言，有时候我想着想着、或者看着新闻，就会猛然醒悟，移动互联网时代充满着机会与挑战，遍地都是黄金，相信很多人都有同感。</p>\n<p>我目前就职于腾讯，在微信团队，参与微信Android端开发，但私底下做点外包也做点自己的微创业项目，最近有一个私底下自己团队的小项目《小道消息》 马上要上线。《小道消息》这个项目整个团队一共6人，一个产品、一个后台、一个IOS、一个网站、一个美工、还有我，负责Android。移动互联网的微创业就是这么简单，几个人，一个点子，一点业余时间。这是我眼中的移动互联网微创业。虽然事情不是想象中的那么顺利，如IOS同学中途放弃了，大家都是第一次异地合作，交流上刚开始时并不是很顺利等等，但是最终还是坚持下来了。我们的愿景其实很简单，我们不要求，甚至不希望，一开始就推出一款产品，就能十分成功，因为这会让我们变得脆弱，我们更希望的是沉淀尽量多的东西。</p>\n<p>我认为作为刚刚毕业的我们，需要做的是懂得去收集、思考、整理、沉淀下来，在移动互联网领域更需要像极客一样追寻新的东西，不断探索。</p>\n<p>其实在去年我和我哥们就说过，两年后我要入职腾讯，再两年我要入职Google，再两年带几个大神一起创业。但是移动互联网总是瞬息万变，很多的计划都已经提前，很多计划都有所改变，而我们必须每天保持着足够的热忱去应对这一切。我记得大二暑假，我原本在一家公司做网站开发，但是由于和公司的老板有些不愉快的过节，我辞职离开了那家公司。但是移动互联网的各类新闻动态总是驱使我一定要去做点什么才成，那段时间我疯狂的学习了几本书，甚至萌生了很多基于移动互联网的点子，于是开始写计划书，投递给各个我在博客、微博上所能找到的风投与天使投资，我记得我计划书的最后一段清楚的写着，我可以为了梦想随时起航到任何一个未知的地方，哪怕放弃我的学业！那时候似乎觉得，只要有一个点子，一份激情就能够打动别人，迎来全新的契机，结果可想而知，完全无人问津。后来看了吴军的《浪潮之巅》，才发现，原来我们需沉淀的还有很多。</p>\n<p>我认为作为毕业生的我们必须要深刻的认识到一点，人生并不是一味的等待机会，而是应该如何不断的给自己创造机会。</p>\n<p>大三下学期我在一家游戏公司实习，从事COCOS2D-X游戏开发， 在这家公司我十分踏实、努力的干了半年，后来我和我的导师都离开了这家公司，除了在这家公司学习了COCOS2D-X优秀的设计模式思想以外，还有一个不得不拿出来与大家分享的感悟。在那家公司半年了，虽然十分努力，但是待遇一直没怎么提高，当然也意识到这是一家已经成长了四年的互联网公司，可是还是没有什么成长，公司原本就没有什么油水，要让老板提高员工的待遇更是艰难了。私底下我开始学习Android开发，并且在做了第一个Apps之后，开始接一些外包，后面才得到远在广州的酷狗音乐的赏识，大四得以直接前往广州。</p>\n<p>如果你觉得现在所在的公司前程堪忧，和它一起磨下去其实是一件很可怕的事情，与其如此，还不如改变自己，谋求新的出路。除此之外还需要铭记永远不要让自己一条路走到黑，无论是现状如何，都需要给自己腾出哪怕一小丁点空间，给自己的未来一点额外的更优质的想象。</p>\n<p>我一直认为，一个成功的计划是拥有多个层次的，最高的目标是唯一的，但它会随着成长逐渐登上更高的台阶，次层的目标是几年内可以实现的，最基层的目标是随时都在改变的，我一直践行着这些，也希望它成为大家的宝藏。</p>\n<p>我们大家都即将完全的步入社会，也许对于我们而言，对于我们这个年华而言，很大一部分精力都放在了攀登人生巅峰的道路上，但请别迷失自己，适当的时候享受生活，哪怕是望着窗外、或者走在河边故作沉思，也是十分必要的。</p>\n<p>各位同学，目前我们要做的是踏实的工作。但铭记，给别人打工永远是别人的马仔，祝愿大家都能够闯出自己的一片天空！</p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"无比的力量","date":"2010-12-24T00:35:03.000Z","_content":"\n暮然间，似乎再也写不出什么了，宛若一支挤满了墨汁的钢笔，悬与偌大的宣纸之上，迫不及防的滴出大粒大粒的墨汁，淡开。。淡开。。\n\n<!--more-->\n那泛黄的意念，就犹如内心深处的悬崖边上飘然与空中的一张皱的不能再皱的餐巾纸，翱翔着，但却纠结着，害怕着那悬崖上的风一旦平息。。自己将坠于万丈深渊。。\n\n但是它明白，苍天曾，承诺过，哪怕是狂风暴雨打湿了它，它也会用惊诧天地的力量，高高的托举起它。\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/无比的力量.md","raw":"title: 无比的力量\ndate: 2010-12-24 08:35:03\npermalink: 2010/12/24/无比的力量\ntags:\n- 文笔\n\n---\n\n暮然间，似乎再也写不出什么了，宛若一支挤满了墨汁的钢笔，悬与偌大的宣纸之上，迫不及防的滴出大粒大粒的墨汁，淡开。。淡开。。\n\n<!--more-->\n那泛黄的意念，就犹如内心深处的悬崖边上飘然与空中的一张皱的不能再皱的餐巾纸，翱翔着，但却纠结着，害怕着那悬崖上的风一旦平息。。自己将坠于万丈深渊。。\n\n但是它明白，苍天曾，承诺过，哪怕是狂风暴雨打湿了它，它也会用惊诧天地的力量，高高的托举起它。\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2010/12/24/无比的力量","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66k7005995bufs9rctlh","content":"<p>暮然间，似乎再也写不出什么了，宛若一支挤满了墨汁的钢笔，悬与偌大的宣纸之上，迫不及防的滴出大粒大粒的墨汁，淡开。。淡开。。</p>\n<a id=\"more\"></a>\n<p>那泛黄的意念，就犹如内心深处的悬崖边上飘然与空中的一张皱的不能再皱的餐巾纸，翱翔着，但却纠结着，害怕着那悬崖上的风一旦平息。。自己将坠于万丈深渊。。</p>\n<p>但是它明白，苍天曾，承诺过，哪怕是狂风暴雨打湿了它，它也会用惊诧天地的力量，高高的托举起它。</p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<p>暮然间，似乎再也写不出什么了，宛若一支挤满了墨汁的钢笔，悬与偌大的宣纸之上，迫不及防的滴出大粒大粒的墨汁，淡开。。淡开。。</p>","more":"<p>那泛黄的意念，就犹如内心深处的悬崖边上飘然与空中的一张皱的不能再皱的餐巾纸，翱翔着，但却纠结着，害怕着那悬崖上的风一旦平息。。自己将坠于万丈深渊。。</p>\n<p>但是它明白，苍天曾，承诺过，哪怕是狂风暴雨打湿了它，它也会用惊诧天地的力量，高高的托举起它。</p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"早前笔记本加装触摸屏测试","date":"2012-11-17T00:35:03.000Z","_content":"\n> 之前为了宣传用Discuz搭建的学院论坛，乘着自己折腾给自己的笔记本电脑加装了触摸之际，录下的视频。\n\n<!--more-->\n\n<iframe height=498 width=510 src=\"http://player.youku.com/embed/XMzUzNjM3NTM2\" frameborder=0 allowfullscreen></iframe>\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/早前笔记本加装触摸屏测试.md","raw":"title: 早前笔记本加装触摸屏测试\ndate: 2012-11-17 08:35:03\npermalink: 2012/11/17/早前笔记本加装触摸屏测试\ntags:\n- 娱乐\n- 视频\n\n---\n\n> 之前为了宣传用Discuz搭建的学院论坛，乘着自己折腾给自己的笔记本电脑加装了触摸之际，录下的视频。\n\n<!--more-->\n\n<iframe height=498 width=510 src=\"http://player.youku.com/embed/XMzUzNjM3NTM2\" frameborder=0 allowfullscreen></iframe>\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2012/11/17/早前笔记本加装触摸屏测试","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66k7005c95butieow1n9","content":"<blockquote>\n<p>之前为了宣传用Discuz搭建的学院论坛，乘着自己折腾给自己的笔记本电脑加装了触摸之际，录下的视频。</p>\n</blockquote>\n<a id=\"more\"></a>\n<iframe height=\"498\" width=\"510\" src=\"http://player.youku.com/embed/XMzUzNjM3NTM2\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>之前为了宣传用Discuz搭建的学院论坛，乘着自己折腾给自己的笔记本电脑加装了触摸之际，录下的视频。</p>\n</blockquote>","more":"<iframe height=498 width=510 src=\"http://player.youku.com/embed/XMzUzNjM3NTM2\" frameborder=0 allowfullscreen></iframe>\n\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"爸爸，妈妈，老师","date":"2009-04-27T00:35:03.000Z","_content":"\n省赛，失败了。\n\n哭……\n爸爸我要离开机器人训练的地方了，真的，真的有很多说不出的不舍，可是留下又有什么意义了呢？！\n也许留下不能带来什么吧，我要离开机器人训练的地方了，真的很不舍，但是…….也许我本来….\n爸爸我学到了许多，…….也许我真得要努力学习来弥补内心的空虚吧，，，，想过这样的结果但是，真得没有想到一切这么平静 ……\n放下吧……也许我擦干了眼泪会发现眼前依然很美….谢谢你们的祝福……我会懂得很多，，，，，，\n很多……\n无论如何我还是要感谢，真得很感谢培养我的叶老师！真心的感谢！\n\n收录至早年的qq.\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/爸爸，妈妈，老师.md","raw":"title: 爸爸，妈妈，老师\ndate: 2009-04-27 08:35:03\npermalink: 2009/04/27/爸爸，妈妈，老师\ntags:\n- 感悟\n- 文笔\n\n---\n\n省赛，失败了。\n\n哭……\n爸爸我要离开机器人训练的地方了，真的，真的有很多说不出的不舍，可是留下又有什么意义了呢？！\n也许留下不能带来什么吧，我要离开机器人训练的地方了，真的很不舍，但是…….也许我本来….\n爸爸我学到了许多，…….也许我真得要努力学习来弥补内心的空虚吧，，，，想过这样的结果但是，真得没有想到一切这么平静 ……\n放下吧……也许我擦干了眼泪会发现眼前依然很美….谢谢你们的祝福……我会懂得很多，，，，，，\n很多……\n无论如何我还是要感谢，真得很感谢培养我的叶老师！真心的感谢！\n\n收录至早年的qq.\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2009/04/27/爸爸，妈妈，老师","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66k8005e95bumeuhh4hi","content":"<p>省赛，失败了。</p>\n<p>哭……<br>爸爸我要离开机器人训练的地方了，真的，真的有很多说不出的不舍，可是留下又有什么意义了呢？！<br>也许留下不能带来什么吧，我要离开机器人训练的地方了，真的很不舍，但是…….也许我本来….<br>爸爸我学到了许多，…….也许我真得要努力学习来弥补内心的空虚吧，，，，想过这样的结果但是，真得没有想到一切这么平静 ……<br>放下吧……也许我擦干了眼泪会发现眼前依然很美….谢谢你们的祝福……我会懂得很多，，，，，，<br>很多……<br>无论如何我还是要感谢，真得很感谢培养我的叶老师！真心的感谢！</p>\n<p>收录至早年的qq.</p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"","more":"<p>省赛，失败了。</p>\n<p>哭……<br>爸爸我要离开机器人训练的地方了，真的，真的有很多说不出的不舍，可是留下又有什么意义了呢？！<br>也许留下不能带来什么吧，我要离开机器人训练的地方了，真的很不舍，但是…….也许我本来….<br>爸爸我学到了许多，…….也许我真得要努力学习来弥补内心的空虚吧，，，，想过这样的结果但是，真得没有想到一切这么平静 ……<br>放下吧……也许我擦干了眼泪会发现眼前依然很美….谢谢你们的祝福……我会懂得很多，，，，，，<br>很多……<br>无论如何我还是要感谢，真得很感谢培养我的叶老师！真心的感谢！</p>\n<p>收录至早年的qq.</p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n"},{"title":"生活","date":"2010-12-05T00:35:03.000Z","_content":"\n生活的浪潮纵使滔滔又滔滔，我却要飘于其上，纵观其势，纵缆其变。这，只是个说词。可是，想着一直的生活，猛然回溯，才发现自己一直固持此鉴。如此，将一支腿扎进生活，一支腿却深深的埋在自己的内心里。\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/生活.md","raw":"title: 生活\ndate: 2010-12-05 08:35:03\npermalink: 2010/12/05/生活\ntags:\n- 文笔\n\n---\n\n生活的浪潮纵使滔滔又滔滔，我却要飘于其上，纵观其势，纵缆其变。这，只是个说词。可是，想着一直的生活，猛然回溯，才发现自己一直固持此鉴。如此，将一支腿扎进生活，一支腿却深深的埋在自己的内心里。\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2010/12/05/生活","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66k8005h95bujy7z9sef","content":"<p>生活的浪潮纵使滔滔又滔滔，我却要飘于其上，纵观其势，纵缆其变。这，只是个说词。可是，想着一直的生活，猛然回溯，才发现自己一直固持此鉴。如此，将一支腿扎进生活，一支腿却深深的埋在自己的内心里。</p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"","more":"<p>生活的浪潮纵使滔滔又滔滔，我却要飘于其上，纵观其势，纵缆其变。这，只是个说词。可是，想着一直的生活，猛然回溯，才发现自己一直固持此鉴。如此，将一支腿扎进生活，一支腿却深深的埋在自己的内心里。</p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n"},{"title":"移动终端远程控制计算机","date":"2013-04-18T00:35:03.000Z","_content":"> 下载地址: http://pan.baidu.com/share/link?shareid=485154&uk=859141184  （新增语音识别、语音录入、键盘录入）（影音控制是针对百度影音设计），[龚振杰 大学生挑战杯 触控专项（福建省） 参赛作品（目前已经进入决赛），使用部分公布 版权所有]。\n\n<!--more-->\n![](/img/remote-app-1.png)\n![](/img/remote-app-8.png)\n![](/img/remote-app-9.png)\n\n## 功能简介：\n1. 通过触控Android端完成PC端鼠标控制，让手机可以在任意可以上网的地方就能充当计算机触摸板的功能。\n2. 通过Android端定制按键完成PC端常用操作比如一键显示桌面、一键关机、一键打开我的电脑、一键复制、一键剪切、一键关闭、一键关机等等，方便用户远程快捷控制计算机。\n3. 通过Android端控制软件，比如PPT（实现一键播放、下一页、上一页、首页、尾页、打开、关闭、画直线等）。\n4. 实现在Android端获取PC端当前界面。\n\n![](/img/remote-app-2.png)\n![](/img/remote-app-3.png)\n![](/img/remote-app-4.png)\n![](/img/remote-app-5.png)\n![](/img/remote-app-6.png)\n![](/img/remote-app-7.png)\n\n## 补上证书:\n\n![](/img/remote-app-8.jpg)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/移动终端远程控制计算机.md","raw":"title: 移动终端远程控制计算机\ndate: 2013-04-18 08:35:03\npermalink: 2013/04/18/移动终端远程控制计算机\ntags:\n- 远程控制\n- app\n- Android\n- 大学生挑战杯\n- 项目\n\n---\n> 下载地址: http://pan.baidu.com/share/link?shareid=485154&uk=859141184  （新增语音识别、语音录入、键盘录入）（影音控制是针对百度影音设计），[龚振杰 大学生挑战杯 触控专项（福建省） 参赛作品（目前已经进入决赛），使用部分公布 版权所有]。\n\n<!--more-->\n![](/img/remote-app-1.png)\n![](/img/remote-app-8.png)\n![](/img/remote-app-9.png)\n\n## 功能简介：\n1. 通过触控Android端完成PC端鼠标控制，让手机可以在任意可以上网的地方就能充当计算机触摸板的功能。\n2. 通过Android端定制按键完成PC端常用操作比如一键显示桌面、一键关机、一键打开我的电脑、一键复制、一键剪切、一键关闭、一键关机等等，方便用户远程快捷控制计算机。\n3. 通过Android端控制软件，比如PPT（实现一键播放、下一页、上一页、首页、尾页、打开、关闭、画直线等）。\n4. 实现在Android端获取PC端当前界面。\n\n![](/img/remote-app-2.png)\n![](/img/remote-app-3.png)\n![](/img/remote-app-4.png)\n![](/img/remote-app-5.png)\n![](/img/remote-app-6.png)\n![](/img/remote-app-7.png)\n\n## 补上证书:\n\n![](/img/remote-app-8.jpg)\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2013/04/18/移动终端远程控制计算机","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66k9005j95buc9v5a6es","content":"<blockquote>\n<p>下载地址: <a href=\"http://pan.baidu.com/share/link?shareid=485154&amp;uk=859141184\" target=\"_blank\" rel=\"external\">http://pan.baidu.com/share/link?shareid=485154&amp;uk=859141184</a>  （新增语音识别、语音录入、键盘录入）（影音控制是针对百度影音设计），[龚振杰 大学生挑战杯 触控专项（福建省） 参赛作品（目前已经进入决赛），使用部分公布 版权所有]。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p><img src=\"/img/remote-app-1.png\" alt=\"\"><br><img src=\"/img/remote-app-8.png\" alt=\"\"><br><img src=\"/img/remote-app-9.png\" alt=\"\"></p>\n<h2 id=\"功能简介：\"><a href=\"#功能简介：\" class=\"headerlink\" title=\"功能简介：\"></a>功能简介：</h2><ol>\n<li>通过触控Android端完成PC端鼠标控制，让手机可以在任意可以上网的地方就能充当计算机触摸板的功能。</li>\n<li>通过Android端定制按键完成PC端常用操作比如一键显示桌面、一键关机、一键打开我的电脑、一键复制、一键剪切、一键关闭、一键关机等等，方便用户远程快捷控制计算机。</li>\n<li>通过Android端控制软件，比如PPT（实现一键播放、下一页、上一页、首页、尾页、打开、关闭、画直线等）。</li>\n<li>实现在Android端获取PC端当前界面。</li>\n</ol>\n<p><img src=\"/img/remote-app-2.png\" alt=\"\"><br><img src=\"/img/remote-app-3.png\" alt=\"\"><br><img src=\"/img/remote-app-4.png\" alt=\"\"><br><img src=\"/img/remote-app-5.png\" alt=\"\"><br><img src=\"/img/remote-app-6.png\" alt=\"\"><br><img src=\"/img/remote-app-7.png\" alt=\"\"></p>\n<h2 id=\"补上证书\"><a href=\"#补上证书\" class=\"headerlink\" title=\"补上证书:\"></a>补上证书:</h2><p><img src=\"/img/remote-app-8.jpg\" alt=\"\"></p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>下载地址: <a href=\"http://pan.baidu.com/share/link?shareid=485154&amp;uk=859141184\">http://pan.baidu.com/share/link?shareid=485154&amp;uk=859141184</a>  （新增语音识别、语音录入、键盘录入）（影音控制是针对百度影音设计），[龚振杰 大学生挑战杯 触控专项（福建省） 参赛作品（目前已经进入决赛），使用部分公布 版权所有]。</p>\n</blockquote>","more":"<p><img src=\"/img/remote-app-1.png\" alt=\"\"><br><img src=\"/img/remote-app-8.png\" alt=\"\"><br><img src=\"/img/remote-app-9.png\" alt=\"\"></p>\n<h2 id=\"功能简介：\"><a href=\"#功能简介：\" class=\"headerlink\" title=\"功能简介：\"></a>功能简介：</h2><ol>\n<li>通过触控Android端完成PC端鼠标控制，让手机可以在任意可以上网的地方就能充当计算机触摸板的功能。</li>\n<li>通过Android端定制按键完成PC端常用操作比如一键显示桌面、一键关机、一键打开我的电脑、一键复制、一键剪切、一键关闭、一键关机等等，方便用户远程快捷控制计算机。</li>\n<li>通过Android端控制软件，比如PPT（实现一键播放、下一页、上一页、首页、尾页、打开、关闭、画直线等）。</li>\n<li>实现在Android端获取PC端当前界面。</li>\n</ol>\n<p><img src=\"/img/remote-app-2.png\" alt=\"\"><br><img src=\"/img/remote-app-3.png\" alt=\"\"><br><img src=\"/img/remote-app-4.png\" alt=\"\"><br><img src=\"/img/remote-app-5.png\" alt=\"\"><br><img src=\"/img/remote-app-6.png\" alt=\"\"><br><img src=\"/img/remote-app-7.png\" alt=\"\"></p>\n<h2 id=\"补上证书\"><a href=\"#补上证书\" class=\"headerlink\" title=\"补上证书:\"></a>补上证书:</h2><p><img src=\"/img/remote-app-8.jpg\" alt=\"\"></p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"翻唱《童话》","date":"2008-11-17T00:35:03.000Z","_content":"\n> 高中在家中翻唱《通话》\n\n<!--more-->\n<iframe src=\"http://www.tudou.com/programs/view/html5embed.action?type=0&code=okXp7nDFyw0&lcode=&resourceId=28217162_06_05_99\" allowtransparency=\"true\" allowfullscreen=\"true\" allowfullscreenInteractive=\"true\" scrolling=\"no\" border=\"0\" frameborder=\"0\" style=\"width:480px;height:400px;\"></iframe>\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/翻唱《童话》.md","raw":"title: 翻唱《童话》\ndate: 2008-11-17 08:35:03\npermalink: 2008/11/17/翻唱《童话》\ntags:\n- 视频\n- 唱歌\n\n---\n\n> 高中在家中翻唱《通话》\n\n<!--more-->\n<iframe src=\"http://www.tudou.com/programs/view/html5embed.action?type=0&code=okXp7nDFyw0&lcode=&resourceId=28217162_06_05_99\" allowtransparency=\"true\" allowfullscreen=\"true\" allowfullscreenInteractive=\"true\" scrolling=\"no\" border=\"0\" frameborder=\"0\" style=\"width:480px;height:400px;\"></iframe>\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2008/11/17/翻唱《童话》","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66k9005l95bupwq4pu2a","content":"<blockquote>\n<p>高中在家中翻唱《通话》</p>\n</blockquote>\n<a id=\"more\"></a>\n<iframe src=\"http://www.tudou.com/programs/view/html5embed.action?type=0&code=okXp7nDFyw0&lcode=&resourceId=28217162_06_05_99\" allowtransparency=\"true\" allowfullscreen=\"true\" allowfullscreeninteractive=\"true\" scrolling=\"no\" border=\"0\" frameborder=\"0\" style=\"width:480px;height:400px;\"></iframe>\n\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<blockquote>\n<p>高中在家中翻唱《通话》</p>\n</blockquote>","more":"<iframe src=\"http://www.tudou.com/programs/view/html5embed.action?type=0&code=okXp7nDFyw0&lcode=&resourceId=28217162_06_05_99\" allowtransparency=\"true\" allowfullscreen=\"true\" allowfullscreenInteractive=\"true\" scrolling=\"no\" border=\"0\" frameborder=\"0\" style=\"width:480px;height:400px;\"></iframe>\n\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"走在路上","date":"2011-10-18T00:35:03.000Z","_content":"\n许久，没有提笔，蓦然回首，大一已经过去，已逐渐从埋头苦读中爬了出来，要迎接，不知是累，是醉。\n\n<!--more-->\n稠密的工作量，使自己好像那西去的猴子，总有打不完的妖怪，只身西去的路上，不知是陶醉着，还是已木然了。\n\n习惯了忙碌，习惯了孤单一人，却总是在四处奔走过后，开始寻找能一起喝杯咖啡，一起触目不语，用心交流的朋友，能一起促膝而坐，谈天说地，安抚心灵的朋友，每每都是无功而返。自饮一杯奶茶，行于这初秋的萧条之中。\n\n于是乎，迷惘了自己，厌倦了忙中偷闲的一杯奶茶，厌倦了形形色色的劳动，可现实的欲望太多太多，使我来不急抹去道道迷障，又将策马前行，不知是向前了，还只是向钱了。\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/走在路上.md","raw":"title: 走在路上\ndate: 2011-10-18 08:35:03\npermalink: 2011/10/18/走在路上\ntags:\n- 随笔\n- 文笔\n- 奋斗\n\n---\n\n许久，没有提笔，蓦然回首，大一已经过去，已逐渐从埋头苦读中爬了出来，要迎接，不知是累，是醉。\n\n<!--more-->\n稠密的工作量，使自己好像那西去的猴子，总有打不完的妖怪，只身西去的路上，不知是陶醉着，还是已木然了。\n\n习惯了忙碌，习惯了孤单一人，却总是在四处奔走过后，开始寻找能一起喝杯咖啡，一起触目不语，用心交流的朋友，能一起促膝而坐，谈天说地，安抚心灵的朋友，每每都是无功而返。自饮一杯奶茶，行于这初秋的萧条之中。\n\n于是乎，迷惘了自己，厌倦了忙中偷闲的一杯奶茶，厌倦了形形色色的劳动，可现实的欲望太多太多，使我来不急抹去道道迷障，又将策马前行，不知是向前了，还只是向钱了。\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2011/10/18/走在路上","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66ka005o95buiagttr9h","content":"<p>许久，没有提笔，蓦然回首，大一已经过去，已逐渐从埋头苦读中爬了出来，要迎接，不知是累，是醉。</p>\n<a id=\"more\"></a>\n<p>稠密的工作量，使自己好像那西去的猴子，总有打不完的妖怪，只身西去的路上，不知是陶醉着，还是已木然了。</p>\n<p>习惯了忙碌，习惯了孤单一人，却总是在四处奔走过后，开始寻找能一起喝杯咖啡，一起触目不语，用心交流的朋友，能一起促膝而坐，谈天说地，安抚心灵的朋友，每每都是无功而返。自饮一杯奶茶，行于这初秋的萧条之中。</p>\n<p>于是乎，迷惘了自己，厌倦了忙中偷闲的一杯奶茶，厌倦了形形色色的劳动，可现实的欲望太多太多，使我来不急抹去道道迷障，又将策马前行，不知是向前了，还只是向钱了。</p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<p>许久，没有提笔，蓦然回首，大一已经过去，已逐渐从埋头苦读中爬了出来，要迎接，不知是累，是醉。</p>","more":"<p>稠密的工作量，使自己好像那西去的猴子，总有打不完的妖怪，只身西去的路上，不知是陶醉着，还是已木然了。</p>\n<p>习惯了忙碌，习惯了孤单一人，却总是在四处奔走过后，开始寻找能一起喝杯咖啡，一起触目不语，用心交流的朋友，能一起促膝而坐，谈天说地，安抚心灵的朋友，每每都是无功而返。自饮一杯奶茶，行于这初秋的萧条之中。</p>\n<p>于是乎，迷惘了自己，厌倦了忙中偷闲的一杯奶茶，厌倦了形形色色的劳动，可现实的欲望太多太多，使我来不急抹去道道迷障，又将策马前行，不知是向前了，还只是向钱了。</p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"【高三文骚无韵】我要托起明天的太阳","date":"2009-08-21T00:35:03.000Z","_content":"\n佛云：一叶一菩提；\n\n诗人云：一花一世界；\n\n我说：一晴一杠裳；\n\n<!--more-->\n今日的阳光依然很美，真的。不信？\n\n摘下你的太阳镜，感受下这甜甜的阳光浴吧~\n\n静下心来，品吸着身边的空气。。让自己的思绪穿越山河，感觉一切都在逼视着你。。。很美。。\n\n也许那是真的，做为后代的我们。坐在暖风熏面的窗台。遥望“秦时明月汉时关”，当我们从唐宋元明清的史册中感受到其中的正气与节操，感受并凝视自己的心灵时，，，真的有一种被稳稳托举的感觉，好像自己的心灵是珠穆朗玛峰千米上的冰雪，圣洁晶莹。。。。\n\n也许我不是鲁迅先生说的那种仁人志士，那种生不惧，死不悔，以一己之动，独臂擎天，力挽狂澜的民族火种。但是我相信美，我相信生如夏花，既然是一颗星，就要发一分光和热。。\n\n虽然我生在“尘网”中，但我却永远没有忘记我飞翔的姿态，我要用我的梦之翼，冲破万里云层，千山暮色。\n\n当今社会就似一条奔腾的大河，有太多的川流熙攘，真的。。但是在阳光所到之处他们都无处遁逃，，虽然他们岸然的寄生在衣裳上，但是只要一上“杠”，他们必定原型毕露，不需要太多的解释。“不以物喜，不以己悲”，，其实我们有时也应该拥有先哲们那种寻求心灵宁静的追求，因为那可以让你的人生之水更加橙澈。。\n\n千年的余晖摇曳着花季，飘洒了雨季。。。。。我的心依然如巨浪般翻滚、如飞沙般狂舞。我需要有自己“九天揽月，五洋捉鳖”的气概！“金戈铁马,气吞万里”的雄心！“剑锋所指，所向披靡”的壮志！\n\n我要托起明天的太阳！\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/高三文骚无韵-我要托起明天的太阳.md","raw":"title: 【高三文骚无韵】我要托起明天的太阳\ndate: 2009-08-21 08:35:03\npermalink: 2009/08/21/高三文骚无韵-我要托起明天的太阳\ntags:\n- 文笔\n\n---\n\n佛云：一叶一菩提；\n\n诗人云：一花一世界；\n\n我说：一晴一杠裳；\n\n<!--more-->\n今日的阳光依然很美，真的。不信？\n\n摘下你的太阳镜，感受下这甜甜的阳光浴吧~\n\n静下心来，品吸着身边的空气。。让自己的思绪穿越山河，感觉一切都在逼视着你。。。很美。。\n\n也许那是真的，做为后代的我们。坐在暖风熏面的窗台。遥望“秦时明月汉时关”，当我们从唐宋元明清的史册中感受到其中的正气与节操，感受并凝视自己的心灵时，，，真的有一种被稳稳托举的感觉，好像自己的心灵是珠穆朗玛峰千米上的冰雪，圣洁晶莹。。。。\n\n也许我不是鲁迅先生说的那种仁人志士，那种生不惧，死不悔，以一己之动，独臂擎天，力挽狂澜的民族火种。但是我相信美，我相信生如夏花，既然是一颗星，就要发一分光和热。。\n\n虽然我生在“尘网”中，但我却永远没有忘记我飞翔的姿态，我要用我的梦之翼，冲破万里云层，千山暮色。\n\n当今社会就似一条奔腾的大河，有太多的川流熙攘，真的。。但是在阳光所到之处他们都无处遁逃，，虽然他们岸然的寄生在衣裳上，但是只要一上“杠”，他们必定原型毕露，不需要太多的解释。“不以物喜，不以己悲”，，其实我们有时也应该拥有先哲们那种寻求心灵宁静的追求，因为那可以让你的人生之水更加橙澈。。\n\n千年的余晖摇曳着花季，飘洒了雨季。。。。。我的心依然如巨浪般翻滚、如飞沙般狂舞。我需要有自己“九天揽月，五洋捉鳖”的气概！“金戈铁马,气吞万里”的雄心！“剑锋所指，所向披靡”的壮志！\n\n我要托起明天的太阳！\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2009/08/21/高三文骚无韵-我要托起明天的太阳","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66ka005q95bunsgnwkku","content":"<p>佛云：一叶一菩提；</p>\n<p>诗人云：一花一世界；</p>\n<p>我说：一晴一杠裳；</p>\n<a id=\"more\"></a>\n<p>今日的阳光依然很美，真的。不信？</p>\n<p>摘下你的太阳镜，感受下这甜甜的阳光浴吧~</p>\n<p>静下心来，品吸着身边的空气。。让自己的思绪穿越山河，感觉一切都在逼视着你。。。很美。。</p>\n<p>也许那是真的，做为后代的我们。坐在暖风熏面的窗台。遥望“秦时明月汉时关”，当我们从唐宋元明清的史册中感受到其中的正气与节操，感受并凝视自己的心灵时，，，真的有一种被稳稳托举的感觉，好像自己的心灵是珠穆朗玛峰千米上的冰雪，圣洁晶莹。。。。</p>\n<p>也许我不是鲁迅先生说的那种仁人志士，那种生不惧，死不悔，以一己之动，独臂擎天，力挽狂澜的民族火种。但是我相信美，我相信生如夏花，既然是一颗星，就要发一分光和热。。</p>\n<p>虽然我生在“尘网”中，但我却永远没有忘记我飞翔的姿态，我要用我的梦之翼，冲破万里云层，千山暮色。</p>\n<p>当今社会就似一条奔腾的大河，有太多的川流熙攘，真的。。但是在阳光所到之处他们都无处遁逃，，虽然他们岸然的寄生在衣裳上，但是只要一上“杠”，他们必定原型毕露，不需要太多的解释。“不以物喜，不以己悲”，，其实我们有时也应该拥有先哲们那种寻求心灵宁静的追求，因为那可以让你的人生之水更加橙澈。。</p>\n<p>千年的余晖摇曳着花季，飘洒了雨季。。。。。我的心依然如巨浪般翻滚、如飞沙般狂舞。我需要有自己“九天揽月，五洋捉鳖”的气概！“金戈铁马,气吞万里”的雄心！“剑锋所指，所向披靡”的壮志！</p>\n<p>我要托起明天的太阳！</p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<p>佛云：一叶一菩提；</p>\n<p>诗人云：一花一世界；</p>\n<p>我说：一晴一杠裳；</p>","more":"<p>今日的阳光依然很美，真的。不信？</p>\n<p>摘下你的太阳镜，感受下这甜甜的阳光浴吧~</p>\n<p>静下心来，品吸着身边的空气。。让自己的思绪穿越山河，感觉一切都在逼视着你。。。很美。。</p>\n<p>也许那是真的，做为后代的我们。坐在暖风熏面的窗台。遥望“秦时明月汉时关”，当我们从唐宋元明清的史册中感受到其中的正气与节操，感受并凝视自己的心灵时，，，真的有一种被稳稳托举的感觉，好像自己的心灵是珠穆朗玛峰千米上的冰雪，圣洁晶莹。。。。</p>\n<p>也许我不是鲁迅先生说的那种仁人志士，那种生不惧，死不悔，以一己之动，独臂擎天，力挽狂澜的民族火种。但是我相信美，我相信生如夏花，既然是一颗星，就要发一分光和热。。</p>\n<p>虽然我生在“尘网”中，但我却永远没有忘记我飞翔的姿态，我要用我的梦之翼，冲破万里云层，千山暮色。</p>\n<p>当今社会就似一条奔腾的大河，有太多的川流熙攘，真的。。但是在阳光所到之处他们都无处遁逃，，虽然他们岸然的寄生在衣裳上，但是只要一上“杠”，他们必定原型毕露，不需要太多的解释。“不以物喜，不以己悲”，，其实我们有时也应该拥有先哲们那种寻求心灵宁静的追求，因为那可以让你的人生之水更加橙澈。。</p>\n<p>千年的余晖摇曳着花季，飘洒了雨季。。。。。我的心依然如巨浪般翻滚、如飞沙般狂舞。我需要有自己“九天揽月，五洋捉鳖”的气概！“金戈铁马,气吞万里”的雄心！“剑锋所指，所向披靡”的壮志！</p>\n<p>我要托起明天的太阳！</p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"},{"title":"黑色友谊","date":"2010-12-14T00:35:03.000Z","_content":"\n也许，应该心怀阳光，但过了正午烈日，过了夕阳的澄暗，留下的还有什么？\n\n<!--more-->\n是黑色而刺耳的悲鸣。\n\n那，是友情，也许我不懂，不懂为何过份的了解却带来了不解的隔阂，正如我不懂爱情 一样，不解友情，不解那左半脸的微笑却带着右半脸的可笑。\n\n只是，我明白，应心怀包容吧，可是，我不容忍，于是总带了矛盾的心寒，保持沉默。\n\n这，也许诠释了距离的美吧。\n\n但我依然明白快乐，纵使友情的烈日已逝，夕阳的澄暗已过，撞入黑暗的冰河，但依然活在亲情与梦想的烛光下，也许四周冰凉的黑暗，更能使人清醒的明白这点点跳动的烛火，那样光明，那样温暖…..\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","source":"_posts/黑色友谊.md","raw":"title: 黑色友谊\ndate: 2010-12-14 08:35:03\npermalink: 2010/12/14/黑色友谊\ntags:\n- 文笔\n\n---\n\n也许，应该心怀阳光，但过了正午烈日，过了夕阳的澄暗，留下的还有什么？\n\n<!--more-->\n是黑色而刺耳的悲鸣。\n\n那，是友情，也许我不懂，不懂为何过份的了解却带来了不解的隔阂，正如我不懂爱情 一样，不解友情，不解那左半脸的微笑却带着右半脸的可笑。\n\n只是，我明白，应心怀包容吧，可是，我不容忍，于是总带了矛盾的心寒，保持沉默。\n\n这，也许诠释了距离的美吧。\n\n但我依然明白快乐，纵使友情的烈日已逝，夕阳的澄暗已过，撞入黑暗的冰河，但依然活在亲情与梦想的烛光下，也许四周冰凉的黑暗，更能使人清醒的明白这点点跳动的烛火，那样光明，那样温暖…..\n\n---\n\n> © 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). http://creativecommons.org/licenses/by-nc/3.0/\n\n---\n","slug":"2010/12/14/黑色友谊","published":1,"updated":"2017-02-09T16:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciznr66kb005t95buh0n6ct4p","content":"<p>也许，应该心怀阳光，但过了正午烈日，过了夕阳的澄暗，留下的还有什么？</p>\n<a id=\"more\"></a>\n<p>是黑色而刺耳的悲鸣。</p>\n<p>那，是友情，也许我不懂，不懂为何过份的了解却带来了不解的隔阂，正如我不懂爱情 一样，不解友情，不解那左半脸的微笑却带着右半脸的可笑。</p>\n<p>只是，我明白，应心怀包容吧，可是，我不容忍，于是总带了矛盾的心寒，保持沉默。</p>\n<p>这，也许诠释了距离的美吧。</p>\n<p>但我依然明白快乐，纵使友情的烈日已逝，夕阳的澄暗已过，撞入黑暗的冰河，但依然活在亲情与梦想的烛光下，也许四周冰凉的黑暗，更能使人清醒的明白这点点跳动的烛火，那样光明，那样温暖…..</p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\" target=\"_blank\" rel=\"external\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>\n","excerpt":"<p>也许，应该心怀阳光，但过了正午烈日，过了夕阳的澄暗，留下的还有什么？</p>","more":"<p>是黑色而刺耳的悲鸣。</p>\n<p>那，是友情，也许我不懂，不懂为何过份的了解却带来了不解的隔阂，正如我不懂爱情 一样，不解友情，不解那左半脸的微笑却带着右半脸的可笑。</p>\n<p>只是，我明白，应心怀包容吧，可是，我不容忍，于是总带了矛盾的心寒，保持沉默。</p>\n<p>这，也许诠释了距离的美吧。</p>\n<p>但我依然明白快乐，纵使友情的烈日已逝，夕阳的澄暗已过，撞入黑暗的冰河，但依然活在亲情与梦想的烛光下，也许四周冰凉的黑暗，更能使人清醒的明白这点点跳动的烛火，那样光明，那样温暖…..</p>\n<hr>\n<blockquote>\n<p>© 2012 - 2017, Jacksgong(blog.dreamtobe.cn). Licensed under the Creative Commons Attribution-NonCommercial 3.0 license (This license lets others remix, tweak, and build upon a work non-commercially, and although their new works must also acknowledge the original author and be non-commercial, they don’t have to license their derivative works on the same terms). <a href=\"http://creativecommons.org/licenses/by-nc/3.0/\">http://creativecommons.org/licenses/by-nc/3.0/</a></p>\n</blockquote>\n<hr>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ciznr66h4000095buzmo2kda6","tag_id":"ciznr66ha000295buaciyiv3k","_id":"ciznr66hn000b95bud7gelkng"},{"post_id":"ciznr66h4000095buzmo2kda6","tag_id":"ciznr66hh000695bu7oap4uyu","_id":"ciznr66ho000d95bur9n7e8km"},{"post_id":"ciznr66h8000195bu8kxjk9wt","tag_id":"ciznr66hm000995buj2hs8itl","_id":"ciznr66hv000q95bufc9uwpls"},{"post_id":"ciznr66h8000195bu8kxjk9wt","tag_id":"ciznr66ho000e95buu6susojr","_id":"ciznr66hw000s95bu45t5q78k"},{"post_id":"ciznr66h8000195bu8kxjk9wt","tag_id":"ciznr66hq000h95buk9bk2v0z","_id":"ciznr66hx000v95bu9dumfaz3"},{"post_id":"ciznr66h8000195bu8kxjk9wt","tag_id":"ciznr66ht000l95buu69izh9e","_id":"ciznr66hy000x95bur7x9dtuj"},{"post_id":"ciznr66hc000395buwkdg19a3","tag_id":"ciznr66hv000o95bu9qxqjqit","_id":"ciznr66i7001a95buh543xm66"},{"post_id":"ciznr66hc000395buwkdg19a3","tag_id":"ciznr66hw000t95buaujcqgtl","_id":"ciznr66i8001c95bu7qisqgp4"},{"post_id":"ciznr66hc000395buwkdg19a3","tag_id":"ciznr66hm000995buj2hs8itl","_id":"ciznr66i9001f95buovtb8r7m"},{"post_id":"ciznr66hc000395buwkdg19a3","tag_id":"ciznr66i1001195bu5nfhbffs","_id":"ciznr66i9001h95buuissxkly"},{"post_id":"ciznr66hc000395buwkdg19a3","tag_id":"ciznr66i3001595buk4owbj85","_id":"ciznr66ic001k95bulqgripyt"},{"post_id":"ciznr66hf000495buob2vnd54","tag_id":"ciznr66i6001895buec4etbd3","_id":"ciznr66id001o95bu387ly8sl"},{"post_id":"ciznr66hf000495buob2vnd54","tag_id":"ciznr66i8001d95buyhe7f8nf","_id":"ciznr66ie001q95buzh5q5yim"},{"post_id":"ciznr66hf000495buob2vnd54","tag_id":"ciznr66hm000995buj2hs8itl","_id":"ciznr66ie001t95bupyqpods6"},{"post_id":"ciznr66hh000595bucqkgkn3g","tag_id":"ciznr66ic001m95buedtl9cib","_id":"ciznr66ik002495buzdilhlki"},{"post_id":"ciznr66hh000595bucqkgkn3g","tag_id":"ciznr66ie001s95bu9r27rs0i","_id":"ciznr66il002695bur3nmi03l"},{"post_id":"ciznr66hh000595bucqkgkn3g","tag_id":"ciznr66hm000995buj2hs8itl","_id":"ciznr66im002995bui3m5ls0t"},{"post_id":"ciznr66hh000595bucqkgkn3g","tag_id":"ciznr66ih001z95butu1cx3yb","_id":"ciznr66in002b95bui1upzhte"},{"post_id":"ciznr66hi000795buc8b7fhck","tag_id":"ciznr66ij002295bu16971meu","_id":"ciznr66iw002o95bu0py52qom"},{"post_id":"ciznr66hi000795buc8b7fhck","tag_id":"ciznr66il002795bu9k8g1vmp","_id":"ciznr66iw002q95buv3r749bh"},{"post_id":"ciznr66hi000795buc8b7fhck","tag_id":"ciznr66hm000995buj2hs8itl","_id":"ciznr66ix002t95bux36dk68j"},{"post_id":"ciznr66hi000795buc8b7fhck","tag_id":"ciznr66ir002g95bupzbglyo8","_id":"ciznr66ix002v95bumr8ywlg1"},{"post_id":"ciznr66hi000795buc8b7fhck","tag_id":"ciznr66it002j95buitcnocnt","_id":"ciznr66iz002y95buthyfooee"},{"post_id":"ciznr66hk000895buqaki0la1","tag_id":"ciznr66iu002m95bu596i3ful","_id":"ciznr66j1003295buy3en54cy"},{"post_id":"ciznr66hk000895buqaki0la1","tag_id":"ciznr66iw002r95bud1ur00mp","_id":"ciznr66j2003495bux8y3awb5"},{"post_id":"ciznr66hk000895buqaki0la1","tag_id":"ciznr66hm000995buj2hs8itl","_id":"ciznr66j3003795buqhyszeoc"},{"post_id":"ciznr66hn000a95buivgay2ck","tag_id":"ciznr66j1003195buvpnwedb3","_id":"ciznr66j8003c95buku5mxnu5"},{"post_id":"ciznr66hn000a95buivgay2ck","tag_id":"ciznr66hm000995buj2hs8itl","_id":"ciznr66j9003e95bukq090djq"},{"post_id":"ciznr66hn000a95buivgay2ck","tag_id":"ciznr66j3003695buloxcap65","_id":"ciznr66ja003h95busy7j2h7g"},{"post_id":"ciznr66hn000c95bu5f1o20aw","tag_id":"ciznr66hm000995buj2hs8itl","_id":"ciznr66jf003s95buz64irrvc"},{"post_id":"ciznr66hn000c95bu5f1o20aw","tag_id":"ciznr66j7003a95bugjkndd3e","_id":"ciznr66jg003u95busogwqf8p"},{"post_id":"ciznr66hn000c95bu5f1o20aw","tag_id":"ciznr66j9003f95buzxwwxoed","_id":"ciznr66jg003x95bu0m1mgrxs"},{"post_id":"ciznr66hn000c95bu5f1o20aw","tag_id":"ciznr66jb003k95bu9z8fuwqz","_id":"ciznr66jh003z95bu3d0hi1dv"},{"post_id":"ciznr66hn000c95bu5f1o20aw","tag_id":"ciznr66jd003n95bu9blbr08n","_id":"ciznr66ji004295buraszhb5o"},{"post_id":"ciznr66ho000f95bu6rzxed7t","tag_id":"ciznr66je003q95bujokp0rks","_id":"ciznr66jt004995buvhpxk1yq"},{"post_id":"ciznr66ho000f95bu6rzxed7t","tag_id":"ciznr66jg003v95bubsz6uzeo","_id":"ciznr66ju004b95buwnh4vs4o"},{"post_id":"ciznr66ho000f95bu6rzxed7t","tag_id":"ciznr66iu002m95bu596i3ful","_id":"ciznr66ju004e95bu42c5m0wz"},{"post_id":"ciznr66ho000f95bu6rzxed7t","tag_id":"ciznr66hm000995buj2hs8itl","_id":"ciznr66jv004g95buzs5i7gao"},{"post_id":"ciznr66ho000f95bu6rzxed7t","tag_id":"ciznr66i1001195bu5nfhbffs","_id":"ciznr66jw004j95bujl8wr01r"},{"post_id":"ciznr66hp000g95bu8mraykk2","tag_id":"ciznr66jk004895busl5ed5l7","_id":"ciznr66k0004r95busk5pzhic"},{"post_id":"ciznr66hp000g95bu8mraykk2","tag_id":"ciznr66ju004d95buh1p1t2ua","_id":"ciznr66k0004t95bu9107vbtn"},{"post_id":"ciznr66hp000g95bu8mraykk2","tag_id":"ciznr66jv004i95bucmhwqeut","_id":"ciznr66k1004w95bu8e9tf0w6"},{"post_id":"ciznr66hp000g95bu8mraykk2","tag_id":"ciznr66it002j95buitcnocnt","_id":"ciznr66k1004y95bu4e6l72vl"},{"post_id":"ciznr66hq000i95bulfndhpby","tag_id":"ciznr66jz004p95bu1j5dokxn","_id":"ciznr66k6005895bumq6fj6jj"},{"post_id":"ciznr66hq000i95bulfndhpby","tag_id":"ciznr66k1004v95bupiia85h2","_id":"ciznr66k7005a95burzd5ujs8"},{"post_id":"ciznr66hq000i95bulfndhpby","tag_id":"ciznr66hm000995buj2hs8itl","_id":"ciznr66k8005d95buy20d6hjg"},{"post_id":"ciznr66hq000i95bulfndhpby","tag_id":"ciznr66i1001195bu5nfhbffs","_id":"ciznr66k8005f95bumievqsr2"},{"post_id":"ciznr66hq000i95bulfndhpby","tag_id":"ciznr66it002j95buitcnocnt","_id":"ciznr66k9005i95bu5fy7s2j9"},{"post_id":"ciznr66k7005995bufs9rctlh","tag_id":"ciznr66ha000295buaciyiv3k","_id":"ciznr66k9005k95buanalq2g6"},{"post_id":"ciznr66hr000j95bukzkufxq2","tag_id":"ciznr66k6005695bu8v2jab8y","_id":"ciznr66ka005n95bu2lyfljkd"},{"post_id":"ciznr66hr000j95bukzkufxq2","tag_id":"ciznr66k7005b95bu2hg52wwl","_id":"ciznr66ka005p95buzuhnpqev"},{"post_id":"ciznr66k8005h95bujy7z9sef","tag_id":"ciznr66ha000295buaciyiv3k","_id":"ciznr66kb005r95buddrj3fo9"},{"post_id":"ciznr66ka005q95bunsgnwkku","tag_id":"ciznr66ha000295buaciyiv3k","_id":"ciznr66kc005u95buwyd2g8mc"},{"post_id":"ciznr66kb005t95buh0n6ct4p","tag_id":"ciznr66ha000295buaciyiv3k","_id":"ciznr66kc005w95bup39untyq"},{"post_id":"ciznr66hs000k95buzhphtfkz","tag_id":"ciznr66k8005g95bullb7toog","_id":"ciznr66kc005y95bub6q7ppdl"},{"post_id":"ciznr66hs000k95buzhphtfkz","tag_id":"ciznr66ka005m95bumhe0j2gu","_id":"ciznr66kc005z95bul8hh23mj"},{"post_id":"ciznr66hs000k95buzhphtfkz","tag_id":"ciznr66hm000995buj2hs8itl","_id":"ciznr66kd006195bunipsku9q"},{"post_id":"ciznr66hs000k95buzhphtfkz","tag_id":"ciznr66i1001195bu5nfhbffs","_id":"ciznr66kd006295bu3mklipz8"},{"post_id":"ciznr66hs000k95buzhphtfkz","tag_id":"ciznr66kc005v95bu9szwbcbn","_id":"ciznr66kd006495buyf4uddyh"},{"post_id":"ciznr66ht000m95buiic3n9x9","tag_id":"ciznr66kc005x95bu2jois28f","_id":"ciznr66ke006695bued8ib1t9"},{"post_id":"ciznr66ht000m95buiic3n9x9","tag_id":"ciznr66kc006095bumxf9u9wx","_id":"ciznr66ke006795buddxf46go"},{"post_id":"ciznr66ht000m95buiic3n9x9","tag_id":"ciznr66hm000995buj2hs8itl","_id":"ciznr66ke006995buuwnwivqo"},{"post_id":"ciznr66ht000m95buiic3n9x9","tag_id":"ciznr66i1001195bu5nfhbffs","_id":"ciznr66ke006a95butzr0upv7"},{"post_id":"ciznr66hu000n95bulcmw8ne0","tag_id":"ciznr66kd006595buendrgkvs","_id":"ciznr66kf006e95butztu91mj"},{"post_id":"ciznr66hu000n95bulcmw8ne0","tag_id":"ciznr66ke006895bus491bzjw","_id":"ciznr66kf006f95bued8ytsq1"},{"post_id":"ciznr66hu000n95bulcmw8ne0","tag_id":"ciznr66ke006b95bumvtbn819","_id":"ciznr66kf006h95bubdd0xr8p"},{"post_id":"ciznr66hu000n95bulcmw8ne0","tag_id":"ciznr66hm000995buj2hs8itl","_id":"ciznr66kf006i95bujt4bectx"},{"post_id":"ciznr66hu000n95bulcmw8ne0","tag_id":"ciznr66i1001195bu5nfhbffs","_id":"ciznr66kf006k95bukt04mscs"},{"post_id":"ciznr66hv000p95buvfw85ta1","tag_id":"ciznr66ke006d95bu6ytnb01h","_id":"ciznr66kg006m95bupd01l6t5"},{"post_id":"ciznr66hv000p95buvfw85ta1","tag_id":"ciznr66ke006895bus491bzjw","_id":"ciznr66kg006n95buge0pytii"},{"post_id":"ciznr66hv000p95buvfw85ta1","tag_id":"ciznr66hm000995buj2hs8itl","_id":"ciznr66kg006p95buk8dparj9"},{"post_id":"ciznr66hv000p95buvfw85ta1","tag_id":"ciznr66i1001195bu5nfhbffs","_id":"ciznr66kg006q95buiroy2tqa"},{"post_id":"ciznr66hw000r95buthleclnn","tag_id":"ciznr66kf006l95bukmmi9bdq","_id":"ciznr66kh006u95bur4jd5lmr"},{"post_id":"ciznr66hw000r95buthleclnn","tag_id":"ciznr66kg006o95buogk3dh7b","_id":"ciznr66kh006v95bumjmxo364"},{"post_id":"ciznr66hw000r95buthleclnn","tag_id":"ciznr66kg006r95bupwo6owe7","_id":"ciznr66kh006x95bu2dkdve0p"},{"post_id":"ciznr66hw000r95buthleclnn","tag_id":"ciznr66iu002m95bu596i3ful","_id":"ciznr66kh006y95buxw62c1uz"},{"post_id":"ciznr66hw000r95buthleclnn","tag_id":"ciznr66hm000995buj2hs8itl","_id":"ciznr66kh007095buuzsn6l2f"},{"post_id":"ciznr66hw000u95buy1lcmv7f","tag_id":"ciznr66it002j95buitcnocnt","_id":"ciznr66kj007295buwp5olqeb"},{"post_id":"ciznr66hw000u95buy1lcmv7f","tag_id":"ciznr66jv004i95bucmhwqeut","_id":"ciznr66kj007395buzyxmr4nd"},{"post_id":"ciznr66hw000u95buy1lcmv7f","tag_id":"ciznr66kh006z95buds4pbzrm","_id":"ciznr66kj007595bu3t6i9ap5"},{"post_id":"ciznr66hx000w95buwx18ch7b","tag_id":"ciznr66kc005x95bu2jois28f","_id":"ciznr66kk007895buk7q726mj"},{"post_id":"ciznr66hx000w95buwx18ch7b","tag_id":"ciznr66kj007495but0jy9h26","_id":"ciznr66kk007995bu3i81ytdz"},{"post_id":"ciznr66hx000w95buwx18ch7b","tag_id":"ciznr66hm000995buj2hs8itl","_id":"ciznr66kk007b95bul9e1a85k"},{"post_id":"ciznr66hx000w95buwx18ch7b","tag_id":"ciznr66i1001195bu5nfhbffs","_id":"ciznr66kk007c95bujgj5osy6"},{"post_id":"ciznr66hy000z95buhlvj0htr","tag_id":"ciznr66kj007795buyebxcsos","_id":"ciznr66kl007h95bud16yslxq"},{"post_id":"ciznr66hy000z95buhlvj0htr","tag_id":"ciznr66kk007a95bu4nljq8wo","_id":"ciznr66km007i95bu1uvvqwsk"},{"post_id":"ciznr66hy000z95buhlvj0htr","tag_id":"ciznr66kk007d95bucf8eyzj7","_id":"ciznr66km007k95bu304ei4r0"},{"post_id":"ciznr66hy000z95buhlvj0htr","tag_id":"ciznr66kk007e95bu3hkmx9ru","_id":"ciznr66km007l95busimgtvut"},{"post_id":"ciznr66hy000z95buhlvj0htr","tag_id":"ciznr66hm000995buj2hs8itl","_id":"ciznr66km007n95bun93yhzik"},{"post_id":"ciznr66hy000z95buhlvj0htr","tag_id":"ciznr66kk007f95bunc3w8my5","_id":"ciznr66km007o95buqaoq39ib"},{"post_id":"ciznr66i0001095buyghr8fue","tag_id":"ciznr66kc005x95bu2jois28f","_id":"ciznr66kp007u95buazp559jh"},{"post_id":"ciznr66i0001095buyghr8fue","tag_id":"ciznr66km007j95buqb2k36i1","_id":"ciznr66kp007v95bup72rax1r"},{"post_id":"ciznr66i0001095buyghr8fue","tag_id":"ciznr66kk007a95bu4nljq8wo","_id":"ciznr66kp007x95bu8pwa4nys"},{"post_id":"ciznr66i0001095buyghr8fue","tag_id":"ciznr66kn007p95bujkdagbzd","_id":"ciznr66kp007y95bu4wu5ypmm"},{"post_id":"ciznr66i0001095buyghr8fue","tag_id":"ciznr66il002795bu9k8g1vmp","_id":"ciznr66kq008095buviu6x44q"},{"post_id":"ciznr66i0001095buyghr8fue","tag_id":"ciznr66kn007r95bui8en2cj0","_id":"ciznr66kq008195buakhnxm43"},{"post_id":"ciznr66i0001095buyghr8fue","tag_id":"ciznr66kn007s95bux5flyfqp","_id":"ciznr66kq008395budj0k9gmr"},{"post_id":"ciznr66i1001295bu4d1scxie","tag_id":"ciznr66ko007t95buzyrr1l40","_id":"ciznr66kq008495buebiprcns"},{"post_id":"ciznr66i1001295bu4d1scxie","tag_id":"ciznr66kp007w95buedavd3za","_id":"ciznr66kq008695bu7oo2ii5o"},{"post_id":"ciznr66i1001295bu4d1scxie","tag_id":"ciznr66hm000995buj2hs8itl","_id":"ciznr66kr008795butptp623l"},{"post_id":"ciznr66i1001295bu4d1scxie","tag_id":"ciznr66kp007z95buri6gw5hx","_id":"ciznr66kr008995bu1qej712q"},{"post_id":"ciznr66i2001395bu5vced4vv","tag_id":"ciznr66kp007w95buedavd3za","_id":"ciznr66kr008a95buzq3i9454"},{"post_id":"ciznr66i2001395bu5vced4vv","tag_id":"ciznr66hm000995buj2hs8itl","_id":"ciznr66kr008c95bu3vcid9zy"},{"post_id":"ciznr66i2001495but9y8s52k","tag_id":"ciznr66kp007w95buedavd3za","_id":"ciznr66ks008d95bumlqshdjx"},{"post_id":"ciznr66i2001495but9y8s52k","tag_id":"ciznr66i3001595buk4owbj85","_id":"ciznr66ks008e95buin04saa3"},{"post_id":"ciznr66i2001495but9y8s52k","tag_id":"ciznr66hm000995buj2hs8itl","_id":"ciznr66ks008g95bujvf7t3q2"},{"post_id":"ciznr66i3001695buvfokvb3l","tag_id":"ciznr66kr008b95buotnarym9","_id":"ciznr66ks008j95buujz9ymvj"},{"post_id":"ciznr66i3001695buvfokvb3l","tag_id":"ciznr66hm000995buj2hs8itl","_id":"ciznr66kt008k95bunh852rzi"},{"post_id":"ciznr66i3001695buvfokvb3l","tag_id":"ciznr66ks008f95bu1mfbedne","_id":"ciznr66kt008m95buulict4zg"},{"post_id":"ciznr66i3001695buvfokvb3l","tag_id":"ciznr66ks008h95bumhjnt68x","_id":"ciznr66kt008n95bu0wsk8hkd"},{"post_id":"ciznr66i3001695buvfokvb3l","tag_id":"ciznr66i1001195bu5nfhbffs","_id":"ciznr66kt008p95buvmka55tx"},{"post_id":"ciznr66i4001795buq99qptwo","tag_id":"ciznr66ks008i95buo4f1otuh","_id":"ciznr66ku008t95buy1cioqsx"},{"post_id":"ciznr66i4001795buq99qptwo","tag_id":"ciznr66kt008l95bu633cosgo","_id":"ciznr66ku008u95bu8y36wn4n"},{"post_id":"ciznr66i4001795buq99qptwo","tag_id":"ciznr66kt008o95bukgjwy9gn","_id":"ciznr66ku008w95bumjnftf36"},{"post_id":"ciznr66i4001795buq99qptwo","tag_id":"ciznr66kt008q95buskxb2two","_id":"ciznr66ku008x95buen5wb34t"},{"post_id":"ciznr66i4001795buq99qptwo","tag_id":"ciznr66kt008r95bu7u2dnfia","_id":"ciznr66ku008z95bucpdn62ym"},{"post_id":"ciznr66i7001995bu4pcdir3o","tag_id":"ciznr66kt008s95bufniml26p","_id":"ciznr66kw009395buqgqa0kdy"},{"post_id":"ciznr66i7001995bu4pcdir3o","tag_id":"ciznr66ku008v95bulzfmry2m","_id":"ciznr66kw009495bufwhjodpm"},{"post_id":"ciznr66i7001995bu4pcdir3o","tag_id":"ciznr66jv004i95bucmhwqeut","_id":"ciznr66kw009695butbul9zqp"},{"post_id":"ciznr66i7001995bu4pcdir3o","tag_id":"ciznr66kv009095buk7inhxax","_id":"ciznr66kw009795bubnhbqlka"},{"post_id":"ciznr66i7001995bu4pcdir3o","tag_id":"ciznr66it002j95buitcnocnt","_id":"ciznr66kx009995buwfvzc5o5"},{"post_id":"ciznr66i8001b95buyl0bwiy6","tag_id":"ciznr66kv009295bupykx7gwh","_id":"ciznr66kx009b95bus3hapyqw"},{"post_id":"ciznr66i8001b95buyl0bwiy6","tag_id":"ciznr66kw009595busuywxn30","_id":"ciznr66kx009c95buh7g5ui9h"},{"post_id":"ciznr66i8001b95buyl0bwiy6","tag_id":"ciznr66k7005b95bu2hg52wwl","_id":"ciznr66kx009e95bu839j5g10"},{"post_id":"ciznr66i9001e95buzs1hudyb","tag_id":"ciznr66kx009a95bu292gns16","_id":"ciznr66ky009h95buv1seaihv"},{"post_id":"ciznr66i9001e95buzs1hudyb","tag_id":"ciznr66kx009d95buzp705gxv","_id":"ciznr66ky009i95bufv1xo258"},{"post_id":"ciznr66i9001e95buzs1hudyb","tag_id":"ciznr66kx009f95bui7tyivpe","_id":"ciznr66ky009k95bufbtb4kfd"},{"post_id":"ciznr66i9001g95buu11i9cwp","tag_id":"ciznr66ky009g95bu8pis10i7","_id":"ciznr66kz009n95buzr9ie0ez"},{"post_id":"ciznr66i9001g95buu11i9cwp","tag_id":"ciznr66ky009j95buxiq31g1c","_id":"ciznr66kz009o95bucqkbdk44"},{"post_id":"ciznr66i9001g95buu11i9cwp","tag_id":"ciznr66ky009l95bu0ci3bfx1","_id":"ciznr66kz009q95buz05w2xu6"},{"post_id":"ciznr66ia001j95buy1830zvu","tag_id":"ciznr66hm000995buj2hs8itl","_id":"ciznr66l0009t95bu6wq2ynv9"},{"post_id":"ciznr66ia001j95buy1830zvu","tag_id":"ciznr66ky009m95buy8guhtwy","_id":"ciznr66l1009u95bu33axhnwj"},{"post_id":"ciznr66ia001j95buy1830zvu","tag_id":"ciznr66kz009p95bucmerqud8","_id":"ciznr66l1009w95bupatgbucf"},{"post_id":"ciznr66ia001j95buy1830zvu","tag_id":"ciznr66i1001195bu5nfhbffs","_id":"ciznr66l1009x95bud942i5da"},{"post_id":"ciznr66ia001j95buy1830zvu","tag_id":"ciznr66kz009r95bubc8jznws","_id":"ciznr66l1009z95buwpuesn18"},{"post_id":"ciznr66ic001l95bu5hx5j01r","tag_id":"ciznr66hm000995buj2hs8itl","_id":"ciznr66l400a595bu6pn7gv5e"},{"post_id":"ciznr66ic001l95bu5hx5j01r","tag_id":"ciznr66kz009s95buqpodh5ru","_id":"ciznr66l400a695bu05obm562"},{"post_id":"ciznr66ic001l95bu5hx5j01r","tag_id":"ciznr66l1009v95bujdycmwce","_id":"ciznr66l500a895bu6u1n7b3j"},{"post_id":"ciznr66ic001l95bu5hx5j01r","tag_id":"ciznr66l1009y95buz2vxo2i6","_id":"ciznr66l500a995bu1i2e00ht"},{"post_id":"ciznr66ic001l95bu5hx5j01r","tag_id":"ciznr66l100a095buf5u4bmst","_id":"ciznr66l500ab95buz6uo1jl4"},{"post_id":"ciznr66ic001l95bu5hx5j01r","tag_id":"ciznr66l100a195bucwltdx4c","_id":"ciznr66l500ac95bup7ii1ayo"},{"post_id":"ciznr66ic001l95bu5hx5j01r","tag_id":"ciznr66l200a295bugshpgg5w","_id":"ciznr66l500ae95buqv0a3jz0"},{"post_id":"ciznr66ic001l95bu5hx5j01r","tag_id":"ciznr66l300a395bui2ivw0ab","_id":"ciznr66l500af95buy98ftnkd"},{"post_id":"ciznr66id001n95buvo8cvlxw","tag_id":"ciznr66l300a495buvoozwrxd","_id":"ciznr66l600ah95bu6tybhfak"},{"post_id":"ciznr66id001n95buvo8cvlxw","tag_id":"ciznr66l400a795bu0sqo8i5v","_id":"ciznr66l600ai95buzp7fbwxj"},{"post_id":"ciznr66id001n95buvo8cvlxw","tag_id":"ciznr66hm000995buj2hs8itl","_id":"ciznr66l600ak95buc2nw0f4u"},{"post_id":"ciznr66id001n95buvo8cvlxw","tag_id":"ciznr66l500aa95bu2ypsvuo9","_id":"ciznr66l600al95buvzibn6hq"},{"post_id":"ciznr66id001n95buvo8cvlxw","tag_id":"ciznr66l500ad95bue7pe0qr9","_id":"ciznr66l600an95bu4l72o7jc"},{"post_id":"ciznr66id001p95bus4h4zkhj","tag_id":"ciznr66hm000995buj2hs8itl","_id":"ciznr66l700ar95buly9kcbd4"},{"post_id":"ciznr66id001p95bus4h4zkhj","tag_id":"ciznr66l500ag95burjeqdt0f","_id":"ciznr66l700as95buhpvlb05v"},{"post_id":"ciznr66id001p95bus4h4zkhj","tag_id":"ciznr66l600aj95bukx7gak2b","_id":"ciznr66l800au95bul8yjfcpc"},{"post_id":"ciznr66id001p95bus4h4zkhj","tag_id":"ciznr66l600am95buwfp2lx81","_id":"ciznr66l800av95bunh5e71k5"},{"post_id":"ciznr66id001p95bus4h4zkhj","tag_id":"ciznr66l600ao95bu1n0r77ce","_id":"ciznr66l900ax95bucppw2eql"},{"post_id":"ciznr66id001p95bus4h4zkhj","tag_id":"ciznr66l600ap95bugogkp5x4","_id":"ciznr66l900ay95buvowml69w"},{"post_id":"ciznr66ie001r95buwcq0e2my","tag_id":"ciznr66hm000995buj2hs8itl","_id":"ciznr66la00b095buotthouju"},{"post_id":"ciznr66ie001r95buwcq0e2my","tag_id":"ciznr66jd003n95bu9blbr08n","_id":"ciznr66la00b195bub6q7hkc8"},{"post_id":"ciznr66ie001r95buwcq0e2my","tag_id":"ciznr66l800at95bu8u5luvfv","_id":"ciznr66lb00b395bud8579hco"},{"post_id":"ciznr66ie001r95buwcq0e2my","tag_id":"ciznr66l800aw95buc3p6x6j0","_id":"ciznr66lb00b495butzi95iql"},{"post_id":"ciznr66if001u95budew4giox","tag_id":"ciznr66l900az95bu6whs1uw9","_id":"ciznr66lc00b995bukd0ufbtz"},{"post_id":"ciznr66if001u95budew4giox","tag_id":"ciznr66la00b295bu6mfm4a47","_id":"ciznr66lc00ba95bu7e5uu7wf"},{"post_id":"ciznr66if001u95budew4giox","tag_id":"ciznr66hm000995buj2hs8itl","_id":"ciznr66lc00bc95bul2zho4rg"},{"post_id":"ciznr66if001u95budew4giox","tag_id":"ciznr66lb00b595bu4i7dwqmy","_id":"ciznr66lc00bd95buxe3ly8i8"},{"post_id":"ciznr66if001u95budew4giox","tag_id":"ciznr66lb00b695buid9t0888","_id":"ciznr66lc00bf95buwytynesw"},{"post_id":"ciznr66if001u95budew4giox","tag_id":"ciznr66lb00b795bu0fsh5s0e","_id":"ciznr66lc00bg95buulbkxjlf"},{"post_id":"ciznr66ig001v95bufid3tnld","tag_id":"ciznr66hm000995buj2hs8itl","_id":"ciznr66ld00bi95buql53oner"},{"post_id":"ciznr66ig001v95bufid3tnld","tag_id":"ciznr66lb00b895bupim742a1","_id":"ciznr66ld00bj95buxjfbpdpj"},{"post_id":"ciznr66ig001v95bufid3tnld","tag_id":"ciznr66lc00bb95bu2molrkd7","_id":"ciznr66ld00bl95buwk1esowc"},{"post_id":"ciznr66ig001v95bufid3tnld","tag_id":"ciznr66lc00be95buiic10d5g","_id":"ciznr66ld00bm95buttty0p9o"},{"post_id":"ciznr66ig001x95bu60fqfgtz","tag_id":"ciznr66ld00bh95bu1qyudtoa","_id":"ciznr66le00bo95buweqthswd"},{"post_id":"ciznr66ig001x95bu60fqfgtz","tag_id":"ciznr66ld00bk95busggpyvly","_id":"ciznr66le00bp95bu61gmyq6z"},{"post_id":"ciznr66ig001x95bu60fqfgtz","tag_id":"ciznr66hm000995buj2hs8itl","_id":"ciznr66le00br95buvppcurwe"},{"post_id":"ciznr66ih001y95bu2x5yewla","tag_id":"ciznr66hm000995buj2hs8itl","_id":"ciznr66lf00bu95buamwdu7cy"},{"post_id":"ciznr66ih001y95bu2x5yewla","tag_id":"ciznr66i1001195bu5nfhbffs","_id":"ciznr66lf00bv95bu4p9dfnod"},{"post_id":"ciznr66ih001y95bu2x5yewla","tag_id":"ciznr66ld00bn95bu1renvbls","_id":"ciznr66lf00bx95bul58rqkhf"},{"post_id":"ciznr66ih001y95bu2x5yewla","tag_id":"ciznr66lb00b895bupim742a1","_id":"ciznr66lg00by95butxyip0pw"},{"post_id":"ciznr66ih001y95bu2x5yewla","tag_id":"ciznr66le00bs95buw6titbik","_id":"ciznr66lg00c095bui6ja1dy7"},{"post_id":"ciznr66ih002095bu6glvaas6","tag_id":"ciznr66hm000995buj2hs8itl","_id":"ciznr66lh00c495bua5cscqy0"},{"post_id":"ciznr66ih002095bu6glvaas6","tag_id":"ciznr66lf00bt95bubpwq11r6","_id":"ciznr66lh00c595buqykcp4d9"},{"post_id":"ciznr66ih002095bu6glvaas6","tag_id":"ciznr66lf00bw95buq9mdcm8o","_id":"ciznr66lh00c795buan9y7wwt"},{"post_id":"ciznr66ih002095bu6glvaas6","tag_id":"ciznr66lg00bz95buoyz393i9","_id":"ciznr66lh00c895bux7hcnh2l"},{"post_id":"ciznr66ih002095bu6glvaas6","tag_id":"ciznr66lg00c195bumz3maxqo","_id":"ciznr66li00ca95buxm1n1ss1"},{"post_id":"ciznr66ih002095bu6glvaas6","tag_id":"ciznr66lg00c295bu1gjop5so","_id":"ciznr66li00cb95bu3pdgwemo"},{"post_id":"ciznr66ii002195bub29bc5xi","tag_id":"ciznr66lg00c395bu6efek6hk","_id":"ciznr66li00cd95bu6zeczvz1"},{"post_id":"ciznr66ii002195bub29bc5xi","tag_id":"ciznr66lh00c695bu0x4sqp1a","_id":"ciznr66li00ce95bucbulumle"},{"post_id":"ciznr66ii002195bub29bc5xi","tag_id":"ciznr66lh00c995buy5300p23","_id":"ciznr66li00cg95buz2j4buk6"},{"post_id":"ciznr66ij002395bunbmkhszk","tag_id":"ciznr66li00cc95buecj0y4t1","_id":"ciznr66lk00ck95buw8mkvl2g"},{"post_id":"ciznr66ij002395bunbmkhszk","tag_id":"ciznr66li00cf95buk1chinii","_id":"ciznr66lk00cl95buj3yagb31"},{"post_id":"ciznr66ij002395bunbmkhszk","tag_id":"ciznr66li00ch95bucwcov3js","_id":"ciznr66lk00cn95bumqpdrl4x"},{"post_id":"ciznr66ij002395bunbmkhszk","tag_id":"ciznr66lj00ci95bu0dlw1653","_id":"ciznr66lk00co95bubddz01pb"},{"post_id":"ciznr66ij002395bunbmkhszk","tag_id":"ciznr66hm000995buj2hs8itl","_id":"ciznr66lk00cq95buwzrx9x8w"},{"post_id":"ciznr66ik002595buqrers26m","tag_id":"ciznr66hm000995buj2hs8itl","_id":"ciznr66ll00ct95buvknkflg9"},{"post_id":"ciznr66ik002595buqrers26m","tag_id":"ciznr66lj00cj95buq4jli5kl","_id":"ciznr66ll00cu95buk4n9sxrr"},{"post_id":"ciznr66ik002595buqrers26m","tag_id":"ciznr66lk00cm95bua5apnttr","_id":"ciznr66lm00cw95buu63ylz08"},{"post_id":"ciznr66ik002595buqrers26m","tag_id":"ciznr66lk00cp95buhcw6brsi","_id":"ciznr66lm00cx95bu1x70icq4"},{"post_id":"ciznr66ik002595buqrers26m","tag_id":"ciznr66lk00cr95buvaodabmg","_id":"ciznr66ln00cz95bupy8ytp1k"},{"post_id":"ciznr66il002895bumaroyatw","tag_id":"ciznr66ll00cs95bu7uyquu04","_id":"ciznr66lo00d295buwkyi6q7i"},{"post_id":"ciznr66il002895bumaroyatw","tag_id":"ciznr66ll00cv95budzjmlfmb","_id":"ciznr66lo00d395bu96na61p9"},{"post_id":"ciznr66il002895bumaroyatw","tag_id":"ciznr66lm00cy95buxfx9pm1d","_id":"ciznr66lp00d595bu5x0e9w24"},{"post_id":"ciznr66il002895bumaroyatw","tag_id":"ciznr66ln00d095buhuqlbman","_id":"ciznr66lp00d695buo4rxspnh"},{"post_id":"ciznr66im002a95butjqa1oyc","tag_id":"ciznr66l400a795bu0sqo8i5v","_id":"ciznr66lp00d895bunbzp5dhy"},{"post_id":"ciznr66im002a95butjqa1oyc","tag_id":"ciznr66lo00d495buic2aeifm","_id":"ciznr66lp00d995bupnrxcndg"},{"post_id":"ciznr66io002c95buqm9fzaf2","tag_id":"ciznr66lp00d795bu59wbxztp","_id":"ciznr66lq00dc95burb7m457n"},{"post_id":"ciznr66io002c95buqm9fzaf2","tag_id":"ciznr66hm000995buj2hs8itl","_id":"ciznr66lq00dd95bu5g71l6nf"},{"post_id":"ciznr66io002c95buqm9fzaf2","tag_id":"ciznr66lp00da95bug2kuxhx6","_id":"ciznr66lq00df95buoxrkxv0k"},{"post_id":"ciznr66ip002e95busbg6tc2b","tag_id":"ciznr66hm000995buj2hs8itl","_id":"ciznr66lr00di95buh8n1utng"},{"post_id":"ciznr66ip002e95busbg6tc2b","tag_id":"ciznr66lq00db95buqe6bad77","_id":"ciznr66lr00dj95buf5vrrdds"},{"post_id":"ciznr66ip002e95busbg6tc2b","tag_id":"ciznr66j9003f95buzxwwxoed","_id":"ciznr66ls00dl95bujuk8gt0h"},{"post_id":"ciznr66ip002e95busbg6tc2b","tag_id":"ciznr66lr00dg95buozk6qx8h","_id":"ciznr66ls00dm95buzyl0hm0m"},{"post_id":"ciznr66ir002f95bumdixo0dw","tag_id":"ciznr66lr00dh95bu89g1zi97","_id":"ciznr66lu00ds95bu5if2pdxy"},{"post_id":"ciznr66ir002f95bumdixo0dw","tag_id":"ciznr66lr00dk95bu8vosaea1","_id":"ciznr66lu00dt95bugcfg11y0"},{"post_id":"ciznr66ir002f95bumdixo0dw","tag_id":"ciznr66ls00dn95bu386q3jff","_id":"ciznr66lu00dv95buteqkaj0w"},{"post_id":"ciznr66ir002f95bumdixo0dw","tag_id":"ciznr66ls00do95bu0krrri1y","_id":"ciznr66lu00dw95bu9tnbq8ks"},{"post_id":"ciznr66ir002f95bumdixo0dw","tag_id":"ciznr66ls00dp95bufkh74wd4","_id":"ciznr66lu00dy95bu5wvrge99"},{"post_id":"ciznr66ir002f95bumdixo0dw","tag_id":"ciznr66lt00dq95bu10z050p2","_id":"ciznr66lu00dz95but3krv4vr"},{"post_id":"ciznr66ir002h95buxodfqeaw","tag_id":"ciznr66lt00dr95budqx7fjm0","_id":"ciznr66lv00e295bujatk1vqu"},{"post_id":"ciznr66ir002h95buxodfqeaw","tag_id":"ciznr66lu00du95buzaermrjk","_id":"ciznr66lv00e395buavxt45im"},{"post_id":"ciznr66ir002h95buxodfqeaw","tag_id":"ciznr66lu00dx95buyqfkg763","_id":"ciznr66lv00e595bupg78b2mr"},{"post_id":"ciznr66ir002h95buxodfqeaw","tag_id":"ciznr66lu00e095buzrtt8c9v","_id":"ciznr66lv00e695bu2zlh0z6s"},{"post_id":"ciznr66is002i95buw4jxwza3","tag_id":"ciznr66lu00e195bubsc1uh36","_id":"ciznr66lx00eb95bugqo72fqj"},{"post_id":"ciznr66is002i95buw4jxwza3","tag_id":"ciznr66lv00e495bu3xh4aqtq","_id":"ciznr66lx00ec95buf4phu471"},{"post_id":"ciznr66is002i95buw4jxwza3","tag_id":"ciznr66lv00e795buc8vsmxes","_id":"ciznr66lx00ee95buthpqjcfk"},{"post_id":"ciznr66is002i95buw4jxwza3","tag_id":"ciznr66lw00e895buzbwjenc7","_id":"ciznr66lx00ef95buwtoetiw6"},{"post_id":"ciznr66is002i95buw4jxwza3","tag_id":"ciznr66lw00e995buymo3zdte","_id":"ciznr66ly00eh95buq7577o5e"},{"post_id":"ciznr66it002k95bu5cgvublj","tag_id":"ciznr66hm000995buj2hs8itl","_id":"ciznr66m000em95budzrdz3be"},{"post_id":"ciznr66it002k95bu5cgvublj","tag_id":"ciznr66lw00ea95buw3tkpls2","_id":"ciznr66m000en95bulw53smjl"},{"post_id":"ciznr66it002k95bu5cgvublj","tag_id":"ciznr66lx00ed95bubxlvyrgz","_id":"ciznr66m000ep95bul5wu7hhd"},{"post_id":"ciznr66it002k95bu5cgvublj","tag_id":"ciznr66lx00eg95bujg5508ui","_id":"ciznr66m000eq95bu3wnx2kpj"},{"post_id":"ciznr66it002k95bu5cgvublj","tag_id":"ciznr66ly00ei95bujqc9p0n0","_id":"ciznr66m000es95bu76dshyeb"},{"post_id":"ciznr66it002k95bu5cgvublj","tag_id":"ciznr66ly00ej95bu4q4a92qu","_id":"ciznr66m000et95bu028p4nl8"},{"post_id":"ciznr66it002k95bu5cgvublj","tag_id":"ciznr66ly00ek95buz9qun7c9","_id":"ciznr66m100ev95bup3jbsc0s"},{"post_id":"ciznr66iu002l95bulbjiz94i","tag_id":"ciznr66hm000995buj2hs8itl","_id":"ciznr66m200ey95bu0n1n8x37"},{"post_id":"ciznr66iu002l95bulbjiz94i","tag_id":"ciznr66lz00el95bus5da1dwz","_id":"ciznr66m200ez95bu3dx64a9q"},{"post_id":"ciznr66iu002l95bulbjiz94i","tag_id":"ciznr66m000eo95bu5x04vq6f","_id":"ciznr66m200f195bumdo182zz"},{"post_id":"ciznr66iu002l95bulbjiz94i","tag_id":"ciznr66m000er95bulh6q6dy8","_id":"ciznr66m200f295buutxt94ur"},{"post_id":"ciznr66iu002l95bulbjiz94i","tag_id":"ciznr66m000eu95bumfhv1cw2","_id":"ciznr66m200f495buo8y3buvz"},{"post_id":"ciznr66iu002l95bulbjiz94i","tag_id":"ciznr66m100ew95bur1v0k4dl","_id":"ciznr66m200f595bu14ixh9r3"},{"post_id":"ciznr66iv002n95bukse6pr9y","tag_id":"ciznr66m100ex95bu14gxlyka","_id":"ciznr66m400f895bu01crxuk9"},{"post_id":"ciznr66iv002n95bukse6pr9y","tag_id":"ciznr66m200f095buu8saljqh","_id":"ciznr66m400f995bu0rodb6q8"},{"post_id":"ciznr66iv002n95bukse6pr9y","tag_id":"ciznr66m200f395bu99wc688w","_id":"ciznr66m400fb95buuy0si3y4"},{"post_id":"ciznr66iv002n95bukse6pr9y","tag_id":"ciznr66m300f695buqke90nbg","_id":"ciznr66m400fc95bupz3106eu"},{"post_id":"ciznr66iw002p95bub8eoj5ym","tag_id":"ciznr66m300f795bucfr8bhe9","_id":"ciznr66md00ff95bufx1y0hwp"},{"post_id":"ciznr66iw002p95bub8eoj5ym","tag_id":"ciznr66m400fa95buwsv7pu09","_id":"ciznr66md00fg95buymq6oima"},{"post_id":"ciznr66iw002p95bub8eoj5ym","tag_id":"ciznr66m400fd95buoqsknotf","_id":"ciznr66me00fi95bu4t3v2vsn"},{"post_id":"ciznr66iw002s95bupw1dte9q","tag_id":"ciznr66m400fe95bu318uwtn7","_id":"ciznr66me00fk95bued7vyegh"},{"post_id":"ciznr66iw002s95bupw1dte9q","tag_id":"ciznr66md00fh95butuwhx9gl","_id":"ciznr66me00fl95buw1xibltg"},{"post_id":"ciznr66ix002u95bunbnw3e8i","tag_id":"ciznr66hm000995buj2hs8itl","_id":"ciznr66mi00fu95bulm1jlea9"},{"post_id":"ciznr66ix002u95bunbnw3e8i","tag_id":"ciznr66me00fj95bukv6agmyj","_id":"ciznr66mi00fv95bux7jg7wgr"},{"post_id":"ciznr66ix002u95bunbnw3e8i","tag_id":"ciznr66kk007e95bu3hkmx9ru","_id":"ciznr66mi00fx95bu1rmnoqzu"},{"post_id":"ciznr66ix002u95bunbnw3e8i","tag_id":"ciznr66mf00fn95bu8ay1kr6j","_id":"ciznr66mi00fy95bu4jc33mrf"},{"post_id":"ciznr66ix002u95bunbnw3e8i","tag_id":"ciznr66mf00fo95bua9bfytej","_id":"ciznr66mi00g095bui7w9cnpl"},{"post_id":"ciznr66ix002u95bunbnw3e8i","tag_id":"ciznr66mf00fp95bu69oz2qv9","_id":"ciznr66mi00g195bulgjkzsgf"},{"post_id":"ciznr66ix002u95bunbnw3e8i","tag_id":"ciznr66mg00fq95butvzzaw7t","_id":"ciznr66mi00g395bun3zyl953"},{"post_id":"ciznr66ix002u95bunbnw3e8i","tag_id":"ciznr66mg00fr95bu8dtephj2","_id":"ciznr66mi00g495bupao8uslv"},{"post_id":"ciznr66ix002u95bunbnw3e8i","tag_id":"ciznr66mg00fs95bujerfj6eu","_id":"ciznr66mj00g595bun1d78xsr"},{"post_id":"ciznr66ix002w95buz2jsxi2z","tag_id":"ciznr66i1001195bu5nfhbffs","_id":"ciznr66mj00g795bu2s5yfmyr"},{"post_id":"ciznr66ix002w95buz2jsxi2z","tag_id":"ciznr66hm000995buj2hs8itl","_id":"ciznr66mk00g895buqnya7jqv"},{"post_id":"ciznr66ix002w95buz2jsxi2z","tag_id":"ciznr66mg00ft95burld71whi","_id":"ciznr66mk00ga95buxiybijs5"},{"post_id":"ciznr66ix002w95buz2jsxi2z","tag_id":"ciznr66mi00fw95bu644c9kui","_id":"ciznr66mk00gb95bu8cqvk17p"},{"post_id":"ciznr66ix002w95buz2jsxi2z","tag_id":"ciznr66mi00fz95bu1h6109oh","_id":"ciznr66mk00gd95bu084dtth7"},{"post_id":"ciznr66ix002w95buz2jsxi2z","tag_id":"ciznr66mi00g295bumsgwev2z","_id":"ciznr66mk00ge95buegvrm9s6"},{"post_id":"ciznr66ix002w95buz2jsxi2z","tag_id":"ciznr66it002j95buitcnocnt","_id":"ciznr66mk00gg95bupfnn3qb7"},{"post_id":"ciznr66iz002z95bust0zp1mw","tag_id":"ciznr66mj00g695bu1gdsoe2v","_id":"ciznr66ml00gj95bu9zsny63k"},{"post_id":"ciznr66iz002z95bust0zp1mw","tag_id":"ciznr66mk00g995but2t01ptn","_id":"ciznr66mm00gk95buku8edvki"},{"post_id":"ciznr66iz002z95bust0zp1mw","tag_id":"ciznr66mk00gc95butv88i97d","_id":"ciznr66mm00gm95bus9bydwso"},{"post_id":"ciznr66iz002z95bust0zp1mw","tag_id":"ciznr66mk00gf95butmr2ew9l","_id":"ciznr66mm00gn95bu4ns188y7"},{"post_id":"ciznr66iz002z95bust0zp1mw","tag_id":"ciznr66ml00gh95bu4ybjh389","_id":"ciznr66mn00gp95bu8kef3vkw"},{"post_id":"ciznr66j0003095bu12q4csb7","tag_id":"ciznr66hm000995buj2hs8itl","_id":"ciznr66mn00gq95bu5givbnpq"},{"post_id":"ciznr66j0003095bu12q4csb7","tag_id":"ciznr66il002795bu9k8g1vmp","_id":"ciznr66mn00gs95buf9qdju2r"},{"post_id":"ciznr66j0003095bu12q4csb7","tag_id":"ciznr66ml00gi95bu99k51mbw","_id":"ciznr66mn00gt95bu074knek9"},{"post_id":"ciznr66j1003395buvdd8yqhp","tag_id":"ciznr66mm00gl95buyt2d9559","_id":"ciznr66mo00gw95bu3o9tah4x"},{"post_id":"ciznr66j1003395buvdd8yqhp","tag_id":"ciznr66kk007e95bu3hkmx9ru","_id":"ciznr66mo00gx95burbiaf66c"},{"post_id":"ciznr66j1003395buvdd8yqhp","tag_id":"ciznr66mn00gr95bu9ljazi8d","_id":"ciznr66mo00gz95buzmns1vod"},{"post_id":"ciznr66j1003395buvdd8yqhp","tag_id":"ciznr66mn00gu95bucuuowef0","_id":"ciznr66mo00h095bulb06symr"},{"post_id":"ciznr66j2003595bugitv0edr","tag_id":"ciznr66mn00gv95bucbdabssf","_id":"ciznr66mq00h495buptqn00cp"},{"post_id":"ciznr66j2003595bugitv0edr","tag_id":"ciznr66mo00gy95bursbe8is1","_id":"ciznr66mq00h595buyzbc8n2k"},{"post_id":"ciznr66j2003595bugitv0edr","tag_id":"ciznr66mo00h195buar9em9k5","_id":"ciznr66mq00h795bulpl71nj9"},{"post_id":"ciznr66j2003595bugitv0edr","tag_id":"ciznr66mp00h295buslba48fs","_id":"ciznr66mq00h895bumci1suyx"},{"post_id":"ciznr66j3003895bubyht23vs","tag_id":"ciznr66l900az95bu6whs1uw9","_id":"ciznr66ms00hd95buusi9znwc"},{"post_id":"ciznr66j3003895bubyht23vs","tag_id":"ciznr66mq00h695bungnwa9h3","_id":"ciznr66ms00he95buv70rsbu0"},{"post_id":"ciznr66j3003895bubyht23vs","tag_id":"ciznr66mq00h995butralo4s0","_id":"ciznr66ms00hg95bu7tnbdwrj"},{"post_id":"ciznr66j3003895bubyht23vs","tag_id":"ciznr66mr00ha95bulbxbyp20","_id":"ciznr66ms00hh95bu4dky0ze0"},{"post_id":"ciznr66j3003895bubyht23vs","tag_id":"ciznr66mr00hb95buculew333","_id":"ciznr66mt00hj95bujtp152sg"},{"post_id":"ciznr66j6003995bu1tun2kr0","tag_id":"ciznr66mr00hc95bupobktd0z","_id":"ciznr66mu00hm95bunp7pra4f"},{"post_id":"ciznr66j6003995bu1tun2kr0","tag_id":"ciznr66ms00hf95bupisocucc","_id":"ciznr66mu00hn95buoj5c0mwz"},{"post_id":"ciznr66j6003995bu1tun2kr0","tag_id":"ciznr66hm000995buj2hs8itl","_id":"ciznr66mu00hp95bu21h1eig4"},{"post_id":"ciznr66j6003995bu1tun2kr0","tag_id":"ciznr66ms00hi95bu5pie5hcz","_id":"ciznr66mu00hq95buw4so9bvc"},{"post_id":"ciznr66j6003995bu1tun2kr0","tag_id":"ciznr66mt00hk95buph9jim7m","_id":"ciznr66mv00hs95buiu1472ck"},{"post_id":"ciznr66j7003b95buv8br3dnm","tag_id":"ciznr66kt008o95bukgjwy9gn","_id":"ciznr66mw00hv95bus9icf8sm"},{"post_id":"ciznr66j7003b95buv8br3dnm","tag_id":"ciznr66kt008r95bu7u2dnfia","_id":"ciznr66mw00hw95bumc0wegru"},{"post_id":"ciznr66j7003b95buv8br3dnm","tag_id":"ciznr66mu00hr95bu36edjyn6","_id":"ciznr66mw00hy95bupm8pvj5h"},{"post_id":"ciznr66j7003b95buv8br3dnm","tag_id":"ciznr66mv00ht95burvaw6s6w","_id":"ciznr66mw00hz95bu410atu7b"},{"post_id":"ciznr66j8003d95buyn09s0hk","tag_id":"ciznr66mv00hu95bumkr3fj3i","_id":"ciznr66my00i495buagdgo781"},{"post_id":"ciznr66j8003d95buyn09s0hk","tag_id":"ciznr66mw00hx95bupkkdj1ms","_id":"ciznr66mz00i595bu60ds5kwk"},{"post_id":"ciznr66j8003d95buyn09s0hk","tag_id":"ciznr66jd003n95bu9blbr08n","_id":"ciznr66mz00i795bur6iprd8c"},{"post_id":"ciznr66j8003d95buyn09s0hk","tag_id":"ciznr66mx00i195bupx61sxjg","_id":"ciznr66mz00i895bu40mfralg"},{"post_id":"ciznr66j8003d95buyn09s0hk","tag_id":"ciznr66mx00i295burgtpaomo","_id":"ciznr66mz00ia95bu8cowgrpp"},{"post_id":"ciznr66j9003g95bu68iabou6","tag_id":"ciznr66my00i395bunzxf6jmu","_id":"ciznr66n100ie95bu7y5dawfc"},{"post_id":"ciznr66j9003g95bu68iabou6","tag_id":"ciznr66mz00i695buoy2mllf8","_id":"ciznr66n100if95bu9l9111ty"},{"post_id":"ciznr66j9003g95bu68iabou6","tag_id":"ciznr66mz00i995bupllrbqw5","_id":"ciznr66n100ih95bugs964ew0"},{"post_id":"ciznr66j9003g95bu68iabou6","tag_id":"ciznr66mz00ib95buaqm2ewoc","_id":"ciznr66n100ii95buhzj6e0ei"},{"post_id":"ciznr66j9003g95bu68iabou6","tag_id":"ciznr66n000ic95bu56142l9g","_id":"ciznr66n100ik95buqfjipu4x"},{"post_id":"ciznr66ja003i95budeo3rrc0","tag_id":"ciznr66n000id95bubewajupg","_id":"ciznr66n400iq95bu1a9f380b"},{"post_id":"ciznr66ja003i95budeo3rrc0","tag_id":"ciznr66n100ig95buhvhx1d5k","_id":"ciznr66n400ir95buz02vkmks"},{"post_id":"ciznr66ja003i95budeo3rrc0","tag_id":"ciznr66n100ij95bund8kze1h","_id":"ciznr66n500it95bu2ojis57d"},{"post_id":"ciznr66ja003i95budeo3rrc0","tag_id":"ciznr66n200il95bu2pe7bl2g","_id":"ciznr66n500iu95buwdowry5d"},{"post_id":"ciznr66ja003i95budeo3rrc0","tag_id":"ciznr66m200f395bu99wc688w","_id":"ciznr66n500iw95buoj8ndj1n"},{"post_id":"ciznr66ja003i95budeo3rrc0","tag_id":"ciznr66n200in95bumifavu2q","_id":"ciznr66n500ix95buyhyy4zn2"},{"post_id":"ciznr66ja003i95budeo3rrc0","tag_id":"ciznr66n300io95bu4ojlvz11","_id":"ciznr66n500iz95buwthn3vdp"},{"post_id":"ciznr66jb003j95buqmeoyhsa","tag_id":"ciznr66il002795bu9k8g1vmp","_id":"ciznr66n600j095buu37knx1q"},{"post_id":"ciznr66jb003j95buqmeoyhsa","tag_id":"ciznr66hm000995buj2hs8itl","_id":"ciznr66n600j295bun63x09w1"},{"post_id":"ciznr66jb003j95buqmeoyhsa","tag_id":"ciznr66n300ip95buqvt8v0vl","_id":"ciznr66n600j395buzbb8jgki"},{"post_id":"ciznr66jb003j95buqmeoyhsa","tag_id":"ciznr66n400is95bujocr76r6","_id":"ciznr66n600j495bugd95gmqi"},{"post_id":"ciznr66jb003j95buqmeoyhsa","tag_id":"ciznr66n500iv95buhu3s8uul","_id":"ciznr66n700j695bucf6c27z6"},{"post_id":"ciznr66jb003l95buiedairze","tag_id":"ciznr66kt008r95bu7u2dnfia","_id":"ciznr66n800j995buciti9839"},{"post_id":"ciznr66jb003l95buiedairze","tag_id":"ciznr66n600j195buxvjb47dx","_id":"ciznr66n800ja95bu9xnluydw"},{"post_id":"ciznr66jb003l95buiedairze","tag_id":"ciznr66n700j595buajg38hb4","_id":"ciznr66n800jc95buawog78xz"},{"post_id":"ciznr66jb003l95buiedairze","tag_id":"ciznr66n700j795bunwgt4zl1","_id":"ciznr66n800jd95bua3ad6iel"},{"post_id":"ciznr66jc003m95bu3lt3c18b","tag_id":"ciznr66n700j895buqiyvfzmc","_id":"ciznr66na00jh95bumjazbu7c"},{"post_id":"ciznr66jc003m95bu3lt3c18b","tag_id":"ciznr66n800jb95buykkrc5ht","_id":"ciznr66na00ji95bubjiyj3pm"},{"post_id":"ciznr66jc003m95bu3lt3c18b","tag_id":"ciznr66n800je95budq4q1kiu","_id":"ciznr66na00jk95bu0myaa366"},{"post_id":"ciznr66jc003m95bu3lt3c18b","tag_id":"ciznr66n900jf95bu9fy0sp6c","_id":"ciznr66na00jl95bu1jnu74lk"},{"post_id":"ciznr66jd003o95bujgqa5upg","tag_id":"ciznr66n900jg95buzl1054l8","_id":"ciznr66nc00jp95buyoqqz945"},{"post_id":"ciznr66jd003o95bujgqa5upg","tag_id":"ciznr66na00jj95bu0f3azryp","_id":"ciznr66nc00jq95buhu5qwy5f"},{"post_id":"ciznr66jd003o95bujgqa5upg","tag_id":"ciznr66na00jm95bu0mgzl5nb","_id":"ciznr66nc00js95budrxrvyc7"},{"post_id":"ciznr66jd003o95bujgqa5upg","tag_id":"ciznr66nb00jn95buy3fkhjc4","_id":"ciznr66nc00jt95bue362gs9r"},{"post_id":"ciznr66je003p95bulzepswfe","tag_id":"ciznr66n700j895buqiyvfzmc","_id":"ciznr66ng00jy95bu6x2y6n82"},{"post_id":"ciznr66je003p95bulzepswfe","tag_id":"ciznr66nc00jr95buhldn9r87","_id":"ciznr66ng00jz95bum87afzqh"},{"post_id":"ciznr66je003p95bulzepswfe","tag_id":"ciznr66nc00ju95buvg5lv8gs","_id":"ciznr66ng00k195buuoun2kiw"},{"post_id":"ciznr66je003p95bulzepswfe","tag_id":"ciznr66kg006r95bupwo6owe7","_id":"ciznr66ng00k295buxpquctse"},{"post_id":"ciznr66je003p95bulzepswfe","tag_id":"ciznr66it002j95buitcnocnt","_id":"ciznr66ng00k495bue5nncyr0"},{"post_id":"ciznr66je003p95bulzepswfe","tag_id":"ciznr66i1001195bu5nfhbffs","_id":"ciznr66ng00k595bufpiqb93x"},{"post_id":"ciznr66je003p95bulzepswfe","tag_id":"ciznr66n900jf95bu9fy0sp6c","_id":"ciznr66nh00k795budz4mybny"},{"post_id":"ciznr66jf003r95buwongbq9e","tag_id":"ciznr66hm000995buj2hs8itl","_id":"ciznr66nj00ka95bum4ri9xj7"},{"post_id":"ciznr66jf003r95buwongbq9e","tag_id":"ciznr66l600ap95bugogkp5x4","_id":"ciznr66nj00kb95buxbl33fdx"},{"post_id":"ciznr66jf003r95buwongbq9e","tag_id":"ciznr66ng00k095buwe4hkgtw","_id":"ciznr66nj00kd95bunnt9bbpp"},{"post_id":"ciznr66jf003r95buwongbq9e","tag_id":"ciznr66ng00k395bu3pt3sz5k","_id":"ciznr66nj00ke95buscru9090"},{"post_id":"ciznr66jf003r95buwongbq9e","tag_id":"ciznr66nh00k695buyz62rqrn","_id":"ciznr66nk00kg95bulg2g9nbp"},{"post_id":"ciznr66jf003r95buwongbq9e","tag_id":"ciznr66nh00k895bua0jk7cwf","_id":"ciznr66nk00kh95bu5p160nga"},{"post_id":"ciznr66jf003t95buseocwiri","tag_id":"ciznr66nh00k995buwe11yivk","_id":"ciznr66nl00kk95bu8s22bkxy"},{"post_id":"ciznr66jf003t95buseocwiri","tag_id":"ciznr66nj00kc95buui08il3e","_id":"ciznr66nl00kl95buup1pe8tn"},{"post_id":"ciznr66jf003t95buseocwiri","tag_id":"ciznr66nj00kf95bufus1h97m","_id":"ciznr66nl00kn95bunzroi5f9"},{"post_id":"ciznr66jf003t95buseocwiri","tag_id":"ciznr66nk00ki95bua0xtb5qu","_id":"ciznr66nl00ko95bu6dwist4w"},{"post_id":"ciznr66jg003w95bumko59a9e","tag_id":"ciznr66hm000995buj2hs8itl","_id":"ciznr66nn00ks95buvlejevxb"},{"post_id":"ciznr66jg003w95bumko59a9e","tag_id":"ciznr66nk00kj95buteed420r","_id":"ciznr66nn00kt95bu7jy1tsoa"},{"post_id":"ciznr66jg003w95bumko59a9e","tag_id":"ciznr66hm000995buj2hs8itl","_id":"ciznr66nn00kv95bukccgncva"},{"post_id":"ciznr66jg003w95bumko59a9e","tag_id":"ciznr66nl00km95bu79moefx6","_id":"ciznr66no00kw95bu7gj8ctk3"},{"post_id":"ciznr66jg003w95bumko59a9e","tag_id":"ciznr66nl00kp95bu0vtn3780","_id":"ciznr66no00ky95buvz99h7jb"},{"post_id":"ciznr66jg003w95bumko59a9e","tag_id":"ciznr66nm00kq95bur236qmgx","_id":"ciznr66no00kz95bus5d0ffsq"},{"post_id":"ciznr66jg003y95buz1i4k8q0","tag_id":"ciznr66nm00kr95buuaq9z77y","_id":"ciznr66nq00l395buiqz0ehog"},{"post_id":"ciznr66jg003y95buz1i4k8q0","tag_id":"ciznr66nn00ku95bu644gomad","_id":"ciznr66nq00l495bu6ym67xu2"},{"post_id":"ciznr66jg003y95buz1i4k8q0","tag_id":"ciznr66no00kx95bu6axdi35y","_id":"ciznr66nr00l695bu6cecd3yz"},{"post_id":"ciznr66jg003y95buz1i4k8q0","tag_id":"ciznr66no00l095bueytop1go","_id":"ciznr66nr00l795buc4q1g2sl"},{"post_id":"ciznr66jg003y95buz1i4k8q0","tag_id":"ciznr66lu00e095buzrtt8c9v","_id":"ciznr66nr00l995bu65dcpdjq"},{"post_id":"ciznr66jh004095but6r9bygo","tag_id":"ciznr66hm000995buj2hs8itl","_id":"ciznr66nr00la95budnu28126"},{"post_id":"ciznr66jh004095but6r9bygo","tag_id":"ciznr66np00l295buwxzyhsob","_id":"ciznr66ns00lc95buiuz3dwla"},{"post_id":"ciznr66ji004395bu9htstkj6","tag_id":"ciznr66nq00l595buni6m1zl8","_id":"ciznr66nt00lf95bu77juemxx"},{"post_id":"ciznr66ji004395bu9htstkj6","tag_id":"ciznr66l600ap95bugogkp5x4","_id":"ciznr66nt00lg95bu67ih40u4"},{"post_id":"ciznr66ji004395bu9htstkj6","tag_id":"ciznr66nr00lb95buy99drr0s","_id":"ciznr66nu00li95buuctejaaz"},{"post_id":"ciznr66ji004395bu9htstkj6","tag_id":"ciznr66ns00ld95bu64zawvzy","_id":"ciznr66nu00lj95bu90byeh5j"},{"post_id":"ciznr66jj004495bucikn7fzx","tag_id":"ciznr66nq00l595buni6m1zl8","_id":"ciznr66nw00ln95buyrxe1pba"},{"post_id":"ciznr66jj004495bucikn7fzx","tag_id":"ciznr66l600ap95bugogkp5x4","_id":"ciznr66nw00lo95bu6wbwfbu1"},{"post_id":"ciznr66jj004495bucikn7fzx","tag_id":"ciznr66nr00lb95buy99drr0s","_id":"ciznr66nx00lq95bup9pzht9p"},{"post_id":"ciznr66jj004495bucikn7fzx","tag_id":"ciznr66ns00ld95bu64zawvzy","_id":"ciznr66nx00lr95but3ejf6tl"},{"post_id":"ciznr66jj004695bucnrqijzb","tag_id":"ciznr66nq00l595buni6m1zl8","_id":"ciznr66nz00lv95buwqffhmot"},{"post_id":"ciznr66jj004695bucnrqijzb","tag_id":"ciznr66l600ap95bugogkp5x4","_id":"ciznr66nz00lw95buiitbx1ec"},{"post_id":"ciznr66jj004695bucnrqijzb","tag_id":"ciznr66nr00lb95buy99drr0s","_id":"ciznr66o000ly95but5fok9a7"},{"post_id":"ciznr66jj004695bucnrqijzb","tag_id":"ciznr66ns00ld95bu64zawvzy","_id":"ciznr66o000lz95bu0zgtke2m"},{"post_id":"ciznr66jk004795buoibi36gg","tag_id":"ciznr66nq00l595buni6m1zl8","_id":"ciznr66o200m395bufwtfbjby"},{"post_id":"ciznr66jk004795buoibi36gg","tag_id":"ciznr66l600ap95bugogkp5x4","_id":"ciznr66o200m495bu2i32ai4u"},{"post_id":"ciznr66jk004795buoibi36gg","tag_id":"ciznr66nr00lb95buy99drr0s","_id":"ciznr66o300m695bu4u6hbulg"},{"post_id":"ciznr66jk004795buoibi36gg","tag_id":"ciznr66ns00ld95bu64zawvzy","_id":"ciznr66o300m795bul84rll26"},{"post_id":"ciznr66jt004a95buwqsbhk6s","tag_id":"ciznr66nq00l595buni6m1zl8","_id":"ciznr66o600mb95buw0m31f6r"},{"post_id":"ciznr66jt004a95buwqsbhk6s","tag_id":"ciznr66l600ap95bugogkp5x4","_id":"ciznr66o600mc95bu0z4p3rwj"},{"post_id":"ciznr66jt004a95buwqsbhk6s","tag_id":"ciznr66nr00lb95buy99drr0s","_id":"ciznr66o600me95bu3nkevf60"},{"post_id":"ciznr66jt004a95buwqsbhk6s","tag_id":"ciznr66ns00ld95bu64zawvzy","_id":"ciznr66o600mf95bux3teogei"},{"post_id":"ciznr66ju004c95buklqoz76b","tag_id":"ciznr66nq00l595buni6m1zl8","_id":"ciznr66o800mj95buchyxqkz9"},{"post_id":"ciznr66ju004c95buklqoz76b","tag_id":"ciznr66l600ap95bugogkp5x4","_id":"ciznr66o900mk95buz5suqw8f"},{"post_id":"ciznr66ju004c95buklqoz76b","tag_id":"ciznr66nr00lb95buy99drr0s","_id":"ciznr66o900mm95buwi1o8spm"},{"post_id":"ciznr66ju004c95buklqoz76b","tag_id":"ciznr66ns00ld95bu64zawvzy","_id":"ciznr66o900mn95buk63jfto6"},{"post_id":"ciznr66jv004f95buekgyhfv8","tag_id":"ciznr66nq00l595buni6m1zl8","_id":"ciznr66oc00mr95bucnzvjy1x"},{"post_id":"ciznr66jv004f95buekgyhfv8","tag_id":"ciznr66l600ap95bugogkp5x4","_id":"ciznr66oc00ms95budseh27ti"},{"post_id":"ciznr66jv004f95buekgyhfv8","tag_id":"ciznr66nr00lb95buy99drr0s","_id":"ciznr66oc00mu95bu97gs0ivr"},{"post_id":"ciznr66jv004f95buekgyhfv8","tag_id":"ciznr66ns00ld95bu64zawvzy","_id":"ciznr66oc00mv95buj4nj83kx"},{"post_id":"ciznr66jv004h95butg7zi90g","tag_id":"ciznr66nq00l595buni6m1zl8","_id":"ciznr66oe00mz95buynmoxxa6"},{"post_id":"ciznr66jv004h95butg7zi90g","tag_id":"ciznr66l600ap95bugogkp5x4","_id":"ciznr66oe00n095buwv6v8j0h"},{"post_id":"ciznr66jv004h95butg7zi90g","tag_id":"ciznr66nr00lb95buy99drr0s","_id":"ciznr66of00n295bukxpj1pwn"},{"post_id":"ciznr66jv004h95butg7zi90g","tag_id":"ciznr66ns00ld95bu64zawvzy","_id":"ciznr66of00n395bua958udff"},{"post_id":"ciznr66jw004k95buc51abwzu","tag_id":"ciznr66od00my95buwjmjg4j6","_id":"ciznr66og00n595bu529bhv1h"},{"post_id":"ciznr66jw004k95buc51abwzu","tag_id":"ciznr66oe00n195buf0qlm0sl","_id":"ciznr66og00n695bu1cbsmefi"},{"post_id":"ciznr66jw004k95buc51abwzu","tag_id":"ciznr66hm000995buj2hs8itl","_id":"ciznr66og00n895bud2hrni26"},{"post_id":"ciznr66jw004l95bu8dbhvwie","tag_id":"ciznr66kt008o95bukgjwy9gn","_id":"ciznr66oi00nc95bugk17z4n6"},{"post_id":"ciznr66jw004l95bu8dbhvwie","tag_id":"ciznr66kt008r95bu7u2dnfia","_id":"ciznr66oi00nd95bulv7i14uh"},{"post_id":"ciznr66jw004l95bu8dbhvwie","tag_id":"ciznr66mu00hr95bu36edjyn6","_id":"ciznr66oj00nf95bu1cvomg0h"},{"post_id":"ciznr66jw004l95bu8dbhvwie","tag_id":"ciznr66oh00na95bu10uw03hq","_id":"ciznr66oj00ng95bubnty7qpv"},{"post_id":"ciznr66jx004n95buq4uwu741","tag_id":"ciznr66oh00nb95bugljfxs2p","_id":"ciznr66ok00nj95bu7jsv9sh4"},{"post_id":"ciznr66jx004n95buq4uwu741","tag_id":"ciznr66oi00ne95bug1nsy3wz","_id":"ciznr66ok00nk95burf6og1oz"},{"post_id":"ciznr66jx004n95buq4uwu741","tag_id":"ciznr66oj00nh95bug9v5x183","_id":"ciznr66on00nm95buvd7nwfam"},{"post_id":"ciznr66jy004o95buwtr6mdaf","tag_id":"ciznr66oj00ni95buybj3mb1y","_id":"ciznr66on00nn95bu3m6scgx3"},{"post_id":"ciznr66jz004q95buuyhypdmh","tag_id":"ciznr66ok00nl95bukfhshohl","_id":"ciznr66op00nq95buqrbu1yvy"},{"post_id":"ciznr66jz004q95buuyhypdmh","tag_id":"ciznr66ha000295buaciyiv3k","_id":"ciznr66op00nr95buesqija0m"},{"post_id":"ciznr66jz004q95buuyhypdmh","tag_id":"ciznr66oo00no95buafsge3i8","_id":"ciznr66oq00nt95bubdnrjbd4"},{"post_id":"ciznr66k0004s95buf1qjqhyq","tag_id":"ciznr66it002j95buitcnocnt","_id":"ciznr66oq00nu95buyb1kr3o5"},{"post_id":"ciznr66k0004s95buf1qjqhyq","tag_id":"ciznr66oo00np95bum9502tg7","_id":"ciznr66oq00nw95bu55wywrz1"},{"post_id":"ciznr66k0004s95buf1qjqhyq","tag_id":"ciznr66hm000995buj2hs8itl","_id":"ciznr66oq00nx95bucsteo0ba"},{"post_id":"ciznr66k0004u95buy3lmgvos","tag_id":"ciznr66it002j95buitcnocnt","_id":"ciznr66or00nz95bu2lgxqt3f"},{"post_id":"ciznr66k0004u95buy3lmgvos","tag_id":"ciznr66op00ns95buv45b5w7l","_id":"ciznr66or00o095bu6jghh7ke"},{"post_id":"ciznr66k0004u95buy3lmgvos","tag_id":"ciznr66oq00nv95bukccgs7zb","_id":"ciznr66or00o295buako2bh0q"},{"post_id":"ciznr66k1004x95buqmyir5h7","tag_id":"ciznr66oq00ny95bu2n4f2e2c","_id":"ciznr66os00o495bum6d6d79t"},{"post_id":"ciznr66k1004x95buqmyir5h7","tag_id":"ciznr66or00o195buwi3x467l","_id":"ciznr66os00o595buloy8bj22"},{"post_id":"ciznr66k1004z95bu4g1h9unu","tag_id":"ciznr66hm000995buj2hs8itl","_id":"ciznr66ov00ob95bu314ihv6i"},{"post_id":"ciznr66k1004z95bu4g1h9unu","tag_id":"ciznr66os00o395bufxy8wckg","_id":"ciznr66ov00oc95buav5u5f6v"},{"post_id":"ciznr66k1004z95bu4g1h9unu","tag_id":"ciznr66os00o695buxyalny2c","_id":"ciznr66ow00oe95buciu45s34"},{"post_id":"ciznr66k1004z95bu4g1h9unu","tag_id":"ciznr66ot00o795bu527yzgvq","_id":"ciznr66ow00of95burze9ik6r"},{"post_id":"ciznr66k1004z95bu4g1h9unu","tag_id":"ciznr66ot00o895buq9w3sm5t","_id":"ciznr66ox00oh95bu1ia46poa"},{"post_id":"ciznr66k1004z95bu4g1h9unu","tag_id":"ciznr66ot00o995buiiegb2bm","_id":"ciznr66ox00oi95bu2sczj7t9"},{"post_id":"ciznr66k3005195buv3k7a82q","tag_id":"ciznr66ou00oa95buavpuf947","_id":"ciznr66ox00ok95buhc5vwd8b"},{"post_id":"ciznr66k3005195buv3k7a82q","tag_id":"ciznr66ot00o795bu527yzgvq","_id":"ciznr66ox00ol95bupl45va4b"},{"post_id":"ciznr66k3005195buv3k7a82q","tag_id":"ciznr66hm000995buj2hs8itl","_id":"ciznr66oy00on95bup5t4a1xe"},{"post_id":"ciznr66k4005295buvx1zqvvc","tag_id":"ciznr66ow00og95bup3k58fxh","_id":"ciznr66oy00oo95bur0tpj9mn"},{"post_id":"ciznr66k4005295buvx1zqvvc","tag_id":"ciznr66ha000295buaciyiv3k","_id":"ciznr66oz00oq95bufci3n0yl"},{"post_id":"ciznr66k5005495butnzs24so","tag_id":"ciznr66ox00oj95buj3cknggz","_id":"ciznr66oz00or95bud633310c"},{"post_id":"ciznr66k5005495butnzs24so","tag_id":"ciznr66ha000295buaciyiv3k","_id":"ciznr66p000ot95buqc47bwxi"},{"post_id":"ciznr66k5005595bujn8xoi6q","tag_id":"ciznr66ha000295buaciyiv3k","_id":"ciznr66p000ou95bup45pwcw1"},{"post_id":"ciznr66k5005595bujn8xoi6q","tag_id":"ciznr66ow00og95bup3k58fxh","_id":"ciznr66p000ow95bush62zlz3"},{"post_id":"ciznr66k7005c95butieow1n9","tag_id":"ciznr66oq00ny95bu2n4f2e2c","_id":"ciznr66p100ox95buex7vyeva"},{"post_id":"ciznr66k7005c95butieow1n9","tag_id":"ciznr66or00o195buwi3x467l","_id":"ciznr66p100oy95buelv837h9"},{"post_id":"ciznr66k8005e95bumeuhh4hi","tag_id":"ciznr66p000ov95bu8lu5vp8l","_id":"ciznr66p200p095bub6y4j2jk"},{"post_id":"ciznr66k8005e95bumeuhh4hi","tag_id":"ciznr66ha000295buaciyiv3k","_id":"ciznr66p200p195bu7weir16s"},{"post_id":"ciznr66k9005j95buc9v5a6es","tag_id":"ciznr66p100oz95bupxcazzyl","_id":"ciznr66p400p595bulm29ngez"},{"post_id":"ciznr66k9005j95buc9v5a6es","tag_id":"ciznr66oo00np95bum9502tg7","_id":"ciznr66p400p695bucpgsjffb"},{"post_id":"ciznr66k9005j95buc9v5a6es","tag_id":"ciznr66hm000995buj2hs8itl","_id":"ciznr66p500p895bun2o1p21o"},{"post_id":"ciznr66k9005j95buc9v5a6es","tag_id":"ciznr66p200p395bu1oidauqr","_id":"ciznr66p500p995buru7n2c8o"},{"post_id":"ciznr66k9005j95buc9v5a6es","tag_id":"ciznr66it002j95buitcnocnt","_id":"ciznr66p600pb95bun7mcpgt3"},{"post_id":"ciznr66k9005l95bupwq4pu2a","tag_id":"ciznr66or00o195buwi3x467l","_id":"ciznr66p600pc95bun6vx9rg8"},{"post_id":"ciznr66k9005l95bupwq4pu2a","tag_id":"ciznr66p400p795buauuo92nt","_id":"ciznr66p600pe95bu66tndi97"},{"post_id":"ciznr66ka005o95buiagttr9h","tag_id":"ciznr66ow00og95bup3k58fxh","_id":"ciznr66p700pf95butd9mbxq2"},{"post_id":"ciznr66ka005o95buiagttr9h","tag_id":"ciznr66ha000295buaciyiv3k","_id":"ciznr66p700pg95buzvaafol3"},{"post_id":"ciznr66ka005o95buiagttr9h","tag_id":"ciznr66p600pd95buloq6ynba","_id":"ciznr66p700ph95bui0auhzln"}],"Tag":[{"name":"文笔","_id":"ciznr66ha000295buaciyiv3k"},{"name":"生活感悟","_id":"ciznr66hh000695bu7oap4uyu"},{"name":"Android","_id":"ciznr66hm000995buj2hs8itl"},{"name":"2d","_id":"ciznr66ho000e95buu6susojr"},{"name":"drawing","_id":"ciznr66hq000h95buk9bk2v0z"},{"name":"canvas","_id":"ciznr66ht000l95buu69izh9e"},{"name":"360手机卫士","_id":"ciznr66hv000o95bu9qxqjqit"},{"name":"InfoQ","_id":"ciznr66hw000t95buaujcqgtl"},{"name":"优化","_id":"ciznr66i1001195bu5nfhbffs"},{"name":"总结","_id":"ciznr66i3001595buk4owbj85"},{"name":"AIDL","_id":"ciznr66i6001895buec4etbd3"},{"name":"通信","_id":"ciznr66i8001d95buyhe7f8nf"},{"name":"imageview","_id":"ciznr66ic001m95buedtl9cib"},{"name":"viewpager","_id":"ciznr66ie001s95bu9r27rs0i"},{"name":"缩放","_id":"ciznr66ih001z95butu1cx3yb"},{"name":"数据库","_id":"ciznr66ij002295bu16971meu"},{"name":"架构","_id":"ciznr66il002795bu9k8g1vmp"},{"name":"JLibrary","_id":"ciznr66ir002g95bupzbglyo8"},{"name":"项目","_id":"ciznr66it002j95buitcnocnt"},{"name":"分析","_id":"ciznr66iu002m95bu596i3ful"},{"name":"进程通信","_id":"ciznr66iw002r95bud1ur00mp"},{"name":"推送","_id":"ciznr66j1003195buvpnwedb3"},{"name":"探究","_id":"ciznr66j3003695buloxcap65"},{"name":"socket","_id":"ciznr66j7003a95bugjkndd3e"},{"name":"TCP","_id":"ciznr66j9003f95buzxwwxoed"},{"name":"微信","_id":"ciznr66jb003k95bu9z8fuwqz"},{"name":"网络","_id":"ciznr66jd003n95bu9blbr08n"},{"name":"Falcon","_id":"ciznr66je003q95bujokp0rks"},{"name":"Joaquim","_id":"ciznr66jg003v95bubsz6uzeo"},{"name":"flatbuffer","_id":"ciznr66jk004895busl5ed5l7"},{"name":"optimize","_id":"ciznr66ju004d95buh1p1t2ua"},{"name":"python","_id":"ciznr66jv004i95bucmhwqeut"},{"name":"文件管理","_id":"ciznr66jz004p95bu1j5dokxn"},{"name":"缓存管理","_id":"ciznr66k1004v95bupiia85h2"},{"name":"git","_id":"ciznr66k6005695bu8v2jab8y"},{"name":"管理","_id":"ciznr66k7005b95bu2hg52wwl"},{"name":"Codelab","_id":"ciznr66k8005g95bullb7toog"},{"name":"google","_id":"ciznr66ka005m95bumhe0j2gu"},{"name":"Material Design","_id":"ciznr66kc005v95bu9szwbcbn"},{"name":"java","_id":"ciznr66kc005x95bu2jois28f"},{"name":"Lambda","_id":"ciznr66kc006095bumxf9u9wx"},{"name":"LeakCanary","_id":"ciznr66kd006595buendrgkvs"},{"name":"内存泄漏","_id":"ciznr66ke006895bus491bzjw"},{"name":"使用","_id":"ciznr66ke006b95bumvtbn819"},{"name":"Square","_id":"ciznr66ke006d95bu6ytnb01h"},{"name":"PhotoGallery","_id":"ciznr66kf006l95bukmmi9bdq"},{"name":"Vollery","_id":"ciznr66kg006o95buogk3dh7b"},{"name":"Picasso","_id":"ciznr66kg006r95bupwo6owe7"},{"name":"wordpress","_id":"ciznr66kh006z95buds4pbzrm"},{"name":"多线程","_id":"ciznr66kj007495but0jy9h26"},{"name":"AsyncTask","_id":"ciznr66kj007795buyebxcsos"},{"name":"RxJava","_id":"ciznr66kk007a95bu4nljq8wo"},{"name":"异步","_id":"ciznr66kk007d95bucf8eyzj7"},{"name":"Java","_id":"ciznr66kk007e95bu3hkmx9ru"},{"name":"框架","_id":"ciznr66kk007f95bunc3w8my5"},{"name":"RxAndroid","_id":"ciznr66km007j95buqb2k36i1"},{"name":"响应式编程","_id":"ciznr66kn007p95bujkdagbzd"},{"name":"模式","_id":"ciznr66kn007r95bui8en2cj0"},{"name":"观察者模式","_id":"ciznr66kn007s95bux5flyfqp"},{"name":"parse","_id":"ciznr66ko007t95buzyrr1l40"},{"name":"svg","_id":"ciznr66kp007w95buedavd3za"},{"name":"解析","_id":"ciznr66kp007z95buri6gw5hx"},{"name":"keybord","_id":"ciznr66kr008b95buotnarym9"},{"name":"Panel","_id":"ciznr66ks008f95bu1mfbedne"},{"name":"Wechat","_id":"ciznr66ks008h95bumhjnt68x"},{"name":"硬件","_id":"ciznr66ks008i95buo4f1otuh"},{"name":"路由器","_id":"ciznr66kt008l95bu633cosgo"},{"name":"翻墙","_id":"ciznr66kt008o95bukgjwy9gn"},{"name":"shadowsocks","_id":"ciznr66kt008q95buskxb2two"},{"name":"OpenWrt","_id":"ciznr66kt008r95bu7u2dnfia"},{"name":"mac","_id":"ciznr66kt008s95bufniml26p"},{"name":"proxy","_id":"ciznr66ku008v95bulzfmry2m"},{"name":"代理","_id":"ciznr66kv009095buk7inhxax"},{"name":"代码审查","_id":"ciznr66kv009295bupykx7gwh"},{"name":"Google","_id":"ciznr66kw009595busuywxn30"},{"name":"Alipay","_id":"ciznr66kx009a95bu292gns16"},{"name":"Architecture","_id":"ciznr66kx009d95buzp705gxv"},{"name":"Decoupling","_id":"ciznr66kx009f95bui7tyivpe"},{"name":"ActivityManagerService","_id":"ciznr66ky009g95bu8pis10i7"},{"name":"ActivityThread","_id":"ciznr66ky009j95buxiq31g1c"},{"name":"Zygote","_id":"ciznr66ky009l95bu0ci3bfx1"},{"name":"视图","_id":"ciznr66ky009m95buy8guhtwy"},{"name":"View","_id":"ciznr66kz009p95bucmerqud8"},{"name":"重绘","_id":"ciznr66kz009r95bubc8jznws"},{"name":"动画","_id":"ciznr66kz009s95buqpodh5ru"},{"name":"animation","_id":"ciznr66l1009v95bujdycmwce"},{"name":"TimeInterpolator","_id":"ciznr66l1009y95buz2vxo2i6"},{"name":"TypeEvaluator","_id":"ciznr66l100a095buf5u4bmst"},{"name":"ObjectAnimator","_id":"ciznr66l100a195bucwltdx4c"},{"name":"ValueAnimator","_id":"ciznr66l200a295bugshpgg5w"},{"name":"AnimatorSet","_id":"ciznr66l300a395bui2ivw0ab"},{"name":"ART","_id":"ciznr66l300a495buvoozwrxd"},{"name":"Dalvik","_id":"ciznr66l400a795bu0sqo8i5v"},{"name":"安装","_id":"ciznr66l500aa95bu2ypsvuo9"},{"name":"运行","_id":"ciznr66l500ad95bue7pe0qr9"},{"name":"dex","_id":"ciznr66l500ag95burjeqdt0f"},{"name":"gradle","_id":"ciznr66l600aj95bukx7gak2b"},{"name":"ant","_id":"ciznr66l600am95buwfp2lx81"},{"name":"ClassLoader","_id":"ciznr66l600ao95bu1n0r77ce"},{"name":"安全","_id":"ciznr66l600ap95bugogkp5x4"},{"name":"HttpURLConnection","_id":"ciznr66l800at95bu8u5luvfv"},{"name":"HttpClient","_id":"ciznr66l800aw95buc3p6x6j0"},{"name":"Handler","_id":"ciznr66l900az95bu6whs1uw9"},{"name":"Looper","_id":"ciznr66la00b295bu6mfm4a47"},{"name":"消息机制","_id":"ciznr66lb00b595bu4i7dwqmy"},{"name":"MessageQueue","_id":"ciznr66lb00b695buid9t0888"},{"name":"Barrier","_id":"ciznr66lb00b795bu0fsh5s0e"},{"name":"多进程","_id":"ciznr66lb00b895bupim742a1"},{"name":"Binder","_id":"ciznr66lc00bb95bu2molrkd7"},{"name":"ServiceManager","_id":"ciznr66lc00be95buiic10d5g"},{"name":"Record","_id":"ciznr66ld00bh95bu1qyudtoa"},{"name":"MediaRecorder","_id":"ciznr66ld00bk95busggpyvly"},{"name":"JVM","_id":"ciznr66ld00bn95bu1renvbls"},{"name":"典范","_id":"ciznr66le00bs95buw6titbik"},{"name":"Scheduler","_id":"ciznr66lf00bt95bubpwq11r6"},{"name":"Job Scheduler","_id":"ciznr66lf00bw95buq9mdcm8o"},{"name":"Syncs-Adapter","_id":"ciznr66lg00bz95buoyz393i9"},{"name":"AlarmManager","_id":"ciznr66lg00c195bumz3maxqo"},{"name":"Doze Mode","_id":"ciznr66lg00c295bu1gjop5so"},{"name":"FileProvider","_id":"ciznr66lg00c395bu6efek6hk"},{"name":"URI","_id":"ciznr66lh00c695bu0x4sqp1a"},{"name":"演讲","_id":"ciznr66lh00c995buy5300p23"},{"name":"单元测试","_id":"ciznr66li00cc95buecj0y4t1"},{"name":"模拟测试","_id":"ciznr66li00cf95buk1chinii"},{"name":"UI测试","_id":"ciznr66li00ch95bucwcov3js"},{"name":"稳定性","_id":"ciznr66lj00ci95bu0dlw1653"},{"name":"进程","_id":"ciznr66lj00cj95buq4jli5kl"},{"name":"线程","_id":"ciznr66lk00cm95bua5apnttr"},{"name":"组件","_id":"ciznr66lk00cp95buhcw6brsi"},{"name":"调度","_id":"ciznr66lk00cr95buvaodabmg"},{"name":"心理学","_id":"ciznr66ll00cs95bu7uyquu04"},{"name":"屌丝","_id":"ciznr66ll00cv95budzjmlfmb"},{"name":"理论","_id":"ciznr66lm00cy95buxfx9pm1d"},{"name":"笔记","_id":"ciznr66ln00d095buhuqlbman"},{"name":"虚拟机","_id":"ciznr66lo00d495buic2aeifm"},{"name":"Layout","_id":"ciznr66lp00d795bu59wbxztp"},{"name":"UI","_id":"ciznr66lp00da95bug2kuxhx6"},{"name":"心跳","_id":"ciznr66lq00db95buqe6bad77"},{"name":"弱网长连接","_id":"ciznr66lr00dg95buozk6qx8h"},{"name":"9patch","_id":"ciznr66lr00dh95bu89g1zi97"},{"name":"density","_id":"ciznr66lr00dk95bu8vosaea1"},{"name":"densityDPI","_id":"ciznr66ls00dn95bu386q3jff"},{"name":"dp","_id":"ciznr66ls00do95bu0krrri1y"},{"name":"dpi","_id":"ciznr66ls00dp95bufkh74wd4"},{"name":"ppi","_id":"ciznr66lt00dq95bu10z050p2"},{"name":"Download","_id":"ciznr66lt00dr95budqx7fjm0"},{"name":"Parallel","_id":"ciznr66lu00du95buzaermrjk"},{"name":"Serial","_id":"ciznr66lu00dx95buyqfkg763"},{"name":"Project","_id":"ciznr66lu00e095buzrtt8c9v"},{"name":"GC","_id":"ciznr66lu00e195bubsc1uh36"},{"name":"Concurrent GC","_id":"ciznr66lv00e495bu3xh4aqtq"},{"name":"Activity Heap","_id":"ciznr66lv00e795buc8vsmxes"},{"name":"Zygote Heap","_id":"ciznr66lw00e895buzbwjenc7"},{"name":"Mark-Sweep","_id":"ciznr66lw00e995buymo3zdte"},{"name":"Google IO","_id":"ciznr66lw00ea95buw3tkpls2"},{"name":"Firebase","_id":"ciznr66lx00ed95bubxlvyrgz"},{"name":"Allo","_id":"ciznr66lx00eg95bujg5508ui"},{"name":"VR Mode","_id":"ciznr66ly00ei95bujqc9p0n0"},{"name":"Android N","_id":"ciznr66ly00ej95bu4q4a92qu"},{"name":"Instant App","_id":"ciznr66ly00ek95buz9qun7c9"},{"name":"Build","_id":"ciznr66lz00el95bus5da1dwz"},{"name":"Proguard","_id":"ciznr66m000eo95bu5x04vq6f"},{"name":"Gradle","_id":"ciznr66m000er95bulh6q6dy8"},{"name":"DexGuard","_id":"ciznr66m000eu95bumfhv1cw2"},{"name":"Multi-Dex","_id":"ciznr66m100ew95bur1v0k4dl"},{"name":"gRPC","_id":"ciznr66m100ex95bu14gxlyka"},{"name":"Thrift","_id":"ciznr66m200f095buu8saljqh"},{"name":"HTTP/2","_id":"ciznr66m200f395bu99wc688w"},{"name":"Proto3","_id":"ciznr66m300f695buqke90nbg"},{"name":"platform","_id":"ciznr66m300f795bucfr8bhe9"},{"name":"hybrid","_id":"ciznr66m400fa95buwsv7pu09"},{"name":"phoneGap","_id":"ciznr66m400fd95buoqsknotf"},{"name":"Intellij","_id":"ciznr66m400fe95bu318uwtn7"},{"name":"使用说明","_id":"ciznr66md00fh95butuwhx9gl"},{"name":"JDK","_id":"ciznr66me00fj95bukv6agmyj"},{"name":"Synchronized","_id":"ciznr66mf00fn95bu8ay1kr6j"},{"name":"同步","_id":"ciznr66mf00fo95bua9bfytej"},{"name":"偏向锁","_id":"ciznr66mf00fp95bu69oz2qv9"},{"name":"轻量级锁","_id":"ciznr66mg00fq95butvzzaw7t"},{"name":"重量级锁","_id":"ciznr66mg00fr95bu8dtephj2"},{"name":"自旋","_id":"ciznr66mg00fs95bujerfj6eu"},{"name":"键盘","_id":"ciznr66mg00ft95burld71whi"},{"name":"面板","_id":"ciznr66mi00fw95bu644c9kui"},{"name":"闪动","_id":"ciznr66mi00fz95bu1h6109oh"},{"name":"布局","_id":"ciznr66mi00g295bumsgwev2z"},{"name":"MIT","_id":"ciznr66mj00g695bu1gdsoe2v"},{"name":"BSD","_id":"ciznr66mk00g995but2t01ptn"},{"name":"Apache License","_id":"ciznr66mk00gc95butv88i97d"},{"name":"GPL","_id":"ciznr66mk00gf95butmr2ew9l"},{"name":"LGPL","_id":"ciznr66ml00gh95bu4ybjh389"},{"name":"英语流利说","_id":"ciznr66ml00gi95bu99k51mbw"},{"name":"Kotlin","_id":"ciznr66mm00gl95buyt2d9559"},{"name":"Programing","_id":"ciznr66mn00gr95bu9ljazi8d"},{"name":"Effective Java","_id":"ciznr66mn00gu95bucuuowef0"},{"name":"draw","_id":"ciznr66mn00gv95bucbdabssf"},{"name":"sweep","_id":"ciznr66mo00gy95bursbe8is1"},{"name":"gradient","_id":"ciznr66mo00h195buar9em9k5"},{"name":"open source","_id":"ciznr66mp00h295buslba48fs"},{"name":"Message","_id":"ciznr66mq00h695bungnwa9h3"},{"name":"Thread safe","_id":"ciznr66mq00h995butralo4s0"},{"name":"recycle","_id":"ciznr66mr00ha95bulbxbyp20"},{"name":"project","_id":"ciznr66mr00hb95buculew333"},{"name":"ndk","_id":"ciznr66mr00hc95bupobktd0z"},{"name":"jni","_id":"ciznr66ms00hf95bupisocucc"},{"name":"C","_id":"ciznr66ms00hi95bu5pie5hcz"},{"name":"C++","_id":"ciznr66mt00hk95buph9jim7m"},{"name":"ShadowSocks","_id":"ciznr66mu00hr95bu36edjyn6"},{"name":"Newifi","_id":"ciznr66mv00ht95burvaw6s6w"},{"name":"STN","_id":"ciznr66mv00hu95bumkr3fj3i"},{"name":"Mars","_id":"ciznr66mw00hx95bupkkdj1ms"},{"name":"XLog","_id":"ciznr66mx00i195bupx61sxjg"},{"name":"RTT","_id":"ciznr66mx00i295burgtpaomo"},{"name":"Notification","_id":"ciznr66my00i395bunzxf6jmu"},{"name":"最佳实践","_id":"ciznr66mz00i695buoy2mllf8"},{"name":"MessagingStyle","_id":"ciznr66mz00i995bupllrbqw5"},{"name":"Bundled Notification","_id":"ciznr66mz00ib95buaqm2ewoc"},{"name":"Direct Reply","_id":"ciznr66n000ic95bu56142l9g"},{"name":"Socket","_id":"ciznr66n000id95bubewajupg"},{"name":"HTTP","_id":"ciznr66n100ig95buhvhx1d5k"},{"name":"HTTPS","_id":"ciznr66n100ij95bund8kze1h"},{"name":"SPDY","_id":"ciznr66n200il95bu2pe7bl2g"},{"name":"QUIC","_id":"ciznr66n200in95bumifavu2q"},{"name":"BBR","_id":"ciznr66n300io95bu4ojlvz11"},{"name":"MVC","_id":"ciznr66n300ip95buqvt8v0vl"},{"name":"MVP","_id":"ciznr66n400is95bujocr76r6"},{"name":"MVVM","_id":"ciznr66n500iv95buhu3s8uul"},{"name":"迅雷快鸟","_id":"ciznr66n600j195buxvjb47dx"},{"name":"Fastdick","_id":"ciznr66n700j595buajg38hb4"},{"name":"宽带提速","_id":"ciznr66n700j795bunwgt4zl1"},{"name":"android","_id":"ciznr66n700j895buqiyvfzmc"},{"name":"Percent","_id":"ciznr66n800jb95buykkrc5ht"},{"name":"Progress","_id":"ciznr66n800je95budq4q1kiu"},{"name":"github","_id":"ciznr66n900jf95bu9fy0sp6c"},{"name":"mysql","_id":"ciznr66n900jg95buzl1054l8"},{"name":"php","_id":"ciznr66na00jj95bu0f3azryp"},{"name":"sql","_id":"ciznr66na00jm95bu0mgzl5nb"},{"name":"留言板","_id":"ciznr66nb00jn95buy3fkhjc4"},{"name":"Qiniu","_id":"ciznr66nc00jr95buhldn9r87"},{"name":"ImageLoader","_id":"ciznr66nc00ju95buvg5lv8gs"},{"name":"META-INFO","_id":"ciznr66ng00k095buwe4hkgtw"},{"name":"证书","_id":"ciznr66ng00k395bu3pt3sz5k"},{"name":"签名","_id":"ciznr66nh00k695buyz62rqrn"},{"name":"攻击","_id":"ciznr66nh00k895bua0jk7cwf"},{"name":"后端","_id":"ciznr66nh00k995buwe11yivk"},{"name":"rails","_id":"ciznr66nj00kc95buui08il3e"},{"name":"ruby","_id":"ciznr66nj00kf95bufus1h97m"},{"name":"语言","_id":"ciznr66nk00ki95bua0xtb5qu"},{"name":"SpannableString","_id":"ciznr66nk00kj95buteed420r"},{"name":"Span","_id":"ciznr66nl00km95bu79moefx6"},{"name":"Ellipsize","_id":"ciznr66nl00kp95bu0vtn3780"},{"name":"MaxWidth","_id":"ciznr66nm00kq95bur236qmgx"},{"name":"ThreadDebugger","_id":"ciznr66nm00kr95buuaq9z77y"},{"name":"ThreadPool","_id":"ciznr66nn00ku95bu644gomad"},{"name":"Debugger","_id":"ciznr66no00kx95bu6axdi35y"},{"name":"Thread","_id":"ciznr66no00l095bueytop1go"},{"name":"Touch","_id":"ciznr66np00l295buwxzyhsob"},{"name":"2015乌云白帽大会","_id":"ciznr66nq00l595buni6m1zl8"},{"name":"白帽","_id":"ciznr66nr00lb95buy99drr0s"},{"name":"会议笔记","_id":"ciznr66ns00ld95bu64zawvzy"},{"name":"csipsimple","_id":"ciznr66od00my95buwjmjg4j6"},{"name":"voip","_id":"ciznr66oe00n195buf0qlm0sl"},{"name":"WR720N","_id":"ciznr66oh00na95bu10uw03hq"},{"name":"zsh","_id":"ciznr66oh00nb95bugljfxs2p"},{"name":"Linux","_id":"ciznr66oi00ne95bug1nsy3wz"},{"name":"shell","_id":"ciznr66oj00nh95bug9v5x183"},{"name":"抄录","_id":"ciznr66oj00ni95buybj3mb1y"},{"name":"物联网","_id":"ciznr66ok00nl95bukfhshohl"},{"name":"议论","_id":"ciznr66oo00no95buafsge3i8"},{"name":"app","_id":"ciznr66oo00np95bum9502tg7"},{"name":"Cocos2d-x","_id":"ciznr66op00ns95buv45b5w7l"},{"name":"游戏","_id":"ciznr66oq00nv95bukccgs7zb"},{"name":"娱乐","_id":"ciznr66oq00ny95bu2n4f2e2c"},{"name":"视频","_id":"ciznr66or00o195buwi3x467l"},{"name":"ListView","_id":"ciznr66os00o395bufxy8wckg"},{"name":"synchronized","_id":"ciznr66os00o695buxyalny2c"},{"name":"异步加载","_id":"ciznr66ot00o795bu527yzgvq"},{"name":"文件结构","_id":"ciznr66ot00o895buq9w3sm5t"},{"name":"本地缓存","_id":"ciznr66ot00o995buiiegb2bm"},{"name":"xml","_id":"ciznr66ou00oa95buavpuf947"},{"name":"随笔","_id":"ciznr66ow00og95bup3k58fxh"},{"name":"日记","_id":"ciznr66ox00oj95buj3cknggz"},{"name":"感悟","_id":"ciznr66p000ov95bu8lu5vp8l"},{"name":"远程控制","_id":"ciznr66p100oz95bupxcazzyl"},{"name":"大学生挑战杯","_id":"ciznr66p200p395bu1oidauqr"},{"name":"唱歌","_id":"ciznr66p400p795buauuo92nt"},{"name":"奋斗","_id":"ciznr66p600pd95buloq6ynba"}]}}